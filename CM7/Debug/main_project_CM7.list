
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad98  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800b038  0800b038  0001b038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b430  0800b430  0001b430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800b438  0800b438  0001b438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b440  0800b440  0001b440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009c0  24000000  0800b444  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009178  240009c0  0800be04  000209c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24009b38  0800be04  00029b38  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000259f5  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004152  00000000  00000000  000463e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012e0  00000000  00000000  0004a538  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001160  00000000  00000000  0004b818  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003fb35  00000000  00000000  0004c978  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00013770  00000000  00000000  0008c4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0018ea4d  00000000  00000000  0009fc1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  0022e66a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057f8  00000000  00000000  0022e754  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000008d6  00000000  00000000  00233f4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240009c0 	.word	0x240009c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b020 	.word	0x0800b020

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240009c4 	.word	0x240009c4
 80002dc:	0800b020 	.word	0x0800b020

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <_Z13inst_absolutePfS_>:
#include <main.hpp>
#include "math.h"

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	int j = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <_Z13inst_absolutePfS_+0x8c>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	429a      	cmp	r2, r3
 800078c:	da32      	bge.n	80007f4 <_Z13inst_absolutePfS_+0x84>
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	ed93 7a00 	vldr	s14, [r3]
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	edd3 7a00 	vldr	s15, [r3]
 80007a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	3301      	adds	r3, #1
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	4413      	add	r3, r2
 80007b4:	edd3 6a00 	vldr	s13, [r3]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	3301      	adds	r3, #1
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	18d4      	adds	r4, r2, r3
 80007d6:	eeb0 0a67 	vmov.f32	s0, s15
 80007da:	f007 f8b1 	bl	8007940 <sqrtf>
 80007de:	eef0 7a40 	vmov.f32	s15, s0
 80007e2:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3301      	adds	r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	3302      	adds	r3, #2
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	e7c6      	b.n	8000782 <_Z13inst_absolutePfS_+0x12>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	0800b170 	.word	0x0800b170

08000800 <_Z10inst_phasePfS_>:

void inst_phase(float32_t in[], float32_t out[]){
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	int j = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <_Z10inst_phasePfS_+0x6c>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	429a      	cmp	r2, r3
 800081c:	da21      	bge.n	8000862 <_Z10inst_phasePfS_+0x62>
		out[j] = atan2f(in[i+1], in[i]);
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	3301      	adds	r3, #1
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	edd3 7a00 	vldr	s15, [r3]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	ed93 7a00 	vldr	s14, [r3]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	18d4      	adds	r4, r2, r3
 8000840:	eef0 0a47 	vmov.f32	s1, s14
 8000844:	eeb0 0a67 	vmov.f32	s0, s15
 8000848:	f007 f878 	bl	800793c <atan2f>
 800084c:	eef0 7a40 	vmov.f32	s15, s0
 8000850:	edc4 7a00 	vstr	s15, [r4]
		j++;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3301      	adds	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	3302      	adds	r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	e7d7      	b.n	8000812 <_Z10inst_phasePfS_+0x12>
	}
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	bf00      	nop
 800086c:	0800b170 	.word	0x0800b170

08000870 <_Z6unwrapPfS_>:

void unwrap(float32_t in[], float32_t out[]){
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	        end
	    end
	end
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = M_PI;
 800087e:	4b48      	ldr	r3, [pc, #288]	; (80009a0 <_Z6unwrapPfS_+0x130>)
 8000880:	60fb      	str	r3, [r7, #12]
	float32_t diff = 0.0f;
 8000882:	f04f 0300 	mov.w	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < (frameSize - 1); i++){
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	4b45      	ldr	r3, [pc, #276]	; (80009a4 <_Z6unwrapPfS_+0x134>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	429a      	cmp	r2, r3
 8000896:	da53      	bge.n	8000940 <_Z6unwrapPfS_+0xd0>
		out[i] = in[i] + 2*M_PI*k;
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4413      	add	r3, r2
 80008a0:	edd3 7a00 	vldr	s15, [r3]
 80008a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008a8:	8afb      	ldrh	r3, [r7, #22]
 80008aa:	ee07 3a90 	vmov	s15, r3
 80008ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008b2:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000998 <_Z6unwrapPfS_+0x128>
 80008b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80008ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ca:	edc3 7a00 	vstr	s15, [r3]
		diff = fabsf(in[i+1] - in[i]);
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	3301      	adds	r3, #1
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	ed93 7a00 	vldr	s14, [r3]
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	edd3 7a00 	vldr	s15, [r3]
 80008e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ec:	eef0 7ae7 	vabs.f32	s15, s15
 80008f0:	edc7 7a02 	vstr	s15, [r7, #8]
		if(diff > alpha){
 80008f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80008f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80008fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000904:	dd18      	ble.n	8000938 <_Z6unwrapPfS_+0xc8>
			if(in[i+1] < in[i]){
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	3301      	adds	r3, #1
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	ed93 7a00 	vldr	s14, [r3]
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	edd3 7a00 	vldr	s15, [r3]
 8000920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000928:	d503      	bpl.n	8000932 <_Z6unwrapPfS_+0xc2>
				k++;
 800092a:	8afb      	ldrh	r3, [r7, #22]
 800092c:	3301      	adds	r3, #1
 800092e:	82fb      	strh	r3, [r7, #22]
 8000930:	e002      	b.n	8000938 <_Z6unwrapPfS_+0xc8>
			} else {
				k--;
 8000932:	8afb      	ldrh	r3, [r7, #22]
 8000934:	3b01      	subs	r3, #1
 8000936:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	3301      	adds	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	e7a5      	b.n	800088c <_Z6unwrapPfS_+0x1c>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <_Z6unwrapPfS_+0x134>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800094a:	4413      	add	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800095a:	8afb      	ldrh	r3, [r7, #22]
 800095c:	ee07 3a90 	vmov	s15, r3
 8000960:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000964:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000998 <_Z6unwrapPfS_+0x128>
 8000968:	ee27 7b05 	vmul.f64	d7, d7, d5
 800096c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <_Z6unwrapPfS_+0x134>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800097a:	4413      	add	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000986:	edc3 7a00 	vstr	s15, [r3]
}
 800098a:	bf00      	nop
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	54442d18 	.word	0x54442d18
 800099c:	401921fb 	.word	0x401921fb
 80009a0:	40490fdb 	.word	0x40490fdb
 80009a4:	0800b170 	.word	0x0800b170

080009a8 <_Z14inst_frequencyPfS_>:

void inst_frequency(float32_t in[], float32_t out[]){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <_Z14inst_frequencyPfS_+0x158>)
 80009b4:	f242 0210 	movw	r2, #8208	; 0x2010
 80009b8:	443a      	add	r2, r7
 80009ba:	4413      	add	r3, r2
 80009bc:	6018      	str	r0, [r3, #0]
 80009be:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <_Z14inst_frequencyPfS_+0x15c>)
 80009c0:	f242 0210 	movw	r2, #8208	; 0x2010
 80009c4:	443a      	add	r2, r7
 80009c6:	4413      	add	r3, r2
 80009c8:	6019      	str	r1, [r3, #0]
	float32_t phase[1024] = {0};
 80009ca:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <_Z14inst_frequencyPfS_+0x160>)
 80009cc:	f242 0210 	movw	r2, #8208	; 0x2010
 80009d0:	443a      	add	r2, r7
 80009d2:	4413      	add	r3, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	461a      	mov	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f007 fbf9 	bl	80081d4 <memset>
	float32_t unwrapped_phase[1024] = {0};
 80009e2:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <_Z14inst_frequencyPfS_+0x164>)
 80009e4:	f242 0210 	movw	r2, #8208	; 0x2010
 80009e8:	443a      	add	r2, r7
 80009ea:	4413      	add	r3, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	461a      	mov	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f007 fbed 	bl	80081d4 <memset>
	float32_t C = 1 / M_TWOPI;
 80009fa:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <_Z14inst_frequencyPfS_+0x168>)
 80009fc:	f242 0208 	movw	r2, #8200	; 0x2008
 8000a00:	443a      	add	r2, r7
 8000a02:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 8000a04:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <_Z14inst_frequencyPfS_+0x160>)
 8000a06:	f242 0310 	movw	r3, #8208	; 0x2010
 8000a0a:	443b      	add	r3, r7
 8000a0c:	441a      	add	r2, r3
 8000a0e:	4b3c      	ldr	r3, [pc, #240]	; (8000b00 <_Z14inst_frequencyPfS_+0x158>)
 8000a10:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a14:	4439      	add	r1, r7
 8000a16:	440b      	add	r3, r1
 8000a18:	4611      	mov	r1, r2
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	f7ff fef0 	bl	8000800 <_Z10inst_phasePfS_>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8000a20:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <_Z14inst_frequencyPfS_+0x164>)
 8000a22:	f242 0310 	movw	r3, #8208	; 0x2010
 8000a26:	443b      	add	r3, r7
 8000a28:	441a      	add	r2, r3
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <_Z14inst_frequencyPfS_+0x160>)
 8000a2c:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a30:	4439      	add	r1, r7
 8000a32:	440b      	add	r3, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff1a 	bl	8000870 <_Z6unwrapPfS_>
	for(int i = 0; i < (frameSize-1); i++){
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000a42:	443a      	add	r2, r7
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <_Z14inst_frequencyPfS_+0x16c>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f242 020c 	movw	r2, #8204	; 0x200c
 8000a50:	443a      	add	r2, r7
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	da3b      	bge.n	8000ad0 <_Z14inst_frequencyPfS_+0x128>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 8000a58:	f242 030c 	movw	r3, #8204	; 0x200c
 8000a5c:	443b      	add	r3, r7
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <_Z14inst_frequencyPfS_+0x164>)
 8000a64:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a68:	4439      	add	r1, r7
 8000a6a:	440b      	add	r3, r1
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	ed93 7a00 	vldr	s14, [r3]
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <_Z14inst_frequencyPfS_+0x164>)
 8000a76:	f242 0210 	movw	r2, #8208	; 0x2010
 8000a7a:	443a      	add	r2, r7
 8000a7c:	4413      	add	r3, r2
 8000a7e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000a82:	443a      	add	r2, r7
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	edd3 7a00 	vldr	s15, [r3]
 8000a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a92:	f242 030c 	movw	r3, #8204	; 0x200c
 8000a96:	443b      	add	r3, r7
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	009a      	lsls	r2, r3, #2
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <_Z14inst_frequencyPfS_+0x15c>)
 8000a9e:	f242 0110 	movw	r1, #8208	; 0x2010
 8000aa2:	4439      	add	r1, r7
 8000aa4:	440b      	add	r3, r1
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	f242 0208 	movw	r2, #8200	; 0x2008
 8000aae:	443a      	add	r2, r7
 8000ab0:	edd2 7a00 	vldr	s15, [r2]
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8000abc:	f242 030c 	movw	r3, #8204	; 0x200c
 8000ac0:	443b      	add	r3, r7
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f242 020c 	movw	r2, #8204	; 0x200c
 8000aca:	443a      	add	r2, r7
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e7ba      	b.n	8000a46 <_Z14inst_frequencyPfS_+0x9e>
	}
	out[frameSize - 1] = 0;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <_Z14inst_frequencyPfS_+0x16c>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000ada:	4413      	add	r3, r2
 8000adc:	009a      	lsls	r2, r3, #2
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <_Z14inst_frequencyPfS_+0x15c>)
 8000ae0:	f242 0110 	movw	r1, #8208	; 0x2010
 8000ae4:	4439      	add	r1, r7
 8000ae6:	440b      	add	r3, r1
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	ffffdff4 	.word	0xffffdff4
 8000b04:	ffffdff0 	.word	0xffffdff0
 8000b08:	ffffeff8 	.word	0xffffeff8
 8000b0c:	ffffdff8 	.word	0xffffdff8
 8000b10:	3e22f983 	.word	0x3e22f983
 8000b14:	0800b170 	.word	0x0800b170

08000b18 <_Z36inst_centralized_normalized_absolutePfS_>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <_Z36inst_centralized_normalized_absolutePfS_+0xf4>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f007 f905 	bl	8007d48 <malloc>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <_Z36inst_centralized_normalized_absolutePfS_+0xf4>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f007 f8fd 	bl	8007d48 <malloc>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	61bb      	str	r3, [r7, #24]
	inst_absolute(in, &absolute[0]);
 8000b52:	69f9      	ldr	r1, [r7, #28]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fe0b 	bl	8000770 <_Z13inst_absolutePfS_>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <_Z36inst_centralized_normalized_absolutePfS_+0xf4>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	f107 0210 	add.w	r2, r7, #16
 8000b68:	69f8      	ldr	r0, [r7, #28]
 8000b6a:	f006 fe81 	bl	8007870 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <_Z36inst_centralized_normalized_absolutePfS_+0xf4>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	da13      	bge.n	8000ba6 <_Z36inst_centralized_normalized_absolutePfS_+0x8e>
		normalized[a] = absolute[a] / max;
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	4413      	add	r3, r2
 8000b86:	edd3 6a00 	vldr	s13, [r3]
 8000b8a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4413      	add	r3, r2
 8000b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b9a:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba4:	e7e5      	b.n	8000b72 <_Z36inst_centralized_normalized_absolutePfS_+0x5a>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <_Z36inst_centralized_normalized_absolutePfS_+0xf4>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	69b8      	ldr	r0, [r7, #24]
 8000bb4:	f006 fe26 	bl	8007804 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_Z36inst_centralized_normalized_absolutePfS_+0xf4>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	da17      	bge.n	8000bf8 <_Z36inst_centralized_normalized_absolutePfS_+0xe0>
		out[i] = normalized[i] / mean - 1;
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4413      	add	r3, r2
 8000bd0:	edd3 6a00 	vldr	s13, [r3]
 8000bd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000be8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bec:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	623b      	str	r3, [r7, #32]
 8000bf6:	e7e1      	b.n	8000bbc <_Z36inst_centralized_normalized_absolutePfS_+0xa4>
	}
	free(absolute);
 8000bf8:	69f8      	ldr	r0, [r7, #28]
 8000bfa:	f007 f8ad 	bl	8007d58 <free>
	free(normalized);
 8000bfe:	69b8      	ldr	r0, [r7, #24]
 8000c00:	f007 f8aa 	bl	8007d58 <free>
}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	0800b170 	.word	0x0800b170

08000c10 <_Z15mean_of_squaredPfS_>:

void mean(float32_t in[], float32_t *out) {
	arm_mean_f32(&in[0], frameSize, out);
}

void mean_of_squared(float32_t in[], float32_t *out) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	float32_t result;
	arm_power_f32(&in[0], frameSize, &result);
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <_Z15mean_of_squaredPfS_+0x40>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	461a      	mov	r2, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f006 fdb2 	bl	8007790 <arm_power_f32>
	*out = result / (float32_t) frameSize;
 8000c2c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <_Z15mean_of_squaredPfS_+0x40>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	edc3 7a00 	vstr	s15, [r3]
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	0800b170 	.word	0x0800b170

08000c54 <_Z7std_devPfS_>:

void std_dev(float32_t in[], float32_t *out) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <_Z7std_devPfS_+0x20>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f006 fd1a 	bl	80076a0 <arm_std_f32>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	0800b170 	.word	0x0800b170

08000c78 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a49      	ldr	r2, [pc, #292]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a42      	ldr	r2, [pc, #264]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a3a      	ldr	r2, [pc, #232]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	4a24      	ldr	r2, [pc, #144]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <MX_GPIO_Init+0x148>)
 8000d4a:	f001 ffb3 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <MX_GPIO_Init+0x14c>)
 8000d54:	f001 ffae 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d58:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <MX_GPIO_Init+0x148>)
 8000d72:	f001 fdef 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d76:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_GPIO_Init+0x150>)
 8000d94:	f001 fdde 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_GPIO_Init+0x14c>)
 8000db0:	f001 fdd0 	bl	8002954 <HAL_GPIO_Init>

}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58020400 	.word	0x58020400
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	58020000 	.word	0x58020000

08000dcc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd4:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <SCB_EnableICache+0x3c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000de0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000de4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <SCB_EnableICache+0x3c>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <SCB_EnableICache+0x3c>)
 8000dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000df8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <SCB_EnableDCache+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <SCB_EnableDCache+0x94>)
 8000e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e24:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	0b5b      	lsrs	r3, r3, #13
 8000e2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e2e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	08db      	lsrs	r3, r3, #3
 8000e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e38:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	015a      	lsls	r2, r3, #5
 8000e3e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e42:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e48:	4915      	ldr	r1, [pc, #84]	; (8000ea0 <SCB_EnableDCache+0x94>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf14      	ite	ne
 8000e5a:	2301      	movne	r3, #1
 8000e5c:	2300      	moveq	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d000      	beq.n	8000e66 <SCB_EnableDCache+0x5a>
      do {
 8000e64:	e7e9      	b.n	8000e3a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1e5a      	subs	r2, r3, #1
 8000e6a:	60fa      	str	r2, [r7, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf14      	ite	ne
 8000e70:	2301      	movne	r3, #1
 8000e72:	2300      	moveq	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d000      	beq.n	8000e7c <SCB_EnableDCache+0x70>
    do {
 8000e7a:	e7d9      	b.n	8000e30 <SCB_EnableDCache+0x24>
 8000e7c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <SCB_EnableDCache+0x94>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <SCB_EnableDCache+0x94>)
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	6153      	str	r3, [r2, #20]
 8000e8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e90:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	// char hello_world[50] = {"\r\nHello World!\r\n"};
	uint32_t counter = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
	float32_t mean_of_squared_value = 0.0f, std_dev_value = 0.0f;
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000eba:	f7ff ff87 	bl	8000dcc <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000ebe:	f7ff ffa5 	bl	8000e0c <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec6:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ec8:	4b90      	ldr	r3, [pc, #576]	; (800110c <main+0x268>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <main+0x3e>
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	617a      	str	r2, [r7, #20]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	dd01      	ble.n	8000ee2 <main+0x3e>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <main+0x40>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d000      	beq.n	8000eea <main+0x46>
 8000ee8:	e7ee      	b.n	8000ec8 <main+0x24>
	if ( timeout < 0 )
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da01      	bge.n	8000ef4 <main+0x50>
	{
		Error_Handler();
 8000ef0:	f000 ff60 	bl	8001db4 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef4:	f001 f91a 	bl	800212c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef8:	f000 fe00 	bl	8001afc <_Z18SystemClock_Configv>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000efc:	4b83      	ldr	r3, [pc, #524]	; (800110c <main+0x268>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	4a82      	ldr	r2, [pc, #520]	; (800110c <main+0x268>)
 8000f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0c:	4b7f      	ldr	r3, [pc, #508]	; (800110c <main+0x268>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f001 fee4 	bl	8002ce8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	2000      	movs	r0, #0
 8000f24:	f001 fefa 	bl	8002d1c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2c:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f2e:	4b77      	ldr	r3, [pc, #476]	; (800110c <main+0x268>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d106      	bne.n	8000f48 <main+0xa4>
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	617a      	str	r2, [r7, #20]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dd01      	ble.n	8000f48 <main+0xa4>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <main+0xa6>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d000      	beq.n	8000f50 <main+0xac>
 8000f4e:	e7ee      	b.n	8000f2e <main+0x8a>
	if ( timeout < 0 )
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	da01      	bge.n	8000f5a <main+0xb6>
	{
		Error_Handler();
 8000f56:	f000 ff2d 	bl	8001db4 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f5a:	f7ff fe8d 	bl	8000c78 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000f5e:	f001 f81d 	bl	8001f9c <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000f62:	f000 ffad 	bl	8001ec0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], bufferSize) != HAL_OK)
 8000f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6a:	4969      	ldr	r1, [pc, #420]	; (8001110 <main+0x26c>)
 8000f6c:	4869      	ldr	r0, [pc, #420]	; (8001114 <main+0x270>)
 8000f6e:	f004 fdc1 	bl	8005af4 <HAL_UART_Receive_IT>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <main+0xe2>
	{
		Error_Handler();
 8000f82:	f000 ff17 	bl	8001db4 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 8000f86:	4b64      	ldr	r3, [pc, #400]	; (8001118 <main+0x274>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d008      	beq.n	8000fac <main+0x108>
	{
		HAL_Delay(500);
 8000f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9e:	f001 f957 	bl	8002250 <HAL_Delay>
		blink_green();
 8000fa2:	f000 feb9 	bl	8001d18 <_Z11blink_greenv>
		blink_green();
 8000fa6:	f000 feb7 	bl	8001d18 <_Z11blink_greenv>
	while (UartReady != SET)
 8000faa:	e7ec      	b.n	8000f86 <main+0xe2>
	}
	UartReady = RESET;
 8000fac:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <main+0x274>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4859      	ldr	r0, [pc, #356]	; (800111c <main+0x278>)
 8000fb8:	f001 fe7c 	bl	8002cb4 <HAL_GPIO_WritePin>

	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 8000fbc:	4a54      	ldr	r2, [pc, #336]	; (8001110 <main+0x26c>)
 8000fbe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <main+0x138>
 8000fca:	4b55      	ldr	r3, [pc, #340]	; (8001120 <main+0x27c>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d104      	bne.n	8000fdc <main+0x138>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4853      	ldr	r0, [pc, #332]	; (8001124 <main+0x280>)
 8000fd8:	f001 fe6c 	bl	8002cb4 <HAL_GPIO_WritePin>
	}

	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 8000fdc:	4b52      	ldr	r3, [pc, #328]	; (8001128 <main+0x284>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b51      	ldr	r3, [pc, #324]	; (8001128 <main+0x284>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000fec:	4b4e      	ldr	r3, [pc, #312]	; (8001128 <main+0x284>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <main+0x284>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ffa:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8000ffc:	484a      	ldr	r0, [pc, #296]	; (8001128 <main+0x284>)
 8000ffe:	f004 f9e7 	bl	80053d0 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <main+0x284>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24

	/*****************************************************************************************************/
	// Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <main+0x284>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8001012:	4946      	ldr	r1, [pc, #280]	; (800112c <main+0x288>)
 8001014:	483e      	ldr	r0, [pc, #248]	; (8001110 <main+0x26c>)
 8001016:	f7ff fbab 	bl	8000770 <_Z13inst_absolutePfS_>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <main+0x284>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001022:	4843      	ldr	r0, [pc, #268]	; (8001130 <main+0x28c>)
 8001024:	f000 fe8e 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter);
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4942      	ldr	r1, [pc, #264]	; (8001134 <main+0x290>)
 800102c:	4840      	ldr	r0, [pc, #256]	; (8001130 <main+0x28c>)
 800102e:	f007 f8f5 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001032:	4838      	ldr	r0, [pc, #224]	; (8001114 <main+0x270>)
 8001034:	f005 fe12 	bl	8006c5c <UART_CheckIdleState>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d014      	beq.n	8001072 <main+0x1ce>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001048:	2232      	movs	r2, #50	; 0x32
 800104a:	4939      	ldr	r1, [pc, #228]	; (8001130 <main+0x28c>)
 800104c:	4831      	ldr	r0, [pc, #196]	; (8001114 <main+0x270>)
 800104e:	f004 fccd 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <main+0x274>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b01      	cmp	r3, #1
 800105a:	bf14      	ite	ne
 800105c:	2301      	movne	r3, #1
 800105e:	2300      	moveq	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <main+0x1c8>
			blink_red_fast();
 8001066:	f000 fe27 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 800106a:	e7f2      	b.n	8001052 <main+0x1ae>
		}
		UartReady = RESET;
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <main+0x274>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8001072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001076:	f001 f8eb 	bl	8002250 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800107a:	4826      	ldr	r0, [pc, #152]	; (8001114 <main+0x270>)
 800107c:	f005 fdee 	bl	8006c5c <UART_CheckIdleState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf0c      	ite	eq
 8001086:	2301      	moveq	r3, #1
 8001088:	2300      	movne	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d05a      	beq.n	8001146 <main+0x2a2>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8001090:	2204      	movs	r2, #4
 8001092:	4929      	ldr	r1, [pc, #164]	; (8001138 <main+0x294>)
 8001094:	481f      	ldr	r0, [pc, #124]	; (8001114 <main+0x270>)
 8001096:	f004 fca9 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <main+0x274>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <main+0x210>
			blink_red_fast();
 80010ae:	f000 fe03 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80010b2:	e7f2      	b.n	800109a <main+0x1f6>
		}
		UartReady = RESET;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <main+0x274>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instAbs.bytes[0], 4096);
 80010ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010be:	491b      	ldr	r1, [pc, #108]	; (800112c <main+0x288>)
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <main+0x270>)
 80010c2:	f004 fc93 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <main+0x274>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	bf14      	ite	ne
 80010d0:	2301      	movne	r3, #1
 80010d2:	2300      	moveq	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <main+0x23c>
			blink_red_fast();
 80010da:	f000 fded 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80010de:	e7f2      	b.n	80010c6 <main+0x222>
		}
		UartReady = RESET;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <main+0x274>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 80010e6:	2204      	movs	r2, #4
 80010e8:	4914      	ldr	r1, [pc, #80]	; (800113c <main+0x298>)
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <main+0x270>)
 80010ec:	f004 fc7e 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <main+0x274>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	bf14      	ite	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	2300      	moveq	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d01d      	beq.n	8001140 <main+0x29c>
			blink_red_fast();
 8001104:	f000 fdd8 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001108:	e7f2      	b.n	80010f0 <main+0x24c>
 800110a:	bf00      	nop
 800110c:	58024400 	.word	0x58024400
 8001110:	240079dc 	.word	0x240079dc
 8001114:	24009a98 	.word	0x24009a98
 8001118:	24009a12 	.word	0x24009a12
 800111c:	58020400 	.word	0x58020400
 8001120:	240099dc 	.word	0x240099dc
 8001124:	58021000 	.word	0x58021000
 8001128:	24009a4c 	.word	0x24009a4c
 800112c:	240009dc 	.word	0x240009dc
 8001130:	240099e0 	.word	0x240099e0
 8001134:	0800b04c 	.word	0x0800b04c
 8001138:	0800b174 	.word	0x0800b174
 800113c:	0800b178 	.word	0x0800b178
		}
		UartReady = RESET;
 8001140:	4ba4      	ldr	r3, [pc, #656]	; (80013d4 <main+0x530>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 8001146:	f000 fdcf 	bl	8001ce8 <_Z17blink_orange_slowv>
	blink_orange_slow();
 800114a:	f000 fdcd 	bl	8001ce8 <_Z17blink_orange_slowv>

	// Instantaneous phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800114e:	4ba2      	ldr	r3, [pc, #648]	; (80013d8 <main+0x534>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8001156:	49a1      	ldr	r1, [pc, #644]	; (80013dc <main+0x538>)
 8001158:	48a1      	ldr	r0, [pc, #644]	; (80013e0 <main+0x53c>)
 800115a:	f7ff fb51 	bl	8000800 <_Z10inst_phasePfS_>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800115e:	4b9e      	ldr	r3, [pc, #632]	; (80013d8 <main+0x534>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001166:	489f      	ldr	r0, [pc, #636]	; (80013e4 <main+0x540>)
 8001168:	f000 fdec 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Inst phase counter = %ld\r\n&", counter);
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	499e      	ldr	r1, [pc, #632]	; (80013e8 <main+0x544>)
 8001170:	489c      	ldr	r0, [pc, #624]	; (80013e4 <main+0x540>)
 8001172:	f007 f853 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001176:	489d      	ldr	r0, [pc, #628]	; (80013ec <main+0x548>)
 8001178:	f005 fd70 	bl	8006c5c <UART_CheckIdleState>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d014      	beq.n	80011b6 <main+0x312>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800118c:	2232      	movs	r2, #50	; 0x32
 800118e:	4995      	ldr	r1, [pc, #596]	; (80013e4 <main+0x540>)
 8001190:	4896      	ldr	r0, [pc, #600]	; (80013ec <main+0x548>)
 8001192:	f004 fc2b 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001196:	4b8f      	ldr	r3, [pc, #572]	; (80013d4 <main+0x530>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <main+0x30c>
			blink_red_fast();
 80011aa:	f000 fd85 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80011ae:	e7f2      	b.n	8001196 <main+0x2f2>
		}
		UartReady = RESET;
 80011b0:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <main+0x530>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 80011b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ba:	f001 f849 	bl	8002250 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80011be:	488b      	ldr	r0, [pc, #556]	; (80013ec <main+0x548>)
 80011c0:	f005 fd4c 	bl	8006c5c <UART_CheckIdleState>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d03f      	beq.n	8001254 <main+0x3b0>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80011d4:	2204      	movs	r2, #4
 80011d6:	4986      	ldr	r1, [pc, #536]	; (80013f0 <main+0x54c>)
 80011d8:	4884      	ldr	r0, [pc, #528]	; (80013ec <main+0x548>)
 80011da:	f004 fc07 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80011de:	4b7d      	ldr	r3, [pc, #500]	; (80013d4 <main+0x530>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <main+0x354>
			blink_red_fast();
 80011f2:	f000 fd61 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80011f6:	e7f2      	b.n	80011de <main+0x33a>
		}
		UartReady = RESET;
 80011f8:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <main+0x530>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instPhase.bytes[0], 4096);
 80011fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001202:	4976      	ldr	r1, [pc, #472]	; (80013dc <main+0x538>)
 8001204:	4879      	ldr	r0, [pc, #484]	; (80013ec <main+0x548>)
 8001206:	f004 fbf1 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800120a:	4b72      	ldr	r3, [pc, #456]	; (80013d4 <main+0x530>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	bf14      	ite	ne
 8001214:	2301      	movne	r3, #1
 8001216:	2300      	moveq	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <main+0x380>
			blink_red_fast();
 800121e:	f000 fd4b 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001222:	e7f2      	b.n	800120a <main+0x366>
		}
		UartReady = RESET;
 8001224:	4b6b      	ldr	r3, [pc, #428]	; (80013d4 <main+0x530>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 800122a:	2204      	movs	r2, #4
 800122c:	4971      	ldr	r1, [pc, #452]	; (80013f4 <main+0x550>)
 800122e:	486f      	ldr	r0, [pc, #444]	; (80013ec <main+0x548>)
 8001230:	f004 fbdc 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001234:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <main+0x530>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b01      	cmp	r3, #1
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <main+0x3aa>
			blink_red_fast();
 8001248:	f000 fd36 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 800124c:	e7f2      	b.n	8001234 <main+0x390>
		}
		UartReady = RESET;
 800124e:	4b61      	ldr	r3, [pc, #388]	; (80013d4 <main+0x530>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 8001254:	f000 fd48 	bl	8001ce8 <_Z17blink_orange_slowv>
	blink_orange_slow();
 8001258:	f000 fd46 	bl	8001ce8 <_Z17blink_orange_slowv>

	// Instantaneous unwrapped phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800125c:	4b5e      	ldr	r3, [pc, #376]	; (80013d8 <main+0x534>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8001264:	495d      	ldr	r1, [pc, #372]	; (80013dc <main+0x538>)
 8001266:	485e      	ldr	r0, [pc, #376]	; (80013e0 <main+0x53c>)
 8001268:	f7ff faca 	bl	8000800 <_Z10inst_phasePfS_>
	unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 800126c:	4962      	ldr	r1, [pc, #392]	; (80013f8 <main+0x554>)
 800126e:	485b      	ldr	r0, [pc, #364]	; (80013dc <main+0x538>)
 8001270:	f7ff fafe 	bl	8000870 <_Z6unwrapPfS_>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001274:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <main+0x534>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800127c:	4859      	ldr	r0, [pc, #356]	; (80013e4 <main+0x540>)
 800127e:	f000 fd61 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Inst unwrapped phase counter = %ld\r\n&", counter);
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	495d      	ldr	r1, [pc, #372]	; (80013fc <main+0x558>)
 8001286:	4857      	ldr	r0, [pc, #348]	; (80013e4 <main+0x540>)
 8001288:	f006 ffc8 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800128c:	4857      	ldr	r0, [pc, #348]	; (80013ec <main+0x548>)
 800128e:	f005 fce5 	bl	8006c5c <UART_CheckIdleState>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d014      	beq.n	80012cc <main+0x428>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80012a2:	2232      	movs	r2, #50	; 0x32
 80012a4:	494f      	ldr	r1, [pc, #316]	; (80013e4 <main+0x540>)
 80012a6:	4851      	ldr	r0, [pc, #324]	; (80013ec <main+0x548>)
 80012a8:	f004 fba0 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80012ac:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <main+0x530>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <main+0x422>
			blink_red_fast();
 80012c0:	f000 fcfa 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80012c4:	e7f2      	b.n	80012ac <main+0x408>
		}
		UartReady = RESET;
 80012c6:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <main+0x530>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 80012cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d0:	f000 ffbe 	bl	8002250 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80012d4:	4845      	ldr	r0, [pc, #276]	; (80013ec <main+0x548>)
 80012d6:	f005 fcc1 	bl	8006c5c <UART_CheckIdleState>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d03f      	beq.n	800136a <main+0x4c6>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80012ea:	2204      	movs	r2, #4
 80012ec:	4940      	ldr	r1, [pc, #256]	; (80013f0 <main+0x54c>)
 80012ee:	483f      	ldr	r0, [pc, #252]	; (80013ec <main+0x548>)
 80012f0:	f004 fb7c 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80012f4:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <main+0x530>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <main+0x46a>
			blink_red_fast();
 8001308:	f000 fcd6 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 800130c:	e7f2      	b.n	80012f4 <main+0x450>
		}
		UartReady = RESET;
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <main+0x530>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instUnwrappedPhase.bytes[0], 4096);
 8001314:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001318:	4937      	ldr	r1, [pc, #220]	; (80013f8 <main+0x554>)
 800131a:	4834      	ldr	r0, [pc, #208]	; (80013ec <main+0x548>)
 800131c:	f004 fb66 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <main+0x530>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b01      	cmp	r3, #1
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <main+0x496>
			blink_red_fast();
 8001334:	f000 fcc0 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001338:	e7f2      	b.n	8001320 <main+0x47c>
		}
		UartReady = RESET;
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <main+0x530>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001340:	2204      	movs	r2, #4
 8001342:	492c      	ldr	r1, [pc, #176]	; (80013f4 <main+0x550>)
 8001344:	4829      	ldr	r0, [pc, #164]	; (80013ec <main+0x548>)
 8001346:	f004 fb51 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <main+0x530>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b01      	cmp	r3, #1
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <main+0x4c0>
			blink_red_fast();
 800135e:	f000 fcab 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001362:	e7f2      	b.n	800134a <main+0x4a6>
		}
		UartReady = RESET;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <main+0x530>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 800136a:	f000 fcbd 	bl	8001ce8 <_Z17blink_orange_slowv>
	blink_orange_slow();
 800136e:	f000 fcbb 	bl	8001ce8 <_Z17blink_orange_slowv>

	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <main+0x534>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 800137a:	4921      	ldr	r1, [pc, #132]	; (8001400 <main+0x55c>)
 800137c:	4818      	ldr	r0, [pc, #96]	; (80013e0 <main+0x53c>)
 800137e:	f7ff fb13 	bl	80009a8 <_Z14inst_frequencyPfS_>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <main+0x534>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800138a:	4816      	ldr	r0, [pc, #88]	; (80013e4 <main+0x540>)
 800138c:	f000 fcda 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n&", counter);
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	491c      	ldr	r1, [pc, #112]	; (8001404 <main+0x560>)
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <main+0x540>)
 8001396:	f006 ff41 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800139a:	4814      	ldr	r0, [pc, #80]	; (80013ec <main+0x548>)
 800139c:	f005 fc5e 	bl	8006c5c <UART_CheckIdleState>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d02e      	beq.n	800140e <main+0x56a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80013b0:	2232      	movs	r2, #50	; 0x32
 80013b2:	490c      	ldr	r1, [pc, #48]	; (80013e4 <main+0x540>)
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <main+0x548>)
 80013b6:	f004 fb19 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <main+0x530>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	bf14      	ite	ne
 80013c4:	2301      	movne	r3, #1
 80013c6:	2300      	moveq	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d01c      	beq.n	8001408 <main+0x564>
			blink_red_fast();
 80013ce:	f000 fc73 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80013d2:	e7f2      	b.n	80013ba <main+0x516>
 80013d4:	24009a12 	.word	0x24009a12
 80013d8:	24009a4c 	.word	0x24009a4c
 80013dc:	240019dc 	.word	0x240019dc
 80013e0:	240079dc 	.word	0x240079dc
 80013e4:	240099e0 	.word	0x240099e0
 80013e8:	0800b068 	.word	0x0800b068
 80013ec:	24009a98 	.word	0x24009a98
 80013f0:	0800b174 	.word	0x0800b174
 80013f4:	0800b178 	.word	0x0800b178
 80013f8:	240039dc 	.word	0x240039dc
 80013fc:	0800b084 	.word	0x0800b084
 8001400:	240049dc 	.word	0x240049dc
 8001404:	0800b0ac 	.word	0x0800b0ac
		}
		UartReady = RESET;
 8001408:	4b9c      	ldr	r3, [pc, #624]	; (800167c <main+0x7d8>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 800140e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001412:	f000 ff1d 	bl	8002250 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001416:	489a      	ldr	r0, [pc, #616]	; (8001680 <main+0x7dc>)
 8001418:	f005 fc20 	bl	8006c5c <UART_CheckIdleState>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	bf0c      	ite	eq
 8001422:	2301      	moveq	r3, #1
 8001424:	2300      	movne	r3, #0
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d03f      	beq.n	80014ac <main+0x608>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 800142c:	2204      	movs	r2, #4
 800142e:	4995      	ldr	r1, [pc, #596]	; (8001684 <main+0x7e0>)
 8001430:	4893      	ldr	r0, [pc, #588]	; (8001680 <main+0x7dc>)
 8001432:	f004 fadb 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001436:	4b91      	ldr	r3, [pc, #580]	; (800167c <main+0x7d8>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	bf14      	ite	ne
 8001440:	2301      	movne	r3, #1
 8001442:	2300      	moveq	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <main+0x5ac>
			blink_red_fast();
 800144a:	f000 fc35 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 800144e:	e7f2      	b.n	8001436 <main+0x592>
		}
		UartReady = RESET;
 8001450:	4b8a      	ldr	r3, [pc, #552]	; (800167c <main+0x7d8>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instFreq.bytes[0], 4096);
 8001456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800145a:	498b      	ldr	r1, [pc, #556]	; (8001688 <main+0x7e4>)
 800145c:	4888      	ldr	r0, [pc, #544]	; (8001680 <main+0x7dc>)
 800145e:	f004 fac5 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001462:	4b86      	ldr	r3, [pc, #536]	; (800167c <main+0x7d8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	bf14      	ite	ne
 800146c:	2301      	movne	r3, #1
 800146e:	2300      	moveq	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <main+0x5d8>
			blink_red_fast();
 8001476:	f000 fc1f 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 800147a:	e7f2      	b.n	8001462 <main+0x5be>
		}
		UartReady = RESET;
 800147c:	4b7f      	ldr	r3, [pc, #508]	; (800167c <main+0x7d8>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001482:	2204      	movs	r2, #4
 8001484:	4981      	ldr	r1, [pc, #516]	; (800168c <main+0x7e8>)
 8001486:	487e      	ldr	r0, [pc, #504]	; (8001680 <main+0x7dc>)
 8001488:	f004 fab0 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800148c:	4b7b      	ldr	r3, [pc, #492]	; (800167c <main+0x7d8>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b01      	cmp	r3, #1
 8001494:	bf14      	ite	ne
 8001496:	2301      	movne	r3, #1
 8001498:	2300      	moveq	r3, #0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <main+0x602>
			blink_red_fast();
 80014a0:	f000 fc0a 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80014a4:	e7f2      	b.n	800148c <main+0x5e8>
		}
		UartReady = RESET;
 80014a6:	4b75      	ldr	r3, [pc, #468]	; (800167c <main+0x7d8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 80014ac:	f000 fc1c 	bl	8001ce8 <_Z17blink_orange_slowv>
	blink_orange_slow();
 80014b0:	f000 fc1a 	bl	8001ce8 <_Z17blink_orange_slowv>

	// Instantaneous centered normalized absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80014b4:	4b76      	ldr	r3, [pc, #472]	; (8001690 <main+0x7ec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 80014bc:	4975      	ldr	r1, [pc, #468]	; (8001694 <main+0x7f0>)
 80014be:	4876      	ldr	r0, [pc, #472]	; (8001698 <main+0x7f4>)
 80014c0:	f7ff fb2a 	bl	8000b18 <_Z36inst_centralized_normalized_absolutePfS_>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80014c4:	4b72      	ldr	r3, [pc, #456]	; (8001690 <main+0x7ec>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80014cc:	4873      	ldr	r0, [pc, #460]	; (800169c <main+0x7f8>)
 80014ce:	f000 fc39 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Inst CN abs counter = %ld\r\n&", counter);
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4972      	ldr	r1, [pc, #456]	; (80016a0 <main+0x7fc>)
 80014d6:	4871      	ldr	r0, [pc, #452]	; (800169c <main+0x7f8>)
 80014d8:	f006 fea0 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80014dc:	4868      	ldr	r0, [pc, #416]	; (8001680 <main+0x7dc>)
 80014de:	f005 fbbd 	bl	8006c5c <UART_CheckIdleState>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d014      	beq.n	800151c <main+0x678>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80014f2:	2232      	movs	r2, #50	; 0x32
 80014f4:	4969      	ldr	r1, [pc, #420]	; (800169c <main+0x7f8>)
 80014f6:	4862      	ldr	r0, [pc, #392]	; (8001680 <main+0x7dc>)
 80014f8:	f004 fa78 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80014fc:	4b5f      	ldr	r3, [pc, #380]	; (800167c <main+0x7d8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b01      	cmp	r3, #1
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <main+0x672>
			blink_red_fast();
 8001510:	f000 fbd2 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001514:	e7f2      	b.n	80014fc <main+0x658>
		}
		UartReady = RESET;
 8001516:	4b59      	ldr	r3, [pc, #356]	; (800167c <main+0x7d8>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 800151c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001520:	f000 fe96 	bl	8002250 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001524:	4856      	ldr	r0, [pc, #344]	; (8001680 <main+0x7dc>)
 8001526:	f005 fb99 	bl	8006c5c <UART_CheckIdleState>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d03f      	beq.n	80015ba <main+0x716>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 800153a:	2204      	movs	r2, #4
 800153c:	4951      	ldr	r1, [pc, #324]	; (8001684 <main+0x7e0>)
 800153e:	4850      	ldr	r0, [pc, #320]	; (8001680 <main+0x7dc>)
 8001540:	f004 fa54 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001544:	4b4d      	ldr	r3, [pc, #308]	; (800167c <main+0x7d8>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b01      	cmp	r3, #1
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <main+0x6ba>
			blink_red_fast();
 8001558:	f000 fbae 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 800155c:	e7f2      	b.n	8001544 <main+0x6a0>
		}
		UartReady = RESET;
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <main+0x7d8>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instCNAbs.bytes[0], 4096);
 8001564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001568:	494a      	ldr	r1, [pc, #296]	; (8001694 <main+0x7f0>)
 800156a:	4845      	ldr	r0, [pc, #276]	; (8001680 <main+0x7dc>)
 800156c:	f004 fa3e 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001570:	4b42      	ldr	r3, [pc, #264]	; (800167c <main+0x7d8>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <main+0x6e6>
			blink_red_fast();
 8001584:	f000 fb98 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001588:	e7f2      	b.n	8001570 <main+0x6cc>
		}
		UartReady = RESET;
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <main+0x7d8>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001590:	2204      	movs	r2, #4
 8001592:	493e      	ldr	r1, [pc, #248]	; (800168c <main+0x7e8>)
 8001594:	483a      	ldr	r0, [pc, #232]	; (8001680 <main+0x7dc>)
 8001596:	f004 fa29 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800159a:	4b38      	ldr	r3, [pc, #224]	; (800167c <main+0x7d8>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <main+0x710>
			blink_red_fast();
 80015ae:	f000 fb83 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80015b2:	e7f2      	b.n	800159a <main+0x6f6>
		}
		UartReady = RESET;
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <main+0x7d8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
	}

	/*****************************************************************************************************/
	// Mean of squared
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80015ba:	4b35      	ldr	r3, [pc, #212]	; (8001690 <main+0x7ec>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	mean_of_squared(&rxBuffer.number[0], &mean_of_squared_value);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	4833      	ldr	r0, [pc, #204]	; (8001698 <main+0x7f4>)
 80015ca:	f7ff fb21 	bl	8000c10 <_Z15mean_of_squaredPfS_>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <main+0x7ec>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80015d6:	4831      	ldr	r0, [pc, #196]	; (800169c <main+0x7f8>)
 80015d8:	f000 fbb4 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Mean of squared = %f\r\n", mean_of_squared_value);
 80015dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015e4:	ec53 2b17 	vmov	r2, r3, d7
 80015e8:	492e      	ldr	r1, [pc, #184]	; (80016a4 <main+0x800>)
 80015ea:	482c      	ldr	r0, [pc, #176]	; (800169c <main+0x7f8>)
 80015ec:	f006 fe16 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80015f0:	4823      	ldr	r0, [pc, #140]	; (8001680 <main+0x7dc>)
 80015f2:	f005 fb33 	bl	8006c5c <UART_CheckIdleState>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d014      	beq.n	8001630 <main+0x78c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001606:	2232      	movs	r2, #50	; 0x32
 8001608:	4924      	ldr	r1, [pc, #144]	; (800169c <main+0x7f8>)
 800160a:	481d      	ldr	r0, [pc, #116]	; (8001680 <main+0x7dc>)
 800160c:	f004 f9ee 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <main+0x7d8>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	bf14      	ite	ne
 800161a:	2301      	movne	r3, #1
 800161c:	2300      	moveq	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <main+0x786>
			blink_red_fast();
 8001624:	f000 fb48 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001628:	e7f2      	b.n	8001610 <main+0x76c>
		}
		UartReady = RESET;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <main+0x7d8>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001630:	481a      	ldr	r0, [pc, #104]	; (800169c <main+0x7f8>)
 8001632:	f000 fb87 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	491b      	ldr	r1, [pc, #108]	; (80016a8 <main+0x804>)
 800163a:	4818      	ldr	r0, [pc, #96]	; (800169c <main+0x7f8>)
 800163c:	f006 fdee 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001640:	480f      	ldr	r0, [pc, #60]	; (8001680 <main+0x7dc>)
 8001642:	f005 fb0b 	bl	8006c5c <UART_CheckIdleState>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf0c      	ite	eq
 800164c:	2301      	moveq	r3, #1
 800164e:	2300      	movne	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d02d      	beq.n	80016b2 <main+0x80e>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001656:	2232      	movs	r2, #50	; 0x32
 8001658:	4910      	ldr	r1, [pc, #64]	; (800169c <main+0x7f8>)
 800165a:	4809      	ldr	r0, [pc, #36]	; (8001680 <main+0x7dc>)
 800165c:	f004 f9c6 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <main+0x7d8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b01      	cmp	r3, #1
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d01b      	beq.n	80016ac <main+0x808>
			blink_red_fast();
 8001674:	f000 fb20 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001678:	e7f2      	b.n	8001660 <main+0x7bc>
 800167a:	bf00      	nop
 800167c:	24009a12 	.word	0x24009a12
 8001680:	24009a98 	.word	0x24009a98
 8001684:	0800b174 	.word	0x0800b174
 8001688:	240049dc 	.word	0x240049dc
 800168c:	0800b178 	.word	0x0800b178
 8001690:	24009a4c 	.word	0x24009a4c
 8001694:	240069dc 	.word	0x240069dc
 8001698:	240079dc 	.word	0x240079dc
 800169c:	240099e0 	.word	0x240099e0
 80016a0:	0800b0c8 	.word	0x0800b0c8
 80016a4:	0800b0e8 	.word	0x0800b0e8
 80016a8:	0800b100 	.word	0x0800b100
		}
		UartReady = RESET;
 80016ac:	4b98      	ldr	r3, [pc, #608]	; (8001910 <main+0xa6c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the absolute instantaneous phase
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80016b2:	4b98      	ldr	r3, [pc, #608]	; (8001914 <main+0xa70>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	// Absolute instantaneous phase
	inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 80016ba:	4997      	ldr	r1, [pc, #604]	; (8001918 <main+0xa74>)
 80016bc:	4897      	ldr	r0, [pc, #604]	; (800191c <main+0xa78>)
 80016be:	f7ff f857 	bl	8000770 <_Z13inst_absolutePfS_>
	std_dev(&instAbsPhase.number[0], &std_dev_value);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	4893      	ldr	r0, [pc, #588]	; (8001918 <main+0xa74>)
 80016ca:	f7ff fac3 	bl	8000c54 <_Z7std_devPfS_>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80016ce:	4b91      	ldr	r3, [pc, #580]	; (8001914 <main+0xa70>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80016d6:	4892      	ldr	r0, [pc, #584]	; (8001920 <main+0xa7c>)
 80016d8:	f000 fb34 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 80016dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e4:	ec53 2b17 	vmov	r2, r3, d7
 80016e8:	498e      	ldr	r1, [pc, #568]	; (8001924 <main+0xa80>)
 80016ea:	488d      	ldr	r0, [pc, #564]	; (8001920 <main+0xa7c>)
 80016ec:	f006 fd96 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80016f0:	488d      	ldr	r0, [pc, #564]	; (8001928 <main+0xa84>)
 80016f2:	f005 fab3 	bl	8006c5c <UART_CheckIdleState>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d014      	beq.n	8001730 <main+0x88c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001706:	2232      	movs	r2, #50	; 0x32
 8001708:	4985      	ldr	r1, [pc, #532]	; (8001920 <main+0xa7c>)
 800170a:	4887      	ldr	r0, [pc, #540]	; (8001928 <main+0xa84>)
 800170c:	f004 f96e 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001710:	4b7f      	ldr	r3, [pc, #508]	; (8001910 <main+0xa6c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b01      	cmp	r3, #1
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <main+0x886>
			blink_red_fast();
 8001724:	f000 fac8 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001728:	e7f2      	b.n	8001710 <main+0x86c>
		}
		UartReady = RESET;
 800172a:	4b79      	ldr	r3, [pc, #484]	; (8001910 <main+0xa6c>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001730:	487b      	ldr	r0, [pc, #492]	; (8001920 <main+0xa7c>)
 8001732:	f000 fb07 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	497c      	ldr	r1, [pc, #496]	; (800192c <main+0xa88>)
 800173a:	4879      	ldr	r0, [pc, #484]	; (8001920 <main+0xa7c>)
 800173c:	f006 fd6e 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001740:	4879      	ldr	r0, [pc, #484]	; (8001928 <main+0xa84>)
 8001742:	f005 fa8b 	bl	8006c5c <UART_CheckIdleState>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d014      	beq.n	8001780 <main+0x8dc>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001756:	2232      	movs	r2, #50	; 0x32
 8001758:	4971      	ldr	r1, [pc, #452]	; (8001920 <main+0xa7c>)
 800175a:	4873      	ldr	r0, [pc, #460]	; (8001928 <main+0xa84>)
 800175c:	f004 f946 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001760:	4b6b      	ldr	r3, [pc, #428]	; (8001910 <main+0xa6c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b01      	cmp	r3, #1
 8001768:	bf14      	ite	ne
 800176a:	2301      	movne	r3, #1
 800176c:	2300      	moveq	r3, #0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <main+0x8d6>
			blink_red_fast();
 8001774:	f000 faa0 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001778:	e7f2      	b.n	8001760 <main+0x8bc>
		}
		UartReady = RESET;
 800177a:	4b65      	ldr	r3, [pc, #404]	; (8001910 <main+0xa6c>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the instantaneous phase
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001780:	4b64      	ldr	r3, [pc, #400]	; (8001914 <main+0xa70>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	std_dev(&instPhase.number[0], &std_dev_value);
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4619      	mov	r1, r3
 800178e:	4863      	ldr	r0, [pc, #396]	; (800191c <main+0xa78>)
 8001790:	f7ff fa60 	bl	8000c54 <_Z7std_devPfS_>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001794:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <main+0xa70>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800179c:	4860      	ldr	r0, [pc, #384]	; (8001920 <main+0xa7c>)
 800179e:	f000 fad1 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 80017a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017aa:	ec53 2b17 	vmov	r2, r3, d7
 80017ae:	495d      	ldr	r1, [pc, #372]	; (8001924 <main+0xa80>)
 80017b0:	485b      	ldr	r0, [pc, #364]	; (8001920 <main+0xa7c>)
 80017b2:	f006 fd33 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80017b6:	485c      	ldr	r0, [pc, #368]	; (8001928 <main+0xa84>)
 80017b8:	f005 fa50 	bl	8006c5c <UART_CheckIdleState>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf0c      	ite	eq
 80017c2:	2301      	moveq	r3, #1
 80017c4:	2300      	movne	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d014      	beq.n	80017f6 <main+0x952>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80017cc:	2232      	movs	r2, #50	; 0x32
 80017ce:	4954      	ldr	r1, [pc, #336]	; (8001920 <main+0xa7c>)
 80017d0:	4855      	ldr	r0, [pc, #340]	; (8001928 <main+0xa84>)
 80017d2:	f004 f90b 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80017d6:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <main+0xa6c>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <main+0x94c>
			blink_red_fast();
 80017ea:	f000 fa65 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80017ee:	e7f2      	b.n	80017d6 <main+0x932>
		}
		UartReady = RESET;
 80017f0:	4b47      	ldr	r3, [pc, #284]	; (8001910 <main+0xa6c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80017f6:	484a      	ldr	r0, [pc, #296]	; (8001920 <main+0xa7c>)
 80017f8:	f000 faa4 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	494b      	ldr	r1, [pc, #300]	; (800192c <main+0xa88>)
 8001800:	4847      	ldr	r0, [pc, #284]	; (8001920 <main+0xa7c>)
 8001802:	f006 fd0b 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001806:	4848      	ldr	r0, [pc, #288]	; (8001928 <main+0xa84>)
 8001808:	f005 fa28 	bl	8006c5c <UART_CheckIdleState>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d014      	beq.n	8001846 <main+0x9a2>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800181c:	2232      	movs	r2, #50	; 0x32
 800181e:	4940      	ldr	r1, [pc, #256]	; (8001920 <main+0xa7c>)
 8001820:	4841      	ldr	r0, [pc, #260]	; (8001928 <main+0xa84>)
 8001822:	f004 f8e3 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001826:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <main+0xa6c>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <main+0x99c>
			blink_red_fast();
 800183a:	f000 fa3d 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 800183e:	e7f2      	b.n	8001826 <main+0x982>
		}
		UartReady = RESET;
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <main+0xa6c>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the absolute instantaneous frequency
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <main+0xa70>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 800184e:	4938      	ldr	r1, [pc, #224]	; (8001930 <main+0xa8c>)
 8001850:	4838      	ldr	r0, [pc, #224]	; (8001934 <main+0xa90>)
 8001852:	f7fe ff8d 	bl	8000770 <_Z13inst_absolutePfS_>
	std_dev(&instAbsFreq.number[0], &std_dev_value);
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	4619      	mov	r1, r3
 800185c:	4834      	ldr	r0, [pc, #208]	; (8001930 <main+0xa8c>)
 800185e:	f7ff f9f9 	bl	8000c54 <_Z7std_devPfS_>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <main+0xa70>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800186a:	482d      	ldr	r0, [pc, #180]	; (8001920 <main+0xa7c>)
 800186c:	f000 fa6a 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 8001870:	edd7 7a02 	vldr	s15, [r7, #8]
 8001874:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001878:	ec53 2b17 	vmov	r2, r3, d7
 800187c:	4929      	ldr	r1, [pc, #164]	; (8001924 <main+0xa80>)
 800187e:	4828      	ldr	r0, [pc, #160]	; (8001920 <main+0xa7c>)
 8001880:	f006 fccc 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001884:	4828      	ldr	r0, [pc, #160]	; (8001928 <main+0xa84>)
 8001886:	f005 f9e9 	bl	8006c5c <UART_CheckIdleState>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d014      	beq.n	80018c4 <main+0xa20>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800189a:	2232      	movs	r2, #50	; 0x32
 800189c:	4920      	ldr	r1, [pc, #128]	; (8001920 <main+0xa7c>)
 800189e:	4822      	ldr	r0, [pc, #136]	; (8001928 <main+0xa84>)
 80018a0:	f004 f8a4 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <main+0xa6c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <main+0xa1a>
			blink_red_fast();
 80018b8:	f000 f9fe 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80018bc:	e7f2      	b.n	80018a4 <main+0xa00>
		}
		UartReady = RESET;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <main+0xa6c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80018c4:	4816      	ldr	r0, [pc, #88]	; (8001920 <main+0xa7c>)
 80018c6:	f000 fa3d 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4917      	ldr	r1, [pc, #92]	; (800192c <main+0xa88>)
 80018ce:	4814      	ldr	r0, [pc, #80]	; (8001920 <main+0xa7c>)
 80018d0:	f006 fca4 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80018d4:	4814      	ldr	r0, [pc, #80]	; (8001928 <main+0xa84>)
 80018d6:	f005 f9c1 	bl	8006c5c <UART_CheckIdleState>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d029      	beq.n	800193e <main+0xa9a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80018ea:	2232      	movs	r2, #50	; 0x32
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <main+0xa7c>)
 80018ee:	480e      	ldr	r0, [pc, #56]	; (8001928 <main+0xa84>)
 80018f0:	f004 f87c 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <main+0xa6c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	bf14      	ite	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	2300      	moveq	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d017      	beq.n	8001938 <main+0xa94>
			blink_red_fast();
 8001908:	f000 f9d6 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 800190c:	e7f2      	b.n	80018f4 <main+0xa50>
 800190e:	bf00      	nop
 8001910:	24009a12 	.word	0x24009a12
 8001914:	24009a4c 	.word	0x24009a4c
 8001918:	240029dc 	.word	0x240029dc
 800191c:	240019dc 	.word	0x240019dc
 8001920:	240099e0 	.word	0x240099e0
 8001924:	0800b118 	.word	0x0800b118
 8001928:	24009a98 	.word	0x24009a98
 800192c:	0800b100 	.word	0x0800b100
 8001930:	240059dc 	.word	0x240059dc
 8001934:	240049dc 	.word	0x240049dc
		}
		UartReady = RESET;
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <main+0xc38>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the instantaneous frequency
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800193e:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <main+0xc3c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	std_dev(&instFreq.number[0], &std_dev_value);
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	4619      	mov	r1, r3
 800194c:	4865      	ldr	r0, [pc, #404]	; (8001ae4 <main+0xc40>)
 800194e:	f7ff f981 	bl	8000c54 <_Z7std_devPfS_>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <main+0xc3c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800195a:	4863      	ldr	r0, [pc, #396]	; (8001ae8 <main+0xc44>)
 800195c:	f000 f9f2 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 8001960:	edd7 7a02 	vldr	s15, [r7, #8]
 8001964:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001968:	ec53 2b17 	vmov	r2, r3, d7
 800196c:	495f      	ldr	r1, [pc, #380]	; (8001aec <main+0xc48>)
 800196e:	485e      	ldr	r0, [pc, #376]	; (8001ae8 <main+0xc44>)
 8001970:	f006 fc54 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001974:	485e      	ldr	r0, [pc, #376]	; (8001af0 <main+0xc4c>)
 8001976:	f005 f971 	bl	8006c5c <UART_CheckIdleState>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf0c      	ite	eq
 8001980:	2301      	moveq	r3, #1
 8001982:	2300      	movne	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d014      	beq.n	80019b4 <main+0xb10>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800198a:	2232      	movs	r2, #50	; 0x32
 800198c:	4956      	ldr	r1, [pc, #344]	; (8001ae8 <main+0xc44>)
 800198e:	4858      	ldr	r0, [pc, #352]	; (8001af0 <main+0xc4c>)
 8001990:	f004 f82c 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001994:	4b51      	ldr	r3, [pc, #324]	; (8001adc <main+0xc38>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b01      	cmp	r3, #1
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <main+0xb0a>
			blink_red_fast();
 80019a8:	f000 f986 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80019ac:	e7f2      	b.n	8001994 <main+0xaf0>
		}
		UartReady = RESET;
 80019ae:	4b4b      	ldr	r3, [pc, #300]	; (8001adc <main+0xc38>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80019b4:	484c      	ldr	r0, [pc, #304]	; (8001ae8 <main+0xc44>)
 80019b6:	f000 f9c5 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	494d      	ldr	r1, [pc, #308]	; (8001af4 <main+0xc50>)
 80019be:	484a      	ldr	r0, [pc, #296]	; (8001ae8 <main+0xc44>)
 80019c0:	f006 fc2c 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80019c4:	484a      	ldr	r0, [pc, #296]	; (8001af0 <main+0xc4c>)
 80019c6:	f005 f949 	bl	8006c5c <UART_CheckIdleState>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d014      	beq.n	8001a04 <main+0xb60>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80019da:	2232      	movs	r2, #50	; 0x32
 80019dc:	4942      	ldr	r1, [pc, #264]	; (8001ae8 <main+0xc44>)
 80019de:	4844      	ldr	r0, [pc, #272]	; (8001af0 <main+0xc4c>)
 80019e0:	f004 f804 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80019e4:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <main+0xc38>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <main+0xb5a>
			blink_red_fast();
 80019f8:	f000 f95e 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 80019fc:	e7f2      	b.n	80019e4 <main+0xb40>
		}
		UartReady = RESET;
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <main+0xc38>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the centralized normalized absolute amplitude
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <main+0xc3c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	std_dev(&instCNAbs.number[0], &std_dev_value);
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	4619      	mov	r1, r3
 8001a12:	4839      	ldr	r0, [pc, #228]	; (8001af8 <main+0xc54>)
 8001a14:	f7ff f91e 	bl	8000c54 <_Z7std_devPfS_>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <main+0xc3c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001a20:	4831      	ldr	r0, [pc, #196]	; (8001ae8 <main+0xc44>)
 8001a22:	f000 f98f 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 8001a26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a2e:	ec53 2b17 	vmov	r2, r3, d7
 8001a32:	492e      	ldr	r1, [pc, #184]	; (8001aec <main+0xc48>)
 8001a34:	482c      	ldr	r0, [pc, #176]	; (8001ae8 <main+0xc44>)
 8001a36:	f006 fbf1 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001a3a:	482d      	ldr	r0, [pc, #180]	; (8001af0 <main+0xc4c>)
 8001a3c:	f005 f90e 	bl	8006c5c <UART_CheckIdleState>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d014      	beq.n	8001a7a <main+0xbd6>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001a50:	2232      	movs	r2, #50	; 0x32
 8001a52:	4925      	ldr	r1, [pc, #148]	; (8001ae8 <main+0xc44>)
 8001a54:	4826      	ldr	r0, [pc, #152]	; (8001af0 <main+0xc4c>)
 8001a56:	f003 ffc9 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <main+0xc38>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <main+0xbd0>
			blink_red_fast();
 8001a6e:	f000 f923 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001a72:	e7f2      	b.n	8001a5a <main+0xbb6>
		}
		UartReady = RESET;
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <main+0xc38>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001a7a:	481b      	ldr	r0, [pc, #108]	; (8001ae8 <main+0xc44>)
 8001a7c:	f000 f962 	bl	8001d44 <_Z12reset_bufferPc>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	491c      	ldr	r1, [pc, #112]	; (8001af4 <main+0xc50>)
 8001a84:	4818      	ldr	r0, [pc, #96]	; (8001ae8 <main+0xc44>)
 8001a86:	f006 fbc9 	bl	800821c <sprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001a8a:	4819      	ldr	r0, [pc, #100]	; (8001af0 <main+0xc4c>)
 8001a8c:	f005 f8e6 	bl	8006c5c <UART_CheckIdleState>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d014      	beq.n	8001aca <main+0xc26>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001aa0:	2232      	movs	r2, #50	; 0x32
 8001aa2:	4911      	ldr	r1, [pc, #68]	; (8001ae8 <main+0xc44>)
 8001aa4:	4812      	ldr	r0, [pc, #72]	; (8001af0 <main+0xc4c>)
 8001aa6:	f003 ffa1 	bl	80059ec <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <main+0xc38>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <main+0xc20>
			blink_red_fast();
 8001abe:	f000 f8fb 	bl	8001cb8 <_Z14blink_red_fastv>
		while(UartReady != SET){
 8001ac2:	e7f2      	b.n	8001aaa <main+0xc06>
		}
		UartReady = RESET;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <main+0xc38>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
#endif
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <main+0xc3c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
	clear_leds();
 8001ad2:	f000 f8d9 	bl	8001c88 <_Z10clear_ledsv>
	while (1)
	{
		blink_orange_slow();
 8001ad6:	f000 f907 	bl	8001ce8 <_Z17blink_orange_slowv>
 8001ada:	e7fc      	b.n	8001ad6 <main+0xc32>
 8001adc:	24009a12 	.word	0x24009a12
 8001ae0:	24009a4c 	.word	0x24009a4c
 8001ae4:	240049dc 	.word	0x240049dc
 8001ae8:	240099e0 	.word	0x240099e0
 8001aec:	0800b118 	.word	0x0800b118
 8001af0:	24009a98 	.word	0x24009a98
 8001af4:	0800b100 	.word	0x0800b100
 8001af8:	240069dc 	.word	0x240069dc

08001afc <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0cc      	sub	sp, #304	; 0x130
 8001b00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b06:	224c      	movs	r2, #76	; 0x4c
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f006 fb62 	bl	80081d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b14:	2220      	movs	r2, #32
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f006 fb5b 	bl	80081d4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	4618      	mov	r0, r3
 8001b24:	23bc      	movs	r3, #188	; 0xbc
 8001b26:	461a      	mov	r2, r3
 8001b28:	2100      	movs	r1, #0
 8001b2a:	f006 fb53 	bl	80081d4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001b2e:	2004      	movs	r0, #4
 8001b30:	f001 f908 	bl	8002d44 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	4b51      	ldr	r3, [pc, #324]	; (8001c80 <_Z18SystemClock_Configv+0x184>)
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	4a50      	ldr	r2, [pc, #320]	; (8001c80 <_Z18SystemClock_Configv+0x184>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b46:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <_Z18SystemClock_Configv+0x184>)
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	f003 0201 	and.w	r2, r3, #1
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <_Z18SystemClock_Configv+0x188>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <_Z18SystemClock_Configv+0x188>)
 8001b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b5c:	6193      	str	r3, [r2, #24]
 8001b5e:	4b49      	ldr	r3, [pc, #292]	; (8001c84 <_Z18SystemClock_Configv+0x188>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b6e:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <_Z18SystemClock_Configv+0x188>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d000      	beq.n	8001b88 <_Z18SystemClock_Configv+0x8c>
 8001b86:	e7f2      	b.n	8001b6e <_Z18SystemClock_Configv+0x72>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b94:	2340      	movs	r3, #64	; 0x40
 8001b96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 8001bac:	2332      	movs	r3, #50	; 0x32
 8001bae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 f90c 	bl	8002df8 <HAL_RCC_OscConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf14      	ite	ne
 8001be6:	2301      	movne	r3, #1
 8001be8:	2300      	moveq	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <_Z18SystemClock_Configv+0xf8>
	{
		Error_Handler();
 8001bf0:	f000 f8e0 	bl	8001db4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf4:	233f      	movs	r3, #63	; 0x3f
 8001bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c06:	2308      	movs	r3, #8
 8001c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c12:	2340      	movs	r3, #64	; 0x40
 8001c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c26:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fcf3 	bl	8003618 <HAL_RCC_ClockConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <_Z18SystemClock_Configv+0x14a>
	{
		Error_Handler();
 8001c42:	f000 f8b7 	bl	8001db4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	2203      	movs	r2, #3
 8001c54:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 f860 	bl	8003d20 <HAL_RCCEx_PeriphCLKConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <_Z18SystemClock_Configv+0x178>
	{
		Error_Handler();
 8001c70:	f000 f8a0 	bl	8001db4 <Error_Handler>
	}
}
 8001c74:	bf00      	nop
 8001c76:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	58000400 	.word	0x58000400
 8001c84:	58024800 	.word	0x58024800

08001c88 <_Z10clear_ledsv>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2101      	movs	r1, #1
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <_Z10clear_ledsv+0x28>)
 8001c92:	f001 f80f 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <_Z10clear_ledsv+0x2c>)
 8001c9c:	f001 f80a 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca6:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <_Z10clear_ledsv+0x28>)
 8001ca8:	f001 f804 	bl	8002cb4 <HAL_GPIO_WritePin>
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	58020400 	.word	0x58020400
 8001cb4:	58021000 	.word	0x58021000

08001cb8 <_Z14blink_red_fastv>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc2:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <_Z14blink_red_fastv+0x2c>)
 8001cc4:	f000 fff6 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001cc8:	2032      	movs	r0, #50	; 0x32
 8001cca:	f000 fac1 	bl	8002250 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <_Z14blink_red_fastv+0x2c>)
 8001cd6:	f000 ffed 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001cda:	2032      	movs	r0, #50	; 0x32
 8001cdc:	f000 fab8 	bl	8002250 <HAL_Delay>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	58020400 	.word	0x58020400

08001ce8 <_Z17blink_orange_slowv>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4808      	ldr	r0, [pc, #32]	; (8001d14 <_Z17blink_orange_slowv+0x2c>)
 8001cf2:	f000 ffdf 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001cf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cfa:	f000 faa9 	bl	8002250 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2102      	movs	r1, #2
 8001d02:	4804      	ldr	r0, [pc, #16]	; (8001d14 <_Z17blink_orange_slowv+0x2c>)
 8001d04:	f000 ffd6 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d0c:	f000 faa0 	bl	8002250 <HAL_Delay>
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	58021000 	.word	0x58021000

08001d18 <_Z11blink_greenv>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <_Z11blink_greenv+0x28>)
 8001d22:	f000 ffc7 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001d26:	20c8      	movs	r0, #200	; 0xc8
 8001d28:	f000 fa92 	bl	8002250 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2101      	movs	r1, #1
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <_Z11blink_greenv+0x28>)
 8001d32:	f000 ffbf 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001d36:	20c8      	movs	r0, #200	; 0xc8
 8001d38:	f000 fa8a 	bl	8002250 <HAL_Delay>
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	58020400 	.word	0x58020400

08001d44 <_Z12reset_bufferPc>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void reset_buffer(char *stringBuffer){
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 50; i++){
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	81fb      	strh	r3, [r7, #14]
 8001d50:	89fb      	ldrh	r3, [r7, #14]
 8001d52:	2b31      	cmp	r3, #49	; 0x31
 8001d54:	d808      	bhi.n	8001d68 <_Z12reset_bufferPc+0x24>
		stringBuffer[i] = '\0';
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 50; i++){
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	3301      	adds	r3, #1
 8001d64:	81fb      	strh	r3, [r7, #14]
 8001d66:	e7f3      	b.n	8001d50 <_Z12reset_bufferPc+0xc>
	}
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_UART_TxCpltCallback>:
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100);
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_UART_TxCpltCallback+0x1c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	24009a12 	.word	0x24009a12

08001d94 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_UART_RxCpltCallback+0x1c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	24009a12 	.word	0x24009a12

08001db4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_MspInit+0x30>)
 8001dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dd0:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_MspInit+0x30>)
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_MspInit+0x30>)
 8001ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	58024400 	.word	0x58024400

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <MemManage_Handler+0x4>

08001e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 f9e0 	bl	8002210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <USART3_IRQHandler+0x10>)
 8001e5a:	f003 ff23 	bl	8005ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	24009a98 	.word	0x24009a98

08001e68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <_sbrk+0x50>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x16>
		heap_end = &end;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <_sbrk+0x50>)
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <_sbrk+0x54>)
 8001e7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <_sbrk+0x50>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <_sbrk+0x50>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	466a      	mov	r2, sp
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d907      	bls.n	8001ea2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e92:	f005 ff2f 	bl	8007cf4 <__errno>
 8001e96:	4602      	mov	r2, r0
 8001e98:	230c      	movs	r3, #12
 8001e9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea0:	e006      	b.n	8001eb0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <_sbrk+0x50>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <_sbrk+0x50>)
 8001eac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	24009a14 	.word	0x24009a14
 8001ebc:	24009b38 	.word	0x24009b38

08001ec0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <MX_TIM2_Init+0x98>)
 8001ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <MX_TIM2_Init+0x98>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_TIM2_Init+0x98>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <MX_TIM2_Init+0x98>)
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <MX_TIM2_Init+0x98>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_TIM2_Init+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f06:	4814      	ldr	r0, [pc, #80]	; (8001f58 <MX_TIM2_Init+0x98>)
 8001f08:	f003 fa0a 	bl	8005320 <HAL_TIM_Base_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f12:	f7ff ff4f 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	4619      	mov	r1, r3
 8001f22:	480d      	ldr	r0, [pc, #52]	; (8001f58 <MX_TIM2_Init+0x98>)
 8001f24:	f003 fa82 	bl	800542c <HAL_TIM_ConfigClockSource>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f2e:	f7ff ff41 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4806      	ldr	r0, [pc, #24]	; (8001f58 <MX_TIM2_Init+0x98>)
 8001f40:	f003 fc7c 	bl	800583c <HAL_TIMEx_MasterConfigSynchronization>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f4a:	f7ff ff33 	bl	8001db4 <Error_Handler>
  }

}
 8001f4e:	bf00      	nop
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	24009a4c 	.word	0x24009a4c

08001f5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6c:	d10e      	bne.n	8001f8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_TIM_Base_MspInit+0x3c>)
 8001f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f74:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <HAL_TIM_Base_MspInit+0x3c>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_TIM_Base_MspInit+0x3c>)
 8001f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	58024400 	.word	0x58024400

08001f9c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <MX_USART3_UART_Init+0x94>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fe4:	4811      	ldr	r0, [pc, #68]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001fe6:	f003 fcb1 	bl	800594c <HAL_UART_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ff0:	f7ff fee0 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	480d      	ldr	r0, [pc, #52]	; (800202c <MX_USART3_UART_Init+0x90>)
 8001ff8:	f005 fa6d 	bl	80074d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002002:	f7ff fed7 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	4808      	ldr	r0, [pc, #32]	; (800202c <MX_USART3_UART_Init+0x90>)
 800200a:	f005 faa2 	bl	8007552 <HAL_UARTEx_SetRxFifoThreshold>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002014:	f7ff fece 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <MX_USART3_UART_Init+0x90>)
 800201a:	f005 fa23 	bl	8007464 <HAL_UARTEx_DisableFifoMode>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002024:	f7ff fec6 	bl	8001db4 <Error_Handler>
  }

}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	24009a98 	.word	0x24009a98
 8002030:	40004800 	.word	0x40004800

08002034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <HAL_UART_MspInit+0x98>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d136      	bne.n	80020c4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_UART_MspInit+0x9c>)
 8002058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_UART_MspInit+0x9c>)
 800205e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002062:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_UART_MspInit+0x9c>)
 8002068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800206c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_UART_MspInit+0x9c>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <HAL_UART_MspInit+0x9c>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_UART_MspInit+0x9c>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002092:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a4:	2307      	movs	r3, #7
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	4809      	ldr	r0, [pc, #36]	; (80020d4 <HAL_UART_MspInit+0xa0>)
 80020b0:	f000 fc50 	bl	8002954 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2027      	movs	r0, #39	; 0x27
 80020ba:	f000 f9d2 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020be:	2027      	movs	r0, #39	; 0x27
 80020c0:	f000 f9e9 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40004800 	.word	0x40004800
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58020c00 	.word	0x58020c00

080020d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002110 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020de:	e003      	b.n	80020e8 <LoopCopyDataInit>

080020e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020e6:	3104      	adds	r1, #4

080020e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020e8:	480b      	ldr	r0, [pc, #44]	; (8002118 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020f0:	d3f6      	bcc.n	80020e0 <CopyDataInit>
  ldr  r2, =_sbss
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020f4:	e002      	b.n	80020fc <LoopFillZerobss>

080020f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020f8:	f842 3b04 	str.w	r3, [r2], #4

080020fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002100:	d3f9      	bcc.n	80020f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002102:	f7fe fac5 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002106:	f005 fdfb 	bl	8007d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210a:	f7fe fecb 	bl	8000ea4 <main>
  bx  lr    
 800210e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002110:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002114:	0800b444 	.word	0x0800b444
  ldr  r0, =_sdata
 8002118:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800211c:	240009c0 	.word	0x240009c0
  ldr  r2, =_sbss
 8002120:	240009c0 	.word	0x240009c0
  ldr  r3, = _ebss
 8002124:	24009b38 	.word	0x24009b38

08002128 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC3_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002132:	2003      	movs	r0, #3
 8002134:	f000 f98a 	bl	800244c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002138:	f001 fc24 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 800213c:	4601      	mov	r1, r0
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_Init+0x68>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_Init+0x6c>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa21 f303 	lsr.w	r3, r1, r3
 8002154:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_Init+0x68>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_Init+0x6c>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
 800216c:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_Init+0x70>)
 800216e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002170:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_Init+0x74>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002176:	2000      	movs	r0, #0
 8002178:	f000 f814 	bl	80021a4 <HAL_InitTick>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e002      	b.n	800218c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002186:	f7ff fe1d 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	58024400 	.word	0x58024400
 8002198:	0800b160 	.word	0x0800b160
 800219c:	24000004 	.word	0x24000004
 80021a0:	24000000 	.word	0x24000000

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_InitTick+0x60>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e021      	b.n	80021fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_InitTick+0x64>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_InitTick+0x60>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f96f 	bl	80024b2 <HAL_SYSTICK_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e00e      	b.n	80021fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d80a      	bhi.n	80021fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e4:	2200      	movs	r2, #0
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f000 f939 	bl	8002462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_InitTick+0x68>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	2400000c 	.word	0x2400000c
 8002208:	24000000 	.word	0x24000000
 800220c:	24000008 	.word	0x24000008

08002210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x20>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x24>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_IncTick+0x24>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2400000c 	.word	0x2400000c
 8002234:	24009b24 	.word	0x24009b24

08002238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_GetTick+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	24009b24 	.word	0x24009b24

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff ffee 	bl	8002238 <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d005      	beq.n	8002276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_Delay+0x40>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002276:	bf00      	nop
 8002278:	f7ff ffde 	bl	8002238 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8f7      	bhi.n	8002278 <HAL_Delay+0x28>
  {
  }
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2400000c 	.word	0x2400000c

08002294 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_GetREVID+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0c1b      	lsrs	r3, r3, #16
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	5c001000 	.word	0x5c001000

080022ac <__NVIC_SetPriorityGrouping>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <__NVIC_SetPriorityGrouping+0x40>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c8:	4013      	ands	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__NVIC_SetPriorityGrouping+0x40>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00
 80022f0:	05fa0000 	.word	0x05fa0000

080022f4 <__NVIC_GetPriorityGrouping>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <__NVIC_GetPriorityGrouping+0x18>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0307 	and.w	r3, r3, #7
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_EnableIRQ>:
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800231a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0b      	blt.n	800233a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4907      	ldr	r1, [pc, #28]	; (8002348 <__NVIC_EnableIRQ+0x38>)
 800232a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2001      	movs	r0, #1
 8002332:	fa00 f202 	lsl.w	r2, r0, r2
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002418:	d301      	bcc.n	800241e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241a:	2301      	movs	r3, #1
 800241c:	e00f      	b.n	800243e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <SysTick_Config+0x40>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002426:	210f      	movs	r1, #15
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f7ff ff8e 	bl	800234c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <SysTick_Config+0x40>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <SysTick_Config+0x40>)
 8002438:	2207      	movs	r2, #7
 800243a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	e000e010 	.word	0xe000e010

0800244c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff29 	bl	80022ac <__NVIC_SetPriorityGrouping>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff40 	bl	80022f4 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff90 	bl	80023a0 <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5f 	bl	800234c <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff33 	bl	8002310 <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa4 	bl	8002408 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e205      	b.n	80028ea <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d004      	beq.n	80024f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e1fa      	b.n	80028ea <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a8c      	ldr	r2, [pc, #560]	; (800272c <HAL_DMA_Abort_IT+0x260>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d04a      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a8b      	ldr	r2, [pc, #556]	; (8002730 <HAL_DMA_Abort_IT+0x264>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d045      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a89      	ldr	r2, [pc, #548]	; (8002734 <HAL_DMA_Abort_IT+0x268>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d040      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a88      	ldr	r2, [pc, #544]	; (8002738 <HAL_DMA_Abort_IT+0x26c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d03b      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a86      	ldr	r2, [pc, #536]	; (800273c <HAL_DMA_Abort_IT+0x270>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d036      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a85      	ldr	r2, [pc, #532]	; (8002740 <HAL_DMA_Abort_IT+0x274>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d031      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a83      	ldr	r2, [pc, #524]	; (8002744 <HAL_DMA_Abort_IT+0x278>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02c      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a82      	ldr	r2, [pc, #520]	; (8002748 <HAL_DMA_Abort_IT+0x27c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d027      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a80      	ldr	r2, [pc, #512]	; (800274c <HAL_DMA_Abort_IT+0x280>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d022      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7f      	ldr	r2, [pc, #508]	; (8002750 <HAL_DMA_Abort_IT+0x284>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d01d      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a7d      	ldr	r2, [pc, #500]	; (8002754 <HAL_DMA_Abort_IT+0x288>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d018      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7c      	ldr	r2, [pc, #496]	; (8002758 <HAL_DMA_Abort_IT+0x28c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d013      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a7a      	ldr	r2, [pc, #488]	; (800275c <HAL_DMA_Abort_IT+0x290>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00e      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a79      	ldr	r2, [pc, #484]	; (8002760 <HAL_DMA_Abort_IT+0x294>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d009      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a77      	ldr	r2, [pc, #476]	; (8002764 <HAL_DMA_Abort_IT+0x298>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d004      	beq.n	8002594 <HAL_DMA_Abort_IT+0xc8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a76      	ldr	r2, [pc, #472]	; (8002768 <HAL_DMA_Abort_IT+0x29c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Abort_IT+0xcc>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_DMA_Abort_IT+0xce>
 8002598:	2300      	movs	r3, #0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d065      	beq.n	800266a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2204      	movs	r2, #4
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a60      	ldr	r2, [pc, #384]	; (800272c <HAL_DMA_Abort_IT+0x260>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d04a      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5e      	ldr	r2, [pc, #376]	; (8002730 <HAL_DMA_Abort_IT+0x264>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d045      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a5d      	ldr	r2, [pc, #372]	; (8002734 <HAL_DMA_Abort_IT+0x268>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d040      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a5b      	ldr	r2, [pc, #364]	; (8002738 <HAL_DMA_Abort_IT+0x26c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d03b      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a5a      	ldr	r2, [pc, #360]	; (800273c <HAL_DMA_Abort_IT+0x270>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d036      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a58      	ldr	r2, [pc, #352]	; (8002740 <HAL_DMA_Abort_IT+0x274>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d031      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a57      	ldr	r2, [pc, #348]	; (8002744 <HAL_DMA_Abort_IT+0x278>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d02c      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a55      	ldr	r2, [pc, #340]	; (8002748 <HAL_DMA_Abort_IT+0x27c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d027      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a54      	ldr	r2, [pc, #336]	; (800274c <HAL_DMA_Abort_IT+0x280>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d022      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_DMA_Abort_IT+0x284>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01d      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a51      	ldr	r2, [pc, #324]	; (8002754 <HAL_DMA_Abort_IT+0x288>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d018      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <HAL_DMA_Abort_IT+0x28c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a4e      	ldr	r2, [pc, #312]	; (800275c <HAL_DMA_Abort_IT+0x290>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <HAL_DMA_Abort_IT+0x294>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a4b      	ldr	r2, [pc, #300]	; (8002764 <HAL_DMA_Abort_IT+0x298>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_DMA_Abort_IT+0x17a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a49      	ldr	r2, [pc, #292]	; (8002768 <HAL_DMA_Abort_IT+0x29c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d108      	bne.n	8002658 <HAL_DMA_Abort_IT+0x18c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e147      	b.n	80028e8 <HAL_DMA_Abort_IT+0x41c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e13e      	b.n	80028e8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 020e 	bic.w	r2, r2, #14
 8002678:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2b      	ldr	r2, [pc, #172]	; (800272c <HAL_DMA_Abort_IT+0x260>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d04a      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a29      	ldr	r2, [pc, #164]	; (8002730 <HAL_DMA_Abort_IT+0x264>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d045      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a28      	ldr	r2, [pc, #160]	; (8002734 <HAL_DMA_Abort_IT+0x268>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d040      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <HAL_DMA_Abort_IT+0x26c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d03b      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a25      	ldr	r2, [pc, #148]	; (800273c <HAL_DMA_Abort_IT+0x270>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d036      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_DMA_Abort_IT+0x274>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d031      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a22      	ldr	r2, [pc, #136]	; (8002744 <HAL_DMA_Abort_IT+0x278>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d02c      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_DMA_Abort_IT+0x27c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d027      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_DMA_Abort_IT+0x280>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d022      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <HAL_DMA_Abort_IT+0x284>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01d      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_DMA_Abort_IT+0x288>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d018      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_DMA_Abort_IT+0x28c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <HAL_DMA_Abort_IT+0x290>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00e      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a17      	ldr	r2, [pc, #92]	; (8002760 <HAL_DMA_Abort_IT+0x294>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_DMA_Abort_IT+0x298>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d004      	beq.n	800271a <HAL_DMA_Abort_IT+0x24e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <HAL_DMA_Abort_IT+0x29c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d128      	bne.n	800276c <HAL_DMA_Abort_IT+0x2a0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e027      	b.n	800277c <HAL_DMA_Abort_IT+0x2b0>
 800272c:	40020010 	.word	0x40020010
 8002730:	40020028 	.word	0x40020028
 8002734:	40020040 	.word	0x40020040
 8002738:	40020058 	.word	0x40020058
 800273c:	40020070 	.word	0x40020070
 8002740:	40020088 	.word	0x40020088
 8002744:	400200a0 	.word	0x400200a0
 8002748:	400200b8 	.word	0x400200b8
 800274c:	40020410 	.word	0x40020410
 8002750:	40020428 	.word	0x40020428
 8002754:	40020440 	.word	0x40020440
 8002758:	40020458 	.word	0x40020458
 800275c:	40020470 	.word	0x40020470
 8002760:	40020488 	.word	0x40020488
 8002764:	400204a0 	.word	0x400204a0
 8002768:	400204b8 	.word	0x400204b8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5c      	ldr	r2, [pc, #368]	; (80028f4 <HAL_DMA_Abort_IT+0x428>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d072      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5b      	ldr	r2, [pc, #364]	; (80028f8 <HAL_DMA_Abort_IT+0x42c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d06d      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a59      	ldr	r2, [pc, #356]	; (80028fc <HAL_DMA_Abort_IT+0x430>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d068      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_DMA_Abort_IT+0x434>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d063      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a56      	ldr	r2, [pc, #344]	; (8002904 <HAL_DMA_Abort_IT+0x438>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d05e      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a55      	ldr	r2, [pc, #340]	; (8002908 <HAL_DMA_Abort_IT+0x43c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d059      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a53      	ldr	r2, [pc, #332]	; (800290c <HAL_DMA_Abort_IT+0x440>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d054      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_DMA_Abort_IT+0x444>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d04f      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a50      	ldr	r2, [pc, #320]	; (8002914 <HAL_DMA_Abort_IT+0x448>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04a      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a4f      	ldr	r2, [pc, #316]	; (8002918 <HAL_DMA_Abort_IT+0x44c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d045      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a4d      	ldr	r2, [pc, #308]	; (800291c <HAL_DMA_Abort_IT+0x450>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d040      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a4c      	ldr	r2, [pc, #304]	; (8002920 <HAL_DMA_Abort_IT+0x454>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d03b      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4a      	ldr	r2, [pc, #296]	; (8002924 <HAL_DMA_Abort_IT+0x458>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d036      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a49      	ldr	r2, [pc, #292]	; (8002928 <HAL_DMA_Abort_IT+0x45c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d031      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a47      	ldr	r2, [pc, #284]	; (800292c <HAL_DMA_Abort_IT+0x460>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02c      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a46      	ldr	r2, [pc, #280]	; (8002930 <HAL_DMA_Abort_IT+0x464>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d027      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a44      	ldr	r2, [pc, #272]	; (8002934 <HAL_DMA_Abort_IT+0x468>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d022      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a43      	ldr	r2, [pc, #268]	; (8002938 <HAL_DMA_Abort_IT+0x46c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d01d      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a41      	ldr	r2, [pc, #260]	; (800293c <HAL_DMA_Abort_IT+0x470>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d018      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a40      	ldr	r2, [pc, #256]	; (8002940 <HAL_DMA_Abort_IT+0x474>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3e      	ldr	r2, [pc, #248]	; (8002944 <HAL_DMA_Abort_IT+0x478>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a3d      	ldr	r2, [pc, #244]	; (8002948 <HAL_DMA_Abort_IT+0x47c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3b      	ldr	r2, [pc, #236]	; (800294c <HAL_DMA_Abort_IT+0x480>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_DMA_Abort_IT+0x3a0>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3a      	ldr	r2, [pc, #232]	; (8002950 <HAL_DMA_Abort_IT+0x484>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_DMA_Abort_IT+0x3a4>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_DMA_Abort_IT+0x3a6>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d028      	beq.n	80028c8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002884:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2201      	movs	r2, #1
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00c      	beq.n	80028c8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40020010 	.word	0x40020010
 80028f8:	40020028 	.word	0x40020028
 80028fc:	40020040 	.word	0x40020040
 8002900:	40020058 	.word	0x40020058
 8002904:	40020070 	.word	0x40020070
 8002908:	40020088 	.word	0x40020088
 800290c:	400200a0 	.word	0x400200a0
 8002910:	400200b8 	.word	0x400200b8
 8002914:	40020410 	.word	0x40020410
 8002918:	40020428 	.word	0x40020428
 800291c:	40020440 	.word	0x40020440
 8002920:	40020458 	.word	0x40020458
 8002924:	40020470 	.word	0x40020470
 8002928:	40020488 	.word	0x40020488
 800292c:	400204a0 	.word	0x400204a0
 8002930:	400204b8 	.word	0x400204b8
 8002934:	58025408 	.word	0x58025408
 8002938:	5802541c 	.word	0x5802541c
 800293c:	58025430 	.word	0x58025430
 8002940:	58025444 	.word	0x58025444
 8002944:	58025458 	.word	0x58025458
 8002948:	5802546c 	.word	0x5802546c
 800294c:	58025480 	.word	0x58025480
 8002950:	58025494 	.word	0x58025494

08002954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002962:	4b89      	ldr	r3, [pc, #548]	; (8002b88 <HAL_GPIO_Init+0x234>)
 8002964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002966:	e194      	b.n	8002c92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8186 	beq.w	8002c8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d00b      	beq.n	80029a0 <HAL_GPIO_Init+0x4c>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d007      	beq.n	80029a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002994:	2b11      	cmp	r3, #17
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b12      	cmp	r3, #18
 800299e:	d130      	bne.n	8002a02 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d6:	2201      	movs	r2, #1
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 0201 	and.w	r2, r3, #1
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0xee>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b12      	cmp	r3, #18
 8002a40:	d123      	bne.n	8002a8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	220f      	movs	r2, #15
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	69b9      	ldr	r1, [r7, #24]
 8002a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0203 	and.w	r2, r3, #3
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80e0 	beq.w	8002c8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002acc:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_GPIO_Init+0x238>)
 8002ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ad2:	4a2e      	ldr	r2, [pc, #184]	; (8002b8c <HAL_GPIO_Init+0x238>)
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_GPIO_Init+0x238>)
 8002ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aea:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <HAL_GPIO_Init+0x23c>)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3302      	adds	r3, #2
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	220f      	movs	r2, #15
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <HAL_GPIO_Init+0x240>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d052      	beq.n	8002bbc <HAL_GPIO_Init+0x268>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1f      	ldr	r2, [pc, #124]	; (8002b98 <HAL_GPIO_Init+0x244>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d031      	beq.n	8002b82 <HAL_GPIO_Init+0x22e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_GPIO_Init+0x248>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d02b      	beq.n	8002b7e <HAL_GPIO_Init+0x22a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_GPIO_Init+0x24c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d025      	beq.n	8002b7a <HAL_GPIO_Init+0x226>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_GPIO_Init+0x250>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01f      	beq.n	8002b76 <HAL_GPIO_Init+0x222>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_GPIO_Init+0x254>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d019      	beq.n	8002b72 <HAL_GPIO_Init+0x21e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <HAL_GPIO_Init+0x258>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_GPIO_Init+0x21a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_GPIO_Init+0x25c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00d      	beq.n	8002b6a <HAL_GPIO_Init+0x216>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_GPIO_Init+0x260>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <HAL_GPIO_Init+0x212>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <HAL_GPIO_Init+0x264>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <HAL_GPIO_Init+0x20e>
 8002b5e:	2309      	movs	r3, #9
 8002b60:	e02d      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b62:	230a      	movs	r3, #10
 8002b64:	e02b      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b66:	2308      	movs	r3, #8
 8002b68:	e029      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b6a:	2307      	movs	r3, #7
 8002b6c:	e027      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b6e:	2306      	movs	r3, #6
 8002b70:	e025      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b72:	2305      	movs	r3, #5
 8002b74:	e023      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b76:	2304      	movs	r3, #4
 8002b78:	e021      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e01f      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e01d      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e01b      	b.n	8002bbe <HAL_GPIO_Init+0x26a>
 8002b86:	bf00      	nop
 8002b88:	58000080 	.word	0x58000080
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	58000400 	.word	0x58000400
 8002b94:	58020000 	.word	0x58020000
 8002b98:	58020400 	.word	0x58020400
 8002b9c:	58020800 	.word	0x58020800
 8002ba0:	58020c00 	.word	0x58020c00
 8002ba4:	58021000 	.word	0x58021000
 8002ba8:	58021400 	.word	0x58021400
 8002bac:	58021800 	.word	0x58021800
 8002bb0:	58021c00 	.word	0x58021c00
 8002bb4:	58022000 	.word	0x58022000
 8002bb8:	58022400 	.word	0x58022400
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	f002 0203 	and.w	r2, r2, #3
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	4093      	lsls	r3, r2
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bce:	4938      	ldr	r1, [pc, #224]	; (8002cb0 <HAL_GPIO_Init+0x35c>)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f47f ae63 	bne.w	8002968 <HAL_GPIO_Init+0x14>
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	58000400 	.word	0x58000400

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002cf0:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <HAL_HSEM_FastTake+0x2c>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3320      	adds	r3, #32
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_HSEM_FastTake+0x30>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	58026400 	.word	0x58026400
 8002d18:	80000300 	.word	0x80000300

08002d1c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002d26:	4906      	ldr	r1, [pc, #24]	; (8002d40 <HAL_HSEM_Release+0x24>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	58026400 	.word	0x58026400

08002d44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d00a      	beq.n	8002d6e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d58:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e040      	b.n	8002dec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e03e      	b.n	8002dec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d76:	491f      	ldr	r1, [pc, #124]	; (8002df4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d7e:	f7ff fa5b 	bl	8002238 <HAL_GetTick>
 8002d82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d84:	e009      	b.n	8002d9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d86:	f7ff fa57 	bl	8002238 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d94:	d901      	bls.n	8002d9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e028      	b.n	8002dec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da6:	d1ee      	bne.n	8002d86 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b1e      	cmp	r3, #30
 8002dac:	d008      	beq.n	8002dc0 <HAL_PWREx_ConfigSupply+0x7c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b2e      	cmp	r3, #46	; 0x2e
 8002db2:	d005      	beq.n	8002dc0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b1d      	cmp	r3, #29
 8002db8:	d002      	beq.n	8002dc0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b2d      	cmp	r3, #45	; 0x2d
 8002dbe:	d114      	bne.n	8002dea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002dc0:	f7ff fa3a 	bl	8002238 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002dc6:	e009      	b.n	8002ddc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dc8:	f7ff fa36 	bl	8002238 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd6:	d901      	bls.n	8002ddc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e007      	b.n	8002dec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d1ee      	bne.n	8002dc8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	58024800 	.word	0x58024800

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e3ff      	b.n	800360a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8087 	beq.w	8002f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e18:	4b99      	ldr	r3, [pc, #612]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e22:	4b97      	ldr	r3, [pc, #604]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d007      	beq.n	8002e3e <HAL_RCC_OscConfig+0x46>
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	2b18      	cmp	r3, #24
 8002e32:	d110      	bne.n	8002e56 <HAL_RCC_OscConfig+0x5e>
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d10b      	bne.n	8002e56 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3e:	4b90      	ldr	r3, [pc, #576]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d06c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x12c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d168      	bne.n	8002f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e3d9      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x76>
 8002e60:	4b87      	ldr	r3, [pc, #540]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a86      	ldr	r2, [pc, #536]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e02e      	b.n	8002ecc <HAL_RCC_OscConfig+0xd4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x98>
 8002e76:	4b82      	ldr	r3, [pc, #520]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a81      	ldr	r2, [pc, #516]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b7f      	ldr	r3, [pc, #508]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7e      	ldr	r2, [pc, #504]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xd4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xbc>
 8002e9a:	4b79      	ldr	r3, [pc, #484]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a78      	ldr	r2, [pc, #480]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xd4>
 8002eb4:	4b72      	ldr	r3, [pc, #456]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a71      	ldr	r2, [pc, #452]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6e      	ldr	r2, [pc, #440]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7ff f9b0 	bl	8002238 <HAL_GetTick>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002edc:	f7ff f9ac 	bl	8002238 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e38d      	b.n	800360a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eee:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xe4>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7ff f99c 	bl	8002238 <HAL_GetTick>
 8002f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f04:	f7ff f998 	bl	8002238 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e379      	b.n	800360a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f16:	4b5a      	ldr	r3, [pc, #360]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x10c>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80ae 	beq.w	8003090 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f34:	4b52      	ldr	r3, [pc, #328]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f3e:	4b50      	ldr	r3, [pc, #320]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <HAL_RCC_OscConfig+0x162>
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2b18      	cmp	r3, #24
 8002f4e:	d13a      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x1ce>
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d135      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f5a:	4b49      	ldr	r3, [pc, #292]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x17a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e34b      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	f7ff f98f 	bl	8002294 <HAL_GetREVID>
 8002f76:	4602      	mov	r2, r0
 8002f78:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d817      	bhi.n	8002fb0 <HAL_RCC_OscConfig+0x1b8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b40      	cmp	r3, #64	; 0x40
 8002f86:	d108      	bne.n	8002f9a <HAL_RCC_OscConfig+0x1a2>
 8002f88:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f90:	4a3b      	ldr	r2, [pc, #236]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f96:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f98:	e07a      	b.n	8003090 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	031b      	lsls	r3, r3, #12
 8002fa8:	4935      	ldr	r1, [pc, #212]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fae:	e06f      	b.n	8003090 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb0:	4b33      	ldr	r3, [pc, #204]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	4930      	ldr	r1, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc4:	e064      	b.n	8003090 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d045      	beq.n	800305a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fce:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 0219 	bic.w	r2, r3, #25
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	4929      	ldr	r1, [pc, #164]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7ff f92a 	bl	8002238 <HAL_GetTick>
 8002fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7ff f926 	bl	8002238 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e307      	b.n	800360a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	f7ff f945 	bl	8002294 <HAL_GetREVID>
 800300a:	4602      	mov	r2, r0
 800300c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003010:	429a      	cmp	r2, r3
 8003012:	d817      	bhi.n	8003044 <HAL_RCC_OscConfig+0x24c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d108      	bne.n	800302e <HAL_RCC_OscConfig+0x236>
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003024:	4a16      	ldr	r2, [pc, #88]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8003026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302a:	6053      	str	r3, [r2, #4]
 800302c:	e030      	b.n	8003090 <HAL_RCC_OscConfig+0x298>
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	031b      	lsls	r3, r3, #12
 800303c:	4910      	ldr	r1, [pc, #64]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
 8003042:	e025      	b.n	8003090 <HAL_RCC_OscConfig+0x298>
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	490b      	ldr	r1, [pc, #44]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
 8003058:	e01a      	b.n	8003090 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <HAL_RCC_OscConfig+0x288>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7ff f8e7 	bl	8002238 <HAL_GetTick>
 800306a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306e:	f7ff f8e3 	bl	8002238 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d903      	bls.n	8003084 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e2c4      	b.n	800360a <HAL_RCC_OscConfig+0x812>
 8003080:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003084:	4ba4      	ldr	r3, [pc, #656]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ee      	bne.n	800306e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a9 	beq.w	80031f0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030a8:	4b9b      	ldr	r3, [pc, #620]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d007      	beq.n	80030c4 <HAL_RCC_OscConfig+0x2cc>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b18      	cmp	r3, #24
 80030b8:	d13a      	bne.n	8003130 <HAL_RCC_OscConfig+0x338>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d135      	bne.n	8003130 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030c4:	4b94      	ldr	r3, [pc, #592]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_OscConfig+0x2e4>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e296      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030dc:	f7ff f8da 	bl	8002294 <HAL_GetREVID>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d817      	bhi.n	800311a <HAL_RCC_OscConfig+0x322>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d108      	bne.n	8003104 <HAL_RCC_OscConfig+0x30c>
 80030f2:	4b89      	ldr	r3, [pc, #548]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030fa:	4a87      	ldr	r2, [pc, #540]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80030fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003100:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003102:	e075      	b.n	80031f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003104:	4b84      	ldr	r3, [pc, #528]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	069b      	lsls	r3, r3, #26
 8003112:	4981      	ldr	r1, [pc, #516]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003118:	e06a      	b.n	80031f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800311a:	4b7f      	ldr	r3, [pc, #508]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	061b      	lsls	r3, r3, #24
 8003128:	497b      	ldr	r1, [pc, #492]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 800312a:	4313      	orrs	r3, r2
 800312c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800312e:	e05f      	b.n	80031f0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d042      	beq.n	80031be <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003138:	4b77      	ldr	r3, [pc, #476]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a76      	ldr	r2, [pc, #472]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 800313e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7ff f878 	bl	8002238 <HAL_GetTick>
 8003148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800314c:	f7ff f874 	bl	8002238 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e255      	b.n	800360a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800315e:	4b6e      	ldr	r3, [pc, #440]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800316a:	f7ff f893 	bl	8002294 <HAL_GetREVID>
 800316e:	4602      	mov	r2, r0
 8003170:	f241 0303 	movw	r3, #4099	; 0x1003
 8003174:	429a      	cmp	r2, r3
 8003176:	d817      	bhi.n	80031a8 <HAL_RCC_OscConfig+0x3b0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	2b20      	cmp	r3, #32
 800317e:	d108      	bne.n	8003192 <HAL_RCC_OscConfig+0x39a>
 8003180:	4b65      	ldr	r3, [pc, #404]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003188:	4a63      	ldr	r2, [pc, #396]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 800318a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800318e:	6053      	str	r3, [r2, #4]
 8003190:	e02e      	b.n	80031f0 <HAL_RCC_OscConfig+0x3f8>
 8003192:	4b61      	ldr	r3, [pc, #388]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	069b      	lsls	r3, r3, #26
 80031a0:	495d      	ldr	r1, [pc, #372]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
 80031a6:	e023      	b.n	80031f0 <HAL_RCC_OscConfig+0x3f8>
 80031a8:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	4958      	ldr	r1, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
 80031bc:	e018      	b.n	80031f0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031be:	4b56      	ldr	r3, [pc, #344]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80031c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7ff f835 	bl	8002238 <HAL_GetTick>
 80031ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031d2:	f7ff f831 	bl	8002238 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e212      	b.n	800360a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031e4:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d036      	beq.n	800326a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d019      	beq.n	8003238 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003204:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	4a43      	ldr	r2, [pc, #268]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7ff f812 	bl	8002238 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003218:	f7ff f80e 	bl	8002238 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1ef      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800322a:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x420>
 8003236:	e018      	b.n	800326a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	4a36      	ldr	r2, [pc, #216]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe fff8 	bl	8002238 <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324c:	f7fe fff4 	bl	8002238 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1d5      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800325e:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d036      	beq.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d019      	beq.n	80032b2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a25      	ldr	r2, [pc, #148]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 8003284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003288:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800328a:	f7fe ffd5 	bl	8002238 <HAL_GetTick>
 800328e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003292:	f7fe ffd1 	bl	8002238 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e1b2      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032a4:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x49a>
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032b2:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a18      	ldr	r2, [pc, #96]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80032b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032be:	f7fe ffbb 	bl	8002238 <HAL_GetTick>
 80032c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032c6:	f7fe ffb7 	bl	8002238 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e198      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_RCC_OscConfig+0x520>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8085 	beq.w	80033fc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RCC_OscConfig+0x524>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_OscConfig+0x524>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fe:	f7fe ff9b 	bl	8002238 <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003304:	e00c      	b.n	8003320 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe ff97 	bl	8002238 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b64      	cmp	r3, #100	; 0x64
 8003312:	d905      	bls.n	8003320 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e178      	b.n	800360a <HAL_RCC_OscConfig+0x812>
 8003318:	58024400 	.word	0x58024400
 800331c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003320:	4b96      	ldr	r3, [pc, #600]	; (800357c <HAL_RCC_OscConfig+0x784>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ec      	beq.n	8003306 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x54a>
 8003334:	4b92      	ldr	r3, [pc, #584]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a91      	ldr	r2, [pc, #580]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
 8003340:	e02d      	b.n	800339e <HAL_RCC_OscConfig+0x5a6>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x56c>
 800334a:	4b8d      	ldr	r3, [pc, #564]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a8c      	ldr	r2, [pc, #560]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	4b8a      	ldr	r3, [pc, #552]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a89      	ldr	r2, [pc, #548]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800335c:	f023 0304 	bic.w	r3, r3, #4
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
 8003362:	e01c      	b.n	800339e <HAL_RCC_OscConfig+0x5a6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b05      	cmp	r3, #5
 800336a:	d10c      	bne.n	8003386 <HAL_RCC_OscConfig+0x58e>
 800336c:	4b84      	ldr	r3, [pc, #528]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a83      	ldr	r2, [pc, #524]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003372:	f043 0304 	orr.w	r3, r3, #4
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	4b81      	ldr	r3, [pc, #516]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a80      	ldr	r2, [pc, #512]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	e00b      	b.n	800339e <HAL_RCC_OscConfig+0x5a6>
 8003386:	4b7e      	ldr	r3, [pc, #504]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a7d      	ldr	r2, [pc, #500]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	4b7b      	ldr	r3, [pc, #492]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a7a      	ldr	r2, [pc, #488]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003398:	f023 0304 	bic.w	r3, r3, #4
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d015      	beq.n	80033d2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fe ff47 	bl	8002238 <HAL_GetTick>
 80033aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fe ff43 	bl	8002238 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e122      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033c4:	4b6e      	ldr	r3, [pc, #440]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ee      	beq.n	80033ae <HAL_RCC_OscConfig+0x5b6>
 80033d0:	e014      	b.n	80033fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fe ff31 	bl	8002238 <HAL_GetTick>
 80033d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe ff2d 	bl	8002238 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e10c      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033f0:	4b63      	ldr	r3, [pc, #396]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ee      	bne.n	80033da <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8101 	beq.w	8003608 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003406:	4b5e      	ldr	r3, [pc, #376]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800340e:	2b18      	cmp	r3, #24
 8003410:	f000 80bc 	beq.w	800358c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b02      	cmp	r3, #2
 800341a:	f040 8095 	bne.w	8003548 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b58      	ldr	r3, [pc, #352]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a57      	ldr	r2, [pc, #348]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe ff05 	bl	8002238 <HAL_GetTick>
 800342e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003432:	f7fe ff01 	bl	8002238 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0e2      	b.n	800360a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003444:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003450:	4b4b      	ldr	r3, [pc, #300]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003454:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <HAL_RCC_OscConfig+0x78c>)
 8003456:	4013      	ands	r3, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003460:	0112      	lsls	r2, r2, #4
 8003462:	430a      	orrs	r2, r1
 8003464:	4946      	ldr	r1, [pc, #280]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003466:	4313      	orrs	r3, r2
 8003468:	628b      	str	r3, [r1, #40]	; 0x28
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	3b01      	subs	r3, #1
 8003470:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	3b01      	subs	r3, #1
 800347a:	025b      	lsls	r3, r3, #9
 800347c:	b29b      	uxth	r3, r3
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	3b01      	subs	r3, #1
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	3b01      	subs	r3, #1
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800349a:	4939      	ldr	r1, [pc, #228]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800349c:	4313      	orrs	r3, r2
 800349e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034a0:	4b37      	ldr	r3, [pc, #220]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	4a36      	ldr	r2, [pc, #216]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034ac:	4b34      	ldr	r3, [pc, #208]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <HAL_RCC_OscConfig+0x790>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034b8:	00d2      	lsls	r2, r2, #3
 80034ba:	4931      	ldr	r1, [pc, #196]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034c0:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	f023 020c 	bic.w	r2, r3, #12
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	492c      	ldr	r1, [pc, #176]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034d2:	4b2b      	ldr	r3, [pc, #172]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	f023 0202 	bic.w	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	4928      	ldr	r1, [pc, #160]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034e4:	4b26      	ldr	r3, [pc, #152]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	4a25      	ldr	r2, [pc, #148]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f0:	4b23      	ldr	r3, [pc, #140]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4a22      	ldr	r2, [pc, #136]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a19      	ldr	r2, [pc, #100]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800351a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe fe8a 	bl	8002238 <HAL_GetTick>
 8003524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe fe86 	bl	8002238 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e067      	b.n	800360a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x730>
 8003546:	e05f      	b.n	8003608 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003548:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 800354e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fe70 	bl	8002238 <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe fe6c 	bl	8002238 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e04d      	b.n	800360a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800356e:	4b04      	ldr	r3, [pc, #16]	; (8003580 <HAL_RCC_OscConfig+0x788>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x764>
 800357a:	e045      	b.n	8003608 <HAL_RCC_OscConfig+0x810>
 800357c:	58024800 	.word	0x58024800
 8003580:	58024400 	.word	0x58024400
 8003584:	fffffc0c 	.word	0xfffffc0c
 8003588:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_RCC_OscConfig+0x81c>)
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_OscConfig+0x81c>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b01      	cmp	r3, #1
 800359e:	d031      	beq.n	8003604 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0203 	and.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d12a      	bne.n	8003604 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d122      	bne.n	8003604 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d11a      	bne.n	8003604 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	0a5b      	lsrs	r3, r3, #9
 80035d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d111      	bne.n	8003604 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d108      	bne.n	8003604 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	0e1b      	lsrs	r3, r3, #24
 80035f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3730      	adds	r7, #48	; 0x30
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	58024400 	.word	0x58024400

08003618 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e19c      	b.n	8003966 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800362c:	4b8a      	ldr	r3, [pc, #552]	; (8003858 <HAL_RCC_ClockConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d910      	bls.n	800365c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b87      	ldr	r3, [pc, #540]	; (8003858 <HAL_RCC_ClockConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 020f 	bic.w	r2, r3, #15
 8003642:	4985      	ldr	r1, [pc, #532]	; (8003858 <HAL_RCC_ClockConfig+0x240>)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b83      	ldr	r3, [pc, #524]	; (8003858 <HAL_RCC_ClockConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e184      	b.n	8003966 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	4b7b      	ldr	r3, [pc, #492]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003674:	429a      	cmp	r2, r3
 8003676:	d908      	bls.n	800368a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003678:	4b78      	ldr	r3, [pc, #480]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	4975      	ldr	r1, [pc, #468]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 8003686:	4313      	orrs	r3, r2
 8003688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d010      	beq.n	80036b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	4b70      	ldr	r3, [pc, #448]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d908      	bls.n	80036b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036a6:	4b6d      	ldr	r3, [pc, #436]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	496a      	ldr	r1, [pc, #424]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d010      	beq.n	80036e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	4b64      	ldr	r3, [pc, #400]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d908      	bls.n	80036e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036d4:	4b61      	ldr	r3, [pc, #388]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	495e      	ldr	r1, [pc, #376]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036fe:	429a      	cmp	r2, r3
 8003700:	d908      	bls.n	8003714 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003702:	4b56      	ldr	r3, [pc, #344]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4953      	ldr	r1, [pc, #332]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 8003710:	4313      	orrs	r3, r2
 8003712:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	4b4d      	ldr	r3, [pc, #308]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	429a      	cmp	r2, r3
 800372e:	d908      	bls.n	8003742 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b4a      	ldr	r3, [pc, #296]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f023 020f 	bic.w	r2, r3, #15
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4947      	ldr	r1, [pc, #284]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 800373e:	4313      	orrs	r3, r2
 8003740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d055      	beq.n	80037fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800374e:	4b43      	ldr	r3, [pc, #268]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	4940      	ldr	r1, [pc, #256]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 800375c:	4313      	orrs	r3, r2
 800375e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d107      	bne.n	8003778 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003768:	4b3c      	ldr	r3, [pc, #240]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d121      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0f6      	b.n	8003966 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d107      	bne.n	8003790 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003780:	4b36      	ldr	r3, [pc, #216]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d115      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0ea      	b.n	8003966 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003798:	4b30      	ldr	r3, [pc, #192]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0de      	b.n	8003966 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a8:	4b2c      	ldr	r3, [pc, #176]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0d6      	b.n	8003966 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b8:	4b28      	ldr	r3, [pc, #160]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f023 0207 	bic.w	r2, r3, #7
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4925      	ldr	r1, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fe fd35 	bl	8002238 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d2:	f7fe fd31 	bl	8002238 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0be      	b.n	8003966 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e8:	4b1c      	ldr	r3, [pc, #112]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d1eb      	bne.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d010      	beq.n	8003828 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	4b14      	ldr	r3, [pc, #80]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	429a      	cmp	r2, r3
 8003814:	d208      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f023 020f 	bic.w	r2, r3, #15
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	490e      	ldr	r1, [pc, #56]	; (800385c <HAL_RCC_ClockConfig+0x244>)
 8003824:	4313      	orrs	r3, r2
 8003826:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_ClockConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d214      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_RCC_ClockConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 020f 	bic.w	r2, r3, #15
 800383e:	4906      	ldr	r1, [pc, #24]	; (8003858 <HAL_RCC_ClockConfig+0x240>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <HAL_RCC_ClockConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e086      	b.n	8003966 <HAL_RCC_ClockConfig+0x34e>
 8003858:	52002000 	.word	0x52002000
 800385c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003878:	429a      	cmp	r2, r3
 800387a:	d208      	bcs.n	800388e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800387c:	4b3c      	ldr	r3, [pc, #240]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	4939      	ldr	r1, [pc, #228]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 800388a:	4313      	orrs	r3, r2
 800388c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d010      	beq.n	80038bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	4b34      	ldr	r3, [pc, #208]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d208      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	492e      	ldr	r1, [pc, #184]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d208      	bcs.n	80038ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	4922      	ldr	r1, [pc, #136]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d010      	beq.n	8003918 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003902:	429a      	cmp	r2, r3
 8003904:	d208      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4917      	ldr	r1, [pc, #92]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 8003914:	4313      	orrs	r3, r2
 8003916:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003918:	f000 f834 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 800391c:	4601      	mov	r1, r0
 800391e:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	4a12      	ldr	r2, [pc, #72]	; (8003974 <HAL_RCC_ClockConfig+0x35c>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	fa21 f303 	lsr.w	r3, r1, r3
 8003934:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_RCC_ClockConfig+0x358>)
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	4a0d      	ldr	r2, [pc, #52]	; (8003974 <HAL_RCC_ClockConfig+0x35c>)
 8003940:	5cd3      	ldrb	r3, [r2, r3]
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <HAL_RCC_ClockConfig+0x360>)
 800394e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x364>)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_RCC_ClockConfig+0x368>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fc22 	bl	80021a4 <HAL_InitTick>
 8003960:	4603      	mov	r3, r0
 8003962:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	58024400 	.word	0x58024400
 8003974:	0800b160 	.word	0x0800b160
 8003978:	24000004 	.word	0x24000004
 800397c:	24000000 	.word	0x24000000
 8003980:	24000008 	.word	0x24000008

08003984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800398a:	4baf      	ldr	r3, [pc, #700]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003992:	2b18      	cmp	r3, #24
 8003994:	f200 814e 	bhi.w	8003c34 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	08003a05 	.word	0x08003a05
 80039a4:	08003c35 	.word	0x08003c35
 80039a8:	08003c35 	.word	0x08003c35
 80039ac:	08003c35 	.word	0x08003c35
 80039b0:	08003c35 	.word	0x08003c35
 80039b4:	08003c35 	.word	0x08003c35
 80039b8:	08003c35 	.word	0x08003c35
 80039bc:	08003c35 	.word	0x08003c35
 80039c0:	08003a2b 	.word	0x08003a2b
 80039c4:	08003c35 	.word	0x08003c35
 80039c8:	08003c35 	.word	0x08003c35
 80039cc:	08003c35 	.word	0x08003c35
 80039d0:	08003c35 	.word	0x08003c35
 80039d4:	08003c35 	.word	0x08003c35
 80039d8:	08003c35 	.word	0x08003c35
 80039dc:	08003c35 	.word	0x08003c35
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003c35 	.word	0x08003c35
 80039e8:	08003c35 	.word	0x08003c35
 80039ec:	08003c35 	.word	0x08003c35
 80039f0:	08003c35 	.word	0x08003c35
 80039f4:	08003c35 	.word	0x08003c35
 80039f8:	08003c35 	.word	0x08003c35
 80039fc:	08003c35 	.word	0x08003c35
 8003a00:	08003a37 	.word	0x08003a37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a04:	4b90      	ldr	r3, [pc, #576]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a10:	4b8d      	ldr	r3, [pc, #564]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	08db      	lsrs	r3, r3, #3
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	4a8c      	ldr	r2, [pc, #560]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a22:	e10a      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a24:	4b89      	ldr	r3, [pc, #548]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a26:	61bb      	str	r3, [r7, #24]
    break;
 8003a28:	e107      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a2a:	4b89      	ldr	r3, [pc, #548]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003a2c:	61bb      	str	r3, [r7, #24]
    break;
 8003a2e:	e104      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a30:	4b88      	ldr	r3, [pc, #544]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003a32:	61bb      	str	r3, [r7, #24]
    break;
 8003a34:	e101      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a36:	4b84      	ldr	r3, [pc, #528]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a40:	4b81      	ldr	r3, [pc, #516]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a4c:	4b7e      	ldr	r3, [pc, #504]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a56:	4b7c      	ldr	r3, [pc, #496]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	08db      	lsrs	r3, r3, #3
 8003a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80da 	beq.w	8003c2e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d05a      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d302      	bcc.n	8003a8a <HAL_RCC_GetSysClockFreq+0x106>
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d078      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003a88:	e099      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a8a:	4b6f      	ldr	r3, [pc, #444]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d02d      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a96:	4b6c      	ldr	r3, [pc, #432]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	08db      	lsrs	r3, r3, #3
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	4a6a      	ldr	r2, [pc, #424]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac0:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ad4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003af0:	e087      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003c5c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b04:	4b50      	ldr	r3, [pc, #320]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0c:	ee07 3a90 	vmov	s15, r3
 8003b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b14:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b18:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b34:	e065      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b40:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b48:	4b3f      	ldr	r3, [pc, #252]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b58:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b5c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b78:	e043      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b84:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003c64 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bbc:	e021      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	ee07 3a90 	vmov	s15, r3
 8003bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c00:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	0a5b      	lsrs	r3, r3, #9
 8003c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c26:	ee17 3a90 	vmov	r3, s15
 8003c2a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c2c:	e005      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
    break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003c36:	61bb      	str	r3, [r7, #24]
    break;
 8003c38:	bf00      	nop
  }

  return sysclockfreq;
 8003c3a:	69bb      	ldr	r3, [r7, #24]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3724      	adds	r7, #36	; 0x24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	03d09000 	.word	0x03d09000
 8003c50:	003d0900 	.word	0x003d0900
 8003c54:	02625a00 	.word	0x02625a00
 8003c58:	46000000 	.word	0x46000000
 8003c5c:	4c742400 	.word	0x4c742400
 8003c60:	4a742400 	.word	0x4a742400
 8003c64:	4c189680 	.word	0x4c189680

08003c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c6e:	f7ff fe89 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003c72:	4601      	mov	r1, r0
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	4a0f      	ldr	r2, [pc, #60]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8003c80:	5cd3      	ldrb	r3, [r2, r3]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	fa21 f303 	lsr.w	r3, r1, r3
 8003c8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f003 030f 	and.w	r3, r3, #15
 8003c94:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca2:	4a07      	ldr	r2, [pc, #28]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ca4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ca6:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	0800b160 	.word	0x0800b160
 8003cc0:	24000004 	.word	0x24000004
 8003cc4:	24000000 	.word	0x24000000

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ccc:	f7ff ffcc 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4601      	mov	r1, r0
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cde:	5cd3      	ldrb	r3, [r2, r3]
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	58024400 	.word	0x58024400
 8003cf0:	0800b160 	.word	0x0800b160

08003cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003cf8:	f7ff ffb6 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4601      	mov	r1, r0
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	0800b160 	.word	0x0800b160

08003d20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d28:	2300      	movs	r3, #0
 8003d2a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03d      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d44:	d013      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d4a:	d802      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003d50:	e01f      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d56:	d013      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d5c:	d01c      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003d5e:	e018      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d60:	4baf      	ldr	r3, [pc, #700]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4aae      	ldr	r2, [pc, #696]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d6c:	e015      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	2102      	movs	r1, #2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 f96f 	bl	8005058 <RCCEx_PLL2_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d7e:	e00c      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3324      	adds	r3, #36	; 0x24
 8003d84:	2102      	movs	r1, #2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 fa18 	bl	80051bc <RCCEx_PLL3_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d90:	e003      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
      break;
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003da0:	4b9f      	ldr	r3, [pc, #636]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dac:	499c      	ldr	r1, [pc, #624]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	650b      	str	r3, [r1, #80]	; 0x50
 8003db2:	e001      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d03d      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d826      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003dcc:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003de9 	.word	0x08003de9
 8003dd8:	08003df7 	.word	0x08003df7
 8003ddc:	08003e09 	.word	0x08003e09
 8003de0:	08003e21 	.word	0x08003e21
 8003de4:	08003e21 	.word	0x08003e21
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de8:	4b8d      	ldr	r3, [pc, #564]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	4a8c      	ldr	r2, [pc, #560]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003df4:	e015      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 f92b 	bl	8005058 <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e06:	e00c      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3324      	adds	r3, #36	; 0x24
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 f9d4 	bl	80051bc <RCCEx_PLL3_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e18:	e003      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e28:	4b7d      	ldr	r3, [pc, #500]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	f023 0207 	bic.w	r2, r3, #7
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	497a      	ldr	r1, [pc, #488]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	650b      	str	r3, [r1, #80]	; 0x50
 8003e3a:	e001      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d03e      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d01c      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d804      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d00d      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003e60:	e01e      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003e62:	2bc0      	cmp	r3, #192	; 0xc0
 8003e64:	d01f      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6a:	d01e      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e6c:	e018      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6e:	4b6c      	ldr	r3, [pc, #432]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	4a6b      	ldr	r2, [pc, #428]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e7a:	e017      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 f8e8 	bl	8005058 <RCCEx_PLL2_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e8c:	e00e      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3324      	adds	r3, #36	; 0x24
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 f991 	bl	80051bc <RCCEx_PLL3_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e9e:	e005      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	4958      	ldr	r1, [pc, #352]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ec4:	e001      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d044      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee0:	d01f      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee6:	d805      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ef0:	d00e      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003ef2:	e01f      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003ef4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ef8:	d01f      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003efe:	d01e      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f00:	e018      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f02:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a46      	ldr	r2, [pc, #280]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f0e:	e017      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 f89e 	bl	8005058 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f20:	e00e      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3324      	adds	r3, #36	; 0x24
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 f947 	bl	80051bc <RCCEx_PLL3_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f32:	e005      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	e002      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f46:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f54:	4932      	ldr	r1, [pc, #200]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	658b      	str	r3, [r1, #88]	; 0x58
 8003f5a:	e001      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d044      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f76:	d01f      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f7c:	d805      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003f82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f86:	d00e      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003f88:	e01f      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003f8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f8e:	d01f      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f94:	d01e      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f96:	e018      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f98:	4b21      	ldr	r3, [pc, #132]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a20      	ldr	r2, [pc, #128]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fa4:	e017      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f853 	bl	8005058 <RCCEx_PLL2_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003fb6:	e00e      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3324      	adds	r3, #36	; 0x24
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 f8fc 	bl	80051bc <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e005      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fce:	e002      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fea:	490d      	ldr	r1, [pc, #52]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	658b      	str	r3, [r1, #88]	; 0x58
 8003ff0:	e001      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d035      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004006:	2b10      	cmp	r3, #16
 8004008:	d00c      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800400a:	2b10      	cmp	r3, #16
 800400c:	d802      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004012:	e017      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004014:	2b20      	cmp	r3, #32
 8004016:	d00c      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004018:	2b30      	cmp	r3, #48	; 0x30
 800401a:	d018      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800401c:	e012      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800401e:	bf00      	nop
 8004020:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004024:	4baf      	ldr	r3, [pc, #700]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4aae      	ldr	r2, [pc, #696]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800402a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004030:	e00e      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	2102      	movs	r1, #2
 8004038:	4618      	mov	r0, r3
 800403a:	f001 f80d 	bl	8005058 <RCCEx_PLL2_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004042:	e005      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
      break;
 8004048:	e002      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800404a:	bf00      	nop
 800404c:	e000      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800404e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004056:	4ba3      	ldr	r3, [pc, #652]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004062:	49a0      	ldr	r1, [pc, #640]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004064:	4313      	orrs	r3, r2
 8004066:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004068:	e001      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d042      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004082:	d01f      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004088:	d805      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004092:	d00e      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004094:	e01f      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004096:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800409a:	d01f      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800409c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a0:	d01e      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80040a2:	e018      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a4:	4b8f      	ldr	r3, [pc, #572]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	4a8e      	ldr	r2, [pc, #568]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040b0:	e017      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 ffcd 	bl	8005058 <RCCEx_PLL2_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040c2:	e00e      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3324      	adds	r3, #36	; 0x24
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 f876 	bl	80051bc <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040d4:	e005      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
      break;
 80040da:	e002      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80040dc:	bf00      	nop
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80040e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040e8:	4b7e      	ldr	r3, [pc, #504]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	497b      	ldr	r1, [pc, #492]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	650b      	str	r3, [r1, #80]	; 0x50
 80040fa:	e001      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d042      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004114:	d01b      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800411a:	d805      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d022      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004126:	e01b      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004128:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800412c:	d01d      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800412e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004132:	d01c      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004138:	d01b      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800413a:	e011      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f000 ff88 	bl	8005058 <RCCEx_PLL2_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800414c:	e012      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	2101      	movs	r1, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f001 f831 	bl	80051bc <RCCEx_PLL3_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]
      break;
 8004164:	e006      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800417a:	4b5a      	ldr	r3, [pc, #360]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004186:	4957      	ldr	r1, [pc, #348]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	650b      	str	r3, [r1, #80]	; 0x50
 800418c:	e001      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d044      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a8:	d01b      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80041aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ae:	d805      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d022      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80041b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80041ba:	e01b      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d01d      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80041c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c6:	d01c      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80041c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041cc:	d01b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80041ce:	e011      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	2101      	movs	r1, #1
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 ff3e 	bl	8005058 <RCCEx_PLL2_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041e0:	e012      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3324      	adds	r3, #36	; 0x24
 80041e6:	2101      	movs	r1, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 ffe7 	bl	80051bc <RCCEx_PLL3_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041f2:	e009      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
      break;
 80041f8:	e006      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e004      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80041fe:	bf00      	nop
 8004200:	e002      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800420e:	4b35      	ldr	r3, [pc, #212]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800421c:	4931      	ldr	r1, [pc, #196]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	658b      	str	r3, [r1, #88]	; 0x58
 8004222:	e001      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004224:	7dfb      	ldrb	r3, [r7, #23]
 8004226:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d02d      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800423c:	d005      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800423e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004242:	d009      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004248:	e00f      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424a:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004254:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004256:	e00c      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fefa 	bl	8005058 <RCCEx_PLL2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
      break;
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004278:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004284:	4917      	ldr	r1, [pc, #92]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	650b      	str	r3, [r1, #80]	; 0x50
 800428a:	e001      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d035      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d81b      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042e9 	.word	0x080042e9
 80042b0:	080042bd 	.word	0x080042bd
 80042b4:	080042cb 	.word	0x080042cb
 80042b8:	080042e9 	.word	0x080042e9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042c8:	e00f      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2102      	movs	r1, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fec1 	bl	8005058 <RCCEx_PLL2_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042da:	e006      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
      break;
 80042e0:	e003      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80042e2:	bf00      	nop
 80042e4:	58024400 	.word	0x58024400
      break;
 80042e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042f0:	4bba      	ldr	r3, [pc, #744]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f4:	f023 0203 	bic.w	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	49b7      	ldr	r1, [pc, #732]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004302:	e001      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	7dfb      	ldrb	r3, [r7, #23]
 8004306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8086 	beq.w	8004422 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004316:	4bb2      	ldr	r3, [pc, #712]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4ab1      	ldr	r2, [pc, #708]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004322:	f7fd ff89 	bl	8002238 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004328:	e009      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432a:	f7fd ff85 	bl	8002238 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b64      	cmp	r3, #100	; 0x64
 8004336:	d902      	bls.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	75fb      	strb	r3, [r7, #23]
        break;
 800433c:	e005      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800433e:	4ba8      	ldr	r3, [pc, #672]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ef      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d166      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004350:	4ba2      	ldr	r3, [pc, #648]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800435a:	4053      	eors	r3, r2
 800435c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004360:	2b00      	cmp	r3, #0
 8004362:	d013      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004364:	4b9d      	ldr	r3, [pc, #628]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800436e:	4b9b      	ldr	r3, [pc, #620]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a9a      	ldr	r2, [pc, #616]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800437a:	4b98      	ldr	r3, [pc, #608]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a97      	ldr	r2, [pc, #604]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004386:	4a95      	ldr	r2, [pc, #596]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004396:	d115      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd ff4e 	bl	8002238 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800439e:	e00b      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fd ff4a 	bl	8002238 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d902      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	75fb      	strb	r3, [r7, #23]
            break;
 80043b6:	e005      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043b8:	4b88      	ldr	r3, [pc, #544]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0ed      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d126      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d8:	d10d      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80043da:	4b80      	ldr	r3, [pc, #512]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043e8:	0919      	lsrs	r1, r3, #4
 80043ea:	4b7e      	ldr	r3, [pc, #504]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80043ec:	400b      	ands	r3, r1
 80043ee:	497b      	ldr	r1, [pc, #492]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	610b      	str	r3, [r1, #16]
 80043f4:	e005      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80043f6:	4b79      	ldr	r3, [pc, #484]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	4a78      	ldr	r2, [pc, #480]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004400:	6113      	str	r3, [r2, #16]
 8004402:	4b76      	ldr	r3, [pc, #472]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800440c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004410:	4972      	ldr	r1, [pc, #456]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	670b      	str	r3, [r1, #112]	; 0x70
 8004416:	e004      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	75bb      	strb	r3, [r7, #22]
 800441c:	e001      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d07d      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004432:	2b28      	cmp	r3, #40	; 0x28
 8004434:	d866      	bhi.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	0800450b 	.word	0x0800450b
 8004440:	08004505 	.word	0x08004505
 8004444:	08004505 	.word	0x08004505
 8004448:	08004505 	.word	0x08004505
 800444c:	08004505 	.word	0x08004505
 8004450:	08004505 	.word	0x08004505
 8004454:	08004505 	.word	0x08004505
 8004458:	08004505 	.word	0x08004505
 800445c:	080044e1 	.word	0x080044e1
 8004460:	08004505 	.word	0x08004505
 8004464:	08004505 	.word	0x08004505
 8004468:	08004505 	.word	0x08004505
 800446c:	08004505 	.word	0x08004505
 8004470:	08004505 	.word	0x08004505
 8004474:	08004505 	.word	0x08004505
 8004478:	08004505 	.word	0x08004505
 800447c:	080044f3 	.word	0x080044f3
 8004480:	08004505 	.word	0x08004505
 8004484:	08004505 	.word	0x08004505
 8004488:	08004505 	.word	0x08004505
 800448c:	08004505 	.word	0x08004505
 8004490:	08004505 	.word	0x08004505
 8004494:	08004505 	.word	0x08004505
 8004498:	08004505 	.word	0x08004505
 800449c:	0800450b 	.word	0x0800450b
 80044a0:	08004505 	.word	0x08004505
 80044a4:	08004505 	.word	0x08004505
 80044a8:	08004505 	.word	0x08004505
 80044ac:	08004505 	.word	0x08004505
 80044b0:	08004505 	.word	0x08004505
 80044b4:	08004505 	.word	0x08004505
 80044b8:	08004505 	.word	0x08004505
 80044bc:	0800450b 	.word	0x0800450b
 80044c0:	08004505 	.word	0x08004505
 80044c4:	08004505 	.word	0x08004505
 80044c8:	08004505 	.word	0x08004505
 80044cc:	08004505 	.word	0x08004505
 80044d0:	08004505 	.word	0x08004505
 80044d4:	08004505 	.word	0x08004505
 80044d8:	08004505 	.word	0x08004505
 80044dc:	0800450b 	.word	0x0800450b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fdb6 	bl	8005058 <RCCEx_PLL2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044f0:	e00c      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3324      	adds	r3, #36	; 0x24
 80044f6:	2101      	movs	r1, #1
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fe5f 	bl	80051bc <RCCEx_PLL3_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	75fb      	strb	r3, [r7, #23]
      break;
 8004508:	e000      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800450a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004512:	4b32      	ldr	r3, [pc, #200]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451e:	492f      	ldr	r1, [pc, #188]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	654b      	str	r3, [r1, #84]	; 0x54
 8004524:	e001      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d037      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	2b05      	cmp	r3, #5
 800453c:	d820      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004587 	.word	0x08004587
 8004548:	0800455d 	.word	0x0800455d
 800454c:	0800456f 	.word	0x0800456f
 8004550:	08004587 	.word	0x08004587
 8004554:	08004587 	.word	0x08004587
 8004558:	08004587 	.word	0x08004587
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fd78 	bl	8005058 <RCCEx_PLL2_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800456c:	e00c      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3324      	adds	r3, #36	; 0x24
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fe21 	bl	80051bc <RCCEx_PLL3_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
      break;
 8004584:	e000      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	f023 0207 	bic.w	r2, r3, #7
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	4910      	ldr	r1, [pc, #64]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800459c:	4313      	orrs	r3, r2
 800459e:	654b      	str	r3, [r1, #84]	; 0x54
 80045a0:	e001      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d040      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d827      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	08004613 	.word	0x08004613
 80045c8:	080045e9 	.word	0x080045e9
 80045cc:	080045fb 	.word	0x080045fb
 80045d0:	08004613 	.word	0x08004613
 80045d4:	08004613 	.word	0x08004613
 80045d8:	08004613 	.word	0x08004613
 80045dc:	58024400 	.word	0x58024400
 80045e0:	58024800 	.word	0x58024800
 80045e4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2101      	movs	r1, #1
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fd32 	bl	8005058 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045f8:	e00c      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3324      	adds	r3, #36	; 0x24
 80045fe:	2101      	movs	r1, #1
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fddb 	bl	80051bc <RCCEx_PLL3_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800460a:	e003      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
      break;
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800461a:	4bb2      	ldr	r3, [pc, #712]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	f023 0207 	bic.w	r2, r3, #7
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	49ae      	ldr	r1, [pc, #696]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	658b      	str	r3, [r1, #88]	; 0x58
 800462e:	e001      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d044      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800464a:	d01b      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800464c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004650:	d805      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d022      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800465c:	e01b      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d01d      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004668:	d01c      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800466a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800466e:	d01b      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004670:	e011      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fced 	bl	8005058 <RCCEx_PLL2_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004682:	e012      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3324      	adds	r3, #36	; 0x24
 8004688:	2102      	movs	r1, #2
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fd96 	bl	80051bc <RCCEx_PLL3_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004694:	e009      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	75fb      	strb	r3, [r7, #23]
      break;
 800469a:	e006      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800469c:	bf00      	nop
 800469e:	e004      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046a0:	bf00      	nop
 80046a2:	e002      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046b0:	4b8c      	ldr	r3, [pc, #560]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046be:	4989      	ldr	r1, [pc, #548]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	654b      	str	r3, [r1, #84]	; 0x54
 80046c4:	e001      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d044      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e0:	d01b      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80046e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e6:	d805      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d022      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80046f2:	e01b      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f8:	d01d      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80046fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046fe:	d01c      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004704:	d01b      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004706:	e011      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fca2 	bl	8005058 <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004718:	e012      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3324      	adds	r3, #36	; 0x24
 800471e:	2102      	movs	r1, #2
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fd4b 	bl	80051bc <RCCEx_PLL3_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800472a:	e009      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	75fb      	strb	r3, [r7, #23]
      break;
 8004730:	e006      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004732:	bf00      	nop
 8004734:	e004      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800473e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004746:	4b67      	ldr	r3, [pc, #412]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004754:	4963      	ldr	r1, [pc, #396]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004756:	4313      	orrs	r3, r2
 8004758:	658b      	str	r3, [r1, #88]	; 0x58
 800475a:	e001      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d044      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004776:	d01b      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800477c:	d805      	bhi.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d022      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004788:	e01b      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800478a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478e:	d01d      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004790:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004794:	d01c      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004796:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800479a:	d01b      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800479c:	e011      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fc57 	bl	8005058 <RCCEx_PLL2_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047ae:	e012      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3324      	adds	r3, #36	; 0x24
 80047b4:	2102      	movs	r1, #2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fd00 	bl	80051bc <RCCEx_PLL3_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047c0:	e009      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
      break;
 80047c6:	e006      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80047c8:	bf00      	nop
 80047ca:	e004      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80047cc:	bf00      	nop
 80047ce:	e002      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80047d0:	bf00      	nop
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80047d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047dc:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ea:	493e      	ldr	r1, [pc, #248]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	658b      	str	r3, [r1, #88]	; 0x58
 80047f0:	e001      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d10a      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3324      	adds	r3, #36	; 0x24
 8004812:	2102      	movs	r1, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fcd1 	bl	80051bc <RCCEx_PLL3_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004824:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004832:	492c      	ldr	r1, [pc, #176]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004834:	4313      	orrs	r3, r2
 8004836:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484e:	d10a      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3324      	adds	r3, #36	; 0x24
 8004854:	2102      	movs	r1, #2
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fcb0 	bl	80051bc <RCCEx_PLL3_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	491b      	ldr	r1, [pc, #108]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d032      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004890:	d00d      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004896:	d016      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d111      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fbd8 	bl	8005058 <RCCEx_PLL2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048ac:	e00c      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3324      	adds	r3, #36	; 0x24
 80048b2:	2102      	movs	r1, #2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fc81 	bl	80051bc <RCCEx_PLL3_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048be:	e003      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	75fb      	strb	r3, [r7, #23]
      break;
 80048c4:	e000      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80048c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048dc:	4901      	ldr	r1, [pc, #4]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	658b      	str	r3, [r1, #88]	; 0x58
 80048e2:	e003      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80048e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02f      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004902:	d00c      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004904:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004908:	d015      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800490a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490e:	d10f      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004910:	4b79      	ldr	r3, [pc, #484]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	4a78      	ldr	r2, [pc, #480]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800491c:	e00c      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3324      	adds	r3, #36	; 0x24
 8004922:	2101      	movs	r1, #1
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fc49 	bl	80051bc <RCCEx_PLL3_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800492e:	e003      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	75fb      	strb	r3, [r7, #23]
      break;
 8004934:	e000      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800493e:	4b6e      	ldr	r3, [pc, #440]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494c:	496a      	ldr	r1, [pc, #424]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800494e:	4313      	orrs	r3, r2
 8004950:	654b      	str	r3, [r1, #84]	; 0x54
 8004952:	e001      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d029      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d007      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004972:	e00f      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004974:	4b60      	ldr	r3, [pc, #384]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4a5f      	ldr	r2, [pc, #380]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800497a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004980:	e00b      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	2102      	movs	r1, #2
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fb65 	bl	8005058 <RCCEx_PLL2_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004992:	e002      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	75fb      	strb	r3, [r7, #23]
      break;
 8004998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049a0:	4b55      	ldr	r3, [pc, #340]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ac:	4952      	ldr	r1, [pc, #328]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049b2:	e001      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3324      	adds	r3, #36	; 0x24
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fbf6 	bl	80051bc <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d02f      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ee:	d00c      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80049f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f4:	d802      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d011      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80049fa:	e00d      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80049fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a00:	d00f      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a06:	d00e      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004a08:	e006      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a16:	e007      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a1c:	e004      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e002      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004a22:	bf00      	nop
 8004a24:	e000      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a2e:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3a:	492f      	ldr	r1, [pc, #188]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a40:	e001      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a52:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5e:	4926      	ldr	r1, [pc, #152]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d009      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a70:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a7e:	491e      	ldr	r1, [pc, #120]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a9c:	4916      	ldr	r1, [pc, #88]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00d      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ab8:	6113      	str	r3, [r2, #16]
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ac4:	490c      	ldr	r1, [pc, #48]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da08      	bge.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	4906      	ldr	r1, [pc, #24]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004ae4:	7dbb      	ldrb	r3, [r7, #22]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e000      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	58024400 	.word	0x58024400

08004afc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b00:	f7ff f8b2 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8004b04:	4601      	mov	r1, r0
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b12:	5cd3      	ldrb	r3, [r2, r3]
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	58024400 	.word	0x58024400
 8004b24:	0800b160 	.word	0x0800b160

08004b28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	; 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b30:	4b9d      	ldr	r3, [pc, #628]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b3a:	4b9b      	ldr	r3, [pc, #620]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	0b1b      	lsrs	r3, r3, #12
 8004b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b46:	4b98      	ldr	r3, [pc, #608]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b52:	4b95      	ldr	r3, [pc, #596]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	08db      	lsrs	r3, r3, #3
 8004b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 810a 	beq.w	8004d8a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d05a      	beq.n	8004c32 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d302      	bcc.n	8004b86 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d078      	beq.n	8004c76 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004b84:	e099      	b.n	8004cba <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b86:	4b88      	ldr	r3, [pc, #544]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02d      	beq.n	8004bee <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b92:	4b85      	ldr	r3, [pc, #532]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	08db      	lsrs	r3, r3, #3
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	4a83      	ldr	r2, [pc, #524]	; (8004dac <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bbc:	4b7a      	ldr	r3, [pc, #488]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004bec:	e087      	b.n	8004cfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004db4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c00:	4b69      	ldr	r3, [pc, #420]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c10:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c14:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c30:	e065      	b.n	8004cfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	ee07 3a90 	vmov	s15, r3
 8004c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c44:	4b58      	ldr	r3, [pc, #352]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c54:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c58:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c74:	e043      	b.n	8004cfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	ee07 3a90 	vmov	s15, r3
 8004c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c88:	4b47      	ldr	r3, [pc, #284]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c98:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cb8:	e021      	b.n	8004cfe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ccc:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cfc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	0a5b      	lsrs	r3, r3, #9
 8004d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d24:	ee17 2a90 	vmov	r2, s15
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d2c:	4b1e      	ldr	r3, [pc, #120]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d52:	ee17 2a90 	vmov	r2, s15
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d5a:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	0e1b      	lsrs	r3, r3, #24
 8004d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d80:	ee17 2a90 	vmov	r2, s15
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d88:	e008      	b.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	609a      	str	r2, [r3, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	3724      	adds	r7, #36	; 0x24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	58024400 	.word	0x58024400
 8004dac:	03d09000 	.word	0x03d09000
 8004db0:	46000000 	.word	0x46000000
 8004db4:	4c742400 	.word	0x4c742400
 8004db8:	4a742400 	.word	0x4a742400
 8004dbc:	4c189680 	.word	0x4c189680

08004dc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b089      	sub	sp, #36	; 0x24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dc8:	4b9d      	ldr	r3, [pc, #628]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004dd2:	4b9b      	ldr	r3, [pc, #620]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	0d1b      	lsrs	r3, r3, #20
 8004dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ddc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dde:	4b98      	ldr	r3, [pc, #608]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004dea:	4b95      	ldr	r3, [pc, #596]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	08db      	lsrs	r3, r3, #3
 8004df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 810a 	beq.w	8005022 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d05a      	beq.n	8004eca <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d302      	bcc.n	8004e1e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d078      	beq.n	8004f0e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004e1c:	e099      	b.n	8004f52 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e1e:	4b88      	ldr	r3, [pc, #544]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d02d      	beq.n	8004e86 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e2a:	4b85      	ldr	r3, [pc, #532]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	08db      	lsrs	r3, r3, #3
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	4a83      	ldr	r2, [pc, #524]	; (8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004e36:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e54:	4b7a      	ldr	r3, [pc, #488]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e64:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e68:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e80:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e84:	e087      	b.n	8004f96 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e90:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e98:	4b69      	ldr	r3, [pc, #420]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ec8:	e065      	b.n	8004f96 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004edc:	4b58      	ldr	r3, [pc, #352]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eec:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004ef4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f0c:	e043      	b.n	8004f96 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f18:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f20:	4b47      	ldr	r3, [pc, #284]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f30:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f34:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f50:	e021      	b.n	8004f96 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f64:	4b36      	ldr	r3, [pc, #216]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6c:	ee07 3a90 	vmov	s15, r3
 8004f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f74:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f78:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f94:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004f96:	4b2a      	ldr	r3, [pc, #168]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	0a5b      	lsrs	r3, r3, #9
 8004f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fbc:	ee17 2a90 	vmov	r2, s15
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	0c1b      	lsrs	r3, r3, #16
 8004fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fea:	ee17 2a90 	vmov	r2, s15
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	0e1b      	lsrs	r3, r3, #24
 8004ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005008:	ee37 7a87 	vadd.f32	s14, s15, s14
 800500c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005018:	ee17 2a90 	vmov	r2, s15
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005020:	e008      	b.n	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	3724      	adds	r7, #36	; 0x24
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	58024400 	.word	0x58024400
 8005044:	03d09000 	.word	0x03d09000
 8005048:	46000000 	.word	0x46000000
 800504c:	4c742400 	.word	0x4c742400
 8005050:	4a742400 	.word	0x4a742400
 8005054:	4c189680 	.word	0x4c189680

08005058 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005066:	4b53      	ldr	r3, [pc, #332]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b03      	cmp	r3, #3
 8005070:	d101      	bne.n	8005076 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e099      	b.n	80051aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005076:	4b4f      	ldr	r3, [pc, #316]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a4e      	ldr	r2, [pc, #312]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800507c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005082:	f7fd f8d9 	bl	8002238 <HAL_GetTick>
 8005086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005088:	e008      	b.n	800509c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800508a:	f7fd f8d5 	bl	8002238 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e086      	b.n	80051aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800509c:	4b45      	ldr	r3, [pc, #276]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050a8:	4b42      	ldr	r3, [pc, #264]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	031b      	lsls	r3, r3, #12
 80050b6:	493f      	ldr	r1, [pc, #252]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	628b      	str	r3, [r1, #40]	; 0x28
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	025b      	lsls	r3, r3, #9
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	061b      	lsls	r3, r3, #24
 80050e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050ec:	4931      	ldr	r1, [pc, #196]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050f2:	4b30      	ldr	r3, [pc, #192]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	492d      	ldr	r1, [pc, #180]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005100:	4313      	orrs	r3, r2
 8005102:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005104:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	f023 0220 	bic.w	r2, r3, #32
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	4928      	ldr	r1, [pc, #160]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005116:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	4a26      	ldr	r2, [pc, #152]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800511c:	f023 0310 	bic.w	r3, r3, #16
 8005120:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <RCCEx_PLL2_Config+0x160>)
 8005128:	4013      	ands	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	69d2      	ldr	r2, [r2, #28]
 800512e:	00d2      	lsls	r2, r2, #3
 8005130:	4920      	ldr	r1, [pc, #128]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005132:	4313      	orrs	r3, r2
 8005134:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005136:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800513c:	f043 0310 	orr.w	r3, r3, #16
 8005140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005148:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800514e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005154:	e00f      	b.n	8005176 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d106      	bne.n	800516a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800515c:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005168:	e005      	b.n	8005176 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005174:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a0e      	ldr	r2, [pc, #56]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800517c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005182:	f7fd f859 	bl	8002238 <HAL_GetTick>
 8005186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005188:	e008      	b.n	800519c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800518a:	f7fd f855 	bl	8002238 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e006      	b.n	80051aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <RCCEx_PLL2_Config+0x15c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	58024400 	.word	0x58024400
 80051b8:	ffff0007 	.word	0xffff0007

080051bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051ca:	4b53      	ldr	r3, [pc, #332]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d101      	bne.n	80051da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e099      	b.n	800530e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051da:	4b4f      	ldr	r3, [pc, #316]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a4e      	ldr	r2, [pc, #312]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80051e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e6:	f7fd f827 	bl	8002238 <HAL_GetTick>
 80051ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051ec:	e008      	b.n	8005200 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051ee:	f7fd f823 	bl	8002238 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e086      	b.n	800530e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005200:	4b45      	ldr	r3, [pc, #276]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800520c:	4b42      	ldr	r3, [pc, #264]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	051b      	lsls	r3, r3, #20
 800521a:	493f      	ldr	r1, [pc, #252]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	628b      	str	r3, [r1, #40]	; 0x28
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	3b01      	subs	r3, #1
 8005226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	3b01      	subs	r3, #1
 8005230:	025b      	lsls	r3, r3, #9
 8005232:	b29b      	uxth	r3, r3
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	3b01      	subs	r3, #1
 800523c:	041b      	lsls	r3, r3, #16
 800523e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	3b01      	subs	r3, #1
 800524a:	061b      	lsls	r3, r3, #24
 800524c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005250:	4931      	ldr	r1, [pc, #196]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005252:	4313      	orrs	r3, r2
 8005254:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005256:	4b30      	ldr	r3, [pc, #192]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	492d      	ldr	r1, [pc, #180]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	4928      	ldr	r1, [pc, #160]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005276:	4313      	orrs	r3, r2
 8005278:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	4a26      	ldr	r2, [pc, #152]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <RCCEx_PLL3_Config+0x160>)
 800528c:	4013      	ands	r3, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	69d2      	ldr	r2, [r2, #28]
 8005292:	00d2      	lsls	r2, r2, #3
 8005294:	4920      	ldr	r1, [pc, #128]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005296:	4313      	orrs	r3, r2
 8005298:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800529a:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052b8:	e00f      	b.n	80052da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d106      	bne.n	80052ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052c0:	4b15      	ldr	r3, [pc, #84]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4a14      	ldr	r2, [pc, #80]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052cc:	e005      	b.n	80052da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	4a11      	ldr	r2, [pc, #68]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052da:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a0e      	ldr	r2, [pc, #56]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e6:	f7fc ffa7 	bl	8002238 <HAL_GetTick>
 80052ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052ec:	e008      	b.n	8005300 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80052ee:	f7fc ffa3 	bl	8002238 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e006      	b.n	800530e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <RCCEx_PLL3_Config+0x15c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
 800531c:	ffff0007 	.word	0xffff0007

08005320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e049      	b.n	80053c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fc fe08 	bl	8001f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f000 f934 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d001      	beq.n	80053e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e019      	b.n	800541c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <HAL_TIM_Base_Start+0x58>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b06      	cmp	r3, #6
 8005400:	d00b      	beq.n	800541a <HAL_TIM_Base_Start+0x4a>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d007      	beq.n	800541a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	00010007 	.word	0x00010007

0800542c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIM_ConfigClockSource+0x18>
 8005440:	2302      	movs	r3, #2
 8005442:	e0b7      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x188>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4b57      	ldr	r3, [pc, #348]	; (80055bc <HAL_TIM_ConfigClockSource+0x190>)
 8005460:	4013      	ands	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800546a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b70      	cmp	r3, #112	; 0x70
 800547a:	d02e      	beq.n	80054da <HAL_TIM_ConfigClockSource+0xae>
 800547c:	2b70      	cmp	r3, #112	; 0x70
 800547e:	d812      	bhi.n	80054a6 <HAL_TIM_ConfigClockSource+0x7a>
 8005480:	2b30      	cmp	r3, #48	; 0x30
 8005482:	f000 8084 	beq.w	800558e <HAL_TIM_ConfigClockSource+0x162>
 8005486:	2b30      	cmp	r3, #48	; 0x30
 8005488:	d806      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x6c>
 800548a:	2b10      	cmp	r3, #16
 800548c:	d07f      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x162>
 800548e:	2b20      	cmp	r3, #32
 8005490:	d07d      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x162>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d07b      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005496:	e084      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005498:	2b50      	cmp	r3, #80	; 0x50
 800549a:	d048      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x102>
 800549c:	2b60      	cmp	r3, #96	; 0x60
 800549e:	d056      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x122>
 80054a0:	2b40      	cmp	r3, #64	; 0x40
 80054a2:	d064      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x142>
      break;
 80054a4:	e07d      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80054a6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80054aa:	d070      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x162>
 80054ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80054b0:	d809      	bhi.n	80054c6 <HAL_TIM_ConfigClockSource+0x9a>
 80054b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b6:	d027      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0xdc>
 80054b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054bc:	d067      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x162>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c2:	d06d      	beq.n	80055a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054c4:	e06d      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80054c6:	4a3e      	ldr	r2, [pc, #248]	; (80055c0 <HAL_TIM_ConfigClockSource+0x194>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d060      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x162>
 80054cc:	4a3d      	ldr	r2, [pc, #244]	; (80055c4 <HAL_TIM_ConfigClockSource+0x198>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d05d      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x162>
 80054d2:	4a3d      	ldr	r2, [pc, #244]	; (80055c8 <HAL_TIM_ConfigClockSource+0x19c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d05a      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x162>
      break;
 80054d8:	e063      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f000 f987 	bl	80057fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	609a      	str	r2, [r3, #8]
      break;
 8005506:	e04c      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6899      	ldr	r1, [r3, #8]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f000 f970 	bl	80057fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552a:	609a      	str	r2, [r3, #8]
      break;
 800552c:	e039      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	461a      	mov	r2, r3
 800553c:	f000 f8e0 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2150      	movs	r1, #80	; 0x50
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f93a 	bl	80057c0 <TIM_ITRx_SetConfig>
      break;
 800554c:	e029      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	461a      	mov	r2, r3
 800555c:	f000 f8ff 	bl	800575e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2160      	movs	r1, #96	; 0x60
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f92a 	bl	80057c0 <TIM_ITRx_SetConfig>
      break;
 800556c:	e019      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	461a      	mov	r2, r3
 800557c:	f000 f8c0 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2140      	movs	r1, #64	; 0x40
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f91a 	bl	80057c0 <TIM_ITRx_SetConfig>
      break;
 800558c:	e009      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 f911 	bl	80057c0 <TIM_ITRx_SetConfig>
      break;
 800559e:	e000      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80055a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	ffceff88 	.word	0xffceff88
 80055c0:	00100030 	.word	0x00100030
 80055c4:	00100040 	.word	0x00100040
 80055c8:	00100020 	.word	0x00100020

080055cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a40      	ldr	r2, [pc, #256]	; (80056e0 <TIM_Base_SetConfig+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ea:	d00f      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a3d      	ldr	r2, [pc, #244]	; (80056e4 <TIM_Base_SetConfig+0x118>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a3c      	ldr	r2, [pc, #240]	; (80056e8 <TIM_Base_SetConfig+0x11c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a3b      	ldr	r2, [pc, #236]	; (80056ec <TIM_Base_SetConfig+0x120>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a3a      	ldr	r2, [pc, #232]	; (80056f0 <TIM_Base_SetConfig+0x124>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <TIM_Base_SetConfig+0x114>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01f      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562c:	d01b      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2c      	ldr	r2, [pc, #176]	; (80056e4 <TIM_Base_SetConfig+0x118>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d017      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2b      	ldr	r2, [pc, #172]	; (80056e8 <TIM_Base_SetConfig+0x11c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2a      	ldr	r2, [pc, #168]	; (80056ec <TIM_Base_SetConfig+0x120>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00f      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a29      	ldr	r2, [pc, #164]	; (80056f0 <TIM_Base_SetConfig+0x124>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00b      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a28      	ldr	r2, [pc, #160]	; (80056f4 <TIM_Base_SetConfig+0x128>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a27      	ldr	r2, [pc, #156]	; (80056f8 <TIM_Base_SetConfig+0x12c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_Base_SetConfig+0x9a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a26      	ldr	r2, [pc, #152]	; (80056fc <TIM_Base_SetConfig+0x130>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d108      	bne.n	8005678 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <TIM_Base_SetConfig+0x114>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00f      	beq.n	80056c4 <TIM_Base_SetConfig+0xf8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a12      	ldr	r2, [pc, #72]	; (80056f0 <TIM_Base_SetConfig+0x124>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <TIM_Base_SetConfig+0xf8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a11      	ldr	r2, [pc, #68]	; (80056f4 <TIM_Base_SetConfig+0x128>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d007      	beq.n	80056c4 <TIM_Base_SetConfig+0xf8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a10      	ldr	r2, [pc, #64]	; (80056f8 <TIM_Base_SetConfig+0x12c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_Base_SetConfig+0xf8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a0f      	ldr	r2, [pc, #60]	; (80056fc <TIM_Base_SetConfig+0x130>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d103      	bne.n	80056cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	615a      	str	r2, [r3, #20]
}
 80056d2:	bf00      	nop
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40000c00 	.word	0x40000c00
 80056f0:	40010400 	.word	0x40010400
 80056f4:	40014000 	.word	0x40014000
 80056f8:	40014400 	.word	0x40014400
 80056fc:	40014800 	.word	0x40014800

08005700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800572a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 030a 	bic.w	r3, r3, #10
 800573c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0210 	bic.w	r2, r3, #16
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	031b      	lsls	r3, r3, #12
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800579a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <TIM_ITRx_SetConfig+0x38>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	f043 0307 	orr.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	609a      	str	r2, [r3, #8]
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	ffcfff8f 	.word	0xffcfff8f

080057fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	021a      	lsls	r2, r3, #8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	431a      	orrs	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4313      	orrs	r3, r2
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	609a      	str	r2, [r3, #8]
}
 8005830:	bf00      	nop
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005850:	2302      	movs	r3, #2
 8005852:	e068      	b.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a2e      	ldr	r2, [pc, #184]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2d      	ldr	r2, [pc, #180]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d108      	bne.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800588e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d01d      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c6:	d018      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1b      	ldr	r2, [pc, #108]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00e      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d10c      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4313      	orrs	r3, r2
 800590a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800
 8005944:	40000c00 	.word	0x40000c00
 8005948:	40001800 	.word	0x40001800

0800594c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e042      	b.n	80059e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7fc fb5f 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2224      	movs	r2, #36	; 0x24
 800597a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0201 	bic.w	r2, r2, #1
 800598c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fb12 	bl	8005fb8 <UART_SetConfig>
 8005994:	4603      	mov	r3, r0
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e022      	b.n	80059e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 f8b6 	bl	8006b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 f93d 	bl	8006c5c <UART_CheckIdleState>
 80059e2:	4603      	mov	r3, r0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d168      	bne.n	8005ad6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_UART_Transmit_IT+0x24>
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e061      	b.n	8005ad8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Transmit_IT+0x36>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e05a      	b.n	8005ad8 <HAL_UART_Transmit_IT+0xec>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	88fa      	ldrh	r2, [r7, #6]
 8005a34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2221      	movs	r2, #33	; 0x21
 8005a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5e:	d11c      	bne.n	8005a9a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a68:	d107      	bne.n	8005a7a <HAL_UART_Transmit_IT+0x8e>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <HAL_UART_Transmit_IT+0xf8>)
 8005a76:	671a      	str	r2, [r3, #112]	; 0x70
 8005a78:	e002      	b.n	8005a80 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ae8 <HAL_UART_Transmit_IT+0xfc>)
 8005a7e:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	e01b      	b.n	8005ad2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa2:	d107      	bne.n	8005ab4 <HAL_UART_Transmit_IT+0xc8>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d103      	bne.n	8005ab4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4a0f      	ldr	r2, [pc, #60]	; (8005aec <HAL_UART_Transmit_IT+0x100>)
 8005ab0:	671a      	str	r2, [r3, #112]	; 0x70
 8005ab2:	e002      	b.n	8005aba <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a0e      	ldr	r2, [pc, #56]	; (8005af0 <HAL_UART_Transmit_IT+0x104>)
 8005ab8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ad0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e000      	b.n	8005ad8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005ad6:	2302      	movs	r3, #2
  }
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	08006fed 	.word	0x08006fed
 8005ae8:	08006f53 	.word	0x08006f53
 8005aec:	08006ed5 	.word	0x08006ed5
 8005af0:	08006e61 	.word	0x08006e61

08005af4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	f040 80bc 	bne.w	8005c86 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_UART_Receive_IT+0x26>
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e0b4      	b.n	8005c88 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_UART_Receive_IT+0x38>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e0ad      	b.n	8005c88 <HAL_UART_Receive_IT+0x194>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	88fa      	ldrh	r2, [r7, #6]
 8005b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b58:	d10e      	bne.n	8005b78 <HAL_UART_Receive_IT+0x84>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <HAL_UART_Receive_IT+0x7a>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b6c:	e02d      	b.n	8005bca <HAL_UART_Receive_IT+0xd6>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	22ff      	movs	r2, #255	; 0xff
 8005b72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b76:	e028      	b.n	8005bca <HAL_UART_Receive_IT+0xd6>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10d      	bne.n	8005b9c <HAL_UART_Receive_IT+0xa8>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d104      	bne.n	8005b92 <HAL_UART_Receive_IT+0x9e>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	22ff      	movs	r2, #255	; 0xff
 8005b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b90:	e01b      	b.n	8005bca <HAL_UART_Receive_IT+0xd6>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	227f      	movs	r2, #127	; 0x7f
 8005b96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b9a:	e016      	b.n	8005bca <HAL_UART_Receive_IT+0xd6>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ba4:	d10d      	bne.n	8005bc2 <HAL_UART_Receive_IT+0xce>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d104      	bne.n	8005bb8 <HAL_UART_Receive_IT+0xc4>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	227f      	movs	r2, #127	; 0x7f
 8005bb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bb6:	e008      	b.n	8005bca <HAL_UART_Receive_IT+0xd6>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	223f      	movs	r2, #63	; 0x3f
 8005bbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bc0:	e003      	b.n	8005bca <HAL_UART_Receive_IT+0xd6>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2222      	movs	r2, #34	; 0x22
 8005bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 0201 	orr.w	r2, r2, #1
 8005be8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf2:	d12a      	bne.n	8005c4a <HAL_UART_Receive_IT+0x156>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005bfa:	88fa      	ldrh	r2, [r7, #6]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d324      	bcc.n	8005c4a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c08:	d107      	bne.n	8005c1a <HAL_UART_Receive_IT+0x126>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d103      	bne.n	8005c1a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a1f      	ldr	r2, [pc, #124]	; (8005c94 <HAL_UART_Receive_IT+0x1a0>)
 8005c16:	66da      	str	r2, [r3, #108]	; 0x6c
 8005c18:	e002      	b.n	8005c20 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <HAL_UART_Receive_IT+0x1a4>)
 8005c1e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c36:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	e01b      	b.n	8005c82 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d107      	bne.n	8005c64 <HAL_UART_Receive_IT+0x170>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a0f      	ldr	r2, [pc, #60]	; (8005c9c <HAL_UART_Receive_IT+0x1a8>)
 8005c60:	66da      	str	r2, [r3, #108]	; 0x6c
 8005c62:	e002      	b.n	8005c6a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <HAL_UART_Receive_IT+0x1ac>)
 8005c68:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005c80:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	e000      	b.n	8005c88 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005c86:	2302      	movs	r3, #2
  }
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	08007321 	.word	0x08007321
 8005c98:	08007219 	.word	0x08007219
 8005c9c:	0800716f 	.word	0x0800716f
 8005ca0:	080070c5 	.word	0x080070c5

08005ca4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cca:	4013      	ands	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d118      	bne.n	8005d06 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d013      	beq.n	8005d06 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8145 	beq.w	8005f86 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
      }
      return;
 8005d04:	e13f      	b.n	8005f86 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80e8 	beq.w	8005ede <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4ba1      	ldr	r3, [pc, #644]	; (8005f98 <HAL_UART_IRQHandler+0x2f4>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d105      	bne.n	8005d24 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4ba0      	ldr	r3, [pc, #640]	; (8005f9c <HAL_UART_IRQHandler+0x2f8>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80dd 	beq.w	8005ede <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d010      	beq.n	8005d50 <HAL_UART_IRQHandler+0xac>
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d46:	f043 0201 	orr.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <HAL_UART_IRQHandler+0xd8>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00b      	beq.n	8005d7c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f043 0204 	orr.w	r2, r3, #4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d010      	beq.n	8005da8 <HAL_UART_IRQHandler+0x104>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2204      	movs	r2, #4
 8005d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	f043 0202 	orr.w	r2, r3, #2
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d015      	beq.n	8005dde <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d104      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4b76      	ldr	r3, [pc, #472]	; (8005f98 <HAL_UART_IRQHandler+0x2f4>)
 8005dc0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00b      	beq.n	8005dde <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2208      	movs	r2, #8
 8005dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	f043 0208 	orr.w	r2, r3, #8
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d011      	beq.n	8005e0c <HAL_UART_IRQHandler+0x168>
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00c      	beq.n	8005e0c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e02:	f043 0220 	orr.w	r2, r3, #32
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80b9 	beq.w	8005f8a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d011      	beq.n	8005e46 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b40      	cmp	r3, #64	; 0x40
 8005e5a:	d004      	beq.n	8005e66 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d031      	beq.n	8005eca <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 ffc0 	bl	8006dec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d123      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e88:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d013      	beq.n	8005eba <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e96:	4a42      	ldr	r2, [pc, #264]	; (8005fa0 <HAL_UART_IRQHandler+0x2fc>)
 8005e98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fc fb14 	bl	80024cc <HAL_DMA_Abort_IT>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d017      	beq.n	8005eda <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb8:	e00f      	b.n	8005eda <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f872 	bl	8005fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec0:	e00b      	b.n	8005eda <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f86e 	bl	8005fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	e007      	b.n	8005eda <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f86a 	bl	8005fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005ed8:	e057      	b.n	8005f8a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eda:	bf00      	nop
    return;
 8005edc:	e055      	b.n	8005f8a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00d      	beq.n	8005f04 <HAL_UART_IRQHandler+0x260>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005efa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 fa93 	bl	8007428 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f02:	e045      	b.n	8005f90 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d012      	beq.n	8005f34 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d008      	beq.n	8005f34 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d031      	beq.n	8005f8e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
    }
    return;
 8005f32:	e02c      	b.n	8005f8e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <HAL_UART_IRQHandler+0x2ac>
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 f8a1 	bl	8007090 <UART_EndTransmit_IT>
    return;
 8005f4e:	e01f      	b.n	8005f90 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d008      	beq.n	8005f6c <HAL_UART_IRQHandler+0x2c8>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f001 fa73 	bl	8007450 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f6a:	e011      	b.n	8005f90 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <HAL_UART_IRQHandler+0x2ec>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	da09      	bge.n	8005f90 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 fa5d 	bl	800743c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005f8e:	bf00      	nop
  }
}
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	10000001 	.word	0x10000001
 8005f9c:	04000120 	.word	0x04000120
 8005fa0:	08006e35 	.word	0x08006e35

08005fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005fbc:	b08e      	sub	sp, #56	; 0x38
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4bc1      	ldr	r3, [pc, #772]	; (80062f8 <UART_SetConfig+0x340>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4ab7      	ldr	r2, [pc, #732]	; (80062fc <UART_SetConfig+0x344>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602a:	4313      	orrs	r3, r2
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	4bb2      	ldr	r3, [pc, #712]	; (8006300 <UART_SetConfig+0x348>)
 8006036:	4013      	ands	r3, r2
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800603e:	430b      	orrs	r3, r1
 8006040:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	f023 010f 	bic.w	r1, r3, #15
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4aa9      	ldr	r2, [pc, #676]	; (8006304 <UART_SetConfig+0x34c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d177      	bne.n	8006152 <UART_SetConfig+0x19a>
 8006062:	4ba9      	ldr	r3, [pc, #676]	; (8006308 <UART_SetConfig+0x350>)
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800606a:	2b28      	cmp	r3, #40	; 0x28
 800606c:	d86c      	bhi.n	8006148 <UART_SetConfig+0x190>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0xbc>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006119 	.word	0x08006119
 8006078:	08006149 	.word	0x08006149
 800607c:	08006149 	.word	0x08006149
 8006080:	08006149 	.word	0x08006149
 8006084:	08006149 	.word	0x08006149
 8006088:	08006149 	.word	0x08006149
 800608c:	08006149 	.word	0x08006149
 8006090:	08006149 	.word	0x08006149
 8006094:	08006121 	.word	0x08006121
 8006098:	08006149 	.word	0x08006149
 800609c:	08006149 	.word	0x08006149
 80060a0:	08006149 	.word	0x08006149
 80060a4:	08006149 	.word	0x08006149
 80060a8:	08006149 	.word	0x08006149
 80060ac:	08006149 	.word	0x08006149
 80060b0:	08006149 	.word	0x08006149
 80060b4:	08006129 	.word	0x08006129
 80060b8:	08006149 	.word	0x08006149
 80060bc:	08006149 	.word	0x08006149
 80060c0:	08006149 	.word	0x08006149
 80060c4:	08006149 	.word	0x08006149
 80060c8:	08006149 	.word	0x08006149
 80060cc:	08006149 	.word	0x08006149
 80060d0:	08006149 	.word	0x08006149
 80060d4:	08006131 	.word	0x08006131
 80060d8:	08006149 	.word	0x08006149
 80060dc:	08006149 	.word	0x08006149
 80060e0:	08006149 	.word	0x08006149
 80060e4:	08006149 	.word	0x08006149
 80060e8:	08006149 	.word	0x08006149
 80060ec:	08006149 	.word	0x08006149
 80060f0:	08006149 	.word	0x08006149
 80060f4:	08006139 	.word	0x08006139
 80060f8:	08006149 	.word	0x08006149
 80060fc:	08006149 	.word	0x08006149
 8006100:	08006149 	.word	0x08006149
 8006104:	08006149 	.word	0x08006149
 8006108:	08006149 	.word	0x08006149
 800610c:	08006149 	.word	0x08006149
 8006110:	08006149 	.word	0x08006149
 8006114:	08006141 	.word	0x08006141
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800611e:	e233      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006120:	2304      	movs	r3, #4
 8006122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006126:	e22f      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800612e:	e22b      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006130:	2310      	movs	r3, #16
 8006132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006136:	e227      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006138:	2320      	movs	r3, #32
 800613a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800613e:	e223      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006140:	2340      	movs	r3, #64	; 0x40
 8006142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006146:	e21f      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800614e:	bf00      	nop
 8006150:	e21a      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a6d      	ldr	r2, [pc, #436]	; (800630c <UART_SetConfig+0x354>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d132      	bne.n	80061c2 <UART_SetConfig+0x20a>
 800615c:	4b6a      	ldr	r3, [pc, #424]	; (8006308 <UART_SetConfig+0x350>)
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	2b05      	cmp	r3, #5
 8006166:	d827      	bhi.n	80061b8 <UART_SetConfig+0x200>
 8006168:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <UART_SetConfig+0x1b8>)
 800616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616e:	bf00      	nop
 8006170:	08006189 	.word	0x08006189
 8006174:	08006191 	.word	0x08006191
 8006178:	08006199 	.word	0x08006199
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	2300      	movs	r3, #0
 800618a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618e:	e1fb      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006190:	2304      	movs	r3, #4
 8006192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006196:	e1f7      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006198:	2308      	movs	r3, #8
 800619a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800619e:	e1f3      	b.n	8006588 <UART_SetConfig+0x5d0>
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a6:	e1ef      	b.n	8006588 <UART_SetConfig+0x5d0>
 80061a8:	2320      	movs	r3, #32
 80061aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ae:	e1eb      	b.n	8006588 <UART_SetConfig+0x5d0>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061b6:	e1e7      	b.n	8006588 <UART_SetConfig+0x5d0>
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061be:	bf00      	nop
 80061c0:	e1e2      	b.n	8006588 <UART_SetConfig+0x5d0>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a52      	ldr	r2, [pc, #328]	; (8006310 <UART_SetConfig+0x358>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d132      	bne.n	8006232 <UART_SetConfig+0x27a>
 80061cc:	4b4e      	ldr	r3, [pc, #312]	; (8006308 <UART_SetConfig+0x350>)
 80061ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	d827      	bhi.n	8006228 <UART_SetConfig+0x270>
 80061d8:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <UART_SetConfig+0x228>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	080061f9 	.word	0x080061f9
 80061e4:	08006201 	.word	0x08006201
 80061e8:	08006209 	.word	0x08006209
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006219 	.word	0x08006219
 80061f4:	08006221 	.word	0x08006221
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061fe:	e1c3      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006200:	2304      	movs	r3, #4
 8006202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006206:	e1bf      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006208:	2308      	movs	r3, #8
 800620a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800620e:	e1bb      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006210:	2310      	movs	r3, #16
 8006212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006216:	e1b7      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006218:	2320      	movs	r3, #32
 800621a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800621e:	e1b3      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006220:	2340      	movs	r3, #64	; 0x40
 8006222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006226:	e1af      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800622e:	bf00      	nop
 8006230:	e1aa      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a37      	ldr	r2, [pc, #220]	; (8006314 <UART_SetConfig+0x35c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d132      	bne.n	80062a2 <UART_SetConfig+0x2ea>
 800623c:	4b32      	ldr	r3, [pc, #200]	; (8006308 <UART_SetConfig+0x350>)
 800623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	2b05      	cmp	r3, #5
 8006246:	d827      	bhi.n	8006298 <UART_SetConfig+0x2e0>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <UART_SetConfig+0x298>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006269 	.word	0x08006269
 8006254:	08006271 	.word	0x08006271
 8006258:	08006279 	.word	0x08006279
 800625c:	08006281 	.word	0x08006281
 8006260:	08006289 	.word	0x08006289
 8006264:	08006291 	.word	0x08006291
 8006268:	2300      	movs	r3, #0
 800626a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626e:	e18b      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006270:	2304      	movs	r3, #4
 8006272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006276:	e187      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006278:	2308      	movs	r3, #8
 800627a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627e:	e183      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006280:	2310      	movs	r3, #16
 8006282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006286:	e17f      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006288:	2320      	movs	r3, #32
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	e17b      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006290:	2340      	movs	r3, #64	; 0x40
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006296:	e177      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800629e:	bf00      	nop
 80062a0:	e172      	b.n	8006588 <UART_SetConfig+0x5d0>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <UART_SetConfig+0x360>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d144      	bne.n	8006336 <UART_SetConfig+0x37e>
 80062ac:	4b16      	ldr	r3, [pc, #88]	; (8006308 <UART_SetConfig+0x350>)
 80062ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	2b05      	cmp	r3, #5
 80062b6:	d839      	bhi.n	800632c <UART_SetConfig+0x374>
 80062b8:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <UART_SetConfig+0x308>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	080062d9 	.word	0x080062d9
 80062c4:	080062e1 	.word	0x080062e1
 80062c8:	080062e9 	.word	0x080062e9
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	0800631d 	.word	0x0800631d
 80062d4:	08006325 	.word	0x08006325
 80062d8:	2300      	movs	r3, #0
 80062da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062de:	e153      	b.n	8006588 <UART_SetConfig+0x5d0>
 80062e0:	2304      	movs	r3, #4
 80062e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062e6:	e14f      	b.n	8006588 <UART_SetConfig+0x5d0>
 80062e8:	2308      	movs	r3, #8
 80062ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ee:	e14b      	b.n	8006588 <UART_SetConfig+0x5d0>
 80062f0:	2310      	movs	r3, #16
 80062f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f6:	e147      	b.n	8006588 <UART_SetConfig+0x5d0>
 80062f8:	cfff69f3 	.word	0xcfff69f3
 80062fc:	58000c00 	.word	0x58000c00
 8006300:	11fff4ff 	.word	0x11fff4ff
 8006304:	40011000 	.word	0x40011000
 8006308:	58024400 	.word	0x58024400
 800630c:	40004400 	.word	0x40004400
 8006310:	40004800 	.word	0x40004800
 8006314:	40004c00 	.word	0x40004c00
 8006318:	40005000 	.word	0x40005000
 800631c:	2320      	movs	r3, #32
 800631e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006322:	e131      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006324:	2340      	movs	r3, #64	; 0x40
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632a:	e12d      	b.n	8006588 <UART_SetConfig+0x5d0>
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006332:	bf00      	nop
 8006334:	e128      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4ab6      	ldr	r2, [pc, #728]	; (8006614 <UART_SetConfig+0x65c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d178      	bne.n	8006432 <UART_SetConfig+0x47a>
 8006340:	4bb5      	ldr	r3, [pc, #724]	; (8006618 <UART_SetConfig+0x660>)
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006348:	2b28      	cmp	r3, #40	; 0x28
 800634a:	d86d      	bhi.n	8006428 <UART_SetConfig+0x470>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <UART_SetConfig+0x39c>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	080063f9 	.word	0x080063f9
 8006358:	08006429 	.word	0x08006429
 800635c:	08006429 	.word	0x08006429
 8006360:	08006429 	.word	0x08006429
 8006364:	08006429 	.word	0x08006429
 8006368:	08006429 	.word	0x08006429
 800636c:	08006429 	.word	0x08006429
 8006370:	08006429 	.word	0x08006429
 8006374:	08006401 	.word	0x08006401
 8006378:	08006429 	.word	0x08006429
 800637c:	08006429 	.word	0x08006429
 8006380:	08006429 	.word	0x08006429
 8006384:	08006429 	.word	0x08006429
 8006388:	08006429 	.word	0x08006429
 800638c:	08006429 	.word	0x08006429
 8006390:	08006429 	.word	0x08006429
 8006394:	08006409 	.word	0x08006409
 8006398:	08006429 	.word	0x08006429
 800639c:	08006429 	.word	0x08006429
 80063a0:	08006429 	.word	0x08006429
 80063a4:	08006429 	.word	0x08006429
 80063a8:	08006429 	.word	0x08006429
 80063ac:	08006429 	.word	0x08006429
 80063b0:	08006429 	.word	0x08006429
 80063b4:	08006411 	.word	0x08006411
 80063b8:	08006429 	.word	0x08006429
 80063bc:	08006429 	.word	0x08006429
 80063c0:	08006429 	.word	0x08006429
 80063c4:	08006429 	.word	0x08006429
 80063c8:	08006429 	.word	0x08006429
 80063cc:	08006429 	.word	0x08006429
 80063d0:	08006429 	.word	0x08006429
 80063d4:	08006419 	.word	0x08006419
 80063d8:	08006429 	.word	0x08006429
 80063dc:	08006429 	.word	0x08006429
 80063e0:	08006429 	.word	0x08006429
 80063e4:	08006429 	.word	0x08006429
 80063e8:	08006429 	.word	0x08006429
 80063ec:	08006429 	.word	0x08006429
 80063f0:	08006429 	.word	0x08006429
 80063f4:	08006421 	.word	0x08006421
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063fe:	e0c3      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006400:	2304      	movs	r3, #4
 8006402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006406:	e0bf      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006408:	2308      	movs	r3, #8
 800640a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800640e:	e0bb      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006410:	2310      	movs	r3, #16
 8006412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006416:	e0b7      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006418:	2320      	movs	r3, #32
 800641a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800641e:	e0b3      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006420:	2340      	movs	r3, #64	; 0x40
 8006422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006426:	e0af      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006428:	2380      	movs	r3, #128	; 0x80
 800642a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800642e:	bf00      	nop
 8006430:	e0aa      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a79      	ldr	r2, [pc, #484]	; (800661c <UART_SetConfig+0x664>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d132      	bne.n	80064a2 <UART_SetConfig+0x4ea>
 800643c:	4b76      	ldr	r3, [pc, #472]	; (8006618 <UART_SetConfig+0x660>)
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	2b05      	cmp	r3, #5
 8006446:	d827      	bhi.n	8006498 <UART_SetConfig+0x4e0>
 8006448:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <UART_SetConfig+0x498>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006469 	.word	0x08006469
 8006454:	08006471 	.word	0x08006471
 8006458:	08006479 	.word	0x08006479
 800645c:	08006481 	.word	0x08006481
 8006460:	08006489 	.word	0x08006489
 8006464:	08006491 	.word	0x08006491
 8006468:	2300      	movs	r3, #0
 800646a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646e:	e08b      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006470:	2304      	movs	r3, #4
 8006472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006476:	e087      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006478:	2308      	movs	r3, #8
 800647a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800647e:	e083      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006480:	2310      	movs	r3, #16
 8006482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006486:	e07f      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006488:	2320      	movs	r3, #32
 800648a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800648e:	e07b      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006490:	2340      	movs	r3, #64	; 0x40
 8006492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006496:	e077      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800649e:	bf00      	nop
 80064a0:	e072      	b.n	8006588 <UART_SetConfig+0x5d0>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a5e      	ldr	r2, [pc, #376]	; (8006620 <UART_SetConfig+0x668>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d132      	bne.n	8006512 <UART_SetConfig+0x55a>
 80064ac:	4b5a      	ldr	r3, [pc, #360]	; (8006618 <UART_SetConfig+0x660>)
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	2b05      	cmp	r3, #5
 80064b6:	d827      	bhi.n	8006508 <UART_SetConfig+0x550>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <UART_SetConfig+0x508>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064d9 	.word	0x080064d9
 80064c4:	080064e1 	.word	0x080064e1
 80064c8:	080064e9 	.word	0x080064e9
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	080064f9 	.word	0x080064f9
 80064d4:	08006501 	.word	0x08006501
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064de:	e053      	b.n	8006588 <UART_SetConfig+0x5d0>
 80064e0:	2304      	movs	r3, #4
 80064e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064e6:	e04f      	b.n	8006588 <UART_SetConfig+0x5d0>
 80064e8:	2308      	movs	r3, #8
 80064ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ee:	e04b      	b.n	8006588 <UART_SetConfig+0x5d0>
 80064f0:	2310      	movs	r3, #16
 80064f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f6:	e047      	b.n	8006588 <UART_SetConfig+0x5d0>
 80064f8:	2320      	movs	r3, #32
 80064fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064fe:	e043      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006500:	2340      	movs	r3, #64	; 0x40
 8006502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006506:	e03f      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006508:	2380      	movs	r3, #128	; 0x80
 800650a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800650e:	bf00      	nop
 8006510:	e03a      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a43      	ldr	r2, [pc, #268]	; (8006624 <UART_SetConfig+0x66c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d132      	bne.n	8006582 <UART_SetConfig+0x5ca>
 800651c:	4b3e      	ldr	r3, [pc, #248]	; (8006618 <UART_SetConfig+0x660>)
 800651e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	2b05      	cmp	r3, #5
 8006526:	d827      	bhi.n	8006578 <UART_SetConfig+0x5c0>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x578>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006549 	.word	0x08006549
 8006534:	08006551 	.word	0x08006551
 8006538:	08006559 	.word	0x08006559
 800653c:	08006561 	.word	0x08006561
 8006540:	08006569 	.word	0x08006569
 8006544:	08006571 	.word	0x08006571
 8006548:	2302      	movs	r3, #2
 800654a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654e:	e01b      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006550:	2304      	movs	r3, #4
 8006552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006556:	e017      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006558:	2308      	movs	r3, #8
 800655a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800655e:	e013      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006560:	2310      	movs	r3, #16
 8006562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006566:	e00f      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006568:	2320      	movs	r3, #32
 800656a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800656e:	e00b      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006570:	2340      	movs	r3, #64	; 0x40
 8006572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006576:	e007      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006578:	2380      	movs	r3, #128	; 0x80
 800657a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800657e:	bf00      	nop
 8006580:	e002      	b.n	8006588 <UART_SetConfig+0x5d0>
 8006582:	2380      	movs	r3, #128	; 0x80
 8006584:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a25      	ldr	r2, [pc, #148]	; (8006624 <UART_SetConfig+0x66c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	f040 80b8 	bne.w	8006704 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006594:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006598:	2b08      	cmp	r3, #8
 800659a:	d019      	beq.n	80065d0 <UART_SetConfig+0x618>
 800659c:	2b08      	cmp	r3, #8
 800659e:	dc04      	bgt.n	80065aa <UART_SetConfig+0x5f2>
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d009      	beq.n	80065b8 <UART_SetConfig+0x600>
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d00b      	beq.n	80065c0 <UART_SetConfig+0x608>
 80065a8:	e042      	b.n	8006630 <UART_SetConfig+0x678>
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d02b      	beq.n	8006606 <UART_SetConfig+0x64e>
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d02c      	beq.n	800660c <UART_SetConfig+0x654>
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d014      	beq.n	80065e0 <UART_SetConfig+0x628>
 80065b6:	e03b      	b.n	8006630 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80065b8:	f7fe faa0 	bl	8004afc <HAL_RCCEx_GetD3PCLK1Freq>
 80065bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065be:	e03d      	b.n	800663c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c0:	f107 0314 	add.w	r3, r7, #20
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe faaf 	bl	8004b28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065ce:	e035      	b.n	800663c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065d0:	f107 0308 	add.w	r3, r7, #8
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe fbf3 	bl	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065de:	e02d      	b.n	800663c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e0:	4b0d      	ldr	r3, [pc, #52]	; (8006618 <UART_SetConfig+0x660>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <UART_SetConfig+0x660>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	08db      	lsrs	r3, r3, #3
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <UART_SetConfig+0x670>)
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065fe:	e01d      	b.n	800663c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <UART_SetConfig+0x670>)
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006604:	e01a      	b.n	800663c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006606:	4b09      	ldr	r3, [pc, #36]	; (800662c <UART_SetConfig+0x674>)
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800660a:	e017      	b.n	800663c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006612:	e013      	b.n	800663c <UART_SetConfig+0x684>
 8006614:	40011400 	.word	0x40011400
 8006618:	58024400 	.word	0x58024400
 800661c:	40007800 	.word	0x40007800
 8006620:	40007c00 	.word	0x40007c00
 8006624:	58000c00 	.word	0x58000c00
 8006628:	03d09000 	.word	0x03d09000
 800662c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800663a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 824d 	beq.w	8006ade <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	4aad      	ldr	r2, [pc, #692]	; (8006900 <UART_SetConfig+0x948>)
 800664a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800664e:	461a      	mov	r2, r3
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	fbb3 f3f2 	udiv	r3, r3, r2
 8006656:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	4613      	mov	r3, r2
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	4413      	add	r3, r2
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	429a      	cmp	r2, r3
 8006666:	d305      	bcc.n	8006674 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800666e:	6a3a      	ldr	r2, [r7, #32]
 8006670:	429a      	cmp	r2, r3
 8006672:	d903      	bls.n	800667c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800667a:	e230      	b.n	8006ade <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	4618      	mov	r0, r3
 8006680:	f04f 0100 	mov.w	r1, #0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	4a9d      	ldr	r2, [pc, #628]	; (8006900 <UART_SetConfig+0x948>)
 800668a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800668e:	b29b      	uxth	r3, r3
 8006690:	f04f 0400 	mov.w	r4, #0
 8006694:	461a      	mov	r2, r3
 8006696:	4623      	mov	r3, r4
 8006698:	f7f9 fe7a 	bl	8000390 <__aeabi_uldivmod>
 800669c:	4603      	mov	r3, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	4619      	mov	r1, r3
 80066a2:	4622      	mov	r2, r4
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	f04f 0400 	mov.w	r4, #0
 80066ac:	0214      	lsls	r4, r2, #8
 80066ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80066b2:	020b      	lsls	r3, r1, #8
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6852      	ldr	r2, [r2, #4]
 80066b8:	0852      	lsrs	r2, r2, #1
 80066ba:	4611      	mov	r1, r2
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	eb13 0b01 	adds.w	fp, r3, r1
 80066c4:	eb44 0c02 	adc.w	ip, r4, r2
 80066c8:	4658      	mov	r0, fp
 80066ca:	4661      	mov	r1, ip
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f04f 0400 	mov.w	r4, #0
 80066d4:	461a      	mov	r2, r3
 80066d6:	4623      	mov	r3, r4
 80066d8:	f7f9 fe5a 	bl	8000390 <__aeabi_uldivmod>
 80066dc:	4603      	mov	r3, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e8:	d308      	bcc.n	80066fc <UART_SetConfig+0x744>
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f0:	d204      	bcs.n	80066fc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f8:	60da      	str	r2, [r3, #12]
 80066fa:	e1f0      	b.n	8006ade <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006702:	e1ec      	b.n	8006ade <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800670c:	f040 8100 	bne.w	8006910 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	f200 80b7 	bhi.w	8006888 <UART_SetConfig+0x8d0>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x768>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006825 	.word	0x08006825
 8006724:	0800682d 	.word	0x0800682d
 8006728:	08006889 	.word	0x08006889
 800672c:	08006889 	.word	0x08006889
 8006730:	08006835 	.word	0x08006835
 8006734:	08006889 	.word	0x08006889
 8006738:	08006889 	.word	0x08006889
 800673c:	08006889 	.word	0x08006889
 8006740:	08006845 	.word	0x08006845
 8006744:	08006889 	.word	0x08006889
 8006748:	08006889 	.word	0x08006889
 800674c:	08006889 	.word	0x08006889
 8006750:	08006889 	.word	0x08006889
 8006754:	08006889 	.word	0x08006889
 8006758:	08006889 	.word	0x08006889
 800675c:	08006889 	.word	0x08006889
 8006760:	08006855 	.word	0x08006855
 8006764:	08006889 	.word	0x08006889
 8006768:	08006889 	.word	0x08006889
 800676c:	08006889 	.word	0x08006889
 8006770:	08006889 	.word	0x08006889
 8006774:	08006889 	.word	0x08006889
 8006778:	08006889 	.word	0x08006889
 800677c:	08006889 	.word	0x08006889
 8006780:	08006889 	.word	0x08006889
 8006784:	08006889 	.word	0x08006889
 8006788:	08006889 	.word	0x08006889
 800678c:	08006889 	.word	0x08006889
 8006790:	08006889 	.word	0x08006889
 8006794:	08006889 	.word	0x08006889
 8006798:	08006889 	.word	0x08006889
 800679c:	08006889 	.word	0x08006889
 80067a0:	0800687b 	.word	0x0800687b
 80067a4:	08006889 	.word	0x08006889
 80067a8:	08006889 	.word	0x08006889
 80067ac:	08006889 	.word	0x08006889
 80067b0:	08006889 	.word	0x08006889
 80067b4:	08006889 	.word	0x08006889
 80067b8:	08006889 	.word	0x08006889
 80067bc:	08006889 	.word	0x08006889
 80067c0:	08006889 	.word	0x08006889
 80067c4:	08006889 	.word	0x08006889
 80067c8:	08006889 	.word	0x08006889
 80067cc:	08006889 	.word	0x08006889
 80067d0:	08006889 	.word	0x08006889
 80067d4:	08006889 	.word	0x08006889
 80067d8:	08006889 	.word	0x08006889
 80067dc:	08006889 	.word	0x08006889
 80067e0:	08006889 	.word	0x08006889
 80067e4:	08006889 	.word	0x08006889
 80067e8:	08006889 	.word	0x08006889
 80067ec:	08006889 	.word	0x08006889
 80067f0:	08006889 	.word	0x08006889
 80067f4:	08006889 	.word	0x08006889
 80067f8:	08006889 	.word	0x08006889
 80067fc:	08006889 	.word	0x08006889
 8006800:	08006889 	.word	0x08006889
 8006804:	08006889 	.word	0x08006889
 8006808:	08006889 	.word	0x08006889
 800680c:	08006889 	.word	0x08006889
 8006810:	08006889 	.word	0x08006889
 8006814:	08006889 	.word	0x08006889
 8006818:	08006889 	.word	0x08006889
 800681c:	08006889 	.word	0x08006889
 8006820:	08006881 	.word	0x08006881
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006824:	f7fd fa50 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8006828:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800682a:	e033      	b.n	8006894 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800682c:	f7fd fa62 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 8006830:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006832:	e02f      	b.n	8006894 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006834:	f107 0314 	add.w	r3, r7, #20
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe f975 	bl	8004b28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006842:	e027      	b.n	8006894 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006844:	f107 0308 	add.w	r3, r7, #8
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fab9 	bl	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006852:	e01f      	b.n	8006894 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006854:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <UART_SetConfig+0x94c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006860:	4b28      	ldr	r3, [pc, #160]	; (8006904 <UART_SetConfig+0x94c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	08db      	lsrs	r3, r3, #3
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	4a27      	ldr	r2, [pc, #156]	; (8006908 <UART_SetConfig+0x950>)
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006872:	e00f      	b.n	8006894 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006874:	4b24      	ldr	r3, [pc, #144]	; (8006908 <UART_SetConfig+0x950>)
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006878:	e00c      	b.n	8006894 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <UART_SetConfig+0x954>)
 800687c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800687e:	e009      	b.n	8006894 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006886:	e005      	b.n	8006894 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006892:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8121 	beq.w	8006ade <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	4a17      	ldr	r2, [pc, #92]	; (8006900 <UART_SetConfig+0x948>)
 80068a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068a6:	461a      	mov	r2, r3
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ae:	005a      	lsls	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	085b      	lsrs	r3, r3, #1
 80068b6:	441a      	add	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	2b0f      	cmp	r3, #15
 80068c8:	d916      	bls.n	80068f8 <UART_SetConfig+0x940>
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d0:	d212      	bcs.n	80068f8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f023 030f 	bic.w	r3, r3, #15
 80068da:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068ea:	4313      	orrs	r3, r2
 80068ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	e0f2      	b.n	8006ade <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80068fe:	e0ee      	b.n	8006ade <UART_SetConfig+0xb26>
 8006900:	0800b17c 	.word	0x0800b17c
 8006904:	58024400 	.word	0x58024400
 8006908:	03d09000 	.word	0x03d09000
 800690c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006910:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006914:	2b40      	cmp	r3, #64	; 0x40
 8006916:	f200 80b7 	bhi.w	8006a88 <UART_SetConfig+0xad0>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <UART_SetConfig+0x968>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006a25 	.word	0x08006a25
 8006924:	08006a2d 	.word	0x08006a2d
 8006928:	08006a89 	.word	0x08006a89
 800692c:	08006a89 	.word	0x08006a89
 8006930:	08006a35 	.word	0x08006a35
 8006934:	08006a89 	.word	0x08006a89
 8006938:	08006a89 	.word	0x08006a89
 800693c:	08006a89 	.word	0x08006a89
 8006940:	08006a45 	.word	0x08006a45
 8006944:	08006a89 	.word	0x08006a89
 8006948:	08006a89 	.word	0x08006a89
 800694c:	08006a89 	.word	0x08006a89
 8006950:	08006a89 	.word	0x08006a89
 8006954:	08006a89 	.word	0x08006a89
 8006958:	08006a89 	.word	0x08006a89
 800695c:	08006a89 	.word	0x08006a89
 8006960:	08006a55 	.word	0x08006a55
 8006964:	08006a89 	.word	0x08006a89
 8006968:	08006a89 	.word	0x08006a89
 800696c:	08006a89 	.word	0x08006a89
 8006970:	08006a89 	.word	0x08006a89
 8006974:	08006a89 	.word	0x08006a89
 8006978:	08006a89 	.word	0x08006a89
 800697c:	08006a89 	.word	0x08006a89
 8006980:	08006a89 	.word	0x08006a89
 8006984:	08006a89 	.word	0x08006a89
 8006988:	08006a89 	.word	0x08006a89
 800698c:	08006a89 	.word	0x08006a89
 8006990:	08006a89 	.word	0x08006a89
 8006994:	08006a89 	.word	0x08006a89
 8006998:	08006a89 	.word	0x08006a89
 800699c:	08006a89 	.word	0x08006a89
 80069a0:	08006a7b 	.word	0x08006a7b
 80069a4:	08006a89 	.word	0x08006a89
 80069a8:	08006a89 	.word	0x08006a89
 80069ac:	08006a89 	.word	0x08006a89
 80069b0:	08006a89 	.word	0x08006a89
 80069b4:	08006a89 	.word	0x08006a89
 80069b8:	08006a89 	.word	0x08006a89
 80069bc:	08006a89 	.word	0x08006a89
 80069c0:	08006a89 	.word	0x08006a89
 80069c4:	08006a89 	.word	0x08006a89
 80069c8:	08006a89 	.word	0x08006a89
 80069cc:	08006a89 	.word	0x08006a89
 80069d0:	08006a89 	.word	0x08006a89
 80069d4:	08006a89 	.word	0x08006a89
 80069d8:	08006a89 	.word	0x08006a89
 80069dc:	08006a89 	.word	0x08006a89
 80069e0:	08006a89 	.word	0x08006a89
 80069e4:	08006a89 	.word	0x08006a89
 80069e8:	08006a89 	.word	0x08006a89
 80069ec:	08006a89 	.word	0x08006a89
 80069f0:	08006a89 	.word	0x08006a89
 80069f4:	08006a89 	.word	0x08006a89
 80069f8:	08006a89 	.word	0x08006a89
 80069fc:	08006a89 	.word	0x08006a89
 8006a00:	08006a89 	.word	0x08006a89
 8006a04:	08006a89 	.word	0x08006a89
 8006a08:	08006a89 	.word	0x08006a89
 8006a0c:	08006a89 	.word	0x08006a89
 8006a10:	08006a89 	.word	0x08006a89
 8006a14:	08006a89 	.word	0x08006a89
 8006a18:	08006a89 	.word	0x08006a89
 8006a1c:	08006a89 	.word	0x08006a89
 8006a20:	08006a81 	.word	0x08006a81
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a24:	f7fd f950 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 8006a28:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006a2a:	e033      	b.n	8006a94 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a2c:	f7fd f962 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 8006a30:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006a32:	e02f      	b.n	8006a94 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a34:	f107 0314 	add.w	r3, r7, #20
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe f875 	bl	8004b28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a42:	e027      	b.n	8006a94 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a44:	f107 0308 	add.w	r3, r7, #8
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe f9b9 	bl	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a52:	e01f      	b.n	8006a94 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a54:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <UART_SetConfig+0xb50>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a60:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <UART_SetConfig+0xb50>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	08db      	lsrs	r3, r3, #3
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	4a28      	ldr	r2, [pc, #160]	; (8006b0c <UART_SetConfig+0xb54>)
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a72:	e00f      	b.n	8006a94 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006a74:	4b25      	ldr	r3, [pc, #148]	; (8006b0c <UART_SetConfig+0xb54>)
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a78:	e00c      	b.n	8006a94 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a7a:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <UART_SetConfig+0xb58>)
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a7e:	e009      	b.n	8006a94 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a86:	e005      	b.n	8006a94 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006a92:	bf00      	nop
    }

    if (pclk != 0U)
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d021      	beq.n	8006ade <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <UART_SetConfig+0xb5c>)
 8006aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	441a      	add	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	2b0f      	cmp	r3, #15
 8006ac4:	d908      	bls.n	8006ad8 <UART_SetConfig+0xb20>
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006acc:	d204      	bcs.n	8006ad8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	e002      	b.n	8006ade <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006afa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3738      	adds	r7, #56	; 0x38
 8006b02:	46bd      	mov	sp, r7
 8006b04:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006b08:	58024400 	.word	0x58024400
 8006b0c:	03d09000 	.word	0x03d09000
 8006b10:	003d0900 	.word	0x003d0900
 8006b14:	0800b17c 	.word	0x0800b17c

08006b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c16:	d10a      	bne.n	8006c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006c6c:	f7fb fae4 	bl	8002238 <HAL_GetTick>
 8006c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d10e      	bne.n	8006c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f82c 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e022      	b.n	8006ce4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d10e      	bne.n	8006cca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f816 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e00c      	b.n	8006ce4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfc:	e062      	b.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d05e      	beq.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d06:	f7fb fa97 	bl	8002238 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d302      	bcc.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11d      	bne.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d2a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0201 	bic.w	r2, r2, #1
 8006d3a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e045      	b.n	8006de4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d02e      	beq.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d74:	d126      	bne.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e00f      	b.n	8006de4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	bf0c      	ite	eq
 8006dd4:	2301      	moveq	r3, #1
 8006dd6:	2300      	movne	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d08d      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6899      	ldr	r1, [r3, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <UART_EndRxTransfer+0x44>)
 8006e10:	400b      	ands	r3, r1
 8006e12:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	effffffe 	.word	0xeffffffe

08006e34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f7ff f8a6 	bl	8005fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e58:	bf00      	nop
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e6e:	2b21      	cmp	r3, #33	; 0x21
 8006e70:	d12a      	bne.n	8006ec8 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d110      	bne.n	8006ea0 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e8c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e9c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006e9e:	e013      	b.n	8006ec8 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ee2:	2b21      	cmp	r3, #33	; 0x21
 8006ee4:	d12f      	bne.n	8006f46 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d110      	bne.n	8006f14 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f00:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f10:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006f12:	e018      	b.n	8006f46 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f18:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f28:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f60:	2b21      	cmp	r3, #33	; 0x21
 8006f62:	d13d      	bne.n	8006fe0 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f6a:	81fb      	strh	r3, [r7, #14]
 8006f6c:	e035      	b.n	8006fda <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d111      	bne.n	8006f9e <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006f88:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f98:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006f9a:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006f9c:	e020      	b.n	8006fe0 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d013      	beq.n	8006fd4 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006fd4:	89fb      	ldrh	r3, [r7, #14]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	81fb      	strh	r3, [r7, #14]
 8006fda:	89fb      	ldrh	r3, [r7, #14]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1c6      	bne.n	8006f6e <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8006fe0:	bf00      	nop
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ffa:	2b21      	cmp	r3, #33	; 0x21
 8006ffc:	d142      	bne.n	8007084 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007004:	81fb      	strh	r3, [r7, #14]
 8007006:	e03a      	b.n	800707e <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d111      	bne.n	8007038 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007022:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007032:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8007034:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8007036:	e025      	b.n	8007084 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007042:	2b00      	cmp	r3, #0
 8007044:	d018      	beq.n	8007078 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704a:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800705a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007060:	1c9a      	adds	r2, r3, #2
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007078:	89fb      	ldrh	r3, [r7, #14]
 800707a:	3b01      	subs	r3, #1
 800707c:	81fb      	strh	r3, [r7, #14]
 800707e:	89fb      	ldrh	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1c1      	bne.n	8007008 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fa fe5c 	bl	8001d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070da:	2b22      	cmp	r3, #34	; 0x22
 80070dc:	d13b      	bne.n	8007156 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070e6:	89bb      	ldrh	r3, [r7, #12]
 80070e8:	b2d9      	uxtb	r1, r3
 80070ea:	89fb      	ldrh	r3, [r7, #14]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f2:	400a      	ands	r2, r1
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b29a      	uxth	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d122      	bne.n	8007166 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800712e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0201 	bic.w	r2, r2, #1
 800713e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fa fe20 	bl	8001d94 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007154:	e007      	b.n	8007166 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0208 	orr.w	r2, r2, #8
 8007164:	619a      	str	r2, [r3, #24]
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800717c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007184:	2b22      	cmp	r3, #34	; 0x22
 8007186:	d13b      	bne.n	8007200 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007196:	89ba      	ldrh	r2, [r7, #12]
 8007198:	89fb      	ldrh	r3, [r7, #14]
 800719a:	4013      	ands	r3, r2
 800719c:	b29a      	uxth	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a6:	1c9a      	adds	r2, r3, #2
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d122      	bne.n	8007210 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80071d8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fa fdcb 	bl	8001d94 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071fe:	e007      	b.n	8007210 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699a      	ldr	r2, [r3, #24]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0208 	orr.w	r2, r2, #8
 800720e:	619a      	str	r2, [r3, #24]
}
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007226:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722e:	2b22      	cmp	r3, #34	; 0x22
 8007230:	d166      	bne.n	8007300 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007238:	81fb      	strh	r3, [r7, #14]
 800723a:	e03d      	b.n	80072b8 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007244:	893b      	ldrh	r3, [r7, #8]
 8007246:	b2d9      	uxtb	r1, r3
 8007248:	89bb      	ldrh	r3, [r7, #12]
 800724a:	b2da      	uxtb	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007250:	400a      	ands	r2, r1
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007278:	b29b      	uxth	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d119      	bne.n	80072b2 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800728c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6899      	ldr	r1, [r3, #8]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	4b1f      	ldr	r3, [pc, #124]	; (8007318 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800729a:	400b      	ands	r3, r1
 800729c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7fa fd71 	bl	8001d94 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80072b2:	89fb      	ldrh	r3, [r7, #14]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	81fb      	strh	r3, [r7, #14]
 80072b8:	89fb      	ldrh	r3, [r7, #14]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1be      	bne.n	800723c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072c4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072c6:	897b      	ldrh	r3, [r7, #10]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d021      	beq.n	8007310 <UART_RxISR_8BIT_FIFOEN+0xf8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072d2:	897a      	ldrh	r2, [r7, #10]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d21b      	bcs.n	8007310 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80072e6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a0c      	ldr	r2, [pc, #48]	; (800731c <UART_RxISR_8BIT_FIFOEN+0x104>)
 80072ec:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0220 	orr.w	r2, r2, #32
 80072fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072fe:	e007      	b.n	8007310 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0208 	orr.w	r2, r2, #8
 800730e:	619a      	str	r2, [r3, #24]
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	effffffe 	.word	0xeffffffe
 800731c:	080070c5 	.word	0x080070c5

08007320 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800732e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007336:	2b22      	cmp	r3, #34	; 0x22
 8007338:	d166      	bne.n	8007408 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007340:	82fb      	strh	r3, [r7, #22]
 8007342:	e03d      	b.n	80073c0 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007350:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007352:	8a3a      	ldrh	r2, [r7, #16]
 8007354:	8abb      	ldrh	r3, [r7, #20]
 8007356:	4013      	ands	r3, r2
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007362:	1c9a      	adds	r2, r3, #2
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d119      	bne.n	80073ba <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007394:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6899      	ldr	r1, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b1f      	ldr	r3, [pc, #124]	; (8007420 <UART_RxISR_16BIT_FIFOEN+0x100>)
 80073a2:	400b      	ands	r3, r1
 80073a4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7fa fced 	bl	8001d94 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80073ba:	8afb      	ldrh	r3, [r7, #22]
 80073bc:	3b01      	subs	r3, #1
 80073be:	82fb      	strh	r3, [r7, #22]
 80073c0:	8afb      	ldrh	r3, [r7, #22]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1be      	bne.n	8007344 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073cc:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80073ce:	8a7b      	ldrh	r3, [r7, #18]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d021      	beq.n	8007418 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073da:	8a7a      	ldrh	r2, [r7, #18]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d21b      	bcs.n	8007418 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80073ee:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80073f4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0220 	orr.w	r2, r2, #32
 8007404:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007406:	e007      	b.n	8007418 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0208 	orr.w	r2, r2, #8
 8007416:	619a      	str	r2, [r3, #24]
}
 8007418:	bf00      	nop
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	effffffe 	.word	0xeffffffe
 8007424:	0800716f 	.word	0x0800716f

08007428 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_UARTEx_DisableFifoMode+0x16>
 8007476:	2302      	movs	r3, #2
 8007478:	e027      	b.n	80074ca <HAL_UARTEx_DisableFifoMode+0x66>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2224      	movs	r2, #36	; 0x24
 8007486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0201 	bic.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e02d      	b.n	800754a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2224      	movs	r2, #36	; 0x24
 80074fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f850 	bl	80075d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007566:	2302      	movs	r3, #2
 8007568:	e02d      	b.n	80075c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2224      	movs	r2, #36	; 0x24
 8007576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f812 	bl	80075d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b089      	sub	sp, #36	; 0x24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80075d8:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <UARTEx_SetNbDataToProcess+0xc8>)
 80075da:	f107 0314 	add.w	r3, r7, #20
 80075de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075e2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80075e6:	4a2d      	ldr	r2, [pc, #180]	; (800769c <UARTEx_SetNbDataToProcess+0xcc>)
 80075e8:	f107 030c 	add.w	r3, r7, #12
 80075ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075f0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d108      	bne.n	800760e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800760c:	e03d      	b.n	800768a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800760e:	2310      	movs	r3, #16
 8007610:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007612:	2310      	movs	r3, #16
 8007614:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	0e5b      	lsrs	r3, r3, #25
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	0f5b      	lsrs	r3, r3, #29
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007636:	7fbb      	ldrb	r3, [r7, #30]
 8007638:	7f3a      	ldrb	r2, [r7, #28]
 800763a:	f107 0120 	add.w	r1, r7, #32
 800763e:	440a      	add	r2, r1
 8007640:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007644:	fb02 f303 	mul.w	r3, r2, r3
 8007648:	7f3a      	ldrb	r2, [r7, #28]
 800764a:	f107 0120 	add.w	r1, r7, #32
 800764e:	440a      	add	r2, r1
 8007650:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007654:	fb93 f3f2 	sdiv	r3, r3, r2
 8007658:	b29a      	uxth	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007660:	7ffb      	ldrb	r3, [r7, #31]
 8007662:	7f7a      	ldrb	r2, [r7, #29]
 8007664:	f107 0120 	add.w	r1, r7, #32
 8007668:	440a      	add	r2, r1
 800766a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800766e:	fb02 f303 	mul.w	r3, r2, r3
 8007672:	7f7a      	ldrb	r2, [r7, #29]
 8007674:	f107 0120 	add.w	r1, r7, #32
 8007678:	440a      	add	r2, r1
 800767a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800767e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800768a:	bf00      	nop
 800768c:	3724      	adds	r7, #36	; 0x24
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	0800b150 	.word	0x0800b150
 800769c:	0800b158 	.word	0x0800b158

080076a0 <arm_std_f32>:
 80076a0:	2901      	cmp	r1, #1
 80076a2:	d065      	beq.n	8007770 <arm_std_f32+0xd0>
 80076a4:	eddf 5a39 	vldr	s11, [pc, #228]	; 800778c <arm_std_f32+0xec>
 80076a8:	b530      	push	{r4, r5, lr}
 80076aa:	088d      	lsrs	r5, r1, #2
 80076ac:	b083      	sub	sp, #12
 80076ae:	d062      	beq.n	8007776 <arm_std_f32+0xd6>
 80076b0:	eef0 6a65 	vmov.f32	s13, s11
 80076b4:	f100 0310 	add.w	r3, r0, #16
 80076b8:	462c      	mov	r4, r5
 80076ba:	ed53 7a04 	vldr	s15, [r3, #-16]
 80076be:	3c01      	subs	r4, #1
 80076c0:	ed13 7a03 	vldr	s14, [r3, #-12]
 80076c4:	f103 0310 	add.w	r3, r3, #16
 80076c8:	ee27 4aa7 	vmul.f32	s8, s15, s15
 80076cc:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 80076d0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80076d4:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 80076d8:	ee27 5a07 	vmul.f32	s10, s14, s14
 80076dc:	ee74 5a25 	vadd.f32	s11, s8, s11
 80076e0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80076e4:	ee64 6aa4 	vmul.f32	s13, s9, s9
 80076e8:	ee75 5a25 	vadd.f32	s11, s10, s11
 80076ec:	ee77 7a24 	vadd.f32	s15, s14, s9
 80076f0:	ee26 7a06 	vmul.f32	s14, s12, s12
 80076f4:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80076f8:	ee77 6a86 	vadd.f32	s13, s15, s12
 80076fc:	ee77 5a25 	vadd.f32	s11, s14, s11
 8007700:	d1db      	bne.n	80076ba <arm_std_f32+0x1a>
 8007702:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007706:	f011 0303 	ands.w	r3, r1, #3
 800770a:	d009      	beq.n	8007720 <arm_std_f32+0x80>
 800770c:	ecf0 7a01 	vldmia	r0!, {s15}
 8007710:	3b01      	subs	r3, #1
 8007712:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007716:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800771a:	ee75 5a87 	vadd.f32	s11, s11, s14
 800771e:	d1f5      	bne.n	800770c <arm_std_f32+0x6c>
 8007720:	ee07 1a90 	vmov	s15, r1
 8007724:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007730:	ee77 6ac6 	vsub.f32	s13, s15, s12
 8007734:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8007738:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800773c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007740:	ee27 7a00 	vmul.f32	s14, s14, s0
 8007744:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007748:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800774c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007750:	db0a      	blt.n	8007768 <arm_std_f32+0xc8>
 8007752:	eeb1 0ac7 	vsqrt.f32	s0, s14
 8007756:	eeb4 0a40 	vcmp.f32	s0, s0
 800775a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775e:	d10d      	bne.n	800777c <arm_std_f32+0xdc>
 8007760:	ed82 0a00 	vstr	s0, [r2]
 8007764:	b003      	add	sp, #12
 8007766:	bd30      	pop	{r4, r5, pc}
 8007768:	2300      	movs	r3, #0
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	b003      	add	sp, #12
 800776e:	bd30      	pop	{r4, r5, pc}
 8007770:	2300      	movs	r3, #0
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	4770      	bx	lr
 8007776:	eef0 6a65 	vmov.f32	s13, s11
 800777a:	e7c4      	b.n	8007706 <arm_std_f32+0x66>
 800777c:	eeb0 0a47 	vmov.f32	s0, s14
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	f000 f8dd 	bl	8007940 <sqrtf>
 8007786:	9a01      	ldr	r2, [sp, #4]
 8007788:	e7ea      	b.n	8007760 <arm_std_f32+0xc0>
 800778a:	bf00      	nop
 800778c:	00000000 	.word	0x00000000

08007790 <arm_power_f32>:
 8007790:	b430      	push	{r4, r5}
 8007792:	088d      	lsrs	r5, r1, #2
 8007794:	d031      	beq.n	80077fa <arm_power_f32+0x6a>
 8007796:	f100 0310 	add.w	r3, r0, #16
 800779a:	462c      	mov	r4, r5
 800779c:	ed9f 5a18 	vldr	s10, [pc, #96]	; 8007800 <arm_power_f32+0x70>
 80077a0:	ed53 6a04 	vldr	s13, [r3, #-16]
 80077a4:	3c01      	subs	r4, #1
 80077a6:	ed13 7a03 	vldr	s14, [r3, #-12]
 80077aa:	f103 0310 	add.w	r3, r3, #16
 80077ae:	ee26 6aa6 	vmul.f32	s12, s13, s13
 80077b2:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 80077b6:	ee67 6a07 	vmul.f32	s13, s14, s14
 80077ba:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 80077be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80077c2:	ee76 7a05 	vadd.f32	s15, s12, s10
 80077c6:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80077ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077d2:	ee35 5aa7 	vadd.f32	s10, s11, s15
 80077d6:	d1e3      	bne.n	80077a0 <arm_power_f32+0x10>
 80077d8:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80077dc:	f011 0103 	ands.w	r1, r1, #3
 80077e0:	d007      	beq.n	80077f2 <arm_power_f32+0x62>
 80077e2:	ecb0 6a01 	vldmia	r0!, {s12}
 80077e6:	3901      	subs	r1, #1
 80077e8:	ee26 6a06 	vmul.f32	s12, s12, s12
 80077ec:	ee35 5a06 	vadd.f32	s10, s10, s12
 80077f0:	d1f7      	bne.n	80077e2 <arm_power_f32+0x52>
 80077f2:	ed82 5a00 	vstr	s10, [r2]
 80077f6:	bc30      	pop	{r4, r5}
 80077f8:	4770      	bx	lr
 80077fa:	ed9f 5a01 	vldr	s10, [pc, #4]	; 8007800 <arm_power_f32+0x70>
 80077fe:	e7ed      	b.n	80077dc <arm_power_f32+0x4c>
 8007800:	00000000 	.word	0x00000000

08007804 <arm_mean_f32>:
 8007804:	b430      	push	{r4, r5}
 8007806:	088d      	lsrs	r5, r1, #2
 8007808:	d02d      	beq.n	8007866 <arm_mean_f32+0x62>
 800780a:	f100 0310 	add.w	r3, r0, #16
 800780e:	462c      	mov	r4, r5
 8007810:	eddf 7a16 	vldr	s15, [pc, #88]	; 800786c <arm_mean_f32+0x68>
 8007814:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007818:	3c01      	subs	r4, #1
 800781a:	ed13 6a03 	vldr	s12, [r3, #-12]
 800781e:	f103 0310 	add.w	r3, r3, #16
 8007822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007826:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800782a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 800782e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783a:	d1eb      	bne.n	8007814 <arm_mean_f32+0x10>
 800783c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007840:	f011 0303 	ands.w	r3, r1, #3
 8007844:	d005      	beq.n	8007852 <arm_mean_f32+0x4e>
 8007846:	ecb0 7a01 	vldmia	r0!, {s14}
 800784a:	3b01      	subs	r3, #1
 800784c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007850:	d1f9      	bne.n	8007846 <arm_mean_f32+0x42>
 8007852:	ee07 1a10 	vmov	s14, r1
 8007856:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800785a:	bc30      	pop	{r4, r5}
 800785c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007860:	edc2 6a00 	vstr	s13, [r2]
 8007864:	4770      	bx	lr
 8007866:	eddf 7a01 	vldr	s15, [pc, #4]	; 800786c <arm_mean_f32+0x68>
 800786a:	e7e9      	b.n	8007840 <arm_mean_f32+0x3c>
 800786c:	00000000 	.word	0x00000000

08007870 <arm_max_f32>:
 8007870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	1e4d      	subs	r5, r1, #1
 8007876:	f100 0c04 	add.w	ip, r0, #4
 800787a:	edd0 7a00 	vldr	s15, [r0]
 800787e:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8007882:	d056      	beq.n	8007932 <arm_max_f32+0xc2>
 8007884:	3014      	adds	r0, #20
 8007886:	46c8      	mov	r8, r9
 8007888:	2404      	movs	r4, #4
 800788a:	2600      	movs	r6, #0
 800788c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007890:	f1a4 0a03 	sub.w	sl, r4, #3
 8007894:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007898:	f1a4 0e02 	sub.w	lr, r4, #2
 800789c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80078a0:	ed10 7a02 	vldr	s14, [r0, #-8]
 80078a4:	ed50 5a01 	vldr	s11, [r0, #-4]
 80078a8:	1e67      	subs	r7, r4, #1
 80078aa:	3010      	adds	r0, #16
 80078ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b0:	bfc8      	it	gt
 80078b2:	eef0 7a46 	vmovgt.f32	s15, s12
 80078b6:	bfc8      	it	gt
 80078b8:	4656      	movgt	r6, sl
 80078ba:	eef4 7ae6 	vcmpe.f32	s15, s13
 80078be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c2:	bf48      	it	mi
 80078c4:	eef0 7a66 	vmovmi.f32	s15, s13
 80078c8:	bf48      	it	mi
 80078ca:	4676      	movmi	r6, lr
 80078cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d4:	bf48      	it	mi
 80078d6:	eef0 7a47 	vmovmi.f32	s15, s14
 80078da:	bf48      	it	mi
 80078dc:	463e      	movmi	r6, r7
 80078de:	eef4 7ae5 	vcmpe.f32	s15, s11
 80078e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e6:	bf48      	it	mi
 80078e8:	4626      	movmi	r6, r4
 80078ea:	bf48      	it	mi
 80078ec:	eef0 7a65 	vmovmi.f32	s15, s11
 80078f0:	f1b8 0801 	subs.w	r8, r8, #1
 80078f4:	f104 0404 	add.w	r4, r4, #4
 80078f8:	d1c8      	bne.n	800788c <arm_max_f32+0x1c>
 80078fa:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 80078fe:	f015 0003 	ands.w	r0, r5, #3
 8007902:	d018      	beq.n	8007936 <arm_max_f32+0xc6>
 8007904:	1a08      	subs	r0, r1, r0
 8007906:	ecbc 7a01 	vldmia	ip!, {s14}
 800790a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007912:	bfc8      	it	gt
 8007914:	4606      	movgt	r6, r0
 8007916:	f100 0001 	add.w	r0, r0, #1
 800791a:	bfd8      	it	le
 800791c:	eeb0 7a67 	vmovle.f32	s14, s15
 8007920:	4281      	cmp	r1, r0
 8007922:	eef0 7a47 	vmov.f32	s15, s14
 8007926:	d1ee      	bne.n	8007906 <arm_max_f32+0x96>
 8007928:	ed82 7a00 	vstr	s14, [r2]
 800792c:	601e      	str	r6, [r3, #0]
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	464e      	mov	r6, r9
 8007934:	e7e3      	b.n	80078fe <arm_max_f32+0x8e>
 8007936:	eeb0 7a67 	vmov.f32	s14, s15
 800793a:	e7f5      	b.n	8007928 <arm_max_f32+0xb8>

0800793c <atan2f>:
 800793c:	f000 b850 	b.w	80079e0 <__ieee754_atan2f>

08007940 <sqrtf>:
 8007940:	b500      	push	{lr}
 8007942:	ed2d 8b02 	vpush	{d8}
 8007946:	b08b      	sub	sp, #44	; 0x2c
 8007948:	eeb0 8a40 	vmov.f32	s16, s0
 800794c:	f000 f8f2 	bl	8007b34 <__ieee754_sqrtf>
 8007950:	4b21      	ldr	r3, [pc, #132]	; (80079d8 <sqrtf+0x98>)
 8007952:	f993 3000 	ldrsb.w	r3, [r3]
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	d028      	beq.n	80079ac <sqrtf+0x6c>
 800795a:	eeb4 8a48 	vcmp.f32	s16, s16
 800795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007962:	d623      	bvs.n	80079ac <sqrtf+0x6c>
 8007964:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796c:	d51e      	bpl.n	80079ac <sqrtf+0x6c>
 800796e:	2201      	movs	r2, #1
 8007970:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8007974:	9200      	str	r2, [sp, #0]
 8007976:	4a19      	ldr	r2, [pc, #100]	; (80079dc <sqrtf+0x9c>)
 8007978:	9201      	str	r2, [sp, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	9208      	str	r2, [sp, #32]
 800797e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007982:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007986:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80079d0 <sqrtf+0x90>
 800798a:	b9a3      	cbnz	r3, 80079b6 <sqrtf+0x76>
 800798c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007990:	4668      	mov	r0, sp
 8007992:	f000 f8d2 	bl	8007b3a <matherr>
 8007996:	b1a0      	cbz	r0, 80079c2 <sqrtf+0x82>
 8007998:	9b08      	ldr	r3, [sp, #32]
 800799a:	b11b      	cbz	r3, 80079a4 <sqrtf+0x64>
 800799c:	f000 f9aa 	bl	8007cf4 <__errno>
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	6003      	str	r3, [r0, #0]
 80079a4:	ed9d 0b06 	vldr	d0, [sp, #24]
 80079a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80079ac:	b00b      	add	sp, #44	; 0x2c
 80079ae:	ecbd 8b02 	vpop	{d8}
 80079b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80079bc:	ed8d 6b06 	vstr	d6, [sp, #24]
 80079c0:	d1e6      	bne.n	8007990 <sqrtf+0x50>
 80079c2:	f000 f997 	bl	8007cf4 <__errno>
 80079c6:	2321      	movs	r3, #33	; 0x21
 80079c8:	6003      	str	r3, [r0, #0]
 80079ca:	e7e5      	b.n	8007998 <sqrtf+0x58>
 80079cc:	f3af 8000 	nop.w
	...
 80079d8:	2400000d 	.word	0x2400000d
 80079dc:	0800b194 	.word	0x0800b194

080079e0 <__ieee754_atan2f>:
 80079e0:	ee10 2a90 	vmov	r2, s1
 80079e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80079e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80079ec:	b510      	push	{r4, lr}
 80079ee:	eef0 7a40 	vmov.f32	s15, s0
 80079f2:	dc06      	bgt.n	8007a02 <__ieee754_atan2f+0x22>
 80079f4:	ee10 0a10 	vmov	r0, s0
 80079f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80079fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a00:	dd04      	ble.n	8007a0c <__ieee754_atan2f+0x2c>
 8007a02:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007a06:	eeb0 0a67 	vmov.f32	s0, s15
 8007a0a:	bd10      	pop	{r4, pc}
 8007a0c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007a10:	d103      	bne.n	8007a1a <__ieee754_atan2f+0x3a>
 8007a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a16:	f000 b893 	b.w	8007b40 <atanf>
 8007a1a:	1794      	asrs	r4, r2, #30
 8007a1c:	f004 0402 	and.w	r4, r4, #2
 8007a20:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007a24:	b93b      	cbnz	r3, 8007a36 <__ieee754_atan2f+0x56>
 8007a26:	2c02      	cmp	r4, #2
 8007a28:	d06b      	beq.n	8007b02 <__ieee754_atan2f+0x122>
 8007a2a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007b08 <__ieee754_atan2f+0x128>
 8007a2e:	2c03      	cmp	r4, #3
 8007a30:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8007a34:	e7e7      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007a36:	b939      	cbnz	r1, 8007a48 <__ieee754_atan2f+0x68>
 8007a38:	eddf 7a34 	vldr	s15, [pc, #208]	; 8007b0c <__ieee754_atan2f+0x12c>
 8007a3c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007b10 <__ieee754_atan2f+0x130>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	fe67 7a87 	vselge.f32	s15, s15, s14
 8007a46:	e7de      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007a48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007a4c:	d121      	bne.n	8007a92 <__ieee754_atan2f+0xb2>
 8007a4e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a52:	d111      	bne.n	8007a78 <__ieee754_atan2f+0x98>
 8007a54:	2c02      	cmp	r4, #2
 8007a56:	d009      	beq.n	8007a6c <__ieee754_atan2f+0x8c>
 8007a58:	2c03      	cmp	r4, #3
 8007a5a:	d00a      	beq.n	8007a72 <__ieee754_atan2f+0x92>
 8007a5c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8007b14 <__ieee754_atan2f+0x134>
 8007a60:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007b18 <__ieee754_atan2f+0x138>
 8007a64:	2c01      	cmp	r4, #1
 8007a66:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8007a6a:	e7cc      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007a6c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007b1c <__ieee754_atan2f+0x13c>
 8007a70:	e7c9      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007a72:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007b20 <__ieee754_atan2f+0x140>
 8007a76:	e7c6      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007a78:	2c02      	cmp	r4, #2
 8007a7a:	d042      	beq.n	8007b02 <__ieee754_atan2f+0x122>
 8007a7c:	2c03      	cmp	r4, #3
 8007a7e:	d005      	beq.n	8007a8c <__ieee754_atan2f+0xac>
 8007a80:	2c01      	cmp	r4, #1
 8007a82:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007b24 <__ieee754_atan2f+0x144>
 8007a86:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007b28 <__ieee754_atan2f+0x148>
 8007a8a:	e7ec      	b.n	8007a66 <__ieee754_atan2f+0x86>
 8007a8c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007b08 <__ieee754_atan2f+0x128>
 8007a90:	e7b9      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007a92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a96:	d0cf      	beq.n	8007a38 <__ieee754_atan2f+0x58>
 8007a98:	1a5b      	subs	r3, r3, r1
 8007a9a:	15db      	asrs	r3, r3, #23
 8007a9c:	2b3c      	cmp	r3, #60	; 0x3c
 8007a9e:	dc1a      	bgt.n	8007ad6 <__ieee754_atan2f+0xf6>
 8007aa0:	2a00      	cmp	r2, #0
 8007aa2:	da01      	bge.n	8007aa8 <__ieee754_atan2f+0xc8>
 8007aa4:	333c      	adds	r3, #60	; 0x3c
 8007aa6:	db19      	blt.n	8007adc <__ieee754_atan2f+0xfc>
 8007aa8:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007aac:	f000 f91a 	bl	8007ce4 <fabsf>
 8007ab0:	f000 f846 	bl	8007b40 <atanf>
 8007ab4:	eef0 7a40 	vmov.f32	s15, s0
 8007ab8:	2c01      	cmp	r4, #1
 8007aba:	d012      	beq.n	8007ae2 <__ieee754_atan2f+0x102>
 8007abc:	2c02      	cmp	r4, #2
 8007abe:	d017      	beq.n	8007af0 <__ieee754_atan2f+0x110>
 8007ac0:	2c00      	cmp	r4, #0
 8007ac2:	d0a0      	beq.n	8007a06 <__ieee754_atan2f+0x26>
 8007ac4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007b2c <__ieee754_atan2f+0x14c>
 8007ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007acc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007b30 <__ieee754_atan2f+0x150>
 8007ad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ad4:	e797      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007ad6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007b0c <__ieee754_atan2f+0x12c>
 8007ada:	e7ed      	b.n	8007ab8 <__ieee754_atan2f+0xd8>
 8007adc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007b28 <__ieee754_atan2f+0x148>
 8007ae0:	e7ea      	b.n	8007ab8 <__ieee754_atan2f+0xd8>
 8007ae2:	ee17 3a90 	vmov	r3, s15
 8007ae6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	e78a      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007af0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007b2c <__ieee754_atan2f+0x14c>
 8007af4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007af8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007b30 <__ieee754_atan2f+0x150>
 8007afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b00:	e781      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007b02:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007b30 <__ieee754_atan2f+0x150>
 8007b06:	e77e      	b.n	8007a06 <__ieee754_atan2f+0x26>
 8007b08:	c0490fdb 	.word	0xc0490fdb
 8007b0c:	3fc90fdb 	.word	0x3fc90fdb
 8007b10:	bfc90fdb 	.word	0xbfc90fdb
 8007b14:	bf490fdb 	.word	0xbf490fdb
 8007b18:	3f490fdb 	.word	0x3f490fdb
 8007b1c:	4016cbe4 	.word	0x4016cbe4
 8007b20:	c016cbe4 	.word	0xc016cbe4
 8007b24:	80000000 	.word	0x80000000
 8007b28:	00000000 	.word	0x00000000
 8007b2c:	33bbbd2e 	.word	0x33bbbd2e
 8007b30:	40490fdb 	.word	0x40490fdb

08007b34 <__ieee754_sqrtf>:
 8007b34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007b38:	4770      	bx	lr

08007b3a <matherr>:
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	4770      	bx	lr
	...

08007b40 <atanf>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	ee10 5a10 	vmov	r5, s0
 8007b46:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007b4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007b4e:	eef0 7a40 	vmov.f32	s15, s0
 8007b52:	db0f      	blt.n	8007b74 <atanf+0x34>
 8007b54:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007b58:	dd04      	ble.n	8007b64 <atanf+0x24>
 8007b5a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007c98 <atanf+0x158>
 8007b68:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8007c9c <atanf+0x15c>
 8007b6c:	2d00      	cmp	r5, #0
 8007b6e:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8007b72:	e7f4      	b.n	8007b5e <atanf+0x1e>
 8007b74:	4b4a      	ldr	r3, [pc, #296]	; (8007ca0 <atanf+0x160>)
 8007b76:	429c      	cmp	r4, r3
 8007b78:	dc10      	bgt.n	8007b9c <atanf+0x5c>
 8007b7a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007b7e:	da0a      	bge.n	8007b96 <atanf+0x56>
 8007b80:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007ca4 <atanf+0x164>
 8007b84:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b8c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b94:	dce3      	bgt.n	8007b5e <atanf+0x1e>
 8007b96:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9a:	e013      	b.n	8007bc4 <atanf+0x84>
 8007b9c:	f000 f8a2 	bl	8007ce4 <fabsf>
 8007ba0:	4b41      	ldr	r3, [pc, #260]	; (8007ca8 <atanf+0x168>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	dc4f      	bgt.n	8007c46 <atanf+0x106>
 8007ba6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007baa:	429c      	cmp	r4, r3
 8007bac:	dc41      	bgt.n	8007c32 <atanf+0xf2>
 8007bae:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007bb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007bb6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007bba:	2300      	movs	r3, #0
 8007bbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007bc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007bca:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007cac <atanf+0x16c>
 8007bce:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007cb0 <atanf+0x170>
 8007bd2:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007cb4 <atanf+0x174>
 8007bd6:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007bda:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007bde:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007cb8 <atanf+0x178>
 8007be2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007be6:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007cbc <atanf+0x17c>
 8007bea:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007bee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007cc0 <atanf+0x180>
 8007bf2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007bf6:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007cc4 <atanf+0x184>
 8007bfa:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007bfe:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007cc8 <atanf+0x188>
 8007c02:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007c06:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007ccc <atanf+0x18c>
 8007c0a:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007c0e:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007cd0 <atanf+0x190>
 8007c12:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007c16:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007cd4 <atanf+0x194>
 8007c1a:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007c1e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007c22:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c2a:	d121      	bne.n	8007c70 <atanf+0x130>
 8007c2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c30:	e795      	b.n	8007b5e <atanf+0x1e>
 8007c32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007c36:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007c3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c3e:	2301      	movs	r3, #1
 8007c40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007c44:	e7be      	b.n	8007bc4 <atanf+0x84>
 8007c46:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <atanf+0x198>)
 8007c48:	429c      	cmp	r4, r3
 8007c4a:	dc0b      	bgt.n	8007c64 <atanf+0x124>
 8007c4c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c54:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007c58:	2302      	movs	r3, #2
 8007c5a:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c62:	e7af      	b.n	8007bc4 <atanf+0x84>
 8007c64:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007c68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e7a9      	b.n	8007bc4 <atanf+0x84>
 8007c70:	4a1a      	ldr	r2, [pc, #104]	; (8007cdc <atanf+0x19c>)
 8007c72:	491b      	ldr	r1, [pc, #108]	; (8007ce0 <atanf+0x1a0>)
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	441a      	add	r2, r3
 8007c78:	440b      	add	r3, r1
 8007c7a:	edd3 6a00 	vldr	s13, [r3]
 8007c7e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c88:	ed92 7a00 	vldr	s14, [r2]
 8007c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c90:	bfb8      	it	lt
 8007c92:	eef1 7a67 	vneglt.f32	s15, s15
 8007c96:	e762      	b.n	8007b5e <atanf+0x1e>
 8007c98:	bfc90fdb 	.word	0xbfc90fdb
 8007c9c:	3fc90fdb 	.word	0x3fc90fdb
 8007ca0:	3edfffff 	.word	0x3edfffff
 8007ca4:	7149f2ca 	.word	0x7149f2ca
 8007ca8:	3f97ffff 	.word	0x3f97ffff
 8007cac:	3c8569d7 	.word	0x3c8569d7
 8007cb0:	3d4bda59 	.word	0x3d4bda59
 8007cb4:	bd6ef16b 	.word	0xbd6ef16b
 8007cb8:	3d886b35 	.word	0x3d886b35
 8007cbc:	3dba2e6e 	.word	0x3dba2e6e
 8007cc0:	3e124925 	.word	0x3e124925
 8007cc4:	3eaaaaab 	.word	0x3eaaaaab
 8007cc8:	bd15a221 	.word	0xbd15a221
 8007ccc:	bd9d8795 	.word	0xbd9d8795
 8007cd0:	bde38e38 	.word	0xbde38e38
 8007cd4:	be4ccccd 	.word	0xbe4ccccd
 8007cd8:	401bffff 	.word	0x401bffff
 8007cdc:	0800b19c 	.word	0x0800b19c
 8007ce0:	0800b1ac 	.word	0x0800b1ac

08007ce4 <fabsf>:
 8007ce4:	ee10 3a10 	vmov	r3, s0
 8007ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cec:	ee00 3a10 	vmov	s0, r3
 8007cf0:	4770      	bx	lr
	...

08007cf4 <__errno>:
 8007cf4:	4b01      	ldr	r3, [pc, #4]	; (8007cfc <__errno+0x8>)
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	24000010 	.word	0x24000010

08007d00 <__libc_init_array>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	4e0d      	ldr	r6, [pc, #52]	; (8007d38 <__libc_init_array+0x38>)
 8007d04:	4c0d      	ldr	r4, [pc, #52]	; (8007d3c <__libc_init_array+0x3c>)
 8007d06:	1ba4      	subs	r4, r4, r6
 8007d08:	10a4      	asrs	r4, r4, #2
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	42a5      	cmp	r5, r4
 8007d0e:	d109      	bne.n	8007d24 <__libc_init_array+0x24>
 8007d10:	4e0b      	ldr	r6, [pc, #44]	; (8007d40 <__libc_init_array+0x40>)
 8007d12:	4c0c      	ldr	r4, [pc, #48]	; (8007d44 <__libc_init_array+0x44>)
 8007d14:	f003 f984 	bl	800b020 <_init>
 8007d18:	1ba4      	subs	r4, r4, r6
 8007d1a:	10a4      	asrs	r4, r4, #2
 8007d1c:	2500      	movs	r5, #0
 8007d1e:	42a5      	cmp	r5, r4
 8007d20:	d105      	bne.n	8007d2e <__libc_init_array+0x2e>
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
 8007d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d28:	4798      	blx	r3
 8007d2a:	3501      	adds	r5, #1
 8007d2c:	e7ee      	b.n	8007d0c <__libc_init_array+0xc>
 8007d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d32:	4798      	blx	r3
 8007d34:	3501      	adds	r5, #1
 8007d36:	e7f2      	b.n	8007d1e <__libc_init_array+0x1e>
 8007d38:	0800b438 	.word	0x0800b438
 8007d3c:	0800b438 	.word	0x0800b438
 8007d40:	0800b438 	.word	0x0800b438
 8007d44:	0800b440 	.word	0x0800b440

08007d48 <malloc>:
 8007d48:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <malloc+0xc>)
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	f000 b80b 	b.w	8007d68 <_malloc_r>
 8007d52:	bf00      	nop
 8007d54:	24000010 	.word	0x24000010

08007d58 <free>:
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <free+0xc>)
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	f002 baab 	b.w	800a2b8 <_free_r>
 8007d62:	bf00      	nop
 8007d64:	24000010 	.word	0x24000010

08007d68 <_malloc_r>:
 8007d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	f101 050b 	add.w	r5, r1, #11
 8007d70:	2d16      	cmp	r5, #22
 8007d72:	4606      	mov	r6, r0
 8007d74:	d906      	bls.n	8007d84 <_malloc_r+0x1c>
 8007d76:	f035 0507 	bics.w	r5, r5, #7
 8007d7a:	d504      	bpl.n	8007d86 <_malloc_r+0x1e>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	6033      	str	r3, [r6, #0]
 8007d80:	2400      	movs	r4, #0
 8007d82:	e1a8      	b.n	80080d6 <_malloc_r+0x36e>
 8007d84:	2510      	movs	r5, #16
 8007d86:	428d      	cmp	r5, r1
 8007d88:	d3f8      	bcc.n	8007d7c <_malloc_r+0x14>
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f000 fa2a 	bl	80081e4 <__malloc_lock>
 8007d90:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8007d94:	4fc0      	ldr	r7, [pc, #768]	; (8008098 <_malloc_r+0x330>)
 8007d96:	d238      	bcs.n	8007e0a <_malloc_r+0xa2>
 8007d98:	f105 0208 	add.w	r2, r5, #8
 8007d9c:	443a      	add	r2, r7
 8007d9e:	f1a2 0108 	sub.w	r1, r2, #8
 8007da2:	6854      	ldr	r4, [r2, #4]
 8007da4:	428c      	cmp	r4, r1
 8007da6:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8007daa:	d102      	bne.n	8007db2 <_malloc_r+0x4a>
 8007dac:	68d4      	ldr	r4, [r2, #12]
 8007dae:	42a2      	cmp	r2, r4
 8007db0:	d010      	beq.n	8007dd4 <_malloc_r+0x6c>
 8007db2:	6863      	ldr	r3, [r4, #4]
 8007db4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007db8:	f023 0303 	bic.w	r3, r3, #3
 8007dbc:	60ca      	str	r2, [r1, #12]
 8007dbe:	4423      	add	r3, r4
 8007dc0:	6091      	str	r1, [r2, #8]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	f042 0201 	orr.w	r2, r2, #1
 8007dc8:	605a      	str	r2, [r3, #4]
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f000 fa10 	bl	80081f0 <__malloc_unlock>
 8007dd0:	3408      	adds	r4, #8
 8007dd2:	e180      	b.n	80080d6 <_malloc_r+0x36e>
 8007dd4:	3302      	adds	r3, #2
 8007dd6:	4ab1      	ldr	r2, [pc, #708]	; (800809c <_malloc_r+0x334>)
 8007dd8:	693c      	ldr	r4, [r7, #16]
 8007dda:	4294      	cmp	r4, r2
 8007ddc:	4611      	mov	r1, r2
 8007dde:	d075      	beq.n	8007ecc <_malloc_r+0x164>
 8007de0:	6860      	ldr	r0, [r4, #4]
 8007de2:	f020 0c03 	bic.w	ip, r0, #3
 8007de6:	ebac 0005 	sub.w	r0, ip, r5
 8007dea:	280f      	cmp	r0, #15
 8007dec:	dd48      	ble.n	8007e80 <_malloc_r+0x118>
 8007dee:	1963      	adds	r3, r4, r5
 8007df0:	f045 0501 	orr.w	r5, r5, #1
 8007df4:	6065      	str	r5, [r4, #4]
 8007df6:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8007dfa:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8007dfe:	f040 0201 	orr.w	r2, r0, #1
 8007e02:	605a      	str	r2, [r3, #4]
 8007e04:	f844 000c 	str.w	r0, [r4, ip]
 8007e08:	e7df      	b.n	8007dca <_malloc_r+0x62>
 8007e0a:	0a6b      	lsrs	r3, r5, #9
 8007e0c:	d02a      	beq.n	8007e64 <_malloc_r+0xfc>
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d812      	bhi.n	8007e38 <_malloc_r+0xd0>
 8007e12:	09ab      	lsrs	r3, r5, #6
 8007e14:	3338      	adds	r3, #56	; 0x38
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8007e1c:	f1a2 0c08 	sub.w	ip, r2, #8
 8007e20:	6854      	ldr	r4, [r2, #4]
 8007e22:	4564      	cmp	r4, ip
 8007e24:	d006      	beq.n	8007e34 <_malloc_r+0xcc>
 8007e26:	6862      	ldr	r2, [r4, #4]
 8007e28:	f022 0203 	bic.w	r2, r2, #3
 8007e2c:	1b50      	subs	r0, r2, r5
 8007e2e:	280f      	cmp	r0, #15
 8007e30:	dd1c      	ble.n	8007e6c <_malloc_r+0x104>
 8007e32:	3b01      	subs	r3, #1
 8007e34:	3301      	adds	r3, #1
 8007e36:	e7ce      	b.n	8007dd6 <_malloc_r+0x6e>
 8007e38:	2b14      	cmp	r3, #20
 8007e3a:	d801      	bhi.n	8007e40 <_malloc_r+0xd8>
 8007e3c:	335b      	adds	r3, #91	; 0x5b
 8007e3e:	e7ea      	b.n	8007e16 <_malloc_r+0xae>
 8007e40:	2b54      	cmp	r3, #84	; 0x54
 8007e42:	d802      	bhi.n	8007e4a <_malloc_r+0xe2>
 8007e44:	0b2b      	lsrs	r3, r5, #12
 8007e46:	336e      	adds	r3, #110	; 0x6e
 8007e48:	e7e5      	b.n	8007e16 <_malloc_r+0xae>
 8007e4a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007e4e:	d802      	bhi.n	8007e56 <_malloc_r+0xee>
 8007e50:	0beb      	lsrs	r3, r5, #15
 8007e52:	3377      	adds	r3, #119	; 0x77
 8007e54:	e7df      	b.n	8007e16 <_malloc_r+0xae>
 8007e56:	f240 5254 	movw	r2, #1364	; 0x554
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d804      	bhi.n	8007e68 <_malloc_r+0x100>
 8007e5e:	0cab      	lsrs	r3, r5, #18
 8007e60:	337c      	adds	r3, #124	; 0x7c
 8007e62:	e7d8      	b.n	8007e16 <_malloc_r+0xae>
 8007e64:	233f      	movs	r3, #63	; 0x3f
 8007e66:	e7d6      	b.n	8007e16 <_malloc_r+0xae>
 8007e68:	237e      	movs	r3, #126	; 0x7e
 8007e6a:	e7d4      	b.n	8007e16 <_malloc_r+0xae>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	68e1      	ldr	r1, [r4, #12]
 8007e70:	db04      	blt.n	8007e7c <_malloc_r+0x114>
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	60d9      	str	r1, [r3, #12]
 8007e76:	608b      	str	r3, [r1, #8]
 8007e78:	18a3      	adds	r3, r4, r2
 8007e7a:	e7a2      	b.n	8007dc2 <_malloc_r+0x5a>
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	e7d0      	b.n	8007e22 <_malloc_r+0xba>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8007e86:	db07      	blt.n	8007e98 <_malloc_r+0x130>
 8007e88:	44a4      	add	ip, r4
 8007e8a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	f8cc 3004 	str.w	r3, [ip, #4]
 8007e96:	e798      	b.n	8007dca <_malloc_r+0x62>
 8007e98:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f080 8099 	bcs.w	8007fd4 <_malloc_r+0x26c>
 8007ea2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007ea6:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f10c 0c01 	add.w	ip, ip, #1
 8007eb0:	fa02 f20e 	lsl.w	r2, r2, lr
 8007eb4:	4310      	orrs	r0, r2
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8007ebc:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8007ec0:	3a08      	subs	r2, #8
 8007ec2:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8007ec6:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8007eca:	60c4      	str	r4, [r0, #12]
 8007ecc:	2001      	movs	r0, #1
 8007ece:	109a      	asrs	r2, r3, #2
 8007ed0:	fa00 f202 	lsl.w	r2, r0, r2
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	4290      	cmp	r0, r2
 8007ed8:	d326      	bcc.n	8007f28 <_malloc_r+0x1c0>
 8007eda:	4210      	tst	r0, r2
 8007edc:	d106      	bne.n	8007eec <_malloc_r+0x184>
 8007ede:	f023 0303 	bic.w	r3, r3, #3
 8007ee2:	0052      	lsls	r2, r2, #1
 8007ee4:	4210      	tst	r0, r2
 8007ee6:	f103 0304 	add.w	r3, r3, #4
 8007eea:	d0fa      	beq.n	8007ee2 <_malloc_r+0x17a>
 8007eec:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8007ef0:	46e1      	mov	r9, ip
 8007ef2:	4698      	mov	r8, r3
 8007ef4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007ef8:	454c      	cmp	r4, r9
 8007efa:	f040 80af 	bne.w	800805c <_malloc_r+0x2f4>
 8007efe:	f108 0801 	add.w	r8, r8, #1
 8007f02:	f018 0f03 	tst.w	r8, #3
 8007f06:	f109 0908 	add.w	r9, r9, #8
 8007f0a:	d1f3      	bne.n	8007ef4 <_malloc_r+0x18c>
 8007f0c:	0798      	lsls	r0, r3, #30
 8007f0e:	f040 80e8 	bne.w	80080e2 <_malloc_r+0x37a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	ea23 0302 	bic.w	r3, r3, r2
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	0052      	lsls	r2, r2, #1
 8007f1e:	4290      	cmp	r0, r2
 8007f20:	d302      	bcc.n	8007f28 <_malloc_r+0x1c0>
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	f040 80ec 	bne.w	8008100 <_malloc_r+0x398>
 8007f28:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8007f2c:	f8da 4004 	ldr.w	r4, [sl, #4]
 8007f30:	f024 0203 	bic.w	r2, r4, #3
 8007f34:	42aa      	cmp	r2, r5
 8007f36:	d303      	bcc.n	8007f40 <_malloc_r+0x1d8>
 8007f38:	1b53      	subs	r3, r2, r5
 8007f3a:	2b0f      	cmp	r3, #15
 8007f3c:	f300 8140 	bgt.w	80081c0 <_malloc_r+0x458>
 8007f40:	4b57      	ldr	r3, [pc, #348]	; (80080a0 <_malloc_r+0x338>)
 8007f42:	9200      	str	r2, [sp, #0]
 8007f44:	2008      	movs	r0, #8
 8007f46:	681c      	ldr	r4, [r3, #0]
 8007f48:	f001 fb6a 	bl	8009620 <sysconf>
 8007f4c:	4b55      	ldr	r3, [pc, #340]	; (80080a4 <_malloc_r+0x33c>)
 8007f4e:	9a00      	ldr	r2, [sp, #0]
 8007f50:	6819      	ldr	r1, [r3, #0]
 8007f52:	3410      	adds	r4, #16
 8007f54:	3101      	adds	r1, #1
 8007f56:	442c      	add	r4, r5
 8007f58:	bf1f      	itttt	ne
 8007f5a:	f104 34ff 	addne.w	r4, r4, #4294967295
 8007f5e:	1824      	addne	r4, r4, r0
 8007f60:	4241      	negne	r1, r0
 8007f62:	400c      	andne	r4, r1
 8007f64:	4680      	mov	r8, r0
 8007f66:	4621      	mov	r1, r4
 8007f68:	4630      	mov	r0, r6
 8007f6a:	e9cd 2300 	strd	r2, r3, [sp]
 8007f6e:	f000 f945 	bl	80081fc <_sbrk_r>
 8007f72:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f76:	4683      	mov	fp, r0
 8007f78:	f000 80fb 	beq.w	8008172 <_malloc_r+0x40a>
 8007f7c:	9a00      	ldr	r2, [sp, #0]
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	eb0a 0102 	add.w	r1, sl, r2
 8007f84:	4281      	cmp	r1, r0
 8007f86:	d902      	bls.n	8007f8e <_malloc_r+0x226>
 8007f88:	45ba      	cmp	sl, r7
 8007f8a:	f040 80f2 	bne.w	8008172 <_malloc_r+0x40a>
 8007f8e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80080b0 <_malloc_r+0x348>
 8007f92:	f8d9 0000 	ldr.w	r0, [r9]
 8007f96:	4559      	cmp	r1, fp
 8007f98:	eb00 0e04 	add.w	lr, r0, r4
 8007f9c:	f8c9 e000 	str.w	lr, [r9]
 8007fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8007fa4:	f040 80ae 	bne.w	8008104 <_malloc_r+0x39c>
 8007fa8:	ea11 0f0c 	tst.w	r1, ip
 8007fac:	f040 80aa 	bne.w	8008104 <_malloc_r+0x39c>
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4414      	add	r4, r2
 8007fb4:	f044 0401 	orr.w	r4, r4, #1
 8007fb8:	605c      	str	r4, [r3, #4]
 8007fba:	4a3b      	ldr	r2, [pc, #236]	; (80080a8 <_malloc_r+0x340>)
 8007fbc:	f8d9 3000 	ldr.w	r3, [r9]
 8007fc0:	6811      	ldr	r1, [r2, #0]
 8007fc2:	428b      	cmp	r3, r1
 8007fc4:	bf88      	it	hi
 8007fc6:	6013      	strhi	r3, [r2, #0]
 8007fc8:	4a38      	ldr	r2, [pc, #224]	; (80080ac <_malloc_r+0x344>)
 8007fca:	6811      	ldr	r1, [r2, #0]
 8007fcc:	428b      	cmp	r3, r1
 8007fce:	bf88      	it	hi
 8007fd0:	6013      	strhi	r3, [r2, #0]
 8007fd2:	e0ce      	b.n	8008172 <_malloc_r+0x40a>
 8007fd4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8007fd8:	2a04      	cmp	r2, #4
 8007fda:	d818      	bhi.n	800800e <_malloc_r+0x2a6>
 8007fdc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8007fe0:	3238      	adds	r2, #56	; 0x38
 8007fe2:	f102 0e01 	add.w	lr, r2, #1
 8007fe6:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8007fea:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8007fee:	45f0      	cmp	r8, lr
 8007ff0:	d12b      	bne.n	800804a <_malloc_r+0x2e2>
 8007ff2:	1092      	asrs	r2, r2, #2
 8007ff4:	f04f 0c01 	mov.w	ip, #1
 8007ff8:	fa0c f202 	lsl.w	r2, ip, r2
 8007ffc:	4310      	orrs	r0, r2
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8008004:	f8c8 4008 	str.w	r4, [r8, #8]
 8008008:	f8ce 400c 	str.w	r4, [lr, #12]
 800800c:	e75e      	b.n	8007ecc <_malloc_r+0x164>
 800800e:	2a14      	cmp	r2, #20
 8008010:	d801      	bhi.n	8008016 <_malloc_r+0x2ae>
 8008012:	325b      	adds	r2, #91	; 0x5b
 8008014:	e7e5      	b.n	8007fe2 <_malloc_r+0x27a>
 8008016:	2a54      	cmp	r2, #84	; 0x54
 8008018:	d803      	bhi.n	8008022 <_malloc_r+0x2ba>
 800801a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800801e:	326e      	adds	r2, #110	; 0x6e
 8008020:	e7df      	b.n	8007fe2 <_malloc_r+0x27a>
 8008022:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008026:	d803      	bhi.n	8008030 <_malloc_r+0x2c8>
 8008028:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800802c:	3277      	adds	r2, #119	; 0x77
 800802e:	e7d8      	b.n	8007fe2 <_malloc_r+0x27a>
 8008030:	f240 5e54 	movw	lr, #1364	; 0x554
 8008034:	4572      	cmp	r2, lr
 8008036:	bf9a      	itte	ls
 8008038:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800803c:	327c      	addls	r2, #124	; 0x7c
 800803e:	227e      	movhi	r2, #126	; 0x7e
 8008040:	e7cf      	b.n	8007fe2 <_malloc_r+0x27a>
 8008042:	f8de e008 	ldr.w	lr, [lr, #8]
 8008046:	45f0      	cmp	r8, lr
 8008048:	d005      	beq.n	8008056 <_malloc_r+0x2ee>
 800804a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800804e:	f022 0203 	bic.w	r2, r2, #3
 8008052:	4562      	cmp	r2, ip
 8008054:	d8f5      	bhi.n	8008042 <_malloc_r+0x2da>
 8008056:	f8de 800c 	ldr.w	r8, [lr, #12]
 800805a:	e7d1      	b.n	8008000 <_malloc_r+0x298>
 800805c:	6860      	ldr	r0, [r4, #4]
 800805e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8008062:	f020 0003 	bic.w	r0, r0, #3
 8008066:	eba0 0a05 	sub.w	sl, r0, r5
 800806a:	f1ba 0f0f 	cmp.w	sl, #15
 800806e:	dd21      	ble.n	80080b4 <_malloc_r+0x34c>
 8008070:	68a2      	ldr	r2, [r4, #8]
 8008072:	1963      	adds	r3, r4, r5
 8008074:	f045 0501 	orr.w	r5, r5, #1
 8008078:	6065      	str	r5, [r4, #4]
 800807a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800807e:	f8ce 2008 	str.w	r2, [lr, #8]
 8008082:	f04a 0201 	orr.w	r2, sl, #1
 8008086:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800808a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800808e:	605a      	str	r2, [r3, #4]
 8008090:	f844 a000 	str.w	sl, [r4, r0]
 8008094:	e699      	b.n	8007dca <_malloc_r+0x62>
 8008096:	bf00      	nop
 8008098:	24000440 	.word	0x24000440
 800809c:	24000448 	.word	0x24000448
 80080a0:	24009a48 	.word	0x24009a48
 80080a4:	24000848 	.word	0x24000848
 80080a8:	24009a40 	.word	0x24009a40
 80080ac:	24009a44 	.word	0x24009a44
 80080b0:	24009a18 	.word	0x24009a18
 80080b4:	f1ba 0f00 	cmp.w	sl, #0
 80080b8:	db11      	blt.n	80080de <_malloc_r+0x376>
 80080ba:	4420      	add	r0, r4
 80080bc:	6843      	ldr	r3, [r0, #4]
 80080be:	f043 0301 	orr.w	r3, r3, #1
 80080c2:	6043      	str	r3, [r0, #4]
 80080c4:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80080c8:	4630      	mov	r0, r6
 80080ca:	f8c3 e00c 	str.w	lr, [r3, #12]
 80080ce:	f8ce 3008 	str.w	r3, [lr, #8]
 80080d2:	f000 f88d 	bl	80081f0 <__malloc_unlock>
 80080d6:	4620      	mov	r0, r4
 80080d8:	b003      	add	sp, #12
 80080da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080de:	4674      	mov	r4, lr
 80080e0:	e70a      	b.n	8007ef8 <_malloc_r+0x190>
 80080e2:	f1ac 0008 	sub.w	r0, ip, #8
 80080e6:	f8dc c000 	ldr.w	ip, [ip]
 80080ea:	4584      	cmp	ip, r0
 80080ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80080f0:	f43f af0c 	beq.w	8007f0c <_malloc_r+0x1a4>
 80080f4:	e711      	b.n	8007f1a <_malloc_r+0x1b2>
 80080f6:	3304      	adds	r3, #4
 80080f8:	0052      	lsls	r2, r2, #1
 80080fa:	4210      	tst	r0, r2
 80080fc:	d0fb      	beq.n	80080f6 <_malloc_r+0x38e>
 80080fe:	e6f5      	b.n	8007eec <_malloc_r+0x184>
 8008100:	4643      	mov	r3, r8
 8008102:	e7fa      	b.n	80080fa <_malloc_r+0x392>
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	9200      	str	r2, [sp, #0]
 8008108:	3001      	adds	r0, #1
 800810a:	bf1b      	ittet	ne
 800810c:	ebab 0101 	subne.w	r1, fp, r1
 8008110:	4471      	addne	r1, lr
 8008112:	f8c3 b000 	streq.w	fp, [r3]
 8008116:	f8c9 1000 	strne.w	r1, [r9]
 800811a:	f01b 0307 	ands.w	r3, fp, #7
 800811e:	bf1c      	itt	ne
 8008120:	f1c3 0308 	rsbne	r3, r3, #8
 8008124:	449b      	addne	fp, r3
 8008126:	445c      	add	r4, fp
 8008128:	4498      	add	r8, r3
 800812a:	ea04 030c 	and.w	r3, r4, ip
 800812e:	eba8 0803 	sub.w	r8, r8, r3
 8008132:	4641      	mov	r1, r8
 8008134:	4630      	mov	r0, r6
 8008136:	f000 f861 	bl	80081fc <_sbrk_r>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	bf04      	itt	eq
 800813e:	4658      	moveq	r0, fp
 8008140:	f04f 0800 	moveq.w	r8, #0
 8008144:	f8d9 3000 	ldr.w	r3, [r9]
 8008148:	f8c7 b008 	str.w	fp, [r7, #8]
 800814c:	eba0 000b 	sub.w	r0, r0, fp
 8008150:	4440      	add	r0, r8
 8008152:	4443      	add	r3, r8
 8008154:	f040 0001 	orr.w	r0, r0, #1
 8008158:	45ba      	cmp	sl, r7
 800815a:	9a00      	ldr	r2, [sp, #0]
 800815c:	f8c9 3000 	str.w	r3, [r9]
 8008160:	f8cb 0004 	str.w	r0, [fp, #4]
 8008164:	f43f af29 	beq.w	8007fba <_malloc_r+0x252>
 8008168:	2a0f      	cmp	r2, #15
 800816a:	d810      	bhi.n	800818e <_malloc_r+0x426>
 800816c:	2301      	movs	r3, #1
 800816e:	f8cb 3004 	str.w	r3, [fp, #4]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	f022 0203 	bic.w	r2, r2, #3
 800817a:	42aa      	cmp	r2, r5
 800817c:	eba2 0305 	sub.w	r3, r2, r5
 8008180:	d301      	bcc.n	8008186 <_malloc_r+0x41e>
 8008182:	2b0f      	cmp	r3, #15
 8008184:	dc1c      	bgt.n	80081c0 <_malloc_r+0x458>
 8008186:	4630      	mov	r0, r6
 8008188:	f000 f832 	bl	80081f0 <__malloc_unlock>
 800818c:	e5f8      	b.n	8007d80 <_malloc_r+0x18>
 800818e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008192:	f1a2 040c 	sub.w	r4, r2, #12
 8008196:	f024 0407 	bic.w	r4, r4, #7
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	4323      	orrs	r3, r4
 80081a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80081a4:	2205      	movs	r2, #5
 80081a6:	eb0a 0304 	add.w	r3, sl, r4
 80081aa:	2c0f      	cmp	r4, #15
 80081ac:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80081b0:	f67f af03 	bls.w	8007fba <_malloc_r+0x252>
 80081b4:	f10a 0108 	add.w	r1, sl, #8
 80081b8:	4630      	mov	r0, r6
 80081ba:	f002 f87d 	bl	800a2b8 <_free_r>
 80081be:	e6fc      	b.n	8007fba <_malloc_r+0x252>
 80081c0:	68bc      	ldr	r4, [r7, #8]
 80081c2:	f045 0201 	orr.w	r2, r5, #1
 80081c6:	4425      	add	r5, r4
 80081c8:	f043 0301 	orr.w	r3, r3, #1
 80081cc:	6062      	str	r2, [r4, #4]
 80081ce:	60bd      	str	r5, [r7, #8]
 80081d0:	606b      	str	r3, [r5, #4]
 80081d2:	e5fa      	b.n	8007dca <_malloc_r+0x62>

080081d4 <memset>:
 80081d4:	4402      	add	r2, r0
 80081d6:	4603      	mov	r3, r0
 80081d8:	4293      	cmp	r3, r2
 80081da:	d100      	bne.n	80081de <memset+0xa>
 80081dc:	4770      	bx	lr
 80081de:	f803 1b01 	strb.w	r1, [r3], #1
 80081e2:	e7f9      	b.n	80081d8 <memset+0x4>

080081e4 <__malloc_lock>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__malloc_lock+0x8>)
 80081e6:	f002 b931 	b.w	800a44c <__retarget_lock_acquire_recursive>
 80081ea:	bf00      	nop
 80081ec:	24009b2c 	.word	0x24009b2c

080081f0 <__malloc_unlock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__malloc_unlock+0x8>)
 80081f2:	f002 b92c 	b.w	800a44e <__retarget_lock_release_recursive>
 80081f6:	bf00      	nop
 80081f8:	24009b2c 	.word	0x24009b2c

080081fc <_sbrk_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4c06      	ldr	r4, [pc, #24]	; (8008218 <_sbrk_r+0x1c>)
 8008200:	2300      	movs	r3, #0
 8008202:	4605      	mov	r5, r0
 8008204:	4608      	mov	r0, r1
 8008206:	6023      	str	r3, [r4, #0]
 8008208:	f7f9 fe2e 	bl	8001e68 <_sbrk>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_sbrk_r+0x1a>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	b103      	cbz	r3, 8008216 <_sbrk_r+0x1a>
 8008214:	602b      	str	r3, [r5, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	24009b34 	.word	0x24009b34

0800821c <sprintf>:
 800821c:	b40e      	push	{r1, r2, r3}
 800821e:	b500      	push	{lr}
 8008220:	b09c      	sub	sp, #112	; 0x70
 8008222:	ab1d      	add	r3, sp, #116	; 0x74
 8008224:	9002      	str	r0, [sp, #8]
 8008226:	9006      	str	r0, [sp, #24]
 8008228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800822c:	4809      	ldr	r0, [pc, #36]	; (8008254 <sprintf+0x38>)
 800822e:	9107      	str	r1, [sp, #28]
 8008230:	9104      	str	r1, [sp, #16]
 8008232:	4909      	ldr	r1, [pc, #36]	; (8008258 <sprintf+0x3c>)
 8008234:	f853 2b04 	ldr.w	r2, [r3], #4
 8008238:	9105      	str	r1, [sp, #20]
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	a902      	add	r1, sp, #8
 8008240:	f000 f80e 	bl	8008260 <_svfprintf_r>
 8008244:	9b02      	ldr	r3, [sp, #8]
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]
 800824a:	b01c      	add	sp, #112	; 0x70
 800824c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008250:	b003      	add	sp, #12
 8008252:	4770      	bx	lr
 8008254:	24000010 	.word	0x24000010
 8008258:	ffff0208 	.word	0xffff0208
 800825c:	00000000 	.word	0x00000000

08008260 <_svfprintf_r>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	ed2d 8b04 	vpush	{d8-d9}
 8008268:	b0cb      	sub	sp, #300	; 0x12c
 800826a:	468b      	mov	fp, r1
 800826c:	4691      	mov	r9, r2
 800826e:	461e      	mov	r6, r3
 8008270:	9002      	str	r0, [sp, #8]
 8008272:	f002 f8dd 	bl	800a430 <_localeconv_r>
 8008276:	6803      	ldr	r3, [r0, #0]
 8008278:	930f      	str	r3, [sp, #60]	; 0x3c
 800827a:	4618      	mov	r0, r3
 800827c:	f7f8 f880 	bl	8000380 <strlen>
 8008280:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008284:	9009      	str	r0, [sp, #36]	; 0x24
 8008286:	0618      	lsls	r0, r3, #24
 8008288:	d51a      	bpl.n	80082c0 <_svfprintf_r+0x60>
 800828a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800828e:	b9bb      	cbnz	r3, 80082c0 <_svfprintf_r+0x60>
 8008290:	2140      	movs	r1, #64	; 0x40
 8008292:	9802      	ldr	r0, [sp, #8]
 8008294:	f7ff fd68 	bl	8007d68 <_malloc_r>
 8008298:	f8cb 0000 	str.w	r0, [fp]
 800829c:	f8cb 0010 	str.w	r0, [fp, #16]
 80082a0:	b958      	cbnz	r0, 80082ba <_svfprintf_r+0x5a>
 80082a2:	9a02      	ldr	r2, [sp, #8]
 80082a4:	230c      	movs	r3, #12
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ac:	930a      	str	r3, [sp, #40]	; 0x28
 80082ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082b0:	b04b      	add	sp, #300	; 0x12c
 80082b2:	ecbd 8b04 	vpop	{d8-d9}
 80082b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ba:	2340      	movs	r3, #64	; 0x40
 80082bc:	f8cb 3014 	str.w	r3, [fp, #20]
 80082c0:	2300      	movs	r3, #0
 80082c2:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 80082c6:	ed9f 8bc6 	vldr	d8, [pc, #792]	; 80085e0 <_svfprintf_r+0x380>
 80082ca:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80082ce:	ac21      	add	r4, sp, #132	; 0x84
 80082d0:	941e      	str	r4, [sp, #120]	; 0x78
 80082d2:	9303      	str	r3, [sp, #12]
 80082d4:	9307      	str	r3, [sp, #28]
 80082d6:	930e      	str	r3, [sp, #56]	; 0x38
 80082d8:	9312      	str	r3, [sp, #72]	; 0x48
 80082da:	930a      	str	r3, [sp, #40]	; 0x28
 80082dc:	464d      	mov	r5, r9
 80082de:	462b      	mov	r3, r5
 80082e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e4:	b112      	cbz	r2, 80082ec <_svfprintf_r+0x8c>
 80082e6:	2a25      	cmp	r2, #37	; 0x25
 80082e8:	f040 80e4 	bne.w	80084b4 <_svfprintf_r+0x254>
 80082ec:	ebb5 0709 	subs.w	r7, r5, r9
 80082f0:	d00e      	beq.n	8008310 <_svfprintf_r+0xb0>
 80082f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80082f4:	443b      	add	r3, r7
 80082f6:	9320      	str	r3, [sp, #128]	; 0x80
 80082f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082fa:	3301      	adds	r3, #1
 80082fc:	2b07      	cmp	r3, #7
 80082fe:	e9c4 9700 	strd	r9, r7, [r4]
 8008302:	931f      	str	r3, [sp, #124]	; 0x7c
 8008304:	f300 80d8 	bgt.w	80084b8 <_svfprintf_r+0x258>
 8008308:	3408      	adds	r4, #8
 800830a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830c:	443b      	add	r3, r7
 800830e:	930a      	str	r3, [sp, #40]	; 0x28
 8008310:	782b      	ldrb	r3, [r5, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f001 8174 	beq.w	8009600 <_svfprintf_r+0x13a0>
 8008318:	1c6b      	adds	r3, r5, #1
 800831a:	9308      	str	r3, [sp, #32]
 800831c:	2300      	movs	r3, #0
 800831e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8008322:	f04f 38ff 	mov.w	r8, #4294967295
 8008326:	930b      	str	r3, [sp, #44]	; 0x2c
 8008328:	461d      	mov	r5, r3
 800832a:	9b08      	ldr	r3, [sp, #32]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	9b08      	ldr	r3, [sp, #32]
 8008332:	3301      	adds	r3, #1
 8008334:	9308      	str	r3, [sp, #32]
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	3b20      	subs	r3, #32
 800833a:	2b5a      	cmp	r3, #90	; 0x5a
 800833c:	f200 85e5 	bhi.w	8008f0a <_svfprintf_r+0xcaa>
 8008340:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <_svfprintf_r+0xe8>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	08008547 	.word	0x08008547
 800834c:	08008f0b 	.word	0x08008f0b
 8008350:	08008f0b 	.word	0x08008f0b
 8008354:	08008559 	.word	0x08008559
 8008358:	08008f0b 	.word	0x08008f0b
 800835c:	08008f0b 	.word	0x08008f0b
 8008360:	08008f0b 	.word	0x08008f0b
 8008364:	0800850d 	.word	0x0800850d
 8008368:	08008f0b 	.word	0x08008f0b
 800836c:	08008f0b 	.word	0x08008f0b
 8008370:	0800855f 	.word	0x0800855f
 8008374:	08008577 	.word	0x08008577
 8008378:	08008f0b 	.word	0x08008f0b
 800837c:	08008571 	.word	0x08008571
 8008380:	0800857b 	.word	0x0800857b
 8008384:	08008f0b 	.word	0x08008f0b
 8008388:	080085b3 	.word	0x080085b3
 800838c:	080085b9 	.word	0x080085b9
 8008390:	080085b9 	.word	0x080085b9
 8008394:	080085b9 	.word	0x080085b9
 8008398:	080085b9 	.word	0x080085b9
 800839c:	080085b9 	.word	0x080085b9
 80083a0:	080085b9 	.word	0x080085b9
 80083a4:	080085b9 	.word	0x080085b9
 80083a8:	080085b9 	.word	0x080085b9
 80083ac:	080085b9 	.word	0x080085b9
 80083b0:	08008f0b 	.word	0x08008f0b
 80083b4:	08008f0b 	.word	0x08008f0b
 80083b8:	08008f0b 	.word	0x08008f0b
 80083bc:	08008f0b 	.word	0x08008f0b
 80083c0:	08008f0b 	.word	0x08008f0b
 80083c4:	08008f0b 	.word	0x08008f0b
 80083c8:	08008f0b 	.word	0x08008f0b
 80083cc:	080086b3 	.word	0x080086b3
 80083d0:	08008f0b 	.word	0x08008f0b
 80083d4:	08008621 	.word	0x08008621
 80083d8:	08008645 	.word	0x08008645
 80083dc:	080086b3 	.word	0x080086b3
 80083e0:	080086b3 	.word	0x080086b3
 80083e4:	080086b3 	.word	0x080086b3
 80083e8:	08008f0b 	.word	0x08008f0b
 80083ec:	08008f0b 	.word	0x08008f0b
 80083f0:	08008f0b 	.word	0x08008f0b
 80083f4:	08008f0b 	.word	0x08008f0b
 80083f8:	080085db 	.word	0x080085db
 80083fc:	08008f0b 	.word	0x08008f0b
 8008400:	08008f0b 	.word	0x08008f0b
 8008404:	08008b27 	.word	0x08008b27
 8008408:	08008f0b 	.word	0x08008f0b
 800840c:	08008f0b 	.word	0x08008f0b
 8008410:	08008f0b 	.word	0x08008f0b
 8008414:	08008baf 	.word	0x08008baf
 8008418:	08008f0b 	.word	0x08008f0b
 800841c:	08008d87 	.word	0x08008d87
 8008420:	08008f0b 	.word	0x08008f0b
 8008424:	08008f0b 	.word	0x08008f0b
 8008428:	080084d1 	.word	0x080084d1
 800842c:	08008f0b 	.word	0x08008f0b
 8008430:	08008f0b 	.word	0x08008f0b
 8008434:	08008f0b 	.word	0x08008f0b
 8008438:	08008f0b 	.word	0x08008f0b
 800843c:	08008f0b 	.word	0x08008f0b
 8008440:	08008f0b 	.word	0x08008f0b
 8008444:	08008f0b 	.word	0x08008f0b
 8008448:	08008f0b 	.word	0x08008f0b
 800844c:	080086b3 	.word	0x080086b3
 8008450:	08008f0b 	.word	0x08008f0b
 8008454:	08008621 	.word	0x08008621
 8008458:	08008649 	.word	0x08008649
 800845c:	080086b3 	.word	0x080086b3
 8008460:	080086b3 	.word	0x080086b3
 8008464:	080086b3 	.word	0x080086b3
 8008468:	080085ed 	.word	0x080085ed
 800846c:	08008649 	.word	0x08008649
 8008470:	08008615 	.word	0x08008615
 8008474:	08008f0b 	.word	0x08008f0b
 8008478:	08008607 	.word	0x08008607
 800847c:	08008f0b 	.word	0x08008f0b
 8008480:	08008ae9 	.word	0x08008ae9
 8008484:	08008b2b 	.word	0x08008b2b
 8008488:	08008b8f 	.word	0x08008b8f
 800848c:	08008615 	.word	0x08008615
 8008490:	08008f0b 	.word	0x08008f0b
 8008494:	08008baf 	.word	0x08008baf
 8008498:	0800832b 	.word	0x0800832b
 800849c:	08008d8b 	.word	0x08008d8b
 80084a0:	08008f0b 	.word	0x08008f0b
 80084a4:	08008f0b 	.word	0x08008f0b
 80084a8:	08008dc1 	.word	0x08008dc1
 80084ac:	08008f0b 	.word	0x08008f0b
 80084b0:	0800832b 	.word	0x0800832b
 80084b4:	461d      	mov	r5, r3
 80084b6:	e712      	b.n	80082de <_svfprintf_r+0x7e>
 80084b8:	aa1e      	add	r2, sp, #120	; 0x78
 80084ba:	4659      	mov	r1, fp
 80084bc:	9802      	ldr	r0, [sp, #8]
 80084be:	f002 fad2 	bl	800aa66 <__ssprint_r>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	f040 8150 	bne.w	8008768 <_svfprintf_r+0x508>
 80084c8:	ac21      	add	r4, sp, #132	; 0x84
 80084ca:	e71e      	b.n	800830a <_svfprintf_r+0xaa>
 80084cc:	461e      	mov	r6, r3
 80084ce:	e72c      	b.n	800832a <_svfprintf_r+0xca>
 80084d0:	4b45      	ldr	r3, [pc, #276]	; (80085e8 <_svfprintf_r+0x388>)
 80084d2:	9311      	str	r3, [sp, #68]	; 0x44
 80084d4:	06af      	lsls	r7, r5, #26
 80084d6:	f140 8476 	bpl.w	8008dc6 <_svfprintf_r+0xb66>
 80084da:	3607      	adds	r6, #7
 80084dc:	f026 0607 	bic.w	r6, r6, #7
 80084e0:	f106 0308 	add.w	r3, r6, #8
 80084e4:	e9d6 6700 	ldrd	r6, r7, [r6]
 80084e8:	9306      	str	r3, [sp, #24]
 80084ea:	07eb      	lsls	r3, r5, #31
 80084ec:	d50a      	bpl.n	8008504 <_svfprintf_r+0x2a4>
 80084ee:	ea56 0307 	orrs.w	r3, r6, r7
 80084f2:	d007      	beq.n	8008504 <_svfprintf_r+0x2a4>
 80084f4:	2330      	movs	r3, #48	; 0x30
 80084f6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80084fa:	9b04      	ldr	r3, [sp, #16]
 80084fc:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8008500:	f045 0502 	orr.w	r5, r5, #2
 8008504:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8008508:	2302      	movs	r3, #2
 800850a:	e31b      	b.n	8008b44 <_svfprintf_r+0x8e4>
 800850c:	9802      	ldr	r0, [sp, #8]
 800850e:	f001 ff8f 	bl	800a430 <_localeconv_r>
 8008512:	6843      	ldr	r3, [r0, #4]
 8008514:	9312      	str	r3, [sp, #72]	; 0x48
 8008516:	4618      	mov	r0, r3
 8008518:	f7f7 ff32 	bl	8000380 <strlen>
 800851c:	900e      	str	r0, [sp, #56]	; 0x38
 800851e:	9802      	ldr	r0, [sp, #8]
 8008520:	f001 ff86 	bl	800a430 <_localeconv_r>
 8008524:	6883      	ldr	r3, [r0, #8]
 8008526:	9307      	str	r3, [sp, #28]
 8008528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800852a:	2b00      	cmp	r3, #0
 800852c:	f43f aefd 	beq.w	800832a <_svfprintf_r+0xca>
 8008530:	9b07      	ldr	r3, [sp, #28]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f43f aef9 	beq.w	800832a <_svfprintf_r+0xca>
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f43f aef5 	beq.w	800832a <_svfprintf_r+0xca>
 8008540:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 8008544:	e6f1      	b.n	800832a <_svfprintf_r+0xca>
 8008546:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800854a:	2b00      	cmp	r3, #0
 800854c:	f47f aeed 	bne.w	800832a <_svfprintf_r+0xca>
 8008550:	2320      	movs	r3, #32
 8008552:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8008556:	e6e8      	b.n	800832a <_svfprintf_r+0xca>
 8008558:	f045 0501 	orr.w	r5, r5, #1
 800855c:	e6e5      	b.n	800832a <_svfprintf_r+0xca>
 800855e:	6832      	ldr	r2, [r6, #0]
 8008560:	920b      	str	r2, [sp, #44]	; 0x2c
 8008562:	2a00      	cmp	r2, #0
 8008564:	f106 0304 	add.w	r3, r6, #4
 8008568:	dab0      	bge.n	80084cc <_svfprintf_r+0x26c>
 800856a:	4252      	negs	r2, r2
 800856c:	920b      	str	r2, [sp, #44]	; 0x2c
 800856e:	461e      	mov	r6, r3
 8008570:	f045 0504 	orr.w	r5, r5, #4
 8008574:	e6d9      	b.n	800832a <_svfprintf_r+0xca>
 8008576:	232b      	movs	r3, #43	; 0x2b
 8008578:	e7eb      	b.n	8008552 <_svfprintf_r+0x2f2>
 800857a:	9a08      	ldr	r2, [sp, #32]
 800857c:	9b08      	ldr	r3, [sp, #32]
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	9204      	str	r2, [sp, #16]
 8008582:	2a2a      	cmp	r2, #42	; 0x2a
 8008584:	f103 0301 	add.w	r3, r3, #1
 8008588:	d110      	bne.n	80085ac <_svfprintf_r+0x34c>
 800858a:	6832      	ldr	r2, [r6, #0]
 800858c:	9308      	str	r3, [sp, #32]
 800858e:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8008592:	3604      	adds	r6, #4
 8008594:	e6c9      	b.n	800832a <_svfprintf_r+0xca>
 8008596:	210a      	movs	r1, #10
 8008598:	fb01 2808 	mla	r8, r1, r8, r2
 800859c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a0:	9204      	str	r2, [sp, #16]
 80085a2:	9a04      	ldr	r2, [sp, #16]
 80085a4:	3a30      	subs	r2, #48	; 0x30
 80085a6:	2a09      	cmp	r2, #9
 80085a8:	d9f5      	bls.n	8008596 <_svfprintf_r+0x336>
 80085aa:	e6c3      	b.n	8008334 <_svfprintf_r+0xd4>
 80085ac:	f04f 0800 	mov.w	r8, #0
 80085b0:	e7f7      	b.n	80085a2 <_svfprintf_r+0x342>
 80085b2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80085b6:	e6b8      	b.n	800832a <_svfprintf_r+0xca>
 80085b8:	2200      	movs	r2, #0
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80085be:	9a04      	ldr	r2, [sp, #16]
 80085c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085c2:	3a30      	subs	r2, #48	; 0x30
 80085c4:	200a      	movs	r0, #10
 80085c6:	fb00 2201 	mla	r2, r0, r1, r2
 80085ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80085cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d0:	9204      	str	r2, [sp, #16]
 80085d2:	3a30      	subs	r2, #48	; 0x30
 80085d4:	2a09      	cmp	r2, #9
 80085d6:	d9f2      	bls.n	80085be <_svfprintf_r+0x35e>
 80085d8:	e6ac      	b.n	8008334 <_svfprintf_r+0xd4>
 80085da:	f045 0508 	orr.w	r5, r5, #8
 80085de:	e6a4      	b.n	800832a <_svfprintf_r+0xca>
	...
 80085e8:	0800b1e1 	.word	0x0800b1e1
 80085ec:	9b08      	ldr	r3, [sp, #32]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b68      	cmp	r3, #104	; 0x68
 80085f2:	bf01      	itttt	eq
 80085f4:	9b08      	ldreq	r3, [sp, #32]
 80085f6:	3301      	addeq	r3, #1
 80085f8:	9308      	streq	r3, [sp, #32]
 80085fa:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 80085fe:	bf18      	it	ne
 8008600:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 8008604:	e691      	b.n	800832a <_svfprintf_r+0xca>
 8008606:	9b08      	ldr	r3, [sp, #32]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b6c      	cmp	r3, #108	; 0x6c
 800860c:	d105      	bne.n	800861a <_svfprintf_r+0x3ba>
 800860e:	9b08      	ldr	r3, [sp, #32]
 8008610:	3301      	adds	r3, #1
 8008612:	9308      	str	r3, [sp, #32]
 8008614:	f045 0520 	orr.w	r5, r5, #32
 8008618:	e687      	b.n	800832a <_svfprintf_r+0xca>
 800861a:	f045 0510 	orr.w	r5, r5, #16
 800861e:	e684      	b.n	800832a <_svfprintf_r+0xca>
 8008620:	1d33      	adds	r3, r6, #4
 8008622:	9306      	str	r3, [sp, #24]
 8008624:	6833      	ldr	r3, [r6, #0]
 8008626:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 800862a:	2300      	movs	r3, #0
 800862c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8008630:	469a      	mov	sl, r3
 8008632:	f04f 0801 	mov.w	r8, #1
 8008636:	930c      	str	r3, [sp, #48]	; 0x30
 8008638:	461f      	mov	r7, r3
 800863a:	9305      	str	r3, [sp, #20]
 800863c:	461e      	mov	r6, r3
 800863e:	f10d 09c4 	add.w	r9, sp, #196	; 0xc4
 8008642:	e2ce      	b.n	8008be2 <_svfprintf_r+0x982>
 8008644:	f045 0510 	orr.w	r5, r5, #16
 8008648:	06a9      	lsls	r1, r5, #26
 800864a:	d521      	bpl.n	8008690 <_svfprintf_r+0x430>
 800864c:	3607      	adds	r6, #7
 800864e:	f026 0607 	bic.w	r6, r6, #7
 8008652:	f106 0308 	add.w	r3, r6, #8
 8008656:	e9d6 6700 	ldrd	r6, r7, [r6]
 800865a:	9306      	str	r3, [sp, #24]
 800865c:	2e00      	cmp	r6, #0
 800865e:	f177 0300 	sbcs.w	r3, r7, #0
 8008662:	da06      	bge.n	8008672 <_svfprintf_r+0x412>
 8008664:	4276      	negs	r6, r6
 8008666:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800866a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800866e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8008672:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008676:	f040 83b6 	bne.w	8008de6 <_svfprintf_r+0xb86>
 800867a:	2f00      	cmp	r7, #0
 800867c:	bf08      	it	eq
 800867e:	2e0a      	cmpeq	r6, #10
 8008680:	f080 83e8 	bcs.w	8008e54 <_svfprintf_r+0xbf4>
 8008684:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8008688:	3630      	adds	r6, #48	; 0x30
 800868a:	f809 6d01 	strb.w	r6, [r9, #-1]!
 800868e:	e3cc      	b.n	8008e2a <_svfprintf_r+0xbca>
 8008690:	1d33      	adds	r3, r6, #4
 8008692:	06ea      	lsls	r2, r5, #27
 8008694:	9306      	str	r3, [sp, #24]
 8008696:	d502      	bpl.n	800869e <_svfprintf_r+0x43e>
 8008698:	6836      	ldr	r6, [r6, #0]
 800869a:	17f7      	asrs	r7, r6, #31
 800869c:	e7de      	b.n	800865c <_svfprintf_r+0x3fc>
 800869e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086a2:	6836      	ldr	r6, [r6, #0]
 80086a4:	d001      	beq.n	80086aa <_svfprintf_r+0x44a>
 80086a6:	b236      	sxth	r6, r6
 80086a8:	e7f7      	b.n	800869a <_svfprintf_r+0x43a>
 80086aa:	05ab      	lsls	r3, r5, #22
 80086ac:	bf48      	it	mi
 80086ae:	b276      	sxtbmi	r6, r6
 80086b0:	e7f3      	b.n	800869a <_svfprintf_r+0x43a>
 80086b2:	3607      	adds	r6, #7
 80086b4:	f026 0607 	bic.w	r6, r6, #7
 80086b8:	ed96 8b00 	vldr	d8, [r6]
 80086bc:	ed9f 7bb0 	vldr	d7, [pc, #704]	; 8008980 <_svfprintf_r+0x720>
 80086c0:	eeb0 6bc8 	vabs.f64	d6, d8
 80086c4:	f106 0308 	add.w	r3, r6, #8
 80086c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80086cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d0:	9306      	str	r3, [sp, #24]
 80086d2:	dd17      	ble.n	8008704 <_svfprintf_r+0x4a4>
 80086d4:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80086d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086dc:	d502      	bpl.n	80086e4 <_svfprintf_r+0x484>
 80086de:	232d      	movs	r3, #45	; 0x2d
 80086e0:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80086e4:	4aa8      	ldr	r2, [pc, #672]	; (8008988 <_svfprintf_r+0x728>)
 80086e6:	4ba9      	ldr	r3, [pc, #676]	; (800898c <_svfprintf_r+0x72c>)
 80086e8:	9904      	ldr	r1, [sp, #16]
 80086ea:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80086ee:	2947      	cmp	r1, #71	; 0x47
 80086f0:	bfcc      	ite	gt
 80086f2:	4691      	movgt	r9, r2
 80086f4:	4699      	movle	r9, r3
 80086f6:	f04f 0a00 	mov.w	sl, #0
 80086fa:	f04f 0803 	mov.w	r8, #3
 80086fe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008702:	e399      	b.n	8008e38 <_svfprintf_r+0xbd8>
 8008704:	eeb4 8b48 	vcmp.f64	d8, d8
 8008708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870c:	d709      	bvc.n	8008722 <_svfprintf_r+0x4c2>
 800870e:	ee18 3a90 	vmov	r3, s17
 8008712:	2b00      	cmp	r3, #0
 8008714:	bfbc      	itt	lt
 8008716:	232d      	movlt	r3, #45	; 0x2d
 8008718:	f88d 305b 	strblt.w	r3, [sp, #91]	; 0x5b
 800871c:	4a9c      	ldr	r2, [pc, #624]	; (8008990 <_svfprintf_r+0x730>)
 800871e:	4b9d      	ldr	r3, [pc, #628]	; (8008994 <_svfprintf_r+0x734>)
 8008720:	e7e2      	b.n	80086e8 <_svfprintf_r+0x488>
 8008722:	9b04      	ldr	r3, [sp, #16]
 8008724:	f023 0720 	bic.w	r7, r3, #32
 8008728:	2f41      	cmp	r7, #65	; 0x41
 800872a:	d126      	bne.n	800877a <_svfprintf_r+0x51a>
 800872c:	2330      	movs	r3, #48	; 0x30
 800872e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8008732:	9b04      	ldr	r3, [sp, #16]
 8008734:	2b61      	cmp	r3, #97	; 0x61
 8008736:	bf14      	ite	ne
 8008738:	2358      	movne	r3, #88	; 0x58
 800873a:	2378      	moveq	r3, #120	; 0x78
 800873c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8008740:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 8008744:	f045 0502 	orr.w	r5, r5, #2
 8008748:	dd24      	ble.n	8008794 <_svfprintf_r+0x534>
 800874a:	f108 0101 	add.w	r1, r8, #1
 800874e:	9802      	ldr	r0, [sp, #8]
 8008750:	f7ff fb0a 	bl	8007d68 <_malloc_r>
 8008754:	4681      	mov	r9, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	f040 80ec 	bne.w	8008934 <_svfprintf_r+0x6d4>
 800875c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008764:	f8ab 300c 	strh.w	r3, [fp, #12]
 8008768:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800876c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008772:	bf18      	it	ne
 8008774:	f04f 33ff 	movne.w	r3, #4294967295
 8008778:	e598      	b.n	80082ac <_svfprintf_r+0x4c>
 800877a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800877e:	f000 80db 	beq.w	8008938 <_svfprintf_r+0x6d8>
 8008782:	2f47      	cmp	r7, #71	; 0x47
 8008784:	d103      	bne.n	800878e <_svfprintf_r+0x52e>
 8008786:	f1b8 0f00 	cmp.w	r8, #0
 800878a:	f000 80da 	beq.w	8008942 <_svfprintf_r+0x6e2>
 800878e:	f04f 0a00 	mov.w	sl, #0
 8008792:	e003      	b.n	800879c <_svfprintf_r+0x53c>
 8008794:	f04f 0a00 	mov.w	sl, #0
 8008798:	f10d 09c4 	add.w	r9, sp, #196	; 0xc4
 800879c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80087a0:	930c      	str	r3, [sp, #48]	; 0x30
 80087a2:	ee18 3a90 	vmov	r3, s17
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f280 80cf 	bge.w	800894a <_svfprintf_r+0x6ea>
 80087ac:	eeb1 9b48 	vneg.f64	d9, d8
 80087b0:	232d      	movs	r3, #45	; 0x2d
 80087b2:	2f41      	cmp	r7, #65	; 0x41
 80087b4:	930d      	str	r3, [sp, #52]	; 0x34
 80087b6:	f040 80d9 	bne.w	800896c <_svfprintf_r+0x70c>
 80087ba:	eeb0 0b49 	vmov.f64	d0, d9
 80087be:	a818      	add	r0, sp, #96	; 0x60
 80087c0:	f002 f902 	bl	800a9c8 <frexp>
 80087c4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
 80087c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80087cc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80087d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d4:	bf04      	itt	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	9318      	streq	r3, [sp, #96]	; 0x60
 80087da:	9a04      	ldr	r2, [sp, #16]
 80087dc:	4b6e      	ldr	r3, [pc, #440]	; (8008998 <_svfprintf_r+0x738>)
 80087de:	496f      	ldr	r1, [pc, #444]	; (800899c <_svfprintf_r+0x73c>)
 80087e0:	eeb3 7b00 	vmov.f64	d7, #48	; 0x41800000  16.0
 80087e4:	2a61      	cmp	r2, #97	; 0x61
 80087e6:	bf08      	it	eq
 80087e8:	4619      	moveq	r1, r3
 80087ea:	f108 32ff 	add.w	r2, r8, #4294967295
 80087ee:	464b      	mov	r3, r9
 80087f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80087f4:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80087f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80087fc:	ee16 0a90 	vmov	r0, s13
 8008800:	5c0e      	ldrb	r6, [r1, r0]
 8008802:	f803 6b01 	strb.w	r6, [r3], #1
 8008806:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800880a:	4616      	mov	r6, r2
 800880c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008810:	d006      	beq.n	8008820 <_svfprintf_r+0x5c0>
 8008812:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800881a:	f102 32ff 	add.w	r2, r2, #4294967295
 800881e:	d1e7      	bne.n	80087f0 <_svfprintf_r+0x590>
 8008820:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008824:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882c:	dc08      	bgt.n	8008840 <_svfprintf_r+0x5e0>
 800882e:	eeb4 0b47 	vcmp.f64	d0, d7
 8008832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008836:	f040 8095 	bne.w	8008964 <_svfprintf_r+0x704>
 800883a:	07c0      	lsls	r0, r0, #31
 800883c:	f140 8092 	bpl.w	8008964 <_svfprintf_r+0x704>
 8008840:	7bce      	ldrb	r6, [r1, #15]
 8008842:	931c      	str	r3, [sp, #112]	; 0x70
 8008844:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008848:	981c      	ldr	r0, [sp, #112]	; 0x70
 800884a:	1e42      	subs	r2, r0, #1
 800884c:	921c      	str	r2, [sp, #112]	; 0x70
 800884e:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8008852:	42b2      	cmp	r2, r6
 8008854:	d07d      	beq.n	8008952 <_svfprintf_r+0x6f2>
 8008856:	2a39      	cmp	r2, #57	; 0x39
 8008858:	bf16      	itet	ne
 800885a:	3201      	addne	r2, #1
 800885c:	7a8a      	ldrbeq	r2, [r1, #10]
 800885e:	b2d2      	uxtbne	r2, r2
 8008860:	f800 2c01 	strb.w	r2, [r0, #-1]
 8008864:	461a      	mov	r2, r3
 8008866:	eba2 0309 	sub.w	r3, r2, r9
 800886a:	2f47      	cmp	r7, #71	; 0x47
 800886c:	9303      	str	r3, [sp, #12]
 800886e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008870:	f040 80ce 	bne.w	8008a10 <_svfprintf_r+0x7b0>
 8008874:	1cf2      	adds	r2, r6, #3
 8008876:	db02      	blt.n	800887e <_svfprintf_r+0x61e>
 8008878:	45b0      	cmp	r8, r6
 800887a:	f280 80f5 	bge.w	8008a68 <_svfprintf_r+0x808>
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	3b02      	subs	r3, #2
 8008882:	9304      	str	r3, [sp, #16]
 8008884:	9904      	ldr	r1, [sp, #16]
 8008886:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800888a:	f021 0120 	bic.w	r1, r1, #32
 800888e:	2941      	cmp	r1, #65	; 0x41
 8008890:	bf08      	it	eq
 8008892:	320f      	addeq	r2, #15
 8008894:	f106 33ff 	add.w	r3, r6, #4294967295
 8008898:	bf06      	itte	eq
 800889a:	b2d2      	uxtbeq	r2, r2
 800889c:	2101      	moveq	r1, #1
 800889e:	2100      	movne	r1, #0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	9318      	str	r3, [sp, #96]	; 0x60
 80088a4:	bfb8      	it	lt
 80088a6:	f1c6 0301 	rsblt	r3, r6, #1
 80088aa:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 80088ae:	bfb4      	ite	lt
 80088b0:	222d      	movlt	r2, #45	; 0x2d
 80088b2:	222b      	movge	r2, #43	; 0x2b
 80088b4:	2b09      	cmp	r3, #9
 80088b6:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80088ba:	f340 80c0 	ble.w	8008a3e <_svfprintf_r+0x7de>
 80088be:	f10d 0277 	add.w	r2, sp, #119	; 0x77
 80088c2:	260a      	movs	r6, #10
 80088c4:	fb93 f0f6 	sdiv	r0, r3, r6
 80088c8:	fb06 3310 	mls	r3, r6, r0, r3
 80088cc:	3330      	adds	r3, #48	; 0x30
 80088ce:	2809      	cmp	r0, #9
 80088d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80088d4:	f102 31ff 	add.w	r1, r2, #4294967295
 80088d8:	4603      	mov	r3, r0
 80088da:	f300 80a9 	bgt.w	8008a30 <_svfprintf_r+0x7d0>
 80088de:	3330      	adds	r3, #48	; 0x30
 80088e0:	f801 3c01 	strb.w	r3, [r1, #-1]
 80088e4:	3a02      	subs	r2, #2
 80088e6:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 80088ea:	f10d 0077 	add.w	r0, sp, #119	; 0x77
 80088ee:	4282      	cmp	r2, r0
 80088f0:	4619      	mov	r1, r3
 80088f2:	f0c0 809f 	bcc.w	8008a34 <_svfprintf_r+0x7d4>
 80088f6:	9a03      	ldr	r2, [sp, #12]
 80088f8:	ab1a      	add	r3, sp, #104	; 0x68
 80088fa:	1acb      	subs	r3, r1, r3
 80088fc:	2a01      	cmp	r2, #1
 80088fe:	9310      	str	r3, [sp, #64]	; 0x40
 8008900:	eb03 0802 	add.w	r8, r3, r2
 8008904:	dc01      	bgt.n	800890a <_svfprintf_r+0x6aa>
 8008906:	07eb      	lsls	r3, r5, #31
 8008908:	d501      	bpl.n	800890e <_svfprintf_r+0x6ae>
 800890a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890c:	4498      	add	r8, r3
 800890e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8008912:	2700      	movs	r7, #0
 8008914:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8008918:	930c      	str	r3, [sp, #48]	; 0x30
 800891a:	9705      	str	r7, [sp, #20]
 800891c:	463e      	mov	r6, r7
 800891e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 82fe 	beq.w	8008f22 <_svfprintf_r+0xcc2>
 8008926:	232d      	movs	r3, #45	; 0x2d
 8008928:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800892a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800892e:	2300      	movs	r3, #0
 8008930:	930c      	str	r3, [sp, #48]	; 0x30
 8008932:	e156      	b.n	8008be2 <_svfprintf_r+0x982>
 8008934:	4682      	mov	sl, r0
 8008936:	e731      	b.n	800879c <_svfprintf_r+0x53c>
 8008938:	f04f 0a00 	mov.w	sl, #0
 800893c:	f04f 0806 	mov.w	r8, #6
 8008940:	e72c      	b.n	800879c <_svfprintf_r+0x53c>
 8008942:	46c2      	mov	sl, r8
 8008944:	f04f 0801 	mov.w	r8, #1
 8008948:	e728      	b.n	800879c <_svfprintf_r+0x53c>
 800894a:	eeb0 9b48 	vmov.f64	d9, d8
 800894e:	2300      	movs	r3, #0
 8008950:	e72f      	b.n	80087b2 <_svfprintf_r+0x552>
 8008952:	f800 cc01 	strb.w	ip, [r0, #-1]
 8008956:	e777      	b.n	8008848 <_svfprintf_r+0x5e8>
 8008958:	f802 0b01 	strb.w	r0, [r2], #1
 800895c:	1a99      	subs	r1, r3, r2
 800895e:	2900      	cmp	r1, #0
 8008960:	dafa      	bge.n	8008958 <_svfprintf_r+0x6f8>
 8008962:	e780      	b.n	8008866 <_svfprintf_r+0x606>
 8008964:	461a      	mov	r2, r3
 8008966:	2030      	movs	r0, #48	; 0x30
 8008968:	4433      	add	r3, r6
 800896a:	e7f7      	b.n	800895c <_svfprintf_r+0x6fc>
 800896c:	2f46      	cmp	r7, #70	; 0x46
 800896e:	d017      	beq.n	80089a0 <_svfprintf_r+0x740>
 8008970:	2f45      	cmp	r7, #69	; 0x45
 8008972:	d146      	bne.n	8008a02 <_svfprintf_r+0x7a2>
 8008974:	f108 0601 	add.w	r6, r8, #1
 8008978:	2102      	movs	r1, #2
 800897a:	e013      	b.n	80089a4 <_svfprintf_r+0x744>
 800897c:	f3af 8000 	nop.w
 8008980:	ffffffff 	.word	0xffffffff
 8008984:	7fefffff 	.word	0x7fefffff
 8008988:	0800b1c4 	.word	0x0800b1c4
 800898c:	0800b1c0 	.word	0x0800b1c0
 8008990:	0800b1cc 	.word	0x0800b1cc
 8008994:	0800b1c8 	.word	0x0800b1c8
 8008998:	0800b1d0 	.word	0x0800b1d0
 800899c:	0800b1e1 	.word	0x0800b1e1
 80089a0:	4646      	mov	r6, r8
 80089a2:	2103      	movs	r1, #3
 80089a4:	ab1c      	add	r3, sp, #112	; 0x70
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	ab19      	add	r3, sp, #100	; 0x64
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	4632      	mov	r2, r6
 80089ae:	ab18      	add	r3, sp, #96	; 0x60
 80089b0:	eeb0 0b49 	vmov.f64	d0, d9
 80089b4:	9802      	ldr	r0, [sp, #8]
 80089b6:	f000 fedf 	bl	8009778 <_dtoa_r>
 80089ba:	2f47      	cmp	r7, #71	; 0x47
 80089bc:	4681      	mov	r9, r0
 80089be:	d101      	bne.n	80089c4 <_svfprintf_r+0x764>
 80089c0:	07e9      	lsls	r1, r5, #31
 80089c2:	d521      	bpl.n	8008a08 <_svfprintf_r+0x7a8>
 80089c4:	2f46      	cmp	r7, #70	; 0x46
 80089c6:	eb09 0306 	add.w	r3, r9, r6
 80089ca:	d10d      	bne.n	80089e8 <_svfprintf_r+0x788>
 80089cc:	f899 2000 	ldrb.w	r2, [r9]
 80089d0:	2a30      	cmp	r2, #48	; 0x30
 80089d2:	d107      	bne.n	80089e4 <_svfprintf_r+0x784>
 80089d4:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80089d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089dc:	bf1c      	itt	ne
 80089de:	f1c6 0601 	rsbne	r6, r6, #1
 80089e2:	9618      	strne	r6, [sp, #96]	; 0x60
 80089e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80089e6:	4413      	add	r3, r2
 80089e8:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80089ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f0:	d009      	beq.n	8008a06 <_svfprintf_r+0x7a6>
 80089f2:	2130      	movs	r1, #48	; 0x30
 80089f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d906      	bls.n	8008a08 <_svfprintf_r+0x7a8>
 80089fa:	1c50      	adds	r0, r2, #1
 80089fc:	901c      	str	r0, [sp, #112]	; 0x70
 80089fe:	7011      	strb	r1, [r2, #0]
 8008a00:	e7f8      	b.n	80089f4 <_svfprintf_r+0x794>
 8008a02:	4646      	mov	r6, r8
 8008a04:	e7b8      	b.n	8008978 <_svfprintf_r+0x718>
 8008a06:	931c      	str	r3, [sp, #112]	; 0x70
 8008a08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008a0a:	eba3 0309 	sub.w	r3, r3, r9
 8008a0e:	e72c      	b.n	800886a <_svfprintf_r+0x60a>
 8008a10:	2f46      	cmp	r7, #70	; 0x46
 8008a12:	f47f af37 	bne.w	8008884 <_svfprintf_r+0x624>
 8008a16:	2e00      	cmp	r6, #0
 8008a18:	dd1e      	ble.n	8008a58 <_svfprintf_r+0x7f8>
 8008a1a:	f1b8 0f00 	cmp.w	r8, #0
 8008a1e:	d101      	bne.n	8008a24 <_svfprintf_r+0x7c4>
 8008a20:	07ef      	lsls	r7, r5, #31
 8008a22:	d535      	bpl.n	8008a90 <_svfprintf_r+0x830>
 8008a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a26:	18f3      	adds	r3, r6, r3
 8008a28:	4498      	add	r8, r3
 8008a2a:	2366      	movs	r3, #102	; 0x66
 8008a2c:	9304      	str	r3, [sp, #16]
 8008a2e:	e035      	b.n	8008a9c <_svfprintf_r+0x83c>
 8008a30:	460a      	mov	r2, r1
 8008a32:	e746      	b.n	80088c2 <_svfprintf_r+0x662>
 8008a34:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008a38:	f803 1b01 	strb.w	r1, [r3], #1
 8008a3c:	e757      	b.n	80088ee <_svfprintf_r+0x68e>
 8008a3e:	b941      	cbnz	r1, 8008a52 <_svfprintf_r+0x7f2>
 8008a40:	2230      	movs	r2, #48	; 0x30
 8008a42:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
 8008a46:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8008a4a:	3330      	adds	r3, #48	; 0x30
 8008a4c:	1c51      	adds	r1, r2, #1
 8008a4e:	7013      	strb	r3, [r2, #0]
 8008a50:	e751      	b.n	80088f6 <_svfprintf_r+0x696>
 8008a52:	f10d 026a 	add.w	r2, sp, #106	; 0x6a
 8008a56:	e7f8      	b.n	8008a4a <_svfprintf_r+0x7ea>
 8008a58:	f1b8 0f00 	cmp.w	r8, #0
 8008a5c:	d101      	bne.n	8008a62 <_svfprintf_r+0x802>
 8008a5e:	07e8      	lsls	r0, r5, #31
 8008a60:	d518      	bpl.n	8008a94 <_svfprintf_r+0x834>
 8008a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a64:	3301      	adds	r3, #1
 8008a66:	e7df      	b.n	8008a28 <_svfprintf_r+0x7c8>
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	42b3      	cmp	r3, r6
 8008a6c:	dc06      	bgt.n	8008a7c <_svfprintf_r+0x81c>
 8008a6e:	07e9      	lsls	r1, r5, #31
 8008a70:	d527      	bpl.n	8008ac2 <_svfprintf_r+0x862>
 8008a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a74:	eb06 0803 	add.w	r8, r6, r3
 8008a78:	2367      	movs	r3, #103	; 0x67
 8008a7a:	e7d7      	b.n	8008a2c <_svfprintf_r+0x7cc>
 8008a7c:	9b03      	ldr	r3, [sp, #12]
 8008a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a80:	2e00      	cmp	r6, #0
 8008a82:	eb03 0802 	add.w	r8, r3, r2
 8008a86:	dcf7      	bgt.n	8008a78 <_svfprintf_r+0x818>
 8008a88:	f1c6 0301 	rsb	r3, r6, #1
 8008a8c:	4498      	add	r8, r3
 8008a8e:	e7f3      	b.n	8008a78 <_svfprintf_r+0x818>
 8008a90:	46b0      	mov	r8, r6
 8008a92:	e7ca      	b.n	8008a2a <_svfprintf_r+0x7ca>
 8008a94:	2366      	movs	r3, #102	; 0x66
 8008a96:	9304      	str	r3, [sp, #16]
 8008a98:	f04f 0801 	mov.w	r8, #1
 8008a9c:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 8008aa0:	9305      	str	r3, [sp, #20]
 8008aa2:	d01f      	beq.n	8008ae4 <_svfprintf_r+0x884>
 8008aa4:	2700      	movs	r7, #0
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	9705      	str	r7, [sp, #20]
 8008aaa:	f77f af38 	ble.w	800891e <_svfprintf_r+0x6be>
 8008aae:	9b07      	ldr	r3, [sp, #28]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2bff      	cmp	r3, #255	; 0xff
 8008ab4:	d107      	bne.n	8008ac6 <_svfprintf_r+0x866>
 8008ab6:	9b05      	ldr	r3, [sp, #20]
 8008ab8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aba:	443b      	add	r3, r7
 8008abc:	fb02 8803 	mla	r8, r2, r3, r8
 8008ac0:	e72d      	b.n	800891e <_svfprintf_r+0x6be>
 8008ac2:	46b0      	mov	r8, r6
 8008ac4:	e7d8      	b.n	8008a78 <_svfprintf_r+0x818>
 8008ac6:	42b3      	cmp	r3, r6
 8008ac8:	daf5      	bge.n	8008ab6 <_svfprintf_r+0x856>
 8008aca:	1af6      	subs	r6, r6, r3
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	b133      	cbz	r3, 8008ae0 <_svfprintf_r+0x880>
 8008ad2:	9b05      	ldr	r3, [sp, #20]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	9305      	str	r3, [sp, #20]
 8008ad8:	9b07      	ldr	r3, [sp, #28]
 8008ada:	3301      	adds	r3, #1
 8008adc:	9307      	str	r3, [sp, #28]
 8008ade:	e7e6      	b.n	8008aae <_svfprintf_r+0x84e>
 8008ae0:	3701      	adds	r7, #1
 8008ae2:	e7e4      	b.n	8008aae <_svfprintf_r+0x84e>
 8008ae4:	9f05      	ldr	r7, [sp, #20]
 8008ae6:	e71a      	b.n	800891e <_svfprintf_r+0x6be>
 8008ae8:	4632      	mov	r2, r6
 8008aea:	f852 3b04 	ldr.w	r3, [r2], #4
 8008aee:	9206      	str	r2, [sp, #24]
 8008af0:	06aa      	lsls	r2, r5, #26
 8008af2:	d509      	bpl.n	8008b08 <_svfprintf_r+0x8a8>
 8008af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af6:	4610      	mov	r0, r2
 8008af8:	17d1      	asrs	r1, r2, #31
 8008afa:	e9c3 0100 	strd	r0, r1, [r3]
 8008afe:	9e06      	ldr	r6, [sp, #24]
 8008b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b04:	f7ff bbea 	b.w	80082dc <_svfprintf_r+0x7c>
 8008b08:	06ef      	lsls	r7, r5, #27
 8008b0a:	d502      	bpl.n	8008b12 <_svfprintf_r+0x8b2>
 8008b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	e7f5      	b.n	8008afe <_svfprintf_r+0x89e>
 8008b12:	066e      	lsls	r6, r5, #25
 8008b14:	d502      	bpl.n	8008b1c <_svfprintf_r+0x8bc>
 8008b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b18:	801a      	strh	r2, [r3, #0]
 8008b1a:	e7f0      	b.n	8008afe <_svfprintf_r+0x89e>
 8008b1c:	05a8      	lsls	r0, r5, #22
 8008b1e:	d5f5      	bpl.n	8008b0c <_svfprintf_r+0x8ac>
 8008b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b22:	701a      	strb	r2, [r3, #0]
 8008b24:	e7eb      	b.n	8008afe <_svfprintf_r+0x89e>
 8008b26:	f045 0510 	orr.w	r5, r5, #16
 8008b2a:	06a9      	lsls	r1, r5, #26
 8008b2c:	d520      	bpl.n	8008b70 <_svfprintf_r+0x910>
 8008b2e:	3607      	adds	r6, #7
 8008b30:	f026 0607 	bic.w	r6, r6, #7
 8008b34:	f106 0308 	add.w	r3, r6, #8
 8008b38:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008b3c:	9306      	str	r3, [sp, #24]
 8008b3e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8008b42:	2300      	movs	r3, #0
 8008b44:	2200      	movs	r2, #0
 8008b46:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008b4a:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
 8008b4e:	f000 814d 	beq.w	8008dec <_svfprintf_r+0xb8c>
 8008b52:	462a      	mov	r2, r5
 8008b54:	ea56 0107 	orrs.w	r1, r6, r7
 8008b58:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8008b5c:	f040 8146 	bne.w	8008dec <_svfprintf_r+0xb8c>
 8008b60:	f1b8 0f00 	cmp.w	r8, #0
 8008b64:	f000 81c7 	beq.w	8008ef6 <_svfprintf_r+0xc96>
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	f040 8142 	bne.w	8008df2 <_svfprintf_r+0xb92>
 8008b6e:	e589      	b.n	8008684 <_svfprintf_r+0x424>
 8008b70:	1d33      	adds	r3, r6, #4
 8008b72:	06ea      	lsls	r2, r5, #27
 8008b74:	9306      	str	r3, [sp, #24]
 8008b76:	d501      	bpl.n	8008b7c <_svfprintf_r+0x91c>
 8008b78:	6836      	ldr	r6, [r6, #0]
 8008b7a:	e002      	b.n	8008b82 <_svfprintf_r+0x922>
 8008b7c:	066b      	lsls	r3, r5, #25
 8008b7e:	d502      	bpl.n	8008b86 <_svfprintf_r+0x926>
 8008b80:	8836      	ldrh	r6, [r6, #0]
 8008b82:	2700      	movs	r7, #0
 8008b84:	e7db      	b.n	8008b3e <_svfprintf_r+0x8de>
 8008b86:	05af      	lsls	r7, r5, #22
 8008b88:	d5f6      	bpl.n	8008b78 <_svfprintf_r+0x918>
 8008b8a:	7836      	ldrb	r6, [r6, #0]
 8008b8c:	e7f9      	b.n	8008b82 <_svfprintf_r+0x922>
 8008b8e:	1d33      	adds	r3, r6, #4
 8008b90:	9306      	str	r3, [sp, #24]
 8008b92:	f647 0330 	movw	r3, #30768	; 0x7830
 8008b96:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 8008b9a:	2278      	movs	r2, #120	; 0x78
 8008b9c:	4baa      	ldr	r3, [pc, #680]	; (8008e48 <_svfprintf_r+0xbe8>)
 8008b9e:	9311      	str	r3, [sp, #68]	; 0x44
 8008ba0:	6836      	ldr	r6, [r6, #0]
 8008ba2:	9204      	str	r2, [sp, #16]
 8008ba4:	2700      	movs	r7, #0
 8008ba6:	f045 0502 	orr.w	r5, r5, #2
 8008baa:	2302      	movs	r3, #2
 8008bac:	e7ca      	b.n	8008b44 <_svfprintf_r+0x8e4>
 8008bae:	1d33      	adds	r3, r6, #4
 8008bb0:	f8d6 9000 	ldr.w	r9, [r6]
 8008bb4:	9306      	str	r3, [sp, #24]
 8008bb6:	2600      	movs	r6, #0
 8008bb8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008bbc:	f88d 605b 	strb.w	r6, [sp, #91]	; 0x5b
 8008bc0:	f000 80db 	beq.w	8008d7a <_svfprintf_r+0xb1a>
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4648      	mov	r0, r9
 8008bca:	f7f7 fb89 	bl	80002e0 <memchr>
 8008bce:	4682      	mov	sl, r0
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f43f ad94 	beq.w	80086fe <_svfprintf_r+0x49e>
 8008bd6:	eba0 0809 	sub.w	r8, r0, r9
 8008bda:	46b2      	mov	sl, r6
 8008bdc:	960c      	str	r6, [sp, #48]	; 0x30
 8008bde:	4637      	mov	r7, r6
 8008be0:	9605      	str	r6, [sp, #20]
 8008be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008be4:	4543      	cmp	r3, r8
 8008be6:	bfb8      	it	lt
 8008be8:	4643      	movlt	r3, r8
 8008bea:	930d      	str	r3, [sp, #52]	; 0x34
 8008bec:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8008bf0:	b113      	cbz	r3, 8008bf8 <_svfprintf_r+0x998>
 8008bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8008bf8:	f015 0302 	ands.w	r3, r5, #2
 8008bfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bfe:	bf1e      	ittt	ne
 8008c00:	9b0d      	ldrne	r3, [sp, #52]	; 0x34
 8008c02:	3302      	addne	r3, #2
 8008c04:	930d      	strne	r3, [sp, #52]	; 0x34
 8008c06:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8008c0a:	9314      	str	r3, [sp, #80]	; 0x50
 8008c0c:	d120      	bne.n	8008c50 <_svfprintf_r+0x9f0>
 8008c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c12:	1a9b      	subs	r3, r3, r2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	dd1b      	ble.n	8008c50 <_svfprintf_r+0x9f0>
 8008c18:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8008c1c:	498b      	ldr	r1, [pc, #556]	; (8008e4c <_svfprintf_r+0xbec>)
 8008c1e:	6021      	str	r1, [r4, #0]
 8008c20:	2b10      	cmp	r3, #16
 8008c22:	f102 0201 	add.w	r2, r2, #1
 8008c26:	f104 0008 	add.w	r0, r4, #8
 8008c2a:	f300 817d 	bgt.w	8008f28 <_svfprintf_r+0xcc8>
 8008c2e:	eb0c 0103 	add.w	r1, ip, r3
 8008c32:	2a07      	cmp	r2, #7
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8008c3a:	f340 818a 	ble.w	8008f52 <_svfprintf_r+0xcf2>
 8008c3e:	aa1e      	add	r2, sp, #120	; 0x78
 8008c40:	4659      	mov	r1, fp
 8008c42:	9802      	ldr	r0, [sp, #8]
 8008c44:	f001 ff0f 	bl	800aa66 <__ssprint_r>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f040 84b7 	bne.w	80095bc <_svfprintf_r+0x135c>
 8008c4e:	ac21      	add	r4, sp, #132	; 0x84
 8008c50:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8008c54:	b173      	cbz	r3, 8008c74 <_svfprintf_r+0xa14>
 8008c56:	f10d 035b 	add.w	r3, sp, #91	; 0x5b
 8008c5a:	6023      	str	r3, [r4, #0]
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	6063      	str	r3, [r4, #4]
 8008c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008c62:	3301      	adds	r3, #1
 8008c64:	9320      	str	r3, [sp, #128]	; 0x80
 8008c66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c68:	3301      	adds	r3, #1
 8008c6a:	2b07      	cmp	r3, #7
 8008c6c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008c6e:	f300 8172 	bgt.w	8008f56 <_svfprintf_r+0xcf6>
 8008c72:	3408      	adds	r4, #8
 8008c74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c76:	b16b      	cbz	r3, 8008c94 <_svfprintf_r+0xa34>
 8008c78:	ab17      	add	r3, sp, #92	; 0x5c
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	6063      	str	r3, [r4, #4]
 8008c80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008c82:	3302      	adds	r3, #2
 8008c84:	9320      	str	r3, [sp, #128]	; 0x80
 8008c86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c88:	3301      	adds	r3, #1
 8008c8a:	2b07      	cmp	r3, #7
 8008c8c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008c8e:	f300 816c 	bgt.w	8008f6a <_svfprintf_r+0xd0a>
 8008c92:	3408      	adds	r4, #8
 8008c94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c96:	2b80      	cmp	r3, #128	; 0x80
 8008c98:	d120      	bne.n	8008cdc <_svfprintf_r+0xa7c>
 8008c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dd1b      	ble.n	8008cdc <_svfprintf_r+0xa7c>
 8008ca4:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	; 0x7c
 8008ca8:	4969      	ldr	r1, [pc, #420]	; (8008e50 <_svfprintf_r+0xbf0>)
 8008caa:	6021      	str	r1, [r4, #0]
 8008cac:	2b10      	cmp	r3, #16
 8008cae:	f102 0201 	add.w	r2, r2, #1
 8008cb2:	f104 0008 	add.w	r0, r4, #8
 8008cb6:	f300 8162 	bgt.w	8008f7e <_svfprintf_r+0xd1e>
 8008cba:	eb0c 0103 	add.w	r1, ip, r3
 8008cbe:	2a07      	cmp	r2, #7
 8008cc0:	6063      	str	r3, [r4, #4]
 8008cc2:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8008cc6:	f340 816f 	ble.w	8008fa8 <_svfprintf_r+0xd48>
 8008cca:	aa1e      	add	r2, sp, #120	; 0x78
 8008ccc:	4659      	mov	r1, fp
 8008cce:	9802      	ldr	r0, [sp, #8]
 8008cd0:	f001 fec9 	bl	800aa66 <__ssprint_r>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	f040 8471 	bne.w	80095bc <_svfprintf_r+0x135c>
 8008cda:	ac21      	add	r4, sp, #132	; 0x84
 8008cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cde:	eba3 0308 	sub.w	r3, r3, r8
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ce6:	dd1c      	ble.n	8008d22 <_svfprintf_r+0xac2>
 8008ce8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008cea:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 8008cee:	2810      	cmp	r0, #16
 8008cf0:	4857      	ldr	r0, [pc, #348]	; (8008e50 <_svfprintf_r+0xbf0>)
 8008cf2:	6020      	str	r0, [r4, #0]
 8008cf4:	f102 0201 	add.w	r2, r2, #1
 8008cf8:	f104 0108 	add.w	r1, r4, #8
 8008cfc:	f300 8156 	bgt.w	8008fac <_svfprintf_r+0xd4c>
 8008d00:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d02:	6060      	str	r0, [r4, #4]
 8008d04:	4403      	add	r3, r0
 8008d06:	2a07      	cmp	r2, #7
 8008d08:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8008d0c:	f340 8163 	ble.w	8008fd6 <_svfprintf_r+0xd76>
 8008d10:	aa1e      	add	r2, sp, #120	; 0x78
 8008d12:	4659      	mov	r1, fp
 8008d14:	9802      	ldr	r0, [sp, #8]
 8008d16:	f001 fea6 	bl	800aa66 <__ssprint_r>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	f040 844e 	bne.w	80095bc <_svfprintf_r+0x135c>
 8008d20:	ac21      	add	r4, sp, #132	; 0x84
 8008d22:	05e8      	lsls	r0, r5, #23
 8008d24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d26:	f100 8158 	bmi.w	8008fda <_svfprintf_r+0xd7a>
 8008d2a:	4443      	add	r3, r8
 8008d2c:	9320      	str	r3, [sp, #128]	; 0x80
 8008d2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d30:	3301      	adds	r3, #1
 8008d32:	2b07      	cmp	r3, #7
 8008d34:	e9c4 9800 	strd	r9, r8, [r4]
 8008d38:	931f      	str	r3, [sp, #124]	; 0x7c
 8008d3a:	f300 8190 	bgt.w	800905e <_svfprintf_r+0xdfe>
 8008d3e:	3408      	adds	r4, #8
 8008d40:	076b      	lsls	r3, r5, #29
 8008d42:	f100 841d 	bmi.w	8009580 <_svfprintf_r+0x1320>
 8008d46:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8008d4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d4c:	428a      	cmp	r2, r1
 8008d4e:	bfac      	ite	ge
 8008d50:	189b      	addge	r3, r3, r2
 8008d52:	185b      	addlt	r3, r3, r1
 8008d54:	930a      	str	r3, [sp, #40]	; 0x28
 8008d56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d58:	b13b      	cbz	r3, 8008d6a <_svfprintf_r+0xb0a>
 8008d5a:	aa1e      	add	r2, sp, #120	; 0x78
 8008d5c:	4659      	mov	r1, fp
 8008d5e:	9802      	ldr	r0, [sp, #8]
 8008d60:	f001 fe81 	bl	800aa66 <__ssprint_r>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f040 8429 	bne.w	80095bc <_svfprintf_r+0x135c>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	931f      	str	r3, [sp, #124]	; 0x7c
 8008d6e:	f1ba 0f00 	cmp.w	sl, #0
 8008d72:	f040 843f 	bne.w	80095f4 <_svfprintf_r+0x1394>
 8008d76:	ac21      	add	r4, sp, #132	; 0x84
 8008d78:	e6c1      	b.n	8008afe <_svfprintf_r+0x89e>
 8008d7a:	4648      	mov	r0, r9
 8008d7c:	f7f7 fb00 	bl	8000380 <strlen>
 8008d80:	46b2      	mov	sl, r6
 8008d82:	4680      	mov	r8, r0
 8008d84:	e4bb      	b.n	80086fe <_svfprintf_r+0x49e>
 8008d86:	f045 0510 	orr.w	r5, r5, #16
 8008d8a:	06a8      	lsls	r0, r5, #26
 8008d8c:	d509      	bpl.n	8008da2 <_svfprintf_r+0xb42>
 8008d8e:	3607      	adds	r6, #7
 8008d90:	f026 0607 	bic.w	r6, r6, #7
 8008d94:	f106 0308 	add.w	r3, r6, #8
 8008d98:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008d9c:	9306      	str	r3, [sp, #24]
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e6d0      	b.n	8008b44 <_svfprintf_r+0x8e4>
 8008da2:	1d33      	adds	r3, r6, #4
 8008da4:	06e9      	lsls	r1, r5, #27
 8008da6:	9306      	str	r3, [sp, #24]
 8008da8:	d501      	bpl.n	8008dae <_svfprintf_r+0xb4e>
 8008daa:	6836      	ldr	r6, [r6, #0]
 8008dac:	e002      	b.n	8008db4 <_svfprintf_r+0xb54>
 8008dae:	066a      	lsls	r2, r5, #25
 8008db0:	d502      	bpl.n	8008db8 <_svfprintf_r+0xb58>
 8008db2:	8836      	ldrh	r6, [r6, #0]
 8008db4:	2700      	movs	r7, #0
 8008db6:	e7f2      	b.n	8008d9e <_svfprintf_r+0xb3e>
 8008db8:	05ab      	lsls	r3, r5, #22
 8008dba:	d5f6      	bpl.n	8008daa <_svfprintf_r+0xb4a>
 8008dbc:	7836      	ldrb	r6, [r6, #0]
 8008dbe:	e7f9      	b.n	8008db4 <_svfprintf_r+0xb54>
 8008dc0:	4b21      	ldr	r3, [pc, #132]	; (8008e48 <_svfprintf_r+0xbe8>)
 8008dc2:	f7ff bb86 	b.w	80084d2 <_svfprintf_r+0x272>
 8008dc6:	1d33      	adds	r3, r6, #4
 8008dc8:	06e8      	lsls	r0, r5, #27
 8008dca:	9306      	str	r3, [sp, #24]
 8008dcc:	d501      	bpl.n	8008dd2 <_svfprintf_r+0xb72>
 8008dce:	6836      	ldr	r6, [r6, #0]
 8008dd0:	e002      	b.n	8008dd8 <_svfprintf_r+0xb78>
 8008dd2:	0669      	lsls	r1, r5, #25
 8008dd4:	d503      	bpl.n	8008dde <_svfprintf_r+0xb7e>
 8008dd6:	8836      	ldrh	r6, [r6, #0]
 8008dd8:	2700      	movs	r7, #0
 8008dda:	f7ff bb86 	b.w	80084ea <_svfprintf_r+0x28a>
 8008dde:	05aa      	lsls	r2, r5, #22
 8008de0:	d5f5      	bpl.n	8008dce <_svfprintf_r+0xb6e>
 8008de2:	7836      	ldrb	r6, [r6, #0]
 8008de4:	e7f8      	b.n	8008dd8 <_svfprintf_r+0xb78>
 8008de6:	462a      	mov	r2, r5
 8008de8:	2301      	movs	r3, #1
 8008dea:	e6b3      	b.n	8008b54 <_svfprintf_r+0x8f4>
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	f43f ac44 	beq.w	800867a <_svfprintf_r+0x41a>
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d06d      	beq.n	8008ed2 <_svfprintf_r+0xc72>
 8008df6:	ab4a      	add	r3, sp, #296	; 0x128
 8008df8:	08f1      	lsrs	r1, r6, #3
 8008dfa:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8008dfe:	08f8      	lsrs	r0, r7, #3
 8008e00:	f006 0207 	and.w	r2, r6, #7
 8008e04:	4607      	mov	r7, r0
 8008e06:	460e      	mov	r6, r1
 8008e08:	3230      	adds	r2, #48	; 0x30
 8008e0a:	ea56 0107 	orrs.w	r1, r6, r7
 8008e0e:	f103 39ff 	add.w	r9, r3, #4294967295
 8008e12:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008e16:	d114      	bne.n	8008e42 <_svfprintf_r+0xbe2>
 8008e18:	07ef      	lsls	r7, r5, #31
 8008e1a:	d506      	bpl.n	8008e2a <_svfprintf_r+0xbca>
 8008e1c:	2a30      	cmp	r2, #48	; 0x30
 8008e1e:	d004      	beq.n	8008e2a <_svfprintf_r+0xbca>
 8008e20:	2230      	movs	r2, #48	; 0x30
 8008e22:	f809 2c01 	strb.w	r2, [r9, #-1]
 8008e26:	f1a3 0902 	sub.w	r9, r3, #2
 8008e2a:	ab4a      	add	r3, sp, #296	; 0x128
 8008e2c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008e30:	f04f 0a00 	mov.w	sl, #0
 8008e34:	eba3 0809 	sub.w	r8, r3, r9
 8008e38:	4657      	mov	r7, sl
 8008e3a:	f8cd a014 	str.w	sl, [sp, #20]
 8008e3e:	4656      	mov	r6, sl
 8008e40:	e6cf      	b.n	8008be2 <_svfprintf_r+0x982>
 8008e42:	464b      	mov	r3, r9
 8008e44:	e7d8      	b.n	8008df8 <_svfprintf_r+0xb98>
 8008e46:	bf00      	nop
 8008e48:	0800b1d0 	.word	0x0800b1d0
 8008e4c:	0800b1f4 	.word	0x0800b1f4
 8008e50:	0800b204 	.word	0x0800b204
 8008e54:	2300      	movs	r3, #0
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	f405 6380 	and.w	r3, r5, #1024	; 0x400
 8008e5c:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
 8008e60:	9305      	str	r3, [sp, #20]
 8008e62:	220a      	movs	r2, #10
 8008e64:	2300      	movs	r3, #0
 8008e66:	4630      	mov	r0, r6
 8008e68:	4639      	mov	r1, r7
 8008e6a:	f7f7 fa91 	bl	8000390 <__aeabi_uldivmod>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	9303      	str	r3, [sp, #12]
 8008e74:	9b05      	ldr	r3, [sp, #20]
 8008e76:	3230      	adds	r2, #48	; 0x30
 8008e78:	f10a 39ff 	add.w	r9, sl, #4294967295
 8008e7c:	f80a 2c01 	strb.w	r2, [sl, #-1]
 8008e80:	b1d3      	cbz	r3, 8008eb8 <_svfprintf_r+0xc58>
 8008e82:	9b07      	ldr	r3, [sp, #28]
 8008e84:	9a03      	ldr	r2, [sp, #12]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d115      	bne.n	8008eb8 <_svfprintf_r+0xc58>
 8008e8c:	2aff      	cmp	r2, #255	; 0xff
 8008e8e:	d013      	beq.n	8008eb8 <_svfprintf_r+0xc58>
 8008e90:	2f00      	cmp	r7, #0
 8008e92:	bf08      	it	eq
 8008e94:	2e0a      	cmpeq	r6, #10
 8008e96:	d30f      	bcc.n	8008eb8 <_svfprintf_r+0xc58>
 8008e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e9c:	eba9 0903 	sub.w	r9, r9, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4648      	mov	r0, r9
 8008ea4:	f001 fdca 	bl	800aa3c <strncpy>
 8008ea8:	9b07      	ldr	r3, [sp, #28]
 8008eaa:	785b      	ldrb	r3, [r3, #1]
 8008eac:	b11b      	cbz	r3, 8008eb6 <_svfprintf_r+0xc56>
 8008eae:	9b07      	ldr	r3, [sp, #28]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	9307      	str	r3, [sp, #28]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9303      	str	r3, [sp, #12]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4630      	mov	r0, r6
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	220a      	movs	r2, #10
 8008ec0:	f7f7 fa66 	bl	8000390 <__aeabi_uldivmod>
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	ea56 0307 	orrs.w	r3, r6, r7
 8008ecc:	d0ad      	beq.n	8008e2a <_svfprintf_r+0xbca>
 8008ece:	46ca      	mov	sl, r9
 8008ed0:	e7c7      	b.n	8008e62 <_svfprintf_r+0xc02>
 8008ed2:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8008ed6:	f006 030f 	and.w	r3, r6, #15
 8008eda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008edc:	5cd3      	ldrb	r3, [r2, r3]
 8008ede:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8008ee2:	0933      	lsrs	r3, r6, #4
 8008ee4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008ee8:	093a      	lsrs	r2, r7, #4
 8008eea:	461e      	mov	r6, r3
 8008eec:	4617      	mov	r7, r2
 8008eee:	ea56 0307 	orrs.w	r3, r6, r7
 8008ef2:	d1f0      	bne.n	8008ed6 <_svfprintf_r+0xc76>
 8008ef4:	e799      	b.n	8008e2a <_svfprintf_r+0xbca>
 8008ef6:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d195      	bne.n	8008e2a <_svfprintf_r+0xbca>
 8008efe:	07d6      	lsls	r6, r2, #31
 8008f00:	bf44      	itt	mi
 8008f02:	2330      	movmi	r3, #48	; 0x30
 8008f04:	f809 3d01 	strbmi.w	r3, [r9, #-1]!
 8008f08:	e78f      	b.n	8008e2a <_svfprintf_r+0xbca>
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8377 	beq.w	8009600 <_svfprintf_r+0x13a0>
 8008f12:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
 8008f16:	2300      	movs	r3, #0
 8008f18:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8008f1c:	9606      	str	r6, [sp, #24]
 8008f1e:	f7ff bb87 	b.w	8008630 <_svfprintf_r+0x3d0>
 8008f22:	e9dd 530c 	ldrd	r5, r3, [sp, #48]	; 0x30
 8008f26:	e503      	b.n	8008930 <_svfprintf_r+0x6d0>
 8008f28:	2110      	movs	r1, #16
 8008f2a:	6061      	str	r1, [r4, #4]
 8008f2c:	2a07      	cmp	r2, #7
 8008f2e:	4461      	add	r1, ip
 8008f30:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8008f34:	dd0a      	ble.n	8008f4c <_svfprintf_r+0xcec>
 8008f36:	aa1e      	add	r2, sp, #120	; 0x78
 8008f38:	4659      	mov	r1, fp
 8008f3a:	9802      	ldr	r0, [sp, #8]
 8008f3c:	9315      	str	r3, [sp, #84]	; 0x54
 8008f3e:	f001 fd92 	bl	800aa66 <__ssprint_r>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f040 833a 	bne.w	80095bc <_svfprintf_r+0x135c>
 8008f48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f4a:	a821      	add	r0, sp, #132	; 0x84
 8008f4c:	3b10      	subs	r3, #16
 8008f4e:	4604      	mov	r4, r0
 8008f50:	e662      	b.n	8008c18 <_svfprintf_r+0x9b8>
 8008f52:	4604      	mov	r4, r0
 8008f54:	e67c      	b.n	8008c50 <_svfprintf_r+0x9f0>
 8008f56:	aa1e      	add	r2, sp, #120	; 0x78
 8008f58:	4659      	mov	r1, fp
 8008f5a:	9802      	ldr	r0, [sp, #8]
 8008f5c:	f001 fd83 	bl	800aa66 <__ssprint_r>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	f040 832b 	bne.w	80095bc <_svfprintf_r+0x135c>
 8008f66:	ac21      	add	r4, sp, #132	; 0x84
 8008f68:	e684      	b.n	8008c74 <_svfprintf_r+0xa14>
 8008f6a:	aa1e      	add	r2, sp, #120	; 0x78
 8008f6c:	4659      	mov	r1, fp
 8008f6e:	9802      	ldr	r0, [sp, #8]
 8008f70:	f001 fd79 	bl	800aa66 <__ssprint_r>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	f040 8321 	bne.w	80095bc <_svfprintf_r+0x135c>
 8008f7a:	ac21      	add	r4, sp, #132	; 0x84
 8008f7c:	e68a      	b.n	8008c94 <_svfprintf_r+0xa34>
 8008f7e:	2110      	movs	r1, #16
 8008f80:	6061      	str	r1, [r4, #4]
 8008f82:	2a07      	cmp	r2, #7
 8008f84:	4461      	add	r1, ip
 8008f86:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 8008f8a:	dd0a      	ble.n	8008fa2 <_svfprintf_r+0xd42>
 8008f8c:	aa1e      	add	r2, sp, #120	; 0x78
 8008f8e:	4659      	mov	r1, fp
 8008f90:	9802      	ldr	r0, [sp, #8]
 8008f92:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f94:	f001 fd67 	bl	800aa66 <__ssprint_r>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	f040 830f 	bne.w	80095bc <_svfprintf_r+0x135c>
 8008f9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fa0:	a821      	add	r0, sp, #132	; 0x84
 8008fa2:	3b10      	subs	r3, #16
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	e67d      	b.n	8008ca4 <_svfprintf_r+0xa44>
 8008fa8:	4604      	mov	r4, r0
 8008faa:	e697      	b.n	8008cdc <_svfprintf_r+0xa7c>
 8008fac:	2010      	movs	r0, #16
 8008fae:	4403      	add	r3, r0
 8008fb0:	2a07      	cmp	r2, #7
 8008fb2:	6060      	str	r0, [r4, #4]
 8008fb4:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8008fb8:	dd08      	ble.n	8008fcc <_svfprintf_r+0xd6c>
 8008fba:	aa1e      	add	r2, sp, #120	; 0x78
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	9802      	ldr	r0, [sp, #8]
 8008fc0:	f001 fd51 	bl	800aa66 <__ssprint_r>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	f040 82f9 	bne.w	80095bc <_svfprintf_r+0x135c>
 8008fca:	a921      	add	r1, sp, #132	; 0x84
 8008fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fce:	3b10      	subs	r3, #16
 8008fd0:	930c      	str	r3, [sp, #48]	; 0x30
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	e688      	b.n	8008ce8 <_svfprintf_r+0xa88>
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	e6a3      	b.n	8008d22 <_svfprintf_r+0xac2>
 8008fda:	9a04      	ldr	r2, [sp, #16]
 8008fdc:	2a65      	cmp	r2, #101	; 0x65
 8008fde:	f340 8243 	ble.w	8009468 <_svfprintf_r+0x1208>
 8008fe2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	d169      	bne.n	80090c0 <_svfprintf_r+0xe60>
 8008fec:	4a72      	ldr	r2, [pc, #456]	; (80091b8 <_svfprintf_r+0xf58>)
 8008fee:	6022      	str	r2, [r4, #0]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	4413      	add	r3, r2
 8008ff4:	9320      	str	r3, [sp, #128]	; 0x80
 8008ff6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ff8:	6062      	str	r2, [r4, #4]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	2b07      	cmp	r3, #7
 8008ffe:	931f      	str	r3, [sp, #124]	; 0x7c
 8009000:	dc37      	bgt.n	8009072 <_svfprintf_r+0xe12>
 8009002:	3408      	adds	r4, #8
 8009004:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009006:	9a03      	ldr	r2, [sp, #12]
 8009008:	4293      	cmp	r3, r2
 800900a:	db02      	blt.n	8009012 <_svfprintf_r+0xdb2>
 800900c:	07e9      	lsls	r1, r5, #31
 800900e:	f57f ae97 	bpl.w	8008d40 <_svfprintf_r+0xae0>
 8009012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009018:	6063      	str	r3, [r4, #4]
 800901a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800901c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800901e:	4413      	add	r3, r2
 8009020:	9320      	str	r3, [sp, #128]	; 0x80
 8009022:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009024:	3301      	adds	r3, #1
 8009026:	2b07      	cmp	r3, #7
 8009028:	931f      	str	r3, [sp, #124]	; 0x7c
 800902a:	dc2c      	bgt.n	8009086 <_svfprintf_r+0xe26>
 800902c:	3408      	adds	r4, #8
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	1e5e      	subs	r6, r3, #1
 8009032:	2e00      	cmp	r6, #0
 8009034:	f77f ae84 	ble.w	8008d40 <_svfprintf_r+0xae0>
 8009038:	4f60      	ldr	r7, [pc, #384]	; (80091bc <_svfprintf_r+0xf5c>)
 800903a:	f04f 0810 	mov.w	r8, #16
 800903e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8009042:	2e10      	cmp	r6, #16
 8009044:	f103 0301 	add.w	r3, r3, #1
 8009048:	f104 0108 	add.w	r1, r4, #8
 800904c:	6027      	str	r7, [r4, #0]
 800904e:	dc24      	bgt.n	800909a <_svfprintf_r+0xe3a>
 8009050:	6066      	str	r6, [r4, #4]
 8009052:	2b07      	cmp	r3, #7
 8009054:	4416      	add	r6, r2
 8009056:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
 800905a:	f340 828e 	ble.w	800957a <_svfprintf_r+0x131a>
 800905e:	aa1e      	add	r2, sp, #120	; 0x78
 8009060:	4659      	mov	r1, fp
 8009062:	9802      	ldr	r0, [sp, #8]
 8009064:	f001 fcff 	bl	800aa66 <__ssprint_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	f040 82a7 	bne.w	80095bc <_svfprintf_r+0x135c>
 800906e:	ac21      	add	r4, sp, #132	; 0x84
 8009070:	e666      	b.n	8008d40 <_svfprintf_r+0xae0>
 8009072:	aa1e      	add	r2, sp, #120	; 0x78
 8009074:	4659      	mov	r1, fp
 8009076:	9802      	ldr	r0, [sp, #8]
 8009078:	f001 fcf5 	bl	800aa66 <__ssprint_r>
 800907c:	2800      	cmp	r0, #0
 800907e:	f040 829d 	bne.w	80095bc <_svfprintf_r+0x135c>
 8009082:	ac21      	add	r4, sp, #132	; 0x84
 8009084:	e7be      	b.n	8009004 <_svfprintf_r+0xda4>
 8009086:	aa1e      	add	r2, sp, #120	; 0x78
 8009088:	4659      	mov	r1, fp
 800908a:	9802      	ldr	r0, [sp, #8]
 800908c:	f001 fceb 	bl	800aa66 <__ssprint_r>
 8009090:	2800      	cmp	r0, #0
 8009092:	f040 8293 	bne.w	80095bc <_svfprintf_r+0x135c>
 8009096:	ac21      	add	r4, sp, #132	; 0x84
 8009098:	e7c9      	b.n	800902e <_svfprintf_r+0xdce>
 800909a:	3210      	adds	r2, #16
 800909c:	2b07      	cmp	r3, #7
 800909e:	f8c4 8004 	str.w	r8, [r4, #4]
 80090a2:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80090a6:	dd08      	ble.n	80090ba <_svfprintf_r+0xe5a>
 80090a8:	aa1e      	add	r2, sp, #120	; 0x78
 80090aa:	4659      	mov	r1, fp
 80090ac:	9802      	ldr	r0, [sp, #8]
 80090ae:	f001 fcda 	bl	800aa66 <__ssprint_r>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f040 8282 	bne.w	80095bc <_svfprintf_r+0x135c>
 80090b8:	a921      	add	r1, sp, #132	; 0x84
 80090ba:	3e10      	subs	r6, #16
 80090bc:	460c      	mov	r4, r1
 80090be:	e7be      	b.n	800903e <_svfprintf_r+0xdde>
 80090c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090c2:	2a00      	cmp	r2, #0
 80090c4:	dc7c      	bgt.n	80091c0 <_svfprintf_r+0xf60>
 80090c6:	4a3c      	ldr	r2, [pc, #240]	; (80091b8 <_svfprintf_r+0xf58>)
 80090c8:	6022      	str	r2, [r4, #0]
 80090ca:	2201      	movs	r2, #1
 80090cc:	4413      	add	r3, r2
 80090ce:	9320      	str	r3, [sp, #128]	; 0x80
 80090d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090d2:	6062      	str	r2, [r4, #4]
 80090d4:	4413      	add	r3, r2
 80090d6:	2b07      	cmp	r3, #7
 80090d8:	931f      	str	r3, [sp, #124]	; 0x7c
 80090da:	dc46      	bgt.n	800916a <_svfprintf_r+0xf0a>
 80090dc:	3408      	adds	r4, #8
 80090de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80090e0:	b923      	cbnz	r3, 80090ec <_svfprintf_r+0xe8c>
 80090e2:	9b03      	ldr	r3, [sp, #12]
 80090e4:	b913      	cbnz	r3, 80090ec <_svfprintf_r+0xe8c>
 80090e6:	07ea      	lsls	r2, r5, #31
 80090e8:	f57f ae2a 	bpl.w	8008d40 <_svfprintf_r+0xae0>
 80090ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f2:	6063      	str	r3, [r4, #4]
 80090f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80090f8:	4413      	add	r3, r2
 80090fa:	9320      	str	r3, [sp, #128]	; 0x80
 80090fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80090fe:	3301      	adds	r3, #1
 8009100:	2b07      	cmp	r3, #7
 8009102:	931f      	str	r3, [sp, #124]	; 0x7c
 8009104:	dc3b      	bgt.n	800917e <_svfprintf_r+0xf1e>
 8009106:	f104 0308 	add.w	r3, r4, #8
 800910a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800910c:	2e00      	cmp	r6, #0
 800910e:	da1b      	bge.n	8009148 <_svfprintf_r+0xee8>
 8009110:	4f2a      	ldr	r7, [pc, #168]	; (80091bc <_svfprintf_r+0xf5c>)
 8009112:	4276      	negs	r6, r6
 8009114:	461a      	mov	r2, r3
 8009116:	2410      	movs	r4, #16
 8009118:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	; 0x7c
 800911c:	2e10      	cmp	r6, #16
 800911e:	f101 0101 	add.w	r1, r1, #1
 8009122:	f103 0308 	add.w	r3, r3, #8
 8009126:	6017      	str	r7, [r2, #0]
 8009128:	dc33      	bgt.n	8009192 <_svfprintf_r+0xf32>
 800912a:	6056      	str	r6, [r2, #4]
 800912c:	2907      	cmp	r1, #7
 800912e:	4406      	add	r6, r0
 8009130:	e9cd 161f 	strd	r1, r6, [sp, #124]	; 0x7c
 8009134:	dd08      	ble.n	8009148 <_svfprintf_r+0xee8>
 8009136:	aa1e      	add	r2, sp, #120	; 0x78
 8009138:	4659      	mov	r1, fp
 800913a:	9802      	ldr	r0, [sp, #8]
 800913c:	f001 fc93 	bl	800aa66 <__ssprint_r>
 8009140:	2800      	cmp	r0, #0
 8009142:	f040 823b 	bne.w	80095bc <_svfprintf_r+0x135c>
 8009146:	ab21      	add	r3, sp, #132	; 0x84
 8009148:	9a03      	ldr	r2, [sp, #12]
 800914a:	605a      	str	r2, [r3, #4]
 800914c:	9903      	ldr	r1, [sp, #12]
 800914e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009150:	f8c3 9000 	str.w	r9, [r3]
 8009154:	440a      	add	r2, r1
 8009156:	9220      	str	r2, [sp, #128]	; 0x80
 8009158:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800915a:	3201      	adds	r2, #1
 800915c:	2a07      	cmp	r2, #7
 800915e:	921f      	str	r2, [sp, #124]	; 0x7c
 8009160:	f73f af7d 	bgt.w	800905e <_svfprintf_r+0xdfe>
 8009164:	f103 0408 	add.w	r4, r3, #8
 8009168:	e5ea      	b.n	8008d40 <_svfprintf_r+0xae0>
 800916a:	aa1e      	add	r2, sp, #120	; 0x78
 800916c:	4659      	mov	r1, fp
 800916e:	9802      	ldr	r0, [sp, #8]
 8009170:	f001 fc79 	bl	800aa66 <__ssprint_r>
 8009174:	2800      	cmp	r0, #0
 8009176:	f040 8221 	bne.w	80095bc <_svfprintf_r+0x135c>
 800917a:	ac21      	add	r4, sp, #132	; 0x84
 800917c:	e7af      	b.n	80090de <_svfprintf_r+0xe7e>
 800917e:	aa1e      	add	r2, sp, #120	; 0x78
 8009180:	4659      	mov	r1, fp
 8009182:	9802      	ldr	r0, [sp, #8]
 8009184:	f001 fc6f 	bl	800aa66 <__ssprint_r>
 8009188:	2800      	cmp	r0, #0
 800918a:	f040 8217 	bne.w	80095bc <_svfprintf_r+0x135c>
 800918e:	ab21      	add	r3, sp, #132	; 0x84
 8009190:	e7bb      	b.n	800910a <_svfprintf_r+0xeaa>
 8009192:	3010      	adds	r0, #16
 8009194:	2907      	cmp	r1, #7
 8009196:	6054      	str	r4, [r2, #4]
 8009198:	e9cd 101f 	strd	r1, r0, [sp, #124]	; 0x7c
 800919c:	dd08      	ble.n	80091b0 <_svfprintf_r+0xf50>
 800919e:	aa1e      	add	r2, sp, #120	; 0x78
 80091a0:	4659      	mov	r1, fp
 80091a2:	9802      	ldr	r0, [sp, #8]
 80091a4:	f001 fc5f 	bl	800aa66 <__ssprint_r>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	f040 8207 	bne.w	80095bc <_svfprintf_r+0x135c>
 80091ae:	ab21      	add	r3, sp, #132	; 0x84
 80091b0:	3e10      	subs	r6, #16
 80091b2:	461a      	mov	r2, r3
 80091b4:	e7b0      	b.n	8009118 <_svfprintf_r+0xeb8>
 80091b6:	bf00      	nop
 80091b8:	0800b1f2 	.word	0x0800b1f2
 80091bc:	0800b204 	.word	0x0800b204
 80091c0:	9a03      	ldr	r2, [sp, #12]
 80091c2:	42b2      	cmp	r2, r6
 80091c4:	bfa8      	it	ge
 80091c6:	4632      	movge	r2, r6
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	4690      	mov	r8, r2
 80091cc:	dd0a      	ble.n	80091e4 <_svfprintf_r+0xf84>
 80091ce:	4413      	add	r3, r2
 80091d0:	9320      	str	r3, [sp, #128]	; 0x80
 80091d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091d4:	3301      	adds	r3, #1
 80091d6:	2b07      	cmp	r3, #7
 80091d8:	e9c4 9200 	strd	r9, r2, [r4]
 80091dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80091de:	f300 808a 	bgt.w	80092f6 <_svfprintf_r+0x1096>
 80091e2:	3408      	adds	r4, #8
 80091e4:	f1b8 0f00 	cmp.w	r8, #0
 80091e8:	bfac      	ite	ge
 80091ea:	eba6 0808 	subge.w	r8, r6, r8
 80091ee:	46b0      	movlt	r8, r6
 80091f0:	f1b8 0f00 	cmp.w	r8, #0
 80091f4:	dd1b      	ble.n	800922e <_svfprintf_r+0xfce>
 80091f6:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 80091fa:	489a      	ldr	r0, [pc, #616]	; (8009464 <_svfprintf_r+0x1204>)
 80091fc:	6020      	str	r0, [r4, #0]
 80091fe:	f1b8 0f10 	cmp.w	r8, #16
 8009202:	f102 0201 	add.w	r2, r2, #1
 8009206:	f104 0108 	add.w	r1, r4, #8
 800920a:	dc7e      	bgt.n	800930a <_svfprintf_r+0x10aa>
 800920c:	4443      	add	r3, r8
 800920e:	2a07      	cmp	r2, #7
 8009210:	f8c4 8004 	str.w	r8, [r4, #4]
 8009214:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8009218:	f340 808b 	ble.w	8009332 <_svfprintf_r+0x10d2>
 800921c:	aa1e      	add	r2, sp, #120	; 0x78
 800921e:	4659      	mov	r1, fp
 8009220:	9802      	ldr	r0, [sp, #8]
 8009222:	f001 fc20 	bl	800aa66 <__ssprint_r>
 8009226:	2800      	cmp	r0, #0
 8009228:	f040 81c8 	bne.w	80095bc <_svfprintf_r+0x135c>
 800922c:	ac21      	add	r4, sp, #132	; 0x84
 800922e:	056b      	lsls	r3, r5, #21
 8009230:	444e      	add	r6, r9
 8009232:	d509      	bpl.n	8009248 <_svfprintf_r+0xfe8>
 8009234:	9b05      	ldr	r3, [sp, #20]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d17d      	bne.n	8009336 <_svfprintf_r+0x10d6>
 800923a:	2f00      	cmp	r7, #0
 800923c:	d17d      	bne.n	800933a <_svfprintf_r+0x10da>
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	444b      	add	r3, r9
 8009242:	429e      	cmp	r6, r3
 8009244:	bf28      	it	cs
 8009246:	461e      	movcs	r6, r3
 8009248:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800924a:	9a03      	ldr	r2, [sp, #12]
 800924c:	4293      	cmp	r3, r2
 800924e:	db01      	blt.n	8009254 <_svfprintf_r+0xff4>
 8009250:	07ef      	lsls	r7, r5, #31
 8009252:	d50e      	bpl.n	8009272 <_svfprintf_r+0x1012>
 8009254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925a:	6063      	str	r3, [r4, #4]
 800925c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800925e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009260:	4413      	add	r3, r2
 8009262:	9320      	str	r3, [sp, #128]	; 0x80
 8009264:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009266:	3301      	adds	r3, #1
 8009268:	2b07      	cmp	r3, #7
 800926a:	931f      	str	r3, [sp, #124]	; 0x7c
 800926c:	f300 80e5 	bgt.w	800943a <_svfprintf_r+0x11da>
 8009270:	3408      	adds	r4, #8
 8009272:	9b03      	ldr	r3, [sp, #12]
 8009274:	9a03      	ldr	r2, [sp, #12]
 8009276:	eb09 0703 	add.w	r7, r9, r3
 800927a:	1bbb      	subs	r3, r7, r6
 800927c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800927e:	1bd7      	subs	r7, r2, r7
 8009280:	429f      	cmp	r7, r3
 8009282:	bfa8      	it	ge
 8009284:	461f      	movge	r7, r3
 8009286:	2f00      	cmp	r7, #0
 8009288:	dd0b      	ble.n	80092a2 <_svfprintf_r+0x1042>
 800928a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800928c:	443b      	add	r3, r7
 800928e:	9320      	str	r3, [sp, #128]	; 0x80
 8009290:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009292:	3301      	adds	r3, #1
 8009294:	2b07      	cmp	r3, #7
 8009296:	e9c4 6700 	strd	r6, r7, [r4]
 800929a:	931f      	str	r3, [sp, #124]	; 0x7c
 800929c:	f300 80d7 	bgt.w	800944e <_svfprintf_r+0x11ee>
 80092a0:	3408      	adds	r4, #8
 80092a2:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	2f00      	cmp	r7, #0
 80092a8:	eba3 0606 	sub.w	r6, r3, r6
 80092ac:	bfa8      	it	ge
 80092ae:	1bf6      	subge	r6, r6, r7
 80092b0:	2e00      	cmp	r6, #0
 80092b2:	f77f ad45 	ble.w	8008d40 <_svfprintf_r+0xae0>
 80092b6:	4f6b      	ldr	r7, [pc, #428]	; (8009464 <_svfprintf_r+0x1204>)
 80092b8:	f04f 0810 	mov.w	r8, #16
 80092bc:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 80092c0:	2e10      	cmp	r6, #16
 80092c2:	f103 0301 	add.w	r3, r3, #1
 80092c6:	f104 0108 	add.w	r1, r4, #8
 80092ca:	6027      	str	r7, [r4, #0]
 80092cc:	f77f aec0 	ble.w	8009050 <_svfprintf_r+0xdf0>
 80092d0:	3210      	adds	r2, #16
 80092d2:	2b07      	cmp	r3, #7
 80092d4:	f8c4 8004 	str.w	r8, [r4, #4]
 80092d8:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80092dc:	dd08      	ble.n	80092f0 <_svfprintf_r+0x1090>
 80092de:	aa1e      	add	r2, sp, #120	; 0x78
 80092e0:	4659      	mov	r1, fp
 80092e2:	9802      	ldr	r0, [sp, #8]
 80092e4:	f001 fbbf 	bl	800aa66 <__ssprint_r>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	f040 8167 	bne.w	80095bc <_svfprintf_r+0x135c>
 80092ee:	a921      	add	r1, sp, #132	; 0x84
 80092f0:	3e10      	subs	r6, #16
 80092f2:	460c      	mov	r4, r1
 80092f4:	e7e2      	b.n	80092bc <_svfprintf_r+0x105c>
 80092f6:	aa1e      	add	r2, sp, #120	; 0x78
 80092f8:	4659      	mov	r1, fp
 80092fa:	9802      	ldr	r0, [sp, #8]
 80092fc:	f001 fbb3 	bl	800aa66 <__ssprint_r>
 8009300:	2800      	cmp	r0, #0
 8009302:	f040 815b 	bne.w	80095bc <_svfprintf_r+0x135c>
 8009306:	ac21      	add	r4, sp, #132	; 0x84
 8009308:	e76c      	b.n	80091e4 <_svfprintf_r+0xf84>
 800930a:	2010      	movs	r0, #16
 800930c:	4403      	add	r3, r0
 800930e:	2a07      	cmp	r2, #7
 8009310:	6060      	str	r0, [r4, #4]
 8009312:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 8009316:	dd08      	ble.n	800932a <_svfprintf_r+0x10ca>
 8009318:	aa1e      	add	r2, sp, #120	; 0x78
 800931a:	4659      	mov	r1, fp
 800931c:	9802      	ldr	r0, [sp, #8]
 800931e:	f001 fba2 	bl	800aa66 <__ssprint_r>
 8009322:	2800      	cmp	r0, #0
 8009324:	f040 814a 	bne.w	80095bc <_svfprintf_r+0x135c>
 8009328:	a921      	add	r1, sp, #132	; 0x84
 800932a:	f1a8 0810 	sub.w	r8, r8, #16
 800932e:	460c      	mov	r4, r1
 8009330:	e761      	b.n	80091f6 <_svfprintf_r+0xf96>
 8009332:	460c      	mov	r4, r1
 8009334:	e77b      	b.n	800922e <_svfprintf_r+0xfce>
 8009336:	2f00      	cmp	r7, #0
 8009338:	d04e      	beq.n	80093d8 <_svfprintf_r+0x1178>
 800933a:	3f01      	subs	r7, #1
 800933c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009342:	6063      	str	r3, [r4, #4]
 8009344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009346:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009348:	4413      	add	r3, r2
 800934a:	9320      	str	r3, [sp, #128]	; 0x80
 800934c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800934e:	3301      	adds	r3, #1
 8009350:	2b07      	cmp	r3, #7
 8009352:	931f      	str	r3, [sp, #124]	; 0x7c
 8009354:	dc47      	bgt.n	80093e6 <_svfprintf_r+0x1186>
 8009356:	3408      	adds	r4, #8
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	444b      	add	r3, r9
 800935c:	1b9a      	subs	r2, r3, r6
 800935e:	9b07      	ldr	r3, [sp, #28]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	4293      	cmp	r3, r2
 8009364:	bfa8      	it	ge
 8009366:	4613      	movge	r3, r2
 8009368:	2b00      	cmp	r3, #0
 800936a:	4698      	mov	r8, r3
 800936c:	dd0a      	ble.n	8009384 <_svfprintf_r+0x1124>
 800936e:	e9c4 6300 	strd	r6, r3, [r4]
 8009372:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009374:	4443      	add	r3, r8
 8009376:	9320      	str	r3, [sp, #128]	; 0x80
 8009378:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800937a:	3301      	adds	r3, #1
 800937c:	2b07      	cmp	r3, #7
 800937e:	931f      	str	r3, [sp, #124]	; 0x7c
 8009380:	dc3b      	bgt.n	80093fa <_svfprintf_r+0x119a>
 8009382:	3408      	adds	r4, #8
 8009384:	9b07      	ldr	r3, [sp, #28]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	f1b8 0f00 	cmp.w	r8, #0
 800938c:	bfac      	ite	ge
 800938e:	eba3 0808 	subge.w	r8, r3, r8
 8009392:	4698      	movlt	r8, r3
 8009394:	f1b8 0f00 	cmp.w	r8, #0
 8009398:	dd1a      	ble.n	80093d0 <_svfprintf_r+0x1170>
 800939a:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	; 0x7c
 800939e:	4831      	ldr	r0, [pc, #196]	; (8009464 <_svfprintf_r+0x1204>)
 80093a0:	6020      	str	r0, [r4, #0]
 80093a2:	f1b8 0f10 	cmp.w	r8, #16
 80093a6:	f102 0201 	add.w	r2, r2, #1
 80093aa:	f104 0108 	add.w	r1, r4, #8
 80093ae:	dc2e      	bgt.n	800940e <_svfprintf_r+0x11ae>
 80093b0:	4443      	add	r3, r8
 80093b2:	2a07      	cmp	r2, #7
 80093b4:	f8c4 8004 	str.w	r8, [r4, #4]
 80093b8:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 80093bc:	dd3b      	ble.n	8009436 <_svfprintf_r+0x11d6>
 80093be:	aa1e      	add	r2, sp, #120	; 0x78
 80093c0:	4659      	mov	r1, fp
 80093c2:	9802      	ldr	r0, [sp, #8]
 80093c4:	f001 fb4f 	bl	800aa66 <__ssprint_r>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f040 80f7 	bne.w	80095bc <_svfprintf_r+0x135c>
 80093ce:	ac21      	add	r4, sp, #132	; 0x84
 80093d0:	9b07      	ldr	r3, [sp, #28]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	441e      	add	r6, r3
 80093d6:	e72d      	b.n	8009234 <_svfprintf_r+0xfd4>
 80093d8:	9b07      	ldr	r3, [sp, #28]
 80093da:	3b01      	subs	r3, #1
 80093dc:	9307      	str	r3, [sp, #28]
 80093de:	9b05      	ldr	r3, [sp, #20]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	e7aa      	b.n	800933c <_svfprintf_r+0x10dc>
 80093e6:	aa1e      	add	r2, sp, #120	; 0x78
 80093e8:	4659      	mov	r1, fp
 80093ea:	9802      	ldr	r0, [sp, #8]
 80093ec:	f001 fb3b 	bl	800aa66 <__ssprint_r>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	f040 80e3 	bne.w	80095bc <_svfprintf_r+0x135c>
 80093f6:	ac21      	add	r4, sp, #132	; 0x84
 80093f8:	e7ae      	b.n	8009358 <_svfprintf_r+0x10f8>
 80093fa:	aa1e      	add	r2, sp, #120	; 0x78
 80093fc:	4659      	mov	r1, fp
 80093fe:	9802      	ldr	r0, [sp, #8]
 8009400:	f001 fb31 	bl	800aa66 <__ssprint_r>
 8009404:	2800      	cmp	r0, #0
 8009406:	f040 80d9 	bne.w	80095bc <_svfprintf_r+0x135c>
 800940a:	ac21      	add	r4, sp, #132	; 0x84
 800940c:	e7ba      	b.n	8009384 <_svfprintf_r+0x1124>
 800940e:	2010      	movs	r0, #16
 8009410:	4403      	add	r3, r0
 8009412:	2a07      	cmp	r2, #7
 8009414:	6060      	str	r0, [r4, #4]
 8009416:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
 800941a:	dd08      	ble.n	800942e <_svfprintf_r+0x11ce>
 800941c:	aa1e      	add	r2, sp, #120	; 0x78
 800941e:	4659      	mov	r1, fp
 8009420:	9802      	ldr	r0, [sp, #8]
 8009422:	f001 fb20 	bl	800aa66 <__ssprint_r>
 8009426:	2800      	cmp	r0, #0
 8009428:	f040 80c8 	bne.w	80095bc <_svfprintf_r+0x135c>
 800942c:	a921      	add	r1, sp, #132	; 0x84
 800942e:	f1a8 0810 	sub.w	r8, r8, #16
 8009432:	460c      	mov	r4, r1
 8009434:	e7b1      	b.n	800939a <_svfprintf_r+0x113a>
 8009436:	460c      	mov	r4, r1
 8009438:	e7ca      	b.n	80093d0 <_svfprintf_r+0x1170>
 800943a:	aa1e      	add	r2, sp, #120	; 0x78
 800943c:	4659      	mov	r1, fp
 800943e:	9802      	ldr	r0, [sp, #8]
 8009440:	f001 fb11 	bl	800aa66 <__ssprint_r>
 8009444:	2800      	cmp	r0, #0
 8009446:	f040 80b9 	bne.w	80095bc <_svfprintf_r+0x135c>
 800944a:	ac21      	add	r4, sp, #132	; 0x84
 800944c:	e711      	b.n	8009272 <_svfprintf_r+0x1012>
 800944e:	aa1e      	add	r2, sp, #120	; 0x78
 8009450:	4659      	mov	r1, fp
 8009452:	9802      	ldr	r0, [sp, #8]
 8009454:	f001 fb07 	bl	800aa66 <__ssprint_r>
 8009458:	2800      	cmp	r0, #0
 800945a:	f040 80af 	bne.w	80095bc <_svfprintf_r+0x135c>
 800945e:	ac21      	add	r4, sp, #132	; 0x84
 8009460:	e71f      	b.n	80092a2 <_svfprintf_r+0x1042>
 8009462:	bf00      	nop
 8009464:	0800b204 	.word	0x0800b204
 8009468:	9803      	ldr	r0, [sp, #12]
 800946a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800946c:	2801      	cmp	r0, #1
 800946e:	f103 0201 	add.w	r2, r3, #1
 8009472:	f101 0101 	add.w	r1, r1, #1
 8009476:	f104 0308 	add.w	r3, r4, #8
 800947a:	dc01      	bgt.n	8009480 <_svfprintf_r+0x1220>
 800947c:	07e8      	lsls	r0, r5, #31
 800947e:	d571      	bpl.n	8009564 <_svfprintf_r+0x1304>
 8009480:	2001      	movs	r0, #1
 8009482:	2907      	cmp	r1, #7
 8009484:	f8c4 9000 	str.w	r9, [r4]
 8009488:	6060      	str	r0, [r4, #4]
 800948a:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 800948e:	dd08      	ble.n	80094a2 <_svfprintf_r+0x1242>
 8009490:	aa1e      	add	r2, sp, #120	; 0x78
 8009492:	4659      	mov	r1, fp
 8009494:	9802      	ldr	r0, [sp, #8]
 8009496:	f001 fae6 	bl	800aa66 <__ssprint_r>
 800949a:	2800      	cmp	r0, #0
 800949c:	f040 808e 	bne.w	80095bc <_svfprintf_r+0x135c>
 80094a0:	ab21      	add	r3, sp, #132	; 0x84
 80094a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a8:	605a      	str	r2, [r3, #4]
 80094aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094ae:	440a      	add	r2, r1
 80094b0:	9220      	str	r2, [sp, #128]	; 0x80
 80094b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80094b4:	3201      	adds	r2, #1
 80094b6:	2a07      	cmp	r2, #7
 80094b8:	921f      	str	r2, [sp, #124]	; 0x7c
 80094ba:	dc25      	bgt.n	8009508 <_svfprintf_r+0x12a8>
 80094bc:	3308      	adds	r3, #8
 80094be:	9a03      	ldr	r2, [sp, #12]
 80094c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80094c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c8:	f102 34ff 	add.w	r4, r2, #4294967295
 80094cc:	d025      	beq.n	800951a <_svfprintf_r+0x12ba>
 80094ce:	f109 0201 	add.w	r2, r9, #1
 80094d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80094d4:	9803      	ldr	r0, [sp, #12]
 80094d6:	e9c3 2400 	strd	r2, r4, [r3]
 80094da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094dc:	3101      	adds	r1, #1
 80094de:	3a01      	subs	r2, #1
 80094e0:	4402      	add	r2, r0
 80094e2:	2907      	cmp	r1, #7
 80094e4:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 80094e8:	dd45      	ble.n	8009576 <_svfprintf_r+0x1316>
 80094ea:	aa1e      	add	r2, sp, #120	; 0x78
 80094ec:	4659      	mov	r1, fp
 80094ee:	9802      	ldr	r0, [sp, #8]
 80094f0:	f001 fab9 	bl	800aa66 <__ssprint_r>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d161      	bne.n	80095bc <_svfprintf_r+0x135c>
 80094f8:	ab21      	add	r3, sp, #132	; 0x84
 80094fa:	aa1a      	add	r2, sp, #104	; 0x68
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009500:	605a      	str	r2, [r3, #4]
 8009502:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009504:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009506:	e625      	b.n	8009154 <_svfprintf_r+0xef4>
 8009508:	aa1e      	add	r2, sp, #120	; 0x78
 800950a:	4659      	mov	r1, fp
 800950c:	9802      	ldr	r0, [sp, #8]
 800950e:	f001 faaa 	bl	800aa66 <__ssprint_r>
 8009512:	2800      	cmp	r0, #0
 8009514:	d152      	bne.n	80095bc <_svfprintf_r+0x135c>
 8009516:	ab21      	add	r3, sp, #132	; 0x84
 8009518:	e7d1      	b.n	80094be <_svfprintf_r+0x125e>
 800951a:	2c00      	cmp	r4, #0
 800951c:	dded      	ble.n	80094fa <_svfprintf_r+0x129a>
 800951e:	4e3e      	ldr	r6, [pc, #248]	; (8009618 <_svfprintf_r+0x13b8>)
 8009520:	2710      	movs	r7, #16
 8009522:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	; 0x7c
 8009526:	2c10      	cmp	r4, #16
 8009528:	f102 0201 	add.w	r2, r2, #1
 800952c:	f103 0008 	add.w	r0, r3, #8
 8009530:	601e      	str	r6, [r3, #0]
 8009532:	dc07      	bgt.n	8009544 <_svfprintf_r+0x12e4>
 8009534:	605c      	str	r4, [r3, #4]
 8009536:	2a07      	cmp	r2, #7
 8009538:	440c      	add	r4, r1
 800953a:	e9cd 241f 	strd	r2, r4, [sp, #124]	; 0x7c
 800953e:	dcd4      	bgt.n	80094ea <_svfprintf_r+0x128a>
 8009540:	4603      	mov	r3, r0
 8009542:	e7da      	b.n	80094fa <_svfprintf_r+0x129a>
 8009544:	3110      	adds	r1, #16
 8009546:	2a07      	cmp	r2, #7
 8009548:	605f      	str	r7, [r3, #4]
 800954a:	e9cd 211f 	strd	r2, r1, [sp, #124]	; 0x7c
 800954e:	dd06      	ble.n	800955e <_svfprintf_r+0x12fe>
 8009550:	aa1e      	add	r2, sp, #120	; 0x78
 8009552:	4659      	mov	r1, fp
 8009554:	9802      	ldr	r0, [sp, #8]
 8009556:	f001 fa86 	bl	800aa66 <__ssprint_r>
 800955a:	bb78      	cbnz	r0, 80095bc <_svfprintf_r+0x135c>
 800955c:	a821      	add	r0, sp, #132	; 0x84
 800955e:	3c10      	subs	r4, #16
 8009560:	4603      	mov	r3, r0
 8009562:	e7de      	b.n	8009522 <_svfprintf_r+0x12c2>
 8009564:	2001      	movs	r0, #1
 8009566:	2907      	cmp	r1, #7
 8009568:	f8c4 9000 	str.w	r9, [r4]
 800956c:	6060      	str	r0, [r4, #4]
 800956e:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
 8009572:	ddc2      	ble.n	80094fa <_svfprintf_r+0x129a>
 8009574:	e7b9      	b.n	80094ea <_svfprintf_r+0x128a>
 8009576:	3308      	adds	r3, #8
 8009578:	e7bf      	b.n	80094fa <_svfprintf_r+0x129a>
 800957a:	460c      	mov	r4, r1
 800957c:	f7ff bbe0 	b.w	8008d40 <_svfprintf_r+0xae0>
 8009580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009582:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009584:	1a9d      	subs	r5, r3, r2
 8009586:	2d00      	cmp	r5, #0
 8009588:	f77f abdd 	ble.w	8008d46 <_svfprintf_r+0xae6>
 800958c:	4e23      	ldr	r6, [pc, #140]	; (800961c <_svfprintf_r+0x13bc>)
 800958e:	2710      	movs	r7, #16
 8009590:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 8009594:	2d10      	cmp	r5, #16
 8009596:	f103 0301 	add.w	r3, r3, #1
 800959a:	6026      	str	r6, [r4, #0]
 800959c:	dc18      	bgt.n	80095d0 <_svfprintf_r+0x1370>
 800959e:	6065      	str	r5, [r4, #4]
 80095a0:	2b07      	cmp	r3, #7
 80095a2:	4415      	add	r5, r2
 80095a4:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
 80095a8:	f77f abcd 	ble.w	8008d46 <_svfprintf_r+0xae6>
 80095ac:	aa1e      	add	r2, sp, #120	; 0x78
 80095ae:	4659      	mov	r1, fp
 80095b0:	9802      	ldr	r0, [sp, #8]
 80095b2:	f001 fa58 	bl	800aa66 <__ssprint_r>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f43f abc5 	beq.w	8008d46 <_svfprintf_r+0xae6>
 80095bc:	f1ba 0f00 	cmp.w	sl, #0
 80095c0:	f43f a8d2 	beq.w	8008768 <_svfprintf_r+0x508>
 80095c4:	4651      	mov	r1, sl
 80095c6:	9802      	ldr	r0, [sp, #8]
 80095c8:	f000 fe76 	bl	800a2b8 <_free_r>
 80095cc:	f7ff b8cc 	b.w	8008768 <_svfprintf_r+0x508>
 80095d0:	3210      	adds	r2, #16
 80095d2:	2b07      	cmp	r3, #7
 80095d4:	6067      	str	r7, [r4, #4]
 80095d6:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
 80095da:	dc02      	bgt.n	80095e2 <_svfprintf_r+0x1382>
 80095dc:	3408      	adds	r4, #8
 80095de:	3d10      	subs	r5, #16
 80095e0:	e7d6      	b.n	8009590 <_svfprintf_r+0x1330>
 80095e2:	aa1e      	add	r2, sp, #120	; 0x78
 80095e4:	4659      	mov	r1, fp
 80095e6:	9802      	ldr	r0, [sp, #8]
 80095e8:	f001 fa3d 	bl	800aa66 <__ssprint_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d1e5      	bne.n	80095bc <_svfprintf_r+0x135c>
 80095f0:	ac21      	add	r4, sp, #132	; 0x84
 80095f2:	e7f4      	b.n	80095de <_svfprintf_r+0x137e>
 80095f4:	4651      	mov	r1, sl
 80095f6:	9802      	ldr	r0, [sp, #8]
 80095f8:	f000 fe5e 	bl	800a2b8 <_free_r>
 80095fc:	f7ff bbbb 	b.w	8008d76 <_svfprintf_r+0xb16>
 8009600:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009602:	2b00      	cmp	r3, #0
 8009604:	f43f a8b0 	beq.w	8008768 <_svfprintf_r+0x508>
 8009608:	aa1e      	add	r2, sp, #120	; 0x78
 800960a:	4659      	mov	r1, fp
 800960c:	9802      	ldr	r0, [sp, #8]
 800960e:	f001 fa2a 	bl	800aa66 <__ssprint_r>
 8009612:	f7ff b8a9 	b.w	8008768 <_svfprintf_r+0x508>
 8009616:	bf00      	nop
 8009618:	0800b204 	.word	0x0800b204
 800961c:	0800b1f4 	.word	0x0800b1f4

08009620 <sysconf>:
 8009620:	2808      	cmp	r0, #8
 8009622:	b508      	push	{r3, lr}
 8009624:	d006      	beq.n	8009634 <sysconf+0x14>
 8009626:	f7fe fb65 	bl	8007cf4 <__errno>
 800962a:	2316      	movs	r3, #22
 800962c:	6003      	str	r3, [r0, #0]
 800962e:	f04f 30ff 	mov.w	r0, #4294967295
 8009632:	bd08      	pop	{r3, pc}
 8009634:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009638:	e7fb      	b.n	8009632 <sysconf+0x12>
	...

0800963c <register_fini>:
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <register_fini+0xc>)
 800963e:	b113      	cbz	r3, 8009646 <register_fini+0xa>
 8009640:	4802      	ldr	r0, [pc, #8]	; (800964c <register_fini+0x10>)
 8009642:	f000 b805 	b.w	8009650 <atexit>
 8009646:	4770      	bx	lr
 8009648:	00000000 	.word	0x00000000
 800964c:	0800a1e9 	.word	0x0800a1e9

08009650 <atexit>:
 8009650:	2300      	movs	r3, #0
 8009652:	4601      	mov	r1, r0
 8009654:	461a      	mov	r2, r3
 8009656:	4618      	mov	r0, r3
 8009658:	f001 ba7e 	b.w	800ab58 <__register_exitproc>

0800965c <quorem>:
 800965c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	6903      	ldr	r3, [r0, #16]
 8009662:	690c      	ldr	r4, [r1, #16]
 8009664:	42a3      	cmp	r3, r4
 8009666:	4680      	mov	r8, r0
 8009668:	f2c0 8082 	blt.w	8009770 <quorem+0x114>
 800966c:	3c01      	subs	r4, #1
 800966e:	f101 0714 	add.w	r7, r1, #20
 8009672:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009676:	f100 0614 	add.w	r6, r0, #20
 800967a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800967e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009682:	eb06 030c 	add.w	r3, r6, ip
 8009686:	3501      	adds	r5, #1
 8009688:	eb07 090c 	add.w	r9, r7, ip
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009692:	b395      	cbz	r5, 80096fa <quorem+0x9e>
 8009694:	f04f 0a00 	mov.w	sl, #0
 8009698:	4638      	mov	r0, r7
 800969a:	46b6      	mov	lr, r6
 800969c:	46d3      	mov	fp, sl
 800969e:	f850 2b04 	ldr.w	r2, [r0], #4
 80096a2:	b293      	uxth	r3, r2
 80096a4:	fb05 a303 	mla	r3, r5, r3, sl
 80096a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	ebab 0303 	sub.w	r3, fp, r3
 80096b2:	0c12      	lsrs	r2, r2, #16
 80096b4:	f8de b000 	ldr.w	fp, [lr]
 80096b8:	fb05 a202 	mla	r2, r5, r2, sl
 80096bc:	fa13 f38b 	uxtah	r3, r3, fp
 80096c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80096c4:	fa1f fb82 	uxth.w	fp, r2
 80096c8:	f8de 2000 	ldr.w	r2, [lr]
 80096cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80096d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096da:	4581      	cmp	r9, r0
 80096dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80096e0:	f84e 3b04 	str.w	r3, [lr], #4
 80096e4:	d2db      	bcs.n	800969e <quorem+0x42>
 80096e6:	f856 300c 	ldr.w	r3, [r6, ip]
 80096ea:	b933      	cbnz	r3, 80096fa <quorem+0x9e>
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	3b04      	subs	r3, #4
 80096f0:	429e      	cmp	r6, r3
 80096f2:	461a      	mov	r2, r3
 80096f4:	d330      	bcc.n	8009758 <quorem+0xfc>
 80096f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80096fa:	4640      	mov	r0, r8
 80096fc:	f001 f89e 	bl	800a83c <__mcmp>
 8009700:	2800      	cmp	r0, #0
 8009702:	db25      	blt.n	8009750 <quorem+0xf4>
 8009704:	3501      	adds	r5, #1
 8009706:	4630      	mov	r0, r6
 8009708:	f04f 0c00 	mov.w	ip, #0
 800970c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009710:	f8d0 e000 	ldr.w	lr, [r0]
 8009714:	b293      	uxth	r3, r2
 8009716:	ebac 0303 	sub.w	r3, ip, r3
 800971a:	0c12      	lsrs	r2, r2, #16
 800971c:	fa13 f38e 	uxtah	r3, r3, lr
 8009720:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009728:	b29b      	uxth	r3, r3
 800972a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800972e:	45b9      	cmp	r9, r7
 8009730:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009734:	f840 3b04 	str.w	r3, [r0], #4
 8009738:	d2e8      	bcs.n	800970c <quorem+0xb0>
 800973a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800973e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009742:	b92a      	cbnz	r2, 8009750 <quorem+0xf4>
 8009744:	3b04      	subs	r3, #4
 8009746:	429e      	cmp	r6, r3
 8009748:	461a      	mov	r2, r3
 800974a:	d30b      	bcc.n	8009764 <quorem+0x108>
 800974c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009750:	4628      	mov	r0, r5
 8009752:	b003      	add	sp, #12
 8009754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	3b04      	subs	r3, #4
 800975c:	2a00      	cmp	r2, #0
 800975e:	d1ca      	bne.n	80096f6 <quorem+0x9a>
 8009760:	3c01      	subs	r4, #1
 8009762:	e7c5      	b.n	80096f0 <quorem+0x94>
 8009764:	6812      	ldr	r2, [r2, #0]
 8009766:	3b04      	subs	r3, #4
 8009768:	2a00      	cmp	r2, #0
 800976a:	d1ef      	bne.n	800974c <quorem+0xf0>
 800976c:	3c01      	subs	r4, #1
 800976e:	e7ea      	b.n	8009746 <quorem+0xea>
 8009770:	2000      	movs	r0, #0
 8009772:	e7ee      	b.n	8009752 <quorem+0xf6>
 8009774:	0000      	movs	r0, r0
	...

08009778 <_dtoa_r>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	b095      	sub	sp, #84	; 0x54
 800977e:	ec57 6b10 	vmov	r6, r7, d0
 8009782:	9108      	str	r1, [sp, #32]
 8009784:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009786:	920a      	str	r2, [sp, #40]	; 0x28
 8009788:	4604      	mov	r4, r0
 800978a:	9311      	str	r3, [sp, #68]	; 0x44
 800978c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800978e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009792:	b141      	cbz	r1, 80097a6 <_dtoa_r+0x2e>
 8009794:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009796:	604a      	str	r2, [r1, #4]
 8009798:	2301      	movs	r3, #1
 800979a:	4093      	lsls	r3, r2
 800979c:	608b      	str	r3, [r1, #8]
 800979e:	f000 fe87 	bl	800a4b0 <_Bfree>
 80097a2:	2300      	movs	r3, #0
 80097a4:	6423      	str	r3, [r4, #64]	; 0x40
 80097a6:	1e3b      	subs	r3, r7, #0
 80097a8:	bfbb      	ittet	lt
 80097aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097ae:	9305      	strlt	r3, [sp, #20]
 80097b0:	2300      	movge	r3, #0
 80097b2:	2201      	movlt	r2, #1
 80097b4:	bfac      	ite	ge
 80097b6:	602b      	strge	r3, [r5, #0]
 80097b8:	602a      	strlt	r2, [r5, #0]
 80097ba:	4ba9      	ldr	r3, [pc, #676]	; (8009a60 <_dtoa_r+0x2e8>)
 80097bc:	9d05      	ldr	r5, [sp, #20]
 80097be:	43ab      	bics	r3, r5
 80097c0:	d11b      	bne.n	80097fa <_dtoa_r+0x82>
 80097c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097c4:	f242 730f 	movw	r3, #9999	; 0x270f
 80097c8:	6013      	str	r3, [r2, #0]
 80097ca:	9b04      	ldr	r3, [sp, #16]
 80097cc:	b923      	cbnz	r3, 80097d8 <_dtoa_r+0x60>
 80097ce:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80097d2:	2d00      	cmp	r5, #0
 80097d4:	f000 84d9 	beq.w	800a18a <_dtoa_r+0xa12>
 80097d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097da:	b90b      	cbnz	r3, 80097e0 <_dtoa_r+0x68>
 80097dc:	4ba1      	ldr	r3, [pc, #644]	; (8009a64 <_dtoa_r+0x2ec>)
 80097de:	e020      	b.n	8009822 <_dtoa_r+0xaa>
 80097e0:	4ba0      	ldr	r3, [pc, #640]	; (8009a64 <_dtoa_r+0x2ec>)
 80097e2:	9302      	str	r3, [sp, #8]
 80097e4:	3303      	adds	r3, #3
 80097e6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	9802      	ldr	r0, [sp, #8]
 80097ec:	b015      	add	sp, #84	; 0x54
 80097ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f2:	4b9d      	ldr	r3, [pc, #628]	; (8009a68 <_dtoa_r+0x2f0>)
 80097f4:	9302      	str	r3, [sp, #8]
 80097f6:	3308      	adds	r3, #8
 80097f8:	e7f5      	b.n	80097e6 <_dtoa_r+0x6e>
 80097fa:	ed9d 7b04 	vldr	d7, [sp, #16]
 80097fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009806:	ed8d 7b02 	vstr	d7, [sp, #8]
 800980a:	d10c      	bne.n	8009826 <_dtoa_r+0xae>
 800980c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800980e:	2301      	movs	r3, #1
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 84b5 	beq.w	800a184 <_dtoa_r+0xa0c>
 800981a:	4b94      	ldr	r3, [pc, #592]	; (8009a6c <_dtoa_r+0x2f4>)
 800981c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	3b01      	subs	r3, #1
 8009822:	9302      	str	r3, [sp, #8]
 8009824:	e7e1      	b.n	80097ea <_dtoa_r+0x72>
 8009826:	a913      	add	r1, sp, #76	; 0x4c
 8009828:	aa12      	add	r2, sp, #72	; 0x48
 800982a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800982e:	4620      	mov	r0, r4
 8009830:	f001 f87b 	bl	800a92a <__d2b>
 8009834:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8009838:	9001      	str	r0, [sp, #4]
 800983a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800983c:	2e00      	cmp	r6, #0
 800983e:	d046      	beq.n	80098ce <_dtoa_r+0x156>
 8009840:	9803      	ldr	r0, [sp, #12]
 8009842:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8009846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800984a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800984e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009852:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8009856:	2700      	movs	r7, #0
 8009858:	ee07 aa90 	vmov	s15, sl
 800985c:	ec43 2b16 	vmov	d6, r2, r3
 8009860:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8009864:	ed9f 4b78 	vldr	d4, [pc, #480]	; 8009a48 <_dtoa_r+0x2d0>
 8009868:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800986c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009870:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8009a50 <_dtoa_r+0x2d8>
 8009874:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009878:	eeb0 7b46 	vmov.f64	d7, d6
 800987c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8009a58 <_dtoa_r+0x2e0>
 8009880:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009884:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009888:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800988c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009890:	ee16 ba90 	vmov	fp, s13
 8009894:	d508      	bpl.n	80098a8 <_dtoa_r+0x130>
 8009896:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800989a:	eeb4 6b47 	vcmp.f64	d6, d7
 800989e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a2:	bf18      	it	ne
 80098a4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80098a8:	f1bb 0f16 	cmp.w	fp, #22
 80098ac:	d834      	bhi.n	8009918 <_dtoa_r+0x1a0>
 80098ae:	4b70      	ldr	r3, [pc, #448]	; (8009a70 <_dtoa_r+0x2f8>)
 80098b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098b4:	ed93 7b00 	vldr	d7, [r3]
 80098b8:	ed9d 6b04 	vldr	d6, [sp, #16]
 80098bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80098c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c4:	dd01      	ble.n	80098ca <_dtoa_r+0x152>
 80098c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098ca:	2300      	movs	r3, #0
 80098cc:	e025      	b.n	800991a <_dtoa_r+0x1a2>
 80098ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098d0:	eb01 0a03 	add.w	sl, r1, r3
 80098d4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80098d8:	2b20      	cmp	r3, #32
 80098da:	dd17      	ble.n	800990c <_dtoa_r+0x194>
 80098dc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80098e0:	9a04      	ldr	r2, [sp, #16]
 80098e2:	409d      	lsls	r5, r3
 80098e4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80098e8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ec:	432b      	orrs	r3, r5
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098fe:	9803      	ldr	r0, [sp, #12]
 8009900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009904:	2701      	movs	r7, #1
 8009906:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800990a:	e7a5      	b.n	8009858 <_dtoa_r+0xe0>
 800990c:	9a04      	ldr	r2, [sp, #16]
 800990e:	f1c3 0320 	rsb	r3, r3, #32
 8009912:	fa02 f303 	lsl.w	r3, r2, r3
 8009916:	e7ea      	b.n	80098ee <_dtoa_r+0x176>
 8009918:	2301      	movs	r3, #1
 800991a:	eba1 0a0a 	sub.w	sl, r1, sl
 800991e:	9310      	str	r3, [sp, #64]	; 0x40
 8009920:	f1ba 0301 	subs.w	r3, sl, #1
 8009924:	9307      	str	r3, [sp, #28]
 8009926:	bf43      	ittte	mi
 8009928:	2300      	movmi	r3, #0
 800992a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800992e:	9307      	strmi	r3, [sp, #28]
 8009930:	f04f 0a00 	movpl.w	sl, #0
 8009934:	f1bb 0f00 	cmp.w	fp, #0
 8009938:	db19      	blt.n	800996e <_dtoa_r+0x1f6>
 800993a:	9b07      	ldr	r3, [sp, #28]
 800993c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009940:	445b      	add	r3, fp
 8009942:	9307      	str	r3, [sp, #28]
 8009944:	f04f 0800 	mov.w	r8, #0
 8009948:	9b08      	ldr	r3, [sp, #32]
 800994a:	2b09      	cmp	r3, #9
 800994c:	d863      	bhi.n	8009a16 <_dtoa_r+0x29e>
 800994e:	2b05      	cmp	r3, #5
 8009950:	bfc4      	itt	gt
 8009952:	3b04      	subgt	r3, #4
 8009954:	9308      	strgt	r3, [sp, #32]
 8009956:	9b08      	ldr	r3, [sp, #32]
 8009958:	f1a3 0302 	sub.w	r3, r3, #2
 800995c:	bfcc      	ite	gt
 800995e:	2500      	movgt	r5, #0
 8009960:	2501      	movle	r5, #1
 8009962:	2b03      	cmp	r3, #3
 8009964:	d863      	bhi.n	8009a2e <_dtoa_r+0x2b6>
 8009966:	e8df f003 	tbb	[pc, r3]
 800996a:	5452      	.short	0x5452
 800996c:	4609      	.short	0x4609
 800996e:	2300      	movs	r3, #0
 8009970:	ebaa 0a0b 	sub.w	sl, sl, fp
 8009974:	f1cb 0800 	rsb	r8, fp, #0
 8009978:	930b      	str	r3, [sp, #44]	; 0x2c
 800997a:	e7e5      	b.n	8009948 <_dtoa_r+0x1d0>
 800997c:	2301      	movs	r3, #1
 800997e:	9309      	str	r3, [sp, #36]	; 0x24
 8009980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009982:	2b00      	cmp	r3, #0
 8009984:	dd56      	ble.n	8009a34 <_dtoa_r+0x2bc>
 8009986:	9306      	str	r3, [sp, #24]
 8009988:	4699      	mov	r9, r3
 800998a:	2200      	movs	r2, #0
 800998c:	6462      	str	r2, [r4, #68]	; 0x44
 800998e:	2204      	movs	r2, #4
 8009990:	f102 0014 	add.w	r0, r2, #20
 8009994:	4298      	cmp	r0, r3
 8009996:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009998:	d951      	bls.n	8009a3e <_dtoa_r+0x2c6>
 800999a:	4620      	mov	r0, r4
 800999c:	f000 fd63 	bl	800a466 <_Balloc>
 80099a0:	f1b9 0f0e 	cmp.w	r9, #14
 80099a4:	9002      	str	r0, [sp, #8]
 80099a6:	6420      	str	r0, [r4, #64]	; 0x40
 80099a8:	f200 80c1 	bhi.w	8009b2e <_dtoa_r+0x3b6>
 80099ac:	2d00      	cmp	r5, #0
 80099ae:	f000 80be 	beq.w	8009b2e <_dtoa_r+0x3b6>
 80099b2:	ed9d 7b04 	vldr	d7, [sp, #16]
 80099b6:	f1bb 0f00 	cmp.w	fp, #0
 80099ba:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80099be:	f340 80e5 	ble.w	8009b8c <_dtoa_r+0x414>
 80099c2:	4a2b      	ldr	r2, [pc, #172]	; (8009a70 <_dtoa_r+0x2f8>)
 80099c4:	f00b 030f 	and.w	r3, fp, #15
 80099c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099cc:	ed93 7b00 	vldr	d7, [r3]
 80099d0:	ea4f 132b 	mov.w	r3, fp, asr #4
 80099d4:	06da      	lsls	r2, r3, #27
 80099d6:	f140 80d7 	bpl.w	8009b88 <_dtoa_r+0x410>
 80099da:	4a26      	ldr	r2, [pc, #152]	; (8009a74 <_dtoa_r+0x2fc>)
 80099dc:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80099e0:	ed92 6b08 	vldr	d6, [r2, #32]
 80099e4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80099e8:	ed8d 6b04 	vstr	d6, [sp, #16]
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	2203      	movs	r2, #3
 80099f2:	4920      	ldr	r1, [pc, #128]	; (8009a74 <_dtoa_r+0x2fc>)
 80099f4:	e049      	b.n	8009a8a <_dtoa_r+0x312>
 80099f6:	2301      	movs	r3, #1
 80099f8:	9309      	str	r3, [sp, #36]	; 0x24
 80099fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fc:	445b      	add	r3, fp
 80099fe:	f103 0901 	add.w	r9, r3, #1
 8009a02:	9306      	str	r3, [sp, #24]
 8009a04:	464b      	mov	r3, r9
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	bfb8      	it	lt
 8009a0a:	2301      	movlt	r3, #1
 8009a0c:	e7bd      	b.n	800998a <_dtoa_r+0x212>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e7b5      	b.n	800997e <_dtoa_r+0x206>
 8009a12:	2300      	movs	r3, #0
 8009a14:	e7f0      	b.n	80099f8 <_dtoa_r+0x280>
 8009a16:	2501      	movs	r5, #1
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8009a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a22:	9306      	str	r3, [sp, #24]
 8009a24:	4699      	mov	r9, r3
 8009a26:	2200      	movs	r2, #0
 8009a28:	2312      	movs	r3, #18
 8009a2a:	920a      	str	r2, [sp, #40]	; 0x28
 8009a2c:	e7ad      	b.n	800998a <_dtoa_r+0x212>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	9309      	str	r3, [sp, #36]	; 0x24
 8009a32:	e7f4      	b.n	8009a1e <_dtoa_r+0x2a6>
 8009a34:	2301      	movs	r3, #1
 8009a36:	9306      	str	r3, [sp, #24]
 8009a38:	4699      	mov	r9, r3
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	e7f5      	b.n	8009a2a <_dtoa_r+0x2b2>
 8009a3e:	3101      	adds	r1, #1
 8009a40:	6461      	str	r1, [r4, #68]	; 0x44
 8009a42:	0052      	lsls	r2, r2, #1
 8009a44:	e7a4      	b.n	8009990 <_dtoa_r+0x218>
 8009a46:	bf00      	nop
 8009a48:	636f4361 	.word	0x636f4361
 8009a4c:	3fd287a7 	.word	0x3fd287a7
 8009a50:	8b60c8b3 	.word	0x8b60c8b3
 8009a54:	3fc68a28 	.word	0x3fc68a28
 8009a58:	509f79fb 	.word	0x509f79fb
 8009a5c:	3fd34413 	.word	0x3fd34413
 8009a60:	7ff00000 	.word	0x7ff00000
 8009a64:	0800b21d 	.word	0x0800b21d
 8009a68:	0800b214 	.word	0x0800b214
 8009a6c:	0800b1f3 	.word	0x0800b1f3
 8009a70:	0800b250 	.word	0x0800b250
 8009a74:	0800b228 	.word	0x0800b228
 8009a78:	07de      	lsls	r6, r3, #31
 8009a7a:	d504      	bpl.n	8009a86 <_dtoa_r+0x30e>
 8009a7c:	ed91 6b00 	vldr	d6, [r1]
 8009a80:	3201      	adds	r2, #1
 8009a82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a86:	105b      	asrs	r3, r3, #1
 8009a88:	3108      	adds	r1, #8
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1f4      	bne.n	8009a78 <_dtoa_r+0x300>
 8009a8e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8009a92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a96:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80a7 	beq.w	8009bf0 <_dtoa_r+0x478>
 8009aa2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009aa6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009aaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab2:	f140 809d 	bpl.w	8009bf0 <_dtoa_r+0x478>
 8009ab6:	f1b9 0f00 	cmp.w	r9, #0
 8009aba:	f000 8099 	beq.w	8009bf0 <_dtoa_r+0x478>
 8009abe:	9b06      	ldr	r3, [sp, #24]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	dd30      	ble.n	8009b26 <_dtoa_r+0x3ae>
 8009ac4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009ac8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009acc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ad0:	9d06      	ldr	r5, [sp, #24]
 8009ad2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009ad6:	3201      	adds	r2, #1
 8009ad8:	ed9d 6b04 	vldr	d6, [sp, #16]
 8009adc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009ae0:	ee07 2a90 	vmov	s15, r2
 8009ae4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ae8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009aec:	ed8d 5b04 	vstr	d5, [sp, #16]
 8009af0:	9a05      	ldr	r2, [sp, #20]
 8009af2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009af6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	d17b      	bne.n	8009bf6 <_dtoa_r+0x47e>
 8009afe:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009b02:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009b06:	ec41 0b17 	vmov	d7, r0, r1
 8009b0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b12:	f300 8253 	bgt.w	8009fbc <_dtoa_r+0x844>
 8009b16:	eeb1 7b47 	vneg.f64	d7, d7
 8009b1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b22:	f100 8249 	bmi.w	8009fb8 <_dtoa_r+0x840>
 8009b26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f2c0 8119 	blt.w	8009d68 <_dtoa_r+0x5f0>
 8009b36:	f1bb 0f0e 	cmp.w	fp, #14
 8009b3a:	f300 8115 	bgt.w	8009d68 <_dtoa_r+0x5f0>
 8009b3e:	4bc3      	ldr	r3, [pc, #780]	; (8009e4c <_dtoa_r+0x6d4>)
 8009b40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b44:	ed93 6b00 	vldr	d6, [r3]
 8009b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f280 80ba 	bge.w	8009cc4 <_dtoa_r+0x54c>
 8009b50:	f1b9 0f00 	cmp.w	r9, #0
 8009b54:	f300 80b6 	bgt.w	8009cc4 <_dtoa_r+0x54c>
 8009b58:	f040 822d 	bne.w	8009fb6 <_dtoa_r+0x83e>
 8009b5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009b60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b64:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009b68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b70:	464d      	mov	r5, r9
 8009b72:	464f      	mov	r7, r9
 8009b74:	f280 8204 	bge.w	8009f80 <_dtoa_r+0x808>
 8009b78:	9b02      	ldr	r3, [sp, #8]
 8009b7a:	9a02      	ldr	r2, [sp, #8]
 8009b7c:	1c5e      	adds	r6, r3, #1
 8009b7e:	2331      	movs	r3, #49	; 0x31
 8009b80:	7013      	strb	r3, [r2, #0]
 8009b82:	f10b 0b01 	add.w	fp, fp, #1
 8009b86:	e1ff      	b.n	8009f88 <_dtoa_r+0x810>
 8009b88:	2202      	movs	r2, #2
 8009b8a:	e732      	b.n	80099f2 <_dtoa_r+0x27a>
 8009b8c:	d02e      	beq.n	8009bec <_dtoa_r+0x474>
 8009b8e:	f1cb 0300 	rsb	r3, fp, #0
 8009b92:	4aae      	ldr	r2, [pc, #696]	; (8009e4c <_dtoa_r+0x6d4>)
 8009b94:	f003 010f 	and.w	r1, r3, #15
 8009b98:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009b9c:	ed92 7b00 	vldr	d7, [r2]
 8009ba0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8009ba4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ba8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009bac:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8009bb0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009bb4:	49a6      	ldr	r1, [pc, #664]	; (8009e50 <_dtoa_r+0x6d8>)
 8009bb6:	111b      	asrs	r3, r3, #4
 8009bb8:	2000      	movs	r0, #0
 8009bba:	2202      	movs	r2, #2
 8009bbc:	b93b      	cbnz	r3, 8009bce <_dtoa_r+0x456>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	f43f af6b 	beq.w	8009a9a <_dtoa_r+0x322>
 8009bc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bcc:	e765      	b.n	8009a9a <_dtoa_r+0x322>
 8009bce:	07dd      	lsls	r5, r3, #31
 8009bd0:	d509      	bpl.n	8009be6 <_dtoa_r+0x46e>
 8009bd2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009bd6:	ed91 7b00 	vldr	d7, [r1]
 8009bda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009bde:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009be2:	3201      	adds	r2, #1
 8009be4:	2001      	movs	r0, #1
 8009be6:	105b      	asrs	r3, r3, #1
 8009be8:	3108      	adds	r1, #8
 8009bea:	e7e7      	b.n	8009bbc <_dtoa_r+0x444>
 8009bec:	2202      	movs	r2, #2
 8009bee:	e754      	b.n	8009a9a <_dtoa_r+0x322>
 8009bf0:	465b      	mov	r3, fp
 8009bf2:	464d      	mov	r5, r9
 8009bf4:	e770      	b.n	8009ad8 <_dtoa_r+0x360>
 8009bf6:	4a95      	ldr	r2, [pc, #596]	; (8009e4c <_dtoa_r+0x6d4>)
 8009bf8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8009bfc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c02:	ec41 0b17 	vmov	d7, r0, r1
 8009c06:	b35a      	cbz	r2, 8009c60 <_dtoa_r+0x4e8>
 8009c08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009c0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009c10:	9e02      	ldr	r6, [sp, #8]
 8009c12:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c16:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c1a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c1e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c22:	ee14 2a90 	vmov	r2, s9
 8009c26:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c2a:	3230      	adds	r2, #48	; 0x30
 8009c2c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c38:	f806 2b01 	strb.w	r2, [r6], #1
 8009c3c:	d43b      	bmi.n	8009cb6 <_dtoa_r+0x53e>
 8009c3e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009c42:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4a:	d472      	bmi.n	8009d32 <_dtoa_r+0x5ba>
 8009c4c:	9a02      	ldr	r2, [sp, #8]
 8009c4e:	1ab2      	subs	r2, r6, r2
 8009c50:	4295      	cmp	r5, r2
 8009c52:	f77f af68 	ble.w	8009b26 <_dtoa_r+0x3ae>
 8009c56:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009c5a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c5e:	e7de      	b.n	8009c1e <_dtoa_r+0x4a6>
 8009c60:	9a02      	ldr	r2, [sp, #8]
 8009c62:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009c66:	1956      	adds	r6, r2, r5
 8009c68:	4611      	mov	r1, r2
 8009c6a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c6e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c72:	ee14 2a90 	vmov	r2, s9
 8009c76:	3230      	adds	r2, #48	; 0x30
 8009c78:	f801 2b01 	strb.w	r2, [r1], #1
 8009c7c:	42b1      	cmp	r1, r6
 8009c7e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c86:	d11a      	bne.n	8009cbe <_dtoa_r+0x546>
 8009c88:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009c8c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009c90:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c98:	dc4b      	bgt.n	8009d32 <_dtoa_r+0x5ba>
 8009c9a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca6:	f57f af3e 	bpl.w	8009b26 <_dtoa_r+0x3ae>
 8009caa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009cae:	2a30      	cmp	r2, #48	; 0x30
 8009cb0:	f106 31ff 	add.w	r1, r6, #4294967295
 8009cb4:	d001      	beq.n	8009cba <_dtoa_r+0x542>
 8009cb6:	469b      	mov	fp, r3
 8009cb8:	e02a      	b.n	8009d10 <_dtoa_r+0x598>
 8009cba:	460e      	mov	r6, r1
 8009cbc:	e7f5      	b.n	8009caa <_dtoa_r+0x532>
 8009cbe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009cc2:	e7d4      	b.n	8009c6e <_dtoa_r+0x4f6>
 8009cc4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009cc8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009ccc:	9e02      	ldr	r6, [sp, #8]
 8009cce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009cd2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009cd6:	ee15 3a10 	vmov	r3, s10
 8009cda:	3330      	adds	r3, #48	; 0x30
 8009cdc:	f806 3b01 	strb.w	r3, [r6], #1
 8009ce0:	9b02      	ldr	r3, [sp, #8]
 8009ce2:	1af3      	subs	r3, r6, r3
 8009ce4:	4599      	cmp	r9, r3
 8009ce6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009cea:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009cee:	d133      	bne.n	8009d58 <_dtoa_r+0x5e0>
 8009cf0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009cf4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfc:	dc18      	bgt.n	8009d30 <_dtoa_r+0x5b8>
 8009cfe:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d06:	d103      	bne.n	8009d10 <_dtoa_r+0x598>
 8009d08:	ee15 3a10 	vmov	r3, s10
 8009d0c:	07db      	lsls	r3, r3, #31
 8009d0e:	d40f      	bmi.n	8009d30 <_dtoa_r+0x5b8>
 8009d10:	9901      	ldr	r1, [sp, #4]
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 fbcc 	bl	800a4b0 <_Bfree>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d1c:	7033      	strb	r3, [r6, #0]
 8009d1e:	f10b 0301 	add.w	r3, fp, #1
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f43f ad5f 	beq.w	80097ea <_dtoa_r+0x72>
 8009d2c:	601e      	str	r6, [r3, #0]
 8009d2e:	e55c      	b.n	80097ea <_dtoa_r+0x72>
 8009d30:	465b      	mov	r3, fp
 8009d32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009d36:	2939      	cmp	r1, #57	; 0x39
 8009d38:	f106 32ff 	add.w	r2, r6, #4294967295
 8009d3c:	d106      	bne.n	8009d4c <_dtoa_r+0x5d4>
 8009d3e:	9902      	ldr	r1, [sp, #8]
 8009d40:	4291      	cmp	r1, r2
 8009d42:	d107      	bne.n	8009d54 <_dtoa_r+0x5dc>
 8009d44:	2230      	movs	r2, #48	; 0x30
 8009d46:	700a      	strb	r2, [r1, #0]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	460a      	mov	r2, r1
 8009d4c:	7811      	ldrb	r1, [r2, #0]
 8009d4e:	3101      	adds	r1, #1
 8009d50:	7011      	strb	r1, [r2, #0]
 8009d52:	e7b0      	b.n	8009cb6 <_dtoa_r+0x53e>
 8009d54:	4616      	mov	r6, r2
 8009d56:	e7ec      	b.n	8009d32 <_dtoa_r+0x5ba>
 8009d58:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d64:	d1b3      	bne.n	8009cce <_dtoa_r+0x556>
 8009d66:	e7d3      	b.n	8009d10 <_dtoa_r+0x598>
 8009d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	f000 808d 	beq.w	8009e8a <_dtoa_r+0x712>
 8009d70:	9a08      	ldr	r2, [sp, #32]
 8009d72:	2a01      	cmp	r2, #1
 8009d74:	dc72      	bgt.n	8009e5c <_dtoa_r+0x6e4>
 8009d76:	2f00      	cmp	r7, #0
 8009d78:	d06c      	beq.n	8009e54 <_dtoa_r+0x6dc>
 8009d7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d7e:	4645      	mov	r5, r8
 8009d80:	4656      	mov	r6, sl
 8009d82:	9a07      	ldr	r2, [sp, #28]
 8009d84:	2101      	movs	r1, #1
 8009d86:	441a      	add	r2, r3
 8009d88:	4620      	mov	r0, r4
 8009d8a:	449a      	add	sl, r3
 8009d8c:	9207      	str	r2, [sp, #28]
 8009d8e:	f000 fc21 	bl	800a5d4 <__i2b>
 8009d92:	4607      	mov	r7, r0
 8009d94:	2e00      	cmp	r6, #0
 8009d96:	dd0b      	ble.n	8009db0 <_dtoa_r+0x638>
 8009d98:	9b07      	ldr	r3, [sp, #28]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	dd08      	ble.n	8009db0 <_dtoa_r+0x638>
 8009d9e:	42b3      	cmp	r3, r6
 8009da0:	9a07      	ldr	r2, [sp, #28]
 8009da2:	bfa8      	it	ge
 8009da4:	4633      	movge	r3, r6
 8009da6:	ebaa 0a03 	sub.w	sl, sl, r3
 8009daa:	1af6      	subs	r6, r6, r3
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	9307      	str	r3, [sp, #28]
 8009db0:	f1b8 0f00 	cmp.w	r8, #0
 8009db4:	d01d      	beq.n	8009df2 <_dtoa_r+0x67a>
 8009db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d06a      	beq.n	8009e92 <_dtoa_r+0x71a>
 8009dbc:	b18d      	cbz	r5, 8009de2 <_dtoa_r+0x66a>
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	462a      	mov	r2, r5
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 fca6 	bl	800a714 <__pow5mult>
 8009dc8:	9a01      	ldr	r2, [sp, #4]
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4607      	mov	r7, r0
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 fc09 	bl	800a5e6 <__multiply>
 8009dd4:	9901      	ldr	r1, [sp, #4]
 8009dd6:	900c      	str	r0, [sp, #48]	; 0x30
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 fb69 	bl	800a4b0 <_Bfree>
 8009dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	ebb8 0205 	subs.w	r2, r8, r5
 8009de6:	d004      	beq.n	8009df2 <_dtoa_r+0x67a>
 8009de8:	9901      	ldr	r1, [sp, #4]
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fc92 	bl	800a714 <__pow5mult>
 8009df0:	9001      	str	r0, [sp, #4]
 8009df2:	2101      	movs	r1, #1
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fbed 	bl	800a5d4 <__i2b>
 8009dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 81ca 	beq.w	800a198 <_dtoa_r+0xa20>
 8009e04:	461a      	mov	r2, r3
 8009e06:	4601      	mov	r1, r0
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f000 fc83 	bl	800a714 <__pow5mult>
 8009e0e:	9b08      	ldr	r3, [sp, #32]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	4605      	mov	r5, r0
 8009e14:	dc44      	bgt.n	8009ea0 <_dtoa_r+0x728>
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d13c      	bne.n	8009e96 <_dtoa_r+0x71e>
 8009e1c:	9b05      	ldr	r3, [sp, #20]
 8009e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d137      	bne.n	8009e96 <_dtoa_r+0x71e>
 8009e26:	9b05      	ldr	r3, [sp, #20]
 8009e28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e2c:	0d1b      	lsrs	r3, r3, #20
 8009e2e:	051b      	lsls	r3, r3, #20
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d033      	beq.n	8009e9c <_dtoa_r+0x724>
 8009e34:	9b07      	ldr	r3, [sp, #28]
 8009e36:	3301      	adds	r3, #1
 8009e38:	f10a 0a01 	add.w	sl, sl, #1
 8009e3c:	9307      	str	r3, [sp, #28]
 8009e3e:	f04f 0801 	mov.w	r8, #1
 8009e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e44:	bb73      	cbnz	r3, 8009ea4 <_dtoa_r+0x72c>
 8009e46:	2001      	movs	r0, #1
 8009e48:	e034      	b.n	8009eb4 <_dtoa_r+0x73c>
 8009e4a:	bf00      	nop
 8009e4c:	0800b250 	.word	0x0800b250
 8009e50:	0800b228 	.word	0x0800b228
 8009e54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e5a:	e790      	b.n	8009d7e <_dtoa_r+0x606>
 8009e5c:	f109 35ff 	add.w	r5, r9, #4294967295
 8009e60:	45a8      	cmp	r8, r5
 8009e62:	bfbf      	itttt	lt
 8009e64:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8009e66:	eba5 0808 	sublt.w	r8, r5, r8
 8009e6a:	4443      	addlt	r3, r8
 8009e6c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009e6e:	bfb6      	itet	lt
 8009e70:	46a8      	movlt	r8, r5
 8009e72:	eba8 0505 	subge.w	r5, r8, r5
 8009e76:	2500      	movlt	r5, #0
 8009e78:	f1b9 0f00 	cmp.w	r9, #0
 8009e7c:	bfb9      	ittee	lt
 8009e7e:	ebaa 0609 	sublt.w	r6, sl, r9
 8009e82:	2300      	movlt	r3, #0
 8009e84:	4656      	movge	r6, sl
 8009e86:	464b      	movge	r3, r9
 8009e88:	e77b      	b.n	8009d82 <_dtoa_r+0x60a>
 8009e8a:	4645      	mov	r5, r8
 8009e8c:	4656      	mov	r6, sl
 8009e8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e90:	e780      	b.n	8009d94 <_dtoa_r+0x61c>
 8009e92:	4642      	mov	r2, r8
 8009e94:	e7a8      	b.n	8009de8 <_dtoa_r+0x670>
 8009e96:	f04f 0800 	mov.w	r8, #0
 8009e9a:	e7d2      	b.n	8009e42 <_dtoa_r+0x6ca>
 8009e9c:	4698      	mov	r8, r3
 8009e9e:	e7d0      	b.n	8009e42 <_dtoa_r+0x6ca>
 8009ea0:	f04f 0800 	mov.w	r8, #0
 8009ea4:	692b      	ldr	r3, [r5, #16]
 8009ea6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009eaa:	6918      	ldr	r0, [r3, #16]
 8009eac:	f000 fb44 	bl	800a538 <__hi0bits>
 8009eb0:	f1c0 0020 	rsb	r0, r0, #32
 8009eb4:	9b07      	ldr	r3, [sp, #28]
 8009eb6:	4418      	add	r0, r3
 8009eb8:	f010 001f 	ands.w	r0, r0, #31
 8009ebc:	d047      	beq.n	8009f4e <_dtoa_r+0x7d6>
 8009ebe:	f1c0 0320 	rsb	r3, r0, #32
 8009ec2:	2b04      	cmp	r3, #4
 8009ec4:	dd3b      	ble.n	8009f3e <_dtoa_r+0x7c6>
 8009ec6:	9b07      	ldr	r3, [sp, #28]
 8009ec8:	f1c0 001c 	rsb	r0, r0, #28
 8009ecc:	4482      	add	sl, r0
 8009ece:	4406      	add	r6, r0
 8009ed0:	4403      	add	r3, r0
 8009ed2:	9307      	str	r3, [sp, #28]
 8009ed4:	f1ba 0f00 	cmp.w	sl, #0
 8009ed8:	dd05      	ble.n	8009ee6 <_dtoa_r+0x76e>
 8009eda:	4652      	mov	r2, sl
 8009edc:	9901      	ldr	r1, [sp, #4]
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 fc58 	bl	800a794 <__lshift>
 8009ee4:	9001      	str	r0, [sp, #4]
 8009ee6:	9b07      	ldr	r3, [sp, #28]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dd05      	ble.n	8009ef8 <_dtoa_r+0x780>
 8009eec:	4629      	mov	r1, r5
 8009eee:	461a      	mov	r2, r3
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f000 fc4f 	bl	800a794 <__lshift>
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009efa:	b353      	cbz	r3, 8009f52 <_dtoa_r+0x7da>
 8009efc:	4629      	mov	r1, r5
 8009efe:	9801      	ldr	r0, [sp, #4]
 8009f00:	f000 fc9c 	bl	800a83c <__mcmp>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	da24      	bge.n	8009f52 <_dtoa_r+0x7da>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	220a      	movs	r2, #10
 8009f0c:	9901      	ldr	r1, [sp, #4]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 fad7 	bl	800a4c2 <__multadd>
 8009f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f16:	9001      	str	r0, [sp, #4]
 8009f18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 8142 	beq.w	800a1a6 <_dtoa_r+0xa2e>
 8009f22:	2300      	movs	r3, #0
 8009f24:	4639      	mov	r1, r7
 8009f26:	220a      	movs	r2, #10
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 faca 	bl	800a4c2 <__multadd>
 8009f2e:	9b06      	ldr	r3, [sp, #24]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	4607      	mov	r7, r0
 8009f34:	dc4b      	bgt.n	8009fce <_dtoa_r+0x856>
 8009f36:	9b08      	ldr	r3, [sp, #32]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	dd48      	ble.n	8009fce <_dtoa_r+0x856>
 8009f3c:	e011      	b.n	8009f62 <_dtoa_r+0x7ea>
 8009f3e:	d0c9      	beq.n	8009ed4 <_dtoa_r+0x75c>
 8009f40:	9a07      	ldr	r2, [sp, #28]
 8009f42:	331c      	adds	r3, #28
 8009f44:	441a      	add	r2, r3
 8009f46:	449a      	add	sl, r3
 8009f48:	441e      	add	r6, r3
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	e7c1      	b.n	8009ed2 <_dtoa_r+0x75a>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	e7f6      	b.n	8009f40 <_dtoa_r+0x7c8>
 8009f52:	f1b9 0f00 	cmp.w	r9, #0
 8009f56:	dc34      	bgt.n	8009fc2 <_dtoa_r+0x84a>
 8009f58:	9b08      	ldr	r3, [sp, #32]
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	dd31      	ble.n	8009fc2 <_dtoa_r+0x84a>
 8009f5e:	f8cd 9018 	str.w	r9, [sp, #24]
 8009f62:	9b06      	ldr	r3, [sp, #24]
 8009f64:	b963      	cbnz	r3, 8009f80 <_dtoa_r+0x808>
 8009f66:	4629      	mov	r1, r5
 8009f68:	2205      	movs	r2, #5
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 faa9 	bl	800a4c2 <__multadd>
 8009f70:	4601      	mov	r1, r0
 8009f72:	4605      	mov	r5, r0
 8009f74:	9801      	ldr	r0, [sp, #4]
 8009f76:	f000 fc61 	bl	800a83c <__mcmp>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	f73f adfc 	bgt.w	8009b78 <_dtoa_r+0x400>
 8009f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f82:	9e02      	ldr	r6, [sp, #8]
 8009f84:	ea6f 0b03 	mvn.w	fp, r3
 8009f88:	f04f 0900 	mov.w	r9, #0
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 fa8e 	bl	800a4b0 <_Bfree>
 8009f94:	2f00      	cmp	r7, #0
 8009f96:	f43f aebb 	beq.w	8009d10 <_dtoa_r+0x598>
 8009f9a:	f1b9 0f00 	cmp.w	r9, #0
 8009f9e:	d005      	beq.n	8009fac <_dtoa_r+0x834>
 8009fa0:	45b9      	cmp	r9, r7
 8009fa2:	d003      	beq.n	8009fac <_dtoa_r+0x834>
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 fa82 	bl	800a4b0 <_Bfree>
 8009fac:	4639      	mov	r1, r7
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f000 fa7e 	bl	800a4b0 <_Bfree>
 8009fb4:	e6ac      	b.n	8009d10 <_dtoa_r+0x598>
 8009fb6:	2500      	movs	r5, #0
 8009fb8:	462f      	mov	r7, r5
 8009fba:	e7e1      	b.n	8009f80 <_dtoa_r+0x808>
 8009fbc:	469b      	mov	fp, r3
 8009fbe:	462f      	mov	r7, r5
 8009fc0:	e5da      	b.n	8009b78 <_dtoa_r+0x400>
 8009fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc4:	f8cd 9018 	str.w	r9, [sp, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 80f3 	beq.w	800a1b4 <_dtoa_r+0xa3c>
 8009fce:	2e00      	cmp	r6, #0
 8009fd0:	dd05      	ble.n	8009fde <_dtoa_r+0x866>
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	4632      	mov	r2, r6
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 fbdc 	bl	800a794 <__lshift>
 8009fdc:	4607      	mov	r7, r0
 8009fde:	f1b8 0f00 	cmp.w	r8, #0
 8009fe2:	d04c      	beq.n	800a07e <_dtoa_r+0x906>
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 fa3d 	bl	800a466 <_Balloc>
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	3202      	adds	r2, #2
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	0092      	lsls	r2, r2, #2
 8009ff4:	f107 010c 	add.w	r1, r7, #12
 8009ff8:	300c      	adds	r0, #12
 8009ffa:	f000 fa29 	bl	800a450 <memcpy>
 8009ffe:	2201      	movs	r2, #1
 800a000:	4631      	mov	r1, r6
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fbc6 	bl	800a794 <__lshift>
 800a008:	9b04      	ldr	r3, [sp, #16]
 800a00a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	46b9      	mov	r9, r7
 800a014:	9307      	str	r3, [sp, #28]
 800a016:	4607      	mov	r7, r0
 800a018:	4629      	mov	r1, r5
 800a01a:	9801      	ldr	r0, [sp, #4]
 800a01c:	f7ff fb1e 	bl	800965c <quorem>
 800a020:	4649      	mov	r1, r9
 800a022:	4606      	mov	r6, r0
 800a024:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a028:	9801      	ldr	r0, [sp, #4]
 800a02a:	f000 fc07 	bl	800a83c <__mcmp>
 800a02e:	463a      	mov	r2, r7
 800a030:	9004      	str	r0, [sp, #16]
 800a032:	4629      	mov	r1, r5
 800a034:	4620      	mov	r0, r4
 800a036:	f000 fc1b 	bl	800a870 <__mdiff>
 800a03a:	68c3      	ldr	r3, [r0, #12]
 800a03c:	4602      	mov	r2, r0
 800a03e:	bb03      	cbnz	r3, 800a082 <_dtoa_r+0x90a>
 800a040:	4601      	mov	r1, r0
 800a042:	9009      	str	r0, [sp, #36]	; 0x24
 800a044:	9801      	ldr	r0, [sp, #4]
 800a046:	f000 fbf9 	bl	800a83c <__mcmp>
 800a04a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a04c:	4603      	mov	r3, r0
 800a04e:	4611      	mov	r1, r2
 800a050:	4620      	mov	r0, r4
 800a052:	9309      	str	r3, [sp, #36]	; 0x24
 800a054:	f000 fa2c 	bl	800a4b0 <_Bfree>
 800a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05a:	b9a3      	cbnz	r3, 800a086 <_dtoa_r+0x90e>
 800a05c:	9a08      	ldr	r2, [sp, #32]
 800a05e:	b992      	cbnz	r2, 800a086 <_dtoa_r+0x90e>
 800a060:	9a07      	ldr	r2, [sp, #28]
 800a062:	b982      	cbnz	r2, 800a086 <_dtoa_r+0x90e>
 800a064:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a068:	d029      	beq.n	800a0be <_dtoa_r+0x946>
 800a06a:	9b04      	ldr	r3, [sp, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	dd01      	ble.n	800a074 <_dtoa_r+0x8fc>
 800a070:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800a074:	f10a 0601 	add.w	r6, sl, #1
 800a078:	f88a 8000 	strb.w	r8, [sl]
 800a07c:	e786      	b.n	8009f8c <_dtoa_r+0x814>
 800a07e:	4638      	mov	r0, r7
 800a080:	e7c2      	b.n	800a008 <_dtoa_r+0x890>
 800a082:	2301      	movs	r3, #1
 800a084:	e7e3      	b.n	800a04e <_dtoa_r+0x8d6>
 800a086:	9a04      	ldr	r2, [sp, #16]
 800a088:	2a00      	cmp	r2, #0
 800a08a:	db04      	blt.n	800a096 <_dtoa_r+0x91e>
 800a08c:	d124      	bne.n	800a0d8 <_dtoa_r+0x960>
 800a08e:	9a08      	ldr	r2, [sp, #32]
 800a090:	bb12      	cbnz	r2, 800a0d8 <_dtoa_r+0x960>
 800a092:	9a07      	ldr	r2, [sp, #28]
 800a094:	bb02      	cbnz	r2, 800a0d8 <_dtoa_r+0x960>
 800a096:	2b00      	cmp	r3, #0
 800a098:	ddec      	ble.n	800a074 <_dtoa_r+0x8fc>
 800a09a:	2201      	movs	r2, #1
 800a09c:	9901      	ldr	r1, [sp, #4]
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 fb78 	bl	800a794 <__lshift>
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	9001      	str	r0, [sp, #4]
 800a0a8:	f000 fbc8 	bl	800a83c <__mcmp>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	dc03      	bgt.n	800a0b8 <_dtoa_r+0x940>
 800a0b0:	d1e0      	bne.n	800a074 <_dtoa_r+0x8fc>
 800a0b2:	f018 0f01 	tst.w	r8, #1
 800a0b6:	d0dd      	beq.n	800a074 <_dtoa_r+0x8fc>
 800a0b8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a0bc:	d1d8      	bne.n	800a070 <_dtoa_r+0x8f8>
 800a0be:	2339      	movs	r3, #57	; 0x39
 800a0c0:	f10a 0601 	add.w	r6, sl, #1
 800a0c4:	f88a 3000 	strb.w	r3, [sl]
 800a0c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a0cc:	2b39      	cmp	r3, #57	; 0x39
 800a0ce:	f106 32ff 	add.w	r2, r6, #4294967295
 800a0d2:	d04c      	beq.n	800a16e <_dtoa_r+0x9f6>
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	e051      	b.n	800a17c <_dtoa_r+0xa04>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f10a 0601 	add.w	r6, sl, #1
 800a0de:	dd05      	ble.n	800a0ec <_dtoa_r+0x974>
 800a0e0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a0e4:	d0eb      	beq.n	800a0be <_dtoa_r+0x946>
 800a0e6:	f108 0801 	add.w	r8, r8, #1
 800a0ea:	e7c5      	b.n	800a078 <_dtoa_r+0x900>
 800a0ec:	9b02      	ldr	r3, [sp, #8]
 800a0ee:	9a06      	ldr	r2, [sp, #24]
 800a0f0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800a0f4:	1af3      	subs	r3, r6, r3
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d021      	beq.n	800a13e <_dtoa_r+0x9c6>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	220a      	movs	r2, #10
 800a0fe:	9901      	ldr	r1, [sp, #4]
 800a100:	4620      	mov	r0, r4
 800a102:	f000 f9de 	bl	800a4c2 <__multadd>
 800a106:	45b9      	cmp	r9, r7
 800a108:	9001      	str	r0, [sp, #4]
 800a10a:	f04f 0300 	mov.w	r3, #0
 800a10e:	f04f 020a 	mov.w	r2, #10
 800a112:	4649      	mov	r1, r9
 800a114:	4620      	mov	r0, r4
 800a116:	d105      	bne.n	800a124 <_dtoa_r+0x9ac>
 800a118:	f000 f9d3 	bl	800a4c2 <__multadd>
 800a11c:	4681      	mov	r9, r0
 800a11e:	4607      	mov	r7, r0
 800a120:	46b2      	mov	sl, r6
 800a122:	e779      	b.n	800a018 <_dtoa_r+0x8a0>
 800a124:	f000 f9cd 	bl	800a4c2 <__multadd>
 800a128:	4639      	mov	r1, r7
 800a12a:	4681      	mov	r9, r0
 800a12c:	2300      	movs	r3, #0
 800a12e:	220a      	movs	r2, #10
 800a130:	4620      	mov	r0, r4
 800a132:	f000 f9c6 	bl	800a4c2 <__multadd>
 800a136:	4607      	mov	r7, r0
 800a138:	e7f2      	b.n	800a120 <_dtoa_r+0x9a8>
 800a13a:	f04f 0900 	mov.w	r9, #0
 800a13e:	2201      	movs	r2, #1
 800a140:	9901      	ldr	r1, [sp, #4]
 800a142:	4620      	mov	r0, r4
 800a144:	f000 fb26 	bl	800a794 <__lshift>
 800a148:	4629      	mov	r1, r5
 800a14a:	9001      	str	r0, [sp, #4]
 800a14c:	f000 fb76 	bl	800a83c <__mcmp>
 800a150:	2800      	cmp	r0, #0
 800a152:	dcb9      	bgt.n	800a0c8 <_dtoa_r+0x950>
 800a154:	d102      	bne.n	800a15c <_dtoa_r+0x9e4>
 800a156:	f018 0f01 	tst.w	r8, #1
 800a15a:	d1b5      	bne.n	800a0c8 <_dtoa_r+0x950>
 800a15c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a160:	2b30      	cmp	r3, #48	; 0x30
 800a162:	f106 32ff 	add.w	r2, r6, #4294967295
 800a166:	f47f af11 	bne.w	8009f8c <_dtoa_r+0x814>
 800a16a:	4616      	mov	r6, r2
 800a16c:	e7f6      	b.n	800a15c <_dtoa_r+0x9e4>
 800a16e:	9b02      	ldr	r3, [sp, #8]
 800a170:	4293      	cmp	r3, r2
 800a172:	d105      	bne.n	800a180 <_dtoa_r+0xa08>
 800a174:	9a02      	ldr	r2, [sp, #8]
 800a176:	f10b 0b01 	add.w	fp, fp, #1
 800a17a:	2331      	movs	r3, #49	; 0x31
 800a17c:	7013      	strb	r3, [r2, #0]
 800a17e:	e705      	b.n	8009f8c <_dtoa_r+0x814>
 800a180:	4616      	mov	r6, r2
 800a182:	e7a1      	b.n	800a0c8 <_dtoa_r+0x950>
 800a184:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <_dtoa_r+0xa68>)
 800a186:	f7ff bb4c 	b.w	8009822 <_dtoa_r+0xaa>
 800a18a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f47f ab30 	bne.w	80097f2 <_dtoa_r+0x7a>
 800a192:	4b14      	ldr	r3, [pc, #80]	; (800a1e4 <_dtoa_r+0xa6c>)
 800a194:	f7ff bb45 	b.w	8009822 <_dtoa_r+0xaa>
 800a198:	9b08      	ldr	r3, [sp, #32]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	f77f ae3b 	ble.w	8009e16 <_dtoa_r+0x69e>
 800a1a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a1a4:	e64f      	b.n	8009e46 <_dtoa_r+0x6ce>
 800a1a6:	9b06      	ldr	r3, [sp, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	dc03      	bgt.n	800a1b4 <_dtoa_r+0xa3c>
 800a1ac:	9b08      	ldr	r3, [sp, #32]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	f73f aed7 	bgt.w	8009f62 <_dtoa_r+0x7ea>
 800a1b4:	9e02      	ldr	r6, [sp, #8]
 800a1b6:	9801      	ldr	r0, [sp, #4]
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7ff fa4f 	bl	800965c <quorem>
 800a1be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a1c2:	f806 8b01 	strb.w	r8, [r6], #1
 800a1c6:	9b02      	ldr	r3, [sp, #8]
 800a1c8:	9a06      	ldr	r2, [sp, #24]
 800a1ca:	1af3      	subs	r3, r6, r3
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	ddb4      	ble.n	800a13a <_dtoa_r+0x9c2>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	220a      	movs	r2, #10
 800a1d4:	9901      	ldr	r1, [sp, #4]
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 f973 	bl	800a4c2 <__multadd>
 800a1dc:	9001      	str	r0, [sp, #4]
 800a1de:	e7ea      	b.n	800a1b6 <_dtoa_r+0xa3e>
 800a1e0:	0800b1f2 	.word	0x0800b1f2
 800a1e4:	0800b214 	.word	0x0800b214

0800a1e8 <__libc_fini_array>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d07      	ldr	r5, [pc, #28]	; (800a208 <__libc_fini_array+0x20>)
 800a1ec:	4c07      	ldr	r4, [pc, #28]	; (800a20c <__libc_fini_array+0x24>)
 800a1ee:	1b64      	subs	r4, r4, r5
 800a1f0:	10a4      	asrs	r4, r4, #2
 800a1f2:	b91c      	cbnz	r4, 800a1fc <__libc_fini_array+0x14>
 800a1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f8:	f000 bf18 	b.w	800b02c <_fini>
 800a1fc:	3c01      	subs	r4, #1
 800a1fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a202:	4798      	blx	r3
 800a204:	e7f5      	b.n	800a1f2 <__libc_fini_array+0xa>
 800a206:	bf00      	nop
 800a208:	0800b440 	.word	0x0800b440
 800a20c:	0800b444 	.word	0x0800b444

0800a210 <_malloc_trim_r>:
 800a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a214:	4605      	mov	r5, r0
 800a216:	2008      	movs	r0, #8
 800a218:	460c      	mov	r4, r1
 800a21a:	f7ff fa01 	bl	8009620 <sysconf>
 800a21e:	4f23      	ldr	r7, [pc, #140]	; (800a2ac <_malloc_trim_r+0x9c>)
 800a220:	4680      	mov	r8, r0
 800a222:	4628      	mov	r0, r5
 800a224:	f7fd ffde 	bl	80081e4 <__malloc_lock>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	685e      	ldr	r6, [r3, #4]
 800a22c:	f026 0603 	bic.w	r6, r6, #3
 800a230:	1b34      	subs	r4, r6, r4
 800a232:	3c11      	subs	r4, #17
 800a234:	4444      	add	r4, r8
 800a236:	fbb4 f4f8 	udiv	r4, r4, r8
 800a23a:	3c01      	subs	r4, #1
 800a23c:	fb08 f404 	mul.w	r4, r8, r4
 800a240:	45a0      	cmp	r8, r4
 800a242:	dd05      	ble.n	800a250 <_malloc_trim_r+0x40>
 800a244:	4628      	mov	r0, r5
 800a246:	f7fd ffd3 	bl	80081f0 <__malloc_unlock>
 800a24a:	2000      	movs	r0, #0
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	2100      	movs	r1, #0
 800a252:	4628      	mov	r0, r5
 800a254:	f7fd ffd2 	bl	80081fc <_sbrk_r>
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	4433      	add	r3, r6
 800a25c:	4298      	cmp	r0, r3
 800a25e:	d1f1      	bne.n	800a244 <_malloc_trim_r+0x34>
 800a260:	4261      	negs	r1, r4
 800a262:	4628      	mov	r0, r5
 800a264:	f7fd ffca 	bl	80081fc <_sbrk_r>
 800a268:	3001      	adds	r0, #1
 800a26a:	d110      	bne.n	800a28e <_malloc_trim_r+0x7e>
 800a26c:	2100      	movs	r1, #0
 800a26e:	4628      	mov	r0, r5
 800a270:	f7fd ffc4 	bl	80081fc <_sbrk_r>
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	1a83      	subs	r3, r0, r2
 800a278:	2b0f      	cmp	r3, #15
 800a27a:	dde3      	ble.n	800a244 <_malloc_trim_r+0x34>
 800a27c:	490c      	ldr	r1, [pc, #48]	; (800a2b0 <_malloc_trim_r+0xa0>)
 800a27e:	6809      	ldr	r1, [r1, #0]
 800a280:	1a40      	subs	r0, r0, r1
 800a282:	490c      	ldr	r1, [pc, #48]	; (800a2b4 <_malloc_trim_r+0xa4>)
 800a284:	f043 0301 	orr.w	r3, r3, #1
 800a288:	6008      	str	r0, [r1, #0]
 800a28a:	6053      	str	r3, [r2, #4]
 800a28c:	e7da      	b.n	800a244 <_malloc_trim_r+0x34>
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	4a08      	ldr	r2, [pc, #32]	; (800a2b4 <_malloc_trim_r+0xa4>)
 800a292:	1b36      	subs	r6, r6, r4
 800a294:	f046 0601 	orr.w	r6, r6, #1
 800a298:	605e      	str	r6, [r3, #4]
 800a29a:	6813      	ldr	r3, [r2, #0]
 800a29c:	4628      	mov	r0, r5
 800a29e:	1b1c      	subs	r4, r3, r4
 800a2a0:	6014      	str	r4, [r2, #0]
 800a2a2:	f7fd ffa5 	bl	80081f0 <__malloc_unlock>
 800a2a6:	2001      	movs	r0, #1
 800a2a8:	e7d0      	b.n	800a24c <_malloc_trim_r+0x3c>
 800a2aa:	bf00      	nop
 800a2ac:	24000440 	.word	0x24000440
 800a2b0:	24000848 	.word	0x24000848
 800a2b4:	24009a18 	.word	0x24009a18

0800a2b8 <_free_r>:
 800a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	4688      	mov	r8, r1
 800a2c0:	2900      	cmp	r1, #0
 800a2c2:	f000 80ab 	beq.w	800a41c <_free_r+0x164>
 800a2c6:	f7fd ff8d 	bl	80081e4 <__malloc_lock>
 800a2ca:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a2ce:	4d54      	ldr	r5, [pc, #336]	; (800a420 <_free_r+0x168>)
 800a2d0:	f022 0001 	bic.w	r0, r2, #1
 800a2d4:	f1a8 0308 	sub.w	r3, r8, #8
 800a2d8:	181f      	adds	r7, r3, r0
 800a2da:	68a9      	ldr	r1, [r5, #8]
 800a2dc:	687e      	ldr	r6, [r7, #4]
 800a2de:	42b9      	cmp	r1, r7
 800a2e0:	f026 0603 	bic.w	r6, r6, #3
 800a2e4:	f002 0201 	and.w	r2, r2, #1
 800a2e8:	d11b      	bne.n	800a322 <_free_r+0x6a>
 800a2ea:	4430      	add	r0, r6
 800a2ec:	b93a      	cbnz	r2, 800a2fe <_free_r+0x46>
 800a2ee:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	4410      	add	r0, r2
 800a2f6:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a2fa:	60ca      	str	r2, [r1, #12]
 800a2fc:	6091      	str	r1, [r2, #8]
 800a2fe:	f040 0201 	orr.w	r2, r0, #1
 800a302:	605a      	str	r2, [r3, #4]
 800a304:	60ab      	str	r3, [r5, #8]
 800a306:	4b47      	ldr	r3, [pc, #284]	; (800a424 <_free_r+0x16c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4283      	cmp	r3, r0
 800a30c:	d804      	bhi.n	800a318 <_free_r+0x60>
 800a30e:	4b46      	ldr	r3, [pc, #280]	; (800a428 <_free_r+0x170>)
 800a310:	4620      	mov	r0, r4
 800a312:	6819      	ldr	r1, [r3, #0]
 800a314:	f7ff ff7c 	bl	800a210 <_malloc_trim_r>
 800a318:	4620      	mov	r0, r4
 800a31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a31e:	f7fd bf67 	b.w	80081f0 <__malloc_unlock>
 800a322:	607e      	str	r6, [r7, #4]
 800a324:	2a00      	cmp	r2, #0
 800a326:	d139      	bne.n	800a39c <_free_r+0xe4>
 800a328:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a32c:	1a5b      	subs	r3, r3, r1
 800a32e:	4408      	add	r0, r1
 800a330:	6899      	ldr	r1, [r3, #8]
 800a332:	f105 0c08 	add.w	ip, r5, #8
 800a336:	4561      	cmp	r1, ip
 800a338:	d032      	beq.n	800a3a0 <_free_r+0xe8>
 800a33a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800a33e:	f8c1 c00c 	str.w	ip, [r1, #12]
 800a342:	f8cc 1008 	str.w	r1, [ip, #8]
 800a346:	19b9      	adds	r1, r7, r6
 800a348:	6849      	ldr	r1, [r1, #4]
 800a34a:	07c9      	lsls	r1, r1, #31
 800a34c:	d40a      	bmi.n	800a364 <_free_r+0xac>
 800a34e:	4430      	add	r0, r6
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	bb3a      	cbnz	r2, 800a3a4 <_free_r+0xec>
 800a354:	4e35      	ldr	r6, [pc, #212]	; (800a42c <_free_r+0x174>)
 800a356:	42b1      	cmp	r1, r6
 800a358:	d124      	bne.n	800a3a4 <_free_r+0xec>
 800a35a:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800a35e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a362:	2201      	movs	r2, #1
 800a364:	f040 0101 	orr.w	r1, r0, #1
 800a368:	6059      	str	r1, [r3, #4]
 800a36a:	5018      	str	r0, [r3, r0]
 800a36c:	2a00      	cmp	r2, #0
 800a36e:	d1d3      	bne.n	800a318 <_free_r+0x60>
 800a370:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a374:	d21a      	bcs.n	800a3ac <_free_r+0xf4>
 800a376:	08c0      	lsrs	r0, r0, #3
 800a378:	1081      	asrs	r1, r0, #2
 800a37a:	2201      	movs	r2, #1
 800a37c:	408a      	lsls	r2, r1
 800a37e:	6869      	ldr	r1, [r5, #4]
 800a380:	3001      	adds	r0, #1
 800a382:	430a      	orrs	r2, r1
 800a384:	606a      	str	r2, [r5, #4]
 800a386:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a38a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a38e:	3a08      	subs	r2, #8
 800a390:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800a394:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a398:	60cb      	str	r3, [r1, #12]
 800a39a:	e7bd      	b.n	800a318 <_free_r+0x60>
 800a39c:	2200      	movs	r2, #0
 800a39e:	e7d2      	b.n	800a346 <_free_r+0x8e>
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	e7d0      	b.n	800a346 <_free_r+0x8e>
 800a3a4:	68fe      	ldr	r6, [r7, #12]
 800a3a6:	60ce      	str	r6, [r1, #12]
 800a3a8:	60b1      	str	r1, [r6, #8]
 800a3aa:	e7db      	b.n	800a364 <_free_r+0xac>
 800a3ac:	0a42      	lsrs	r2, r0, #9
 800a3ae:	2a04      	cmp	r2, #4
 800a3b0:	d813      	bhi.n	800a3da <_free_r+0x122>
 800a3b2:	0982      	lsrs	r2, r0, #6
 800a3b4:	3238      	adds	r2, #56	; 0x38
 800a3b6:	1c51      	adds	r1, r2, #1
 800a3b8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a3bc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a3c0:	428e      	cmp	r6, r1
 800a3c2:	d124      	bne.n	800a40e <_free_r+0x156>
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	1092      	asrs	r2, r2, #2
 800a3c8:	fa00 f202 	lsl.w	r2, r0, r2
 800a3cc:	6868      	ldr	r0, [r5, #4]
 800a3ce:	4302      	orrs	r2, r0
 800a3d0:	606a      	str	r2, [r5, #4]
 800a3d2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a3d6:	60b3      	str	r3, [r6, #8]
 800a3d8:	e7de      	b.n	800a398 <_free_r+0xe0>
 800a3da:	2a14      	cmp	r2, #20
 800a3dc:	d801      	bhi.n	800a3e2 <_free_r+0x12a>
 800a3de:	325b      	adds	r2, #91	; 0x5b
 800a3e0:	e7e9      	b.n	800a3b6 <_free_r+0xfe>
 800a3e2:	2a54      	cmp	r2, #84	; 0x54
 800a3e4:	d802      	bhi.n	800a3ec <_free_r+0x134>
 800a3e6:	0b02      	lsrs	r2, r0, #12
 800a3e8:	326e      	adds	r2, #110	; 0x6e
 800a3ea:	e7e4      	b.n	800a3b6 <_free_r+0xfe>
 800a3ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a3f0:	d802      	bhi.n	800a3f8 <_free_r+0x140>
 800a3f2:	0bc2      	lsrs	r2, r0, #15
 800a3f4:	3277      	adds	r2, #119	; 0x77
 800a3f6:	e7de      	b.n	800a3b6 <_free_r+0xfe>
 800a3f8:	f240 5154 	movw	r1, #1364	; 0x554
 800a3fc:	428a      	cmp	r2, r1
 800a3fe:	bf9a      	itte	ls
 800a400:	0c82      	lsrls	r2, r0, #18
 800a402:	327c      	addls	r2, #124	; 0x7c
 800a404:	227e      	movhi	r2, #126	; 0x7e
 800a406:	e7d6      	b.n	800a3b6 <_free_r+0xfe>
 800a408:	6889      	ldr	r1, [r1, #8]
 800a40a:	428e      	cmp	r6, r1
 800a40c:	d004      	beq.n	800a418 <_free_r+0x160>
 800a40e:	684a      	ldr	r2, [r1, #4]
 800a410:	f022 0203 	bic.w	r2, r2, #3
 800a414:	4282      	cmp	r2, r0
 800a416:	d8f7      	bhi.n	800a408 <_free_r+0x150>
 800a418:	68ce      	ldr	r6, [r1, #12]
 800a41a:	e7da      	b.n	800a3d2 <_free_r+0x11a>
 800a41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a420:	24000440 	.word	0x24000440
 800a424:	2400084c 	.word	0x2400084c
 800a428:	24009a48 	.word	0x24009a48
 800a42c:	24000448 	.word	0x24000448

0800a430 <_localeconv_r>:
 800a430:	4b04      	ldr	r3, [pc, #16]	; (800a444 <_localeconv_r+0x14>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a436:	4b04      	ldr	r3, [pc, #16]	; (800a448 <_localeconv_r+0x18>)
 800a438:	2800      	cmp	r0, #0
 800a43a:	bf08      	it	eq
 800a43c:	4618      	moveq	r0, r3
 800a43e:	30f0      	adds	r0, #240	; 0xf0
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	24000010 	.word	0x24000010
 800a448:	24000854 	.word	0x24000854

0800a44c <__retarget_lock_acquire_recursive>:
 800a44c:	4770      	bx	lr

0800a44e <__retarget_lock_release_recursive>:
 800a44e:	4770      	bx	lr

0800a450 <memcpy>:
 800a450:	b510      	push	{r4, lr}
 800a452:	1e43      	subs	r3, r0, #1
 800a454:	440a      	add	r2, r1
 800a456:	4291      	cmp	r1, r2
 800a458:	d100      	bne.n	800a45c <memcpy+0xc>
 800a45a:	bd10      	pop	{r4, pc}
 800a45c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a460:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a464:	e7f7      	b.n	800a456 <memcpy+0x6>

0800a466 <_Balloc>:
 800a466:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	4605      	mov	r5, r0
 800a46c:	460c      	mov	r4, r1
 800a46e:	b17b      	cbz	r3, 800a490 <_Balloc+0x2a>
 800a470:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a472:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a476:	b9a0      	cbnz	r0, 800a4a2 <_Balloc+0x3c>
 800a478:	2101      	movs	r1, #1
 800a47a:	fa01 f604 	lsl.w	r6, r1, r4
 800a47e:	1d72      	adds	r2, r6, #5
 800a480:	0092      	lsls	r2, r2, #2
 800a482:	4628      	mov	r0, r5
 800a484:	f000 fbbe 	bl	800ac04 <_calloc_r>
 800a488:	b148      	cbz	r0, 800a49e <_Balloc+0x38>
 800a48a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a48e:	e00b      	b.n	800a4a8 <_Balloc+0x42>
 800a490:	2221      	movs	r2, #33	; 0x21
 800a492:	2104      	movs	r1, #4
 800a494:	f000 fbb6 	bl	800ac04 <_calloc_r>
 800a498:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1e8      	bne.n	800a470 <_Balloc+0xa>
 800a49e:	2000      	movs	r0, #0
 800a4a0:	bd70      	pop	{r4, r5, r6, pc}
 800a4a2:	6802      	ldr	r2, [r0, #0]
 800a4a4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4ae:	e7f7      	b.n	800a4a0 <_Balloc+0x3a>

0800a4b0 <_Bfree>:
 800a4b0:	b131      	cbz	r1, 800a4c0 <_Bfree+0x10>
 800a4b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a4b4:	684a      	ldr	r2, [r1, #4]
 800a4b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a4ba:	6008      	str	r0, [r1, #0]
 800a4bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a4c0:	4770      	bx	lr

0800a4c2 <__multadd>:
 800a4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c6:	690d      	ldr	r5, [r1, #16]
 800a4c8:	461f      	mov	r7, r3
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	f101 0c14 	add.w	ip, r1, #20
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f8dc 0000 	ldr.w	r0, [ip]
 800a4d8:	b281      	uxth	r1, r0
 800a4da:	fb02 7101 	mla	r1, r2, r1, r7
 800a4de:	0c0f      	lsrs	r7, r1, #16
 800a4e0:	0c00      	lsrs	r0, r0, #16
 800a4e2:	fb02 7000 	mla	r0, r2, r0, r7
 800a4e6:	b289      	uxth	r1, r1
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a4ee:	429d      	cmp	r5, r3
 800a4f0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a4f4:	f84c 1b04 	str.w	r1, [ip], #4
 800a4f8:	dcec      	bgt.n	800a4d4 <__multadd+0x12>
 800a4fa:	b1d7      	cbz	r7, 800a532 <__multadd+0x70>
 800a4fc:	68a3      	ldr	r3, [r4, #8]
 800a4fe:	42ab      	cmp	r3, r5
 800a500:	dc12      	bgt.n	800a528 <__multadd+0x66>
 800a502:	6861      	ldr	r1, [r4, #4]
 800a504:	4630      	mov	r0, r6
 800a506:	3101      	adds	r1, #1
 800a508:	f7ff ffad 	bl	800a466 <_Balloc>
 800a50c:	6922      	ldr	r2, [r4, #16]
 800a50e:	3202      	adds	r2, #2
 800a510:	f104 010c 	add.w	r1, r4, #12
 800a514:	4680      	mov	r8, r0
 800a516:	0092      	lsls	r2, r2, #2
 800a518:	300c      	adds	r0, #12
 800a51a:	f7ff ff99 	bl	800a450 <memcpy>
 800a51e:	4621      	mov	r1, r4
 800a520:	4630      	mov	r0, r6
 800a522:	f7ff ffc5 	bl	800a4b0 <_Bfree>
 800a526:	4644      	mov	r4, r8
 800a528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a52c:	3501      	adds	r5, #1
 800a52e:	615f      	str	r7, [r3, #20]
 800a530:	6125      	str	r5, [r4, #16]
 800a532:	4620      	mov	r0, r4
 800a534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a538 <__hi0bits>:
 800a538:	0c02      	lsrs	r2, r0, #16
 800a53a:	0412      	lsls	r2, r2, #16
 800a53c:	4603      	mov	r3, r0
 800a53e:	b9b2      	cbnz	r2, 800a56e <__hi0bits+0x36>
 800a540:	0403      	lsls	r3, r0, #16
 800a542:	2010      	movs	r0, #16
 800a544:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a548:	bf04      	itt	eq
 800a54a:	021b      	lsleq	r3, r3, #8
 800a54c:	3008      	addeq	r0, #8
 800a54e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a552:	bf04      	itt	eq
 800a554:	011b      	lsleq	r3, r3, #4
 800a556:	3004      	addeq	r0, #4
 800a558:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a55c:	bf04      	itt	eq
 800a55e:	009b      	lsleq	r3, r3, #2
 800a560:	3002      	addeq	r0, #2
 800a562:	2b00      	cmp	r3, #0
 800a564:	db06      	blt.n	800a574 <__hi0bits+0x3c>
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	d503      	bpl.n	800a572 <__hi0bits+0x3a>
 800a56a:	3001      	adds	r0, #1
 800a56c:	4770      	bx	lr
 800a56e:	2000      	movs	r0, #0
 800a570:	e7e8      	b.n	800a544 <__hi0bits+0xc>
 800a572:	2020      	movs	r0, #32
 800a574:	4770      	bx	lr

0800a576 <__lo0bits>:
 800a576:	6803      	ldr	r3, [r0, #0]
 800a578:	f013 0207 	ands.w	r2, r3, #7
 800a57c:	4601      	mov	r1, r0
 800a57e:	d00b      	beq.n	800a598 <__lo0bits+0x22>
 800a580:	07da      	lsls	r2, r3, #31
 800a582:	d423      	bmi.n	800a5cc <__lo0bits+0x56>
 800a584:	0798      	lsls	r0, r3, #30
 800a586:	bf49      	itett	mi
 800a588:	085b      	lsrmi	r3, r3, #1
 800a58a:	089b      	lsrpl	r3, r3, #2
 800a58c:	2001      	movmi	r0, #1
 800a58e:	600b      	strmi	r3, [r1, #0]
 800a590:	bf5c      	itt	pl
 800a592:	600b      	strpl	r3, [r1, #0]
 800a594:	2002      	movpl	r0, #2
 800a596:	4770      	bx	lr
 800a598:	b298      	uxth	r0, r3
 800a59a:	b9a8      	cbnz	r0, 800a5c8 <__lo0bits+0x52>
 800a59c:	0c1b      	lsrs	r3, r3, #16
 800a59e:	2010      	movs	r0, #16
 800a5a0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a5a4:	bf04      	itt	eq
 800a5a6:	0a1b      	lsreq	r3, r3, #8
 800a5a8:	3008      	addeq	r0, #8
 800a5aa:	071a      	lsls	r2, r3, #28
 800a5ac:	bf04      	itt	eq
 800a5ae:	091b      	lsreq	r3, r3, #4
 800a5b0:	3004      	addeq	r0, #4
 800a5b2:	079a      	lsls	r2, r3, #30
 800a5b4:	bf04      	itt	eq
 800a5b6:	089b      	lsreq	r3, r3, #2
 800a5b8:	3002      	addeq	r0, #2
 800a5ba:	07da      	lsls	r2, r3, #31
 800a5bc:	d402      	bmi.n	800a5c4 <__lo0bits+0x4e>
 800a5be:	085b      	lsrs	r3, r3, #1
 800a5c0:	d006      	beq.n	800a5d0 <__lo0bits+0x5a>
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	600b      	str	r3, [r1, #0]
 800a5c6:	4770      	bx	lr
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	e7e9      	b.n	800a5a0 <__lo0bits+0x2a>
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	4770      	bx	lr
 800a5d0:	2020      	movs	r0, #32
 800a5d2:	4770      	bx	lr

0800a5d4 <__i2b>:
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	2101      	movs	r1, #1
 800a5da:	f7ff ff44 	bl	800a466 <_Balloc>
 800a5de:	2201      	movs	r2, #1
 800a5e0:	6144      	str	r4, [r0, #20]
 800a5e2:	6102      	str	r2, [r0, #16]
 800a5e4:	bd10      	pop	{r4, pc}

0800a5e6 <__multiply>:
 800a5e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ea:	4614      	mov	r4, r2
 800a5ec:	690a      	ldr	r2, [r1, #16]
 800a5ee:	6923      	ldr	r3, [r4, #16]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	bfb8      	it	lt
 800a5f4:	460b      	movlt	r3, r1
 800a5f6:	4688      	mov	r8, r1
 800a5f8:	bfbc      	itt	lt
 800a5fa:	46a0      	movlt	r8, r4
 800a5fc:	461c      	movlt	r4, r3
 800a5fe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a602:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a606:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a60a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a60e:	eb07 0609 	add.w	r6, r7, r9
 800a612:	42b3      	cmp	r3, r6
 800a614:	bfb8      	it	lt
 800a616:	3101      	addlt	r1, #1
 800a618:	f7ff ff25 	bl	800a466 <_Balloc>
 800a61c:	f100 0514 	add.w	r5, r0, #20
 800a620:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a624:	462b      	mov	r3, r5
 800a626:	2200      	movs	r2, #0
 800a628:	4573      	cmp	r3, lr
 800a62a:	d316      	bcc.n	800a65a <__multiply+0x74>
 800a62c:	f104 0214 	add.w	r2, r4, #20
 800a630:	f108 0114 	add.w	r1, r8, #20
 800a634:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a638:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	9b00      	ldr	r3, [sp, #0]
 800a640:	9201      	str	r2, [sp, #4]
 800a642:	4293      	cmp	r3, r2
 800a644:	d80c      	bhi.n	800a660 <__multiply+0x7a>
 800a646:	2e00      	cmp	r6, #0
 800a648:	dd03      	ble.n	800a652 <__multiply+0x6c>
 800a64a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d05d      	beq.n	800a70e <__multiply+0x128>
 800a652:	6106      	str	r6, [r0, #16]
 800a654:	b003      	add	sp, #12
 800a656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65a:	f843 2b04 	str.w	r2, [r3], #4
 800a65e:	e7e3      	b.n	800a628 <__multiply+0x42>
 800a660:	f8b2 b000 	ldrh.w	fp, [r2]
 800a664:	f1bb 0f00 	cmp.w	fp, #0
 800a668:	d023      	beq.n	800a6b2 <__multiply+0xcc>
 800a66a:	4689      	mov	r9, r1
 800a66c:	46ac      	mov	ip, r5
 800a66e:	f04f 0800 	mov.w	r8, #0
 800a672:	f859 4b04 	ldr.w	r4, [r9], #4
 800a676:	f8dc a000 	ldr.w	sl, [ip]
 800a67a:	b2a3      	uxth	r3, r4
 800a67c:	fa1f fa8a 	uxth.w	sl, sl
 800a680:	fb0b a303 	mla	r3, fp, r3, sl
 800a684:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a688:	f8dc 4000 	ldr.w	r4, [ip]
 800a68c:	4443      	add	r3, r8
 800a68e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a692:	fb0b 840a 	mla	r4, fp, sl, r8
 800a696:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a69a:	46e2      	mov	sl, ip
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a6a2:	454f      	cmp	r7, r9
 800a6a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a6a8:	f84a 3b04 	str.w	r3, [sl], #4
 800a6ac:	d82b      	bhi.n	800a706 <__multiply+0x120>
 800a6ae:	f8cc 8004 	str.w	r8, [ip, #4]
 800a6b2:	9b01      	ldr	r3, [sp, #4]
 800a6b4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a6b8:	3204      	adds	r2, #4
 800a6ba:	f1ba 0f00 	cmp.w	sl, #0
 800a6be:	d020      	beq.n	800a702 <__multiply+0x11c>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	4689      	mov	r9, r1
 800a6c4:	46a8      	mov	r8, r5
 800a6c6:	f04f 0b00 	mov.w	fp, #0
 800a6ca:	f8b9 c000 	ldrh.w	ip, [r9]
 800a6ce:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a6d2:	fb0a 440c 	mla	r4, sl, ip, r4
 800a6d6:	445c      	add	r4, fp
 800a6d8:	46c4      	mov	ip, r8
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a6e0:	f84c 3b04 	str.w	r3, [ip], #4
 800a6e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6e8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a6ec:	0c1b      	lsrs	r3, r3, #16
 800a6ee:	fb0a b303 	mla	r3, sl, r3, fp
 800a6f2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a6f6:	454f      	cmp	r7, r9
 800a6f8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a6fc:	d805      	bhi.n	800a70a <__multiply+0x124>
 800a6fe:	f8c8 3004 	str.w	r3, [r8, #4]
 800a702:	3504      	adds	r5, #4
 800a704:	e79b      	b.n	800a63e <__multiply+0x58>
 800a706:	46d4      	mov	ip, sl
 800a708:	e7b3      	b.n	800a672 <__multiply+0x8c>
 800a70a:	46e0      	mov	r8, ip
 800a70c:	e7dd      	b.n	800a6ca <__multiply+0xe4>
 800a70e:	3e01      	subs	r6, #1
 800a710:	e799      	b.n	800a646 <__multiply+0x60>
	...

0800a714 <__pow5mult>:
 800a714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a718:	4615      	mov	r5, r2
 800a71a:	f012 0203 	ands.w	r2, r2, #3
 800a71e:	4606      	mov	r6, r0
 800a720:	460f      	mov	r7, r1
 800a722:	d007      	beq.n	800a734 <__pow5mult+0x20>
 800a724:	3a01      	subs	r2, #1
 800a726:	4c1a      	ldr	r4, [pc, #104]	; (800a790 <__pow5mult+0x7c>)
 800a728:	2300      	movs	r3, #0
 800a72a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a72e:	f7ff fec8 	bl	800a4c2 <__multadd>
 800a732:	4607      	mov	r7, r0
 800a734:	10ad      	asrs	r5, r5, #2
 800a736:	d027      	beq.n	800a788 <__pow5mult+0x74>
 800a738:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800a73a:	b944      	cbnz	r4, 800a74e <__pow5mult+0x3a>
 800a73c:	f240 2171 	movw	r1, #625	; 0x271
 800a740:	4630      	mov	r0, r6
 800a742:	f7ff ff47 	bl	800a5d4 <__i2b>
 800a746:	2300      	movs	r3, #0
 800a748:	64b0      	str	r0, [r6, #72]	; 0x48
 800a74a:	4604      	mov	r4, r0
 800a74c:	6003      	str	r3, [r0, #0]
 800a74e:	f04f 0800 	mov.w	r8, #0
 800a752:	07eb      	lsls	r3, r5, #31
 800a754:	d50a      	bpl.n	800a76c <__pow5mult+0x58>
 800a756:	4639      	mov	r1, r7
 800a758:	4622      	mov	r2, r4
 800a75a:	4630      	mov	r0, r6
 800a75c:	f7ff ff43 	bl	800a5e6 <__multiply>
 800a760:	4639      	mov	r1, r7
 800a762:	4681      	mov	r9, r0
 800a764:	4630      	mov	r0, r6
 800a766:	f7ff fea3 	bl	800a4b0 <_Bfree>
 800a76a:	464f      	mov	r7, r9
 800a76c:	106d      	asrs	r5, r5, #1
 800a76e:	d00b      	beq.n	800a788 <__pow5mult+0x74>
 800a770:	6820      	ldr	r0, [r4, #0]
 800a772:	b938      	cbnz	r0, 800a784 <__pow5mult+0x70>
 800a774:	4622      	mov	r2, r4
 800a776:	4621      	mov	r1, r4
 800a778:	4630      	mov	r0, r6
 800a77a:	f7ff ff34 	bl	800a5e6 <__multiply>
 800a77e:	6020      	str	r0, [r4, #0]
 800a780:	f8c0 8000 	str.w	r8, [r0]
 800a784:	4604      	mov	r4, r0
 800a786:	e7e4      	b.n	800a752 <__pow5mult+0x3e>
 800a788:	4638      	mov	r0, r7
 800a78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78e:	bf00      	nop
 800a790:	0800b318 	.word	0x0800b318

0800a794 <__lshift>:
 800a794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	460c      	mov	r4, r1
 800a79a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	6849      	ldr	r1, [r1, #4]
 800a7a2:	eb0a 0903 	add.w	r9, sl, r3
 800a7a6:	68a3      	ldr	r3, [r4, #8]
 800a7a8:	4607      	mov	r7, r0
 800a7aa:	4616      	mov	r6, r2
 800a7ac:	f109 0501 	add.w	r5, r9, #1
 800a7b0:	42ab      	cmp	r3, r5
 800a7b2:	db32      	blt.n	800a81a <__lshift+0x86>
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	f7ff fe56 	bl	800a466 <_Balloc>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4680      	mov	r8, r0
 800a7be:	f100 0114 	add.w	r1, r0, #20
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	4553      	cmp	r3, sl
 800a7c6:	db2b      	blt.n	800a820 <__lshift+0x8c>
 800a7c8:	6920      	ldr	r0, [r4, #16]
 800a7ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7ce:	f104 0314 	add.w	r3, r4, #20
 800a7d2:	f016 021f 	ands.w	r2, r6, #31
 800a7d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7de:	d025      	beq.n	800a82c <__lshift+0x98>
 800a7e0:	f1c2 0e20 	rsb	lr, r2, #32
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	681e      	ldr	r6, [r3, #0]
 800a7e8:	468a      	mov	sl, r1
 800a7ea:	4096      	lsls	r6, r2
 800a7ec:	4330      	orrs	r0, r6
 800a7ee:	f84a 0b04 	str.w	r0, [sl], #4
 800a7f2:	f853 0b04 	ldr.w	r0, [r3], #4
 800a7f6:	459c      	cmp	ip, r3
 800a7f8:	fa20 f00e 	lsr.w	r0, r0, lr
 800a7fc:	d814      	bhi.n	800a828 <__lshift+0x94>
 800a7fe:	6048      	str	r0, [r1, #4]
 800a800:	b108      	cbz	r0, 800a806 <__lshift+0x72>
 800a802:	f109 0502 	add.w	r5, r9, #2
 800a806:	3d01      	subs	r5, #1
 800a808:	4638      	mov	r0, r7
 800a80a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a80e:	4621      	mov	r1, r4
 800a810:	f7ff fe4e 	bl	800a4b0 <_Bfree>
 800a814:	4640      	mov	r0, r8
 800a816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81a:	3101      	adds	r1, #1
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	e7c7      	b.n	800a7b0 <__lshift+0x1c>
 800a820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a824:	3301      	adds	r3, #1
 800a826:	e7cd      	b.n	800a7c4 <__lshift+0x30>
 800a828:	4651      	mov	r1, sl
 800a82a:	e7dc      	b.n	800a7e6 <__lshift+0x52>
 800a82c:	3904      	subs	r1, #4
 800a82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a832:	f841 2f04 	str.w	r2, [r1, #4]!
 800a836:	459c      	cmp	ip, r3
 800a838:	d8f9      	bhi.n	800a82e <__lshift+0x9a>
 800a83a:	e7e4      	b.n	800a806 <__lshift+0x72>

0800a83c <__mcmp>:
 800a83c:	6903      	ldr	r3, [r0, #16]
 800a83e:	690a      	ldr	r2, [r1, #16]
 800a840:	1a9b      	subs	r3, r3, r2
 800a842:	b530      	push	{r4, r5, lr}
 800a844:	d10c      	bne.n	800a860 <__mcmp+0x24>
 800a846:	0092      	lsls	r2, r2, #2
 800a848:	3014      	adds	r0, #20
 800a84a:	3114      	adds	r1, #20
 800a84c:	1884      	adds	r4, r0, r2
 800a84e:	4411      	add	r1, r2
 800a850:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a854:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a858:	4295      	cmp	r5, r2
 800a85a:	d003      	beq.n	800a864 <__mcmp+0x28>
 800a85c:	d305      	bcc.n	800a86a <__mcmp+0x2e>
 800a85e:	2301      	movs	r3, #1
 800a860:	4618      	mov	r0, r3
 800a862:	bd30      	pop	{r4, r5, pc}
 800a864:	42a0      	cmp	r0, r4
 800a866:	d3f3      	bcc.n	800a850 <__mcmp+0x14>
 800a868:	e7fa      	b.n	800a860 <__mcmp+0x24>
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295
 800a86e:	e7f7      	b.n	800a860 <__mcmp+0x24>

0800a870 <__mdiff>:
 800a870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a874:	460d      	mov	r5, r1
 800a876:	4607      	mov	r7, r0
 800a878:	4611      	mov	r1, r2
 800a87a:	4628      	mov	r0, r5
 800a87c:	4614      	mov	r4, r2
 800a87e:	f7ff ffdd 	bl	800a83c <__mcmp>
 800a882:	1e06      	subs	r6, r0, #0
 800a884:	d108      	bne.n	800a898 <__mdiff+0x28>
 800a886:	4631      	mov	r1, r6
 800a888:	4638      	mov	r0, r7
 800a88a:	f7ff fdec 	bl	800a466 <_Balloc>
 800a88e:	2301      	movs	r3, #1
 800a890:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a898:	bfa4      	itt	ge
 800a89a:	4623      	movge	r3, r4
 800a89c:	462c      	movge	r4, r5
 800a89e:	4638      	mov	r0, r7
 800a8a0:	6861      	ldr	r1, [r4, #4]
 800a8a2:	bfa6      	itte	ge
 800a8a4:	461d      	movge	r5, r3
 800a8a6:	2600      	movge	r6, #0
 800a8a8:	2601      	movlt	r6, #1
 800a8aa:	f7ff fddc 	bl	800a466 <_Balloc>
 800a8ae:	692b      	ldr	r3, [r5, #16]
 800a8b0:	60c6      	str	r6, [r0, #12]
 800a8b2:	6926      	ldr	r6, [r4, #16]
 800a8b4:	f105 0914 	add.w	r9, r5, #20
 800a8b8:	f104 0214 	add.w	r2, r4, #20
 800a8bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a8c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a8c4:	f100 0514 	add.w	r5, r0, #20
 800a8c8:	f04f 0e00 	mov.w	lr, #0
 800a8cc:	f852 ab04 	ldr.w	sl, [r2], #4
 800a8d0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a8d4:	fa1e f18a 	uxtah	r1, lr, sl
 800a8d8:	b2a3      	uxth	r3, r4
 800a8da:	1ac9      	subs	r1, r1, r3
 800a8dc:	0c23      	lsrs	r3, r4, #16
 800a8de:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a8e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a8e6:	b289      	uxth	r1, r1
 800a8e8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a8ec:	45c8      	cmp	r8, r9
 800a8ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a8f2:	4694      	mov	ip, r2
 800a8f4:	f845 3b04 	str.w	r3, [r5], #4
 800a8f8:	d8e8      	bhi.n	800a8cc <__mdiff+0x5c>
 800a8fa:	45bc      	cmp	ip, r7
 800a8fc:	d304      	bcc.n	800a908 <__mdiff+0x98>
 800a8fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a902:	b183      	cbz	r3, 800a926 <__mdiff+0xb6>
 800a904:	6106      	str	r6, [r0, #16]
 800a906:	e7c5      	b.n	800a894 <__mdiff+0x24>
 800a908:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a90c:	fa1e f381 	uxtah	r3, lr, r1
 800a910:	141a      	asrs	r2, r3, #16
 800a912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a916:	b29b      	uxth	r3, r3
 800a918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a91c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a920:	f845 3b04 	str.w	r3, [r5], #4
 800a924:	e7e9      	b.n	800a8fa <__mdiff+0x8a>
 800a926:	3e01      	subs	r6, #1
 800a928:	e7e9      	b.n	800a8fe <__mdiff+0x8e>

0800a92a <__d2b>:
 800a92a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a92e:	460e      	mov	r6, r1
 800a930:	2101      	movs	r1, #1
 800a932:	ec59 8b10 	vmov	r8, r9, d0
 800a936:	4615      	mov	r5, r2
 800a938:	f7ff fd95 	bl	800a466 <_Balloc>
 800a93c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a940:	4607      	mov	r7, r0
 800a942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a946:	bb34      	cbnz	r4, 800a996 <__d2b+0x6c>
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	f1b8 0300 	subs.w	r3, r8, #0
 800a94e:	d027      	beq.n	800a9a0 <__d2b+0x76>
 800a950:	a802      	add	r0, sp, #8
 800a952:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a956:	f7ff fe0e 	bl	800a576 <__lo0bits>
 800a95a:	9900      	ldr	r1, [sp, #0]
 800a95c:	b1f0      	cbz	r0, 800a99c <__d2b+0x72>
 800a95e:	9a01      	ldr	r2, [sp, #4]
 800a960:	f1c0 0320 	rsb	r3, r0, #32
 800a964:	fa02 f303 	lsl.w	r3, r2, r3
 800a968:	430b      	orrs	r3, r1
 800a96a:	40c2      	lsrs	r2, r0
 800a96c:	617b      	str	r3, [r7, #20]
 800a96e:	9201      	str	r2, [sp, #4]
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	61bb      	str	r3, [r7, #24]
 800a974:	2b00      	cmp	r3, #0
 800a976:	bf14      	ite	ne
 800a978:	2102      	movne	r1, #2
 800a97a:	2101      	moveq	r1, #1
 800a97c:	6139      	str	r1, [r7, #16]
 800a97e:	b1c4      	cbz	r4, 800a9b2 <__d2b+0x88>
 800a980:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a984:	4404      	add	r4, r0
 800a986:	6034      	str	r4, [r6, #0]
 800a988:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a98c:	6028      	str	r0, [r5, #0]
 800a98e:	4638      	mov	r0, r7
 800a990:	b003      	add	sp, #12
 800a992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a99a:	e7d5      	b.n	800a948 <__d2b+0x1e>
 800a99c:	6179      	str	r1, [r7, #20]
 800a99e:	e7e7      	b.n	800a970 <__d2b+0x46>
 800a9a0:	a801      	add	r0, sp, #4
 800a9a2:	f7ff fde8 	bl	800a576 <__lo0bits>
 800a9a6:	9b01      	ldr	r3, [sp, #4]
 800a9a8:	617b      	str	r3, [r7, #20]
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	6139      	str	r1, [r7, #16]
 800a9ae:	3020      	adds	r0, #32
 800a9b0:	e7e5      	b.n	800a97e <__d2b+0x54>
 800a9b2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a9b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9ba:	6030      	str	r0, [r6, #0]
 800a9bc:	6918      	ldr	r0, [r3, #16]
 800a9be:	f7ff fdbb 	bl	800a538 <__hi0bits>
 800a9c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a9c6:	e7e1      	b.n	800a98c <__d2b+0x62>

0800a9c8 <frexp>:
 800a9c8:	b082      	sub	sp, #8
 800a9ca:	ed8d 0b00 	vstr	d0, [sp]
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	9a01      	ldr	r2, [sp, #4]
 800a9d2:	6001      	str	r1, [r0, #0]
 800a9d4:	4918      	ldr	r1, [pc, #96]	; (800aa38 <frexp+0x70>)
 800a9d6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a9da:	428b      	cmp	r3, r1
 800a9dc:	dc23      	bgt.n	800aa26 <frexp+0x5e>
 800a9de:	9900      	ldr	r1, [sp, #0]
 800a9e0:	4319      	orrs	r1, r3
 800a9e2:	d020      	beq.n	800aa26 <frexp+0x5e>
 800a9e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9e8:	da0b      	bge.n	800aa02 <frexp+0x3a>
 800a9ea:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800aa30 <frexp+0x68>
 800a9ee:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a9f2:	ed8d 7b00 	vstr	d7, [sp]
 800a9f6:	9a01      	ldr	r2, [sp, #4]
 800a9f8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800a9fc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800aa00:	6001      	str	r1, [r0, #0]
 800aa02:	6801      	ldr	r1, [r0, #0]
 800aa04:	151b      	asrs	r3, r3, #20
 800aa06:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aa0a:	440b      	add	r3, r1
 800aa0c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800aa10:	6003      	str	r3, [r0, #0]
 800aa12:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800aa16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa1a:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
 800aa1e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800aa22:	e9cd 0100 	strd	r0, r1, [sp]
 800aa26:	ed9d 0b00 	vldr	d0, [sp]
 800aa2a:	b002      	add	sp, #8
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	00000000 	.word	0x00000000
 800aa34:	43500000 	.word	0x43500000
 800aa38:	7fefffff 	.word	0x7fefffff

0800aa3c <strncpy>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	3901      	subs	r1, #1
 800aa40:	4604      	mov	r4, r0
 800aa42:	b902      	cbnz	r2, 800aa46 <strncpy+0xa>
 800aa44:	bd70      	pop	{r4, r5, r6, pc}
 800aa46:	4623      	mov	r3, r4
 800aa48:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800aa4c:	f803 5b01 	strb.w	r5, [r3], #1
 800aa50:	1e56      	subs	r6, r2, #1
 800aa52:	b92d      	cbnz	r5, 800aa60 <strncpy+0x24>
 800aa54:	4414      	add	r4, r2
 800aa56:	42a3      	cmp	r3, r4
 800aa58:	d0f4      	beq.n	800aa44 <strncpy+0x8>
 800aa5a:	f803 5b01 	strb.w	r5, [r3], #1
 800aa5e:	e7fa      	b.n	800aa56 <strncpy+0x1a>
 800aa60:	461c      	mov	r4, r3
 800aa62:	4632      	mov	r2, r6
 800aa64:	e7ed      	b.n	800aa42 <strncpy+0x6>

0800aa66 <__ssprint_r>:
 800aa66:	6893      	ldr	r3, [r2, #8]
 800aa68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	4681      	mov	r9, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	4616      	mov	r6, r2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d05e      	beq.n	800ab34 <__ssprint_r+0xce>
 800aa76:	f04f 0b00 	mov.w	fp, #0
 800aa7a:	f8d2 a000 	ldr.w	sl, [r2]
 800aa7e:	465f      	mov	r7, fp
 800aa80:	b357      	cbz	r7, 800aad8 <__ssprint_r+0x72>
 800aa82:	68a3      	ldr	r3, [r4, #8]
 800aa84:	429f      	cmp	r7, r3
 800aa86:	d340      	bcc.n	800ab0a <__ssprint_r+0xa4>
 800aa88:	89a2      	ldrh	r2, [r4, #12]
 800aa8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa8e:	d03c      	beq.n	800ab0a <__ssprint_r+0xa4>
 800aa90:	6825      	ldr	r5, [r4, #0]
 800aa92:	6921      	ldr	r1, [r4, #16]
 800aa94:	eba5 0801 	sub.w	r8, r5, r1
 800aa98:	6965      	ldr	r5, [r4, #20]
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaa0:	fb95 f5f3 	sdiv	r5, r5, r3
 800aaa4:	f108 0301 	add.w	r3, r8, #1
 800aaa8:	443b      	add	r3, r7
 800aaaa:	429d      	cmp	r5, r3
 800aaac:	bf38      	it	cc
 800aaae:	461d      	movcc	r5, r3
 800aab0:	0553      	lsls	r3, r2, #21
 800aab2:	d544      	bpl.n	800ab3e <__ssprint_r+0xd8>
 800aab4:	4629      	mov	r1, r5
 800aab6:	4648      	mov	r0, r9
 800aab8:	f7fd f956 	bl	8007d68 <_malloc_r>
 800aabc:	b988      	cbnz	r0, 800aae2 <__ssprint_r+0x7c>
 800aabe:	230c      	movs	r3, #12
 800aac0:	f8c9 3000 	str.w	r3, [r9]
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaca:	81a3      	strh	r3, [r4, #12]
 800aacc:	2300      	movs	r3, #0
 800aace:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800aad2:	f04f 30ff 	mov.w	r0, #4294967295
 800aad6:	e02f      	b.n	800ab38 <__ssprint_r+0xd2>
 800aad8:	e9da b700 	ldrd	fp, r7, [sl]
 800aadc:	f10a 0a08 	add.w	sl, sl, #8
 800aae0:	e7ce      	b.n	800aa80 <__ssprint_r+0x1a>
 800aae2:	4642      	mov	r2, r8
 800aae4:	6921      	ldr	r1, [r4, #16]
 800aae6:	9001      	str	r0, [sp, #4]
 800aae8:	f7ff fcb2 	bl	800a450 <memcpy>
 800aaec:	89a2      	ldrh	r2, [r4, #12]
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800aaf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aaf8:	81a2      	strh	r2, [r4, #12]
 800aafa:	6123      	str	r3, [r4, #16]
 800aafc:	6165      	str	r5, [r4, #20]
 800aafe:	4443      	add	r3, r8
 800ab00:	eba5 0508 	sub.w	r5, r5, r8
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	60a5      	str	r5, [r4, #8]
 800ab08:	463b      	mov	r3, r7
 800ab0a:	42bb      	cmp	r3, r7
 800ab0c:	bf28      	it	cs
 800ab0e:	463b      	movcs	r3, r7
 800ab10:	461a      	mov	r2, r3
 800ab12:	4659      	mov	r1, fp
 800ab14:	6820      	ldr	r0, [r4, #0]
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	f000 f8b3 	bl	800ac82 <memmove>
 800ab1c:	68a2      	ldr	r2, [r4, #8]
 800ab1e:	9b01      	ldr	r3, [sp, #4]
 800ab20:	1ad2      	subs	r2, r2, r3
 800ab22:	60a2      	str	r2, [r4, #8]
 800ab24:	6822      	ldr	r2, [r4, #0]
 800ab26:	4413      	add	r3, r2
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	68b3      	ldr	r3, [r6, #8]
 800ab2c:	1bdf      	subs	r7, r3, r7
 800ab2e:	60b7      	str	r7, [r6, #8]
 800ab30:	2f00      	cmp	r7, #0
 800ab32:	d1d1      	bne.n	800aad8 <__ssprint_r+0x72>
 800ab34:	2000      	movs	r0, #0
 800ab36:	6070      	str	r0, [r6, #4]
 800ab38:	b003      	add	sp, #12
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4648      	mov	r0, r9
 800ab42:	f000 f8b7 	bl	800acb4 <_realloc_r>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d1d6      	bne.n	800aafa <__ssprint_r+0x94>
 800ab4c:	6921      	ldr	r1, [r4, #16]
 800ab4e:	4648      	mov	r0, r9
 800ab50:	f7ff fbb2 	bl	800a2b8 <_free_r>
 800ab54:	e7b3      	b.n	800aabe <__ssprint_r+0x58>
	...

0800ab58 <__register_exitproc>:
 800ab58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab5c:	4c26      	ldr	r4, [pc, #152]	; (800abf8 <__register_exitproc+0xa0>)
 800ab5e:	4606      	mov	r6, r0
 800ab60:	6820      	ldr	r0, [r4, #0]
 800ab62:	4698      	mov	r8, r3
 800ab64:	460f      	mov	r7, r1
 800ab66:	4691      	mov	r9, r2
 800ab68:	f7ff fc70 	bl	800a44c <__retarget_lock_acquire_recursive>
 800ab6c:	4b23      	ldr	r3, [pc, #140]	; (800abfc <__register_exitproc+0xa4>)
 800ab6e:	681d      	ldr	r5, [r3, #0]
 800ab70:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800ab74:	b918      	cbnz	r0, 800ab7e <__register_exitproc+0x26>
 800ab76:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800ab7a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800ab7e:	6843      	ldr	r3, [r0, #4]
 800ab80:	2b1f      	cmp	r3, #31
 800ab82:	dd19      	ble.n	800abb8 <__register_exitproc+0x60>
 800ab84:	4b1e      	ldr	r3, [pc, #120]	; (800ac00 <__register_exitproc+0xa8>)
 800ab86:	b933      	cbnz	r3, 800ab96 <__register_exitproc+0x3e>
 800ab88:	6820      	ldr	r0, [r4, #0]
 800ab8a:	f7ff fc60 	bl	800a44e <__retarget_lock_release_recursive>
 800ab8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab96:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ab9a:	f7fd f8d5 	bl	8007d48 <malloc>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d0f2      	beq.n	800ab88 <__register_exitproc+0x30>
 800aba2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800aba6:	6003      	str	r3, [r0, #0]
 800aba8:	2200      	movs	r2, #0
 800abaa:	6042      	str	r2, [r0, #4]
 800abac:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800abb0:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800abb4:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800abb8:	6843      	ldr	r3, [r0, #4]
 800abba:	b19e      	cbz	r6, 800abe4 <__register_exitproc+0x8c>
 800abbc:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800abc0:	2201      	movs	r2, #1
 800abc2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800abc6:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800abca:	409a      	lsls	r2, r3
 800abcc:	4311      	orrs	r1, r2
 800abce:	2e02      	cmp	r6, #2
 800abd0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800abd4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800abd8:	bf02      	ittt	eq
 800abda:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800abde:	430a      	orreq	r2, r1
 800abe0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	3302      	adds	r3, #2
 800abe8:	6042      	str	r2, [r0, #4]
 800abea:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800abee:	6820      	ldr	r0, [r4, #0]
 800abf0:	f7ff fc2d 	bl	800a44e <__retarget_lock_release_recursive>
 800abf4:	2000      	movs	r0, #0
 800abf6:	e7cc      	b.n	800ab92 <__register_exitproc+0x3a>
 800abf8:	24000850 	.word	0x24000850
 800abfc:	0800b1bc 	.word	0x0800b1bc
 800ac00:	08007d49 	.word	0x08007d49

0800ac04 <_calloc_r>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	4351      	muls	r1, r2
 800ac08:	f7fd f8ae 	bl	8007d68 <_malloc_r>
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	b198      	cbz	r0, 800ac38 <_calloc_r+0x34>
 800ac10:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ac14:	f022 0203 	bic.w	r2, r2, #3
 800ac18:	3a04      	subs	r2, #4
 800ac1a:	2a24      	cmp	r2, #36	; 0x24
 800ac1c:	d81b      	bhi.n	800ac56 <_calloc_r+0x52>
 800ac1e:	2a13      	cmp	r2, #19
 800ac20:	d917      	bls.n	800ac52 <_calloc_r+0x4e>
 800ac22:	2100      	movs	r1, #0
 800ac24:	2a1b      	cmp	r2, #27
 800ac26:	e9c0 1100 	strd	r1, r1, [r0]
 800ac2a:	d807      	bhi.n	800ac3c <_calloc_r+0x38>
 800ac2c:	f100 0308 	add.w	r3, r0, #8
 800ac30:	2200      	movs	r2, #0
 800ac32:	e9c3 2200 	strd	r2, r2, [r3]
 800ac36:	609a      	str	r2, [r3, #8]
 800ac38:	4620      	mov	r0, r4
 800ac3a:	bd10      	pop	{r4, pc}
 800ac3c:	2a24      	cmp	r2, #36	; 0x24
 800ac3e:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800ac42:	bf11      	iteee	ne
 800ac44:	f100 0310 	addne.w	r3, r0, #16
 800ac48:	6101      	streq	r1, [r0, #16]
 800ac4a:	f100 0318 	addeq.w	r3, r0, #24
 800ac4e:	6141      	streq	r1, [r0, #20]
 800ac50:	e7ee      	b.n	800ac30 <_calloc_r+0x2c>
 800ac52:	4603      	mov	r3, r0
 800ac54:	e7ec      	b.n	800ac30 <_calloc_r+0x2c>
 800ac56:	2100      	movs	r1, #0
 800ac58:	f7fd fabc 	bl	80081d4 <memset>
 800ac5c:	e7ec      	b.n	800ac38 <_calloc_r+0x34>

0800ac5e <__ascii_mbtowc>:
 800ac5e:	b082      	sub	sp, #8
 800ac60:	b901      	cbnz	r1, 800ac64 <__ascii_mbtowc+0x6>
 800ac62:	a901      	add	r1, sp, #4
 800ac64:	b142      	cbz	r2, 800ac78 <__ascii_mbtowc+0x1a>
 800ac66:	b14b      	cbz	r3, 800ac7c <__ascii_mbtowc+0x1e>
 800ac68:	7813      	ldrb	r3, [r2, #0]
 800ac6a:	600b      	str	r3, [r1, #0]
 800ac6c:	7812      	ldrb	r2, [r2, #0]
 800ac6e:	1c10      	adds	r0, r2, #0
 800ac70:	bf18      	it	ne
 800ac72:	2001      	movne	r0, #1
 800ac74:	b002      	add	sp, #8
 800ac76:	4770      	bx	lr
 800ac78:	4610      	mov	r0, r2
 800ac7a:	e7fb      	b.n	800ac74 <__ascii_mbtowc+0x16>
 800ac7c:	f06f 0001 	mvn.w	r0, #1
 800ac80:	e7f8      	b.n	800ac74 <__ascii_mbtowc+0x16>

0800ac82 <memmove>:
 800ac82:	4288      	cmp	r0, r1
 800ac84:	b510      	push	{r4, lr}
 800ac86:	eb01 0302 	add.w	r3, r1, r2
 800ac8a:	d807      	bhi.n	800ac9c <memmove+0x1a>
 800ac8c:	1e42      	subs	r2, r0, #1
 800ac8e:	4299      	cmp	r1, r3
 800ac90:	d00a      	beq.n	800aca8 <memmove+0x26>
 800ac92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac96:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ac9a:	e7f8      	b.n	800ac8e <memmove+0xc>
 800ac9c:	4283      	cmp	r3, r0
 800ac9e:	d9f5      	bls.n	800ac8c <memmove+0xa>
 800aca0:	1881      	adds	r1, r0, r2
 800aca2:	1ad2      	subs	r2, r2, r3
 800aca4:	42d3      	cmn	r3, r2
 800aca6:	d100      	bne.n	800acaa <memmove+0x28>
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800acb2:	e7f7      	b.n	800aca4 <memmove+0x22>

0800acb4 <_realloc_r>:
 800acb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb8:	4682      	mov	sl, r0
 800acba:	460c      	mov	r4, r1
 800acbc:	b929      	cbnz	r1, 800acca <_realloc_r+0x16>
 800acbe:	4611      	mov	r1, r2
 800acc0:	b003      	add	sp, #12
 800acc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc6:	f7fd b84f 	b.w	8007d68 <_malloc_r>
 800acca:	9201      	str	r2, [sp, #4]
 800accc:	f7fd fa8a 	bl	80081e4 <__malloc_lock>
 800acd0:	9a01      	ldr	r2, [sp, #4]
 800acd2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800acd6:	f102 080b 	add.w	r8, r2, #11
 800acda:	f1b8 0f16 	cmp.w	r8, #22
 800acde:	f1a4 0908 	sub.w	r9, r4, #8
 800ace2:	f025 0603 	bic.w	r6, r5, #3
 800ace6:	d90b      	bls.n	800ad00 <_realloc_r+0x4c>
 800ace8:	f038 0807 	bics.w	r8, r8, #7
 800acec:	d50a      	bpl.n	800ad04 <_realloc_r+0x50>
 800acee:	230c      	movs	r3, #12
 800acf0:	f8ca 3000 	str.w	r3, [sl]
 800acf4:	f04f 0b00 	mov.w	fp, #0
 800acf8:	4658      	mov	r0, fp
 800acfa:	b003      	add	sp, #12
 800acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad00:	f04f 0810 	mov.w	r8, #16
 800ad04:	4590      	cmp	r8, r2
 800ad06:	d3f2      	bcc.n	800acee <_realloc_r+0x3a>
 800ad08:	45b0      	cmp	r8, r6
 800ad0a:	f340 8170 	ble.w	800afee <_realloc_r+0x33a>
 800ad0e:	49a9      	ldr	r1, [pc, #676]	; (800afb4 <_realloc_r+0x300>)
 800ad10:	9101      	str	r1, [sp, #4]
 800ad12:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ad16:	eb09 0306 	add.w	r3, r9, r6
 800ad1a:	459c      	cmp	ip, r3
 800ad1c:	6858      	ldr	r0, [r3, #4]
 800ad1e:	d005      	beq.n	800ad2c <_realloc_r+0x78>
 800ad20:	f020 0101 	bic.w	r1, r0, #1
 800ad24:	4419      	add	r1, r3
 800ad26:	6849      	ldr	r1, [r1, #4]
 800ad28:	07cf      	lsls	r7, r1, #31
 800ad2a:	d447      	bmi.n	800adbc <_realloc_r+0x108>
 800ad2c:	f020 0003 	bic.w	r0, r0, #3
 800ad30:	459c      	cmp	ip, r3
 800ad32:	eb06 0700 	add.w	r7, r6, r0
 800ad36:	d119      	bne.n	800ad6c <_realloc_r+0xb8>
 800ad38:	f108 0110 	add.w	r1, r8, #16
 800ad3c:	42b9      	cmp	r1, r7
 800ad3e:	dc3f      	bgt.n	800adc0 <_realloc_r+0x10c>
 800ad40:	eb09 0308 	add.w	r3, r9, r8
 800ad44:	9a01      	ldr	r2, [sp, #4]
 800ad46:	eba7 0708 	sub.w	r7, r7, r8
 800ad4a:	f047 0701 	orr.w	r7, r7, #1
 800ad4e:	6093      	str	r3, [r2, #8]
 800ad50:	605f      	str	r7, [r3, #4]
 800ad52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	ea43 0308 	orr.w	r3, r3, r8
 800ad5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad62:	4650      	mov	r0, sl
 800ad64:	f7fd fa44 	bl	80081f0 <__malloc_unlock>
 800ad68:	46a3      	mov	fp, r4
 800ad6a:	e7c5      	b.n	800acf8 <_realloc_r+0x44>
 800ad6c:	45b8      	cmp	r8, r7
 800ad6e:	dc27      	bgt.n	800adc0 <_realloc_r+0x10c>
 800ad70:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ad74:	60da      	str	r2, [r3, #12]
 800ad76:	6093      	str	r3, [r2, #8]
 800ad78:	eba7 0008 	sub.w	r0, r7, r8
 800ad7c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ad80:	280f      	cmp	r0, #15
 800ad82:	f002 0201 	and.w	r2, r2, #1
 800ad86:	eb09 0307 	add.w	r3, r9, r7
 800ad8a:	f240 8132 	bls.w	800aff2 <_realloc_r+0x33e>
 800ad8e:	eb09 0108 	add.w	r1, r9, r8
 800ad92:	ea48 0202 	orr.w	r2, r8, r2
 800ad96:	f040 0001 	orr.w	r0, r0, #1
 800ad9a:	f8c9 2004 	str.w	r2, [r9, #4]
 800ad9e:	6048      	str	r0, [r1, #4]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	f042 0201 	orr.w	r2, r2, #1
 800ada6:	605a      	str	r2, [r3, #4]
 800ada8:	3108      	adds	r1, #8
 800adaa:	4650      	mov	r0, sl
 800adac:	f7ff fa84 	bl	800a2b8 <_free_r>
 800adb0:	4650      	mov	r0, sl
 800adb2:	f7fd fa1d 	bl	80081f0 <__malloc_unlock>
 800adb6:	f109 0b08 	add.w	fp, r9, #8
 800adba:	e79d      	b.n	800acf8 <_realloc_r+0x44>
 800adbc:	2000      	movs	r0, #0
 800adbe:	4603      	mov	r3, r0
 800adc0:	07e9      	lsls	r1, r5, #31
 800adc2:	f100 80c6 	bmi.w	800af52 <_realloc_r+0x29e>
 800adc6:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800adca:	eba9 0505 	sub.w	r5, r9, r5
 800adce:	6869      	ldr	r1, [r5, #4]
 800add0:	f021 0103 	bic.w	r1, r1, #3
 800add4:	eb01 0b06 	add.w	fp, r1, r6
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 8086 	beq.w	800aeea <_realloc_r+0x236>
 800adde:	459c      	cmp	ip, r3
 800ade0:	eb00 070b 	add.w	r7, r0, fp
 800ade4:	d149      	bne.n	800ae7a <_realloc_r+0x1c6>
 800ade6:	f108 0310 	add.w	r3, r8, #16
 800adea:	42bb      	cmp	r3, r7
 800adec:	dc7d      	bgt.n	800aeea <_realloc_r+0x236>
 800adee:	46ab      	mov	fp, r5
 800adf0:	68eb      	ldr	r3, [r5, #12]
 800adf2:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800adf6:	60d3      	str	r3, [r2, #12]
 800adf8:	609a      	str	r2, [r3, #8]
 800adfa:	1f32      	subs	r2, r6, #4
 800adfc:	2a24      	cmp	r2, #36	; 0x24
 800adfe:	d837      	bhi.n	800ae70 <_realloc_r+0x1bc>
 800ae00:	2a13      	cmp	r2, #19
 800ae02:	d933      	bls.n	800ae6c <_realloc_r+0x1b8>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	60ab      	str	r3, [r5, #8]
 800ae08:	6863      	ldr	r3, [r4, #4]
 800ae0a:	60eb      	str	r3, [r5, #12]
 800ae0c:	2a1b      	cmp	r2, #27
 800ae0e:	d81b      	bhi.n	800ae48 <_realloc_r+0x194>
 800ae10:	3408      	adds	r4, #8
 800ae12:	f105 0310 	add.w	r3, r5, #16
 800ae16:	6822      	ldr	r2, [r4, #0]
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	6862      	ldr	r2, [r4, #4]
 800ae1c:	605a      	str	r2, [r3, #4]
 800ae1e:	68a2      	ldr	r2, [r4, #8]
 800ae20:	609a      	str	r2, [r3, #8]
 800ae22:	eb05 0308 	add.w	r3, r5, r8
 800ae26:	9a01      	ldr	r2, [sp, #4]
 800ae28:	eba7 0708 	sub.w	r7, r7, r8
 800ae2c:	f047 0701 	orr.w	r7, r7, #1
 800ae30:	6093      	str	r3, [r2, #8]
 800ae32:	605f      	str	r7, [r3, #4]
 800ae34:	686b      	ldr	r3, [r5, #4]
 800ae36:	f003 0301 	and.w	r3, r3, #1
 800ae3a:	ea43 0308 	orr.w	r3, r3, r8
 800ae3e:	606b      	str	r3, [r5, #4]
 800ae40:	4650      	mov	r0, sl
 800ae42:	f7fd f9d5 	bl	80081f0 <__malloc_unlock>
 800ae46:	e757      	b.n	800acf8 <_realloc_r+0x44>
 800ae48:	68a3      	ldr	r3, [r4, #8]
 800ae4a:	612b      	str	r3, [r5, #16]
 800ae4c:	68e3      	ldr	r3, [r4, #12]
 800ae4e:	616b      	str	r3, [r5, #20]
 800ae50:	2a24      	cmp	r2, #36	; 0x24
 800ae52:	bf01      	itttt	eq
 800ae54:	6923      	ldreq	r3, [r4, #16]
 800ae56:	61ab      	streq	r3, [r5, #24]
 800ae58:	6962      	ldreq	r2, [r4, #20]
 800ae5a:	61ea      	streq	r2, [r5, #28]
 800ae5c:	bf19      	ittee	ne
 800ae5e:	3410      	addne	r4, #16
 800ae60:	f105 0318 	addne.w	r3, r5, #24
 800ae64:	f105 0320 	addeq.w	r3, r5, #32
 800ae68:	3418      	addeq	r4, #24
 800ae6a:	e7d4      	b.n	800ae16 <_realloc_r+0x162>
 800ae6c:	465b      	mov	r3, fp
 800ae6e:	e7d2      	b.n	800ae16 <_realloc_r+0x162>
 800ae70:	4621      	mov	r1, r4
 800ae72:	4658      	mov	r0, fp
 800ae74:	f7ff ff05 	bl	800ac82 <memmove>
 800ae78:	e7d3      	b.n	800ae22 <_realloc_r+0x16e>
 800ae7a:	45b8      	cmp	r8, r7
 800ae7c:	dc35      	bgt.n	800aeea <_realloc_r+0x236>
 800ae7e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ae82:	4628      	mov	r0, r5
 800ae84:	60da      	str	r2, [r3, #12]
 800ae86:	6093      	str	r3, [r2, #8]
 800ae88:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ae8c:	68eb      	ldr	r3, [r5, #12]
 800ae8e:	60d3      	str	r3, [r2, #12]
 800ae90:	609a      	str	r2, [r3, #8]
 800ae92:	1f32      	subs	r2, r6, #4
 800ae94:	2a24      	cmp	r2, #36	; 0x24
 800ae96:	d824      	bhi.n	800aee2 <_realloc_r+0x22e>
 800ae98:	2a13      	cmp	r2, #19
 800ae9a:	d908      	bls.n	800aeae <_realloc_r+0x1fa>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	60ab      	str	r3, [r5, #8]
 800aea0:	6863      	ldr	r3, [r4, #4]
 800aea2:	60eb      	str	r3, [r5, #12]
 800aea4:	2a1b      	cmp	r2, #27
 800aea6:	d80a      	bhi.n	800aebe <_realloc_r+0x20a>
 800aea8:	3408      	adds	r4, #8
 800aeaa:	f105 0010 	add.w	r0, r5, #16
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	6003      	str	r3, [r0, #0]
 800aeb2:	6863      	ldr	r3, [r4, #4]
 800aeb4:	6043      	str	r3, [r0, #4]
 800aeb6:	68a3      	ldr	r3, [r4, #8]
 800aeb8:	6083      	str	r3, [r0, #8]
 800aeba:	46a9      	mov	r9, r5
 800aebc:	e75c      	b.n	800ad78 <_realloc_r+0xc4>
 800aebe:	68a3      	ldr	r3, [r4, #8]
 800aec0:	612b      	str	r3, [r5, #16]
 800aec2:	68e3      	ldr	r3, [r4, #12]
 800aec4:	616b      	str	r3, [r5, #20]
 800aec6:	2a24      	cmp	r2, #36	; 0x24
 800aec8:	bf01      	itttt	eq
 800aeca:	6923      	ldreq	r3, [r4, #16]
 800aecc:	61ab      	streq	r3, [r5, #24]
 800aece:	6963      	ldreq	r3, [r4, #20]
 800aed0:	61eb      	streq	r3, [r5, #28]
 800aed2:	bf19      	ittee	ne
 800aed4:	3410      	addne	r4, #16
 800aed6:	f105 0018 	addne.w	r0, r5, #24
 800aeda:	f105 0020 	addeq.w	r0, r5, #32
 800aede:	3418      	addeq	r4, #24
 800aee0:	e7e5      	b.n	800aeae <_realloc_r+0x1fa>
 800aee2:	4621      	mov	r1, r4
 800aee4:	f7ff fecd 	bl	800ac82 <memmove>
 800aee8:	e7e7      	b.n	800aeba <_realloc_r+0x206>
 800aeea:	45d8      	cmp	r8, fp
 800aeec:	dc31      	bgt.n	800af52 <_realloc_r+0x29e>
 800aeee:	4628      	mov	r0, r5
 800aef0:	68eb      	ldr	r3, [r5, #12]
 800aef2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800aef6:	60d3      	str	r3, [r2, #12]
 800aef8:	609a      	str	r2, [r3, #8]
 800aefa:	1f32      	subs	r2, r6, #4
 800aefc:	2a24      	cmp	r2, #36	; 0x24
 800aefe:	d824      	bhi.n	800af4a <_realloc_r+0x296>
 800af00:	2a13      	cmp	r2, #19
 800af02:	d908      	bls.n	800af16 <_realloc_r+0x262>
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	60ab      	str	r3, [r5, #8]
 800af08:	6863      	ldr	r3, [r4, #4]
 800af0a:	60eb      	str	r3, [r5, #12]
 800af0c:	2a1b      	cmp	r2, #27
 800af0e:	d80a      	bhi.n	800af26 <_realloc_r+0x272>
 800af10:	3408      	adds	r4, #8
 800af12:	f105 0010 	add.w	r0, r5, #16
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	6003      	str	r3, [r0, #0]
 800af1a:	6863      	ldr	r3, [r4, #4]
 800af1c:	6043      	str	r3, [r0, #4]
 800af1e:	68a3      	ldr	r3, [r4, #8]
 800af20:	6083      	str	r3, [r0, #8]
 800af22:	465f      	mov	r7, fp
 800af24:	e7c9      	b.n	800aeba <_realloc_r+0x206>
 800af26:	68a3      	ldr	r3, [r4, #8]
 800af28:	612b      	str	r3, [r5, #16]
 800af2a:	68e3      	ldr	r3, [r4, #12]
 800af2c:	616b      	str	r3, [r5, #20]
 800af2e:	2a24      	cmp	r2, #36	; 0x24
 800af30:	bf01      	itttt	eq
 800af32:	6923      	ldreq	r3, [r4, #16]
 800af34:	61ab      	streq	r3, [r5, #24]
 800af36:	6963      	ldreq	r3, [r4, #20]
 800af38:	61eb      	streq	r3, [r5, #28]
 800af3a:	bf19      	ittee	ne
 800af3c:	3410      	addne	r4, #16
 800af3e:	f105 0018 	addne.w	r0, r5, #24
 800af42:	f105 0020 	addeq.w	r0, r5, #32
 800af46:	3418      	addeq	r4, #24
 800af48:	e7e5      	b.n	800af16 <_realloc_r+0x262>
 800af4a:	4621      	mov	r1, r4
 800af4c:	f7ff fe99 	bl	800ac82 <memmove>
 800af50:	e7e7      	b.n	800af22 <_realloc_r+0x26e>
 800af52:	4611      	mov	r1, r2
 800af54:	4650      	mov	r0, sl
 800af56:	f7fc ff07 	bl	8007d68 <_malloc_r>
 800af5a:	4683      	mov	fp, r0
 800af5c:	2800      	cmp	r0, #0
 800af5e:	f43f af6f 	beq.w	800ae40 <_realloc_r+0x18c>
 800af62:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800af66:	f023 0301 	bic.w	r3, r3, #1
 800af6a:	444b      	add	r3, r9
 800af6c:	f1a0 0208 	sub.w	r2, r0, #8
 800af70:	4293      	cmp	r3, r2
 800af72:	d105      	bne.n	800af80 <_realloc_r+0x2cc>
 800af74:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800af78:	f027 0703 	bic.w	r7, r7, #3
 800af7c:	4437      	add	r7, r6
 800af7e:	e6fb      	b.n	800ad78 <_realloc_r+0xc4>
 800af80:	1f32      	subs	r2, r6, #4
 800af82:	2a24      	cmp	r2, #36	; 0x24
 800af84:	d82f      	bhi.n	800afe6 <_realloc_r+0x332>
 800af86:	2a13      	cmp	r2, #19
 800af88:	d92a      	bls.n	800afe0 <_realloc_r+0x32c>
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	6003      	str	r3, [r0, #0]
 800af8e:	6863      	ldr	r3, [r4, #4]
 800af90:	6043      	str	r3, [r0, #4]
 800af92:	2a1b      	cmp	r2, #27
 800af94:	d810      	bhi.n	800afb8 <_realloc_r+0x304>
 800af96:	f104 0208 	add.w	r2, r4, #8
 800af9a:	f100 0308 	add.w	r3, r0, #8
 800af9e:	6811      	ldr	r1, [r2, #0]
 800afa0:	6019      	str	r1, [r3, #0]
 800afa2:	6851      	ldr	r1, [r2, #4]
 800afa4:	6059      	str	r1, [r3, #4]
 800afa6:	6892      	ldr	r2, [r2, #8]
 800afa8:	609a      	str	r2, [r3, #8]
 800afaa:	4621      	mov	r1, r4
 800afac:	4650      	mov	r0, sl
 800afae:	f7ff f983 	bl	800a2b8 <_free_r>
 800afb2:	e745      	b.n	800ae40 <_realloc_r+0x18c>
 800afb4:	24000440 	.word	0x24000440
 800afb8:	68a3      	ldr	r3, [r4, #8]
 800afba:	6083      	str	r3, [r0, #8]
 800afbc:	68e3      	ldr	r3, [r4, #12]
 800afbe:	60c3      	str	r3, [r0, #12]
 800afc0:	2a24      	cmp	r2, #36	; 0x24
 800afc2:	bf01      	itttt	eq
 800afc4:	6923      	ldreq	r3, [r4, #16]
 800afc6:	6103      	streq	r3, [r0, #16]
 800afc8:	6961      	ldreq	r1, [r4, #20]
 800afca:	6141      	streq	r1, [r0, #20]
 800afcc:	bf19      	ittee	ne
 800afce:	f104 0210 	addne.w	r2, r4, #16
 800afd2:	f100 0310 	addne.w	r3, r0, #16
 800afd6:	f104 0218 	addeq.w	r2, r4, #24
 800afda:	f100 0318 	addeq.w	r3, r0, #24
 800afde:	e7de      	b.n	800af9e <_realloc_r+0x2ea>
 800afe0:	4603      	mov	r3, r0
 800afe2:	4622      	mov	r2, r4
 800afe4:	e7db      	b.n	800af9e <_realloc_r+0x2ea>
 800afe6:	4621      	mov	r1, r4
 800afe8:	f7ff fe4b 	bl	800ac82 <memmove>
 800afec:	e7dd      	b.n	800afaa <_realloc_r+0x2f6>
 800afee:	4637      	mov	r7, r6
 800aff0:	e6c2      	b.n	800ad78 <_realloc_r+0xc4>
 800aff2:	4317      	orrs	r7, r2
 800aff4:	f8c9 7004 	str.w	r7, [r9, #4]
 800aff8:	685a      	ldr	r2, [r3, #4]
 800affa:	f042 0201 	orr.w	r2, r2, #1
 800affe:	605a      	str	r2, [r3, #4]
 800b000:	e6d6      	b.n	800adb0 <_realloc_r+0xfc>
 800b002:	bf00      	nop

0800b004 <__ascii_wctomb>:
 800b004:	b149      	cbz	r1, 800b01a <__ascii_wctomb+0x16>
 800b006:	2aff      	cmp	r2, #255	; 0xff
 800b008:	bf85      	ittet	hi
 800b00a:	238a      	movhi	r3, #138	; 0x8a
 800b00c:	6003      	strhi	r3, [r0, #0]
 800b00e:	700a      	strbls	r2, [r1, #0]
 800b010:	f04f 30ff 	movhi.w	r0, #4294967295
 800b014:	bf98      	it	ls
 800b016:	2001      	movls	r0, #1
 800b018:	4770      	bx	lr
 800b01a:	4608      	mov	r0, r1
 800b01c:	4770      	bx	lr
	...

0800b020 <_init>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	bf00      	nop
 800b024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b026:	bc08      	pop	{r3}
 800b028:	469e      	mov	lr, r3
 800b02a:	4770      	bx	lr

0800b02c <_fini>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	bf00      	nop
 800b030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b032:	bc08      	pop	{r3}
 800b034:	469e      	mov	lr, r3
 800b036:	4770      	bx	lr
