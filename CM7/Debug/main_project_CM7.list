
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a91c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031b8  0800abc0  0800abc0  0001abc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dd78  0800dd78  0001dd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dd80  0800dd80  0001dd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dd84  0800dd84  0001dd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  0800dd88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004544  200001e8  0800df70  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000472c  0800df70  0002472c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aa3c  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004984  00000000  00000000  0004ac52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016e8  00000000  00000000  0004f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001530  00000000  00000000  00050cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c1d5  00000000  00000000  000521f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00017653  00000000  00000000  0008e3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001868bb  00000000  00000000  000a5a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  0022c2d3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000654c  00000000  00000000  0022c3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000035a5  00000000  00000000  00232908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aba4 	.word	0x0800aba4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	0800aba4 	.word	0x0800aba4

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <SystemInit+0xc4>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <SystemInit+0xc4>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <SystemInit+0xc4>)
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SystemInit+0xc4>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemInit+0xc8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a28      	ldr	r2, [pc, #160]	; (8000818 <SystemInit+0xc8>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <SystemInit+0xc8>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemInit+0xc8>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4924      	ldr	r1, [pc, #144]	; (8000818 <SystemInit+0xc8>)
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemInit+0xcc>)
 800078a:	4013      	ands	r3, r2
 800078c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemInit+0xc8>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <SystemInit+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemInit+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <SystemInit+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <SystemInit+0xc8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <SystemInit+0xc8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <SystemInit+0xc8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <SystemInit+0xc8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <SystemInit+0xc8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <SystemInit+0xc8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <SystemInit+0xc8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <SystemInit+0xc8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <SystemInit+0xc8>)
 80007d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <SystemInit+0xc8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <SystemInit+0xd0>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <SystemInit+0xd0>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <SystemInit+0xd4>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <SystemInit+0xd8>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007fa:	d202      	bcs.n	8000802 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <SystemInit+0xdc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SystemInit+0xc4>)
 8000804:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000808:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	58024400 	.word	0x58024400
 800081c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000820:	580000c0 	.word	0x580000c0
 8000824:	5c001000 	.word	0x5c001000
 8000828:	ffff0000 	.word	0xffff0000
 800082c:	51008108 	.word	0x51008108

08000830 <inst_absolute>:

#include "functions.h"

// Preprocessing

void inst_absolute(float32_t src[], float32_t dst[], uint32_t *length){
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	arm_abs_f32(&src[0], &dst[0], *length);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f007 fe47 	bl	80084d8 <arm_abs_f32>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <mean>:
}
void inst_centralized_normalized_absolute(float32_t src[], float32_t dst[], uint32_t *length){

}

void mean(float32_t src[], float32_t *dst, uint32_t *length) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
	arm_mean_f32(&src[0], *length, dst);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	4619      	mov	r1, r3
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f007 f8cc 	bl	8007a04 <arm_mean_f32>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <mean_of_squared>:

void mean_of_squared(float32_t src[], float32_t *dst, uint32_t *length) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	float32_t result;
	arm_power_f32(&src[0], *length, &result);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f107 0214 	add.w	r2, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f007 f880 	bl	8007990 <arm_power_f32>
	*dst = result / (float32_t) *length;
 8000890:	edd7 6a05 	vldr	s13, [r7, #20]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	ee07 3a90 	vmov	s15, r3
 800089c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	edc3 7a00 	vstr	s15, [r3]
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <std_dev>:

void std_dev(float32_t src[], float32_t *dst, uint32_t *length) {
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
	arm_std_f32(&src[0], *length, dst);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	4619      	mov	r1, r3
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f006 ffea 	bl	80078a0 <arm_std_f32>
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <variance>:

void variance(float32_t src[], float32_t *dst, uint32_t *length) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	arm_var_f32(&src[0], *length, dst);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	4619      	mov	r1, r3
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f006 ff51 	bl	8007790 <arm_var_f32>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <gmax>:

void gmax(float32_t src[], uint32_t *length, float32_t *maxValue, uint32_t *maxValueIndex){
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	4c5b      	ldr	r4, [pc, #364]	; (8000a70 <gmax+0x178>)
 8000904:	f242 0c28 	movw	ip, #8232	; 0x2028
 8000908:	44bc      	add	ip, r7
 800090a:	4464      	add	r4, ip
 800090c:	6020      	str	r0, [r4, #0]
 800090e:	4859      	ldr	r0, [pc, #356]	; (8000a74 <gmax+0x17c>)
 8000910:	f242 0428 	movw	r4, #8232	; 0x2028
 8000914:	443c      	add	r4, r7
 8000916:	4420      	add	r0, r4
 8000918:	6001      	str	r1, [r0, #0]
 800091a:	4957      	ldr	r1, [pc, #348]	; (8000a78 <gmax+0x180>)
 800091c:	f242 0028 	movw	r0, #8232	; 0x2028
 8000920:	4438      	add	r0, r7
 8000922:	4401      	add	r1, r0
 8000924:	600a      	str	r2, [r1, #0]
 8000926:	4a55      	ldr	r2, [pc, #340]	; (8000a7c <gmax+0x184>)
 8000928:	f242 0128 	movw	r1, #8232	; 0x2028
 800092c:	4439      	add	r1, r7
 800092e:	440a      	add	r2, r1
 8000930:	6013      	str	r3, [r2, #0]
	uint32_t fftSize = 1024;
 8000932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000936:	f242 0220 	movw	r2, #8224	; 0x2020
 800093a:	443a      	add	r2, r7
 800093c:	6013      	str	r3, [r2, #0]
	uint32_t ifftFlag = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f242 021c 	movw	r2, #8220	; 0x201c
 8000944:	443a      	add	r2, r7
 8000946:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	f242 0218 	movw	r2, #8216	; 0x2018
 800094e:	443a      	add	r2, r7
 8000950:	6013      	str	r3, [r2, #0]
	float32_t *result_mag;
	float32_t result_fft[2048] = {0};
 8000952:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <gmax+0x188>)
 8000954:	f242 0228 	movw	r2, #8232	; 0x2028
 8000958:	443a      	add	r2, r7
 800095a:	4413      	add	r3, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	461a      	mov	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f008 f919 	bl	8008b9c <memset>

	result_mag = (float32_t *) malloc(fftSize/2 * sizeof(float32_t));
 800096a:	f242 0320 	movw	r3, #8224	; 0x2020
 800096e:	443b      	add	r3, r7
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	085b      	lsrs	r3, r3, #1
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f008 f900 	bl	8008b7c <malloc>
 800097c:	4603      	mov	r3, r0
 800097e:	f242 0214 	movw	r2, #8212	; 0x2014
 8000982:	443a      	add	r2, r7
 8000984:	6013      	str	r3, [r2, #0]

	for(int i = 0; i < 2048; i++){
 8000986:	2300      	movs	r3, #0
 8000988:	f242 0224 	movw	r2, #8228	; 0x2024
 800098c:	443a      	add	r2, r7
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e021      	b.n	80009d6 <gmax+0xde>
		result_fft[i] = src[i];
 8000992:	f242 0324 	movw	r3, #8228	; 0x2024
 8000996:	443b      	add	r3, r7
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	009a      	lsls	r2, r3, #2
 800099c:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <gmax+0x178>)
 800099e:	f242 0128 	movw	r1, #8232	; 0x2028
 80009a2:	4439      	add	r1, r7
 80009a4:	440b      	add	r3, r1
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <gmax+0x188>)
 80009ae:	f242 0128 	movw	r1, #8232	; 0x2028
 80009b2:	4439      	add	r1, r7
 80009b4:	440b      	add	r3, r1
 80009b6:	f242 0124 	movw	r1, #8228	; 0x2024
 80009ba:	4439      	add	r1, r7
 80009bc:	6809      	ldr	r1, [r1, #0]
 80009be:	0089      	lsls	r1, r1, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2048; i++){
 80009c4:	f242 0324 	movw	r3, #8228	; 0x2024
 80009c8:	443b      	add	r3, r7
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	f242 0224 	movw	r2, #8228	; 0x2024
 80009d2:	443a      	add	r2, r7
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	f242 0324 	movw	r3, #8228	; 0x2024
 80009da:	443b      	add	r3, r7
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e2:	dbd6      	blt.n	8000992 <gmax+0x9a>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len1024, &result_fft[0], ifftFlag, doBitReverse);
 80009e4:	f242 031c 	movw	r3, #8220	; 0x201c
 80009e8:	443b      	add	r3, r7
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	f242 0318 	movw	r3, #8216	; 0x2018
 80009f2:	443b      	add	r3, r7
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4921      	ldr	r1, [pc, #132]	; (8000a80 <gmax+0x188>)
 80009fa:	f242 0028 	movw	r0, #8232	; 0x2028
 80009fe:	4438      	add	r0, r7
 8000a00:	4401      	add	r1, r0
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <gmax+0x18c>)
 8000a04:	f007 fbc2 	bl	800818c <arm_cfft_f32>
	arm_cmplx_mag_f32(result_fft, result_mag, fftSize/2);
 8000a08:	f242 0320 	movw	r3, #8224	; 0x2020
 8000a0c:	443b      	add	r3, r7
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	085a      	lsrs	r2, r3, #1
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <gmax+0x188>)
 8000a14:	f242 0128 	movw	r1, #8232	; 0x2028
 8000a18:	4439      	add	r1, r7
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f242 0114 	movw	r1, #8212	; 0x2014
 8000a20:	4439      	add	r1, r7
 8000a22:	6809      	ldr	r1, [r1, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f007 fc29 	bl	800827c <arm_cmplx_mag_f32>
	arm_max_f32(result_mag, fftSize/2, maxValue, maxValueIndex);
 8000a2a:	f242 0320 	movw	r3, #8224	; 0x2020
 8000a2e:	443b      	add	r3, r7
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	0859      	lsrs	r1, r3, #1
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <gmax+0x184>)
 8000a36:	f242 0228 	movw	r2, #8232	; 0x2028
 8000a3a:	443a      	add	r2, r7
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <gmax+0x180>)
 8000a40:	f242 0028 	movw	r0, #8232	; 0x2028
 8000a44:	4438      	add	r0, r7
 8000a46:	4402      	add	r2, r0
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	f242 0014 	movw	r0, #8212	; 0x2014
 8000a50:	4438      	add	r0, r7
 8000a52:	6800      	ldr	r0, [r0, #0]
 8000a54:	f007 f80c 	bl	8007a70 <arm_max_f32>
	free(result_mag);
 8000a58:	f242 0314 	movw	r3, #8212	; 0x2014
 8000a5c:	443b      	add	r3, r7
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	f008 f894 	bl	8008b8c <free>
}
 8000a64:	bf00      	nop
 8000a66:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000a6a:	372c      	adds	r7, #44	; 0x2c
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	ffffdfe4 	.word	0xffffdfe4
 8000a74:	ffffdfe0 	.word	0xffffdfe0
 8000a78:	ffffdfdc 	.word	0xffffdfdc
 8000a7c:	ffffdfd8 	.word	0xffffdfd8
 8000a80:	ffffdfec 	.word	0xffffdfec
 8000a84:	0800acf0 	.word	0x0800acf0

08000a88 <central_moment>:

void central_moment(float32_t src[], uint32_t *length, uint32_t *power, float32_t *dst){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	float32_t m = 0.0f;
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
	float32_t *sub, *mult;
	sub = (float32_t *) malloc((*length) * sizeof(float32_t));
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 f86a 	bl	8008b7c <malloc>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	61bb      	str	r3, [r7, #24]
	mult = (float32_t *) malloc((*length) * sizeof(float32_t));
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f008 f862 	bl	8008b7c <malloc>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	617b      	str	r3, [r7, #20]
	//float32_t parcial[2048] = {0};
	//float32_t mult[2048] = {0};
	arm_mean_f32(src, *length, &m);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f006 ff9c 	bl	8007a04 <arm_mean_f32>
	for(uint32_t i = 0; i < (*length); i = i + 4){
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	e048      	b.n	8000b64 <central_moment+0xdc>
		sub[i+0] = (src[i+0] - m);
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	ed93 7a00 	vldr	s14, [r3]
 8000ade:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	4413      	add	r3, r2
 8000aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aee:	edc3 7a00 	vstr	s15, [r3]
		sub[i+1] = (src[i+1] - m);
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	ed93 7a00 	vldr	s14, [r3]
 8000b00:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	3301      	adds	r3, #1
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b12:	edc3 7a00 	vstr	s15, [r3]
		sub[i+2] = (src[i+2] - m);
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3302      	adds	r3, #2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	ed93 7a00 	vldr	s14, [r3]
 8000b24:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4413      	add	r3, r2
 8000b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b36:	edc3 7a00 	vstr	s15, [r3]
		sub[i+3] = (src[i+3] - m);
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3303      	adds	r3, #3
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	ed93 7a00 	vldr	s14, [r3]
 8000b48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	3303      	adds	r3, #3
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4413      	add	r3, r2
 8000b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b5a:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < (*length); i = i + 4){
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	69fa      	ldr	r2, [r7, #28]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d3b1      	bcc.n	8000ad2 <central_moment+0x4a>
	}
	arm_mult_f32(sub, sub, mult, *length);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	69b9      	ldr	r1, [r7, #24]
 8000b76:	69b8      	ldr	r0, [r7, #24]
 8000b78:	f007 fc68 	bl	800844c <arm_mult_f32>
	arm_mean_f32(mult, *length, dst);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	6978      	ldr	r0, [r7, #20]
 8000b86:	f006 ff3d 	bl	8007a04 <arm_mean_f32>
	free(sub);
 8000b8a:	69b8      	ldr	r0, [r7, #24]
 8000b8c:	f007 fffe 	bl	8008b8c <free>
	free(mult);
 8000b90:	6978      	ldr	r0, [r7, #20]
 8000b92:	f007 fffb 	bl	8008b8c <free>
}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a41      	ldr	r2, [pc, #260]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b3f      	ldr	r3, [pc, #252]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd4:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a3a      	ldr	r2, [pc, #232]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c10:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a23      	ldr	r2, [pc, #140]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c70:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <MX_GPIO_Init+0x128>)
 8000c72:	f001 fd71 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4814      	ldr	r0, [pc, #80]	; (8000ccc <MX_GPIO_Init+0x12c>)
 8000c7c:	f001 fd6c 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c80:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <MX_GPIO_Init+0x128>)
 8000c9a:	f001 fb95 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_GPIO_Init+0x12c>)
 8000cb6:	f001 fb87 	bl	80023c8 <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020400 	.word	0x58020400
 8000ccc:	58021000 	.word	0x58021000

08000cd0 <reset_buffer>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void reset_buffer(char *buffer){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 1; i < 50; i++){
 8000cd8:	2301      	movs	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	e007      	b.n	8000cee <reset_buffer+0x1e>
		buffer[i] = '\0';
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 1; i < 50; i++){
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2b31      	cmp	r3, #49	; 0x31
 8000cf2:	d9f4      	bls.n	8000cde <reset_buffer+0xe>
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <processBuffer>:
void processBuffer(uint8_t *receiveBuffer, float *processedBuffer, uint16_t arraySize){
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e00f      	b.n	8000d34 <processBuffer+0x34>
		memcpy(&processedBuffer[i / 4], &receiveBuffer[i], 4);
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	da00      	bge.n	8000d1c <processBuffer+0x1c>
 8000d1a:	3303      	adds	r3, #3
 8000d1c:	109b      	asrs	r3, r3, #2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	4413      	add	r3, r2
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	68f9      	ldr	r1, [r7, #12]
 8000d28:	440a      	add	r2, r1
 8000d2a:	6812      	ldr	r2, [r2, #0]
 8000d2c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dbea      	blt.n	8000d14 <processBuffer+0x14>
	}
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
}
 8000d3e:	bf00      	nop
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <echoReceived>:
void echoReceived(float *processedBuffer, char *transmitBuffer){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af04      	add	r7, sp, #16
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5c:	482e      	ldr	r0, [pc, #184]	; (8000e18 <echoReceived+0xcc>)
 8000d5e:	f001 fcfb 	bl	8002758 <HAL_GPIO_WritePin>
	for(int i = 0; i < 2048; i = i + 2){
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e02e      	b.n	8000dc6 <echoReceived+0x7a>
		reset_buffer(&transmitBuffer[0]);
 8000d68:	6838      	ldr	r0, [r7, #0]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <reset_buffer>
		sprintf(&transmitBuffer[0], "%d - (%.6f) + j(%.6f)\r\n", i, processedBuffer[i], processedBuffer[i+1]);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	edd3 7a00 	vldr	s15, [r3]
 8000d7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	4413      	add	r3, r2
 8000d88:	edd3 6a00 	vldr	s13, [r3]
 8000d8c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000d90:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d94:	ed8d 7b00 	vstr	d7, [sp]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4920      	ldr	r1, [pc, #128]	; (8000e1c <echoReceived+0xd0>)
 8000d9c:	6838      	ldr	r0, [r7, #0]
 8000d9e:	f008 fbf7 	bl	8009590 <siprintf>
		if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000da2:	481f      	ldr	r0, [pc, #124]	; (8000e20 <echoReceived+0xd4>)
 8000da4:	f005 fe40 	bl	8006a28 <UART_CheckIdleState>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <echoReceived+0x74>
			if(HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100) == HAL_TIMEOUT){
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	2232      	movs	r2, #50	; 0x32
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	481a      	ldr	r0, [pc, #104]	; (8000e20 <echoReceived+0xd4>)
 8000db6:	f004 fcc3 	bl	8005740 <HAL_UART_Transmit>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d007      	beq.n	8000dd0 <echoReceived+0x84>
	for(int i = 0; i < 2048; i = i + 2){
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dcc:	dbcc      	blt.n	8000d68 <echoReceived+0x1c>
 8000dce:	e000      	b.n	8000dd2 <echoReceived+0x86>
				break;
 8000dd0:	bf00      	nop
			}
		}
	}
	reset_buffer(&transmitBuffer[0]);
 8000dd2:	6838      	ldr	r0, [r7, #0]
 8000dd4:	f7ff ff7c 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "&");
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	4912      	ldr	r1, [pc, #72]	; (8000e24 <echoReceived+0xd8>)
 8000ddc:	461a      	mov	r2, r3
 8000dde:	460b      	mov	r3, r1
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	8013      	strh	r3, [r2, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <echoReceived+0xd4>)
 8000de6:	f005 fe1f 	bl	8006a28 <UART_CheckIdleState>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d105      	bne.n	8000dfc <echoReceived+0xb0>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100);
 8000df0:	2364      	movs	r3, #100	; 0x64
 8000df2:	2232      	movs	r2, #50	; 0x32
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <echoReceived+0xd4>)
 8000df8:	f004 fca2 	bl	8005740 <HAL_UART_Transmit>
	}
	received = 0;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <echoReceived+0xdc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <echoReceived+0xcc>)
 8000e0a:	f001 fca5 	bl	8002758 <HAL_GPIO_WritePin>
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	58020400 	.word	0x58020400
 8000e1c:	0800abc0 	.word	0x0800abc0
 8000e20:	20004290 	.word	0x20004290
 8000e24:	0800abd8 	.word	0x0800abd8
 8000e28:	20000236 	.word	0x20000236

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char hello_world[50] = {"\r\nHello World!\r\n"};
 8000e36:	4bb9      	ldr	r3, [pc, #740]	; (800111c <main+0x2f0>)
 8000e38:	f242 0428 	movw	r4, #8232	; 0x2028
 8000e3c:	443c      	add	r4, r7
 8000e3e:	461d      	mov	r5, r3
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	7023      	strb	r3, [r4, #0]
 8000e48:	f242 0339 	movw	r3, #8249	; 0x2039
 8000e4c:	443b      	add	r3, r7
 8000e4e:	2221      	movs	r2, #33	; 0x21
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f007 fea2 	bl	8008b9c <memset>
	float32_t signal_array[2048] = {0};
 8000e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e62:	461a      	mov	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	f007 fe99 	bl	8008b9c <memset>
	float32_t mean_value = 0.0f, mean_of_squared_value = 0.0f, std_dev_value = 0.0f, max = 0.0f;
 8000e6a:	4bad      	ldr	r3, [pc, #692]	; (8001120 <main+0x2f4>)
 8000e6c:	f242 0268 	movw	r2, #8296	; 0x2068
 8000e70:	443a      	add	r2, r7
 8000e72:	4413      	add	r3, r2
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	4baa      	ldr	r3, [pc, #680]	; (8001124 <main+0x2f8>)
 8000e7c:	f242 0268 	movw	r2, #8296	; 0x2068
 8000e80:	443a      	add	r2, r7
 8000e82:	4413      	add	r3, r2
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	4ba7      	ldr	r3, [pc, #668]	; (8001128 <main+0x2fc>)
 8000e8c:	f242 0268 	movw	r2, #8296	; 0x2068
 8000e90:	443a      	add	r2, r7
 8000e92:	4413      	add	r3, r2
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	4ba4      	ldr	r3, [pc, #656]	; (800112c <main+0x300>)
 8000e9c:	f242 0268 	movw	r2, #8296	; 0x2068
 8000ea0:	443a      	add	r2, r7
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
	float32_t moment = 0.0f, var = 0.0f;
 8000eaa:	4ba1      	ldr	r3, [pc, #644]	; (8001130 <main+0x304>)
 8000eac:	f242 0268 	movw	r2, #8296	; 0x2068
 8000eb0:	443a      	add	r2, r7
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	4b9e      	ldr	r3, [pc, #632]	; (8001134 <main+0x308>)
 8000ebc:	f242 0268 	movw	r2, #8296	; 0x2068
 8000ec0:	443a      	add	r2, r7
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
	float32_t * result;
	uint32_t power = 2;
 8000eca:	4b9b      	ldr	r3, [pc, #620]	; (8001138 <main+0x30c>)
 8000ecc:	f242 0268 	movw	r2, #8296	; 0x2068
 8000ed0:	443a      	add	r2, r7
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]
	uint32_t counter, length=2048, max_index;
 8000ed8:	4b98      	ldr	r3, [pc, #608]	; (800113c <main+0x310>)
 8000eda:	f242 0268 	movw	r2, #8296	; 0x2068
 8000ede:	443a      	add	r2, r7
 8000ee0:	4413      	add	r3, r2
 8000ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee6:	601a      	str	r2, [r3, #0]
    int32_t timeout; 
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eec:	f242 0264 	movw	r2, #8292	; 0x2064
 8000ef0:	443a      	add	r2, r7
 8000ef2:	6013      	str	r3, [r2, #0]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ef4:	bf00      	nop
 8000ef6:	4b92      	ldr	r3, [pc, #584]	; (8001140 <main+0x314>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00a      	beq.n	8000f18 <main+0xec>
 8000f02:	f242 0364 	movw	r3, #8292	; 0x2064
 8000f06:	443b      	add	r3, r7
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	f242 0164 	movw	r1, #8292	; 0x2064
 8000f10:	4439      	add	r1, r7
 8000f12:	600a      	str	r2, [r1, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dcee      	bgt.n	8000ef6 <main+0xca>
  if ( timeout < 0 )
 8000f18:	f242 0364 	movw	r3, #8292	; 0x2064
 8000f1c:	443b      	add	r3, r7
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da01      	bge.n	8000f28 <main+0xfc>
  {
  Error_Handler();
 8000f24:	f000 fbf2 	bl	800170c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fe3a 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 fb30 	bl	8001590 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f30:	4b83      	ldr	r3, [pc, #524]	; (8001140 <main+0x314>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f36:	4a82      	ldr	r2, [pc, #520]	; (8001140 <main+0x314>)
 8000f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f40:	4b7f      	ldr	r3, [pc, #508]	; (8001140 <main+0x314>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000f4a:	4b7e      	ldr	r3, [pc, #504]	; (8001144 <main+0x318>)
 8000f4c:	f242 0168 	movw	r1, #8296	; 0x2068
 8000f50:	4439      	add	r1, r7
 8000f52:	440b      	add	r3, r1
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	4b7b      	ldr	r3, [pc, #492]	; (8001144 <main+0x318>)
 8000f58:	f242 0268 	movw	r2, #8296	; 0x2068
 8000f5c:	443a      	add	r2, r7
 8000f5e:	4413      	add	r3, r2
 8000f60:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f001 fc12 	bl	800278c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f001 fc28 	bl	80027c0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f74:	f242 0264 	movw	r2, #8292	; 0x2064
 8000f78:	443a      	add	r2, r7
 8000f7a:	6013      	str	r3, [r2, #0]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f7c:	bf00      	nop
 8000f7e:	4b70      	ldr	r3, [pc, #448]	; (8001140 <main+0x314>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10a      	bne.n	8000fa0 <main+0x174>
 8000f8a:	f242 0364 	movw	r3, #8292	; 0x2064
 8000f8e:	443b      	add	r3, r7
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1e5a      	subs	r2, r3, #1
 8000f94:	f242 0164 	movw	r1, #8292	; 0x2064
 8000f98:	4439      	add	r1, r7
 8000f9a:	600a      	str	r2, [r1, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	dcee      	bgt.n	8000f7e <main+0x152>
if ( timeout < 0 )
 8000fa0:	f242 0364 	movw	r3, #8292	; 0x2064
 8000fa4:	443b      	add	r3, r7
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da01      	bge.n	8000fb0 <main+0x184>
{
Error_Handler();
 8000fac:	f000 fbae 	bl	800170c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f7ff fdf6 	bl	8000ba0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fb4:	f000 fca2 	bl	80018fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fb8:	f000 fd3e 	bl	8001a38 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000fbc:	f000 fc30 	bl	8001820 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &receiveBuffer[0], bufferSize);
 8000fc0:	4b61      	ldr	r3, [pc, #388]	; (8001148 <main+0x31c>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4961      	ldr	r1, [pc, #388]	; (800114c <main+0x320>)
 8000fc8:	4861      	ldr	r0, [pc, #388]	; (8001150 <main+0x324>)
 8000fca:	f004 fc4f 	bl	800586c <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, (uint8_t*) &hello_world[0], sizeof(hello_world), 100);
 8000fce:	f242 0128 	movw	r1, #8232	; 0x2028
 8000fd2:	4439      	add	r1, r7
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	2232      	movs	r2, #50	; 0x32
 8000fd8:	485d      	ldr	r0, [pc, #372]	; (8001150 <main+0x324>)
 8000fda:	f004 fbb1 	bl	8005740 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	485c      	ldr	r0, [pc, #368]	; (8001154 <main+0x328>)
 8000fe4:	f001 fbb8 	bl	8002758 <HAL_GPIO_WritePin>

  // HRTimer enable
  __HAL_TIM_ENABLE(&htim2);
 8000fe8:	4b5b      	ldr	r3, [pc, #364]	; (8001158 <main+0x32c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <main+0x32c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
  __HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000ff8:	4b57      	ldr	r3, [pc, #348]	; (8001158 <main+0x32c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b56      	ldr	r3, [pc, #344]	; (8001158 <main+0x32c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001006:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8001008:	4853      	ldr	r0, [pc, #332]	; (8001158 <main+0x32c>)
 800100a:	f004 f88b 	bl	8005124 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800100e:	4b52      	ldr	r3, [pc, #328]	; (8001158 <main+0x32c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24

    // Instantaneous absolute value
	result = (float32_t *) malloc(length * sizeof(float32_t));
 8001016:	4b49      	ldr	r3, [pc, #292]	; (800113c <main+0x310>)
 8001018:	f242 0268 	movw	r2, #8296	; 0x2068
 800101c:	443a      	add	r2, r7
 800101e:	4413      	add	r3, r2
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4618      	mov	r0, r3
 8001026:	f007 fda9 	bl	8008b7c <malloc>
 800102a:	4603      	mov	r3, r0
 800102c:	f242 0260 	movw	r2, #8288	; 0x2060
 8001030:	443a      	add	r2, r7
 8001032:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <main+0x32c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(signal_array, result, &length);
 800103c:	4b3f      	ldr	r3, [pc, #252]	; (800113c <main+0x310>)
 800103e:	f242 0268 	movw	r2, #8296	; 0x2068
 8001042:	443a      	add	r2, r7
 8001044:	4413      	add	r3, r2
 8001046:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800104a:	461a      	mov	r2, r3
 800104c:	f242 0360 	movw	r3, #8288	; 0x2060
 8001050:	443b      	add	r3, r7
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	f7ff fbec 	bl	8000830 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001058:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <main+0x32c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	f242 025c 	movw	r2, #8284	; 0x205c
 8001062:	443a      	add	r2, r7
 8001064:	6013      	str	r3, [r2, #0]

	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 8001066:	483d      	ldr	r0, [pc, #244]	; (800115c <main+0x330>)
 8001068:	f7ff fe32 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Inst abs counter = %ld\r\n", counter);
 800106c:	f242 035c 	movw	r3, #8284	; 0x205c
 8001070:	443b      	add	r3, r7
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	493a      	ldr	r1, [pc, #232]	; (8001160 <main+0x334>)
 8001076:	4839      	ldr	r0, [pc, #228]	; (800115c <main+0x330>)
 8001078:	f008 fa8a 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800107c:	4834      	ldr	r0, [pc, #208]	; (8001150 <main+0x324>)
 800107e:	f005 fcd3 	bl	8006a28 <UART_CheckIdleState>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <main+0x268>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001088:	2364      	movs	r3, #100	; 0x64
 800108a:	2232      	movs	r2, #50	; 0x32
 800108c:	4933      	ldr	r1, [pc, #204]	; (800115c <main+0x330>)
 800108e:	4830      	ldr	r0, [pc, #192]	; (8001150 <main+0x324>)
 8001090:	f004 fb56 	bl	8005740 <HAL_UART_Transmit>
	}

	free(result);
 8001094:	f242 0360 	movw	r3, #8288	; 0x2060
 8001098:	443b      	add	r3, r7
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f007 fd76 	bl	8008b8c <free>

	// Mean
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <main+0x32c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	mean(signal_array, &mean_value, &length);
 80010a8:	4a24      	ldr	r2, [pc, #144]	; (800113c <main+0x310>)
 80010aa:	f242 0368 	movw	r3, #8296	; 0x2068
 80010ae:	443b      	add	r3, r7
 80010b0:	441a      	add	r2, r3
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <main+0x2f4>)
 80010b4:	f242 0168 	movw	r1, #8296	; 0x2068
 80010b8:	4439      	add	r1, r7
 80010ba:	440b      	add	r3, r1
 80010bc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fbc6 	bl	8000852 <mean>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80010c6:	4b24      	ldr	r3, [pc, #144]	; (8001158 <main+0x32c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	f242 025c 	movw	r2, #8284	; 0x205c
 80010d0:	443a      	add	r2, r7
 80010d2:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80010d4:	4821      	ldr	r0, [pc, #132]	; (800115c <main+0x330>)
 80010d6:	f7ff fdfb 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Mean = %f\r\n", mean_value);
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <main+0x2f4>)
 80010dc:	f242 0268 	movw	r2, #8296	; 0x2068
 80010e0:	443a      	add	r2, r7
 80010e2:	4413      	add	r3, r2
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ec:	ec53 2b17 	vmov	r2, r3, d7
 80010f0:	491c      	ldr	r1, [pc, #112]	; (8001164 <main+0x338>)
 80010f2:	481a      	ldr	r0, [pc, #104]	; (800115c <main+0x330>)
 80010f4:	f008 fa4c 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80010f8:	4815      	ldr	r0, [pc, #84]	; (8001150 <main+0x324>)
 80010fa:	f005 fc95 	bl	8006a28 <UART_CheckIdleState>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <main+0x2e4>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	2232      	movs	r2, #50	; 0x32
 8001108:	4914      	ldr	r1, [pc, #80]	; (800115c <main+0x330>)
 800110a:	4811      	ldr	r0, [pc, #68]	; (8001150 <main+0x324>)
 800110c:	f004 fb18 	bl	8005740 <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 8001110:	4812      	ldr	r0, [pc, #72]	; (800115c <main+0x330>)
 8001112:	f7ff fddd 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001116:	f242 035c 	movw	r3, #8284	; 0x205c
 800111a:	e025      	b.n	8001168 <main+0x33c>
 800111c:	0800ac84 	.word	0x0800ac84
 8001120:	ffffdfbc 	.word	0xffffdfbc
 8001124:	ffffdfb8 	.word	0xffffdfb8
 8001128:	ffffdfb4 	.word	0xffffdfb4
 800112c:	ffffdfb0 	.word	0xffffdfb0
 8001130:	ffffdfac 	.word	0xffffdfac
 8001134:	ffffdfa8 	.word	0xffffdfa8
 8001138:	ffffdfa4 	.word	0xffffdfa4
 800113c:	ffffdfa0 	.word	0xffffdfa0
 8001140:	58024400 	.word	0x58024400
 8001144:	ffffdf98 	.word	0xffffdf98
 8001148:	20000008 	.word	0x20000008
 800114c:	20002244 	.word	0x20002244
 8001150:	20004290 	.word	0x20004290
 8001154:	58020400 	.word	0x58020400
 8001158:	20004244 	.word	0x20004244
 800115c:	20000204 	.word	0x20000204
 8001160:	0800abdc 	.word	0x0800abdc
 8001164:	0800abf8 	.word	0x0800abf8
 8001168:	443b      	add	r3, r7
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	49b7      	ldr	r1, [pc, #732]	; (800144c <main+0x620>)
 800116e:	48b8      	ldr	r0, [pc, #736]	; (8001450 <main+0x624>)
 8001170:	f008 fa0e 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001174:	48b7      	ldr	r0, [pc, #732]	; (8001454 <main+0x628>)
 8001176:	f005 fc57 	bl	8006a28 <UART_CheckIdleState>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <main+0x360>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	2232      	movs	r2, #50	; 0x32
 8001184:	49b2      	ldr	r1, [pc, #712]	; (8001450 <main+0x624>)
 8001186:	48b3      	ldr	r0, [pc, #716]	; (8001454 <main+0x628>)
 8001188:	f004 fada 	bl	8005740 <HAL_UART_Transmit>
	}

	// Mean of squared
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800118c:	4bb2      	ldr	r3, [pc, #712]	; (8001458 <main+0x62c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	mean_of_squared(signal_array, &mean_of_squared_value, &length);
 8001194:	4ab1      	ldr	r2, [pc, #708]	; (800145c <main+0x630>)
 8001196:	f242 0368 	movw	r3, #8296	; 0x2068
 800119a:	443b      	add	r3, r7
 800119c:	441a      	add	r2, r3
 800119e:	4bb0      	ldr	r3, [pc, #704]	; (8001460 <main+0x634>)
 80011a0:	f242 0168 	movw	r1, #8296	; 0x2068
 80011a4:	4439      	add	r1, r7
 80011a6:	440b      	add	r3, r1
 80011a8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fb61 	bl	8000874 <mean_of_squared>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80011b2:	4ba9      	ldr	r3, [pc, #676]	; (8001458 <main+0x62c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f242 025c 	movw	r2, #8284	; 0x205c
 80011bc:	443a      	add	r2, r7
 80011be:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80011c0:	48a3      	ldr	r0, [pc, #652]	; (8001450 <main+0x624>)
 80011c2:	f7ff fd85 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Mean of squared = %f\r\n", mean_of_squared_value);
 80011c6:	4ba6      	ldr	r3, [pc, #664]	; (8001460 <main+0x634>)
 80011c8:	f242 0268 	movw	r2, #8296	; 0x2068
 80011cc:	443a      	add	r2, r7
 80011ce:	4413      	add	r3, r2
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d8:	ec53 2b17 	vmov	r2, r3, d7
 80011dc:	49a1      	ldr	r1, [pc, #644]	; (8001464 <main+0x638>)
 80011de:	489c      	ldr	r0, [pc, #624]	; (8001450 <main+0x624>)
 80011e0:	f008 f9d6 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80011e4:	489b      	ldr	r0, [pc, #620]	; (8001454 <main+0x628>)
 80011e6:	f005 fc1f 	bl	8006a28 <UART_CheckIdleState>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <main+0x3d0>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	2232      	movs	r2, #50	; 0x32
 80011f4:	4996      	ldr	r1, [pc, #600]	; (8001450 <main+0x624>)
 80011f6:	4897      	ldr	r0, [pc, #604]	; (8001454 <main+0x628>)
 80011f8:	f004 faa2 	bl	8005740 <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80011fc:	4894      	ldr	r0, [pc, #592]	; (8001450 <main+0x624>)
 80011fe:	f7ff fd67 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001202:	f242 035c 	movw	r3, #8284	; 0x205c
 8001206:	443b      	add	r3, r7
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4990      	ldr	r1, [pc, #576]	; (800144c <main+0x620>)
 800120c:	4890      	ldr	r0, [pc, #576]	; (8001450 <main+0x624>)
 800120e:	f008 f9bf 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001212:	4890      	ldr	r0, [pc, #576]	; (8001454 <main+0x628>)
 8001214:	f005 fc08 	bl	8006a28 <UART_CheckIdleState>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d105      	bne.n	800122a <main+0x3fe>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	2232      	movs	r2, #50	; 0x32
 8001222:	498b      	ldr	r1, [pc, #556]	; (8001450 <main+0x624>)
 8001224:	488b      	ldr	r0, [pc, #556]	; (8001454 <main+0x628>)
 8001226:	f004 fa8b 	bl	8005740 <HAL_UART_Transmit>
	}

	// Standard deviation
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800122a:	4b8b      	ldr	r3, [pc, #556]	; (8001458 <main+0x62c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	std_dev(signal_array, &std_dev_value, &length);
 8001232:	4a8a      	ldr	r2, [pc, #552]	; (800145c <main+0x630>)
 8001234:	f242 0368 	movw	r3, #8296	; 0x2068
 8001238:	443b      	add	r3, r7
 800123a:	441a      	add	r2, r3
 800123c:	4b8a      	ldr	r3, [pc, #552]	; (8001468 <main+0x63c>)
 800123e:	f242 0168 	movw	r1, #8296	; 0x2068
 8001242:	4439      	add	r1, r7
 8001244:	440b      	add	r3, r1
 8001246:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fb31 	bl	80008b2 <std_dev>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001250:	4b81      	ldr	r3, [pc, #516]	; (8001458 <main+0x62c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	f242 025c 	movw	r2, #8284	; 0x205c
 800125a:	443a      	add	r2, r7
 800125c:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 800125e:	487c      	ldr	r0, [pc, #496]	; (8001450 <main+0x624>)
 8001260:	f7ff fd36 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 8001264:	4b80      	ldr	r3, [pc, #512]	; (8001468 <main+0x63c>)
 8001266:	f242 0268 	movw	r2, #8296	; 0x2068
 800126a:	443a      	add	r2, r7
 800126c:	4413      	add	r3, r2
 800126e:	edd3 7a00 	vldr	s15, [r3]
 8001272:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001276:	ec53 2b17 	vmov	r2, r3, d7
 800127a:	497c      	ldr	r1, [pc, #496]	; (800146c <main+0x640>)
 800127c:	4874      	ldr	r0, [pc, #464]	; (8001450 <main+0x624>)
 800127e:	f008 f987 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001282:	4874      	ldr	r0, [pc, #464]	; (8001454 <main+0x628>)
 8001284:	f005 fbd0 	bl	8006a28 <UART_CheckIdleState>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <main+0x46e>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 800128e:	2364      	movs	r3, #100	; 0x64
 8001290:	2232      	movs	r2, #50	; 0x32
 8001292:	496f      	ldr	r1, [pc, #444]	; (8001450 <main+0x624>)
 8001294:	486f      	ldr	r0, [pc, #444]	; (8001454 <main+0x628>)
 8001296:	f004 fa53 	bl	8005740 <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 800129a:	486d      	ldr	r0, [pc, #436]	; (8001450 <main+0x624>)
 800129c:	f7ff fd18 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 80012a0:	f242 035c 	movw	r3, #8284	; 0x205c
 80012a4:	443b      	add	r3, r7
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4968      	ldr	r1, [pc, #416]	; (800144c <main+0x620>)
 80012aa:	4869      	ldr	r0, [pc, #420]	; (8001450 <main+0x624>)
 80012ac:	f008 f970 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80012b0:	4868      	ldr	r0, [pc, #416]	; (8001454 <main+0x628>)
 80012b2:	f005 fbb9 	bl	8006a28 <UART_CheckIdleState>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <main+0x49c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	2232      	movs	r2, #50	; 0x32
 80012c0:	4963      	ldr	r1, [pc, #396]	; (8001450 <main+0x624>)
 80012c2:	4864      	ldr	r0, [pc, #400]	; (8001454 <main+0x628>)
 80012c4:	f004 fa3c 	bl	8005740 <HAL_UART_Transmit>
	}

	// GMAX
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80012c8:	4b63      	ldr	r3, [pc, #396]	; (8001458 <main+0x62c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	gmax(signal_array, &length, &max, &max_index);
 80012d0:	4b67      	ldr	r3, [pc, #412]	; (8001470 <main+0x644>)
 80012d2:	f242 0268 	movw	r2, #8296	; 0x2068
 80012d6:	443a      	add	r2, r7
 80012d8:	4413      	add	r3, r2
 80012da:	4a66      	ldr	r2, [pc, #408]	; (8001474 <main+0x648>)
 80012dc:	f242 0168 	movw	r1, #8296	; 0x2068
 80012e0:	4439      	add	r1, r7
 80012e2:	440a      	add	r2, r1
 80012e4:	495d      	ldr	r1, [pc, #372]	; (800145c <main+0x630>)
 80012e6:	f242 0068 	movw	r0, #8296	; 0x2068
 80012ea:	4438      	add	r0, r7
 80012ec:	4401      	add	r1, r0
 80012ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80012f2:	f7ff fb01 	bl	80008f8 <gmax>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80012f6:	4b58      	ldr	r3, [pc, #352]	; (8001458 <main+0x62c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	f242 025c 	movw	r2, #8284	; 0x205c
 8001300:	443a      	add	r2, r7
 8001302:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 8001304:	4852      	ldr	r0, [pc, #328]	; (8001450 <main+0x624>)
 8001306:	f7ff fce3 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Gmax = %f\r\n", max);
 800130a:	4b5a      	ldr	r3, [pc, #360]	; (8001474 <main+0x648>)
 800130c:	f242 0268 	movw	r2, #8296	; 0x2068
 8001310:	443a      	add	r2, r7
 8001312:	4413      	add	r3, r2
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800131c:	ec53 2b17 	vmov	r2, r3, d7
 8001320:	4955      	ldr	r1, [pc, #340]	; (8001478 <main+0x64c>)
 8001322:	484b      	ldr	r0, [pc, #300]	; (8001450 <main+0x624>)
 8001324:	f008 f934 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001328:	484a      	ldr	r0, [pc, #296]	; (8001454 <main+0x628>)
 800132a:	f005 fb7d 	bl	8006a28 <UART_CheckIdleState>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <main+0x514>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001334:	2364      	movs	r3, #100	; 0x64
 8001336:	2232      	movs	r2, #50	; 0x32
 8001338:	4945      	ldr	r1, [pc, #276]	; (8001450 <main+0x624>)
 800133a:	4846      	ldr	r0, [pc, #280]	; (8001454 <main+0x628>)
 800133c:	f004 fa00 	bl	8005740 <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 8001340:	4843      	ldr	r0, [pc, #268]	; (8001450 <main+0x624>)
 8001342:	f7ff fcc5 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001346:	f242 035c 	movw	r3, #8284	; 0x205c
 800134a:	443b      	add	r3, r7
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	493f      	ldr	r1, [pc, #252]	; (800144c <main+0x620>)
 8001350:	483f      	ldr	r0, [pc, #252]	; (8001450 <main+0x624>)
 8001352:	f008 f91d 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001356:	483f      	ldr	r0, [pc, #252]	; (8001454 <main+0x628>)
 8001358:	f005 fb66 	bl	8006a28 <UART_CheckIdleState>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d105      	bne.n	800136e <main+0x542>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	2232      	movs	r2, #50	; 0x32
 8001366:	493a      	ldr	r1, [pc, #232]	; (8001450 <main+0x624>)
 8001368:	483a      	ldr	r0, [pc, #232]	; (8001454 <main+0x628>)
 800136a:	f004 f9e9 	bl	8005740 <HAL_UART_Transmit>
	}

	// Variance
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <main+0x62c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	variance(signal_array, &var, &length);
 8001376:	4a39      	ldr	r2, [pc, #228]	; (800145c <main+0x630>)
 8001378:	f242 0368 	movw	r3, #8296	; 0x2068
 800137c:	443b      	add	r3, r7
 800137e:	441a      	add	r2, r3
 8001380:	4b3e      	ldr	r3, [pc, #248]	; (800147c <main+0x650>)
 8001382:	f242 0168 	movw	r1, #8296	; 0x2068
 8001386:	4439      	add	r1, r7
 8001388:	440b      	add	r3, r1
 800138a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff faa0 	bl	80008d4 <variance>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <main+0x62c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f242 025c 	movw	r2, #8284	; 0x205c
 800139e:	443a      	add	r2, r7
 80013a0:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80013a2:	482b      	ldr	r0, [pc, #172]	; (8001450 <main+0x624>)
 80013a4:	f7ff fc94 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Variance = %f\r\n", var);
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <main+0x650>)
 80013aa:	f242 0268 	movw	r2, #8296	; 0x2068
 80013ae:	443a      	add	r2, r7
 80013b0:	4413      	add	r3, r2
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ba:	ec53 2b17 	vmov	r2, r3, d7
 80013be:	4930      	ldr	r1, [pc, #192]	; (8001480 <main+0x654>)
 80013c0:	4823      	ldr	r0, [pc, #140]	; (8001450 <main+0x624>)
 80013c2:	f008 f8e5 	bl	8009590 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 80013c6:	4823      	ldr	r0, [pc, #140]	; (8001454 <main+0x628>)
 80013c8:	f004 fcc6 	bl	8005d58 <HAL_UART_GetState>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b20      	cmp	r3, #32
 80013d0:	d105      	bne.n	80013de <main+0x5b2>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	2232      	movs	r2, #50	; 0x32
 80013d6:	491e      	ldr	r1, [pc, #120]	; (8001450 <main+0x624>)
 80013d8:	481e      	ldr	r0, [pc, #120]	; (8001454 <main+0x628>)
 80013da:	f004 f9b1 	bl	8005740 <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80013de:	481c      	ldr	r0, [pc, #112]	; (8001450 <main+0x624>)
 80013e0:	f7ff fc76 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 80013e4:	f242 035c 	movw	r3, #8284	; 0x205c
 80013e8:	443b      	add	r3, r7
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4917      	ldr	r1, [pc, #92]	; (800144c <main+0x620>)
 80013ee:	4818      	ldr	r0, [pc, #96]	; (8001450 <main+0x624>)
 80013f0:	f008 f8ce 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80013f4:	4817      	ldr	r0, [pc, #92]	; (8001454 <main+0x628>)
 80013f6:	f005 fb17 	bl	8006a28 <UART_CheckIdleState>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <main+0x5e0>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	2232      	movs	r2, #50	; 0x32
 8001404:	4912      	ldr	r1, [pc, #72]	; (8001450 <main+0x624>)
 8001406:	4813      	ldr	r0, [pc, #76]	; (8001454 <main+0x628>)
 8001408:	f004 f99a 	bl	8005740 <HAL_UART_Transmit>
	}

	// Central moment
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <main+0x62c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	central_moment(signal_array, &length, &power, &moment);
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <main+0x658>)
 8001416:	f242 0268 	movw	r2, #8296	; 0x2068
 800141a:	443a      	add	r2, r7
 800141c:	4413      	add	r3, r2
 800141e:	4a1a      	ldr	r2, [pc, #104]	; (8001488 <main+0x65c>)
 8001420:	f242 0168 	movw	r1, #8296	; 0x2068
 8001424:	4439      	add	r1, r7
 8001426:	440a      	add	r2, r1
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <main+0x630>)
 800142a:	f242 0068 	movw	r0, #8296	; 0x2068
 800142e:	4438      	add	r0, r7
 8001430:	4401      	add	r1, r0
 8001432:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001436:	f7ff fb27 	bl	8000a88 <central_moment>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <main+0x62c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	f242 025c 	movw	r2, #8284	; 0x205c
 8001444:	443a      	add	r2, r7
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e020      	b.n	800148c <main+0x660>
 800144a:	bf00      	nop
 800144c:	0800ac04 	.word	0x0800ac04
 8001450:	20000204 	.word	0x20000204
 8001454:	20004290 	.word	0x20004290
 8001458:	20004244 	.word	0x20004244
 800145c:	ffffdfa0 	.word	0xffffdfa0
 8001460:	ffffdfb8 	.word	0xffffdfb8
 8001464:	0800ac1c 	.word	0x0800ac1c
 8001468:	ffffdfb4 	.word	0xffffdfb4
 800146c:	0800ac34 	.word	0x0800ac34
 8001470:	ffffdf9c 	.word	0xffffdf9c
 8001474:	ffffdfb0 	.word	0xffffdfb0
 8001478:	0800ac50 	.word	0x0800ac50
 800147c:	ffffdfa8 	.word	0xffffdfa8
 8001480:	0800ac5c 	.word	0x0800ac5c
 8001484:	ffffdfac 	.word	0xffffdfac
 8001488:	ffffdfa4 	.word	0xffffdfa4
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 800148c:	4834      	ldr	r0, [pc, #208]	; (8001560 <main+0x734>)
 800148e:	f7ff fc1f 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Central moment = %f\r\n", moment);
 8001492:	4b34      	ldr	r3, [pc, #208]	; (8001564 <main+0x738>)
 8001494:	f242 0268 	movw	r2, #8296	; 0x2068
 8001498:	443a      	add	r2, r7
 800149a:	4413      	add	r3, r2
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014a4:	ec53 2b17 	vmov	r2, r3, d7
 80014a8:	492f      	ldr	r1, [pc, #188]	; (8001568 <main+0x73c>)
 80014aa:	482d      	ldr	r0, [pc, #180]	; (8001560 <main+0x734>)
 80014ac:	f008 f870 	bl	8009590 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 80014b0:	482e      	ldr	r0, [pc, #184]	; (800156c <main+0x740>)
 80014b2:	f004 fc51 	bl	8005d58 <HAL_UART_GetState>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	d105      	bne.n	80014c8 <main+0x69c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	2232      	movs	r2, #50	; 0x32
 80014c0:	4927      	ldr	r1, [pc, #156]	; (8001560 <main+0x734>)
 80014c2:	482a      	ldr	r0, [pc, #168]	; (800156c <main+0x740>)
 80014c4:	f004 f93c 	bl	8005740 <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80014c8:	4825      	ldr	r0, [pc, #148]	; (8001560 <main+0x734>)
 80014ca:	f7ff fc01 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 80014ce:	f242 035c 	movw	r3, #8284	; 0x205c
 80014d2:	443b      	add	r3, r7
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4926      	ldr	r1, [pc, #152]	; (8001570 <main+0x744>)
 80014d8:	4821      	ldr	r0, [pc, #132]	; (8001560 <main+0x734>)
 80014da:	f008 f859 	bl	8009590 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80014de:	4823      	ldr	r0, [pc, #140]	; (800156c <main+0x740>)
 80014e0:	f005 faa2 	bl	8006a28 <UART_CheckIdleState>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d105      	bne.n	80014f6 <main+0x6ca>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	2232      	movs	r2, #50	; 0x32
 80014ee:	491c      	ldr	r1, [pc, #112]	; (8001560 <main+0x734>)
 80014f0:	481e      	ldr	r0, [pc, #120]	; (800156c <main+0x740>)
 80014f2:	f004 f925 	bl	8005740 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <main+0x748>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
  {
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <main+0x748>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <main+0x74c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d9f9      	bls.n	80014fe <main+0x6d2>
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 800150a:	2102      	movs	r1, #2
 800150c:	481b      	ldr	r0, [pc, #108]	; (800157c <main+0x750>)
 800150e:	f001 f90b 	bl	8002728 <HAL_GPIO_ReadPin>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <main+0x6f8>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2102      	movs	r1, #2
 800151c:	4817      	ldr	r0, [pc, #92]	; (800157c <main+0x750>)
 800151e:	f001 f91b 	bl	8002758 <HAL_GPIO_WritePin>
 8001522:	e004      	b.n	800152e <main+0x702>
		} else {
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2102      	movs	r1, #2
 8001528:	4814      	ldr	r0, [pc, #80]	; (800157c <main+0x750>)
 800152a:	f001 f915 	bl	8002758 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <main+0x748>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
		if(receiveBuffer[2047] != 0){
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <main+0x754>)
 8001538:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <main+0x722>
			processBuffer(receiveBuffer, processedBuffer, arraySize);
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <main+0x758>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4910      	ldr	r1, [pc, #64]	; (8001588 <main+0x75c>)
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <main+0x754>)
 800154a:	f7ff fbd9 	bl	8000d00 <processBuffer>
		}
		if(received == 1){
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <main+0x760>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d1d3      	bne.n	80014fe <main+0x6d2>
			echoReceived(&processedBuffer[0], &transmitBuffer[0]);
 8001556:	4902      	ldr	r1, [pc, #8]	; (8001560 <main+0x734>)
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <main+0x75c>)
 800155a:	f7ff fbf7 	bl	8000d4c <echoReceived>
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 800155e:	e7ce      	b.n	80014fe <main+0x6d2>
 8001560:	20000204 	.word	0x20000204
 8001564:	ffffdfac 	.word	0xffffdfac
 8001568:	0800ac6c 	.word	0x0800ac6c
 800156c:	20004290 	.word	0x20004290
 8001570:	0800ac04 	.word	0x0800ac04
 8001574:	20004244 	.word	0x20004244
 8001578:	0e4e1bff 	.word	0x0e4e1bff
 800157c:	58021000 	.word	0x58021000
 8001580:	20002244 	.word	0x20002244
 8001584:	2000000a 	.word	0x2000000a
 8001588:	20000244 	.word	0x20000244
 800158c:	20000236 	.word	0x20000236

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b0cc      	sub	sp, #304	; 0x130
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800159a:	224c      	movs	r2, #76	; 0x4c
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 fafc 	bl	8008b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015a8:	2220      	movs	r2, #32
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f007 faf5 	bl	8008b9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4618      	mov	r0, r3
 80015b8:	23bc      	movs	r3, #188	; 0xbc
 80015ba:	461a      	mov	r2, r3
 80015bc:	2100      	movs	r1, #0
 80015be:	f007 faed 	bl	8008b9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80015c2:	2004      	movs	r0, #4
 80015c4:	f001 fa58 	bl	8002a78 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	4b4c      	ldr	r3, [pc, #304]	; (8001700 <SystemClock_Config+0x170>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a4b      	ldr	r2, [pc, #300]	; (8001700 <SystemClock_Config+0x170>)
 80015d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b49      	ldr	r3, [pc, #292]	; (8001700 <SystemClock_Config+0x170>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	4b47      	ldr	r3, [pc, #284]	; (8001704 <SystemClock_Config+0x174>)
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	4a46      	ldr	r2, [pc, #280]	; (8001704 <SystemClock_Config+0x174>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80015f2:	4b44      	ldr	r3, [pc, #272]	; (8001704 <SystemClock_Config+0x174>)
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001602:	bf00      	nop
 8001604:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <SystemClock_Config+0x170>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800160c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001610:	d1f8      	bne.n	8001604 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001612:	2322      	movs	r3, #34	; 0x22
 8001614:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001618:	2301      	movs	r3, #1
 800161a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161e:	2340      	movs	r3, #64	; 0x40
 8001620:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001624:	2301      	movs	r3, #1
 8001626:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001636:	2304      	movs	r3, #4
 8001638:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 800163c:	233c      	movs	r3, #60	; 0x3c
 800163e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001642:	2302      	movs	r3, #2
 8001644:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001654:	230c      	movs	r3, #12
 8001656:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001666:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800166a:	4618      	mov	r0, r3
 800166c:	f001 fa6e 	bl	8002b4c <HAL_RCC_OscConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001676:	f000 f849 	bl	800170c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167a:	233f      	movs	r3, #63	; 0x3f
 800167c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001680:	2303      	movs	r3, #3
 8001682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800168c:	2308      	movs	r3, #8
 800168e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001692:	2340      	movs	r3, #64	; 0x40
 8001694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800169e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016a6:	2340      	movs	r3, #64	; 0x40
 80016a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016b0:	2104      	movs	r1, #4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fe5a 	bl	800336c <HAL_RCC_ClockConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x132>
  {
    Error_Handler();
 80016be:	f000 f825 	bl	800170c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <SystemClock_Config+0x178>)
 80016c8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2200      	movs	r2, #0
 80016d0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80016da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 f9c6 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x162>
  {
    Error_Handler();
 80016ee:	f000 f80d 	bl	800170c <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80016f2:	f001 fa1b 	bl	8002b2c <HAL_PWREx_EnableUSBVoltageDetector>
}
 80016f6:	bf00      	nop
 80016f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	58024800 	.word	0x58024800
 8001704:	58000400 	.word	0x58000400
 8001708:	00040002 	.word	0x00040002

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_MspInit+0x30>)
 8001724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_MspInit+0x30>)
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_MspInit+0x30>)
 8001734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	58024400 	.word	0x58024400

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 fa6e 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  received = 1;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <USART3_IRQHandler+0x14>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017b6:	4803      	ldr	r0, [pc, #12]	; (80017c4 <USART3_IRQHandler+0x18>)
 80017b8:	f004 f930 	bl	8005a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000236 	.word	0x20000236
 80017c4:	20004290 	.word	0x20004290

080017c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <_sbrk+0x50>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x16>
		heap_end = &end;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <_sbrk+0x50>)
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <_sbrk+0x54>)
 80017dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <_sbrk+0x50>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <_sbrk+0x50>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	466a      	mov	r2, sp
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d907      	bls.n	8001802 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017f2:	f007 f999 	bl	8008b28 <__errno>
 80017f6:	4602      	mov	r2, r0
 80017f8:	230c      	movs	r3, #12
 80017fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001800:	e006      	b.n	8001810 <_sbrk+0x48>
	}

	heap_end += incr;
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <_sbrk+0x50>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a03      	ldr	r2, [pc, #12]	; (8001818 <_sbrk+0x50>)
 800180c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000238 	.word	0x20000238
 800181c:	20004730 	.word	0x20004730

08001820 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001840:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001844:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_TIM2_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_TIM2_Init+0x98>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001866:	4814      	ldr	r0, [pc, #80]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001868:	f003 fc04 	bl	8005074 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001872:	f7ff ff4b 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <MX_TIM2_Init+0x98>)
 8001884:	f003 fc7c 	bl	8005180 <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800188e:	f7ff ff3d 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_TIM2_Init+0x98>)
 80018a0:	f003 fe76 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018aa:	f7ff ff2f 	bl	800170c <Error_Handler>
  }

}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20004244 	.word	0x20004244

080018bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d10e      	bne.n	80018ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_TIM_Base_MspInit+0x3c>)
 80018d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018d4:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_TIM_Base_MspInit+0x3c>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_TIM_Base_MspInit+0x3c>)
 80018e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	58024400 	.word	0x58024400

080018fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <MX_USART3_UART_Init+0x94>)
 8001904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_USART3_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_USART3_UART_Init+0x90>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_USART3_UART_Init+0x90>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001946:	f003 feab 	bl	80056a0 <HAL_UART_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001950:	f7ff fedc 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001954:	2100      	movs	r1, #0
 8001956:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_USART3_UART_Init+0x90>)
 8001958:	f005 fb8b 	bl	8007072 <HAL_UARTEx_SetTxFifoThreshold>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001962:	f7ff fed3 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001966:	2100      	movs	r1, #0
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <MX_USART3_UART_Init+0x90>)
 800196a:	f005 fbc0 	bl	80070ee <HAL_UARTEx_SetRxFifoThreshold>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001974:	f7ff feca 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <MX_USART3_UART_Init+0x90>)
 800197a:	f005 fb41 	bl	8007000 <HAL_UARTEx_DisableFifoMode>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001984:	f7ff fec2 	bl	800170c <Error_Handler>
  }

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20004290 	.word	0x20004290
 8001990:	40004800 	.word	0x40004800

08001994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_UART_MspInit+0x98>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d136      	bne.n	8001a24 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_UART_MspInit+0x9c>)
 80019b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019bc:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_UART_MspInit+0x9c>)
 80019be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_UART_MspInit+0x9c>)
 80019c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_UART_MspInit+0x9c>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_UART_MspInit+0x9c>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_UART_MspInit+0x9c>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a04:	2307      	movs	r3, #7
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4809      	ldr	r0, [pc, #36]	; (8001a34 <HAL_UART_MspInit+0xa0>)
 8001a10:	f000 fcda 	bl	80023c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	2027      	movs	r0, #39	; 0x27
 8001a1a:	f000 fa5c 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a1e:	2027      	movs	r0, #39	; 0x27
 8001a20:	f000 fa73 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40004800 	.word	0x40004800
 8001a30:	58024400 	.word	0x58024400
 8001a34:	58020c00 	.word	0x58020c00

08001a38 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a3e:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001a40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a44:	2209      	movs	r2, #9
 8001a46:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a56:	2202      	movs	r2, #2
 8001a58:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a80:	f000 feb2 	bl	80027e8 <HAL_PCD_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001a8a:	f7ff fe3f 	bl	800170c <Error_Handler>
  }

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000431c 	.word	0x2000431c
 8001a98:	40080000 	.word	0x40080000

08001a9c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <HAL_PCD_MspInit+0xa4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d13b      	bne.n	8001b36 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_PCD_MspInit+0xa8>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_PCD_MspInit+0xa8>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_PCD_MspInit+0xa8>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001adc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001aee:	230a      	movs	r3, #10
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4813      	ldr	r0, [pc, #76]	; (8001b48 <HAL_PCD_MspInit+0xac>)
 8001afa:	f000 fc65 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <HAL_PCD_MspInit+0xac>)
 8001b14:	f000 fc58 	bl	80023c8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_PCD_MspInit+0xa8>)
 8001b1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_PCD_MspInit+0xa8>)
 8001b20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_PCD_MspInit+0xa8>)
 8001b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40080000 	.word	0x40080000
 8001b44:	58024400 	.word	0x58024400
 8001b48:	58020000 	.word	0x58020000

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b52:	e003      	b.n	8001b5c <LoopCopyDataInit>

08001b54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b5a:	3104      	adds	r1, #4

08001b5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b5c:	480b      	ldr	r0, [pc, #44]	; (8001b8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b64:	d3f6      	bcc.n	8001b54 <CopyDataInit>
  ldr  r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b68:	e002      	b.n	8001b70 <LoopFillZerobss>

08001b6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b6c:	f842 3b04 	str.w	r3, [r2], #4

08001b70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b74:	d3f9      	bcc.n	8001b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b76:	f7fe fdeb 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f006 ffdb 	bl	8008b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7ff f955 	bl	8000e2c <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b88:	0800dd88 	.word	0x0800dd88
  ldr  r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b90:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001b94:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8001b98:	2000472c 	.word	0x2000472c

08001b9c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC3_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba6:	2003      	movs	r0, #3
 8001ba8:	f000 f98a 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bac:	f001 fd94 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_Init+0x68>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_Init+0x6c>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa21 f303 	lsr.w	r3, r1, r3
 8001bc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_Init+0x68>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_Init+0x6c>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_Init+0x70>)
 8001be2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <HAL_Init+0x74>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 f814 	bl	8001c18 <HAL_InitTick>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e002      	b.n	8001c00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfa:	f7ff fd8f 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	0800acc8 	.word	0x0800acc8
 8001c10:	20000004 	.word	0x20000004
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_InitTick+0x60>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e021      	b.n	8001c70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_InitTick+0x64>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_InitTick+0x60>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f96f 	bl	8001f26 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f939 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x68>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000010 	.word	0x20000010
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	2000000c 	.word	0x2000000c

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000010 	.word	0x20000010
 8001ca8:	20004724 	.word	0x20004724

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20004724 	.word	0x20004724

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_Delay+0x40>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000010 	.word	0x20000010

08001d08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <HAL_GetREVID+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0c1b      	lsrs	r3, r3, #16
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	5c001000 	.word	0x5c001000

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <__NVIC_SetPriorityGrouping+0x40>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <__NVIC_SetPriorityGrouping+0x40>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00
 8001d64:	05fa0000 	.word	0x05fa0000

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <__NVIC_EnableIRQ+0x38>)
 8001d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff29 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee4:	f7ff ff40 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	f7ff ff90 	bl	8001e14 <NVIC_EncodePriority>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff5f 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff33 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffa4 	bl	8001e7c <SysTick_Config>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e205      	b.n	800235e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e1fa      	b.n	800235e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a8c      	ldr	r2, [pc, #560]	; (80021a0 <HAL_DMA_Abort_IT+0x260>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d04a      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a8b      	ldr	r2, [pc, #556]	; (80021a4 <HAL_DMA_Abort_IT+0x264>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d045      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a89      	ldr	r2, [pc, #548]	; (80021a8 <HAL_DMA_Abort_IT+0x268>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d040      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a88      	ldr	r2, [pc, #544]	; (80021ac <HAL_DMA_Abort_IT+0x26c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d03b      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a86      	ldr	r2, [pc, #536]	; (80021b0 <HAL_DMA_Abort_IT+0x270>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d036      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a85      	ldr	r2, [pc, #532]	; (80021b4 <HAL_DMA_Abort_IT+0x274>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d031      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a83      	ldr	r2, [pc, #524]	; (80021b8 <HAL_DMA_Abort_IT+0x278>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02c      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a82      	ldr	r2, [pc, #520]	; (80021bc <HAL_DMA_Abort_IT+0x27c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d027      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a80      	ldr	r2, [pc, #512]	; (80021c0 <HAL_DMA_Abort_IT+0x280>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d022      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a7f      	ldr	r2, [pc, #508]	; (80021c4 <HAL_DMA_Abort_IT+0x284>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d01d      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a7d      	ldr	r2, [pc, #500]	; (80021c8 <HAL_DMA_Abort_IT+0x288>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d018      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7c      	ldr	r2, [pc, #496]	; (80021cc <HAL_DMA_Abort_IT+0x28c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a7a      	ldr	r2, [pc, #488]	; (80021d0 <HAL_DMA_Abort_IT+0x290>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00e      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a79      	ldr	r2, [pc, #484]	; (80021d4 <HAL_DMA_Abort_IT+0x294>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d009      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <HAL_DMA_Abort_IT+0x298>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_DMA_Abort_IT+0xc8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a76      	ldr	r2, [pc, #472]	; (80021dc <HAL_DMA_Abort_IT+0x29c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d101      	bne.n	800200c <HAL_DMA_Abort_IT+0xcc>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_DMA_Abort_IT+0xce>
 800200c:	2300      	movs	r3, #0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d065      	beq.n	80020de <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2204      	movs	r2, #4
 8002016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a60      	ldr	r2, [pc, #384]	; (80021a0 <HAL_DMA_Abort_IT+0x260>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d04a      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5e      	ldr	r2, [pc, #376]	; (80021a4 <HAL_DMA_Abort_IT+0x264>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d045      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5d      	ldr	r2, [pc, #372]	; (80021a8 <HAL_DMA_Abort_IT+0x268>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d040      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a5b      	ldr	r2, [pc, #364]	; (80021ac <HAL_DMA_Abort_IT+0x26c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d03b      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a5a      	ldr	r2, [pc, #360]	; (80021b0 <HAL_DMA_Abort_IT+0x270>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d036      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a58      	ldr	r2, [pc, #352]	; (80021b4 <HAL_DMA_Abort_IT+0x274>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d031      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a57      	ldr	r2, [pc, #348]	; (80021b8 <HAL_DMA_Abort_IT+0x278>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d02c      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a55      	ldr	r2, [pc, #340]	; (80021bc <HAL_DMA_Abort_IT+0x27c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d027      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a54      	ldr	r2, [pc, #336]	; (80021c0 <HAL_DMA_Abort_IT+0x280>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d022      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_DMA_Abort_IT+0x284>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01d      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_DMA_Abort_IT+0x288>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d018      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <HAL_DMA_Abort_IT+0x28c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a4e      	ldr	r2, [pc, #312]	; (80021d0 <HAL_DMA_Abort_IT+0x290>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00e      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_DMA_Abort_IT+0x294>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d009      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_DMA_Abort_IT+0x298>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_DMA_Abort_IT+0x17a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a49      	ldr	r2, [pc, #292]	; (80021dc <HAL_DMA_Abort_IT+0x29c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d108      	bne.n	80020cc <HAL_DMA_Abort_IT+0x18c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0201 	bic.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	e147      	b.n	800235c <HAL_DMA_Abort_IT+0x41c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e13e      	b.n	800235c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 020e 	bic.w	r2, r2, #14
 80020ec:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_DMA_Abort_IT+0x260>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04a      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <HAL_DMA_Abort_IT+0x264>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d045      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <HAL_DMA_Abort_IT+0x268>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d040      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <HAL_DMA_Abort_IT+0x26c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d03b      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <HAL_DMA_Abort_IT+0x270>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d036      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <HAL_DMA_Abort_IT+0x274>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d031      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_DMA_Abort_IT+0x278>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d02c      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a20      	ldr	r2, [pc, #128]	; (80021bc <HAL_DMA_Abort_IT+0x27c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d027      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_DMA_Abort_IT+0x280>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_DMA_Abort_IT+0x284>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_DMA_Abort_IT+0x288>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d018      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <HAL_DMA_Abort_IT+0x28c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_DMA_Abort_IT+0x290>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00e      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <HAL_DMA_Abort_IT+0x294>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <HAL_DMA_Abort_IT+0x298>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_DMA_Abort_IT+0x24e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a14      	ldr	r2, [pc, #80]	; (80021dc <HAL_DMA_Abort_IT+0x29c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d128      	bne.n	80021e0 <HAL_DMA_Abort_IT+0x2a0>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e027      	b.n	80021f0 <HAL_DMA_Abort_IT+0x2b0>
 80021a0:	40020010 	.word	0x40020010
 80021a4:	40020028 	.word	0x40020028
 80021a8:	40020040 	.word	0x40020040
 80021ac:	40020058 	.word	0x40020058
 80021b0:	40020070 	.word	0x40020070
 80021b4:	40020088 	.word	0x40020088
 80021b8:	400200a0 	.word	0x400200a0
 80021bc:	400200b8 	.word	0x400200b8
 80021c0:	40020410 	.word	0x40020410
 80021c4:	40020428 	.word	0x40020428
 80021c8:	40020440 	.word	0x40020440
 80021cc:	40020458 	.word	0x40020458
 80021d0:	40020470 	.word	0x40020470
 80021d4:	40020488 	.word	0x40020488
 80021d8:	400204a0 	.word	0x400204a0
 80021dc:	400204b8 	.word	0x400204b8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a5c      	ldr	r2, [pc, #368]	; (8002368 <HAL_DMA_Abort_IT+0x428>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d072      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a5b      	ldr	r2, [pc, #364]	; (800236c <HAL_DMA_Abort_IT+0x42c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d06d      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a59      	ldr	r2, [pc, #356]	; (8002370 <HAL_DMA_Abort_IT+0x430>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d068      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_DMA_Abort_IT+0x434>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d063      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a56      	ldr	r2, [pc, #344]	; (8002378 <HAL_DMA_Abort_IT+0x438>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d05e      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a55      	ldr	r2, [pc, #340]	; (800237c <HAL_DMA_Abort_IT+0x43c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d059      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a53      	ldr	r2, [pc, #332]	; (8002380 <HAL_DMA_Abort_IT+0x440>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d054      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_DMA_Abort_IT+0x444>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04f      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a50      	ldr	r2, [pc, #320]	; (8002388 <HAL_DMA_Abort_IT+0x448>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d04a      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_DMA_Abort_IT+0x44c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d045      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4d      	ldr	r2, [pc, #308]	; (8002390 <HAL_DMA_Abort_IT+0x450>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d040      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a4c      	ldr	r2, [pc, #304]	; (8002394 <HAL_DMA_Abort_IT+0x454>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d03b      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a4a      	ldr	r2, [pc, #296]	; (8002398 <HAL_DMA_Abort_IT+0x458>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d036      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a49      	ldr	r2, [pc, #292]	; (800239c <HAL_DMA_Abort_IT+0x45c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d031      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a47      	ldr	r2, [pc, #284]	; (80023a0 <HAL_DMA_Abort_IT+0x460>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02c      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <HAL_DMA_Abort_IT+0x464>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d027      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a44      	ldr	r2, [pc, #272]	; (80023a8 <HAL_DMA_Abort_IT+0x468>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d022      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a43      	ldr	r2, [pc, #268]	; (80023ac <HAL_DMA_Abort_IT+0x46c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d01d      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a41      	ldr	r2, [pc, #260]	; (80023b0 <HAL_DMA_Abort_IT+0x470>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d018      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a40      	ldr	r2, [pc, #256]	; (80023b4 <HAL_DMA_Abort_IT+0x474>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d013      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3e      	ldr	r2, [pc, #248]	; (80023b8 <HAL_DMA_Abort_IT+0x478>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00e      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <HAL_DMA_Abort_IT+0x47c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a3b      	ldr	r2, [pc, #236]	; (80023c0 <HAL_DMA_Abort_IT+0x480>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x3a0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a3a      	ldr	r2, [pc, #232]	; (80023c4 <HAL_DMA_Abort_IT+0x484>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Abort_IT+0x3a4>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_DMA_Abort_IT+0x3a6>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d028      	beq.n	800233c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2201      	movs	r2, #1
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002318:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00c      	beq.n	800233c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002330:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800233a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40020010 	.word	0x40020010
 800236c:	40020028 	.word	0x40020028
 8002370:	40020040 	.word	0x40020040
 8002374:	40020058 	.word	0x40020058
 8002378:	40020070 	.word	0x40020070
 800237c:	40020088 	.word	0x40020088
 8002380:	400200a0 	.word	0x400200a0
 8002384:	400200b8 	.word	0x400200b8
 8002388:	40020410 	.word	0x40020410
 800238c:	40020428 	.word	0x40020428
 8002390:	40020440 	.word	0x40020440
 8002394:	40020458 	.word	0x40020458
 8002398:	40020470 	.word	0x40020470
 800239c:	40020488 	.word	0x40020488
 80023a0:	400204a0 	.word	0x400204a0
 80023a4:	400204b8 	.word	0x400204b8
 80023a8:	58025408 	.word	0x58025408
 80023ac:	5802541c 	.word	0x5802541c
 80023b0:	58025430 	.word	0x58025430
 80023b4:	58025444 	.word	0x58025444
 80023b8:	58025458 	.word	0x58025458
 80023bc:	5802546c 	.word	0x5802546c
 80023c0:	58025480 	.word	0x58025480
 80023c4:	58025494 	.word	0x58025494

080023c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <HAL_GPIO_Init+0x234>)
 80023d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023da:	e194      	b.n	8002706 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8186 	beq.w	8002700 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d00b      	beq.n	8002414 <HAL_GPIO_Init+0x4c>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d007      	beq.n	8002414 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002408:	2b11      	cmp	r3, #17
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b12      	cmp	r3, #18
 8002412:	d130      	bne.n	8002476 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800244a:	2201      	movs	r2, #1
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0201 	and.w	r2, r3, #1
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0xee>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b12      	cmp	r3, #18
 80024b4:	d123      	bne.n	80024fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3208      	adds	r2, #8
 80024be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	69b9      	ldr	r1, [r7, #24]
 80024fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0203 	and.w	r2, r3, #3
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80e0 	beq.w	8002700 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002540:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_GPIO_Init+0x238>)
 8002542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002546:	4a2e      	ldr	r2, [pc, #184]	; (8002600 <HAL_GPIO_Init+0x238>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_GPIO_Init+0x238>)
 8002552:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a29      	ldr	r2, [pc, #164]	; (8002604 <HAL_GPIO_Init+0x23c>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a20      	ldr	r2, [pc, #128]	; (8002608 <HAL_GPIO_Init+0x240>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d052      	beq.n	8002630 <HAL_GPIO_Init+0x268>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_GPIO_Init+0x244>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_GPIO_Init+0x22e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <HAL_GPIO_Init+0x248>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02b      	beq.n	80025f2 <HAL_GPIO_Init+0x22a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <HAL_GPIO_Init+0x24c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d025      	beq.n	80025ee <HAL_GPIO_Init+0x226>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <HAL_GPIO_Init+0x250>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01f      	beq.n	80025ea <HAL_GPIO_Init+0x222>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1b      	ldr	r2, [pc, #108]	; (800261c <HAL_GPIO_Init+0x254>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0x21e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_GPIO_Init+0x258>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0x21a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_GPIO_Init+0x25c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00d      	beq.n	80025de <HAL_GPIO_Init+0x216>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_GPIO_Init+0x260>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x212>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_GPIO_Init+0x264>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_GPIO_Init+0x20e>
 80025d2:	2309      	movs	r3, #9
 80025d4:	e02d      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025d6:	230a      	movs	r3, #10
 80025d8:	e02b      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025da:	2308      	movs	r3, #8
 80025dc:	e029      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025de:	2307      	movs	r3, #7
 80025e0:	e027      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e025      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e023      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e021      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e01f      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e01d      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e01b      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025fa:	bf00      	nop
 80025fc:	58000080 	.word	0x58000080
 8002600:	58024400 	.word	0x58024400
 8002604:	58000400 	.word	0x58000400
 8002608:	58020000 	.word	0x58020000
 800260c:	58020400 	.word	0x58020400
 8002610:	58020800 	.word	0x58020800
 8002614:	58020c00 	.word	0x58020c00
 8002618:	58021000 	.word	0x58021000
 800261c:	58021400 	.word	0x58021400
 8002620:	58021800 	.word	0x58021800
 8002624:	58021c00 	.word	0x58021c00
 8002628:	58022000 	.word	0x58022000
 800262c:	58022400 	.word	0x58022400
 8002630:	2300      	movs	r3, #0
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	f002 0203 	and.w	r2, r2, #3
 8002638:	0092      	lsls	r2, r2, #2
 800263a:	4093      	lsls	r3, r2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002642:	4938      	ldr	r1, [pc, #224]	; (8002724 <HAL_GPIO_Init+0x35c>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	3301      	adds	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f ae63 	bne.w	80023dc <HAL_GPIO_Init+0x14>
  }
}
 8002716:	bf00      	nop
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	58000400 	.word	0x58000400

08002728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e001      	b.n	800274a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
 8002764:	4613      	mov	r3, r2
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002774:	e003      	b.n	800277e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002794:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <HAL_HSEM_FastTake+0x2c>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3320      	adds	r3, #32
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_HSEM_FastTake+0x30>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	58026400 	.word	0x58026400
 80027bc:	80000300 	.word	0x80000300

080027c0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80027ca:	4906      	ldr	r1, [pc, #24]	; (80027e4 <HAL_HSEM_Release+0x24>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	58026400 	.word	0x58026400

080027e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ea:	b08f      	sub	sp, #60	; 0x3c
 80027ec:	af0a      	add	r7, sp, #40	; 0x28
 80027ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e116      	b.n	8002a28 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff f941 	bl	8001a9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2203      	movs	r2, #3
 800281e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f004 fd61 	bl	8007300 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	687e      	ldr	r6, [r7, #4]
 8002846:	466d      	mov	r5, sp
 8002848:	f106 0410 	add.w	r4, r6, #16
 800284c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002854:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002858:	e885 0003 	stmia.w	r5, {r0, r1}
 800285c:	1d33      	adds	r3, r6, #4
 800285e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002860:	6838      	ldr	r0, [r7, #0]
 8002862:	f004 fceb 	bl	800723c <USB_CoreInit>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0d7      	b.n	8002a28 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f004 fd4f 	bl	8007322 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e04a      	b.n	8002920 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	333d      	adds	r3, #61	; 0x3d
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	333c      	adds	r3, #60	; 0x3c
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	b298      	uxth	r0, r3
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3342      	adds	r3, #66	; 0x42
 80028c6:	4602      	mov	r2, r0
 80028c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	333f      	adds	r3, #63	; 0x3f
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	3344      	adds	r3, #68	; 0x44
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3348      	adds	r3, #72	; 0x48
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	3350      	adds	r3, #80	; 0x50
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	3301      	adds	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	d3af      	bcc.n	800288a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	e044      	b.n	80029ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	3301      	adds	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d3b5      	bcc.n	8002930 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	687e      	ldr	r6, [r7, #4]
 80029cc:	466d      	mov	r5, sp
 80029ce:	f106 0410 	add.w	r4, r6, #16
 80029d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029de:	e885 0003 	stmia.w	r5, {r0, r1}
 80029e2:	1d33      	adds	r3, r6, #4
 80029e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e6:	6838      	ldr	r0, [r7, #0]
 80029e8:	f004 fcc6 	bl	8007378 <USB_DevInit>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e014      	b.n	8002a28 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f80a 	bl	8002a30 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 fe68 	bl	80076f6 <USB_DevDisconnect>

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	10000003 	.word	0x10000003

08002a78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002a80:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a8c:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e040      	b.n	8002b20 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e03e      	b.n	8002b20 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_PWREx_ConfigSupply+0xb0>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002aaa:	491f      	ldr	r1, [pc, #124]	; (8002b28 <HAL_PWREx_ConfigSupply+0xb0>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ab2:	f7ff f8fb 	bl	8001cac <HAL_GetTick>
 8002ab6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ab8:	e009      	b.n	8002ace <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002aba:	f7ff f8f7 	bl	8001cac <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac8:	d901      	bls.n	8002ace <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e028      	b.n	8002b20 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ada:	d1ee      	bne.n	8002aba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b1e      	cmp	r3, #30
 8002ae0:	d008      	beq.n	8002af4 <HAL_PWREx_ConfigSupply+0x7c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8002ae6:	d005      	beq.n	8002af4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b1d      	cmp	r3, #29
 8002aec:	d002      	beq.n	8002af4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b2d      	cmp	r3, #45	; 0x2d
 8002af2:	d114      	bne.n	8002b1e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002af4:	f7ff f8da 	bl	8001cac <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002afa:	e009      	b.n	8002b10 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002afc:	f7ff f8d6 	bl	8001cac <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b0a:	d901      	bls.n	8002b10 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e007      	b.n	8002b20 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d1ee      	bne.n	8002afc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	58024800 	.word	0x58024800

08002b2c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	58024800 	.word	0x58024800

08002b4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	; 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e3ff      	b.n	800335e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8087 	beq.w	8002c7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6c:	4b99      	ldr	r3, [pc, #612]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b76:	4b97      	ldr	r3, [pc, #604]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d007      	beq.n	8002b92 <HAL_RCC_OscConfig+0x46>
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	2b18      	cmp	r3, #24
 8002b86:	d110      	bne.n	8002baa <HAL_RCC_OscConfig+0x5e>
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d10b      	bne.n	8002baa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b92:	4b90      	ldr	r3, [pc, #576]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d06c      	beq.n	8002c78 <HAL_RCC_OscConfig+0x12c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d168      	bne.n	8002c78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e3d9      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x76>
 8002bb4:	4b87      	ldr	r3, [pc, #540]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a86      	ldr	r2, [pc, #536]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e02e      	b.n	8002c20 <HAL_RCC_OscConfig+0xd4>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x98>
 8002bca:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a81      	ldr	r2, [pc, #516]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b7f      	ldr	r3, [pc, #508]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a7e      	ldr	r2, [pc, #504]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e01d      	b.n	8002c20 <HAL_RCC_OscConfig+0xd4>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0xbc>
 8002bee:	4b79      	ldr	r3, [pc, #484]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a78      	ldr	r2, [pc, #480]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0xd4>
 8002c08:	4b72      	ldr	r3, [pc, #456]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a71      	ldr	r2, [pc, #452]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b6f      	ldr	r3, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6e      	ldr	r2, [pc, #440]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7ff f840 	bl	8001cac <HAL_GetTick>
 8002c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c30:	f7ff f83c 	bl	8001cac <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e38d      	b.n	800335e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c42:	4b64      	ldr	r3, [pc, #400]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0xe4>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7ff f82c 	bl	8001cac <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff f828 	bl	8001cac <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e379      	b.n	800335e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c6a:	4b5a      	ldr	r3, [pc, #360]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x10c>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80ae 	beq.w	8002de4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c88:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c92:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_RCC_OscConfig+0x162>
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	2b18      	cmp	r3, #24
 8002ca2:	d13a      	bne.n	8002d1a <HAL_RCC_OscConfig+0x1ce>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d135      	bne.n	8002d1a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cae:	4b49      	ldr	r3, [pc, #292]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x17a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e34b      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc6:	f7ff f81f 	bl	8001d08 <HAL_GetREVID>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d817      	bhi.n	8002d04 <HAL_RCC_OscConfig+0x1b8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d108      	bne.n	8002cee <HAL_RCC_OscConfig+0x1a2>
 8002cdc:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cec:	e07a      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	031b      	lsls	r3, r3, #12
 8002cfc:	4935      	ldr	r1, [pc, #212]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d02:	e06f      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	4930      	ldr	r1, [pc, #192]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d18:	e064      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d045      	beq.n	8002dae <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d22:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0219 	bic.w	r2, r3, #25
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4929      	ldr	r1, [pc, #164]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe ffba 	bl	8001cac <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fe ffb6 	bl	8001cac <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e307      	b.n	800335e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	f7fe ffd5 	bl	8001d08 <HAL_GetREVID>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d817      	bhi.n	8002d98 <HAL_RCC_OscConfig+0x24c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d108      	bne.n	8002d82 <HAL_RCC_OscConfig+0x236>
 8002d70:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d78:	4a16      	ldr	r2, [pc, #88]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7e:	6053      	str	r3, [r2, #4]
 8002d80:	e030      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	031b      	lsls	r3, r3, #12
 8002d90:	4910      	ldr	r1, [pc, #64]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
 8002d96:	e025      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	490b      	ldr	r1, [pc, #44]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
 8002dac:	e01a      	b.n	8002de4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a08      	ldr	r2, [pc, #32]	; (8002dd4 <HAL_RCC_OscConfig+0x288>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe ff77 	bl	8001cac <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe ff73 	bl	8001cac <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d903      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e2c4      	b.n	800335e <HAL_RCC_OscConfig+0x812>
 8002dd4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dd8:	4ba4      	ldr	r3, [pc, #656]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ee      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80a9 	beq.w	8002f44 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df2:	4b9e      	ldr	r3, [pc, #632]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dfc:	4b9b      	ldr	r3, [pc, #620]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d007      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2cc>
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b18      	cmp	r3, #24
 8002e0c:	d13a      	bne.n	8002e84 <HAL_RCC_OscConfig+0x338>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d135      	bne.n	8002e84 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e18:	4b94      	ldr	r3, [pc, #592]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_OscConfig+0x2e4>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e296      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e30:	f7fe ff6a 	bl	8001d08 <HAL_GetREVID>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d817      	bhi.n	8002e6e <HAL_RCC_OscConfig+0x322>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d108      	bne.n	8002e58 <HAL_RCC_OscConfig+0x30c>
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e4e:	4a87      	ldr	r2, [pc, #540]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e56:	e075      	b.n	8002f44 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e58:	4b84      	ldr	r3, [pc, #528]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	069b      	lsls	r3, r3, #26
 8002e66:	4981      	ldr	r1, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e6c:	e06a      	b.n	8002f44 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	061b      	lsls	r3, r3, #24
 8002e7c:	497b      	ldr	r1, [pc, #492]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e82:	e05f      	b.n	8002f44 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d042      	beq.n	8002f12 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e8c:	4b77      	ldr	r3, [pc, #476]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a76      	ldr	r2, [pc, #472]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe ff08 	bl	8001cac <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ea0:	f7fe ff04 	bl	8001cac <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e255      	b.n	800335e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eb2:	4b6e      	ldr	r3, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ebe:	f7fe ff23 	bl	8001d08 <HAL_GetREVID>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d817      	bhi.n	8002efc <HAL_RCC_OscConfig+0x3b0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d108      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x39a>
 8002ed4:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002edc:	4a63      	ldr	r2, [pc, #396]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ee2:	6053      	str	r3, [r2, #4]
 8002ee4:	e02e      	b.n	8002f44 <HAL_RCC_OscConfig+0x3f8>
 8002ee6:	4b61      	ldr	r3, [pc, #388]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	069b      	lsls	r3, r3, #26
 8002ef4:	495d      	ldr	r1, [pc, #372]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
 8002efa:	e023      	b.n	8002f44 <HAL_RCC_OscConfig+0x3f8>
 8002efc:	4b5b      	ldr	r3, [pc, #364]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	061b      	lsls	r3, r3, #24
 8002f0a:	4958      	ldr	r1, [pc, #352]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60cb      	str	r3, [r1, #12]
 8002f10:	e018      	b.n	8002f44 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f12:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a55      	ldr	r2, [pc, #340]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fec5 	bl	8001cac <HAL_GetTick>
 8002f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f26:	f7fe fec1 	bl	8001cac <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e212      	b.n	800335e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f38:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d036      	beq.n	8002fbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d019      	beq.n	8002f8c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f58:	4b44      	ldr	r3, [pc, #272]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5c:	4a43      	ldr	r2, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe fea2 	bl	8001cac <HAL_GetTick>
 8002f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fe9e 	bl	8001cac <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1ef      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x420>
 8002f8a:	e018      	b.n	8002fbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8c:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f90:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe fe88 	bl	8001cac <HAL_GetTick>
 8002f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fe84 	bl	8001cac <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1d5      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d036      	beq.n	8003038 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d019      	beq.n	8003006 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a25      	ldr	r2, [pc, #148]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002fd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fde:	f7fe fe65 	bl	8001cac <HAL_GetTick>
 8002fe2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002fe6:	f7fe fe61 	bl	8001cac <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1b2      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x49a>
 8003004:	e018      	b.n	8003038 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_OscConfig+0x520>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a18      	ldr	r2, [pc, #96]	; (800306c <HAL_RCC_OscConfig+0x520>)
 800300c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003010:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003012:	f7fe fe4b 	bl	8001cac <HAL_GetTick>
 8003016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800301a:	f7fe fe47 	bl	8001cac <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e198      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_RCC_OscConfig+0x520>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8085 	beq.w	8003150 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_RCC_OscConfig+0x524>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_RCC_OscConfig+0x524>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003052:	f7fe fe2b 	bl	8001cac <HAL_GetTick>
 8003056:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003058:	e00c      	b.n	8003074 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800305a:	f7fe fe27 	bl	8001cac <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b64      	cmp	r3, #100	; 0x64
 8003066:	d905      	bls.n	8003074 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e178      	b.n	800335e <HAL_RCC_OscConfig+0x812>
 800306c:	58024400 	.word	0x58024400
 8003070:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003074:	4b96      	ldr	r3, [pc, #600]	; (80032d0 <HAL_RCC_OscConfig+0x784>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ec      	beq.n	800305a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x54a>
 8003088:	4b92      	ldr	r3, [pc, #584]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a91      	ldr	r2, [pc, #580]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
 8003094:	e02d      	b.n	80030f2 <HAL_RCC_OscConfig+0x5a6>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x56c>
 800309e:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a8c      	ldr	r2, [pc, #560]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
 80030aa:	4b8a      	ldr	r3, [pc, #552]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a89      	ldr	r2, [pc, #548]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030b0:	f023 0304 	bic.w	r3, r3, #4
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	e01c      	b.n	80030f2 <HAL_RCC_OscConfig+0x5a6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d10c      	bne.n	80030da <HAL_RCC_OscConfig+0x58e>
 80030c0:	4b84      	ldr	r3, [pc, #528]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	4a83      	ldr	r2, [pc, #524]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030c6:	f043 0304 	orr.w	r3, r3, #4
 80030ca:	6713      	str	r3, [r2, #112]	; 0x70
 80030cc:	4b81      	ldr	r3, [pc, #516]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	4a80      	ldr	r2, [pc, #512]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6713      	str	r3, [r2, #112]	; 0x70
 80030d8:	e00b      	b.n	80030f2 <HAL_RCC_OscConfig+0x5a6>
 80030da:	4b7e      	ldr	r3, [pc, #504]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	4a7d      	ldr	r2, [pc, #500]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70
 80030e6:	4b7b      	ldr	r3, [pc, #492]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a7a      	ldr	r2, [pc, #488]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d015      	beq.n	8003126 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fe fdd7 	bl	8001cac <HAL_GetTick>
 80030fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe fdd3 	bl	8001cac <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e122      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003118:	4b6e      	ldr	r3, [pc, #440]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ee      	beq.n	8003102 <HAL_RCC_OscConfig+0x5b6>
 8003124:	e014      	b.n	8003150 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe fdc1 	bl	8001cac <HAL_GetTick>
 800312a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312e:	f7fe fdbd 	bl	8001cac <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e10c      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003144:	4b63      	ldr	r3, [pc, #396]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ee      	bne.n	800312e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8101 	beq.w	800335c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800315a:	4b5e      	ldr	r3, [pc, #376]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003162:	2b18      	cmp	r3, #24
 8003164:	f000 80bc 	beq.w	80032e0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b02      	cmp	r3, #2
 800316e:	f040 8095 	bne.w	800329c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a57      	ldr	r2, [pc, #348]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800317c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fe fd95 	bl	8001cac <HAL_GetTick>
 8003182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe fd91 	bl	8001cac <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0e2      	b.n	800335e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003198:	4b4e      	ldr	r3, [pc, #312]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80031a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a8:	4b4b      	ldr	r3, [pc, #300]	; (80032d8 <HAL_RCC_OscConfig+0x78c>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	430a      	orrs	r2, r1
 80031b8:	4946      	ldr	r1, [pc, #280]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	628b      	str	r3, [r1, #40]	; 0x28
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	3b01      	subs	r3, #1
 80031c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	3b01      	subs	r3, #1
 80031ce:	025b      	lsls	r3, r3, #9
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	3b01      	subs	r3, #1
 80031da:	041b      	lsls	r3, r3, #16
 80031dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	3b01      	subs	r3, #1
 80031e8:	061b      	lsls	r3, r3, #24
 80031ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031ee:	4939      	ldr	r1, [pc, #228]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80031f4:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	4a36      	ldr	r2, [pc, #216]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003200:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003204:	4b35      	ldr	r3, [pc, #212]	; (80032dc <HAL_RCC_OscConfig+0x790>)
 8003206:	4013      	ands	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800320c:	00d2      	lsls	r2, r2, #3
 800320e:	4931      	ldr	r1, [pc, #196]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003210:	4313      	orrs	r3, r2
 8003212:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003214:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	f023 020c 	bic.w	r2, r3, #12
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	492c      	ldr	r1, [pc, #176]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003222:	4313      	orrs	r3, r2
 8003224:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003226:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f023 0202 	bic.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	4928      	ldr	r1, [pc, #160]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003234:	4313      	orrs	r3, r2
 8003236:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	4a25      	ldr	r2, [pc, #148]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800323e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800324a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800325a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe fd1a 	bl	8001cac <HAL_GetTick>
 8003278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe fd16 	bl	8001cac <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e067      	b.n	800335e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x730>
 800329a:	e05f      	b.n	800335c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329c:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80032a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe fd00 	bl	8001cac <HAL_GetTick>
 80032ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe fcfc 	bl	8001cac <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e04d      	b.n	800335e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <HAL_RCC_OscConfig+0x788>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x764>
 80032ce:	e045      	b.n	800335c <HAL_RCC_OscConfig+0x810>
 80032d0:	58024800 	.word	0x58024800
 80032d4:	58024400 	.word	0x58024400
 80032d8:	fffffc0c 	.word	0xfffffc0c
 80032dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_RCC_OscConfig+0x81c>)
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCC_OscConfig+0x81c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d031      	beq.n	8003358 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f003 0203 	and.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d12a      	bne.n	8003358 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d122      	bne.n	8003358 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11a      	bne.n	8003358 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	0a5b      	lsrs	r3, r3, #9
 8003326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d111      	bne.n	8003358 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	0c1b      	lsrs	r3, r3, #16
 8003338:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d108      	bne.n	8003358 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	0e1b      	lsrs	r3, r3, #24
 800334a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3730      	adds	r7, #48	; 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	58024400 	.word	0x58024400

0800336c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e19c      	b.n	80036ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b8a      	ldr	r3, [pc, #552]	; (80035ac <HAL_RCC_ClockConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d910      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b87      	ldr	r3, [pc, #540]	; (80035ac <HAL_RCC_ClockConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 020f 	bic.w	r2, r3, #15
 8003396:	4985      	ldr	r1, [pc, #532]	; (80035ac <HAL_RCC_ClockConfig+0x240>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b83      	ldr	r3, [pc, #524]	; (80035ac <HAL_RCC_ClockConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e184      	b.n	80036ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	4b7b      	ldr	r3, [pc, #492]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d908      	bls.n	80033de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033cc:	4b78      	ldr	r3, [pc, #480]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	4975      	ldr	r1, [pc, #468]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d010      	beq.n	800340c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	4b70      	ldr	r3, [pc, #448]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d908      	bls.n	800340c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033fa:	4b6d      	ldr	r3, [pc, #436]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	496a      	ldr	r1, [pc, #424]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 8003408:	4313      	orrs	r3, r2
 800340a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	4b64      	ldr	r3, [pc, #400]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003424:	429a      	cmp	r2, r3
 8003426:	d908      	bls.n	800343a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003428:	4b61      	ldr	r3, [pc, #388]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	495e      	ldr	r1, [pc, #376]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 8003436:	4313      	orrs	r3, r2
 8003438:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d010      	beq.n	8003468 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003452:	429a      	cmp	r2, r3
 8003454:	d908      	bls.n	8003468 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003456:	4b56      	ldr	r3, [pc, #344]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4953      	ldr	r1, [pc, #332]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 8003464:	4313      	orrs	r3, r2
 8003466:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	4b4d      	ldr	r3, [pc, #308]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	429a      	cmp	r2, r3
 8003482:	d908      	bls.n	8003496 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f023 020f 	bic.w	r2, r3, #15
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4947      	ldr	r1, [pc, #284]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 8003492:	4313      	orrs	r3, r2
 8003494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d055      	beq.n	800354e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034a2:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4940      	ldr	r1, [pc, #256]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034bc:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d121      	bne.n	800350c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0f6      	b.n	80036ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034d4:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d115      	bne.n	800350c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0ea      	b.n	80036ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ec:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0de      	b.n	80036ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034fc:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0d6      	b.n	80036ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f023 0207 	bic.w	r2, r3, #7
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4925      	ldr	r1, [pc, #148]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 800351a:	4313      	orrs	r3, r2
 800351c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fe fbc5 	bl	8001cac <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003524:	e00a      	b.n	800353c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003526:	f7fe fbc1 	bl	8001cac <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0be      	b.n	80036ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	429a      	cmp	r2, r3
 800354c:	d1eb      	bne.n	8003526 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d010      	beq.n	800357c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	429a      	cmp	r2, r3
 8003568:	d208      	bcs.n	800357c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f023 020f 	bic.w	r2, r3, #15
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	490e      	ldr	r1, [pc, #56]	; (80035b0 <HAL_RCC_ClockConfig+0x244>)
 8003578:	4313      	orrs	r3, r2
 800357a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_ClockConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d214      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_RCC_ClockConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 020f 	bic.w	r2, r3, #15
 8003592:	4906      	ldr	r1, [pc, #24]	; (80035ac <HAL_RCC_ClockConfig+0x240>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <HAL_RCC_ClockConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e086      	b.n	80036ba <HAL_RCC_ClockConfig+0x34e>
 80035ac:	52002000 	.word	0x52002000
 80035b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d208      	bcs.n	80035e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035d0:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	4939      	ldr	r1, [pc, #228]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d010      	beq.n	8003610 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d208      	bcs.n	8003610 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	492e      	ldr	r1, [pc, #184]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 800360c:	4313      	orrs	r3, r2
 800360e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699a      	ldr	r2, [r3, #24]
 8003620:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003628:	429a      	cmp	r2, r3
 800362a:	d208      	bcs.n	800363e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4922      	ldr	r1, [pc, #136]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 800363a:	4313      	orrs	r3, r2
 800363c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d010      	beq.n	800366c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003656:	429a      	cmp	r2, r3
 8003658:	d208      	bcs.n	800366c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4917      	ldr	r1, [pc, #92]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 8003668:	4313      	orrs	r3, r2
 800366a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800366c:	f000 f834 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003670:	4601      	mov	r1, r0
 8003672:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_RCC_ClockConfig+0x35c>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa21 f303 	lsr.w	r3, r1, r3
 8003688:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x358>)
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <HAL_RCC_ClockConfig+0x35c>)
 8003694:	5cd3      	ldrb	r3, [r2, r3]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
 80036a0:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <HAL_RCC_ClockConfig+0x360>)
 80036a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036a4:	4a0a      	ldr	r2, [pc, #40]	; (80036d0 <HAL_RCC_ClockConfig+0x364>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <HAL_RCC_ClockConfig+0x368>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fab2 	bl	8001c18 <HAL_InitTick>
 80036b4:	4603      	mov	r3, r0
 80036b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	58024400 	.word	0x58024400
 80036c8:	0800acc8 	.word	0x0800acc8
 80036cc:	20000004 	.word	0x20000004
 80036d0:	20000000 	.word	0x20000000
 80036d4:	2000000c 	.word	0x2000000c

080036d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036de:	4baf      	ldr	r3, [pc, #700]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036e6:	2b18      	cmp	r3, #24
 80036e8:	f200 814e 	bhi.w	8003988 <HAL_RCC_GetSysClockFreq+0x2b0>
 80036ec:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003759 	.word	0x08003759
 80036f8:	08003989 	.word	0x08003989
 80036fc:	08003989 	.word	0x08003989
 8003700:	08003989 	.word	0x08003989
 8003704:	08003989 	.word	0x08003989
 8003708:	08003989 	.word	0x08003989
 800370c:	08003989 	.word	0x08003989
 8003710:	08003989 	.word	0x08003989
 8003714:	0800377f 	.word	0x0800377f
 8003718:	08003989 	.word	0x08003989
 800371c:	08003989 	.word	0x08003989
 8003720:	08003989 	.word	0x08003989
 8003724:	08003989 	.word	0x08003989
 8003728:	08003989 	.word	0x08003989
 800372c:	08003989 	.word	0x08003989
 8003730:	08003989 	.word	0x08003989
 8003734:	08003785 	.word	0x08003785
 8003738:	08003989 	.word	0x08003989
 800373c:	08003989 	.word	0x08003989
 8003740:	08003989 	.word	0x08003989
 8003744:	08003989 	.word	0x08003989
 8003748:	08003989 	.word	0x08003989
 800374c:	08003989 	.word	0x08003989
 8003750:	08003989 	.word	0x08003989
 8003754:	0800378b 	.word	0x0800378b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003758:	4b90      	ldr	r3, [pc, #576]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003764:	4b8d      	ldr	r3, [pc, #564]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	08db      	lsrs	r3, r3, #3
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	4a8c      	ldr	r2, [pc, #560]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003776:	e10a      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003778:	4b89      	ldr	r3, [pc, #548]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800377a:	61bb      	str	r3, [r7, #24]
    break;
 800377c:	e107      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800377e:	4b89      	ldr	r3, [pc, #548]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003780:	61bb      	str	r3, [r7, #24]
    break;
 8003782:	e104      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003784:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003786:	61bb      	str	r3, [r7, #24]
    break;
 8003788:	e101      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800378a:	4b84      	ldr	r3, [pc, #528]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003794:	4b81      	ldr	r3, [pc, #516]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800379e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037a0:	4b7e      	ldr	r3, [pc, #504]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80037aa:	4b7c      	ldr	r3, [pc, #496]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	08db      	lsrs	r3, r3, #3
 80037b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80da 	beq.w	8003982 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d05a      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x1b2>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d302      	bcc.n	80037de <HAL_RCC_GetSysClockFreq+0x106>
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d078      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f6>
 80037dc:	e099      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037de:	4b6f      	ldr	r3, [pc, #444]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d02d      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037ea:	4b6c      	ldr	r3, [pc, #432]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	08db      	lsrs	r3, r3, #3
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	4a6a      	ldr	r2, [pc, #424]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80037f6:	fa22 f303 	lsr.w	r3, r2, r3
 80037fa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003814:	4b61      	ldr	r3, [pc, #388]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003824:	ed97 6a02 	vldr	s12, [r7, #8]
 8003828:	eddf 5a60 	vldr	s11, [pc, #384]	; 80039ac <HAL_RCC_GetSysClockFreq+0x2d4>
 800382c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003840:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003844:	e087      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	ee07 3a90 	vmov	s15, r3
 800384c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003850:	eddf 6a57 	vldr	s13, [pc, #348]	; 80039b0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003858:	4b50      	ldr	r3, [pc, #320]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003868:	ed97 6a02 	vldr	s12, [r7, #8]
 800386c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80039ac <HAL_RCC_GetSysClockFreq+0x2d4>
 8003870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003884:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003888:	e065      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	ee07 3a90 	vmov	s15, r3
 8003890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003894:	eddf 6a47 	vldr	s13, [pc, #284]	; 80039b4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389c:	4b3f      	ldr	r3, [pc, #252]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a4:	ee07 3a90 	vmov	s15, r3
 80038a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80038b0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80039ac <HAL_RCC_GetSysClockFreq+0x2d4>
 80038b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038cc:	e043      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80039b8 <HAL_RCC_GetSysClockFreq+0x2e0>
 80038dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e0:	4b2e      	ldr	r3, [pc, #184]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80038f4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80039ac <HAL_RCC_GetSysClockFreq+0x2d4>
 80038f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003910:	e021      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80039b4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392c:	ee07 3a90 	vmov	s15, r3
 8003930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003934:	ed97 6a02 	vldr	s12, [r7, #8]
 8003938:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80039ac <HAL_RCC_GetSysClockFreq+0x2d4>
 800393c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003940:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003944:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800394c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003950:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003954:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	0a5b      	lsrs	r3, r3, #9
 800395c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003960:	3301      	adds	r3, #1
 8003962:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800396e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397a:	ee17 3a90 	vmov	r3, s15
 800397e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003980:	e005      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	61bb      	str	r3, [r7, #24]
    break;
 8003986:	e002      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800398a:	61bb      	str	r3, [r7, #24]
    break;
 800398c:	bf00      	nop
  }

  return sysclockfreq;
 800398e:	69bb      	ldr	r3, [r7, #24]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3724      	adds	r7, #36	; 0x24
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	58024400 	.word	0x58024400
 80039a0:	03d09000 	.word	0x03d09000
 80039a4:	003d0900 	.word	0x003d0900
 80039a8:	017d7840 	.word	0x017d7840
 80039ac:	46000000 	.word	0x46000000
 80039b0:	4c742400 	.word	0x4c742400
 80039b4:	4a742400 	.word	0x4a742400
 80039b8:	4bbebc20 	.word	0x4bbebc20

080039bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039c2:	f7ff fe89 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 80039c6:	4601      	mov	r1, r0
 80039c8:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80039d4:	5cd3      	ldrb	r3, [r2, r3]
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	fa21 f303 	lsr.w	r3, r1, r3
 80039de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_RCC_GetHCLKFreq+0x50>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_RCC_GetHCLKFreq+0x54>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x58>)
 80039f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039fa:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	0800acc8 	.word	0x0800acc8
 8003a14:	20000004 	.word	0x20000004
 8003a18:	20000000 	.word	0x20000000

08003a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a20:	f7ff ffcc 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a24:	4601      	mov	r1, r0
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	58024400 	.word	0x58024400
 8003a44:	0800acc8 	.word	0x0800acc8

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a4c:	f7ff ffb6 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a50:	4601      	mov	r1, r0
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	58024400 	.word	0x58024400
 8003a70:	0800acc8 	.word	0x0800acc8

08003a74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a80:	2300      	movs	r3, #0
 8003a82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d03d      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a98:	d013      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a9e:	d802      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003aa4:	e01f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aaa:	d013      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003aac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ab0:	d01c      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003ab2:	e018      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab4:	4baf      	ldr	r3, [pc, #700]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4aae      	ldr	r2, [pc, #696]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ac0:	e015      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 f96f 	bl	8004dac <RCCEx_PLL2_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ad2:	e00c      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3324      	adds	r3, #36	; 0x24
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fa18 	bl	8004f10 <RCCEx_PLL3_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aea:	e000      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003af4:	4b9f      	ldr	r3, [pc, #636]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b00:	499c      	ldr	r1, [pc, #624]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	650b      	str	r3, [r1, #80]	; 0x50
 8003b06:	e001      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d03d      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d826      	bhi.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b3d 	.word	0x08003b3d
 8003b2c:	08003b4b 	.word	0x08003b4b
 8003b30:	08003b5d 	.word	0x08003b5d
 8003b34:	08003b75 	.word	0x08003b75
 8003b38:	08003b75 	.word	0x08003b75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b3c:	4b8d      	ldr	r3, [pc, #564]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	4a8c      	ldr	r2, [pc, #560]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b48:	e015      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f001 f92b 	bl	8004dac <RCCEx_PLL2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b5a:	e00c      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3324      	adds	r3, #36	; 0x24
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 f9d4 	bl	8004f10 <RCCEx_PLL3_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b6c:	e003      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	75fb      	strb	r3, [r7, #23]
      break;
 8003b72:	e000      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b7c:	4b7d      	ldr	r3, [pc, #500]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b80:	f023 0207 	bic.w	r2, r3, #7
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	497a      	ldr	r1, [pc, #488]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8003b8e:	e001      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d03e      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d01c      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d804      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003bb4:	e01e      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003bb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bb8:	d01f      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbe:	d01e      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003bc0:	e018      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc2:	4b6c      	ldr	r3, [pc, #432]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	4a6b      	ldr	r2, [pc, #428]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bce:	e017      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 f8e8 	bl	8004dac <RCCEx_PLL2_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003be0:	e00e      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3324      	adds	r3, #36	; 0x24
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 f991 	bl	8004f10 <RCCEx_PLL3_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bf2:	e005      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bf8:	e002      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e000      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c06:	4b5b      	ldr	r3, [pc, #364]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	4958      	ldr	r1, [pc, #352]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	650b      	str	r3, [r1, #80]	; 0x50
 8003c18:	e001      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d044      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c34:	d01f      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3a:	d805      	bhi.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c44:	d00e      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003c46:	e01f      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003c48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c4c:	d01f      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003c4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c52:	d01e      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003c54:	e018      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c56:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	4a46      	ldr	r2, [pc, #280]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c62:	e017      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 f89e 	bl	8004dac <RCCEx_PLL2_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c74:	e00e      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3324      	adds	r3, #36	; 0x24
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 f947 	bl	8004f10 <RCCEx_PLL3_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c86:	e005      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c8c:	e002      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e000      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c9a:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ca8:	4932      	ldr	r1, [pc, #200]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	658b      	str	r3, [r1, #88]	; 0x58
 8003cae:	e001      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d044      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cca:	d01f      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ccc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cd0:	d805      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003cd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cda:	d00e      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003cdc:	e01f      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003cde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ce2:	d01f      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ce8:	d01e      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cea:	e018      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cf8:	e017      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f001 f853 	bl	8004dac <RCCEx_PLL2_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d0a:	e00e      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3324      	adds	r3, #36	; 0x24
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 f8fc 	bl	8004f10 <RCCEx_PLL3_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d1c:	e005      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
      break;
 8003d22:	e002      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003d24:	bf00      	nop
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d3e:	490d      	ldr	r1, [pc, #52]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	658b      	str	r3, [r1, #88]	; 0x58
 8003d44:	e001      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d035      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d00c      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d802      	bhi.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01b      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003d66:	e017      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d00c      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003d6c:	2b30      	cmp	r3, #48	; 0x30
 8003d6e:	d018      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003d70:	e012      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003d72:	bf00      	nop
 8003d74:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d78:	4baf      	ldr	r3, [pc, #700]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	4aae      	ldr	r2, [pc, #696]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d84:	e00e      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f80d 	bl	8004dac <RCCEx_PLL2_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d96:	e005      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003daa:	4ba3      	ldr	r3, [pc, #652]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	49a0      	ldr	r1, [pc, #640]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dbc:	e001      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d042      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd6:	d01f      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d805      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de6:	d00e      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003de8:	e01f      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003dea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dee:	d01f      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df4:	d01e      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003df6:	e018      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df8:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4a8e      	ldr	r2, [pc, #568]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e04:	e017      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 ffcd 	bl	8004dac <RCCEx_PLL2_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e16:	e00e      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3324      	adds	r3, #36	; 0x24
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 f876 	bl	8004f10 <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e28:	e005      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2e:	e002      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003e30:	bf00      	nop
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e3c:	4b7e      	ldr	r3, [pc, #504]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	497b      	ldr	r1, [pc, #492]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	650b      	str	r3, [r1, #80]	; 0x50
 8003e4e:	e001      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d042      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e68:	d01b      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e6e:	d805      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d022      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e7a:	e01b      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003e7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e80:	d01d      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003e82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e86:	d01c      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003e88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e8c:	d01b      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003e8e:	e011      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 ff88 	bl	8004dac <RCCEx_PLL2_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ea0:	e012      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3324      	adds	r3, #36	; 0x24
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 f831 	bl	8004f10 <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003eb2:	e009      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb8:	e006      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e004      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ece:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eda:	4957      	ldr	r1, [pc, #348]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	650b      	str	r3, [r1, #80]	; 0x50
 8003ee0:	e001      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d044      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003efc:	d01b      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f02:	d805      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d022      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f0e:	e01b      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d01d      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f1a:	d01c      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003f1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f20:	d01b      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003f22:	e011      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 ff3e 	bl	8004dac <RCCEx_PLL2_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f34:	e012      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3324      	adds	r3, #36	; 0x24
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 ffe7 	bl	8004f10 <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f46:	e009      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4c:	e006      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e004      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f52:	bf00      	nop
 8003f54:	e002      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f56:	bf00      	nop
 8003f58:	e000      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f62:	4b35      	ldr	r3, [pc, #212]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f70:	4931      	ldr	r1, [pc, #196]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	658b      	str	r3, [r1, #88]	; 0x58
 8003f76:	e001      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02d      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f90:	d005      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f96:	d009      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d013      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003f9c:	e00f      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9e:	4b26      	ldr	r3, [pc, #152]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	4a25      	ldr	r2, [pc, #148]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003faa:	e00c      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fefa 	bl	8004dac <RCCEx_PLL2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fbc:	e003      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd8:	4917      	ldr	r1, [pc, #92]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	650b      	str	r3, [r1, #80]	; 0x50
 8003fde:	e001      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d035      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d81b      	bhi.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	0800403d 	.word	0x0800403d
 8004004:	08004011 	.word	0x08004011
 8004008:	0800401f 	.word	0x0800401f
 800400c:	0800403d 	.word	0x0800403d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4a08      	ldr	r2, [pc, #32]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800401c:	e00f      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	2102      	movs	r1, #2
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fec1 	bl	8004dac <RCCEx_PLL2_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800402e:	e006      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	75fb      	strb	r3, [r7, #23]
      break;
 8004034:	e003      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004036:	bf00      	nop
 8004038:	58024400 	.word	0x58024400
      break;
 800403c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004044:	4bba      	ldr	r3, [pc, #744]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004048:	f023 0203 	bic.w	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	49b7      	ldr	r1, [pc, #732]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004056:	e001      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8086 	beq.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800406a:	4bb2      	ldr	r3, [pc, #712]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4ab1      	ldr	r2, [pc, #708]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004074:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004076:	f7fd fe19 	bl	8001cac <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800407c:	e009      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407e:	f7fd fe15 	bl	8001cac <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b64      	cmp	r3, #100	; 0x64
 800408a:	d902      	bls.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	75fb      	strb	r3, [r7, #23]
        break;
 8004090:	e005      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004092:	4ba8      	ldr	r3, [pc, #672]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ef      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d166      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040a4:	4ba2      	ldr	r3, [pc, #648]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040ae:	4053      	eors	r3, r2
 80040b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b8:	4b9d      	ldr	r3, [pc, #628]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040c2:	4b9b      	ldr	r3, [pc, #620]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a9a      	ldr	r2, [pc, #616]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ce:	4b98      	ldr	r3, [pc, #608]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a97      	ldr	r2, [pc, #604]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040da:	4a95      	ldr	r2, [pc, #596]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ea:	d115      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fdde 	bl	8001cac <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040f2:	e00b      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fd fdda 	bl	8001cac <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d902      	bls.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	75fb      	strb	r3, [r7, #23]
            break;
 800410a:	e005      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800410c:	4b88      	ldr	r3, [pc, #544]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ed      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d126      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800412c:	d10d      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800412e:	4b80      	ldr	r3, [pc, #512]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800413c:	0919      	lsrs	r1, r3, #4
 800413e:	4b7e      	ldr	r3, [pc, #504]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004140:	400b      	ands	r3, r1
 8004142:	497b      	ldr	r1, [pc, #492]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	610b      	str	r3, [r1, #16]
 8004148:	e005      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800414a:	4b79      	ldr	r3, [pc, #484]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	4a78      	ldr	r2, [pc, #480]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004150:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004154:	6113      	str	r3, [r2, #16]
 8004156:	4b76      	ldr	r3, [pc, #472]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	4972      	ldr	r1, [pc, #456]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	670b      	str	r3, [r1, #112]	; 0x70
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	75bb      	strb	r3, [r7, #22]
 8004170:	e001      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d07d      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004186:	2b28      	cmp	r3, #40	; 0x28
 8004188:	d866      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	0800425f 	.word	0x0800425f
 8004194:	08004259 	.word	0x08004259
 8004198:	08004259 	.word	0x08004259
 800419c:	08004259 	.word	0x08004259
 80041a0:	08004259 	.word	0x08004259
 80041a4:	08004259 	.word	0x08004259
 80041a8:	08004259 	.word	0x08004259
 80041ac:	08004259 	.word	0x08004259
 80041b0:	08004235 	.word	0x08004235
 80041b4:	08004259 	.word	0x08004259
 80041b8:	08004259 	.word	0x08004259
 80041bc:	08004259 	.word	0x08004259
 80041c0:	08004259 	.word	0x08004259
 80041c4:	08004259 	.word	0x08004259
 80041c8:	08004259 	.word	0x08004259
 80041cc:	08004259 	.word	0x08004259
 80041d0:	08004247 	.word	0x08004247
 80041d4:	08004259 	.word	0x08004259
 80041d8:	08004259 	.word	0x08004259
 80041dc:	08004259 	.word	0x08004259
 80041e0:	08004259 	.word	0x08004259
 80041e4:	08004259 	.word	0x08004259
 80041e8:	08004259 	.word	0x08004259
 80041ec:	08004259 	.word	0x08004259
 80041f0:	0800425f 	.word	0x0800425f
 80041f4:	08004259 	.word	0x08004259
 80041f8:	08004259 	.word	0x08004259
 80041fc:	08004259 	.word	0x08004259
 8004200:	08004259 	.word	0x08004259
 8004204:	08004259 	.word	0x08004259
 8004208:	08004259 	.word	0x08004259
 800420c:	08004259 	.word	0x08004259
 8004210:	0800425f 	.word	0x0800425f
 8004214:	08004259 	.word	0x08004259
 8004218:	08004259 	.word	0x08004259
 800421c:	08004259 	.word	0x08004259
 8004220:	08004259 	.word	0x08004259
 8004224:	08004259 	.word	0x08004259
 8004228:	08004259 	.word	0x08004259
 800422c:	08004259 	.word	0x08004259
 8004230:	0800425f 	.word	0x0800425f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fdb6 	bl	8004dac <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004244:	e00c      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3324      	adds	r3, #36	; 0x24
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fe5f 	bl	8004f10 <RCCEx_PLL3_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004256:	e003      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
      break;
 800425c:	e000      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800425e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004266:	4b32      	ldr	r3, [pc, #200]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004272:	492f      	ldr	r1, [pc, #188]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	654b      	str	r3, [r1, #84]	; 0x54
 8004278:	e001      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d037      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428e:	2b05      	cmp	r3, #5
 8004290:	d820      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042db 	.word	0x080042db
 800429c:	080042b1 	.word	0x080042b1
 80042a0:	080042c3 	.word	0x080042c3
 80042a4:	080042db 	.word	0x080042db
 80042a8:	080042db 	.word	0x080042db
 80042ac:	080042db 	.word	0x080042db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fd78 	bl	8004dac <RCCEx_PLL2_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042c0:	e00c      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3324      	adds	r3, #36	; 0x24
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fe21 	bl	8004f10 <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042d2:	e003      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75fb      	strb	r3, [r7, #23]
      break;
 80042d8:	e000      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80042da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042e2:	4b13      	ldr	r3, [pc, #76]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f023 0207 	bic.w	r2, r3, #7
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	4910      	ldr	r1, [pc, #64]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	654b      	str	r3, [r1, #84]	; 0x54
 80042f4:	e001      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d040      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	2b05      	cmp	r3, #5
 800430e:	d827      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004367 	.word	0x08004367
 800431c:	0800433d 	.word	0x0800433d
 8004320:	0800434f 	.word	0x0800434f
 8004324:	08004367 	.word	0x08004367
 8004328:	08004367 	.word	0x08004367
 800432c:	08004367 	.word	0x08004367
 8004330:	58024400 	.word	0x58024400
 8004334:	58024800 	.word	0x58024800
 8004338:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fd32 	bl	8004dac <RCCEx_PLL2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800434c:	e00c      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3324      	adds	r3, #36	; 0x24
 8004352:	2101      	movs	r1, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fddb 	bl	8004f10 <RCCEx_PLL3_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800435e:	e003      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
      break;
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800436e:	4bb2      	ldr	r3, [pc, #712]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	f023 0207 	bic.w	r2, r3, #7
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	49ae      	ldr	r1, [pc, #696]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	658b      	str	r3, [r1, #88]	; 0x58
 8004382:	e001      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b00      	cmp	r3, #0
 8004392:	d044      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439e:	d01b      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80043a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a4:	d805      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d022      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80043aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80043b0:	e01b      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x976>
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b6:	d01d      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80043b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043bc:	d01c      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80043be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043c2:	d01b      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x988>
 80043c4:	e011      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fced 	bl	8004dac <RCCEx_PLL2_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043d6:	e012      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3324      	adds	r3, #36	; 0x24
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd96 	bl	8004f10 <RCCEx_PLL3_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043e8:	e009      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
      break;
 80043ee:	e006      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043f0:	bf00      	nop
 80043f2:	e004      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043f4:	bf00      	nop
 80043f6:	e002      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043f8:	bf00      	nop
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004404:	4b8c      	ldr	r3, [pc, #560]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004412:	4989      	ldr	r1, [pc, #548]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004414:	4313      	orrs	r3, r2
 8004416:	654b      	str	r3, [r1, #84]	; 0x54
 8004418:	e001      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d044      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004434:	d01b      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443a:	d805      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d022      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004446:	e01b      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d01d      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800444e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004452:	d01c      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004458:	d01b      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800445a:	e011      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fca2 	bl	8004dac <RCCEx_PLL2_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800446c:	e012      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3324      	adds	r3, #36	; 0x24
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fd4b 	bl	8004f10 <RCCEx_PLL3_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800447e:	e009      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
      break;
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004486:	bf00      	nop
 8004488:	e004      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800449a:	4b67      	ldr	r3, [pc, #412]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a8:	4963      	ldr	r1, [pc, #396]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	658b      	str	r3, [r1, #88]	; 0x58
 80044ae:	e001      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d044      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ca:	d01b      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80044cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d0:	d805      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d022      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80044d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80044dc:	e01b      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80044de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e2:	d01d      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80044e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044e8:	d01c      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80044ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044ee:	d01b      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80044f0:	e011      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3304      	adds	r3, #4
 80044f6:	2100      	movs	r1, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fc57 	bl	8004dac <RCCEx_PLL2_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004502:	e012      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3324      	adds	r3, #36	; 0x24
 8004508:	2102      	movs	r1, #2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fd00 	bl	8004f10 <RCCEx_PLL3_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004514:	e009      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
      break;
 800451a:	e006      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800451c:	bf00      	nop
 800451e:	e004      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004520:	bf00      	nop
 8004522:	e002      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004524:	bf00      	nop
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004530:	4b41      	ldr	r3, [pc, #260]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800453e:	493e      	ldr	r1, [pc, #248]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004540:	4313      	orrs	r3, r2
 8004542:	658b      	str	r3, [r1, #88]	; 0x58
 8004544:	e001      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800455c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004560:	d10a      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3324      	adds	r3, #36	; 0x24
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fcd1 	bl	8004f10 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004578:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004586:	492c      	ldr	r1, [pc, #176]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800459e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a2:	d10a      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3324      	adds	r3, #36	; 0x24
 80045a8:	2102      	movs	r1, #2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fcb0 	bl	8004f10 <RCCEx_PLL3_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ba:	4b1f      	ldr	r3, [pc, #124]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c8:	491b      	ldr	r1, [pc, #108]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d032      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d00d      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80045e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ea:	d016      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d111      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fbd8 	bl	8004dac <RCCEx_PLL2_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004600:	e00c      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3324      	adds	r3, #36	; 0x24
 8004606:	2102      	movs	r1, #2
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fc81 	bl	8004f10 <RCCEx_PLL3_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004612:	e003      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	75fb      	strb	r3, [r7, #23]
      break;
 8004618:	e000      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800461a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10c      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004630:	4901      	ldr	r1, [pc, #4]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004632:	4313      	orrs	r3, r2
 8004634:	658b      	str	r3, [r1, #88]	; 0x58
 8004636:	e003      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02f      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004656:	d00c      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004658:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800465c:	d015      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004662:	d10f      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004664:	4b79      	ldr	r3, [pc, #484]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	4a78      	ldr	r2, [pc, #480]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800466a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004670:	e00c      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3324      	adds	r3, #36	; 0x24
 8004676:	2101      	movs	r1, #1
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fc49 	bl	8004f10 <RCCEx_PLL3_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004682:	e003      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	75fb      	strb	r3, [r7, #23]
      break;
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800468a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004692:	4b6e      	ldr	r3, [pc, #440]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a0:	496a      	ldr	r1, [pc, #424]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	654b      	str	r3, [r1, #84]	; 0x54
 80046a6:	e001      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d029      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d007      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80046c6:	e00f      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c8:	4b60      	ldr	r3, [pc, #384]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4a5f      	ldr	r2, [pc, #380]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80046d4:	e00b      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3304      	adds	r3, #4
 80046da:	2102      	movs	r1, #2
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fb65 	bl	8004dac <RCCEx_PLL2_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80046e6:	e002      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75fb      	strb	r3, [r7, #23]
      break;
 80046ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046f4:	4b55      	ldr	r3, [pc, #340]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004700:	4952      	ldr	r1, [pc, #328]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004706:	e001      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3324      	adds	r3, #36	; 0x24
 800471c:	2102      	movs	r1, #2
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fbf6 	bl	8004f10 <RCCEx_PLL3_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d02f      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004742:	d00c      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004748:	d802      	bhi.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d011      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800474e:	e00d      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004754:	d00f      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800475a:	d00e      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	4a3a      	ldr	r2, [pc, #232]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004768:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800476a:	e007      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
      break;
 8004770:	e004      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004772:	bf00      	nop
 8004774:	e002      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800477a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004782:	4b32      	ldr	r3, [pc, #200]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478e:	492f      	ldr	r1, [pc, #188]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004790:	4313      	orrs	r3, r2
 8004792:	654b      	str	r3, [r1, #84]	; 0x54
 8004794:	e001      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047a6:	4b29      	ldr	r3, [pc, #164]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	4926      	ldr	r1, [pc, #152]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047c4:	4b21      	ldr	r3, [pc, #132]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047d2:	491e      	ldr	r1, [pc, #120]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f0:	4916      	ldr	r1, [pc, #88]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004808:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800480c:	6113      	str	r3, [r2, #16]
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004818:	490c      	ldr	r1, [pc, #48]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	da08      	bge.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004832:	4906      	ldr	r1, [pc, #24]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004834:	4313      	orrs	r3, r2
 8004836:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004838:	7dbb      	ldrb	r3, [r7, #22]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	58024400 	.word	0x58024400

08004850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004854:	f7ff f8b2 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8004858:	4601      	mov	r1, r0
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	4a04      	ldr	r2, [pc, #16]	; (8004878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004866:	5cd3      	ldrb	r3, [r2, r3]
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	58024400 	.word	0x58024400
 8004878:	0800acc8 	.word	0x0800acc8

0800487c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800487c:	b480      	push	{r7}
 800487e:	b089      	sub	sp, #36	; 0x24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004884:	4b9d      	ldr	r3, [pc, #628]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800488e:	4b9b      	ldr	r3, [pc, #620]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	0b1b      	lsrs	r3, r3, #12
 8004894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800489a:	4b98      	ldr	r3, [pc, #608]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80048a6:	4b95      	ldr	r3, [pc, #596]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	08db      	lsrs	r3, r3, #3
 80048ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 810a 	beq.w	8004ade <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d05a      	beq.n	8004986 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d302      	bcc.n	80048da <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d078      	beq.n	80049ca <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80048d8:	e099      	b.n	8004a0e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048da:	4b88      	ldr	r3, [pc, #544]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d02d      	beq.n	8004942 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048e6:	4b85      	ldr	r3, [pc, #532]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	08db      	lsrs	r3, r3, #3
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	4a83      	ldr	r2, [pc, #524]	; (8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004910:	4b7a      	ldr	r3, [pc, #488]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004920:	ed97 6a03 	vldr	s12, [r7, #12]
 8004924:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800492c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004940:	e087      	b.n	8004a52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004954:	4b69      	ldr	r3, [pc, #420]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495c:	ee07 3a90 	vmov	s15, r3
 8004960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004964:	ed97 6a03 	vldr	s12, [r7, #12]
 8004968:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800496c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004980:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004984:	e065      	b.n	8004a52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004990:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004998:	4b58      	ldr	r3, [pc, #352]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80049b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049c8:	e043      	b.n	8004a52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80049d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049dc:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80049f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a0c:	e021      	b.n	8004a52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	ee07 3a90 	vmov	s15, r3
 8004a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a18:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a30:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a34:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a50:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004a52:	4b2a      	ldr	r3, [pc, #168]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	0a5b      	lsrs	r3, r3, #9
 8004a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a78:	ee17 2a90 	vmov	r2, s15
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004a80:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	0c1b      	lsrs	r3, r3, #16
 8004a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa6:	ee17 2a90 	vmov	r2, s15
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004aae:	4b13      	ldr	r3, [pc, #76]	; (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	0e1b      	lsrs	r3, r3, #24
 8004ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ac4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ac8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad4:	ee17 2a90 	vmov	r2, s15
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004adc:	e008      	b.n	8004af0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	3724      	adds	r7, #36	; 0x24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	58024400 	.word	0x58024400
 8004b00:	03d09000 	.word	0x03d09000
 8004b04:	46000000 	.word	0x46000000
 8004b08:	4c742400 	.word	0x4c742400
 8004b0c:	4a742400 	.word	0x4a742400
 8004b10:	4bbebc20 	.word	0x4bbebc20

08004b14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b089      	sub	sp, #36	; 0x24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b1c:	4b9d      	ldr	r3, [pc, #628]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004b26:	4b9b      	ldr	r3, [pc, #620]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	0d1b      	lsrs	r3, r3, #20
 8004b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b32:	4b98      	ldr	r3, [pc, #608]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	0a1b      	lsrs	r3, r3, #8
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004b3e:	4b95      	ldr	r3, [pc, #596]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	08db      	lsrs	r3, r3, #3
 8004b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 810a 	beq.w	8004d76 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d05a      	beq.n	8004c1e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d302      	bcc.n	8004b72 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d078      	beq.n	8004c62 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004b70:	e099      	b.n	8004ca6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b72:	4b88      	ldr	r3, [pc, #544]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d02d      	beq.n	8004bda <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b7e:	4b85      	ldr	r3, [pc, #532]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	08db      	lsrs	r3, r3, #3
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	4a83      	ldr	r2, [pc, #524]	; (8004d98 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba8:	4b7a      	ldr	r3, [pc, #488]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bbc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004bd8:	e087      	b.n	8004cea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bec:	4b69      	ldr	r3, [pc, #420]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c00:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c1c:	e065      	b.n	8004cea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c30:	4b58      	ldr	r3, [pc, #352]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c40:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c44:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c60:	e043      	b.n	8004cea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c74:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	ee07 3a90 	vmov	s15, r3
 8004c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c84:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c88:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ca4:	e021      	b.n	8004cea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb8:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ccc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ce8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004cea:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	0a5b      	lsrs	r3, r3, #9
 8004cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d10:	ee17 2a90 	vmov	r2, s15
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004d18:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3e:	ee17 2a90 	vmov	r2, s15
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	0e1b      	lsrs	r3, r3, #24
 8004d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6c:	ee17 2a90 	vmov	r2, s15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d74:	e008      	b.n	8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	609a      	str	r2, [r3, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	3724      	adds	r7, #36	; 0x24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	58024400 	.word	0x58024400
 8004d98:	03d09000 	.word	0x03d09000
 8004d9c:	46000000 	.word	0x46000000
 8004da0:	4c742400 	.word	0x4c742400
 8004da4:	4a742400 	.word	0x4a742400
 8004da8:	4bbebc20 	.word	0x4bbebc20

08004dac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dba:	4b53      	ldr	r3, [pc, #332]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d101      	bne.n	8004dca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e099      	b.n	8004efe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004dca:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a4e      	ldr	r2, [pc, #312]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd6:	f7fc ff69 	bl	8001cac <HAL_GetTick>
 8004dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ddc:	e008      	b.n	8004df0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004dde:	f7fc ff65 	bl	8001cac <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e086      	b.n	8004efe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004df0:	4b45      	ldr	r3, [pc, #276]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f0      	bne.n	8004dde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004dfc:	4b42      	ldr	r3, [pc, #264]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	031b      	lsls	r3, r3, #12
 8004e0a:	493f      	ldr	r1, [pc, #252]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	628b      	str	r3, [r1, #40]	; 0x28
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	025b      	lsls	r3, r3, #9
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	061b      	lsls	r3, r3, #24
 8004e3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e40:	4931      	ldr	r1, [pc, #196]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e46:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	492d      	ldr	r1, [pc, #180]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e58:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f023 0220 	bic.w	r2, r3, #32
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	4928      	ldr	r1, [pc, #160]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e6a:	4b27      	ldr	r3, [pc, #156]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e70:	f023 0310 	bic.w	r3, r3, #16
 8004e74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e76:	4b24      	ldr	r3, [pc, #144]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e7a:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <RCCEx_PLL2_Config+0x160>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	69d2      	ldr	r2, [r2, #28]
 8004e82:	00d2      	lsls	r2, r2, #3
 8004e84:	4920      	ldr	r1, [pc, #128]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e90:	f043 0310 	orr.w	r3, r3, #16
 8004e94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d106      	bne.n	8004eaa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	4a19      	ldr	r2, [pc, #100]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004ea2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ea8:	e00f      	b.n	8004eca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d106      	bne.n	8004ebe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004eb0:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ebc:	e005      	b.n	8004eca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	4a11      	ldr	r2, [pc, #68]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ec8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed6:	f7fc fee9 	bl	8001cac <HAL_GetTick>
 8004eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004edc:	e008      	b.n	8004ef0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ede:	f7fc fee5 	bl	8001cac <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e006      	b.n	8004efe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <RCCEx_PLL2_Config+0x15c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	ffff0007 	.word	0xffff0007

08004f10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f1e:	4b53      	ldr	r3, [pc, #332]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d101      	bne.n	8004f2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e099      	b.n	8005062 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f2e:	4b4f      	ldr	r3, [pc, #316]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a4e      	ldr	r2, [pc, #312]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fc feb7 	bl	8001cac <HAL_GetTick>
 8004f3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f42:	f7fc feb3 	bl	8001cac <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e086      	b.n	8005062 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f54:	4b45      	ldr	r3, [pc, #276]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f60:	4b42      	ldr	r3, [pc, #264]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	051b      	lsls	r3, r3, #20
 8004f6e:	493f      	ldr	r1, [pc, #252]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	628b      	str	r3, [r1, #40]	; 0x28
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	025b      	lsls	r3, r3, #9
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	061b      	lsls	r3, r3, #24
 8004fa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fa4:	4931      	ldr	r1, [pc, #196]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004faa:	4b30      	ldr	r3, [pc, #192]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	492d      	ldr	r1, [pc, #180]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	4928      	ldr	r1, [pc, #160]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004fce:	4b27      	ldr	r3, [pc, #156]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	4a26      	ldr	r2, [pc, #152]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fde:	4b24      	ldr	r3, [pc, #144]	; (8005070 <RCCEx_PLL3_Config+0x160>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	69d2      	ldr	r2, [r2, #28]
 8004fe6:	00d2      	lsls	r2, r2, #3
 8004fe8:	4920      	ldr	r1, [pc, #128]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fee:	4b1f      	ldr	r3, [pc, #124]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8004ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	4a19      	ldr	r2, [pc, #100]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8005006:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800500a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800500c:	e00f      	b.n	800502e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d106      	bne.n	8005022 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005014:	4b15      	ldr	r3, [pc, #84]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 800501a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800501e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005020:	e005      	b.n	800502e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	4a11      	ldr	r2, [pc, #68]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8005028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800502c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a0e      	ldr	r2, [pc, #56]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8005034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503a:	f7fc fe37 	bl	8001cac <HAL_GetTick>
 800503e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005040:	e008      	b.n	8005054 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005042:	f7fc fe33 	bl	8001cac <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e006      	b.n	8005062 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <RCCEx_PLL3_Config+0x15c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	58024400 	.word	0x58024400
 8005070:	ffff0007 	.word	0xffff0007

08005074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e049      	b.n	800511a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc fc0e 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f000 f934 	bl	8005320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d001      	beq.n	800513c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e019      	b.n	8005170 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <HAL_TIM_Base_Start+0x58>)
 800514c:	4013      	ands	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b06      	cmp	r3, #6
 8005154:	d00b      	beq.n	800516e <HAL_TIM_Base_Start+0x4a>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515c:	d007      	beq.n	800516e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	00010007 	.word	0x00010007

08005180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_TIM_ConfigClockSource+0x18>
 8005194:	2302      	movs	r3, #2
 8005196:	e0b7      	b.n	8005308 <HAL_TIM_ConfigClockSource+0x188>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4b57      	ldr	r3, [pc, #348]	; (8005310 <HAL_TIM_ConfigClockSource+0x190>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b70      	cmp	r3, #112	; 0x70
 80051ce:	d02e      	beq.n	800522e <HAL_TIM_ConfigClockSource+0xae>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d812      	bhi.n	80051fa <HAL_TIM_ConfigClockSource+0x7a>
 80051d4:	2b30      	cmp	r3, #48	; 0x30
 80051d6:	f000 8084 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x162>
 80051da:	2b30      	cmp	r3, #48	; 0x30
 80051dc:	d806      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x6c>
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d07f      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x162>
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d07d      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x162>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d07b      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80051ea:	e084      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80051ec:	2b50      	cmp	r3, #80	; 0x50
 80051ee:	d048      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0x102>
 80051f0:	2b60      	cmp	r3, #96	; 0x60
 80051f2:	d056      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x122>
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d064      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 80051f8:	e07d      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80051fa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80051fe:	d070      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x162>
 8005200:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005204:	d809      	bhi.n	800521a <HAL_TIM_ConfigClockSource+0x9a>
 8005206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520a:	d027      	beq.n	800525c <HAL_TIM_ConfigClockSource+0xdc>
 800520c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005210:	d067      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x162>
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005216:	d06d      	beq.n	80052f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005218:	e06d      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800521a:	4a3e      	ldr	r2, [pc, #248]	; (8005314 <HAL_TIM_ConfigClockSource+0x194>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d060      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x162>
 8005220:	4a3d      	ldr	r2, [pc, #244]	; (8005318 <HAL_TIM_ConfigClockSource+0x198>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d05d      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x162>
 8005226:	4a3d      	ldr	r2, [pc, #244]	; (800531c <HAL_TIM_ConfigClockSource+0x19c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d05a      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800522c:	e063      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6899      	ldr	r1, [r3, #8]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f000 f987 	bl	8005550 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005250:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	609a      	str	r2, [r3, #8]
      break;
 800525a:	e04c      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f000 f970 	bl	8005550 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800527e:	609a      	str	r2, [r3, #8]
      break;
 8005280:	e039      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	461a      	mov	r2, r3
 8005290:	f000 f8e0 	bl	8005454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2150      	movs	r1, #80	; 0x50
 800529a:	4618      	mov	r0, r3
 800529c:	f000 f93a 	bl	8005514 <TIM_ITRx_SetConfig>
      break;
 80052a0:	e029      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f000 f8ff 	bl	80054b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2160      	movs	r1, #96	; 0x60
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f92a 	bl	8005514 <TIM_ITRx_SetConfig>
      break;
 80052c0:	e019      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 f8c0 	bl	8005454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2140      	movs	r1, #64	; 0x40
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f91a 	bl	8005514 <TIM_ITRx_SetConfig>
      break;
 80052e0:	e009      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f000 f911 	bl	8005514 <TIM_ITRx_SetConfig>
      break;
 80052f2:	e000      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80052f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	ffceff88 	.word	0xffceff88
 8005314:	00100030 	.word	0x00100030
 8005318:	00100040 	.word	0x00100040
 800531c:	00100020 	.word	0x00100020

08005320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a40      	ldr	r2, [pc, #256]	; (8005434 <TIM_Base_SetConfig+0x114>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d013      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533e:	d00f      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a3d      	ldr	r2, [pc, #244]	; (8005438 <TIM_Base_SetConfig+0x118>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00b      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a3c      	ldr	r2, [pc, #240]	; (800543c <TIM_Base_SetConfig+0x11c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3b      	ldr	r2, [pc, #236]	; (8005440 <TIM_Base_SetConfig+0x120>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a3a      	ldr	r2, [pc, #232]	; (8005444 <TIM_Base_SetConfig+0x124>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d108      	bne.n	8005372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2f      	ldr	r2, [pc, #188]	; (8005434 <TIM_Base_SetConfig+0x114>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01f      	beq.n	80053ba <TIM_Base_SetConfig+0x9a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d01b      	beq.n	80053ba <TIM_Base_SetConfig+0x9a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2c      	ldr	r2, [pc, #176]	; (8005438 <TIM_Base_SetConfig+0x118>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d017      	beq.n	80053ba <TIM_Base_SetConfig+0x9a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2b      	ldr	r2, [pc, #172]	; (800543c <TIM_Base_SetConfig+0x11c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <TIM_Base_SetConfig+0x9a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2a      	ldr	r2, [pc, #168]	; (8005440 <TIM_Base_SetConfig+0x120>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_Base_SetConfig+0x9a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a29      	ldr	r2, [pc, #164]	; (8005444 <TIM_Base_SetConfig+0x124>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_Base_SetConfig+0x9a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a28      	ldr	r2, [pc, #160]	; (8005448 <TIM_Base_SetConfig+0x128>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_Base_SetConfig+0x9a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a27      	ldr	r2, [pc, #156]	; (800544c <TIM_Base_SetConfig+0x12c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_Base_SetConfig+0x9a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a26      	ldr	r2, [pc, #152]	; (8005450 <TIM_Base_SetConfig+0x130>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d108      	bne.n	80053cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a10      	ldr	r2, [pc, #64]	; (8005434 <TIM_Base_SetConfig+0x114>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00f      	beq.n	8005418 <TIM_Base_SetConfig+0xf8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a12      	ldr	r2, [pc, #72]	; (8005444 <TIM_Base_SetConfig+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00b      	beq.n	8005418 <TIM_Base_SetConfig+0xf8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a11      	ldr	r2, [pc, #68]	; (8005448 <TIM_Base_SetConfig+0x128>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d007      	beq.n	8005418 <TIM_Base_SetConfig+0xf8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a10      	ldr	r2, [pc, #64]	; (800544c <TIM_Base_SetConfig+0x12c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_Base_SetConfig+0xf8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a0f      	ldr	r2, [pc, #60]	; (8005450 <TIM_Base_SetConfig+0x130>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d103      	bne.n	8005420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	615a      	str	r2, [r3, #20]
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40010400 	.word	0x40010400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800

08005454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0201 	bic.w	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800547e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f023 030a 	bic.w	r3, r3, #10
 8005490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b087      	sub	sp, #28
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0210 	bic.w	r2, r3, #16
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	031b      	lsls	r3, r3, #12
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4b09      	ldr	r3, [pc, #36]	; (800554c <TIM_ITRx_SetConfig+0x38>)
 8005528:	4013      	ands	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	f043 0307 	orr.w	r3, r3, #7
 8005536:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	609a      	str	r2, [r3, #8]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	ffcfff8f 	.word	0xffcfff8f

08005550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800556a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	431a      	orrs	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4313      	orrs	r3, r2
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	609a      	str	r2, [r3, #8]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e068      	b.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2e      	ldr	r2, [pc, #184]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2d      	ldr	r2, [pc, #180]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d108      	bne.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1e      	ldr	r2, [pc, #120]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01d      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561a:	d018      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1a      	ldr	r2, [pc, #104]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00e      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a18      	ldr	r2, [pc, #96]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d009      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a13      	ldr	r2, [pc, #76]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d004      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a14      	ldr	r2, [pc, #80]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10c      	bne.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40010400 	.word	0x40010400
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40001800 	.word	0x40001800

080056a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e042      	b.n	8005738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fc f965 	bl	8001994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2224      	movs	r2, #36	; 0x24
 80056ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fb4e 	bl	8005d84 <UART_SetConfig>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e022      	b.n	8005738 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f001 f8f2 	bl	80068e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800570e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800571e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 f979 	bl	8006a28 <UART_CheckIdleState>
 8005736:	4603      	mov	r3, r0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005756:	2b20      	cmp	r3, #32
 8005758:	f040 8083 	bne.w	8005862 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_UART_Transmit+0x28>
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e07b      	b.n	8005864 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_UART_Transmit+0x3a>
 8005776:	2302      	movs	r3, #2
 8005778:	e074      	b.n	8005864 <HAL_UART_Transmit+0x124>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2221      	movs	r2, #33	; 0x21
 800578e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005792:	f7fc fa8b 	bl	8001cac <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	88fa      	ldrh	r2, [r7, #6]
 80057a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b0:	d108      	bne.n	80057c4 <HAL_UART_Transmit+0x84>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	e003      	b.n	80057cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80057d4:	e02c      	b.n	8005830 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f001 f969 	bl	8006ab8 <UART_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e039      	b.n	8005864 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005804:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	3302      	adds	r3, #2
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	e007      	b.n	800581e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	781a      	ldrb	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	3301      	adds	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1cc      	bne.n	80057d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2200      	movs	r2, #0
 8005844:	2140      	movs	r1, #64	; 0x40
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f001 f936 	bl	8006ab8 <UART_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e006      	b.n	8005864 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e000      	b.n	8005864 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	4613      	mov	r3, r2
 8005878:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005880:	2b20      	cmp	r3, #32
 8005882:	f040 80bc 	bne.w	80059fe <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_UART_Receive_IT+0x26>
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0b4      	b.n	8005a00 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_UART_Receive_IT+0x38>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e0ad      	b.n	8005a00 <HAL_UART_Receive_IT+0x194>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d0:	d10e      	bne.n	80058f0 <HAL_UART_Receive_IT+0x84>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d105      	bne.n	80058e6 <HAL_UART_Receive_IT+0x7a>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058e4:	e02d      	b.n	8005942 <HAL_UART_Receive_IT+0xd6>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	22ff      	movs	r2, #255	; 0xff
 80058ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058ee:	e028      	b.n	8005942 <HAL_UART_Receive_IT+0xd6>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10d      	bne.n	8005914 <HAL_UART_Receive_IT+0xa8>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <HAL_UART_Receive_IT+0x9e>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	22ff      	movs	r2, #255	; 0xff
 8005904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005908:	e01b      	b.n	8005942 <HAL_UART_Receive_IT+0xd6>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	227f      	movs	r2, #127	; 0x7f
 800590e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005912:	e016      	b.n	8005942 <HAL_UART_Receive_IT+0xd6>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800591c:	d10d      	bne.n	800593a <HAL_UART_Receive_IT+0xce>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d104      	bne.n	8005930 <HAL_UART_Receive_IT+0xc4>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	227f      	movs	r2, #127	; 0x7f
 800592a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800592e:	e008      	b.n	8005942 <HAL_UART_Receive_IT+0xd6>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	223f      	movs	r2, #63	; 0x3f
 8005934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005938:	e003      	b.n	8005942 <HAL_UART_Receive_IT+0xd6>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2222      	movs	r2, #34	; 0x22
 800594e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800596a:	d12a      	bne.n	80059c2 <HAL_UART_Receive_IT+0x156>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	429a      	cmp	r2, r3
 8005976:	d324      	bcc.n	80059c2 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005980:	d107      	bne.n	8005992 <HAL_UART_Receive_IT+0x126>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <HAL_UART_Receive_IT+0x1a0>)
 800598e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005990:	e002      	b.n	8005998 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <HAL_UART_Receive_IT+0x1a4>)
 8005996:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ae:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	e01b      	b.n	80059fa <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ca:	d107      	bne.n	80059dc <HAL_UART_Receive_IT+0x170>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d103      	bne.n	80059dc <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a0f      	ldr	r2, [pc, #60]	; (8005a14 <HAL_UART_Receive_IT+0x1a8>)
 80059d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80059da:	e002      	b.n	80059e2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a0e      	ldr	r2, [pc, #56]	; (8005a18 <HAL_UART_Receive_IT+0x1ac>)
 80059e0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80059f8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
  }
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	08006ebd 	.word	0x08006ebd
 8005a10:	08006db5 	.word	0x08006db5
 8005a14:	08006d0b 	.word	0x08006d0b
 8005a18:	08006c61 	.word	0x08006c61

08005a1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a42:	4013      	ands	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d118      	bne.n	8005a7e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d013      	beq.n	8005a7e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8145 	beq.w	8005cfe <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3
      }
      return;
 8005a7c:	e13f      	b.n	8005cfe <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 80e8 	beq.w	8005c56 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4ba1      	ldr	r3, [pc, #644]	; (8005d10 <HAL_UART_IRQHandler+0x2f4>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4ba0      	ldr	r3, [pc, #640]	; (8005d14 <HAL_UART_IRQHandler+0x2f8>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80dd 	beq.w	8005c56 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d010      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xac>
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	f043 0201 	orr.w	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d010      	beq.n	8005af4 <HAL_UART_IRQHandler+0xd8>
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f043 0204 	orr.w	r2, r3, #4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d010      	beq.n	8005b20 <HAL_UART_IRQHandler+0x104>
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00b      	beq.n	8005b20 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	f043 0202 	orr.w	r2, r3, #2
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d015      	beq.n	8005b56 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4b76      	ldr	r3, [pc, #472]	; (8005d10 <HAL_UART_IRQHandler+0x2f4>)
 8005b38:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2208      	movs	r2, #8
 8005b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	f043 0208 	orr.w	r2, r3, #8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d011      	beq.n	8005b84 <HAL_UART_IRQHandler+0x168>
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00c      	beq.n	8005b84 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80b9 	beq.w	8005d02 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d011      	beq.n	8005bbe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d104      	bne.n	8005bae <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d004      	beq.n	8005bde <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d031      	beq.n	8005c42 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 ffea 	bl	8006bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d123      	bne.n	8005c3a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c00:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d013      	beq.n	8005c32 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c0e:	4a42      	ldr	r2, [pc, #264]	; (8005d18 <HAL_UART_IRQHandler+0x2fc>)
 8005c10:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fc f992 	bl	8001f40 <HAL_DMA_Abort_IT>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d017      	beq.n	8005c52 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	e00f      	b.n	8005c52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f886 	bl	8005d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	e00b      	b.n	8005c52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f882 	bl	8005d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	e007      	b.n	8005c52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f87e 	bl	8005d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005c50:	e057      	b.n	8005d02 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c52:	bf00      	nop
    return;
 8005c54:	e055      	b.n	8005d02 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <HAL_UART_IRQHandler+0x260>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d008      	beq.n	8005c7c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 f9a5 	bl	8006fc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c7a:	e045      	b.n	8005d08 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d012      	beq.n	8005cac <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d031      	beq.n	8005d06 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
    }
    return;
 8005caa:	e02c      	b.n	8005d06 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x2ac>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 ffb3 	bl	8006c2c <UART_EndTransmit_IT>
    return;
 8005cc6:	e01f      	b.n	8005d08 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x2c8>
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 f985 	bl	8006fec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ce2:	e011      	b.n	8005d08 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00c      	beq.n	8005d08 <HAL_UART_IRQHandler+0x2ec>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	da09      	bge.n	8005d08 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f001 f96f 	bl	8006fd8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cfa:	bf00      	nop
 8005cfc:	e004      	b.n	8005d08 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005cfe:	bf00      	nop
 8005d00:	e002      	b.n	8005d08 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005d02:	bf00      	nop
 8005d04:	e000      	b.n	8005d08 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005d06:	bf00      	nop
  }
}
 8005d08:	3720      	adds	r7, #32
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	10000001 	.word	0x10000001
 8005d14:	04000120 	.word	0x04000120
 8005d18:	08006c01 	.word	0x08006c01

08005d1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d66:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d6e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4313      	orrs	r3, r2
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d84:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d88:	b08e      	sub	sp, #56	; 0x38
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005db2:	4313      	orrs	r3, r2
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4bc1      	ldr	r3, [pc, #772]	; (80060c4 <UART_SetConfig+0x340>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4ab7      	ldr	r2, [pc, #732]	; (80060c8 <UART_SetConfig+0x344>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d004      	beq.n	8005dfa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df6:	4313      	orrs	r3, r2
 8005df8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	4bb2      	ldr	r3, [pc, #712]	; (80060cc <UART_SetConfig+0x348>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	f023 010f 	bic.w	r1, r3, #15
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4aa9      	ldr	r2, [pc, #676]	; (80060d0 <UART_SetConfig+0x34c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d177      	bne.n	8005f1e <UART_SetConfig+0x19a>
 8005e2e:	4ba9      	ldr	r3, [pc, #676]	; (80060d4 <UART_SetConfig+0x350>)
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e36:	2b28      	cmp	r3, #40	; 0x28
 8005e38:	d86c      	bhi.n	8005f14 <UART_SetConfig+0x190>
 8005e3a:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <UART_SetConfig+0xbc>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005ee5 	.word	0x08005ee5
 8005e44:	08005f15 	.word	0x08005f15
 8005e48:	08005f15 	.word	0x08005f15
 8005e4c:	08005f15 	.word	0x08005f15
 8005e50:	08005f15 	.word	0x08005f15
 8005e54:	08005f15 	.word	0x08005f15
 8005e58:	08005f15 	.word	0x08005f15
 8005e5c:	08005f15 	.word	0x08005f15
 8005e60:	08005eed 	.word	0x08005eed
 8005e64:	08005f15 	.word	0x08005f15
 8005e68:	08005f15 	.word	0x08005f15
 8005e6c:	08005f15 	.word	0x08005f15
 8005e70:	08005f15 	.word	0x08005f15
 8005e74:	08005f15 	.word	0x08005f15
 8005e78:	08005f15 	.word	0x08005f15
 8005e7c:	08005f15 	.word	0x08005f15
 8005e80:	08005ef5 	.word	0x08005ef5
 8005e84:	08005f15 	.word	0x08005f15
 8005e88:	08005f15 	.word	0x08005f15
 8005e8c:	08005f15 	.word	0x08005f15
 8005e90:	08005f15 	.word	0x08005f15
 8005e94:	08005f15 	.word	0x08005f15
 8005e98:	08005f15 	.word	0x08005f15
 8005e9c:	08005f15 	.word	0x08005f15
 8005ea0:	08005efd 	.word	0x08005efd
 8005ea4:	08005f15 	.word	0x08005f15
 8005ea8:	08005f15 	.word	0x08005f15
 8005eac:	08005f15 	.word	0x08005f15
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005f15 	.word	0x08005f15
 8005eb8:	08005f15 	.word	0x08005f15
 8005ebc:	08005f15 	.word	0x08005f15
 8005ec0:	08005f05 	.word	0x08005f05
 8005ec4:	08005f15 	.word	0x08005f15
 8005ec8:	08005f15 	.word	0x08005f15
 8005ecc:	08005f15 	.word	0x08005f15
 8005ed0:	08005f15 	.word	0x08005f15
 8005ed4:	08005f15 	.word	0x08005f15
 8005ed8:	08005f15 	.word	0x08005f15
 8005edc:	08005f15 	.word	0x08005f15
 8005ee0:	08005f0d 	.word	0x08005f0d
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eea:	e233      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005eec:	2304      	movs	r3, #4
 8005eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef2:	e22f      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005ef4:	2308      	movs	r3, #8
 8005ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efa:	e22b      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005efc:	2310      	movs	r3, #16
 8005efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f02:	e227      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f04:	2320      	movs	r3, #32
 8005f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0a:	e223      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f0c:	2340      	movs	r3, #64	; 0x40
 8005f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f12:	e21f      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1a:	bf00      	nop
 8005f1c:	e21a      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6d      	ldr	r2, [pc, #436]	; (80060d8 <UART_SetConfig+0x354>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d132      	bne.n	8005f8e <UART_SetConfig+0x20a>
 8005f28:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <UART_SetConfig+0x350>)
 8005f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	2b05      	cmp	r3, #5
 8005f32:	d827      	bhi.n	8005f84 <UART_SetConfig+0x200>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <UART_SetConfig+0x1b8>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	08005f65 	.word	0x08005f65
 8005f48:	08005f6d 	.word	0x08005f6d
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	2300      	movs	r3, #0
 8005f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f5a:	e1fb      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f62:	e1f7      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f64:	2308      	movs	r3, #8
 8005f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6a:	e1f3      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f72:	e1ef      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f74:	2320      	movs	r3, #32
 8005f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7a:	e1eb      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f7c:	2340      	movs	r3, #64	; 0x40
 8005f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f82:	e1e7      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f84:	2380      	movs	r3, #128	; 0x80
 8005f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8a:	bf00      	nop
 8005f8c:	e1e2      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a52      	ldr	r2, [pc, #328]	; (80060dc <UART_SetConfig+0x358>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d132      	bne.n	8005ffe <UART_SetConfig+0x27a>
 8005f98:	4b4e      	ldr	r3, [pc, #312]	; (80060d4 <UART_SetConfig+0x350>)
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d827      	bhi.n	8005ff4 <UART_SetConfig+0x270>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <UART_SetConfig+0x228>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fc5 	.word	0x08005fc5
 8005fb0:	08005fcd 	.word	0x08005fcd
 8005fb4:	08005fd5 	.word	0x08005fd5
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fca:	e1c3      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd2:	e1bf      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fda:	e1bb      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fe2:	e1b7      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fea:	e1b3      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005fec:	2340      	movs	r3, #64	; 0x40
 8005fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff2:	e1af      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffa:	bf00      	nop
 8005ffc:	e1aa      	b.n	8006354 <UART_SetConfig+0x5d0>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a37      	ldr	r2, [pc, #220]	; (80060e0 <UART_SetConfig+0x35c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d132      	bne.n	800606e <UART_SetConfig+0x2ea>
 8006008:	4b32      	ldr	r3, [pc, #200]	; (80060d4 <UART_SetConfig+0x350>)
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	2b05      	cmp	r3, #5
 8006012:	d827      	bhi.n	8006064 <UART_SetConfig+0x2e0>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x298>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006035 	.word	0x08006035
 8006020:	0800603d 	.word	0x0800603d
 8006024:	08006045 	.word	0x08006045
 8006028:	0800604d 	.word	0x0800604d
 800602c:	08006055 	.word	0x08006055
 8006030:	0800605d 	.word	0x0800605d
 8006034:	2300      	movs	r3, #0
 8006036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603a:	e18b      	b.n	8006354 <UART_SetConfig+0x5d0>
 800603c:	2304      	movs	r3, #4
 800603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006042:	e187      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006044:	2308      	movs	r3, #8
 8006046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604a:	e183      	b.n	8006354 <UART_SetConfig+0x5d0>
 800604c:	2310      	movs	r3, #16
 800604e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006052:	e17f      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006054:	2320      	movs	r3, #32
 8006056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605a:	e17b      	b.n	8006354 <UART_SetConfig+0x5d0>
 800605c:	2340      	movs	r3, #64	; 0x40
 800605e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006062:	e177      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606a:	bf00      	nop
 800606c:	e172      	b.n	8006354 <UART_SetConfig+0x5d0>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <UART_SetConfig+0x360>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d144      	bne.n	8006102 <UART_SetConfig+0x37e>
 8006078:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <UART_SetConfig+0x350>)
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	2b05      	cmp	r3, #5
 8006082:	d839      	bhi.n	80060f8 <UART_SetConfig+0x374>
 8006084:	a201      	add	r2, pc, #4	; (adr r2, 800608c <UART_SetConfig+0x308>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	080060a5 	.word	0x080060a5
 8006090:	080060ad 	.word	0x080060ad
 8006094:	080060b5 	.word	0x080060b5
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060e9 	.word	0x080060e9
 80060a0:	080060f1 	.word	0x080060f1
 80060a4:	2300      	movs	r3, #0
 80060a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060aa:	e153      	b.n	8006354 <UART_SetConfig+0x5d0>
 80060ac:	2304      	movs	r3, #4
 80060ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060b2:	e14f      	b.n	8006354 <UART_SetConfig+0x5d0>
 80060b4:	2308      	movs	r3, #8
 80060b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ba:	e14b      	b.n	8006354 <UART_SetConfig+0x5d0>
 80060bc:	2310      	movs	r3, #16
 80060be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060c2:	e147      	b.n	8006354 <UART_SetConfig+0x5d0>
 80060c4:	cfff69f3 	.word	0xcfff69f3
 80060c8:	58000c00 	.word	0x58000c00
 80060cc:	11fff4ff 	.word	0x11fff4ff
 80060d0:	40011000 	.word	0x40011000
 80060d4:	58024400 	.word	0x58024400
 80060d8:	40004400 	.word	0x40004400
 80060dc:	40004800 	.word	0x40004800
 80060e0:	40004c00 	.word	0x40004c00
 80060e4:	40005000 	.word	0x40005000
 80060e8:	2320      	movs	r3, #32
 80060ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ee:	e131      	b.n	8006354 <UART_SetConfig+0x5d0>
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f6:	e12d      	b.n	8006354 <UART_SetConfig+0x5d0>
 80060f8:	2380      	movs	r3, #128	; 0x80
 80060fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fe:	bf00      	nop
 8006100:	e128      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4ab6      	ldr	r2, [pc, #728]	; (80063e0 <UART_SetConfig+0x65c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d178      	bne.n	80061fe <UART_SetConfig+0x47a>
 800610c:	4bb5      	ldr	r3, [pc, #724]	; (80063e4 <UART_SetConfig+0x660>)
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006114:	2b28      	cmp	r3, #40	; 0x28
 8006116:	d86d      	bhi.n	80061f4 <UART_SetConfig+0x470>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0x39c>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	080061c5 	.word	0x080061c5
 8006124:	080061f5 	.word	0x080061f5
 8006128:	080061f5 	.word	0x080061f5
 800612c:	080061f5 	.word	0x080061f5
 8006130:	080061f5 	.word	0x080061f5
 8006134:	080061f5 	.word	0x080061f5
 8006138:	080061f5 	.word	0x080061f5
 800613c:	080061f5 	.word	0x080061f5
 8006140:	080061cd 	.word	0x080061cd
 8006144:	080061f5 	.word	0x080061f5
 8006148:	080061f5 	.word	0x080061f5
 800614c:	080061f5 	.word	0x080061f5
 8006150:	080061f5 	.word	0x080061f5
 8006154:	080061f5 	.word	0x080061f5
 8006158:	080061f5 	.word	0x080061f5
 800615c:	080061f5 	.word	0x080061f5
 8006160:	080061d5 	.word	0x080061d5
 8006164:	080061f5 	.word	0x080061f5
 8006168:	080061f5 	.word	0x080061f5
 800616c:	080061f5 	.word	0x080061f5
 8006170:	080061f5 	.word	0x080061f5
 8006174:	080061f5 	.word	0x080061f5
 8006178:	080061f5 	.word	0x080061f5
 800617c:	080061f5 	.word	0x080061f5
 8006180:	080061dd 	.word	0x080061dd
 8006184:	080061f5 	.word	0x080061f5
 8006188:	080061f5 	.word	0x080061f5
 800618c:	080061f5 	.word	0x080061f5
 8006190:	080061f5 	.word	0x080061f5
 8006194:	080061f5 	.word	0x080061f5
 8006198:	080061f5 	.word	0x080061f5
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	080061e5 	.word	0x080061e5
 80061a4:	080061f5 	.word	0x080061f5
 80061a8:	080061f5 	.word	0x080061f5
 80061ac:	080061f5 	.word	0x080061f5
 80061b0:	080061f5 	.word	0x080061f5
 80061b4:	080061f5 	.word	0x080061f5
 80061b8:	080061f5 	.word	0x080061f5
 80061bc:	080061f5 	.word	0x080061f5
 80061c0:	080061ed 	.word	0x080061ed
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ca:	e0c3      	b.n	8006354 <UART_SetConfig+0x5d0>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d2:	e0bf      	b.n	8006354 <UART_SetConfig+0x5d0>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061da:	e0bb      	b.n	8006354 <UART_SetConfig+0x5d0>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e2:	e0b7      	b.n	8006354 <UART_SetConfig+0x5d0>
 80061e4:	2320      	movs	r3, #32
 80061e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ea:	e0b3      	b.n	8006354 <UART_SetConfig+0x5d0>
 80061ec:	2340      	movs	r3, #64	; 0x40
 80061ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f2:	e0af      	b.n	8006354 <UART_SetConfig+0x5d0>
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061fa:	bf00      	nop
 80061fc:	e0aa      	b.n	8006354 <UART_SetConfig+0x5d0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a79      	ldr	r2, [pc, #484]	; (80063e8 <UART_SetConfig+0x664>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d132      	bne.n	800626e <UART_SetConfig+0x4ea>
 8006208:	4b76      	ldr	r3, [pc, #472]	; (80063e4 <UART_SetConfig+0x660>)
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	2b05      	cmp	r3, #5
 8006212:	d827      	bhi.n	8006264 <UART_SetConfig+0x4e0>
 8006214:	a201      	add	r2, pc, #4	; (adr r2, 800621c <UART_SetConfig+0x498>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	08006235 	.word	0x08006235
 8006220:	0800623d 	.word	0x0800623d
 8006224:	08006245 	.word	0x08006245
 8006228:	0800624d 	.word	0x0800624d
 800622c:	08006255 	.word	0x08006255
 8006230:	0800625d 	.word	0x0800625d
 8006234:	2300      	movs	r3, #0
 8006236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800623a:	e08b      	b.n	8006354 <UART_SetConfig+0x5d0>
 800623c:	2304      	movs	r3, #4
 800623e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006242:	e087      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006244:	2308      	movs	r3, #8
 8006246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624a:	e083      	b.n	8006354 <UART_SetConfig+0x5d0>
 800624c:	2310      	movs	r3, #16
 800624e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006252:	e07f      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006254:	2320      	movs	r3, #32
 8006256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625a:	e07b      	b.n	8006354 <UART_SetConfig+0x5d0>
 800625c:	2340      	movs	r3, #64	; 0x40
 800625e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006262:	e077      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626a:	bf00      	nop
 800626c:	e072      	b.n	8006354 <UART_SetConfig+0x5d0>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a5e      	ldr	r2, [pc, #376]	; (80063ec <UART_SetConfig+0x668>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d132      	bne.n	80062de <UART_SetConfig+0x55a>
 8006278:	4b5a      	ldr	r3, [pc, #360]	; (80063e4 <UART_SetConfig+0x660>)
 800627a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	2b05      	cmp	r3, #5
 8006282:	d827      	bhi.n	80062d4 <UART_SetConfig+0x550>
 8006284:	a201      	add	r2, pc, #4	; (adr r2, 800628c <UART_SetConfig+0x508>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	080062a5 	.word	0x080062a5
 8006290:	080062ad 	.word	0x080062ad
 8006294:	080062b5 	.word	0x080062b5
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062c5 	.word	0x080062c5
 80062a0:	080062cd 	.word	0x080062cd
 80062a4:	2300      	movs	r3, #0
 80062a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062aa:	e053      	b.n	8006354 <UART_SetConfig+0x5d0>
 80062ac:	2304      	movs	r3, #4
 80062ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b2:	e04f      	b.n	8006354 <UART_SetConfig+0x5d0>
 80062b4:	2308      	movs	r3, #8
 80062b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ba:	e04b      	b.n	8006354 <UART_SetConfig+0x5d0>
 80062bc:	2310      	movs	r3, #16
 80062be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c2:	e047      	b.n	8006354 <UART_SetConfig+0x5d0>
 80062c4:	2320      	movs	r3, #32
 80062c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ca:	e043      	b.n	8006354 <UART_SetConfig+0x5d0>
 80062cc:	2340      	movs	r3, #64	; 0x40
 80062ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d2:	e03f      	b.n	8006354 <UART_SetConfig+0x5d0>
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062da:	bf00      	nop
 80062dc:	e03a      	b.n	8006354 <UART_SetConfig+0x5d0>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a43      	ldr	r2, [pc, #268]	; (80063f0 <UART_SetConfig+0x66c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d132      	bne.n	800634e <UART_SetConfig+0x5ca>
 80062e8:	4b3e      	ldr	r3, [pc, #248]	; (80063e4 <UART_SetConfig+0x660>)
 80062ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	2b05      	cmp	r3, #5
 80062f2:	d827      	bhi.n	8006344 <UART_SetConfig+0x5c0>
 80062f4:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <UART_SetConfig+0x578>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	08006315 	.word	0x08006315
 8006300:	0800631d 	.word	0x0800631d
 8006304:	08006325 	.word	0x08006325
 8006308:	0800632d 	.word	0x0800632d
 800630c:	08006335 	.word	0x08006335
 8006310:	0800633d 	.word	0x0800633d
 8006314:	2302      	movs	r3, #2
 8006316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631a:	e01b      	b.n	8006354 <UART_SetConfig+0x5d0>
 800631c:	2304      	movs	r3, #4
 800631e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006322:	e017      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006324:	2308      	movs	r3, #8
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632a:	e013      	b.n	8006354 <UART_SetConfig+0x5d0>
 800632c:	2310      	movs	r3, #16
 800632e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006332:	e00f      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006334:	2320      	movs	r3, #32
 8006336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800633a:	e00b      	b.n	8006354 <UART_SetConfig+0x5d0>
 800633c:	2340      	movs	r3, #64	; 0x40
 800633e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006342:	e007      	b.n	8006354 <UART_SetConfig+0x5d0>
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800634a:	bf00      	nop
 800634c:	e002      	b.n	8006354 <UART_SetConfig+0x5d0>
 800634e:	2380      	movs	r3, #128	; 0x80
 8006350:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <UART_SetConfig+0x66c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	f040 80b8 	bne.w	80064d0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006360:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006364:	2b08      	cmp	r3, #8
 8006366:	d019      	beq.n	800639c <UART_SetConfig+0x618>
 8006368:	2b08      	cmp	r3, #8
 800636a:	dc04      	bgt.n	8006376 <UART_SetConfig+0x5f2>
 800636c:	2b02      	cmp	r3, #2
 800636e:	d009      	beq.n	8006384 <UART_SetConfig+0x600>
 8006370:	2b04      	cmp	r3, #4
 8006372:	d00b      	beq.n	800638c <UART_SetConfig+0x608>
 8006374:	e042      	b.n	80063fc <UART_SetConfig+0x678>
 8006376:	2b20      	cmp	r3, #32
 8006378:	d02b      	beq.n	80063d2 <UART_SetConfig+0x64e>
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d02c      	beq.n	80063d8 <UART_SetConfig+0x654>
 800637e:	2b10      	cmp	r3, #16
 8006380:	d014      	beq.n	80063ac <UART_SetConfig+0x628>
 8006382:	e03b      	b.n	80063fc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006384:	f7fe fa64 	bl	8004850 <HAL_RCCEx_GetD3PCLK1Freq>
 8006388:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800638a:	e03d      	b.n	8006408 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800638c:	f107 0314 	add.w	r3, r7, #20
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fa73 	bl	800487c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800639a:	e035      	b.n	8006408 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800639c:	f107 0308 	add.w	r3, r7, #8
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe fbb7 	bl	8004b14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063aa:	e02d      	b.n	8006408 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ac:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <UART_SetConfig+0x660>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <UART_SetConfig+0x660>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	08db      	lsrs	r3, r3, #3
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	4a0c      	ldr	r2, [pc, #48]	; (80063f4 <UART_SetConfig+0x670>)
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063ca:	e01d      	b.n	8006408 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <UART_SetConfig+0x670>)
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063d0:	e01a      	b.n	8006408 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063d2:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <UART_SetConfig+0x674>)
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063d6:	e017      	b.n	8006408 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063de:	e013      	b.n	8006408 <UART_SetConfig+0x684>
 80063e0:	40011400 	.word	0x40011400
 80063e4:	58024400 	.word	0x58024400
 80063e8:	40007800 	.word	0x40007800
 80063ec:	40007c00 	.word	0x40007c00
 80063f0:	58000c00 	.word	0x58000c00
 80063f4:	03d09000 	.word	0x03d09000
 80063f8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006406:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 824d 	beq.w	80068aa <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	4aad      	ldr	r2, [pc, #692]	; (80066cc <UART_SetConfig+0x948>)
 8006416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800641a:	461a      	mov	r2, r3
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006422:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	4613      	mov	r3, r2
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	4413      	add	r3, r2
 800642e:	6a3a      	ldr	r2, [r7, #32]
 8006430:	429a      	cmp	r2, r3
 8006432:	d305      	bcc.n	8006440 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	429a      	cmp	r2, r3
 800643e:	d903      	bls.n	8006448 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006446:	e230      	b.n	80068aa <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	4618      	mov	r0, r3
 800644c:	f04f 0100 	mov.w	r1, #0
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	4a9d      	ldr	r2, [pc, #628]	; (80066cc <UART_SetConfig+0x948>)
 8006456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f04f 0400 	mov.w	r4, #0
 8006460:	461a      	mov	r2, r3
 8006462:	4623      	mov	r3, r4
 8006464:	f7f9 fff4 	bl	8000450 <__aeabi_uldivmod>
 8006468:	4603      	mov	r3, r0
 800646a:	460c      	mov	r4, r1
 800646c:	4619      	mov	r1, r3
 800646e:	4622      	mov	r2, r4
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	f04f 0400 	mov.w	r4, #0
 8006478:	0214      	lsls	r4, r2, #8
 800647a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800647e:	020b      	lsls	r3, r1, #8
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6852      	ldr	r2, [r2, #4]
 8006484:	0852      	lsrs	r2, r2, #1
 8006486:	4611      	mov	r1, r2
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	eb13 0b01 	adds.w	fp, r3, r1
 8006490:	eb44 0c02 	adc.w	ip, r4, r2
 8006494:	4658      	mov	r0, fp
 8006496:	4661      	mov	r1, ip
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f04f 0400 	mov.w	r4, #0
 80064a0:	461a      	mov	r2, r3
 80064a2:	4623      	mov	r3, r4
 80064a4:	f7f9 ffd4 	bl	8000450 <__aeabi_uldivmod>
 80064a8:	4603      	mov	r3, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b4:	d308      	bcc.n	80064c8 <UART_SetConfig+0x744>
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064bc:	d204      	bcs.n	80064c8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064c4:	60da      	str	r2, [r3, #12]
 80064c6:	e1f0      	b.n	80068aa <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80064ce:	e1ec      	b.n	80068aa <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d8:	f040 8100 	bne.w	80066dc <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80064dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	f200 80b7 	bhi.w	8006654 <UART_SetConfig+0x8d0>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <UART_SetConfig+0x768>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	080065f1 	.word	0x080065f1
 80064f0:	080065f9 	.word	0x080065f9
 80064f4:	08006655 	.word	0x08006655
 80064f8:	08006655 	.word	0x08006655
 80064fc:	08006601 	.word	0x08006601
 8006500:	08006655 	.word	0x08006655
 8006504:	08006655 	.word	0x08006655
 8006508:	08006655 	.word	0x08006655
 800650c:	08006611 	.word	0x08006611
 8006510:	08006655 	.word	0x08006655
 8006514:	08006655 	.word	0x08006655
 8006518:	08006655 	.word	0x08006655
 800651c:	08006655 	.word	0x08006655
 8006520:	08006655 	.word	0x08006655
 8006524:	08006655 	.word	0x08006655
 8006528:	08006655 	.word	0x08006655
 800652c:	08006621 	.word	0x08006621
 8006530:	08006655 	.word	0x08006655
 8006534:	08006655 	.word	0x08006655
 8006538:	08006655 	.word	0x08006655
 800653c:	08006655 	.word	0x08006655
 8006540:	08006655 	.word	0x08006655
 8006544:	08006655 	.word	0x08006655
 8006548:	08006655 	.word	0x08006655
 800654c:	08006655 	.word	0x08006655
 8006550:	08006655 	.word	0x08006655
 8006554:	08006655 	.word	0x08006655
 8006558:	08006655 	.word	0x08006655
 800655c:	08006655 	.word	0x08006655
 8006560:	08006655 	.word	0x08006655
 8006564:	08006655 	.word	0x08006655
 8006568:	08006655 	.word	0x08006655
 800656c:	08006647 	.word	0x08006647
 8006570:	08006655 	.word	0x08006655
 8006574:	08006655 	.word	0x08006655
 8006578:	08006655 	.word	0x08006655
 800657c:	08006655 	.word	0x08006655
 8006580:	08006655 	.word	0x08006655
 8006584:	08006655 	.word	0x08006655
 8006588:	08006655 	.word	0x08006655
 800658c:	08006655 	.word	0x08006655
 8006590:	08006655 	.word	0x08006655
 8006594:	08006655 	.word	0x08006655
 8006598:	08006655 	.word	0x08006655
 800659c:	08006655 	.word	0x08006655
 80065a0:	08006655 	.word	0x08006655
 80065a4:	08006655 	.word	0x08006655
 80065a8:	08006655 	.word	0x08006655
 80065ac:	08006655 	.word	0x08006655
 80065b0:	08006655 	.word	0x08006655
 80065b4:	08006655 	.word	0x08006655
 80065b8:	08006655 	.word	0x08006655
 80065bc:	08006655 	.word	0x08006655
 80065c0:	08006655 	.word	0x08006655
 80065c4:	08006655 	.word	0x08006655
 80065c8:	08006655 	.word	0x08006655
 80065cc:	08006655 	.word	0x08006655
 80065d0:	08006655 	.word	0x08006655
 80065d4:	08006655 	.word	0x08006655
 80065d8:	08006655 	.word	0x08006655
 80065dc:	08006655 	.word	0x08006655
 80065e0:	08006655 	.word	0x08006655
 80065e4:	08006655 	.word	0x08006655
 80065e8:	08006655 	.word	0x08006655
 80065ec:	0800664d 	.word	0x0800664d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7fd fa14 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 80065f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065f6:	e033      	b.n	8006660 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f8:	f7fd fa26 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 80065fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065fe:	e02f      	b.n	8006660 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006600:	f107 0314 	add.w	r3, r7, #20
 8006604:	4618      	mov	r0, r3
 8006606:	f7fe f939 	bl	800487c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800660e:	e027      	b.n	8006660 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006610:	f107 0308 	add.w	r3, r7, #8
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe fa7d 	bl	8004b14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800661e:	e01f      	b.n	8006660 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <UART_SetConfig+0x94c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800662c:	4b28      	ldr	r3, [pc, #160]	; (80066d0 <UART_SetConfig+0x94c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	4a27      	ldr	r2, [pc, #156]	; (80066d4 <UART_SetConfig+0x950>)
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800663e:	e00f      	b.n	8006660 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006640:	4b24      	ldr	r3, [pc, #144]	; (80066d4 <UART_SetConfig+0x950>)
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006644:	e00c      	b.n	8006660 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006646:	4b24      	ldr	r3, [pc, #144]	; (80066d8 <UART_SetConfig+0x954>)
 8006648:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800664a:	e009      	b.n	8006660 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006652:	e005      	b.n	8006660 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800665e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 8121 	beq.w	80068aa <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	4a17      	ldr	r2, [pc, #92]	; (80066cc <UART_SetConfig+0x948>)
 800666e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006672:	461a      	mov	r2, r3
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	fbb3 f3f2 	udiv	r3, r3, r2
 800667a:	005a      	lsls	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	441a      	add	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	b29b      	uxth	r3, r3
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	2b0f      	cmp	r3, #15
 8006694:	d916      	bls.n	80066c4 <UART_SetConfig+0x940>
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669c:	d212      	bcs.n	80066c4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f023 030f 	bic.w	r3, r3, #15
 80066a6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066b6:	4313      	orrs	r3, r2
 80066b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80066c0:	60da      	str	r2, [r3, #12]
 80066c2:	e0f2      	b.n	80068aa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80066ca:	e0ee      	b.n	80068aa <UART_SetConfig+0xb26>
 80066cc:	0800acd8 	.word	0x0800acd8
 80066d0:	58024400 	.word	0x58024400
 80066d4:	03d09000 	.word	0x03d09000
 80066d8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80066dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066e0:	2b40      	cmp	r3, #64	; 0x40
 80066e2:	f200 80b7 	bhi.w	8006854 <UART_SetConfig+0xad0>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0x968>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	080067f1 	.word	0x080067f1
 80066f0:	080067f9 	.word	0x080067f9
 80066f4:	08006855 	.word	0x08006855
 80066f8:	08006855 	.word	0x08006855
 80066fc:	08006801 	.word	0x08006801
 8006700:	08006855 	.word	0x08006855
 8006704:	08006855 	.word	0x08006855
 8006708:	08006855 	.word	0x08006855
 800670c:	08006811 	.word	0x08006811
 8006710:	08006855 	.word	0x08006855
 8006714:	08006855 	.word	0x08006855
 8006718:	08006855 	.word	0x08006855
 800671c:	08006855 	.word	0x08006855
 8006720:	08006855 	.word	0x08006855
 8006724:	08006855 	.word	0x08006855
 8006728:	08006855 	.word	0x08006855
 800672c:	08006821 	.word	0x08006821
 8006730:	08006855 	.word	0x08006855
 8006734:	08006855 	.word	0x08006855
 8006738:	08006855 	.word	0x08006855
 800673c:	08006855 	.word	0x08006855
 8006740:	08006855 	.word	0x08006855
 8006744:	08006855 	.word	0x08006855
 8006748:	08006855 	.word	0x08006855
 800674c:	08006855 	.word	0x08006855
 8006750:	08006855 	.word	0x08006855
 8006754:	08006855 	.word	0x08006855
 8006758:	08006855 	.word	0x08006855
 800675c:	08006855 	.word	0x08006855
 8006760:	08006855 	.word	0x08006855
 8006764:	08006855 	.word	0x08006855
 8006768:	08006855 	.word	0x08006855
 800676c:	08006847 	.word	0x08006847
 8006770:	08006855 	.word	0x08006855
 8006774:	08006855 	.word	0x08006855
 8006778:	08006855 	.word	0x08006855
 800677c:	08006855 	.word	0x08006855
 8006780:	08006855 	.word	0x08006855
 8006784:	08006855 	.word	0x08006855
 8006788:	08006855 	.word	0x08006855
 800678c:	08006855 	.word	0x08006855
 8006790:	08006855 	.word	0x08006855
 8006794:	08006855 	.word	0x08006855
 8006798:	08006855 	.word	0x08006855
 800679c:	08006855 	.word	0x08006855
 80067a0:	08006855 	.word	0x08006855
 80067a4:	08006855 	.word	0x08006855
 80067a8:	08006855 	.word	0x08006855
 80067ac:	08006855 	.word	0x08006855
 80067b0:	08006855 	.word	0x08006855
 80067b4:	08006855 	.word	0x08006855
 80067b8:	08006855 	.word	0x08006855
 80067bc:	08006855 	.word	0x08006855
 80067c0:	08006855 	.word	0x08006855
 80067c4:	08006855 	.word	0x08006855
 80067c8:	08006855 	.word	0x08006855
 80067cc:	08006855 	.word	0x08006855
 80067d0:	08006855 	.word	0x08006855
 80067d4:	08006855 	.word	0x08006855
 80067d8:	08006855 	.word	0x08006855
 80067dc:	08006855 	.word	0x08006855
 80067e0:	08006855 	.word	0x08006855
 80067e4:	08006855 	.word	0x08006855
 80067e8:	08006855 	.word	0x08006855
 80067ec:	0800684d 	.word	0x0800684d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fd f914 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 80067f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067f6:	e033      	b.n	8006860 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7fd f926 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 80067fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067fe:	e02f      	b.n	8006860 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006800:	f107 0314 	add.w	r3, r7, #20
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe f839 	bl	800487c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800680e:	e027      	b.n	8006860 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006810:	f107 0308 	add.w	r3, r7, #8
 8006814:	4618      	mov	r0, r3
 8006816:	f7fe f97d 	bl	8004b14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800681e:	e01f      	b.n	8006860 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006820:	4b2c      	ldr	r3, [pc, #176]	; (80068d4 <UART_SetConfig+0xb50>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800682c:	4b29      	ldr	r3, [pc, #164]	; (80068d4 <UART_SetConfig+0xb50>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	08db      	lsrs	r3, r3, #3
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	4a28      	ldr	r2, [pc, #160]	; (80068d8 <UART_SetConfig+0xb54>)
 8006838:	fa22 f303 	lsr.w	r3, r2, r3
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800683e:	e00f      	b.n	8006860 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006840:	4b25      	ldr	r3, [pc, #148]	; (80068d8 <UART_SetConfig+0xb54>)
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006844:	e00c      	b.n	8006860 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006846:	4b25      	ldr	r3, [pc, #148]	; (80068dc <UART_SetConfig+0xb58>)
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800684a:	e009      	b.n	8006860 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006852:	e005      	b.n	8006860 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800685e:	bf00      	nop
    }

    if (pclk != 0U)
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d021      	beq.n	80068aa <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	4a1d      	ldr	r2, [pc, #116]	; (80068e0 <UART_SetConfig+0xb5c>)
 800686c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006870:	461a      	mov	r2, r3
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	fbb3 f2f2 	udiv	r2, r3, r2
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	441a      	add	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	fbb2 f3f3 	udiv	r3, r2, r3
 8006888:	b29b      	uxth	r3, r3
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	2b0f      	cmp	r3, #15
 8006890:	d908      	bls.n	80068a4 <UART_SetConfig+0xb20>
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006898:	d204      	bcs.n	80068a4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	e002      	b.n	80068aa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80068c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3738      	adds	r7, #56	; 0x38
 80068ce:	46bd      	mov	sp, r7
 80068d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80068d4:	58024400 	.word	0x58024400
 80068d8:	03d09000 	.word	0x03d09000
 80068dc:	003d0900 	.word	0x003d0900
 80068e0:	0800acd8 	.word	0x0800acd8

080068e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01a      	beq.n	80069fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069e2:	d10a      	bne.n	80069fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00a      	beq.n	8006a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	605a      	str	r2, [r3, #4]
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a38:	f7fb f938 	bl	8001cac <HAL_GetTick>
 8006a3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d10e      	bne.n	8006a6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f82c 	bl	8006ab8 <UART_WaitOnFlagUntilTimeout>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e022      	b.n	8006ab0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d10e      	bne.n	8006a96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f816 	bl	8006ab8 <UART_WaitOnFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e00c      	b.n	8006ab0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac8:	e062      	b.n	8006b90 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d05e      	beq.n	8006b90 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad2:	f7fb f8eb 	bl	8001cac <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d302      	bcc.n	8006ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11d      	bne.n	8006b24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006af6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0201 	bic.w	r2, r2, #1
 8006b06:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e045      	b.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d02e      	beq.n	8006b90 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b40:	d126      	bne.n	8006b90 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e00f      	b.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	69da      	ldr	r2, [r3, #28]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	bf0c      	ite	eq
 8006ba0:	2301      	moveq	r3, #1
 8006ba2:	2300      	movne	r3, #0
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d08d      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6899      	ldr	r1, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <UART_EndRxTransfer+0x44>)
 8006bdc:	400b      	ands	r3, r1
 8006bde:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	effffffe 	.word	0xeffffffe

08006c00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff f890 	bl	8005d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c42:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff f862 	bl	8005d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c6e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c76:	2b22      	cmp	r3, #34	; 0x22
 8006c78:	d13b      	bne.n	8006cf2 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c82:	89bb      	ldrh	r3, [r7, #12]
 8006c84:	b2d9      	uxtb	r1, r3
 8006c86:	89fb      	ldrh	r3, [r7, #14]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8e:	400a      	ands	r2, r1
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d122      	bne.n	8006d02 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff f820 	bl	8005d30 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cf0:	e007      	b.n	8006d02 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699a      	ldr	r2, [r3, #24]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0208 	orr.w	r2, r2, #8
 8006d00:	619a      	str	r2, [r3, #24]
}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d18:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d20:	2b22      	cmp	r3, #34	; 0x22
 8006d22:	d13b      	bne.n	8006d9c <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d32:	89ba      	ldrh	r2, [r7, #12]
 8006d34:	89fb      	ldrh	r3, [r7, #14]
 8006d36:	4013      	ands	r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d42:	1c9a      	adds	r2, r3, #2
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d122      	bne.n	8006dac <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d74:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fe ffcb 	bl	8005d30 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d9a:	e007      	b.n	8006dac <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0208 	orr.w	r2, r2, #8
 8006daa:	619a      	str	r2, [r3, #24]
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dc2:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dca:	2b22      	cmp	r3, #34	; 0x22
 8006dcc:	d166      	bne.n	8006e9c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006dd4:	81fb      	strh	r3, [r7, #14]
 8006dd6:	e03d      	b.n	8006e54 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006de0:	893b      	ldrh	r3, [r7, #8]
 8006de2:	b2d9      	uxtb	r1, r3
 8006de4:	89bb      	ldrh	r3, [r7, #12]
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dec:	400a      	ands	r2, r1
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d119      	bne.n	8006e4e <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e28:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6899      	ldr	r1, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	4b1f      	ldr	r3, [pc, #124]	; (8006eb4 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8006e36:	400b      	ands	r3, r1
 8006e38:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7fe ff71 	bl	8005d30 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006e4e:	89fb      	ldrh	r3, [r7, #14]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	81fb      	strh	r3, [r7, #14]
 8006e54:	89fb      	ldrh	r3, [r7, #14]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1be      	bne.n	8006dd8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e60:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e62:	897b      	ldrh	r3, [r7, #10]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d021      	beq.n	8006eac <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e6e:	897a      	ldrh	r2, [r7, #10]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d21b      	bcs.n	8006eac <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006e82:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a0c      	ldr	r2, [pc, #48]	; (8006eb8 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006e88:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0220 	orr.w	r2, r2, #32
 8006e98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e9a:	e007      	b.n	8006eac <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0208 	orr.w	r2, r2, #8
 8006eaa:	619a      	str	r2, [r3, #24]
}
 8006eac:	bf00      	nop
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	effffffe 	.word	0xeffffffe
 8006eb8:	08006c61 	.word	0x08006c61

08006ebc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006eca:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed2:	2b22      	cmp	r3, #34	; 0x22
 8006ed4:	d166      	bne.n	8006fa4 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006edc:	82fb      	strh	r3, [r7, #22]
 8006ede:	e03d      	b.n	8006f5c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eec:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006eee:	8a3a      	ldrh	r2, [r7, #16]
 8006ef0:	8abb      	ldrh	r3, [r7, #20]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efe:	1c9a      	adds	r2, r3, #2
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d119      	bne.n	8006f56 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f30:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6899      	ldr	r1, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <UART_RxISR_16BIT_FIFOEN+0x100>)
 8006f3e:	400b      	ands	r3, r1
 8006f40:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fe feed 	bl	8005d30 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006f56:	8afb      	ldrh	r3, [r7, #22]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	82fb      	strh	r3, [r7, #22]
 8006f5c:	8afb      	ldrh	r3, [r7, #22]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1be      	bne.n	8006ee0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f68:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f6a:	8a7b      	ldrh	r3, [r7, #18]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d021      	beq.n	8006fb4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f76:	8a7a      	ldrh	r2, [r7, #18]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d21b      	bcs.n	8006fb4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006f8a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a0c      	ldr	r2, [pc, #48]	; (8006fc0 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006f90:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0220 	orr.w	r2, r2, #32
 8006fa0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fa2:	e007      	b.n	8006fb4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0208 	orr.w	r2, r2, #8
 8006fb2:	619a      	str	r2, [r3, #24]
}
 8006fb4:	bf00      	nop
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	effffffe 	.word	0xeffffffe
 8006fc0:	08006d0b 	.word	0x08006d0b

08006fc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_UARTEx_DisableFifoMode+0x16>
 8007012:	2302      	movs	r3, #2
 8007014:	e027      	b.n	8007066 <HAL_UARTEx_DisableFifoMode+0x66>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2224      	movs	r2, #36	; 0x24
 8007022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0201 	bic.w	r2, r2, #1
 800703c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007044:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007086:	2302      	movs	r3, #2
 8007088:	e02d      	b.n	80070e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2224      	movs	r2, #36	; 0x24
 8007096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f850 	bl	800716c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007102:	2302      	movs	r3, #2
 8007104:	e02d      	b.n	8007162 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2224      	movs	r2, #36	; 0x24
 8007112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0201 	bic.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f812 	bl	800716c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b089      	sub	sp, #36	; 0x24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007174:	4a2f      	ldr	r2, [pc, #188]	; (8007234 <UARTEx_SetNbDataToProcess+0xc8>)
 8007176:	f107 0314 	add.w	r3, r7, #20
 800717a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800717e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007182:	4a2d      	ldr	r2, [pc, #180]	; (8007238 <UARTEx_SetNbDataToProcess+0xcc>)
 8007184:	f107 030c 	add.w	r3, r7, #12
 8007188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800718c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007194:	2b00      	cmp	r3, #0
 8007196:	d108      	bne.n	80071aa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071a8:	e03d      	b.n	8007226 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071aa:	2310      	movs	r3, #16
 80071ac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071ae:	2310      	movs	r3, #16
 80071b0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	0e5b      	lsrs	r3, r3, #25
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	0f5b      	lsrs	r3, r3, #29
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80071d2:	7fbb      	ldrb	r3, [r7, #30]
 80071d4:	7f3a      	ldrb	r2, [r7, #28]
 80071d6:	f107 0120 	add.w	r1, r7, #32
 80071da:	440a      	add	r2, r1
 80071dc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80071e0:	fb02 f303 	mul.w	r3, r2, r3
 80071e4:	7f3a      	ldrb	r2, [r7, #28]
 80071e6:	f107 0120 	add.w	r1, r7, #32
 80071ea:	440a      	add	r2, r1
 80071ec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80071f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80071fc:	7ffb      	ldrb	r3, [r7, #31]
 80071fe:	7f7a      	ldrb	r2, [r7, #29]
 8007200:	f107 0120 	add.w	r1, r7, #32
 8007204:	440a      	add	r2, r1
 8007206:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800720a:	fb02 f303 	mul.w	r3, r2, r3
 800720e:	7f7a      	ldrb	r2, [r7, #29]
 8007210:	f107 0120 	add.w	r1, r7, #32
 8007214:	440a      	add	r2, r1
 8007216:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800721a:	fb93 f3f2 	sdiv	r3, r3, r2
 800721e:	b29a      	uxth	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007226:	bf00      	nop
 8007228:	3724      	adds	r7, #36	; 0x24
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	0800acb8 	.word	0x0800acb8
 8007238:	0800acc0 	.word	0x0800acc0

0800723c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800723c:	b084      	sub	sp, #16
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	f107 001c 	add.w	r0, r7, #28
 800724a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	2b01      	cmp	r3, #1
 8007252:	d120      	bne.n	8007296 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	4b25      	ldr	r3, [pc, #148]	; (80072fc <USB_CoreInit+0xc0>)
 8007266:	4013      	ands	r3, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa4c 	bl	8007728 <USB_CoreReset>
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]
 8007294:	e01a      	b.n	80072cc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa40 	bl	8007728 <USB_CoreReset>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	639a      	str	r2, [r3, #56]	; 0x38
 80072be:	e005      	b.n	80072cc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d10b      	bne.n	80072ea <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f043 0206 	orr.w	r2, r3, #6
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f043 0220 	orr.w	r2, r3, #32
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072f6:	b004      	add	sp, #16
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	ffbdffbf 	.word	0xffbdffbf

08007300 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f023 0201 	bic.w	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d106      	bne.n	800734e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	60da      	str	r2, [r3, #12]
 800734c:	e00b      	b.n	8007366 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d106      	bne.n	8007362 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	60da      	str	r2, [r3, #12]
 8007360:	e001      	b.n	8007366 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e003      	b.n	800736e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007366:	2032      	movs	r0, #50	; 0x32
 8007368:	f7fa fcac 	bl	8001cc4 <HAL_Delay>

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007378:	b084      	sub	sp, #16
 800737a:	b580      	push	{r7, lr}
 800737c:	b086      	sub	sp, #24
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	e009      	b.n	80073ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	3340      	adds	r3, #64	; 0x40
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	2200      	movs	r2, #0
 80073a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3301      	adds	r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b0e      	cmp	r3, #14
 80073b0:	d9f2      	bls.n	8007398 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11c      	bne.n	80073f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073c6:	f043 0302 	orr.w	r3, r3, #2
 80073ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e005      	b.n	80073fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007404:	461a      	mov	r2, r3
 8007406:	2300      	movs	r3, #0
 8007408:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007410:	4619      	mov	r1, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007418:	461a      	mov	r2, r3
 800741a:	680b      	ldr	r3, [r1, #0]
 800741c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	2b01      	cmp	r3, #1
 8007422:	d10c      	bne.n	800743e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800742a:	2100      	movs	r1, #0
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f949 	bl	80076c4 <USB_SetDevSpeed>
 8007432:	e008      	b.n	8007446 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007434:	2101      	movs	r1, #1
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f944 	bl	80076c4 <USB_SetDevSpeed>
 800743c:	e003      	b.n	8007446 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800743e:	2103      	movs	r1, #3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f93f 	bl	80076c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007446:	2110      	movs	r1, #16
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f8f3 	bl	8007634 <USB_FlushTxFifo>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f911 	bl	8007680 <USB_FlushRxFifo>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	461a      	mov	r2, r3
 8007470:	2300      	movs	r3, #0
 8007472:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747a:	461a      	mov	r2, r3
 800747c:	2300      	movs	r3, #0
 800747e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007486:	461a      	mov	r2, r3
 8007488:	2300      	movs	r3, #0
 800748a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800748c:	2300      	movs	r3, #0
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	e043      	b.n	800751a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a8:	d118      	bne.n	80074dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074bc:	461a      	mov	r2, r3
 80074be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	e013      	b.n	80074ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d2:	461a      	mov	r2, r3
 80074d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e008      	b.n	80074ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e8:	461a      	mov	r2, r3
 80074ea:	2300      	movs	r3, #0
 80074ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	461a      	mov	r2, r3
 80074fc:	2300      	movs	r3, #0
 80074fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750c:	461a      	mov	r2, r3
 800750e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007512:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	3301      	adds	r3, #1
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	429a      	cmp	r2, r3
 8007520:	d3b7      	bcc.n	8007492 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007522:	2300      	movs	r3, #0
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	e043      	b.n	80075b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800753a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800753e:	d118      	bne.n	8007572 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	461a      	mov	r2, r3
 8007554:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	e013      	b.n	8007584 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007568:	461a      	mov	r2, r3
 800756a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	e008      	b.n	8007584 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	461a      	mov	r2, r3
 8007580:	2300      	movs	r3, #0
 8007582:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	461a      	mov	r2, r3
 8007592:	2300      	movs	r3, #0
 8007594:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a2:	461a      	mov	r2, r3
 80075a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	3301      	adds	r3, #1
 80075ae:	613b      	str	r3, [r7, #16]
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d3b7      	bcc.n	8007528 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d105      	bne.n	80075ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f043 0210 	orr.w	r2, r3, #16
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699a      	ldr	r2, [r3, #24]
 80075f0:	4b0e      	ldr	r3, [pc, #56]	; (800762c <USB_DevInit+0x2b4>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d005      	beq.n	800760a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	f043 0208 	orr.w	r2, r3, #8
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800760a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d105      	bne.n	800761c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699a      	ldr	r2, [r3, #24]
 8007614:	4b06      	ldr	r3, [pc, #24]	; (8007630 <USB_DevInit+0x2b8>)
 8007616:	4313      	orrs	r3, r2
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007628:	b004      	add	sp, #16
 800762a:	4770      	bx	lr
 800762c:	803c3800 	.word	0x803c3800
 8007630:	40000004 	.word	0x40000004

08007634 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	019b      	lsls	r3, r3, #6
 8007646:	f043 0220 	orr.w	r2, r3, #32
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4a09      	ldr	r2, [pc, #36]	; (800767c <USB_FlushTxFifo+0x48>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d901      	bls.n	8007660 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e006      	b.n	800766e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b20      	cmp	r3, #32
 800766a:	d0f0      	beq.n	800764e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	00030d40 	.word	0x00030d40

08007680 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2210      	movs	r2, #16
 8007690:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <USB_FlushRxFifo+0x40>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d901      	bls.n	80076a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e006      	b.n	80076b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b10      	cmp	r3, #16
 80076ae:	d0f0      	beq.n	8007692 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	00030d40 	.word	0x00030d40

080076c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	68f9      	ldr	r1, [r7, #12]
 80076e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e4:	4313      	orrs	r3, r2
 80076e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007710:	f043 0302 	orr.w	r3, r3, #2
 8007714:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007716:	2003      	movs	r0, #3
 8007718:	f7fa fad4 	bl	8001cc4 <HAL_Delay>

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4a13      	ldr	r2, [pc, #76]	; (800778c <USB_CoreReset+0x64>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d901      	bls.n	8007746 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e01b      	b.n	800777e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	daf2      	bge.n	8007734 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f043 0201 	orr.w	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4a09      	ldr	r2, [pc, #36]	; (800778c <USB_CoreReset+0x64>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d901      	bls.n	8007770 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e006      	b.n	800777e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b01      	cmp	r3, #1
 800777a:	d0f0      	beq.n	800775e <USB_CoreReset+0x36>

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	00030d40 	.word	0x00030d40

08007790 <arm_var_f32>:
 8007790:	2901      	cmp	r1, #1
 8007792:	d971      	bls.n	8007878 <arm_var_f32+0xe8>
 8007794:	b4f0      	push	{r4, r5, r6, r7}
 8007796:	088d      	lsrs	r5, r1, #2
 8007798:	d071      	beq.n	800787e <arm_var_f32+0xee>
 800779a:	f100 0310 	add.w	r3, r0, #16
 800779e:	462e      	mov	r6, r5
 80077a0:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800789c <arm_var_f32+0x10c>
 80077a4:	461c      	mov	r4, r3
 80077a6:	ed14 7a04 	vldr	s14, [r4, #-16]
 80077aa:	3e01      	subs	r6, #1
 80077ac:	ed14 6a03 	vldr	s12, [r4, #-12]
 80077b0:	f104 0410 	add.w	r4, r4, #16
 80077b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b8:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80077bc:	ed54 6a05 	vldr	s13, [r4, #-20]	; 0xffffffec
 80077c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80077c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077cc:	d1eb      	bne.n	80077a6 <arm_var_f32+0x16>
 80077ce:	012f      	lsls	r7, r5, #4
 80077d0:	f011 0403 	ands.w	r4, r1, #3
 80077d4:	eb00 0607 	add.w	r6, r0, r7
 80077d8:	d056      	beq.n	8007888 <arm_var_f32+0xf8>
 80077da:	4623      	mov	r3, r4
 80077dc:	ecb6 7a01 	vldmia	r6!, {s14}
 80077e0:	3b01      	subs	r3, #1
 80077e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077e6:	d1f9      	bne.n	80077dc <arm_var_f32+0x4c>
 80077e8:	ee07 1a10 	vmov	s14, r1
 80077ec:	eeb8 4a47 	vcvt.f32.u32	s8, s14
 80077f0:	ee87 5a84 	vdiv.f32	s10, s15, s8
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	d04e      	beq.n	8007896 <arm_var_f32+0x106>
 80077f8:	f100 0310 	add.w	r3, r0, #16
 80077fc:	012f      	lsls	r7, r5, #4
 80077fe:	4629      	mov	r1, r5
 8007800:	eddf 4a26 	vldr	s9, [pc, #152]	; 800789c <arm_var_f32+0x10c>
 8007804:	ed13 6a04 	vldr	s12, [r3, #-16]
 8007808:	3901      	subs	r1, #1
 800780a:	ed13 7a02 	vldr	s14, [r3, #-8]
 800780e:	f103 0310 	add.w	r3, r3, #16
 8007812:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007816:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 800781a:	ee77 7a45 	vsub.f32	s15, s14, s10
 800781e:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 8007822:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8007826:	ee26 6a06 	vmul.f32	s12, s12, s12
 800782a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800782e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8007832:	ee76 7a24 	vadd.f32	s15, s12, s9
 8007836:	ee35 6ac5 	vsub.f32	s12, s11, s10
 800783a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783e:	ee26 6a06 	vmul.f32	s12, s12, s12
 8007842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007846:	ee76 4a27 	vadd.f32	s9, s12, s15
 800784a:	d1db      	bne.n	8007804 <arm_var_f32+0x74>
 800784c:	4438      	add	r0, r7
 800784e:	b14c      	cbz	r4, 8007864 <arm_var_f32+0xd4>
 8007850:	ecb0 7a01 	vldmia	r0!, {s14}
 8007854:	3c01      	subs	r4, #1
 8007856:	ee37 7a45 	vsub.f32	s14, s14, s10
 800785a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800785e:	ee74 4a87 	vadd.f32	s9, s9, s14
 8007862:	d1f5      	bne.n	8007850 <arm_var_f32+0xc0>
 8007864:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007868:	bcf0      	pop	{r4, r5, r6, r7}
 800786a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800786e:	eec4 7a84 	vdiv.f32	s15, s9, s8
 8007872:	edc2 7a00 	vstr	s15, [r2]
 8007876:	4770      	bx	lr
 8007878:	2300      	movs	r3, #0
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	4770      	bx	lr
 800787e:	4606      	mov	r6, r0
 8007880:	460c      	mov	r4, r1
 8007882:	eddf 7a06 	vldr	s15, [pc, #24]	; 800789c <arm_var_f32+0x10c>
 8007886:	e7a8      	b.n	80077da <arm_var_f32+0x4a>
 8007888:	ee07 1a10 	vmov	s14, r1
 800788c:	eeb8 4a47 	vcvt.f32.u32	s8, s14
 8007890:	ee87 5a84 	vdiv.f32	s10, s15, s8
 8007894:	e7b3      	b.n	80077fe <arm_var_f32+0x6e>
 8007896:	eddf 4a01 	vldr	s9, [pc, #4]	; 800789c <arm_var_f32+0x10c>
 800789a:	e7d9      	b.n	8007850 <arm_var_f32+0xc0>
 800789c:	00000000 	.word	0x00000000

080078a0 <arm_std_f32>:
 80078a0:	2901      	cmp	r1, #1
 80078a2:	d065      	beq.n	8007970 <arm_std_f32+0xd0>
 80078a4:	eddf 5a39 	vldr	s11, [pc, #228]	; 800798c <arm_std_f32+0xec>
 80078a8:	b530      	push	{r4, r5, lr}
 80078aa:	088d      	lsrs	r5, r1, #2
 80078ac:	b083      	sub	sp, #12
 80078ae:	d062      	beq.n	8007976 <arm_std_f32+0xd6>
 80078b0:	eef0 6a65 	vmov.f32	s13, s11
 80078b4:	f100 0310 	add.w	r3, r0, #16
 80078b8:	462c      	mov	r4, r5
 80078ba:	ed53 7a04 	vldr	s15, [r3, #-16]
 80078be:	3c01      	subs	r4, #1
 80078c0:	ed13 7a03 	vldr	s14, [r3, #-12]
 80078c4:	f103 0310 	add.w	r3, r3, #16
 80078c8:	ee27 4aa7 	vmul.f32	s8, s15, s15
 80078cc:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 80078d0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80078d4:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 80078d8:	ee27 5a07 	vmul.f32	s10, s14, s14
 80078dc:	ee74 5a25 	vadd.f32	s11, s8, s11
 80078e0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80078e4:	ee64 6aa4 	vmul.f32	s13, s9, s9
 80078e8:	ee75 5a25 	vadd.f32	s11, s10, s11
 80078ec:	ee77 7a24 	vadd.f32	s15, s14, s9
 80078f0:	ee26 7a06 	vmul.f32	s14, s12, s12
 80078f4:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80078f8:	ee77 6a86 	vadd.f32	s13, s15, s12
 80078fc:	ee77 5a25 	vadd.f32	s11, s14, s11
 8007900:	d1db      	bne.n	80078ba <arm_std_f32+0x1a>
 8007902:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007906:	f011 0303 	ands.w	r3, r1, #3
 800790a:	d009      	beq.n	8007920 <arm_std_f32+0x80>
 800790c:	ecf0 7a01 	vldmia	r0!, {s15}
 8007910:	3b01      	subs	r3, #1
 8007912:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007916:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800791a:	ee75 5a87 	vadd.f32	s11, s11, s14
 800791e:	d1f5      	bne.n	800790c <arm_std_f32+0x6c>
 8007920:	ee07 1a90 	vmov	s15, r1
 8007924:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007930:	ee77 6ac6 	vsub.f32	s13, s15, s12
 8007934:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8007938:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800793c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007940:	ee27 7a00 	vmul.f32	s14, s14, s0
 8007944:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007948:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800794c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007950:	db0a      	blt.n	8007968 <arm_std_f32+0xc8>
 8007952:	eeb1 0ac7 	vsqrt.f32	s0, s14
 8007956:	eeb4 0a40 	vcmp.f32	s0, s0
 800795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795e:	d10d      	bne.n	800797c <arm_std_f32+0xdc>
 8007960:	ed82 0a00 	vstr	s0, [r2]
 8007964:	b003      	add	sp, #12
 8007966:	bd30      	pop	{r4, r5, pc}
 8007968:	2300      	movs	r3, #0
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	b003      	add	sp, #12
 800796e:	bd30      	pop	{r4, r5, pc}
 8007970:	2300      	movs	r3, #0
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	4770      	bx	lr
 8007976:	eef0 6a65 	vmov.f32	s13, s11
 800797a:	e7c4      	b.n	8007906 <arm_std_f32+0x66>
 800797c:	eeb0 0a47 	vmov.f32	s0, s14
 8007980:	9201      	str	r2, [sp, #4]
 8007982:	f003 f8b9 	bl	800aaf8 <sqrtf>
 8007986:	9a01      	ldr	r2, [sp, #4]
 8007988:	e7ea      	b.n	8007960 <arm_std_f32+0xc0>
 800798a:	bf00      	nop
 800798c:	00000000 	.word	0x00000000

08007990 <arm_power_f32>:
 8007990:	b430      	push	{r4, r5}
 8007992:	088d      	lsrs	r5, r1, #2
 8007994:	d031      	beq.n	80079fa <arm_power_f32+0x6a>
 8007996:	f100 0310 	add.w	r3, r0, #16
 800799a:	462c      	mov	r4, r5
 800799c:	ed9f 5a18 	vldr	s10, [pc, #96]	; 8007a00 <arm_power_f32+0x70>
 80079a0:	ed53 6a04 	vldr	s13, [r3, #-16]
 80079a4:	3c01      	subs	r4, #1
 80079a6:	ed13 7a03 	vldr	s14, [r3, #-12]
 80079aa:	f103 0310 	add.w	r3, r3, #16
 80079ae:	ee26 6aa6 	vmul.f32	s12, s13, s13
 80079b2:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 80079b6:	ee67 6a07 	vmul.f32	s13, s14, s14
 80079ba:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 80079be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80079c2:	ee76 7a05 	vadd.f32	s15, s12, s10
 80079c6:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80079ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079d2:	ee35 5aa7 	vadd.f32	s10, s11, s15
 80079d6:	d1e3      	bne.n	80079a0 <arm_power_f32+0x10>
 80079d8:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80079dc:	f011 0103 	ands.w	r1, r1, #3
 80079e0:	d007      	beq.n	80079f2 <arm_power_f32+0x62>
 80079e2:	ecb0 6a01 	vldmia	r0!, {s12}
 80079e6:	3901      	subs	r1, #1
 80079e8:	ee26 6a06 	vmul.f32	s12, s12, s12
 80079ec:	ee35 5a06 	vadd.f32	s10, s10, s12
 80079f0:	d1f7      	bne.n	80079e2 <arm_power_f32+0x52>
 80079f2:	ed82 5a00 	vstr	s10, [r2]
 80079f6:	bc30      	pop	{r4, r5}
 80079f8:	4770      	bx	lr
 80079fa:	ed9f 5a01 	vldr	s10, [pc, #4]	; 8007a00 <arm_power_f32+0x70>
 80079fe:	e7ed      	b.n	80079dc <arm_power_f32+0x4c>
 8007a00:	00000000 	.word	0x00000000

08007a04 <arm_mean_f32>:
 8007a04:	b430      	push	{r4, r5}
 8007a06:	088d      	lsrs	r5, r1, #2
 8007a08:	d02d      	beq.n	8007a66 <arm_mean_f32+0x62>
 8007a0a:	f100 0310 	add.w	r3, r0, #16
 8007a0e:	462c      	mov	r4, r5
 8007a10:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007a6c <arm_mean_f32+0x68>
 8007a14:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007a18:	3c01      	subs	r4, #1
 8007a1a:	ed13 6a03 	vldr	s12, [r3, #-12]
 8007a1e:	f103 0310 	add.w	r3, r3, #16
 8007a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a26:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8007a2a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8007a2e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3a:	d1eb      	bne.n	8007a14 <arm_mean_f32+0x10>
 8007a3c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007a40:	f011 0303 	ands.w	r3, r1, #3
 8007a44:	d005      	beq.n	8007a52 <arm_mean_f32+0x4e>
 8007a46:	ecb0 7a01 	vldmia	r0!, {s14}
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a50:	d1f9      	bne.n	8007a46 <arm_mean_f32+0x42>
 8007a52:	ee07 1a10 	vmov	s14, r1
 8007a56:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007a5a:	bc30      	pop	{r4, r5}
 8007a5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007a60:	edc2 6a00 	vstr	s13, [r2]
 8007a64:	4770      	bx	lr
 8007a66:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007a6c <arm_mean_f32+0x68>
 8007a6a:	e7e9      	b.n	8007a40 <arm_mean_f32+0x3c>
 8007a6c:	00000000 	.word	0x00000000

08007a70 <arm_max_f32>:
 8007a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	1e4d      	subs	r5, r1, #1
 8007a76:	f100 0c04 	add.w	ip, r0, #4
 8007a7a:	edd0 7a00 	vldr	s15, [r0]
 8007a7e:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8007a82:	d056      	beq.n	8007b32 <arm_max_f32+0xc2>
 8007a84:	3014      	adds	r0, #20
 8007a86:	46c8      	mov	r8, r9
 8007a88:	2404      	movs	r4, #4
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007a90:	f1a4 0a03 	sub.w	sl, r4, #3
 8007a94:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007a98:	f1a4 0e02 	sub.w	lr, r4, #2
 8007a9c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007aa0:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007aa4:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007aa8:	1e67      	subs	r7, r4, #1
 8007aaa:	3010      	adds	r0, #16
 8007aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab0:	bfc8      	it	gt
 8007ab2:	eef0 7a46 	vmovgt.f32	s15, s12
 8007ab6:	bfc8      	it	gt
 8007ab8:	4656      	movgt	r6, sl
 8007aba:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac2:	bf48      	it	mi
 8007ac4:	eef0 7a66 	vmovmi.f32	s15, s13
 8007ac8:	bf48      	it	mi
 8007aca:	4676      	movmi	r6, lr
 8007acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad4:	bf48      	it	mi
 8007ad6:	eef0 7a47 	vmovmi.f32	s15, s14
 8007ada:	bf48      	it	mi
 8007adc:	463e      	movmi	r6, r7
 8007ade:	eef4 7ae5 	vcmpe.f32	s15, s11
 8007ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae6:	bf48      	it	mi
 8007ae8:	4626      	movmi	r6, r4
 8007aea:	bf48      	it	mi
 8007aec:	eef0 7a65 	vmovmi.f32	s15, s11
 8007af0:	f1b8 0801 	subs.w	r8, r8, #1
 8007af4:	f104 0404 	add.w	r4, r4, #4
 8007af8:	d1c8      	bne.n	8007a8c <arm_max_f32+0x1c>
 8007afa:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 8007afe:	f015 0003 	ands.w	r0, r5, #3
 8007b02:	d018      	beq.n	8007b36 <arm_max_f32+0xc6>
 8007b04:	1a08      	subs	r0, r1, r0
 8007b06:	ecbc 7a01 	vldmia	ip!, {s14}
 8007b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	bfc8      	it	gt
 8007b14:	4606      	movgt	r6, r0
 8007b16:	f100 0001 	add.w	r0, r0, #1
 8007b1a:	bfd8      	it	le
 8007b1c:	eeb0 7a67 	vmovle.f32	s14, s15
 8007b20:	4281      	cmp	r1, r0
 8007b22:	eef0 7a47 	vmov.f32	s15, s14
 8007b26:	d1ee      	bne.n	8007b06 <arm_max_f32+0x96>
 8007b28:	ed82 7a00 	vstr	s14, [r2]
 8007b2c:	601e      	str	r6, [r3, #0]
 8007b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b32:	464e      	mov	r6, r9
 8007b34:	e7e3      	b.n	8007afe <arm_max_f32+0x8e>
 8007b36:	eeb0 7a67 	vmov.f32	s14, s15
 8007b3a:	e7f5      	b.n	8007b28 <arm_max_f32+0xb8>

08007b3c <arm_cfft_radix8by2_f32>:
 8007b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b40:	4607      	mov	r7, r0
 8007b42:	4608      	mov	r0, r1
 8007b44:	ed2d 8b06 	vpush	{d8-d10}
 8007b48:	f8b7 e000 	ldrh.w	lr, [r7]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8007b52:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8007b56:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8007b5a:	f000 80b0 	beq.w	8007cbe <arm_cfft_radix8by2_f32+0x182>
 8007b5e:	008b      	lsls	r3, r1, #2
 8007b60:	3210      	adds	r2, #16
 8007b62:	f100 0610 	add.w	r6, r0, #16
 8007b66:	f108 0510 	add.w	r5, r8, #16
 8007b6a:	3310      	adds	r3, #16
 8007b6c:	18c4      	adds	r4, r0, r3
 8007b6e:	4443      	add	r3, r8
 8007b70:	ed55 6a04 	vldr	s13, [r5, #-16]
 8007b74:	f1be 0e01 	subs.w	lr, lr, #1
 8007b78:	ed56 4a04 	vldr	s9, [r6, #-16]
 8007b7c:	f104 0410 	add.w	r4, r4, #16
 8007b80:	ed15 7a03 	vldr	s14, [r5, #-12]
 8007b84:	f106 0610 	add.w	r6, r6, #16
 8007b88:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8007b8c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8007b90:	ed55 2a01 	vldr	s5, [r5, #-4]
 8007b94:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8007b98:	ed53 0a04 	vldr	s1, [r3, #-16]
 8007b9c:	f102 0210 	add.w	r2, r2, #16
 8007ba0:	ed13 5a03 	vldr	s10, [r3, #-12]
 8007ba4:	f105 0510 	add.w	r5, r5, #16
 8007ba8:	ed13 3a02 	vldr	s6, [r3, #-8]
 8007bac:	f103 0310 	add.w	r3, r3, #16
 8007bb0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8007bb4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8007bb8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8007bbc:	ee33 8a83 	vadd.f32	s16, s7, s6
 8007bc0:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8007bc4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8007bc8:	ee34 0a06 	vadd.f32	s0, s8, s12
 8007bcc:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8007bd0:	ee76 aa87 	vadd.f32	s21, s13, s14
 8007bd4:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8007bd8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007bdc:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8007be0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8007be4:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8007be8:	ee71 8a05 	vadd.f32	s17, s2, s10
 8007bec:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8007bf0:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8007bf4:	ee72 9a22 	vadd.f32	s19, s4, s5
 8007bf8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007bfc:	ee35 5a41 	vsub.f32	s10, s10, s2
 8007c00:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8007c04:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8007c08:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007c0c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8007c10:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8007c14:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8007c18:	ee72 7a62 	vsub.f32	s15, s4, s5
 8007c1c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8007c20:	ee73 2a63 	vsub.f32	s5, s6, s7
 8007c24:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8007c28:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8007c2c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8007c30:	ee24 3a84 	vmul.f32	s6, s9, s8
 8007c34:	ee27 2a26 	vmul.f32	s4, s14, s13
 8007c38:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8007c3c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8007c40:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007c44:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007c48:	ee65 6a26 	vmul.f32	s13, s10, s13
 8007c4c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8007c50:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007c54:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007c58:	ee33 4a02 	vadd.f32	s8, s6, s4
 8007c5c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007c60:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8007c64:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8007c68:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8007c6c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8007c70:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8007c74:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8007c78:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8007c7c:	ee27 4a87 	vmul.f32	s8, s15, s14
 8007c80:	ee61 5a87 	vmul.f32	s11, s3, s14
 8007c84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c88:	ee22 5a87 	vmul.f32	s10, s5, s14
 8007c8c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007c90:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007c94:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8007c98:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007c9c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007ca0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007ca4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007ca8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8007cac:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8007cb0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8007cb4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8007cb8:	f47f af5a 	bne.w	8007b70 <arm_cfft_radix8by2_f32+0x34>
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	b28c      	uxth	r4, r1
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	f000 fc3e 	bl	8008544 <arm_radix8_butterfly_f32>
 8007cc8:	4621      	mov	r1, r4
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	4640      	mov	r0, r8
 8007cce:	2302      	movs	r3, #2
 8007cd0:	ecbd 8b06 	vpop	{d8-d10}
 8007cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	f000 bc34 	b.w	8008544 <arm_radix8_butterfly_f32>

08007cdc <arm_cfft_radix8by4_f32>:
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	ed2d 8b06 	vpush	{d8-d10}
 8007ce4:	8804      	ldrh	r4, [r0, #0]
 8007ce6:	b08f      	sub	sp, #60	; 0x3c
 8007ce8:	ed91 6a00 	vldr	s12, [r1]
 8007cec:	460a      	mov	r2, r1
 8007cee:	0864      	lsrs	r4, r4, #1
 8007cf0:	ed91 7a01 	vldr	s14, [r1, #4]
 8007cf4:	9101      	str	r1, [sp, #4]
 8007cf6:	00a3      	lsls	r3, r4, #2
 8007cf8:	6841      	ldr	r1, [r0, #4]
 8007cfa:	0864      	lsrs	r4, r4, #1
 8007cfc:	900c      	str	r0, [sp, #48]	; 0x30
 8007cfe:	9205      	str	r2, [sp, #20]
 8007d00:	f101 0610 	add.w	r6, r1, #16
 8007d04:	4625      	mov	r5, r4
 8007d06:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d08:	f101 0408 	add.w	r4, r1, #8
 8007d0c:	9602      	str	r6, [sp, #8]
 8007d0e:	9407      	str	r4, [sp, #28]
 8007d10:	18d4      	adds	r4, r2, r3
 8007d12:	1eaa      	subs	r2, r5, #2
 8007d14:	f101 0518 	add.w	r5, r1, #24
 8007d18:	18e0      	adds	r0, r4, r3
 8007d1a:	edd4 4a00 	vldr	s9, [r4]
 8007d1e:	ed94 4a01 	vldr	s8, [r4, #4]
 8007d22:	46a6      	mov	lr, r4
 8007d24:	edd0 6a00 	vldr	s13, [r0]
 8007d28:	18c7      	adds	r7, r0, r3
 8007d2a:	edd0 7a01 	vldr	s15, [r0, #4]
 8007d2e:	46a0      	mov	r8, r4
 8007d30:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007d34:	ed97 5a00 	vldr	s10, [r7]
 8007d38:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	9506      	str	r5, [sp, #24]
 8007d40:	4605      	mov	r5, r0
 8007d42:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8007d46:	900a      	str	r0, [sp, #40]	; 0x28
 8007d48:	9801      	ldr	r0, [sp, #4]
 8007d4a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d52:	ed97 3a01 	vldr	s6, [r7, #4]
 8007d56:	ee72 2a85 	vadd.f32	s5, s5, s10
 8007d5a:	46bc      	mov	ip, r7
 8007d5c:	ee76 3a84 	vadd.f32	s7, s13, s8
 8007d60:	9704      	str	r7, [sp, #16]
 8007d62:	ee36 7a44 	vsub.f32	s14, s12, s8
 8007d66:	f8cd e00c 	str.w	lr, [sp, #12]
 8007d6a:	ee12 9a90 	vmov	r9, s5
 8007d6e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8007d72:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8007d76:	1f3e      	subs	r6, r7, #4
 8007d78:	f840 9b08 	str.w	r9, [r0], #8
 8007d7c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8007d80:	edde 2a01 	vldr	s5, [lr, #4]
 8007d84:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8007d88:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8007d8c:	eddc 4a01 	vldr	s9, [ip, #4]
 8007d90:	ee36 6a22 	vadd.f32	s12, s12, s5
 8007d94:	9001      	str	r0, [sp, #4]
 8007d96:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007d9a:	9805      	ldr	r0, [sp, #20]
 8007d9c:	ee13 9a90 	vmov	r9, s7
 8007da0:	ee37 7a43 	vsub.f32	s14, s14, s6
 8007da4:	ee36 6a24 	vadd.f32	s12, s12, s9
 8007da8:	f1ae 0704 	sub.w	r7, lr, #4
 8007dac:	ee74 4a05 	vadd.f32	s9, s8, s10
 8007db0:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007db4:	ed80 6a01 	vstr	s12, [r0, #4]
 8007db8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007dbc:	f848 9b08 	str.w	r9, [r8], #8
 8007dc0:	edce 4a01 	vstr	s9, [lr, #4]
 8007dc4:	ee15 ea90 	vmov	lr, s11
 8007dc8:	f844 eb08 	str.w	lr, [r4], #8
 8007dcc:	ee16 ea90 	vmov	lr, s13
 8007dd0:	9408      	str	r4, [sp, #32]
 8007dd2:	462c      	mov	r4, r5
 8007dd4:	ed85 7a01 	vstr	s14, [r5, #4]
 8007dd8:	9d04      	ldr	r5, [sp, #16]
 8007dda:	f84c eb08 	str.w	lr, [ip], #8
 8007dde:	edc5 7a01 	vstr	s15, [r5, #4]
 8007de2:	0855      	lsrs	r5, r2, #1
 8007de4:	9509      	str	r5, [sp, #36]	; 0x24
 8007de6:	f000 8130 	beq.w	800804a <arm_cfft_radix8by4_f32+0x36e>
 8007dea:	9805      	ldr	r0, [sp, #20]
 8007dec:	3b08      	subs	r3, #8
 8007dee:	46ab      	mov	fp, r5
 8007df0:	f1a4 020c 	sub.w	r2, r4, #12
 8007df4:	f100 0510 	add.w	r5, r0, #16
 8007df8:	f101 0920 	add.w	r9, r1, #32
 8007dfc:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007e00:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007e04:	4433      	add	r3, r6
 8007e06:	3410      	adds	r4, #16
 8007e08:	4660      	mov	r0, ip
 8007e0a:	4641      	mov	r1, r8
 8007e0c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8007e10:	ed54 6a02 	vldr	s13, [r4, #-8]
 8007e14:	f1bb 0b01 	subs.w	fp, fp, #1
 8007e18:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007e1c:	f10a 0a08 	add.w	sl, sl, #8
 8007e20:	edd1 7a00 	vldr	s15, [r1]
 8007e24:	f105 0508 	add.w	r5, r5, #8
 8007e28:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8007e2c:	edd0 2a00 	vldr	s5, [r0]
 8007e30:	ed14 7a01 	vldr	s14, [r4, #-4]
 8007e34:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8007e38:	ed55 6a03 	vldr	s13, [r5, #-12]
 8007e3c:	f1a2 0208 	sub.w	r2, r2, #8
 8007e40:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8007e44:	ed90 2a01 	vldr	s4, [r0, #4]
 8007e48:	ee36 5a87 	vadd.f32	s10, s13, s14
 8007e4c:	ed91 6a01 	vldr	s12, [r1, #4]
 8007e50:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007e54:	f109 0910 	add.w	r9, r9, #16
 8007e58:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8007e5c:	f104 0408 	add.w	r4, r4, #8
 8007e60:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8007e64:	f10e 0e18 	add.w	lr, lr, #24
 8007e68:	ee37 3a67 	vsub.f32	s6, s14, s15
 8007e6c:	f1a3 0308 	sub.w	r3, r3, #8
 8007e70:	ed45 6a04 	vstr	s13, [r5, #-16]
 8007e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e78:	edd1 6a01 	vldr	s13, [r1, #4]
 8007e7c:	ee75 1a86 	vadd.f32	s3, s11, s12
 8007e80:	edd0 4a01 	vldr	s9, [r0, #4]
 8007e84:	ee33 3a22 	vadd.f32	s6, s6, s5
 8007e88:	ee75 6a26 	vadd.f32	s13, s10, s13
 8007e8c:	ee35 5a46 	vsub.f32	s10, s10, s12
 8007e90:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007e94:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007e98:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8007e9c:	ee35 5a42 	vsub.f32	s10, s10, s4
 8007ea0:	ed45 6a03 	vstr	s13, [r5, #-12]
 8007ea4:	ee36 2a02 	vadd.f32	s4, s12, s4
 8007ea8:	edd6 7a00 	vldr	s15, [r6]
 8007eac:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007eb0:	ed97 1a00 	vldr	s2, [r7]
 8007eb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8007eb8:	ed92 8a04 	vldr	s16, [r2, #16]
 8007ebc:	ee71 8a27 	vadd.f32	s17, s2, s15
 8007ec0:	ed93 aa04 	vldr	s20, [r3, #16]
 8007ec4:	ed16 7a01 	vldr	s14, [r6, #-4]
 8007ec8:	ee71 7a67 	vsub.f32	s15, s2, s15
 8007ecc:	ed57 0a01 	vldr	s1, [r7, #-4]
 8007ed0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8007ed4:	ee38 6a88 	vadd.f32	s12, s17, s16
 8007ed8:	edd3 9a03 	vldr	s19, [r3, #12]
 8007edc:	ee30 0a87 	vadd.f32	s0, s1, s14
 8007ee0:	ed92 9a03 	vldr	s18, [r2, #12]
 8007ee4:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8007ee8:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8007eec:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8007ef0:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8007ef4:	ee16 ca10 	vmov	ip, s12
 8007ef8:	ee30 6a49 	vsub.f32	s12, s0, s18
 8007efc:	ee77 4a01 	vadd.f32	s9, s14, s2
 8007f00:	f847 c908 	str.w	ip, [r7], #-8
 8007f04:	ee34 4a29 	vadd.f32	s8, s8, s19
 8007f08:	edd2 8a03 	vldr	s17, [r2, #12]
 8007f0c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8007f10:	ed93 8a03 	vldr	s16, [r3, #12]
 8007f14:	ee71 0a47 	vsub.f32	s1, s2, s14
 8007f18:	ee30 0a28 	vadd.f32	s0, s0, s17
 8007f1c:	ee39 1a67 	vsub.f32	s2, s18, s15
 8007f20:	ee36 6a69 	vsub.f32	s12, s12, s19
 8007f24:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007f28:	ee75 5aca 	vsub.f32	s11, s11, s20
 8007f2c:	ed87 0a01 	vstr	s0, [r7, #4]
 8007f30:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8007f34:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8007f38:	ee21 8a80 	vmul.f32	s16, s3, s0
 8007f3c:	ee23 7a26 	vmul.f32	s14, s6, s13
 8007f40:	ee64 7a26 	vmul.f32	s15, s8, s13
 8007f44:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8007f48:	ee24 4a00 	vmul.f32	s8, s8, s0
 8007f4c:	ee23 3a00 	vmul.f32	s6, s6, s0
 8007f50:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8007f54:	ee24 0a80 	vmul.f32	s0, s9, s0
 8007f58:	ee38 7a07 	vadd.f32	s14, s16, s14
 8007f5c:	ee76 6a84 	vadd.f32	s13, s13, s8
 8007f60:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007f64:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007f68:	ee17 ca10 	vmov	ip, s14
 8007f6c:	f841 cb08 	str.w	ip, [r1], #8
 8007f70:	ed01 3a01 	vstr	s6, [r1, #-4]
 8007f74:	ed82 0a04 	vstr	s0, [r2, #16]
 8007f78:	edc2 6a03 	vstr	s13, [r2, #12]
 8007f7c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8007f80:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8007f84:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8007f88:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8007f8c:	ee65 4a27 	vmul.f32	s9, s10, s15
 8007f90:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8007f94:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8007f98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007f9c:	ee25 5a26 	vmul.f32	s10, s10, s13
 8007fa0:	ee66 6a26 	vmul.f32	s13, s12, s13
 8007fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fa8:	ee34 6a24 	vadd.f32	s12, s8, s9
 8007fac:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8007fb0:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007fb4:	ee17 ca90 	vmov	ip, s15
 8007fb8:	ed04 6a04 	vstr	s12, [r4, #-16]
 8007fbc:	ed04 5a03 	vstr	s10, [r4, #-12]
 8007fc0:	f846 c908 	str.w	ip, [r6], #-8
 8007fc4:	edc6 6a01 	vstr	s13, [r6, #4]
 8007fc8:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8007fcc:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8007fd0:	ee62 5a27 	vmul.f32	s11, s4, s15
 8007fd4:	ee22 6a87 	vmul.f32	s12, s5, s14
 8007fd8:	ee22 2a07 	vmul.f32	s4, s4, s14
 8007fdc:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8007fe0:	ee61 6a07 	vmul.f32	s13, s2, s14
 8007fe4:	ee20 7a87 	vmul.f32	s14, s1, s14
 8007fe8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007fec:	ee61 7a27 	vmul.f32	s15, s2, s15
 8007ff0:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007ff4:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8007ff8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8007ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008000:	ee16 ca10 	vmov	ip, s12
 8008004:	f840 cb08 	str.w	ip, [r0], #8
 8008008:	ed40 2a01 	vstr	s5, [r0, #-4]
 800800c:	edc3 0a04 	vstr	s1, [r3, #16]
 8008010:	edc3 7a03 	vstr	s15, [r3, #12]
 8008014:	f47f aefc 	bne.w	8007e10 <arm_cfft_radix8by4_f32+0x134>
 8008018:	9909      	ldr	r1, [sp, #36]	; 0x24
 800801a:	9802      	ldr	r0, [sp, #8]
 800801c:	00cb      	lsls	r3, r1, #3
 800801e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8008022:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008026:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800802a:	4498      	add	r8, r3
 800802c:	449c      	add	ip, r3
 800802e:	9102      	str	r1, [sp, #8]
 8008030:	9901      	ldr	r1, [sp, #4]
 8008032:	4419      	add	r1, r3
 8008034:	9101      	str	r1, [sp, #4]
 8008036:	9907      	ldr	r1, [sp, #28]
 8008038:	4419      	add	r1, r3
 800803a:	9107      	str	r1, [sp, #28]
 800803c:	9908      	ldr	r1, [sp, #32]
 800803e:	4419      	add	r1, r3
 8008040:	9b06      	ldr	r3, [sp, #24]
 8008042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008046:	9108      	str	r1, [sp, #32]
 8008048:	9306      	str	r3, [sp, #24]
 800804a:	9a01      	ldr	r2, [sp, #4]
 800804c:	2304      	movs	r3, #4
 800804e:	9e08      	ldr	r6, [sp, #32]
 8008050:	edd2 7a00 	vldr	s15, [r2]
 8008054:	ed96 7a00 	vldr	s14, [r6]
 8008058:	edd8 2a00 	vldr	s5, [r8]
 800805c:	ee77 5a87 	vadd.f32	s11, s15, s14
 8008060:	ed9c 3a00 	vldr	s6, [ip]
 8008064:	ed92 6a01 	vldr	s12, [r2, #4]
 8008068:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800806c:	edd6 6a01 	vldr	s13, [r6, #4]
 8008070:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8008074:	ed9c 2a01 	vldr	s4, [ip, #4]
 8008078:	ee36 5a26 	vadd.f32	s10, s12, s13
 800807c:	edd8 7a01 	vldr	s15, [r8, #4]
 8008080:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008084:	9d02      	ldr	r5, [sp, #8]
 8008086:	ee34 6a83 	vadd.f32	s12, s9, s6
 800808a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800808e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8008092:	9805      	ldr	r0, [sp, #20]
 8008094:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8008098:	4621      	mov	r1, r4
 800809a:	ed82 6a00 	vstr	s12, [r2]
 800809e:	ee35 6ae2 	vsub.f32	s12, s11, s5
 80080a2:	edd8 3a01 	vldr	s7, [r8, #4]
 80080a6:	ee75 5a67 	vsub.f32	s11, s10, s15
 80080aa:	eddc 1a01 	vldr	s3, [ip, #4]
 80080ae:	ee34 4a42 	vsub.f32	s8, s8, s4
 80080b2:	ee75 3a23 	vadd.f32	s7, s10, s7
 80080b6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80080ba:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80080be:	ee33 5aa1 	vadd.f32	s10, s7, s3
 80080c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80080c6:	ee36 6a43 	vsub.f32	s12, s12, s6
 80080ca:	ed82 5a01 	vstr	s10, [r2, #4]
 80080ce:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80080d2:	9a07      	ldr	r2, [sp, #28]
 80080d4:	ee77 7a02 	vadd.f32	s15, s14, s4
 80080d8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 80080dc:	edd2 2a00 	vldr	s5, [r2]
 80080e0:	ed92 5a01 	vldr	s10, [r2, #4]
 80080e4:	ee64 3a22 	vmul.f32	s7, s8, s5
 80080e8:	ee24 4a05 	vmul.f32	s8, s8, s10
 80080ec:	ee24 5a85 	vmul.f32	s10, s9, s10
 80080f0:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80080f4:	ee33 5a85 	vadd.f32	s10, s7, s10
 80080f8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80080fc:	ed88 5a00 	vstr	s10, [r8]
 8008100:	edc8 4a01 	vstr	s9, [r8, #4]
 8008104:	edd5 4a01 	vldr	s9, [r5, #4]
 8008108:	edd5 6a00 	vldr	s13, [r5]
 800810c:	9d06      	ldr	r5, [sp, #24]
 800810e:	ee26 5a26 	vmul.f32	s10, s12, s13
 8008112:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008116:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800811a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800811e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8008122:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008126:	ed86 6a01 	vstr	s12, [r6, #4]
 800812a:	edc6 5a00 	vstr	s11, [r6]
 800812e:	edd5 5a01 	vldr	s11, [r5, #4]
 8008132:	edd5 6a00 	vldr	s13, [r5]
 8008136:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008138:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800813c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008140:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008144:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008148:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800814c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008150:	edcc 7a01 	vstr	s15, [ip, #4]
 8008154:	ed8c 7a00 	vstr	s14, [ip]
 8008158:	6872      	ldr	r2, [r6, #4]
 800815a:	f000 f9f3 	bl	8008544 <arm_radix8_butterfly_f32>
 800815e:	9803      	ldr	r0, [sp, #12]
 8008160:	4621      	mov	r1, r4
 8008162:	6872      	ldr	r2, [r6, #4]
 8008164:	2304      	movs	r3, #4
 8008166:	f000 f9ed 	bl	8008544 <arm_radix8_butterfly_f32>
 800816a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800816c:	4621      	mov	r1, r4
 800816e:	6872      	ldr	r2, [r6, #4]
 8008170:	2304      	movs	r3, #4
 8008172:	f000 f9e7 	bl	8008544 <arm_radix8_butterfly_f32>
 8008176:	4621      	mov	r1, r4
 8008178:	6872      	ldr	r2, [r6, #4]
 800817a:	2304      	movs	r3, #4
 800817c:	9804      	ldr	r0, [sp, #16]
 800817e:	b00f      	add	sp, #60	; 0x3c
 8008180:	ecbd 8b06 	vpop	{d8-d10}
 8008184:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	f000 b9dc 	b.w	8008544 <arm_radix8_butterfly_f32>

0800818c <arm_cfft_f32>:
 800818c:	2a01      	cmp	r2, #1
 800818e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008192:	4606      	mov	r6, r0
 8008194:	4617      	mov	r7, r2
 8008196:	460c      	mov	r4, r1
 8008198:	4698      	mov	r8, r3
 800819a:	8805      	ldrh	r5, [r0, #0]
 800819c:	d053      	beq.n	8008246 <arm_cfft_f32+0xba>
 800819e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80081a2:	d04b      	beq.n	800823c <arm_cfft_f32+0xb0>
 80081a4:	d916      	bls.n	80081d4 <arm_cfft_f32+0x48>
 80081a6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80081aa:	d01a      	beq.n	80081e2 <arm_cfft_f32+0x56>
 80081ac:	d95a      	bls.n	8008264 <arm_cfft_f32+0xd8>
 80081ae:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80081b2:	d043      	beq.n	800823c <arm_cfft_f32+0xb0>
 80081b4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80081b8:	d105      	bne.n	80081c6 <arm_cfft_f32+0x3a>
 80081ba:	2301      	movs	r3, #1
 80081bc:	6872      	ldr	r2, [r6, #4]
 80081be:	4629      	mov	r1, r5
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 f9bf 	bl	8008544 <arm_radix8_butterfly_f32>
 80081c6:	f1b8 0f00 	cmp.w	r8, #0
 80081ca:	d111      	bne.n	80081f0 <arm_cfft_f32+0x64>
 80081cc:	2f01      	cmp	r7, #1
 80081ce:	d016      	beq.n	80081fe <arm_cfft_f32+0x72>
 80081d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d4:	2d20      	cmp	r5, #32
 80081d6:	d031      	beq.n	800823c <arm_cfft_f32+0xb0>
 80081d8:	d948      	bls.n	800826c <arm_cfft_f32+0xe0>
 80081da:	2d40      	cmp	r5, #64	; 0x40
 80081dc:	d0ed      	beq.n	80081ba <arm_cfft_f32+0x2e>
 80081de:	2d80      	cmp	r5, #128	; 0x80
 80081e0:	d1f1      	bne.n	80081c6 <arm_cfft_f32+0x3a>
 80081e2:	4621      	mov	r1, r4
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7ff fca9 	bl	8007b3c <arm_cfft_radix8by2_f32>
 80081ea:	f1b8 0f00 	cmp.w	r8, #0
 80081ee:	d0ed      	beq.n	80081cc <arm_cfft_f32+0x40>
 80081f0:	68b2      	ldr	r2, [r6, #8]
 80081f2:	4620      	mov	r0, r4
 80081f4:	89b1      	ldrh	r1, [r6, #12]
 80081f6:	f7f8 f873 	bl	80002e0 <arm_bitreversal_32>
 80081fa:	2f01      	cmp	r7, #1
 80081fc:	d1e8      	bne.n	80081d0 <arm_cfft_f32+0x44>
 80081fe:	ee07 5a90 	vmov	s15, r5
 8008202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800820e:	2d00      	cmp	r5, #0
 8008210:	d0de      	beq.n	80081d0 <arm_cfft_f32+0x44>
 8008212:	f104 0108 	add.w	r1, r4, #8
 8008216:	2300      	movs	r3, #0
 8008218:	ed11 7a02 	vldr	s14, [r1, #-8]
 800821c:	3301      	adds	r3, #1
 800821e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008222:	3108      	adds	r1, #8
 8008224:	429d      	cmp	r5, r3
 8008226:	ee27 7a26 	vmul.f32	s14, s14, s13
 800822a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800822e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008232:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008236:	d1ef      	bne.n	8008218 <arm_cfft_f32+0x8c>
 8008238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800823c:	4621      	mov	r1, r4
 800823e:	4630      	mov	r0, r6
 8008240:	f7ff fd4c 	bl	8007cdc <arm_cfft_radix8by4_f32>
 8008244:	e7bf      	b.n	80081c6 <arm_cfft_f32+0x3a>
 8008246:	b1a5      	cbz	r5, 8008272 <arm_cfft_f32+0xe6>
 8008248:	f101 030c 	add.w	r3, r1, #12
 800824c:	2200      	movs	r2, #0
 800824e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008252:	3201      	adds	r2, #1
 8008254:	3308      	adds	r3, #8
 8008256:	eef1 7a67 	vneg.f32	s15, s15
 800825a:	4295      	cmp	r5, r2
 800825c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008260:	d1f5      	bne.n	800824e <arm_cfft_f32+0xc2>
 8008262:	e79c      	b.n	800819e <arm_cfft_f32+0x12>
 8008264:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008268:	d0a7      	beq.n	80081ba <arm_cfft_f32+0x2e>
 800826a:	e7ac      	b.n	80081c6 <arm_cfft_f32+0x3a>
 800826c:	2d10      	cmp	r5, #16
 800826e:	d0b8      	beq.n	80081e2 <arm_cfft_f32+0x56>
 8008270:	e7a9      	b.n	80081c6 <arm_cfft_f32+0x3a>
 8008272:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008276:	d896      	bhi.n	80081a6 <arm_cfft_f32+0x1a>
 8008278:	e7ac      	b.n	80081d4 <arm_cfft_f32+0x48>
 800827a:	bf00      	nop

0800827c <arm_cmplx_mag_f32>:
 800827c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008280:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008284:	b084      	sub	sp, #16
 8008286:	d07f      	beq.n	8008388 <arm_cmplx_mag_f32+0x10c>
 8008288:	f100 0420 	add.w	r4, r0, #32
 800828c:	f101 0510 	add.w	r5, r1, #16
 8008290:	4646      	mov	r6, r8
 8008292:	2700      	movs	r7, #0
 8008294:	e05a      	b.n	800834c <arm_cmplx_mag_f32+0xd0>
 8008296:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800829a:	eeb4 0a40 	vcmp.f32	s0, s0
 800829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a2:	f040 80a4 	bne.w	80083ee <arm_cmplx_mag_f32+0x172>
 80082a6:	ed05 0a04 	vstr	s0, [r5, #-16]
 80082aa:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80082ae:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 80082b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80082b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80082ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80082be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c6:	f2c0 808f 	blt.w	80083e8 <arm_cmplx_mag_f32+0x16c>
 80082ca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80082ce:	eeb4 0a40 	vcmp.f32	s0, s0
 80082d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d6:	f040 80af 	bne.w	8008438 <arm_cmplx_mag_f32+0x1bc>
 80082da:	ed05 0a03 	vstr	s0, [r5, #-12]
 80082de:	ed54 7a04 	vldr	s15, [r4, #-16]
 80082e2:	ed14 0a03 	vldr	s0, [r4, #-12]
 80082e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80082ea:	ee20 0a00 	vmul.f32	s0, s0, s0
 80082ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80082f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fa:	db72      	blt.n	80083e2 <arm_cmplx_mag_f32+0x166>
 80082fc:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008300:	eeb4 0a40 	vcmp.f32	s0, s0
 8008304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008308:	f040 808c 	bne.w	8008424 <arm_cmplx_mag_f32+0x1a8>
 800830c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008310:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008314:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008318:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800831c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008320:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832c:	db20      	blt.n	8008370 <arm_cmplx_mag_f32+0xf4>
 800832e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008332:	eeb4 0a40 	vcmp.f32	s0, s0
 8008336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833a:	d169      	bne.n	8008410 <arm_cmplx_mag_f32+0x194>
 800833c:	3e01      	subs	r6, #1
 800833e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008342:	f104 0420 	add.w	r4, r4, #32
 8008346:	f105 0510 	add.w	r5, r5, #16
 800834a:	d019      	beq.n	8008380 <arm_cmplx_mag_f32+0x104>
 800834c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008350:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008354:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008358:	ee20 0a00 	vmul.f32	s0, s0, s0
 800835c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008368:	da95      	bge.n	8008296 <arm_cmplx_mag_f32+0x1a>
 800836a:	f845 7c10 	str.w	r7, [r5, #-16]
 800836e:	e79c      	b.n	80082aa <arm_cmplx_mag_f32+0x2e>
 8008370:	3e01      	subs	r6, #1
 8008372:	f845 7c04 	str.w	r7, [r5, #-4]
 8008376:	f104 0420 	add.w	r4, r4, #32
 800837a:	f105 0510 	add.w	r5, r5, #16
 800837e:	d1e5      	bne.n	800834c <arm_cmplx_mag_f32+0xd0>
 8008380:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008384:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008388:	f012 0503 	ands.w	r5, r2, #3
 800838c:	d026      	beq.n	80083dc <arm_cmplx_mag_f32+0x160>
 800838e:	f100 0408 	add.w	r4, r0, #8
 8008392:	2600      	movs	r6, #0
 8008394:	e00c      	b.n	80083b0 <arm_cmplx_mag_f32+0x134>
 8008396:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800839a:	eeb4 0a40 	vcmp.f32	s0, s0
 800839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a2:	d12e      	bne.n	8008402 <arm_cmplx_mag_f32+0x186>
 80083a4:	3d01      	subs	r5, #1
 80083a6:	ed01 0a01 	vstr	s0, [r1, #-4]
 80083aa:	f104 0408 	add.w	r4, r4, #8
 80083ae:	d015      	beq.n	80083dc <arm_cmplx_mag_f32+0x160>
 80083b0:	ed54 7a02 	vldr	s15, [r4, #-8]
 80083b4:	3104      	adds	r1, #4
 80083b6:	ed14 0a01 	vldr	s0, [r4, #-4]
 80083ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80083be:	ee20 0a00 	vmul.f32	s0, s0, s0
 80083c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80083c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ce:	dae2      	bge.n	8008396 <arm_cmplx_mag_f32+0x11a>
 80083d0:	3d01      	subs	r5, #1
 80083d2:	f841 6c04 	str.w	r6, [r1, #-4]
 80083d6:	f104 0408 	add.w	r4, r4, #8
 80083da:	d1e9      	bne.n	80083b0 <arm_cmplx_mag_f32+0x134>
 80083dc:	b004      	add	sp, #16
 80083de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e2:	f845 7c08 	str.w	r7, [r5, #-8]
 80083e6:	e793      	b.n	8008310 <arm_cmplx_mag_f32+0x94>
 80083e8:	f845 7c0c 	str.w	r7, [r5, #-12]
 80083ec:	e777      	b.n	80082de <arm_cmplx_mag_f32+0x62>
 80083ee:	eeb0 0a67 	vmov.f32	s0, s15
 80083f2:	9203      	str	r2, [sp, #12]
 80083f4:	9102      	str	r1, [sp, #8]
 80083f6:	9001      	str	r0, [sp, #4]
 80083f8:	f002 fb7e 	bl	800aaf8 <sqrtf>
 80083fc:	a801      	add	r0, sp, #4
 80083fe:	c807      	ldmia	r0, {r0, r1, r2}
 8008400:	e751      	b.n	80082a6 <arm_cmplx_mag_f32+0x2a>
 8008402:	eeb0 0a67 	vmov.f32	s0, s15
 8008406:	9101      	str	r1, [sp, #4]
 8008408:	f002 fb76 	bl	800aaf8 <sqrtf>
 800840c:	9901      	ldr	r1, [sp, #4]
 800840e:	e7c9      	b.n	80083a4 <arm_cmplx_mag_f32+0x128>
 8008410:	eeb0 0a67 	vmov.f32	s0, s15
 8008414:	9203      	str	r2, [sp, #12]
 8008416:	9102      	str	r1, [sp, #8]
 8008418:	9001      	str	r0, [sp, #4]
 800841a:	f002 fb6d 	bl	800aaf8 <sqrtf>
 800841e:	a801      	add	r0, sp, #4
 8008420:	c807      	ldmia	r0, {r0, r1, r2}
 8008422:	e78b      	b.n	800833c <arm_cmplx_mag_f32+0xc0>
 8008424:	eeb0 0a67 	vmov.f32	s0, s15
 8008428:	9203      	str	r2, [sp, #12]
 800842a:	9102      	str	r1, [sp, #8]
 800842c:	9001      	str	r0, [sp, #4]
 800842e:	f002 fb63 	bl	800aaf8 <sqrtf>
 8008432:	a801      	add	r0, sp, #4
 8008434:	c807      	ldmia	r0, {r0, r1, r2}
 8008436:	e769      	b.n	800830c <arm_cmplx_mag_f32+0x90>
 8008438:	eeb0 0a67 	vmov.f32	s0, s15
 800843c:	9203      	str	r2, [sp, #12]
 800843e:	9102      	str	r1, [sp, #8]
 8008440:	9001      	str	r0, [sp, #4]
 8008442:	f002 fb59 	bl	800aaf8 <sqrtf>
 8008446:	a801      	add	r0, sp, #4
 8008448:	c807      	ldmia	r0, {r0, r1, r2}
 800844a:	e746      	b.n	80082da <arm_cmplx_mag_f32+0x5e>

0800844c <arm_mult_f32>:
 800844c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8008452:	d033      	beq.n	80084bc <arm_mult_f32+0x70>
 8008454:	f100 0610 	add.w	r6, r0, #16
 8008458:	f101 0510 	add.w	r5, r1, #16
 800845c:	f102 0410 	add.w	r4, r2, #16
 8008460:	4677      	mov	r7, lr
 8008462:	ed16 7a04 	vldr	s14, [r6, #-16]
 8008466:	3f01      	subs	r7, #1
 8008468:	ed15 6a04 	vldr	s12, [r5, #-16]
 800846c:	f106 0610 	add.w	r6, r6, #16
 8008470:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8008474:	f105 0510 	add.w	r5, r5, #16
 8008478:	ee27 6a06 	vmul.f32	s12, s14, s12
 800847c:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8008480:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8008484:	f104 0410 	add.w	r4, r4, #16
 8008488:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800848c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008490:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8008494:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8008498:	ee27 7a25 	vmul.f32	s14, s14, s11
 800849c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80084a0:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 80084a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80084a8:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 80084ac:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80084b0:	d1d7      	bne.n	8008462 <arm_mult_f32+0x16>
 80084b2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80084b6:	4420      	add	r0, r4
 80084b8:	4421      	add	r1, r4
 80084ba:	4422      	add	r2, r4
 80084bc:	f013 0303 	ands.w	r3, r3, #3
 80084c0:	d009      	beq.n	80084d6 <arm_mult_f32+0x8a>
 80084c2:	ecf0 7a01 	vldmia	r0!, {s15}
 80084c6:	3b01      	subs	r3, #1
 80084c8:	ecb1 7a01 	vldmia	r1!, {s14}
 80084cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084d0:	ece2 7a01 	vstmia	r2!, {s15}
 80084d4:	d1f5      	bne.n	80084c2 <arm_mult_f32+0x76>
 80084d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084d8 <arm_abs_f32>:
 80084d8:	b470      	push	{r4, r5, r6}
 80084da:	0896      	lsrs	r6, r2, #2
 80084dc:	d025      	beq.n	800852a <arm_abs_f32+0x52>
 80084de:	f100 0410 	add.w	r4, r0, #16
 80084e2:	f101 0310 	add.w	r3, r1, #16
 80084e6:	4635      	mov	r5, r6
 80084e8:	ed14 6a04 	vldr	s12, [r4, #-16]
 80084ec:	3d01      	subs	r5, #1
 80084ee:	ed54 6a03 	vldr	s13, [r4, #-12]
 80084f2:	f103 0310 	add.w	r3, r3, #16
 80084f6:	ed14 7a02 	vldr	s14, [r4, #-8]
 80084fa:	eeb0 6ac6 	vabs.f32	s12, s12
 80084fe:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008502:	eef0 6ae6 	vabs.f32	s13, s13
 8008506:	eeb0 7ac7 	vabs.f32	s14, s14
 800850a:	f104 0410 	add.w	r4, r4, #16
 800850e:	eef0 7ae7 	vabs.f32	s15, s15
 8008512:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
 8008516:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800851a:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 800851e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8008522:	d1e1      	bne.n	80084e8 <arm_abs_f32+0x10>
 8008524:	0136      	lsls	r6, r6, #4
 8008526:	4430      	add	r0, r6
 8008528:	4431      	add	r1, r6
 800852a:	f012 0203 	ands.w	r2, r2, #3
 800852e:	d007      	beq.n	8008540 <arm_abs_f32+0x68>
 8008530:	ecf0 7a01 	vldmia	r0!, {s15}
 8008534:	3a01      	subs	r2, #1
 8008536:	eef0 7ae7 	vabs.f32	s15, s15
 800853a:	ece1 7a01 	vstmia	r1!, {s15}
 800853e:	d1f7      	bne.n	8008530 <arm_abs_f32+0x58>
 8008540:	bc70      	pop	{r4, r5, r6}
 8008542:	4770      	bx	lr

08008544 <arm_radix8_butterfly_f32>:
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	469e      	mov	lr, r3
 800854a:	4603      	mov	r3, r0
 800854c:	468a      	mov	sl, r1
 800854e:	468b      	mov	fp, r1
 8008550:	3304      	adds	r3, #4
 8008552:	ed2d 8b10 	vpush	{d8-d15}
 8008556:	469c      	mov	ip, r3
 8008558:	b09d      	sub	sp, #116	; 0x74
 800855a:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 8008868 <arm_radix8_butterfly_f32+0x324>
 800855e:	9019      	str	r0, [sp, #100]	; 0x64
 8008560:	921a      	str	r2, [sp, #104]	; 0x68
 8008562:	931b      	str	r3, [sp, #108]	; 0x6c
 8008564:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008568:	f04f 0800 	mov.w	r8, #0
 800856c:	461a      	mov	r2, r3
 800856e:	9311      	str	r3, [sp, #68]	; 0x44
 8008570:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008574:	4611      	mov	r1, r2
 8008576:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	0053      	lsls	r3, r2, #1
 800857e:	18d5      	adds	r5, r2, r3
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	0113      	lsls	r3, r2, #4
 8008584:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008586:	194c      	adds	r4, r1, r5
 8008588:	eb02 0609 	add.w	r6, r2, r9
 800858c:	9302      	str	r3, [sp, #8]
 800858e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008592:	4613      	mov	r3, r2
 8008594:	190a      	adds	r2, r1, r4
 8008596:	eb06 0709 	add.w	r7, r6, r9
 800859a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800859e:	1888      	adds	r0, r1, r2
 80085a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80085a4:	4401      	add	r1, r0
 80085a6:	3204      	adds	r2, #4
 80085a8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80085ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80085b0:	9b00      	ldr	r3, [sp, #0]
 80085b2:	3104      	adds	r1, #4
 80085b4:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80085b8:	44d8      	add	r8, fp
 80085ba:	ed90 7a00 	vldr	s14, [r0]
 80085be:	ed94 5a00 	vldr	s10, [r4]
 80085c2:	45c2      	cmp	sl, r8
 80085c4:	edd7 3a00 	vldr	s7, [r7]
 80085c8:	ed96 6a00 	vldr	s12, [r6]
 80085cc:	ee37 1a85 	vadd.f32	s2, s15, s10
 80085d0:	ed52 6a01 	vldr	s13, [r2, #-4]
 80085d4:	ee73 4a87 	vadd.f32	s9, s7, s14
 80085d8:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80085dc:	edd5 7a00 	vldr	s15, [r5]
 80085e0:	ee73 3ac7 	vsub.f32	s7, s7, s14
 80085e4:	ed11 7a01 	vldr	s14, [r1, #-4]
 80085e8:	ee36 2a26 	vadd.f32	s4, s12, s13
 80085ec:	ee37 4a87 	vadd.f32	s8, s15, s14
 80085f0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80085f4:	ee71 5a24 	vadd.f32	s11, s2, s9
 80085f8:	ee32 6a04 	vadd.f32	s12, s4, s8
 80085fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008600:	ee31 1a64 	vsub.f32	s2, s2, s9
 8008604:	ee75 4a86 	vadd.f32	s9, s11, s12
 8008608:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800860c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8008610:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8008614:	ee32 2a44 	vsub.f32	s4, s4, s8
 8008618:	ee67 7a89 	vmul.f32	s15, s15, s18
 800861c:	ed94 0a01 	vldr	s0, [r4, #4]
 8008620:	edc4 5a00 	vstr	s11, [r4]
 8008624:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008628:	edd6 5a01 	vldr	s11, [r6, #4]
 800862c:	edd5 2a01 	vldr	s5, [r5, #4]
 8008630:	ee75 1a27 	vadd.f32	s3, s10, s15
 8008634:	ed92 4a00 	vldr	s8, [r2]
 8008638:	ee75 7a67 	vsub.f32	s15, s10, s15
 800863c:	edd1 4a00 	vldr	s9, [r1]
 8008640:	ee27 7a09 	vmul.f32	s14, s14, s18
 8008644:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8008648:	ed9c 6a00 	vldr	s12, [ip]
 800864c:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8008650:	edd0 0a01 	vldr	s1, [r0, #4]
 8008654:	ed97 5a01 	vldr	s10, [r7, #4]
 8008658:	ee35 4a84 	vadd.f32	s8, s11, s8
 800865c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8008660:	ee73 5a26 	vadd.f32	s11, s6, s13
 8008664:	ee76 2a00 	vadd.f32	s5, s12, s0
 8008668:	ee73 6a66 	vsub.f32	s13, s6, s13
 800866c:	ee36 6a40 	vsub.f32	s12, s12, s0
 8008670:	ee35 0a20 	vadd.f32	s0, s10, s1
 8008674:	ee65 5a89 	vmul.f32	s11, s11, s18
 8008678:	ee35 5a60 	vsub.f32	s10, s10, s1
 800867c:	ee32 3a80 	vadd.f32	s6, s5, s0
 8008680:	ee74 0a24 	vadd.f32	s1, s8, s9
 8008684:	ee66 6a89 	vmul.f32	s13, s13, s18
 8008688:	ee74 4a64 	vsub.f32	s9, s8, s9
 800868c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8008690:	ee75 2a25 	vadd.f32	s5, s10, s11
 8008694:	ee33 0a20 	vadd.f32	s0, s6, s1
 8008698:	ee75 5a65 	vsub.f32	s11, s10, s11
 800869c:	ee33 3a60 	vsub.f32	s6, s6, s1
 80086a0:	ee36 5a26 	vadd.f32	s10, s12, s13
 80086a4:	ed8c 0a00 	vstr	s0, [ip]
 80086a8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80086ac:	449c      	add	ip, r3
 80086ae:	ee33 6a87 	vadd.f32	s12, s7, s14
 80086b2:	ed84 3a01 	vstr	s6, [r4, #4]
 80086b6:	ee33 7ac7 	vsub.f32	s14, s7, s14
 80086ba:	441c      	add	r4, r3
 80086bc:	ee71 3a24 	vadd.f32	s7, s2, s9
 80086c0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80086c4:	ee31 3aa2 	vadd.f32	s6, s3, s5
 80086c8:	edc7 3a00 	vstr	s7, [r7]
 80086cc:	ee34 1a42 	vsub.f32	s2, s8, s4
 80086d0:	edc0 4a00 	vstr	s9, [r0]
 80086d4:	ee77 3aa5 	vadd.f32	s7, s15, s11
 80086d8:	ee75 4a46 	vsub.f32	s9, s10, s12
 80086dc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80086e0:	ed87 1a01 	vstr	s2, [r7, #4]
 80086e4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80086e8:	441f      	add	r7, r3
 80086ea:	ee32 4a04 	vadd.f32	s8, s4, s8
 80086ee:	ee71 1ae2 	vsub.f32	s3, s3, s5
 80086f2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80086f6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80086fa:	ed80 4a01 	vstr	s8, [r0, #4]
 80086fe:	ed86 3a00 	vstr	s6, [r6]
 8008702:	4418      	add	r0, r3
 8008704:	ed41 1a01 	vstr	s3, [r1, #-4]
 8008708:	ed42 3a01 	vstr	s7, [r2, #-4]
 800870c:	edc5 7a00 	vstr	s15, [r5]
 8008710:	edc6 4a01 	vstr	s9, [r6, #4]
 8008714:	441e      	add	r6, r3
 8008716:	ed81 6a00 	vstr	s12, [r1]
 800871a:	4419      	add	r1, r3
 800871c:	edc2 5a00 	vstr	s11, [r2]
 8008720:	441a      	add	r2, r3
 8008722:	ed85 7a01 	vstr	s14, [r5, #4]
 8008726:	441d      	add	r5, r3
 8008728:	f63f af44 	bhi.w	80085b4 <arm_radix8_butterfly_f32+0x70>
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008730:	2b07      	cmp	r3, #7
 8008732:	f240 81f4 	bls.w	8008b1e <arm_radix8_butterfly_f32+0x5da>
 8008736:	9901      	ldr	r1, [sp, #4]
 8008738:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800873c:	9d02      	ldr	r5, [sp, #8]
 800873e:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8008742:	3101      	adds	r1, #1
 8008744:	eb04 000e 	add.w	r0, r4, lr
 8008748:	00e4      	lsls	r4, r4, #3
 800874a:	3508      	adds	r5, #8
 800874c:	4419      	add	r1, r3
 800874e:	eb00 0c0e 	add.w	ip, r0, lr
 8008752:	9413      	str	r4, [sp, #76]	; 0x4c
 8008754:	00c0      	lsls	r0, r0, #3
 8008756:	185e      	adds	r6, r3, r1
 8008758:	4617      	mov	r7, r2
 800875a:	9218      	str	r2, [sp, #96]	; 0x60
 800875c:	f109 0908 	add.w	r9, r9, #8
 8008760:	199c      	adds	r4, r3, r6
 8008762:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008764:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008766:	9012      	str	r0, [sp, #72]	; 0x48
 8008768:	195d      	adds	r5, r3, r5
 800876a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800876c:	443a      	add	r2, r7
 800876e:	950c      	str	r5, [sp, #48]	; 0x30
 8008770:	4698      	mov	r8, r3
 8008772:	4420      	add	r0, r4
 8008774:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008776:	19d7      	adds	r7, r2, r7
 8008778:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800877c:	4405      	add	r5, r0
 800877e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008782:	9710      	str	r7, [sp, #64]	; 0x40
 8008784:	eb0c 070e 	add.w	r7, ip, lr
 8008788:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800878c:	3404      	adds	r4, #4
 800878e:	3004      	adds	r0, #4
 8008790:	44c8      	add	r8, r9
 8008792:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8008796:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008798:	940a      	str	r4, [sp, #40]	; 0x28
 800879a:	9009      	str	r0, [sp, #36]	; 0x24
 800879c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80087a0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80087a2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80087a6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80087a8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80087ac:	eb07 080e 	add.w	r8, r7, lr
 80087b0:	eb04 0900 	add.w	r9, r4, r0
 80087b4:	00f8      	lsls	r0, r7, #3
 80087b6:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 80087ba:	3504      	adds	r5, #4
 80087bc:	4607      	mov	r7, r0
 80087be:	9017      	str	r0, [sp, #92]	; 0x5c
 80087c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80087c2:	4618      	mov	r0, r3
 80087c4:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 80087c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ca:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 80087ce:	18e3      	adds	r3, r4, r3
 80087d0:	9508      	str	r5, [sp, #32]
 80087d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80087d4:	910e      	str	r1, [sp, #56]	; 0x38
 80087d6:	4621      	mov	r1, r4
 80087d8:	eb04 0805 	add.w	r8, r4, r5
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	19e5      	adds	r5, r4, r7
 80087e0:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80087e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80087e6:	9316      	str	r3, [sp, #88]	; 0x58
 80087e8:	190b      	adds	r3, r1, r4
 80087ea:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80087ec:	9505      	str	r5, [sp, #20]
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	f100 0308 	add.w	r3, r0, #8
 80087f4:	9707      	str	r7, [sp, #28]
 80087f6:	4638      	mov	r0, r7
 80087f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80087fa:	2301      	movs	r3, #1
 80087fc:	9306      	str	r3, [sp, #24]
 80087fe:	9b00      	ldr	r3, [sp, #0]
 8008800:	ed90 fa00 	vldr	s30, [r0]
 8008804:	edd0 ba01 	vldr	s23, [r0, #4]
 8008808:	9803      	ldr	r0, [sp, #12]
 800880a:	9903      	ldr	r1, [sp, #12]
 800880c:	ed90 ba01 	vldr	s22, [r0, #4]
 8008810:	9804      	ldr	r0, [sp, #16]
 8008812:	edd1 ea00 	vldr	s29, [r1]
 8008816:	edd0 aa01 	vldr	s21, [r0, #4]
 800881a:	9805      	ldr	r0, [sp, #20]
 800881c:	9905      	ldr	r1, [sp, #20]
 800881e:	edd0 7a01 	vldr	s15, [r0, #4]
 8008822:	ed91 da00 	vldr	s26, [r1]
 8008826:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008828:	9c04      	ldr	r4, [sp, #16]
 800882a:	edcd 7a01 	vstr	s15, [sp, #4]
 800882e:	edd8 7a01 	vldr	s15, [r8, #4]
 8008832:	9100      	str	r1, [sp, #0]
 8008834:	edd2 fa00 	vldr	s31, [r2]
 8008838:	ed94 ea00 	vldr	s28, [r4]
 800883c:	ed92 ca01 	vldr	s24, [r2, #4]
 8008840:	f8dd e020 	ldr.w	lr, [sp, #32]
 8008844:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008846:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008848:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800884a:	edd9 da00 	vldr	s27, [r9]
 800884e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008850:	edd8 ca00 	vldr	s25, [r8]
 8008854:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008856:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008858:	f8dd c018 	ldr.w	ip, [sp, #24]
 800885c:	ed99 aa01 	vldr	s20, [r9, #4]
 8008860:	edcd 7a02 	vstr	s15, [sp, #8]
 8008864:	9800      	ldr	r0, [sp, #0]
 8008866:	e001      	b.n	800886c <arm_radix8_butterfly_f32+0x328>
 8008868:	3f3504f3 	.word	0x3f3504f3
 800886c:	edd5 3a00 	vldr	s7, [r5]
 8008870:	44dc      	add	ip, fp
 8008872:	ed91 7a00 	vldr	s14, [r1]
 8008876:	edd4 8a00 	vldr	s17, [r4]
 800887a:	45e2      	cmp	sl, ip
 800887c:	ed57 7a01 	vldr	s15, [r7, #-4]
 8008880:	ed90 5a00 	vldr	s10, [r0]
 8008884:	ed56 5a01 	vldr	s11, [r6, #-4]
 8008888:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800888c:	ed92 1a00 	vldr	s2, [r2]
 8008890:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8008894:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8008898:	ee75 9a25 	vadd.f32	s19, s10, s11
 800889c:	ee31 3a07 	vadd.f32	s6, s2, s14
 80088a0:	ed92 8a01 	vldr	s16, [r2, #4]
 80088a4:	ee73 6a84 	vadd.f32	s13, s7, s8
 80088a8:	ee75 5a65 	vsub.f32	s11, s10, s11
 80088ac:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80088b0:	ee73 1a06 	vadd.f32	s3, s6, s12
 80088b4:	ee39 5aa6 	vadd.f32	s10, s19, s13
 80088b8:	ee75 7a84 	vadd.f32	s15, s11, s8
 80088bc:	ee31 1a47 	vsub.f32	s2, s2, s14
 80088c0:	ee31 7a85 	vadd.f32	s14, s3, s10
 80088c4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80088c8:	ee33 3a46 	vsub.f32	s6, s6, s12
 80088cc:	ed82 7a00 	vstr	s14, [r2]
 80088d0:	ee79 9ae6 	vsub.f32	s19, s19, s13
 80088d4:	ed96 6a00 	vldr	s12, [r6]
 80088d8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80088dc:	edd5 3a01 	vldr	s7, [r5, #4]
 80088e0:	ee74 8ae7 	vsub.f32	s17, s9, s15
 80088e4:	ed90 7a01 	vldr	s14, [r0, #4]
 80088e8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80088ec:	edde 4a00 	vldr	s9, [lr]
 80088f0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80088f4:	ee77 2a46 	vsub.f32	s5, s14, s12
 80088f8:	edd1 6a01 	vldr	s13, [r1, #4]
 80088fc:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8008900:	edd7 0a00 	vldr	s1, [r7]
 8008904:	ee77 5a06 	vadd.f32	s11, s14, s12
 8008908:	ed94 7a01 	vldr	s14, [r4, #4]
 800890c:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8008910:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8008914:	ee78 4a66 	vsub.f32	s9, s16, s13
 8008918:	ee78 3a26 	vadd.f32	s7, s16, s13
 800891c:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8008920:	ee77 6a20 	vadd.f32	s13, s14, s1
 8008924:	ee24 4a09 	vmul.f32	s8, s8, s18
 8008928:	ee37 7a60 	vsub.f32	s14, s14, s1
 800892c:	ee20 8a09 	vmul.f32	s16, s0, s18
 8008930:	ee75 0a86 	vadd.f32	s1, s11, s12
 8008934:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8008938:	ee62 2a89 	vmul.f32	s5, s5, s18
 800893c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008940:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8008944:	ee77 7a62 	vsub.f32	s15, s14, s5
 8008948:	ee74 5a88 	vadd.f32	s11, s9, s16
 800894c:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8008950:	ee77 4a22 	vadd.f32	s9, s14, s5
 8008954:	ee71 2a04 	vadd.f32	s5, s2, s8
 8008958:	ee31 7a44 	vsub.f32	s14, s2, s8
 800895c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8008960:	ee73 1a06 	vadd.f32	s3, s6, s12
 8008964:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008968:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800896c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8008970:	ee38 4a68 	vsub.f32	s8, s16, s17
 8008974:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8008978:	ee72 5a25 	vadd.f32	s11, s4, s11
 800897c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8008980:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8008984:	ee77 2a27 	vadd.f32	s5, s14, s15
 8008988:	ee37 7a67 	vsub.f32	s14, s14, s15
 800898c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8008990:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8008994:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8008998:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800899c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 80089a0:	ee6f 9a21 	vmul.f32	s19, s30, s3
 80089a4:	ee70 0a20 	vadd.f32	s1, s0, s1
 80089a8:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 80089ac:	ee2b 0a83 	vmul.f32	s0, s23, s6
 80089b0:	ee2f 3a03 	vmul.f32	s6, s30, s6
 80089b4:	edc2 0a01 	vstr	s1, [r2, #4]
 80089b8:	ee38 8a88 	vadd.f32	s16, s17, s16
 80089bc:	441a      	add	r2, r3
 80089be:	ee6c 8a23 	vmul.f32	s17, s24, s7
 80089c2:	ee31 5a45 	vsub.f32	s10, s2, s10
 80089c6:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 80089ca:	ed81 8a00 	vstr	s16, [r1]
 80089ce:	ee39 0a80 	vadd.f32	s0, s19, s0
 80089d2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80089d6:	ed81 5a01 	vstr	s10, [r1, #4]
 80089da:	ee6f 0a82 	vmul.f32	s1, s31, s4
 80089de:	edcd 3a00 	vstr	s7, [sp]
 80089e2:	ed9d 5a02 	vldr	s10, [sp, #8]
 80089e6:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80089ea:	eddd 3a01 	vldr	s7, [sp, #4]
 80089ee:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80089f2:	ed84 0a00 	vstr	s0, [r4]
 80089f6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80089fa:	ed84 3a01 	vstr	s6, [r4, #4]
 80089fe:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8008a02:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008a06:	eddd 3a00 	vldr	s7, [sp]
 8008a0a:	ee25 5a25 	vmul.f32	s10, s10, s11
 8008a0e:	4419      	add	r1, r3
 8008a10:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8008a14:	441c      	add	r4, r3
 8008a16:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8008a1a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8008a1e:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8008a22:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8008a26:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8008a2a:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8008a2e:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8008a32:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8008a36:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8008a3a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8008a3e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8008a42:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008a46:	ee38 8a01 	vadd.f32	s16, s16, s2
 8008a4a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8008a4e:	ee39 5a85 	vadd.f32	s10, s19, s10
 8008a52:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8008a56:	ed07 8a01 	vstr	s16, [r7, #-4]
 8008a5a:	ee30 0a21 	vadd.f32	s0, s0, s3
 8008a5e:	ed87 6a00 	vstr	s12, [r7]
 8008a62:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008a66:	edc0 0a00 	vstr	s1, [r0]
 8008a6a:	ee33 3a28 	vadd.f32	s6, s6, s17
 8008a6e:	edc0 3a01 	vstr	s7, [r0, #4]
 8008a72:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008a76:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8008a7a:	edce 4a00 	vstr	s9, [lr]
 8008a7e:	4418      	add	r0, r3
 8008a80:	ed06 0a01 	vstr	s0, [r6, #-4]
 8008a84:	441f      	add	r7, r3
 8008a86:	edc6 2a00 	vstr	s5, [r6]
 8008a8a:	449e      	add	lr, r3
 8008a8c:	ed85 3a00 	vstr	s6, [r5]
 8008a90:	441e      	add	r6, r3
 8008a92:	ed85 7a01 	vstr	s14, [r5, #4]
 8008a96:	441d      	add	r5, r3
 8008a98:	f63f aee8 	bhi.w	800886c <arm_radix8_butterfly_f32+0x328>
 8008a9c:	9a06      	ldr	r2, [sp, #24]
 8008a9e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008aa0:	3201      	adds	r2, #1
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	9206      	str	r2, [sp, #24]
 8008aa6:	9a07      	ldr	r2, [sp, #28]
 8008aa8:	4402      	add	r2, r0
 8008aaa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008aac:	9207      	str	r2, [sp, #28]
 8008aae:	9a03      	ldr	r2, [sp, #12]
 8008ab0:	4402      	add	r2, r0
 8008ab2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ab4:	9203      	str	r2, [sp, #12]
 8008ab6:	9a04      	ldr	r2, [sp, #16]
 8008ab8:	4402      	add	r2, r0
 8008aba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008abc:	9204      	str	r2, [sp, #16]
 8008abe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ac0:	4491      	add	r9, r2
 8008ac2:	9a05      	ldr	r2, [sp, #20]
 8008ac4:	4402      	add	r2, r0
 8008ac6:	9205      	str	r2, [sp, #20]
 8008ac8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008aca:	4490      	add	r8, r2
 8008acc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ace:	3208      	adds	r2, #8
 8008ad0:	920f      	str	r2, [sp, #60]	; 0x3c
 8008ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ad4:	3208      	adds	r2, #8
 8008ad6:	920e      	str	r2, [sp, #56]	; 0x38
 8008ad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ada:	3208      	adds	r2, #8
 8008adc:	920d      	str	r2, [sp, #52]	; 0x34
 8008ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ae0:	3208      	adds	r2, #8
 8008ae2:	920c      	str	r2, [sp, #48]	; 0x30
 8008ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ae6:	3208      	adds	r2, #8
 8008ae8:	920b      	str	r2, [sp, #44]	; 0x2c
 8008aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aec:	3208      	adds	r2, #8
 8008aee:	920a      	str	r2, [sp, #40]	; 0x28
 8008af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af2:	3208      	adds	r2, #8
 8008af4:	9209      	str	r2, [sp, #36]	; 0x24
 8008af6:	9a08      	ldr	r2, [sp, #32]
 8008af8:	3208      	adds	r2, #8
 8008afa:	9208      	str	r2, [sp, #32]
 8008afc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008afe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008b00:	4622      	mov	r2, r4
 8008b02:	4288      	cmp	r0, r1
 8008b04:	d005      	beq.n	8008b12 <arm_radix8_butterfly_f32+0x5ce>
 8008b06:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4401      	add	r1, r0
 8008b0c:	9807      	ldr	r0, [sp, #28]
 8008b0e:	9110      	str	r1, [sp, #64]	; 0x40
 8008b10:	e676      	b.n	8008800 <arm_radix8_butterfly_f32+0x2bc>
 8008b12:	4683      	mov	fp, r0
 8008b14:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8008b18:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8008b1c:	e522      	b.n	8008564 <arm_radix8_butterfly_f32+0x20>
 8008b1e:	b01d      	add	sp, #116	; 0x74
 8008b20:	ecbd 8b10 	vpop	{d8-d15}
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b28 <__errno>:
 8008b28:	4b01      	ldr	r3, [pc, #4]	; (8008b30 <__errno+0x8>)
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20000014 	.word	0x20000014

08008b34 <__libc_init_array>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4e0d      	ldr	r6, [pc, #52]	; (8008b6c <__libc_init_array+0x38>)
 8008b38:	4c0d      	ldr	r4, [pc, #52]	; (8008b70 <__libc_init_array+0x3c>)
 8008b3a:	1ba4      	subs	r4, r4, r6
 8008b3c:	10a4      	asrs	r4, r4, #2
 8008b3e:	2500      	movs	r5, #0
 8008b40:	42a5      	cmp	r5, r4
 8008b42:	d109      	bne.n	8008b58 <__libc_init_array+0x24>
 8008b44:	4e0b      	ldr	r6, [pc, #44]	; (8008b74 <__libc_init_array+0x40>)
 8008b46:	4c0c      	ldr	r4, [pc, #48]	; (8008b78 <__libc_init_array+0x44>)
 8008b48:	f002 f82c 	bl	800aba4 <_init>
 8008b4c:	1ba4      	subs	r4, r4, r6
 8008b4e:	10a4      	asrs	r4, r4, #2
 8008b50:	2500      	movs	r5, #0
 8008b52:	42a5      	cmp	r5, r4
 8008b54:	d105      	bne.n	8008b62 <__libc_init_array+0x2e>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b5c:	4798      	blx	r3
 8008b5e:	3501      	adds	r5, #1
 8008b60:	e7ee      	b.n	8008b40 <__libc_init_array+0xc>
 8008b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b66:	4798      	blx	r3
 8008b68:	3501      	adds	r5, #1
 8008b6a:	e7f2      	b.n	8008b52 <__libc_init_array+0x1e>
 8008b6c:	0800dd80 	.word	0x0800dd80
 8008b70:	0800dd80 	.word	0x0800dd80
 8008b74:	0800dd80 	.word	0x0800dd80
 8008b78:	0800dd84 	.word	0x0800dd84

08008b7c <malloc>:
 8008b7c:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <malloc+0xc>)
 8008b7e:	4601      	mov	r1, r0
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	f000 b861 	b.w	8008c48 <_malloc_r>
 8008b86:	bf00      	nop
 8008b88:	20000014 	.word	0x20000014

08008b8c <free>:
 8008b8c:	4b02      	ldr	r3, [pc, #8]	; (8008b98 <free+0xc>)
 8008b8e:	4601      	mov	r1, r0
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	f000 b80b 	b.w	8008bac <_free_r>
 8008b96:	bf00      	nop
 8008b98:	20000014 	.word	0x20000014

08008b9c <memset>:
 8008b9c:	4402      	add	r2, r0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d100      	bne.n	8008ba6 <memset+0xa>
 8008ba4:	4770      	bx	lr
 8008ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8008baa:	e7f9      	b.n	8008ba0 <memset+0x4>

08008bac <_free_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4605      	mov	r5, r0
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	d045      	beq.n	8008c40 <_free_r+0x94>
 8008bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bb8:	1f0c      	subs	r4, r1, #4
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bfb8      	it	lt
 8008bbe:	18e4      	addlt	r4, r4, r3
 8008bc0:	f001 faf7 	bl	800a1b2 <__malloc_lock>
 8008bc4:	4a1f      	ldr	r2, [pc, #124]	; (8008c44 <_free_r+0x98>)
 8008bc6:	6813      	ldr	r3, [r2, #0]
 8008bc8:	4610      	mov	r0, r2
 8008bca:	b933      	cbnz	r3, 8008bda <_free_r+0x2e>
 8008bcc:	6063      	str	r3, [r4, #4]
 8008bce:	6014      	str	r4, [r2, #0]
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bd6:	f001 baed 	b.w	800a1b4 <__malloc_unlock>
 8008bda:	42a3      	cmp	r3, r4
 8008bdc:	d90c      	bls.n	8008bf8 <_free_r+0x4c>
 8008bde:	6821      	ldr	r1, [r4, #0]
 8008be0:	1862      	adds	r2, r4, r1
 8008be2:	4293      	cmp	r3, r2
 8008be4:	bf04      	itt	eq
 8008be6:	681a      	ldreq	r2, [r3, #0]
 8008be8:	685b      	ldreq	r3, [r3, #4]
 8008bea:	6063      	str	r3, [r4, #4]
 8008bec:	bf04      	itt	eq
 8008bee:	1852      	addeq	r2, r2, r1
 8008bf0:	6022      	streq	r2, [r4, #0]
 8008bf2:	6004      	str	r4, [r0, #0]
 8008bf4:	e7ec      	b.n	8008bd0 <_free_r+0x24>
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	b10a      	cbz	r2, 8008c00 <_free_r+0x54>
 8008bfc:	42a2      	cmp	r2, r4
 8008bfe:	d9fa      	bls.n	8008bf6 <_free_r+0x4a>
 8008c00:	6819      	ldr	r1, [r3, #0]
 8008c02:	1858      	adds	r0, r3, r1
 8008c04:	42a0      	cmp	r0, r4
 8008c06:	d10b      	bne.n	8008c20 <_free_r+0x74>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	4401      	add	r1, r0
 8008c0c:	1858      	adds	r0, r3, r1
 8008c0e:	4282      	cmp	r2, r0
 8008c10:	6019      	str	r1, [r3, #0]
 8008c12:	d1dd      	bne.n	8008bd0 <_free_r+0x24>
 8008c14:	6810      	ldr	r0, [r2, #0]
 8008c16:	6852      	ldr	r2, [r2, #4]
 8008c18:	605a      	str	r2, [r3, #4]
 8008c1a:	4401      	add	r1, r0
 8008c1c:	6019      	str	r1, [r3, #0]
 8008c1e:	e7d7      	b.n	8008bd0 <_free_r+0x24>
 8008c20:	d902      	bls.n	8008c28 <_free_r+0x7c>
 8008c22:	230c      	movs	r3, #12
 8008c24:	602b      	str	r3, [r5, #0]
 8008c26:	e7d3      	b.n	8008bd0 <_free_r+0x24>
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	1821      	adds	r1, r4, r0
 8008c2c:	428a      	cmp	r2, r1
 8008c2e:	bf04      	itt	eq
 8008c30:	6811      	ldreq	r1, [r2, #0]
 8008c32:	6852      	ldreq	r2, [r2, #4]
 8008c34:	6062      	str	r2, [r4, #4]
 8008c36:	bf04      	itt	eq
 8008c38:	1809      	addeq	r1, r1, r0
 8008c3a:	6021      	streq	r1, [r4, #0]
 8008c3c:	605c      	str	r4, [r3, #4]
 8008c3e:	e7c7      	b.n	8008bd0 <_free_r+0x24>
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	2000023c 	.word	0x2000023c

08008c48 <_malloc_r>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	1ccd      	adds	r5, r1, #3
 8008c4c:	f025 0503 	bic.w	r5, r5, #3
 8008c50:	3508      	adds	r5, #8
 8008c52:	2d0c      	cmp	r5, #12
 8008c54:	bf38      	it	cc
 8008c56:	250c      	movcc	r5, #12
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	db01      	blt.n	8008c62 <_malloc_r+0x1a>
 8008c5e:	42a9      	cmp	r1, r5
 8008c60:	d903      	bls.n	8008c6a <_malloc_r+0x22>
 8008c62:	230c      	movs	r3, #12
 8008c64:	6033      	str	r3, [r6, #0]
 8008c66:	2000      	movs	r0, #0
 8008c68:	bd70      	pop	{r4, r5, r6, pc}
 8008c6a:	f001 faa2 	bl	800a1b2 <__malloc_lock>
 8008c6e:	4a21      	ldr	r2, [pc, #132]	; (8008cf4 <_malloc_r+0xac>)
 8008c70:	6814      	ldr	r4, [r2, #0]
 8008c72:	4621      	mov	r1, r4
 8008c74:	b991      	cbnz	r1, 8008c9c <_malloc_r+0x54>
 8008c76:	4c20      	ldr	r4, [pc, #128]	; (8008cf8 <_malloc_r+0xb0>)
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	b91b      	cbnz	r3, 8008c84 <_malloc_r+0x3c>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f000 fc77 	bl	8009570 <_sbrk_r>
 8008c82:	6020      	str	r0, [r4, #0]
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 fc72 	bl	8009570 <_sbrk_r>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d124      	bne.n	8008cda <_malloc_r+0x92>
 8008c90:	230c      	movs	r3, #12
 8008c92:	6033      	str	r3, [r6, #0]
 8008c94:	4630      	mov	r0, r6
 8008c96:	f001 fa8d 	bl	800a1b4 <__malloc_unlock>
 8008c9a:	e7e4      	b.n	8008c66 <_malloc_r+0x1e>
 8008c9c:	680b      	ldr	r3, [r1, #0]
 8008c9e:	1b5b      	subs	r3, r3, r5
 8008ca0:	d418      	bmi.n	8008cd4 <_malloc_r+0x8c>
 8008ca2:	2b0b      	cmp	r3, #11
 8008ca4:	d90f      	bls.n	8008cc6 <_malloc_r+0x7e>
 8008ca6:	600b      	str	r3, [r1, #0]
 8008ca8:	50cd      	str	r5, [r1, r3]
 8008caa:	18cc      	adds	r4, r1, r3
 8008cac:	4630      	mov	r0, r6
 8008cae:	f001 fa81 	bl	800a1b4 <__malloc_unlock>
 8008cb2:	f104 000b 	add.w	r0, r4, #11
 8008cb6:	1d23      	adds	r3, r4, #4
 8008cb8:	f020 0007 	bic.w	r0, r0, #7
 8008cbc:	1ac3      	subs	r3, r0, r3
 8008cbe:	d0d3      	beq.n	8008c68 <_malloc_r+0x20>
 8008cc0:	425a      	negs	r2, r3
 8008cc2:	50e2      	str	r2, [r4, r3]
 8008cc4:	e7d0      	b.n	8008c68 <_malloc_r+0x20>
 8008cc6:	428c      	cmp	r4, r1
 8008cc8:	684b      	ldr	r3, [r1, #4]
 8008cca:	bf16      	itet	ne
 8008ccc:	6063      	strne	r3, [r4, #4]
 8008cce:	6013      	streq	r3, [r2, #0]
 8008cd0:	460c      	movne	r4, r1
 8008cd2:	e7eb      	b.n	8008cac <_malloc_r+0x64>
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	6849      	ldr	r1, [r1, #4]
 8008cd8:	e7cc      	b.n	8008c74 <_malloc_r+0x2c>
 8008cda:	1cc4      	adds	r4, r0, #3
 8008cdc:	f024 0403 	bic.w	r4, r4, #3
 8008ce0:	42a0      	cmp	r0, r4
 8008ce2:	d005      	beq.n	8008cf0 <_malloc_r+0xa8>
 8008ce4:	1a21      	subs	r1, r4, r0
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f000 fc42 	bl	8009570 <_sbrk_r>
 8008cec:	3001      	adds	r0, #1
 8008cee:	d0cf      	beq.n	8008c90 <_malloc_r+0x48>
 8008cf0:	6025      	str	r5, [r4, #0]
 8008cf2:	e7db      	b.n	8008cac <_malloc_r+0x64>
 8008cf4:	2000023c 	.word	0x2000023c
 8008cf8:	20000240 	.word	0x20000240

08008cfc <__cvt>:
 8008cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cfe:	ed2d 8b02 	vpush	{d8}
 8008d02:	eeb0 8b40 	vmov.f64	d8, d0
 8008d06:	b085      	sub	sp, #20
 8008d08:	4617      	mov	r7, r2
 8008d0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008d0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008d0e:	ee18 2a90 	vmov	r2, s17
 8008d12:	f025 0520 	bic.w	r5, r5, #32
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	bfb6      	itet	lt
 8008d1a:	222d      	movlt	r2, #45	; 0x2d
 8008d1c:	2200      	movge	r2, #0
 8008d1e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008d22:	2d46      	cmp	r5, #70	; 0x46
 8008d24:	460c      	mov	r4, r1
 8008d26:	701a      	strb	r2, [r3, #0]
 8008d28:	d004      	beq.n	8008d34 <__cvt+0x38>
 8008d2a:	2d45      	cmp	r5, #69	; 0x45
 8008d2c:	d100      	bne.n	8008d30 <__cvt+0x34>
 8008d2e:	3401      	adds	r4, #1
 8008d30:	2102      	movs	r1, #2
 8008d32:	e000      	b.n	8008d36 <__cvt+0x3a>
 8008d34:	2103      	movs	r1, #3
 8008d36:	ab03      	add	r3, sp, #12
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	ab02      	add	r3, sp, #8
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	4622      	mov	r2, r4
 8008d40:	4633      	mov	r3, r6
 8008d42:	eeb0 0b48 	vmov.f64	d0, d8
 8008d46:	f000 fccf 	bl	80096e8 <_dtoa_r>
 8008d4a:	2d47      	cmp	r5, #71	; 0x47
 8008d4c:	d101      	bne.n	8008d52 <__cvt+0x56>
 8008d4e:	07fb      	lsls	r3, r7, #31
 8008d50:	d51e      	bpl.n	8008d90 <__cvt+0x94>
 8008d52:	2d46      	cmp	r5, #70	; 0x46
 8008d54:	eb00 0304 	add.w	r3, r0, r4
 8008d58:	d10c      	bne.n	8008d74 <__cvt+0x78>
 8008d5a:	7802      	ldrb	r2, [r0, #0]
 8008d5c:	2a30      	cmp	r2, #48	; 0x30
 8008d5e:	d107      	bne.n	8008d70 <__cvt+0x74>
 8008d60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d68:	bf1c      	itt	ne
 8008d6a:	f1c4 0401 	rsbne	r4, r4, #1
 8008d6e:	6034      	strne	r4, [r6, #0]
 8008d70:	6832      	ldr	r2, [r6, #0]
 8008d72:	4413      	add	r3, r2
 8008d74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7c:	d007      	beq.n	8008d8e <__cvt+0x92>
 8008d7e:	2130      	movs	r1, #48	; 0x30
 8008d80:	9a03      	ldr	r2, [sp, #12]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d204      	bcs.n	8008d90 <__cvt+0x94>
 8008d86:	1c54      	adds	r4, r2, #1
 8008d88:	9403      	str	r4, [sp, #12]
 8008d8a:	7011      	strb	r1, [r2, #0]
 8008d8c:	e7f8      	b.n	8008d80 <__cvt+0x84>
 8008d8e:	9303      	str	r3, [sp, #12]
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d94:	1a1b      	subs	r3, r3, r0
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	b005      	add	sp, #20
 8008d9a:	ecbd 8b02 	vpop	{d8}
 8008d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008da0 <__exponent>:
 8008da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008da2:	2900      	cmp	r1, #0
 8008da4:	4604      	mov	r4, r0
 8008da6:	bfba      	itte	lt
 8008da8:	4249      	neglt	r1, r1
 8008daa:	232d      	movlt	r3, #45	; 0x2d
 8008dac:	232b      	movge	r3, #43	; 0x2b
 8008dae:	2909      	cmp	r1, #9
 8008db0:	f804 2b02 	strb.w	r2, [r4], #2
 8008db4:	7043      	strb	r3, [r0, #1]
 8008db6:	dd20      	ble.n	8008dfa <__exponent+0x5a>
 8008db8:	f10d 0307 	add.w	r3, sp, #7
 8008dbc:	461f      	mov	r7, r3
 8008dbe:	260a      	movs	r6, #10
 8008dc0:	fb91 f5f6 	sdiv	r5, r1, r6
 8008dc4:	fb06 1115 	mls	r1, r6, r5, r1
 8008dc8:	3130      	adds	r1, #48	; 0x30
 8008dca:	2d09      	cmp	r5, #9
 8008dcc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008dd0:	f103 32ff 	add.w	r2, r3, #4294967295
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	dc09      	bgt.n	8008dec <__exponent+0x4c>
 8008dd8:	3130      	adds	r1, #48	; 0x30
 8008dda:	3b02      	subs	r3, #2
 8008ddc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008de0:	42bb      	cmp	r3, r7
 8008de2:	4622      	mov	r2, r4
 8008de4:	d304      	bcc.n	8008df0 <__exponent+0x50>
 8008de6:	1a10      	subs	r0, r2, r0
 8008de8:	b003      	add	sp, #12
 8008dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dec:	4613      	mov	r3, r2
 8008dee:	e7e7      	b.n	8008dc0 <__exponent+0x20>
 8008df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df4:	f804 2b01 	strb.w	r2, [r4], #1
 8008df8:	e7f2      	b.n	8008de0 <__exponent+0x40>
 8008dfa:	2330      	movs	r3, #48	; 0x30
 8008dfc:	4419      	add	r1, r3
 8008dfe:	7083      	strb	r3, [r0, #2]
 8008e00:	1d02      	adds	r2, r0, #4
 8008e02:	70c1      	strb	r1, [r0, #3]
 8008e04:	e7ef      	b.n	8008de6 <__exponent+0x46>
	...

08008e08 <_printf_float>:
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	b08d      	sub	sp, #52	; 0x34
 8008e0e:	460c      	mov	r4, r1
 8008e10:	4616      	mov	r6, r2
 8008e12:	461f      	mov	r7, r3
 8008e14:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008e18:	4605      	mov	r5, r0
 8008e1a:	f001 f9b1 	bl	800a180 <_localeconv_r>
 8008e1e:	f8d0 b000 	ldr.w	fp, [r0]
 8008e22:	4658      	mov	r0, fp
 8008e24:	f7f7 fabc 	bl	80003a0 <strlen>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e30:	9005      	str	r0, [sp, #20]
 8008e32:	3307      	adds	r3, #7
 8008e34:	f023 0307 	bic.w	r3, r3, #7
 8008e38:	f103 0108 	add.w	r1, r3, #8
 8008e3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	f8c8 1000 	str.w	r1, [r8]
 8008e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e4a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008e4e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80090d8 <_printf_float+0x2d0>
 8008e52:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008e56:	eeb0 6bc0 	vabs.f64	d6, d0
 8008e5a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e62:	dd24      	ble.n	8008eae <_printf_float+0xa6>
 8008e64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6c:	d502      	bpl.n	8008e74 <_printf_float+0x6c>
 8008e6e:	232d      	movs	r3, #45	; 0x2d
 8008e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e74:	499a      	ldr	r1, [pc, #616]	; (80090e0 <_printf_float+0x2d8>)
 8008e76:	4b9b      	ldr	r3, [pc, #620]	; (80090e4 <_printf_float+0x2dc>)
 8008e78:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008e7c:	bf8c      	ite	hi
 8008e7e:	4688      	movhi	r8, r1
 8008e80:	4698      	movls	r8, r3
 8008e82:	f022 0204 	bic.w	r2, r2, #4
 8008e86:	2303      	movs	r3, #3
 8008e88:	6123      	str	r3, [r4, #16]
 8008e8a:	6022      	str	r2, [r4, #0]
 8008e8c:	f04f 0a00 	mov.w	sl, #0
 8008e90:	9700      	str	r7, [sp, #0]
 8008e92:	4633      	mov	r3, r6
 8008e94:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e96:	4621      	mov	r1, r4
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f000 f9e1 	bl	8009260 <_printf_common>
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f040 8089 	bne.w	8008fb6 <_printf_float+0x1ae>
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	b00d      	add	sp, #52	; 0x34
 8008eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eae:	eeb4 0b40 	vcmp.f64	d0, d0
 8008eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb6:	d702      	bvc.n	8008ebe <_printf_float+0xb6>
 8008eb8:	498b      	ldr	r1, [pc, #556]	; (80090e8 <_printf_float+0x2e0>)
 8008eba:	4b8c      	ldr	r3, [pc, #560]	; (80090ec <_printf_float+0x2e4>)
 8008ebc:	e7dc      	b.n	8008e78 <_printf_float+0x70>
 8008ebe:	6861      	ldr	r1, [r4, #4]
 8008ec0:	1c4b      	adds	r3, r1, #1
 8008ec2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ec6:	ab0a      	add	r3, sp, #40	; 0x28
 8008ec8:	a809      	add	r0, sp, #36	; 0x24
 8008eca:	d13b      	bne.n	8008f44 <_printf_float+0x13c>
 8008ecc:	2106      	movs	r1, #6
 8008ece:	6061      	str	r1, [r4, #4]
 8008ed0:	f04f 0c00 	mov.w	ip, #0
 8008ed4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8008ed8:	e9cd 0900 	strd	r0, r9, [sp]
 8008edc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ee0:	6022      	str	r2, [r4, #0]
 8008ee2:	6861      	ldr	r1, [r4, #4]
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f7ff ff09 	bl	8008cfc <__cvt>
 8008eea:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8008eee:	2b47      	cmp	r3, #71	; 0x47
 8008ef0:	4680      	mov	r8, r0
 8008ef2:	d109      	bne.n	8008f08 <_printf_float+0x100>
 8008ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef6:	1cd8      	adds	r0, r3, #3
 8008ef8:	db02      	blt.n	8008f00 <_printf_float+0xf8>
 8008efa:	6862      	ldr	r2, [r4, #4]
 8008efc:	4293      	cmp	r3, r2
 8008efe:	dd47      	ble.n	8008f90 <_printf_float+0x188>
 8008f00:	f1a9 0902 	sub.w	r9, r9, #2
 8008f04:	fa5f f989 	uxtb.w	r9, r9
 8008f08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f0e:	d824      	bhi.n	8008f5a <_printf_float+0x152>
 8008f10:	3901      	subs	r1, #1
 8008f12:	464a      	mov	r2, r9
 8008f14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f18:	9109      	str	r1, [sp, #36]	; 0x24
 8008f1a:	f7ff ff41 	bl	8008da0 <__exponent>
 8008f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f20:	1813      	adds	r3, r2, r0
 8008f22:	2a01      	cmp	r2, #1
 8008f24:	4682      	mov	sl, r0
 8008f26:	6123      	str	r3, [r4, #16]
 8008f28:	dc02      	bgt.n	8008f30 <_printf_float+0x128>
 8008f2a:	6822      	ldr	r2, [r4, #0]
 8008f2c:	07d1      	lsls	r1, r2, #31
 8008f2e:	d501      	bpl.n	8008f34 <_printf_float+0x12c>
 8008f30:	3301      	adds	r3, #1
 8008f32:	6123      	str	r3, [r4, #16]
 8008f34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d0a9      	beq.n	8008e90 <_printf_float+0x88>
 8008f3c:	232d      	movs	r3, #45	; 0x2d
 8008f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f42:	e7a5      	b.n	8008e90 <_printf_float+0x88>
 8008f44:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8008f48:	f000 8178 	beq.w	800923c <_printf_float+0x434>
 8008f4c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f50:	d1be      	bne.n	8008ed0 <_printf_float+0xc8>
 8008f52:	2900      	cmp	r1, #0
 8008f54:	d1bc      	bne.n	8008ed0 <_printf_float+0xc8>
 8008f56:	2101      	movs	r1, #1
 8008f58:	e7b9      	b.n	8008ece <_printf_float+0xc6>
 8008f5a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008f5e:	d119      	bne.n	8008f94 <_printf_float+0x18c>
 8008f60:	2900      	cmp	r1, #0
 8008f62:	6863      	ldr	r3, [r4, #4]
 8008f64:	dd0c      	ble.n	8008f80 <_printf_float+0x178>
 8008f66:	6121      	str	r1, [r4, #16]
 8008f68:	b913      	cbnz	r3, 8008f70 <_printf_float+0x168>
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	07d2      	lsls	r2, r2, #31
 8008f6e:	d502      	bpl.n	8008f76 <_printf_float+0x16e>
 8008f70:	3301      	adds	r3, #1
 8008f72:	440b      	add	r3, r1
 8008f74:	6123      	str	r3, [r4, #16]
 8008f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f78:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f7a:	f04f 0a00 	mov.w	sl, #0
 8008f7e:	e7d9      	b.n	8008f34 <_printf_float+0x12c>
 8008f80:	b913      	cbnz	r3, 8008f88 <_printf_float+0x180>
 8008f82:	6822      	ldr	r2, [r4, #0]
 8008f84:	07d0      	lsls	r0, r2, #31
 8008f86:	d501      	bpl.n	8008f8c <_printf_float+0x184>
 8008f88:	3302      	adds	r3, #2
 8008f8a:	e7f3      	b.n	8008f74 <_printf_float+0x16c>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e7f1      	b.n	8008f74 <_printf_float+0x16c>
 8008f90:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008f94:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	db05      	blt.n	8008fa8 <_printf_float+0x1a0>
 8008f9c:	6822      	ldr	r2, [r4, #0]
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	07d1      	lsls	r1, r2, #31
 8008fa2:	d5e8      	bpl.n	8008f76 <_printf_float+0x16e>
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	e7e5      	b.n	8008f74 <_printf_float+0x16c>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bfd4      	ite	le
 8008fac:	f1c3 0302 	rsble	r3, r3, #2
 8008fb0:	2301      	movgt	r3, #1
 8008fb2:	4413      	add	r3, r2
 8008fb4:	e7de      	b.n	8008f74 <_printf_float+0x16c>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	055a      	lsls	r2, r3, #21
 8008fba:	d407      	bmi.n	8008fcc <_printf_float+0x1c4>
 8008fbc:	6923      	ldr	r3, [r4, #16]
 8008fbe:	4642      	mov	r2, r8
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	47b8      	blx	r7
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	d12a      	bne.n	8009020 <_printf_float+0x218>
 8008fca:	e76b      	b.n	8008ea4 <_printf_float+0x9c>
 8008fcc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fd0:	f240 80de 	bls.w	8009190 <_printf_float+0x388>
 8008fd4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008fd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe0:	d133      	bne.n	800904a <_printf_float+0x242>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4a42      	ldr	r2, [pc, #264]	; (80090f0 <_printf_float+0x2e8>)
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b8      	blx	r7
 8008fec:	3001      	adds	r0, #1
 8008fee:	f43f af59 	beq.w	8008ea4 <_printf_float+0x9c>
 8008ff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	db02      	blt.n	8009000 <_printf_float+0x1f8>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	07d8      	lsls	r0, r3, #31
 8008ffe:	d50f      	bpl.n	8009020 <_printf_float+0x218>
 8009000:	9b05      	ldr	r3, [sp, #20]
 8009002:	465a      	mov	r2, fp
 8009004:	4631      	mov	r1, r6
 8009006:	4628      	mov	r0, r5
 8009008:	47b8      	blx	r7
 800900a:	3001      	adds	r0, #1
 800900c:	f43f af4a 	beq.w	8008ea4 <_printf_float+0x9c>
 8009010:	f04f 0800 	mov.w	r8, #0
 8009014:	f104 091a 	add.w	r9, r4, #26
 8009018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800901a:	3b01      	subs	r3, #1
 800901c:	4543      	cmp	r3, r8
 800901e:	dc09      	bgt.n	8009034 <_printf_float+0x22c>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	079b      	lsls	r3, r3, #30
 8009024:	f100 8105 	bmi.w	8009232 <_printf_float+0x42a>
 8009028:	68e0      	ldr	r0, [r4, #12]
 800902a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800902c:	4298      	cmp	r0, r3
 800902e:	bfb8      	it	lt
 8009030:	4618      	movlt	r0, r3
 8009032:	e739      	b.n	8008ea8 <_printf_float+0xa0>
 8009034:	2301      	movs	r3, #1
 8009036:	464a      	mov	r2, r9
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	f43f af30 	beq.w	8008ea4 <_printf_float+0x9c>
 8009044:	f108 0801 	add.w	r8, r8, #1
 8009048:	e7e6      	b.n	8009018 <_printf_float+0x210>
 800904a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	dc2b      	bgt.n	80090a8 <_printf_float+0x2a0>
 8009050:	2301      	movs	r3, #1
 8009052:	4a27      	ldr	r2, [pc, #156]	; (80090f0 <_printf_float+0x2e8>)
 8009054:	4631      	mov	r1, r6
 8009056:	4628      	mov	r0, r5
 8009058:	47b8      	blx	r7
 800905a:	3001      	adds	r0, #1
 800905c:	f43f af22 	beq.w	8008ea4 <_printf_float+0x9c>
 8009060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009062:	b923      	cbnz	r3, 800906e <_printf_float+0x266>
 8009064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009066:	b913      	cbnz	r3, 800906e <_printf_float+0x266>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	07d9      	lsls	r1, r3, #31
 800906c:	d5d8      	bpl.n	8009020 <_printf_float+0x218>
 800906e:	9b05      	ldr	r3, [sp, #20]
 8009070:	465a      	mov	r2, fp
 8009072:	4631      	mov	r1, r6
 8009074:	4628      	mov	r0, r5
 8009076:	47b8      	blx	r7
 8009078:	3001      	adds	r0, #1
 800907a:	f43f af13 	beq.w	8008ea4 <_printf_float+0x9c>
 800907e:	f04f 0900 	mov.w	r9, #0
 8009082:	f104 0a1a 	add.w	sl, r4, #26
 8009086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009088:	425b      	negs	r3, r3
 800908a:	454b      	cmp	r3, r9
 800908c:	dc01      	bgt.n	8009092 <_printf_float+0x28a>
 800908e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009090:	e795      	b.n	8008fbe <_printf_float+0x1b6>
 8009092:	2301      	movs	r3, #1
 8009094:	4652      	mov	r2, sl
 8009096:	4631      	mov	r1, r6
 8009098:	4628      	mov	r0, r5
 800909a:	47b8      	blx	r7
 800909c:	3001      	adds	r0, #1
 800909e:	f43f af01 	beq.w	8008ea4 <_printf_float+0x9c>
 80090a2:	f109 0901 	add.w	r9, r9, #1
 80090a6:	e7ee      	b.n	8009086 <_printf_float+0x27e>
 80090a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090ac:	429a      	cmp	r2, r3
 80090ae:	bfa8      	it	ge
 80090b0:	461a      	movge	r2, r3
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	4691      	mov	r9, r2
 80090b6:	dd07      	ble.n	80090c8 <_printf_float+0x2c0>
 80090b8:	4613      	mov	r3, r2
 80090ba:	4631      	mov	r1, r6
 80090bc:	4642      	mov	r2, r8
 80090be:	4628      	mov	r0, r5
 80090c0:	47b8      	blx	r7
 80090c2:	3001      	adds	r0, #1
 80090c4:	f43f aeee 	beq.w	8008ea4 <_printf_float+0x9c>
 80090c8:	f104 031a 	add.w	r3, r4, #26
 80090cc:	f04f 0a00 	mov.w	sl, #0
 80090d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090d4:	9307      	str	r3, [sp, #28]
 80090d6:	e017      	b.n	8009108 <_printf_float+0x300>
 80090d8:	ffffffff 	.word	0xffffffff
 80090dc:	7fefffff 	.word	0x7fefffff
 80090e0:	0800db14 	.word	0x0800db14
 80090e4:	0800db10 	.word	0x0800db10
 80090e8:	0800db1c 	.word	0x0800db1c
 80090ec:	0800db18 	.word	0x0800db18
 80090f0:	0800db20 	.word	0x0800db20
 80090f4:	2301      	movs	r3, #1
 80090f6:	9a07      	ldr	r2, [sp, #28]
 80090f8:	4631      	mov	r1, r6
 80090fa:	4628      	mov	r0, r5
 80090fc:	47b8      	blx	r7
 80090fe:	3001      	adds	r0, #1
 8009100:	f43f aed0 	beq.w	8008ea4 <_printf_float+0x9c>
 8009104:	f10a 0a01 	add.w	sl, sl, #1
 8009108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800910a:	9306      	str	r3, [sp, #24]
 800910c:	eba3 0309 	sub.w	r3, r3, r9
 8009110:	4553      	cmp	r3, sl
 8009112:	dcef      	bgt.n	80090f4 <_printf_float+0x2ec>
 8009114:	9b06      	ldr	r3, [sp, #24]
 8009116:	4498      	add	r8, r3
 8009118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800911c:	429a      	cmp	r2, r3
 800911e:	db15      	blt.n	800914c <_printf_float+0x344>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	07da      	lsls	r2, r3, #31
 8009124:	d412      	bmi.n	800914c <_printf_float+0x344>
 8009126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009128:	9a06      	ldr	r2, [sp, #24]
 800912a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800912c:	1a9a      	subs	r2, r3, r2
 800912e:	eba3 0a01 	sub.w	sl, r3, r1
 8009132:	4592      	cmp	sl, r2
 8009134:	bfa8      	it	ge
 8009136:	4692      	movge	sl, r2
 8009138:	f1ba 0f00 	cmp.w	sl, #0
 800913c:	dc0e      	bgt.n	800915c <_printf_float+0x354>
 800913e:	f04f 0800 	mov.w	r8, #0
 8009142:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009146:	f104 091a 	add.w	r9, r4, #26
 800914a:	e019      	b.n	8009180 <_printf_float+0x378>
 800914c:	9b05      	ldr	r3, [sp, #20]
 800914e:	465a      	mov	r2, fp
 8009150:	4631      	mov	r1, r6
 8009152:	4628      	mov	r0, r5
 8009154:	47b8      	blx	r7
 8009156:	3001      	adds	r0, #1
 8009158:	d1e5      	bne.n	8009126 <_printf_float+0x31e>
 800915a:	e6a3      	b.n	8008ea4 <_printf_float+0x9c>
 800915c:	4653      	mov	r3, sl
 800915e:	4642      	mov	r2, r8
 8009160:	4631      	mov	r1, r6
 8009162:	4628      	mov	r0, r5
 8009164:	47b8      	blx	r7
 8009166:	3001      	adds	r0, #1
 8009168:	d1e9      	bne.n	800913e <_printf_float+0x336>
 800916a:	e69b      	b.n	8008ea4 <_printf_float+0x9c>
 800916c:	2301      	movs	r3, #1
 800916e:	464a      	mov	r2, r9
 8009170:	4631      	mov	r1, r6
 8009172:	4628      	mov	r0, r5
 8009174:	47b8      	blx	r7
 8009176:	3001      	adds	r0, #1
 8009178:	f43f ae94 	beq.w	8008ea4 <_printf_float+0x9c>
 800917c:	f108 0801 	add.w	r8, r8, #1
 8009180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	eba3 030a 	sub.w	r3, r3, sl
 800918a:	4543      	cmp	r3, r8
 800918c:	dcee      	bgt.n	800916c <_printf_float+0x364>
 800918e:	e747      	b.n	8009020 <_printf_float+0x218>
 8009190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009192:	2a01      	cmp	r2, #1
 8009194:	dc01      	bgt.n	800919a <_printf_float+0x392>
 8009196:	07db      	lsls	r3, r3, #31
 8009198:	d539      	bpl.n	800920e <_printf_float+0x406>
 800919a:	2301      	movs	r3, #1
 800919c:	4642      	mov	r2, r8
 800919e:	4631      	mov	r1, r6
 80091a0:	4628      	mov	r0, r5
 80091a2:	47b8      	blx	r7
 80091a4:	3001      	adds	r0, #1
 80091a6:	f43f ae7d 	beq.w	8008ea4 <_printf_float+0x9c>
 80091aa:	9b05      	ldr	r3, [sp, #20]
 80091ac:	465a      	mov	r2, fp
 80091ae:	4631      	mov	r1, r6
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b8      	blx	r7
 80091b4:	3001      	adds	r0, #1
 80091b6:	f108 0801 	add.w	r8, r8, #1
 80091ba:	f43f ae73 	beq.w	8008ea4 <_printf_float+0x9c>
 80091be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80091c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80091d0:	d018      	beq.n	8009204 <_printf_float+0x3fc>
 80091d2:	4642      	mov	r2, r8
 80091d4:	4631      	mov	r1, r6
 80091d6:	4628      	mov	r0, r5
 80091d8:	47b8      	blx	r7
 80091da:	3001      	adds	r0, #1
 80091dc:	d10e      	bne.n	80091fc <_printf_float+0x3f4>
 80091de:	e661      	b.n	8008ea4 <_printf_float+0x9c>
 80091e0:	2301      	movs	r3, #1
 80091e2:	464a      	mov	r2, r9
 80091e4:	4631      	mov	r1, r6
 80091e6:	4628      	mov	r0, r5
 80091e8:	47b8      	blx	r7
 80091ea:	3001      	adds	r0, #1
 80091ec:	f43f ae5a 	beq.w	8008ea4 <_printf_float+0x9c>
 80091f0:	f108 0801 	add.w	r8, r8, #1
 80091f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f6:	3b01      	subs	r3, #1
 80091f8:	4543      	cmp	r3, r8
 80091fa:	dcf1      	bgt.n	80091e0 <_printf_float+0x3d8>
 80091fc:	4653      	mov	r3, sl
 80091fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009202:	e6dd      	b.n	8008fc0 <_printf_float+0x1b8>
 8009204:	f04f 0800 	mov.w	r8, #0
 8009208:	f104 091a 	add.w	r9, r4, #26
 800920c:	e7f2      	b.n	80091f4 <_printf_float+0x3ec>
 800920e:	2301      	movs	r3, #1
 8009210:	e7df      	b.n	80091d2 <_printf_float+0x3ca>
 8009212:	2301      	movs	r3, #1
 8009214:	464a      	mov	r2, r9
 8009216:	4631      	mov	r1, r6
 8009218:	4628      	mov	r0, r5
 800921a:	47b8      	blx	r7
 800921c:	3001      	adds	r0, #1
 800921e:	f43f ae41 	beq.w	8008ea4 <_printf_float+0x9c>
 8009222:	f108 0801 	add.w	r8, r8, #1
 8009226:	68e3      	ldr	r3, [r4, #12]
 8009228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	4543      	cmp	r3, r8
 800922e:	dcf0      	bgt.n	8009212 <_printf_float+0x40a>
 8009230:	e6fa      	b.n	8009028 <_printf_float+0x220>
 8009232:	f04f 0800 	mov.w	r8, #0
 8009236:	f104 0919 	add.w	r9, r4, #25
 800923a:	e7f4      	b.n	8009226 <_printf_float+0x41e>
 800923c:	2900      	cmp	r1, #0
 800923e:	f43f ae8a 	beq.w	8008f56 <_printf_float+0x14e>
 8009242:	f04f 0c00 	mov.w	ip, #0
 8009246:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800924a:	e9cd 0900 	strd	r0, r9, [sp]
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009254:	4628      	mov	r0, r5
 8009256:	f7ff fd51 	bl	8008cfc <__cvt>
 800925a:	4680      	mov	r8, r0
 800925c:	e64a      	b.n	8008ef4 <_printf_float+0xec>
 800925e:	bf00      	nop

08009260 <_printf_common>:
 8009260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009264:	4691      	mov	r9, r2
 8009266:	461f      	mov	r7, r3
 8009268:	688a      	ldr	r2, [r1, #8]
 800926a:	690b      	ldr	r3, [r1, #16]
 800926c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009270:	4293      	cmp	r3, r2
 8009272:	bfb8      	it	lt
 8009274:	4613      	movlt	r3, r2
 8009276:	f8c9 3000 	str.w	r3, [r9]
 800927a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800927e:	4606      	mov	r6, r0
 8009280:	460c      	mov	r4, r1
 8009282:	b112      	cbz	r2, 800928a <_printf_common+0x2a>
 8009284:	3301      	adds	r3, #1
 8009286:	f8c9 3000 	str.w	r3, [r9]
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	0699      	lsls	r1, r3, #26
 800928e:	bf42      	ittt	mi
 8009290:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009294:	3302      	addmi	r3, #2
 8009296:	f8c9 3000 	strmi.w	r3, [r9]
 800929a:	6825      	ldr	r5, [r4, #0]
 800929c:	f015 0506 	ands.w	r5, r5, #6
 80092a0:	d107      	bne.n	80092b2 <_printf_common+0x52>
 80092a2:	f104 0a19 	add.w	sl, r4, #25
 80092a6:	68e3      	ldr	r3, [r4, #12]
 80092a8:	f8d9 2000 	ldr.w	r2, [r9]
 80092ac:	1a9b      	subs	r3, r3, r2
 80092ae:	42ab      	cmp	r3, r5
 80092b0:	dc28      	bgt.n	8009304 <_printf_common+0xa4>
 80092b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80092b6:	6822      	ldr	r2, [r4, #0]
 80092b8:	3300      	adds	r3, #0
 80092ba:	bf18      	it	ne
 80092bc:	2301      	movne	r3, #1
 80092be:	0692      	lsls	r2, r2, #26
 80092c0:	d42d      	bmi.n	800931e <_printf_common+0xbe>
 80092c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092c6:	4639      	mov	r1, r7
 80092c8:	4630      	mov	r0, r6
 80092ca:	47c0      	blx	r8
 80092cc:	3001      	adds	r0, #1
 80092ce:	d020      	beq.n	8009312 <_printf_common+0xb2>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	68e5      	ldr	r5, [r4, #12]
 80092d4:	f8d9 2000 	ldr.w	r2, [r9]
 80092d8:	f003 0306 	and.w	r3, r3, #6
 80092dc:	2b04      	cmp	r3, #4
 80092de:	bf08      	it	eq
 80092e0:	1aad      	subeq	r5, r5, r2
 80092e2:	68a3      	ldr	r3, [r4, #8]
 80092e4:	6922      	ldr	r2, [r4, #16]
 80092e6:	bf0c      	ite	eq
 80092e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092ec:	2500      	movne	r5, #0
 80092ee:	4293      	cmp	r3, r2
 80092f0:	bfc4      	itt	gt
 80092f2:	1a9b      	subgt	r3, r3, r2
 80092f4:	18ed      	addgt	r5, r5, r3
 80092f6:	f04f 0900 	mov.w	r9, #0
 80092fa:	341a      	adds	r4, #26
 80092fc:	454d      	cmp	r5, r9
 80092fe:	d11a      	bne.n	8009336 <_printf_common+0xd6>
 8009300:	2000      	movs	r0, #0
 8009302:	e008      	b.n	8009316 <_printf_common+0xb6>
 8009304:	2301      	movs	r3, #1
 8009306:	4652      	mov	r2, sl
 8009308:	4639      	mov	r1, r7
 800930a:	4630      	mov	r0, r6
 800930c:	47c0      	blx	r8
 800930e:	3001      	adds	r0, #1
 8009310:	d103      	bne.n	800931a <_printf_common+0xba>
 8009312:	f04f 30ff 	mov.w	r0, #4294967295
 8009316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931a:	3501      	adds	r5, #1
 800931c:	e7c3      	b.n	80092a6 <_printf_common+0x46>
 800931e:	18e1      	adds	r1, r4, r3
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	2030      	movs	r0, #48	; 0x30
 8009324:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009328:	4422      	add	r2, r4
 800932a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800932e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009332:	3302      	adds	r3, #2
 8009334:	e7c5      	b.n	80092c2 <_printf_common+0x62>
 8009336:	2301      	movs	r3, #1
 8009338:	4622      	mov	r2, r4
 800933a:	4639      	mov	r1, r7
 800933c:	4630      	mov	r0, r6
 800933e:	47c0      	blx	r8
 8009340:	3001      	adds	r0, #1
 8009342:	d0e6      	beq.n	8009312 <_printf_common+0xb2>
 8009344:	f109 0901 	add.w	r9, r9, #1
 8009348:	e7d8      	b.n	80092fc <_printf_common+0x9c>
	...

0800934c <_printf_i>:
 800934c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009350:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009354:	460c      	mov	r4, r1
 8009356:	7e09      	ldrb	r1, [r1, #24]
 8009358:	b085      	sub	sp, #20
 800935a:	296e      	cmp	r1, #110	; 0x6e
 800935c:	4617      	mov	r7, r2
 800935e:	4606      	mov	r6, r0
 8009360:	4698      	mov	r8, r3
 8009362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009364:	f000 80b3 	beq.w	80094ce <_printf_i+0x182>
 8009368:	d822      	bhi.n	80093b0 <_printf_i+0x64>
 800936a:	2963      	cmp	r1, #99	; 0x63
 800936c:	d036      	beq.n	80093dc <_printf_i+0x90>
 800936e:	d80a      	bhi.n	8009386 <_printf_i+0x3a>
 8009370:	2900      	cmp	r1, #0
 8009372:	f000 80b9 	beq.w	80094e8 <_printf_i+0x19c>
 8009376:	2958      	cmp	r1, #88	; 0x58
 8009378:	f000 8083 	beq.w	8009482 <_printf_i+0x136>
 800937c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009380:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009384:	e032      	b.n	80093ec <_printf_i+0xa0>
 8009386:	2964      	cmp	r1, #100	; 0x64
 8009388:	d001      	beq.n	800938e <_printf_i+0x42>
 800938a:	2969      	cmp	r1, #105	; 0x69
 800938c:	d1f6      	bne.n	800937c <_printf_i+0x30>
 800938e:	6820      	ldr	r0, [r4, #0]
 8009390:	6813      	ldr	r3, [r2, #0]
 8009392:	0605      	lsls	r5, r0, #24
 8009394:	f103 0104 	add.w	r1, r3, #4
 8009398:	d52a      	bpl.n	80093f0 <_printf_i+0xa4>
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6011      	str	r1, [r2, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	da03      	bge.n	80093aa <_printf_i+0x5e>
 80093a2:	222d      	movs	r2, #45	; 0x2d
 80093a4:	425b      	negs	r3, r3
 80093a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80093aa:	486f      	ldr	r0, [pc, #444]	; (8009568 <_printf_i+0x21c>)
 80093ac:	220a      	movs	r2, #10
 80093ae:	e039      	b.n	8009424 <_printf_i+0xd8>
 80093b0:	2973      	cmp	r1, #115	; 0x73
 80093b2:	f000 809d 	beq.w	80094f0 <_printf_i+0x1a4>
 80093b6:	d808      	bhi.n	80093ca <_printf_i+0x7e>
 80093b8:	296f      	cmp	r1, #111	; 0x6f
 80093ba:	d020      	beq.n	80093fe <_printf_i+0xb2>
 80093bc:	2970      	cmp	r1, #112	; 0x70
 80093be:	d1dd      	bne.n	800937c <_printf_i+0x30>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	f043 0320 	orr.w	r3, r3, #32
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	e003      	b.n	80093d2 <_printf_i+0x86>
 80093ca:	2975      	cmp	r1, #117	; 0x75
 80093cc:	d017      	beq.n	80093fe <_printf_i+0xb2>
 80093ce:	2978      	cmp	r1, #120	; 0x78
 80093d0:	d1d4      	bne.n	800937c <_printf_i+0x30>
 80093d2:	2378      	movs	r3, #120	; 0x78
 80093d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093d8:	4864      	ldr	r0, [pc, #400]	; (800956c <_printf_i+0x220>)
 80093da:	e055      	b.n	8009488 <_printf_i+0x13c>
 80093dc:	6813      	ldr	r3, [r2, #0]
 80093de:	1d19      	adds	r1, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6011      	str	r1, [r2, #0]
 80093e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093ec:	2301      	movs	r3, #1
 80093ee:	e08c      	b.n	800950a <_printf_i+0x1be>
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6011      	str	r1, [r2, #0]
 80093f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093f8:	bf18      	it	ne
 80093fa:	b21b      	sxthne	r3, r3
 80093fc:	e7cf      	b.n	800939e <_printf_i+0x52>
 80093fe:	6813      	ldr	r3, [r2, #0]
 8009400:	6825      	ldr	r5, [r4, #0]
 8009402:	1d18      	adds	r0, r3, #4
 8009404:	6010      	str	r0, [r2, #0]
 8009406:	0628      	lsls	r0, r5, #24
 8009408:	d501      	bpl.n	800940e <_printf_i+0xc2>
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	e002      	b.n	8009414 <_printf_i+0xc8>
 800940e:	0668      	lsls	r0, r5, #25
 8009410:	d5fb      	bpl.n	800940a <_printf_i+0xbe>
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	4854      	ldr	r0, [pc, #336]	; (8009568 <_printf_i+0x21c>)
 8009416:	296f      	cmp	r1, #111	; 0x6f
 8009418:	bf14      	ite	ne
 800941a:	220a      	movne	r2, #10
 800941c:	2208      	moveq	r2, #8
 800941e:	2100      	movs	r1, #0
 8009420:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009424:	6865      	ldr	r5, [r4, #4]
 8009426:	60a5      	str	r5, [r4, #8]
 8009428:	2d00      	cmp	r5, #0
 800942a:	f2c0 8095 	blt.w	8009558 <_printf_i+0x20c>
 800942e:	6821      	ldr	r1, [r4, #0]
 8009430:	f021 0104 	bic.w	r1, r1, #4
 8009434:	6021      	str	r1, [r4, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d13d      	bne.n	80094b6 <_printf_i+0x16a>
 800943a:	2d00      	cmp	r5, #0
 800943c:	f040 808e 	bne.w	800955c <_printf_i+0x210>
 8009440:	4665      	mov	r5, ip
 8009442:	2a08      	cmp	r2, #8
 8009444:	d10b      	bne.n	800945e <_printf_i+0x112>
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	07db      	lsls	r3, r3, #31
 800944a:	d508      	bpl.n	800945e <_printf_i+0x112>
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	6862      	ldr	r2, [r4, #4]
 8009450:	429a      	cmp	r2, r3
 8009452:	bfde      	ittt	le
 8009454:	2330      	movle	r3, #48	; 0x30
 8009456:	f805 3c01 	strble.w	r3, [r5, #-1]
 800945a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800945e:	ebac 0305 	sub.w	r3, ip, r5
 8009462:	6123      	str	r3, [r4, #16]
 8009464:	f8cd 8000 	str.w	r8, [sp]
 8009468:	463b      	mov	r3, r7
 800946a:	aa03      	add	r2, sp, #12
 800946c:	4621      	mov	r1, r4
 800946e:	4630      	mov	r0, r6
 8009470:	f7ff fef6 	bl	8009260 <_printf_common>
 8009474:	3001      	adds	r0, #1
 8009476:	d14d      	bne.n	8009514 <_printf_i+0x1c8>
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	b005      	add	sp, #20
 800947e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009482:	4839      	ldr	r0, [pc, #228]	; (8009568 <_printf_i+0x21c>)
 8009484:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009488:	6813      	ldr	r3, [r2, #0]
 800948a:	6821      	ldr	r1, [r4, #0]
 800948c:	1d1d      	adds	r5, r3, #4
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6015      	str	r5, [r2, #0]
 8009492:	060a      	lsls	r2, r1, #24
 8009494:	d50b      	bpl.n	80094ae <_printf_i+0x162>
 8009496:	07ca      	lsls	r2, r1, #31
 8009498:	bf44      	itt	mi
 800949a:	f041 0120 	orrmi.w	r1, r1, #32
 800949e:	6021      	strmi	r1, [r4, #0]
 80094a0:	b91b      	cbnz	r3, 80094aa <_printf_i+0x15e>
 80094a2:	6822      	ldr	r2, [r4, #0]
 80094a4:	f022 0220 	bic.w	r2, r2, #32
 80094a8:	6022      	str	r2, [r4, #0]
 80094aa:	2210      	movs	r2, #16
 80094ac:	e7b7      	b.n	800941e <_printf_i+0xd2>
 80094ae:	064d      	lsls	r5, r1, #25
 80094b0:	bf48      	it	mi
 80094b2:	b29b      	uxthmi	r3, r3
 80094b4:	e7ef      	b.n	8009496 <_printf_i+0x14a>
 80094b6:	4665      	mov	r5, ip
 80094b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80094bc:	fb02 3311 	mls	r3, r2, r1, r3
 80094c0:	5cc3      	ldrb	r3, [r0, r3]
 80094c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80094c6:	460b      	mov	r3, r1
 80094c8:	2900      	cmp	r1, #0
 80094ca:	d1f5      	bne.n	80094b8 <_printf_i+0x16c>
 80094cc:	e7b9      	b.n	8009442 <_printf_i+0xf6>
 80094ce:	6813      	ldr	r3, [r2, #0]
 80094d0:	6825      	ldr	r5, [r4, #0]
 80094d2:	6961      	ldr	r1, [r4, #20]
 80094d4:	1d18      	adds	r0, r3, #4
 80094d6:	6010      	str	r0, [r2, #0]
 80094d8:	0628      	lsls	r0, r5, #24
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	d501      	bpl.n	80094e2 <_printf_i+0x196>
 80094de:	6019      	str	r1, [r3, #0]
 80094e0:	e002      	b.n	80094e8 <_printf_i+0x19c>
 80094e2:	066a      	lsls	r2, r5, #25
 80094e4:	d5fb      	bpl.n	80094de <_printf_i+0x192>
 80094e6:	8019      	strh	r1, [r3, #0]
 80094e8:	2300      	movs	r3, #0
 80094ea:	6123      	str	r3, [r4, #16]
 80094ec:	4665      	mov	r5, ip
 80094ee:	e7b9      	b.n	8009464 <_printf_i+0x118>
 80094f0:	6813      	ldr	r3, [r2, #0]
 80094f2:	1d19      	adds	r1, r3, #4
 80094f4:	6011      	str	r1, [r2, #0]
 80094f6:	681d      	ldr	r5, [r3, #0]
 80094f8:	6862      	ldr	r2, [r4, #4]
 80094fa:	2100      	movs	r1, #0
 80094fc:	4628      	mov	r0, r5
 80094fe:	f7f6 ff57 	bl	80003b0 <memchr>
 8009502:	b108      	cbz	r0, 8009508 <_printf_i+0x1bc>
 8009504:	1b40      	subs	r0, r0, r5
 8009506:	6060      	str	r0, [r4, #4]
 8009508:	6863      	ldr	r3, [r4, #4]
 800950a:	6123      	str	r3, [r4, #16]
 800950c:	2300      	movs	r3, #0
 800950e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009512:	e7a7      	b.n	8009464 <_printf_i+0x118>
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	462a      	mov	r2, r5
 8009518:	4639      	mov	r1, r7
 800951a:	4630      	mov	r0, r6
 800951c:	47c0      	blx	r8
 800951e:	3001      	adds	r0, #1
 8009520:	d0aa      	beq.n	8009478 <_printf_i+0x12c>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	079b      	lsls	r3, r3, #30
 8009526:	d413      	bmi.n	8009550 <_printf_i+0x204>
 8009528:	68e0      	ldr	r0, [r4, #12]
 800952a:	9b03      	ldr	r3, [sp, #12]
 800952c:	4298      	cmp	r0, r3
 800952e:	bfb8      	it	lt
 8009530:	4618      	movlt	r0, r3
 8009532:	e7a3      	b.n	800947c <_printf_i+0x130>
 8009534:	2301      	movs	r3, #1
 8009536:	464a      	mov	r2, r9
 8009538:	4639      	mov	r1, r7
 800953a:	4630      	mov	r0, r6
 800953c:	47c0      	blx	r8
 800953e:	3001      	adds	r0, #1
 8009540:	d09a      	beq.n	8009478 <_printf_i+0x12c>
 8009542:	3501      	adds	r5, #1
 8009544:	68e3      	ldr	r3, [r4, #12]
 8009546:	9a03      	ldr	r2, [sp, #12]
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	42ab      	cmp	r3, r5
 800954c:	dcf2      	bgt.n	8009534 <_printf_i+0x1e8>
 800954e:	e7eb      	b.n	8009528 <_printf_i+0x1dc>
 8009550:	2500      	movs	r5, #0
 8009552:	f104 0919 	add.w	r9, r4, #25
 8009556:	e7f5      	b.n	8009544 <_printf_i+0x1f8>
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1ac      	bne.n	80094b6 <_printf_i+0x16a>
 800955c:	7803      	ldrb	r3, [r0, #0]
 800955e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009562:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009566:	e76c      	b.n	8009442 <_printf_i+0xf6>
 8009568:	0800db22 	.word	0x0800db22
 800956c:	0800db33 	.word	0x0800db33

08009570 <_sbrk_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4c06      	ldr	r4, [pc, #24]	; (800958c <_sbrk_r+0x1c>)
 8009574:	2300      	movs	r3, #0
 8009576:	4605      	mov	r5, r0
 8009578:	4608      	mov	r0, r1
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	f7f8 f924 	bl	80017c8 <_sbrk>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_sbrk_r+0x1a>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	b103      	cbz	r3, 800958a <_sbrk_r+0x1a>
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20004728 	.word	0x20004728

08009590 <siprintf>:
 8009590:	b40e      	push	{r1, r2, r3}
 8009592:	b500      	push	{lr}
 8009594:	b09c      	sub	sp, #112	; 0x70
 8009596:	ab1d      	add	r3, sp, #116	; 0x74
 8009598:	9002      	str	r0, [sp, #8]
 800959a:	9006      	str	r0, [sp, #24]
 800959c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095a0:	4809      	ldr	r0, [pc, #36]	; (80095c8 <siprintf+0x38>)
 80095a2:	9107      	str	r1, [sp, #28]
 80095a4:	9104      	str	r1, [sp, #16]
 80095a6:	4909      	ldr	r1, [pc, #36]	; (80095cc <siprintf+0x3c>)
 80095a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ac:	9105      	str	r1, [sp, #20]
 80095ae:	6800      	ldr	r0, [r0, #0]
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	a902      	add	r1, sp, #8
 80095b4:	f001 f942 	bl	800a83c <_svfiprintf_r>
 80095b8:	9b02      	ldr	r3, [sp, #8]
 80095ba:	2200      	movs	r2, #0
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	b01c      	add	sp, #112	; 0x70
 80095c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095c4:	b003      	add	sp, #12
 80095c6:	4770      	bx	lr
 80095c8:	20000014 	.word	0x20000014
 80095cc:	ffff0208 	.word	0xffff0208

080095d0 <quorem>:
 80095d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	6903      	ldr	r3, [r0, #16]
 80095d6:	690c      	ldr	r4, [r1, #16]
 80095d8:	42a3      	cmp	r3, r4
 80095da:	4680      	mov	r8, r0
 80095dc:	f2c0 8082 	blt.w	80096e4 <quorem+0x114>
 80095e0:	3c01      	subs	r4, #1
 80095e2:	f101 0714 	add.w	r7, r1, #20
 80095e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80095ea:	f100 0614 	add.w	r6, r0, #20
 80095ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80095f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80095f6:	eb06 030c 	add.w	r3, r6, ip
 80095fa:	3501      	adds	r5, #1
 80095fc:	eb07 090c 	add.w	r9, r7, ip
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	fbb0 f5f5 	udiv	r5, r0, r5
 8009606:	b395      	cbz	r5, 800966e <quorem+0x9e>
 8009608:	f04f 0a00 	mov.w	sl, #0
 800960c:	4638      	mov	r0, r7
 800960e:	46b6      	mov	lr, r6
 8009610:	46d3      	mov	fp, sl
 8009612:	f850 2b04 	ldr.w	r2, [r0], #4
 8009616:	b293      	uxth	r3, r2
 8009618:	fb05 a303 	mla	r3, r5, r3, sl
 800961c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009620:	b29b      	uxth	r3, r3
 8009622:	ebab 0303 	sub.w	r3, fp, r3
 8009626:	0c12      	lsrs	r2, r2, #16
 8009628:	f8de b000 	ldr.w	fp, [lr]
 800962c:	fb05 a202 	mla	r2, r5, r2, sl
 8009630:	fa13 f38b 	uxtah	r3, r3, fp
 8009634:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009638:	fa1f fb82 	uxth.w	fp, r2
 800963c:	f8de 2000 	ldr.w	r2, [lr]
 8009640:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009648:	b29b      	uxth	r3, r3
 800964a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800964e:	4581      	cmp	r9, r0
 8009650:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009654:	f84e 3b04 	str.w	r3, [lr], #4
 8009658:	d2db      	bcs.n	8009612 <quorem+0x42>
 800965a:	f856 300c 	ldr.w	r3, [r6, ip]
 800965e:	b933      	cbnz	r3, 800966e <quorem+0x9e>
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	3b04      	subs	r3, #4
 8009664:	429e      	cmp	r6, r3
 8009666:	461a      	mov	r2, r3
 8009668:	d330      	bcc.n	80096cc <quorem+0xfc>
 800966a:	f8c8 4010 	str.w	r4, [r8, #16]
 800966e:	4640      	mov	r0, r8
 8009670:	f000 ffb6 	bl	800a5e0 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	db25      	blt.n	80096c4 <quorem+0xf4>
 8009678:	3501      	adds	r5, #1
 800967a:	4630      	mov	r0, r6
 800967c:	f04f 0c00 	mov.w	ip, #0
 8009680:	f857 2b04 	ldr.w	r2, [r7], #4
 8009684:	f8d0 e000 	ldr.w	lr, [r0]
 8009688:	b293      	uxth	r3, r2
 800968a:	ebac 0303 	sub.w	r3, ip, r3
 800968e:	0c12      	lsrs	r2, r2, #16
 8009690:	fa13 f38e 	uxtah	r3, r3, lr
 8009694:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800969c:	b29b      	uxth	r3, r3
 800969e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a2:	45b9      	cmp	r9, r7
 80096a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80096a8:	f840 3b04 	str.w	r3, [r0], #4
 80096ac:	d2e8      	bcs.n	8009680 <quorem+0xb0>
 80096ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80096b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80096b6:	b92a      	cbnz	r2, 80096c4 <quorem+0xf4>
 80096b8:	3b04      	subs	r3, #4
 80096ba:	429e      	cmp	r6, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	d30b      	bcc.n	80096d8 <quorem+0x108>
 80096c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80096c4:	4628      	mov	r0, r5
 80096c6:	b003      	add	sp, #12
 80096c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	3b04      	subs	r3, #4
 80096d0:	2a00      	cmp	r2, #0
 80096d2:	d1ca      	bne.n	800966a <quorem+0x9a>
 80096d4:	3c01      	subs	r4, #1
 80096d6:	e7c5      	b.n	8009664 <quorem+0x94>
 80096d8:	6812      	ldr	r2, [r2, #0]
 80096da:	3b04      	subs	r3, #4
 80096dc:	2a00      	cmp	r2, #0
 80096de:	d1ef      	bne.n	80096c0 <quorem+0xf0>
 80096e0:	3c01      	subs	r4, #1
 80096e2:	e7ea      	b.n	80096ba <quorem+0xea>
 80096e4:	2000      	movs	r0, #0
 80096e6:	e7ee      	b.n	80096c6 <quorem+0xf6>

080096e8 <_dtoa_r>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	ec57 6b10 	vmov	r6, r7, d0
 80096f0:	b095      	sub	sp, #84	; 0x54
 80096f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096f4:	9108      	str	r1, [sp, #32]
 80096f6:	4604      	mov	r4, r0
 80096f8:	920a      	str	r2, [sp, #40]	; 0x28
 80096fa:	9311      	str	r3, [sp, #68]	; 0x44
 80096fc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8009700:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009704:	b93d      	cbnz	r5, 8009716 <_dtoa_r+0x2e>
 8009706:	2010      	movs	r0, #16
 8009708:	f7ff fa38 	bl	8008b7c <malloc>
 800970c:	6260      	str	r0, [r4, #36]	; 0x24
 800970e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009712:	6005      	str	r5, [r0, #0]
 8009714:	60c5      	str	r5, [r0, #12]
 8009716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009718:	6819      	ldr	r1, [r3, #0]
 800971a:	b151      	cbz	r1, 8009732 <_dtoa_r+0x4a>
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	604a      	str	r2, [r1, #4]
 8009720:	2301      	movs	r3, #1
 8009722:	4093      	lsls	r3, r2
 8009724:	608b      	str	r3, [r1, #8]
 8009726:	4620      	mov	r0, r4
 8009728:	f000 fd79 	bl	800a21e <_Bfree>
 800972c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	1e3b      	subs	r3, r7, #0
 8009734:	bfb9      	ittee	lt
 8009736:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800973a:	9303      	strlt	r3, [sp, #12]
 800973c:	2300      	movge	r3, #0
 800973e:	f8c8 3000 	strge.w	r3, [r8]
 8009742:	9d03      	ldr	r5, [sp, #12]
 8009744:	4bac      	ldr	r3, [pc, #688]	; (80099f8 <_dtoa_r+0x310>)
 8009746:	bfbc      	itt	lt
 8009748:	2201      	movlt	r2, #1
 800974a:	f8c8 2000 	strlt.w	r2, [r8]
 800974e:	43ab      	bics	r3, r5
 8009750:	d11b      	bne.n	800978a <_dtoa_r+0xa2>
 8009752:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009754:	f242 730f 	movw	r3, #9999	; 0x270f
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	9b02      	ldr	r3, [sp, #8]
 800975c:	b923      	cbnz	r3, 8009768 <_dtoa_r+0x80>
 800975e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009762:	2d00      	cmp	r5, #0
 8009764:	f000 84dd 	beq.w	800a122 <_dtoa_r+0xa3a>
 8009768:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800976a:	b953      	cbnz	r3, 8009782 <_dtoa_r+0x9a>
 800976c:	4ba3      	ldr	r3, [pc, #652]	; (80099fc <_dtoa_r+0x314>)
 800976e:	e020      	b.n	80097b2 <_dtoa_r+0xca>
 8009770:	4ba3      	ldr	r3, [pc, #652]	; (8009a00 <_dtoa_r+0x318>)
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	3308      	adds	r3, #8
 8009776:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009778:	6013      	str	r3, [r2, #0]
 800977a:	9804      	ldr	r0, [sp, #16]
 800977c:	b015      	add	sp, #84	; 0x54
 800977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009782:	4b9e      	ldr	r3, [pc, #632]	; (80099fc <_dtoa_r+0x314>)
 8009784:	9304      	str	r3, [sp, #16]
 8009786:	3303      	adds	r3, #3
 8009788:	e7f5      	b.n	8009776 <_dtoa_r+0x8e>
 800978a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800978e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009796:	ed8d 7b04 	vstr	d7, [sp, #16]
 800979a:	d10c      	bne.n	80097b6 <_dtoa_r+0xce>
 800979c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800979e:	2301      	movs	r3, #1
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 84b9 	beq.w	800a11c <_dtoa_r+0xa34>
 80097aa:	4b96      	ldr	r3, [pc, #600]	; (8009a04 <_dtoa_r+0x31c>)
 80097ac:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	e7e1      	b.n	800977a <_dtoa_r+0x92>
 80097b6:	a913      	add	r1, sp, #76	; 0x4c
 80097b8:	aa12      	add	r2, sp, #72	; 0x48
 80097ba:	ed9d 0b04 	vldr	d0, [sp, #16]
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 ff85 	bl	800a6ce <__d2b>
 80097c4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80097c8:	9001      	str	r0, [sp, #4]
 80097ca:	9912      	ldr	r1, [sp, #72]	; 0x48
 80097cc:	2e00      	cmp	r6, #0
 80097ce:	d046      	beq.n	800985e <_dtoa_r+0x176>
 80097d0:	9805      	ldr	r0, [sp, #20]
 80097d2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80097d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097da:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80097de:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097e2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80097e6:	2700      	movs	r7, #0
 80097e8:	ee07 aa90 	vmov	s15, sl
 80097ec:	ec43 2b16 	vmov	d6, r2, r3
 80097f0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80097f4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80099e0 <_dtoa_r+0x2f8>
 80097f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80097fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009800:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80099e8 <_dtoa_r+0x300>
 8009804:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009808:	eeb0 7b46 	vmov.f64	d7, d6
 800980c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80099f0 <_dtoa_r+0x308>
 8009810:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009814:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009818:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800981c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009820:	ee16 ba90 	vmov	fp, s13
 8009824:	d508      	bpl.n	8009838 <_dtoa_r+0x150>
 8009826:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800982a:	eeb4 6b47 	vcmp.f64	d6, d7
 800982e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009832:	bf18      	it	ne
 8009834:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009838:	f1bb 0f16 	cmp.w	fp, #22
 800983c:	d834      	bhi.n	80098a8 <_dtoa_r+0x1c0>
 800983e:	4b72      	ldr	r3, [pc, #456]	; (8009a08 <_dtoa_r+0x320>)
 8009840:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009844:	ed93 7b00 	vldr	d7, [r3]
 8009848:	ed9d 6b02 	vldr	d6, [sp, #8]
 800984c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009854:	dd01      	ble.n	800985a <_dtoa_r+0x172>
 8009856:	f10b 3bff 	add.w	fp, fp, #4294967295
 800985a:	2300      	movs	r3, #0
 800985c:	e025      	b.n	80098aa <_dtoa_r+0x1c2>
 800985e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009860:	eb01 0a03 	add.w	sl, r1, r3
 8009864:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8009868:	2b20      	cmp	r3, #32
 800986a:	dd17      	ble.n	800989c <_dtoa_r+0x1b4>
 800986c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009870:	9a02      	ldr	r2, [sp, #8]
 8009872:	409d      	lsls	r5, r3
 8009874:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8009878:	fa22 f303 	lsr.w	r3, r2, r3
 800987c:	432b      	orrs	r3, r5
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800988a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800988e:	9805      	ldr	r0, [sp, #20]
 8009890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009894:	2701      	movs	r7, #1
 8009896:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800989a:	e7a5      	b.n	80097e8 <_dtoa_r+0x100>
 800989c:	9a02      	ldr	r2, [sp, #8]
 800989e:	f1c3 0320 	rsb	r3, r3, #32
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
 80098a6:	e7ea      	b.n	800987e <_dtoa_r+0x196>
 80098a8:	2301      	movs	r3, #1
 80098aa:	eba1 0a0a 	sub.w	sl, r1, sl
 80098ae:	9310      	str	r3, [sp, #64]	; 0x40
 80098b0:	f1ba 0301 	subs.w	r3, sl, #1
 80098b4:	9307      	str	r3, [sp, #28]
 80098b6:	bf43      	ittte	mi
 80098b8:	2300      	movmi	r3, #0
 80098ba:	f1ca 0a01 	rsbmi	sl, sl, #1
 80098be:	9307      	strmi	r3, [sp, #28]
 80098c0:	f04f 0a00 	movpl.w	sl, #0
 80098c4:	f1bb 0f00 	cmp.w	fp, #0
 80098c8:	db19      	blt.n	80098fe <_dtoa_r+0x216>
 80098ca:	9b07      	ldr	r3, [sp, #28]
 80098cc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80098d0:	445b      	add	r3, fp
 80098d2:	9307      	str	r3, [sp, #28]
 80098d4:	f04f 0800 	mov.w	r8, #0
 80098d8:	9b08      	ldr	r3, [sp, #32]
 80098da:	2b09      	cmp	r3, #9
 80098dc:	d866      	bhi.n	80099ac <_dtoa_r+0x2c4>
 80098de:	2b05      	cmp	r3, #5
 80098e0:	bfc4      	itt	gt
 80098e2:	3b04      	subgt	r3, #4
 80098e4:	9308      	strgt	r3, [sp, #32]
 80098e6:	9b08      	ldr	r3, [sp, #32]
 80098e8:	f1a3 0302 	sub.w	r3, r3, #2
 80098ec:	bfcc      	ite	gt
 80098ee:	2500      	movgt	r5, #0
 80098f0:	2501      	movle	r5, #1
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d866      	bhi.n	80099c4 <_dtoa_r+0x2dc>
 80098f6:	e8df f003 	tbb	[pc, r3]
 80098fa:	5755      	.short	0x5755
 80098fc:	4909      	.short	0x4909
 80098fe:	2300      	movs	r3, #0
 8009900:	ebaa 0a0b 	sub.w	sl, sl, fp
 8009904:	f1cb 0800 	rsb	r8, fp, #0
 8009908:	930b      	str	r3, [sp, #44]	; 0x2c
 800990a:	e7e5      	b.n	80098d8 <_dtoa_r+0x1f0>
 800990c:	2301      	movs	r3, #1
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009912:	2b00      	cmp	r3, #0
 8009914:	dd59      	ble.n	80099ca <_dtoa_r+0x2e2>
 8009916:	9306      	str	r3, [sp, #24]
 8009918:	4699      	mov	r9, r3
 800991a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800991c:	2200      	movs	r2, #0
 800991e:	6072      	str	r2, [r6, #4]
 8009920:	2204      	movs	r2, #4
 8009922:	f102 0014 	add.w	r0, r2, #20
 8009926:	4298      	cmp	r0, r3
 8009928:	6871      	ldr	r1, [r6, #4]
 800992a:	d953      	bls.n	80099d4 <_dtoa_r+0x2ec>
 800992c:	4620      	mov	r0, r4
 800992e:	f000 fc42 	bl	800a1b6 <_Balloc>
 8009932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009934:	6030      	str	r0, [r6, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	9304      	str	r3, [sp, #16]
 800993a:	f1b9 0f0e 	cmp.w	r9, #14
 800993e:	f200 80c2 	bhi.w	8009ac6 <_dtoa_r+0x3de>
 8009942:	2d00      	cmp	r5, #0
 8009944:	f000 80bf 	beq.w	8009ac6 <_dtoa_r+0x3de>
 8009948:	ed9d 7b02 	vldr	d7, [sp, #8]
 800994c:	f1bb 0f00 	cmp.w	fp, #0
 8009950:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8009954:	f340 80e6 	ble.w	8009b24 <_dtoa_r+0x43c>
 8009958:	4a2b      	ldr	r2, [pc, #172]	; (8009a08 <_dtoa_r+0x320>)
 800995a:	f00b 030f 	and.w	r3, fp, #15
 800995e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009962:	ed93 7b00 	vldr	d7, [r3]
 8009966:	ea4f 132b 	mov.w	r3, fp, asr #4
 800996a:	06da      	lsls	r2, r3, #27
 800996c:	f140 80d8 	bpl.w	8009b20 <_dtoa_r+0x438>
 8009970:	4a26      	ldr	r2, [pc, #152]	; (8009a0c <_dtoa_r+0x324>)
 8009972:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8009976:	ed92 6b08 	vldr	d6, [r2, #32]
 800997a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800997e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009982:	f003 030f 	and.w	r3, r3, #15
 8009986:	2203      	movs	r2, #3
 8009988:	4920      	ldr	r1, [pc, #128]	; (8009a0c <_dtoa_r+0x324>)
 800998a:	e04a      	b.n	8009a22 <_dtoa_r+0x33a>
 800998c:	2301      	movs	r3, #1
 800998e:	9309      	str	r3, [sp, #36]	; 0x24
 8009990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009992:	445b      	add	r3, fp
 8009994:	f103 0901 	add.w	r9, r3, #1
 8009998:	9306      	str	r3, [sp, #24]
 800999a:	464b      	mov	r3, r9
 800999c:	2b01      	cmp	r3, #1
 800999e:	bfb8      	it	lt
 80099a0:	2301      	movlt	r3, #1
 80099a2:	e7ba      	b.n	800991a <_dtoa_r+0x232>
 80099a4:	2300      	movs	r3, #0
 80099a6:	e7b2      	b.n	800990e <_dtoa_r+0x226>
 80099a8:	2300      	movs	r3, #0
 80099aa:	e7f0      	b.n	800998e <_dtoa_r+0x2a6>
 80099ac:	2501      	movs	r5, #1
 80099ae:	2300      	movs	r3, #0
 80099b0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80099b4:	f04f 33ff 	mov.w	r3, #4294967295
 80099b8:	9306      	str	r3, [sp, #24]
 80099ba:	4699      	mov	r9, r3
 80099bc:	2200      	movs	r2, #0
 80099be:	2312      	movs	r3, #18
 80099c0:	920a      	str	r2, [sp, #40]	; 0x28
 80099c2:	e7aa      	b.n	800991a <_dtoa_r+0x232>
 80099c4:	2301      	movs	r3, #1
 80099c6:	9309      	str	r3, [sp, #36]	; 0x24
 80099c8:	e7f4      	b.n	80099b4 <_dtoa_r+0x2cc>
 80099ca:	2301      	movs	r3, #1
 80099cc:	9306      	str	r3, [sp, #24]
 80099ce:	4699      	mov	r9, r3
 80099d0:	461a      	mov	r2, r3
 80099d2:	e7f5      	b.n	80099c0 <_dtoa_r+0x2d8>
 80099d4:	3101      	adds	r1, #1
 80099d6:	6071      	str	r1, [r6, #4]
 80099d8:	0052      	lsls	r2, r2, #1
 80099da:	e7a2      	b.n	8009922 <_dtoa_r+0x23a>
 80099dc:	f3af 8000 	nop.w
 80099e0:	636f4361 	.word	0x636f4361
 80099e4:	3fd287a7 	.word	0x3fd287a7
 80099e8:	8b60c8b3 	.word	0x8b60c8b3
 80099ec:	3fc68a28 	.word	0x3fc68a28
 80099f0:	509f79fb 	.word	0x509f79fb
 80099f4:	3fd34413 	.word	0x3fd34413
 80099f8:	7ff00000 	.word	0x7ff00000
 80099fc:	0800db4d 	.word	0x0800db4d
 8009a00:	0800db44 	.word	0x0800db44
 8009a04:	0800db21 	.word	0x0800db21
 8009a08:	0800db80 	.word	0x0800db80
 8009a0c:	0800db58 	.word	0x0800db58
 8009a10:	07de      	lsls	r6, r3, #31
 8009a12:	d504      	bpl.n	8009a1e <_dtoa_r+0x336>
 8009a14:	ed91 6b00 	vldr	d6, [r1]
 8009a18:	3201      	adds	r2, #1
 8009a1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a1e:	105b      	asrs	r3, r3, #1
 8009a20:	3108      	adds	r1, #8
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1f4      	bne.n	8009a10 <_dtoa_r+0x328>
 8009a26:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 80a7 	beq.w	8009b88 <_dtoa_r+0x4a0>
 8009a3a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009a3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4a:	f140 809d 	bpl.w	8009b88 <_dtoa_r+0x4a0>
 8009a4e:	f1b9 0f00 	cmp.w	r9, #0
 8009a52:	f000 8099 	beq.w	8009b88 <_dtoa_r+0x4a0>
 8009a56:	9b06      	ldr	r3, [sp, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	dd30      	ble.n	8009abe <_dtoa_r+0x3d6>
 8009a5c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009a60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a68:	9d06      	ldr	r5, [sp, #24]
 8009a6a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009a6e:	3201      	adds	r2, #1
 8009a70:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a74:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009a78:	ee07 2a90 	vmov	s15, r2
 8009a7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a80:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009a84:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009a88:	9a03      	ldr	r2, [sp, #12]
 8009a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8009a92:	2d00      	cmp	r5, #0
 8009a94:	d17b      	bne.n	8009b8e <_dtoa_r+0x4a6>
 8009a96:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009a9a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009a9e:	ec41 0b17 	vmov	d7, r0, r1
 8009aa2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aaa:	f300 8253 	bgt.w	8009f54 <_dtoa_r+0x86c>
 8009aae:	eeb1 7b47 	vneg.f64	d7, d7
 8009ab2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aba:	f100 8249 	bmi.w	8009f50 <_dtoa_r+0x868>
 8009abe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009ac2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ac6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f2c0 8119 	blt.w	8009d00 <_dtoa_r+0x618>
 8009ace:	f1bb 0f0e 	cmp.w	fp, #14
 8009ad2:	f300 8115 	bgt.w	8009d00 <_dtoa_r+0x618>
 8009ad6:	4bc3      	ldr	r3, [pc, #780]	; (8009de4 <_dtoa_r+0x6fc>)
 8009ad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009adc:	ed93 6b00 	vldr	d6, [r3]
 8009ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f280 80ba 	bge.w	8009c5c <_dtoa_r+0x574>
 8009ae8:	f1b9 0f00 	cmp.w	r9, #0
 8009aec:	f300 80b6 	bgt.w	8009c5c <_dtoa_r+0x574>
 8009af0:	f040 822d 	bne.w	8009f4e <_dtoa_r+0x866>
 8009af4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009af8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009afc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b08:	464d      	mov	r5, r9
 8009b0a:	464f      	mov	r7, r9
 8009b0c:	f280 8204 	bge.w	8009f18 <_dtoa_r+0x830>
 8009b10:	9b04      	ldr	r3, [sp, #16]
 8009b12:	9a04      	ldr	r2, [sp, #16]
 8009b14:	1c5e      	adds	r6, r3, #1
 8009b16:	2331      	movs	r3, #49	; 0x31
 8009b18:	7013      	strb	r3, [r2, #0]
 8009b1a:	f10b 0b01 	add.w	fp, fp, #1
 8009b1e:	e1ff      	b.n	8009f20 <_dtoa_r+0x838>
 8009b20:	2202      	movs	r2, #2
 8009b22:	e731      	b.n	8009988 <_dtoa_r+0x2a0>
 8009b24:	d02e      	beq.n	8009b84 <_dtoa_r+0x49c>
 8009b26:	f1cb 0300 	rsb	r3, fp, #0
 8009b2a:	4aae      	ldr	r2, [pc, #696]	; (8009de4 <_dtoa_r+0x6fc>)
 8009b2c:	f003 010f 	and.w	r1, r3, #15
 8009b30:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009b34:	ed92 7b00 	vldr	d7, [r2]
 8009b38:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8009b3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b40:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009b44:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8009b48:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009b4c:	49a6      	ldr	r1, [pc, #664]	; (8009de8 <_dtoa_r+0x700>)
 8009b4e:	111b      	asrs	r3, r3, #4
 8009b50:	2000      	movs	r0, #0
 8009b52:	2202      	movs	r2, #2
 8009b54:	b93b      	cbnz	r3, 8009b66 <_dtoa_r+0x47e>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	f43f af6b 	beq.w	8009a32 <_dtoa_r+0x34a>
 8009b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b64:	e765      	b.n	8009a32 <_dtoa_r+0x34a>
 8009b66:	07dd      	lsls	r5, r3, #31
 8009b68:	d509      	bpl.n	8009b7e <_dtoa_r+0x496>
 8009b6a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009b6e:	ed91 7b00 	vldr	d7, [r1]
 8009b72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009b76:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009b7a:	3201      	adds	r2, #1
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	105b      	asrs	r3, r3, #1
 8009b80:	3108      	adds	r1, #8
 8009b82:	e7e7      	b.n	8009b54 <_dtoa_r+0x46c>
 8009b84:	2202      	movs	r2, #2
 8009b86:	e754      	b.n	8009a32 <_dtoa_r+0x34a>
 8009b88:	465b      	mov	r3, fp
 8009b8a:	464d      	mov	r5, r9
 8009b8c:	e770      	b.n	8009a70 <_dtoa_r+0x388>
 8009b8e:	4a95      	ldr	r2, [pc, #596]	; (8009de4 <_dtoa_r+0x6fc>)
 8009b90:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8009b94:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b9a:	ec41 0b17 	vmov	d7, r0, r1
 8009b9e:	b35a      	cbz	r2, 8009bf8 <_dtoa_r+0x510>
 8009ba0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009ba4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009ba8:	9e04      	ldr	r6, [sp, #16]
 8009baa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009bae:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009bb2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009bb6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009bba:	ee14 2a90 	vmov	r2, s9
 8009bbe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009bc2:	3230      	adds	r2, #48	; 0x30
 8009bc4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009bc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd0:	f806 2b01 	strb.w	r2, [r6], #1
 8009bd4:	d43b      	bmi.n	8009c4e <_dtoa_r+0x566>
 8009bd6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009bda:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be2:	d472      	bmi.n	8009cca <_dtoa_r+0x5e2>
 8009be4:	9a04      	ldr	r2, [sp, #16]
 8009be6:	1ab2      	subs	r2, r6, r2
 8009be8:	4295      	cmp	r5, r2
 8009bea:	f77f af68 	ble.w	8009abe <_dtoa_r+0x3d6>
 8009bee:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009bf2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009bf6:	e7de      	b.n	8009bb6 <_dtoa_r+0x4ce>
 8009bf8:	9a04      	ldr	r2, [sp, #16]
 8009bfa:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009bfe:	1956      	adds	r6, r2, r5
 8009c00:	4611      	mov	r1, r2
 8009c02:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c06:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c0a:	ee14 2a90 	vmov	r2, s9
 8009c0e:	3230      	adds	r2, #48	; 0x30
 8009c10:	f801 2b01 	strb.w	r2, [r1], #1
 8009c14:	42b1      	cmp	r1, r6
 8009c16:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c1a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c1e:	d11a      	bne.n	8009c56 <_dtoa_r+0x56e>
 8009c20:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009c24:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009c28:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c30:	dc4b      	bgt.n	8009cca <_dtoa_r+0x5e2>
 8009c32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3e:	f57f af3e 	bpl.w	8009abe <_dtoa_r+0x3d6>
 8009c42:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c46:	2a30      	cmp	r2, #48	; 0x30
 8009c48:	f106 31ff 	add.w	r1, r6, #4294967295
 8009c4c:	d001      	beq.n	8009c52 <_dtoa_r+0x56a>
 8009c4e:	469b      	mov	fp, r3
 8009c50:	e02a      	b.n	8009ca8 <_dtoa_r+0x5c0>
 8009c52:	460e      	mov	r6, r1
 8009c54:	e7f5      	b.n	8009c42 <_dtoa_r+0x55a>
 8009c56:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c5a:	e7d4      	b.n	8009c06 <_dtoa_r+0x51e>
 8009c5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c60:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009c64:	9e04      	ldr	r6, [sp, #16]
 8009c66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009c6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009c6e:	ee15 3a10 	vmov	r3, s10
 8009c72:	3330      	adds	r3, #48	; 0x30
 8009c74:	f806 3b01 	strb.w	r3, [r6], #1
 8009c78:	9b04      	ldr	r3, [sp, #16]
 8009c7a:	1af3      	subs	r3, r6, r3
 8009c7c:	4599      	cmp	r9, r3
 8009c7e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009c82:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009c86:	d133      	bne.n	8009cf0 <_dtoa_r+0x608>
 8009c88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009c8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c94:	dc18      	bgt.n	8009cc8 <_dtoa_r+0x5e0>
 8009c96:	eeb4 7b46 	vcmp.f64	d7, d6
 8009c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9e:	d103      	bne.n	8009ca8 <_dtoa_r+0x5c0>
 8009ca0:	ee15 3a10 	vmov	r3, s10
 8009ca4:	07db      	lsls	r3, r3, #31
 8009ca6:	d40f      	bmi.n	8009cc8 <_dtoa_r+0x5e0>
 8009ca8:	9901      	ldr	r1, [sp, #4]
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fab7 	bl	800a21e <_Bfree>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009cb4:	7033      	strb	r3, [r6, #0]
 8009cb6:	f10b 0301 	add.w	r3, fp, #1
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f43f ad5b 	beq.w	800977a <_dtoa_r+0x92>
 8009cc4:	601e      	str	r6, [r3, #0]
 8009cc6:	e558      	b.n	800977a <_dtoa_r+0x92>
 8009cc8:	465b      	mov	r3, fp
 8009cca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009cce:	2939      	cmp	r1, #57	; 0x39
 8009cd0:	f106 32ff 	add.w	r2, r6, #4294967295
 8009cd4:	d106      	bne.n	8009ce4 <_dtoa_r+0x5fc>
 8009cd6:	9904      	ldr	r1, [sp, #16]
 8009cd8:	4291      	cmp	r1, r2
 8009cda:	d107      	bne.n	8009cec <_dtoa_r+0x604>
 8009cdc:	2230      	movs	r2, #48	; 0x30
 8009cde:	700a      	strb	r2, [r1, #0]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	460a      	mov	r2, r1
 8009ce4:	7811      	ldrb	r1, [r2, #0]
 8009ce6:	3101      	adds	r1, #1
 8009ce8:	7011      	strb	r1, [r2, #0]
 8009cea:	e7b0      	b.n	8009c4e <_dtoa_r+0x566>
 8009cec:	4616      	mov	r6, r2
 8009cee:	e7ec      	b.n	8009cca <_dtoa_r+0x5e2>
 8009cf0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009cf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cfc:	d1b3      	bne.n	8009c66 <_dtoa_r+0x57e>
 8009cfe:	e7d3      	b.n	8009ca8 <_dtoa_r+0x5c0>
 8009d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	f000 808d 	beq.w	8009e22 <_dtoa_r+0x73a>
 8009d08:	9a08      	ldr	r2, [sp, #32]
 8009d0a:	2a01      	cmp	r2, #1
 8009d0c:	dc72      	bgt.n	8009df4 <_dtoa_r+0x70c>
 8009d0e:	2f00      	cmp	r7, #0
 8009d10:	d06c      	beq.n	8009dec <_dtoa_r+0x704>
 8009d12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d16:	4645      	mov	r5, r8
 8009d18:	4656      	mov	r6, sl
 8009d1a:	9a07      	ldr	r2, [sp, #28]
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	441a      	add	r2, r3
 8009d20:	4620      	mov	r0, r4
 8009d22:	449a      	add	sl, r3
 8009d24:	9207      	str	r2, [sp, #28]
 8009d26:	f000 fb1a 	bl	800a35e <__i2b>
 8009d2a:	4607      	mov	r7, r0
 8009d2c:	2e00      	cmp	r6, #0
 8009d2e:	dd0b      	ble.n	8009d48 <_dtoa_r+0x660>
 8009d30:	9b07      	ldr	r3, [sp, #28]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	dd08      	ble.n	8009d48 <_dtoa_r+0x660>
 8009d36:	42b3      	cmp	r3, r6
 8009d38:	9a07      	ldr	r2, [sp, #28]
 8009d3a:	bfa8      	it	ge
 8009d3c:	4633      	movge	r3, r6
 8009d3e:	ebaa 0a03 	sub.w	sl, sl, r3
 8009d42:	1af6      	subs	r6, r6, r3
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	f1b8 0f00 	cmp.w	r8, #0
 8009d4c:	d01d      	beq.n	8009d8a <_dtoa_r+0x6a2>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d06a      	beq.n	8009e2a <_dtoa_r+0x742>
 8009d54:	b18d      	cbz	r5, 8009d7a <_dtoa_r+0x692>
 8009d56:	4639      	mov	r1, r7
 8009d58:	462a      	mov	r2, r5
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fb9e 	bl	800a49c <__pow5mult>
 8009d60:	9a01      	ldr	r2, [sp, #4]
 8009d62:	4601      	mov	r1, r0
 8009d64:	4607      	mov	r7, r0
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 fb02 	bl	800a370 <__multiply>
 8009d6c:	9901      	ldr	r1, [sp, #4]
 8009d6e:	900c      	str	r0, [sp, #48]	; 0x30
 8009d70:	4620      	mov	r0, r4
 8009d72:	f000 fa54 	bl	800a21e <_Bfree>
 8009d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	ebb8 0205 	subs.w	r2, r8, r5
 8009d7e:	d004      	beq.n	8009d8a <_dtoa_r+0x6a2>
 8009d80:	9901      	ldr	r1, [sp, #4]
 8009d82:	4620      	mov	r0, r4
 8009d84:	f000 fb8a 	bl	800a49c <__pow5mult>
 8009d88:	9001      	str	r0, [sp, #4]
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f000 fae6 	bl	800a35e <__i2b>
 8009d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d94:	4605      	mov	r5, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 81ca 	beq.w	800a130 <_dtoa_r+0xa48>
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4601      	mov	r1, r0
 8009da0:	4620      	mov	r0, r4
 8009da2:	f000 fb7b 	bl	800a49c <__pow5mult>
 8009da6:	9b08      	ldr	r3, [sp, #32]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	4605      	mov	r5, r0
 8009dac:	dc44      	bgt.n	8009e38 <_dtoa_r+0x750>
 8009dae:	9b02      	ldr	r3, [sp, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d13c      	bne.n	8009e2e <_dtoa_r+0x746>
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d137      	bne.n	8009e2e <_dtoa_r+0x746>
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dc4:	0d1b      	lsrs	r3, r3, #20
 8009dc6:	051b      	lsls	r3, r3, #20
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d033      	beq.n	8009e34 <_dtoa_r+0x74c>
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	f10a 0a01 	add.w	sl, sl, #1
 8009dd4:	9307      	str	r3, [sp, #28]
 8009dd6:	f04f 0801 	mov.w	r8, #1
 8009dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ddc:	bb73      	cbnz	r3, 8009e3c <_dtoa_r+0x754>
 8009dde:	2001      	movs	r0, #1
 8009de0:	e034      	b.n	8009e4c <_dtoa_r+0x764>
 8009de2:	bf00      	nop
 8009de4:	0800db80 	.word	0x0800db80
 8009de8:	0800db58 	.word	0x0800db58
 8009dec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009df2:	e790      	b.n	8009d16 <_dtoa_r+0x62e>
 8009df4:	f109 35ff 	add.w	r5, r9, #4294967295
 8009df8:	45a8      	cmp	r8, r5
 8009dfa:	bfbf      	itttt	lt
 8009dfc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8009dfe:	eba5 0808 	sublt.w	r8, r5, r8
 8009e02:	4443      	addlt	r3, r8
 8009e04:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009e06:	bfb6      	itet	lt
 8009e08:	46a8      	movlt	r8, r5
 8009e0a:	eba8 0505 	subge.w	r5, r8, r5
 8009e0e:	2500      	movlt	r5, #0
 8009e10:	f1b9 0f00 	cmp.w	r9, #0
 8009e14:	bfb9      	ittee	lt
 8009e16:	ebaa 0609 	sublt.w	r6, sl, r9
 8009e1a:	2300      	movlt	r3, #0
 8009e1c:	4656      	movge	r6, sl
 8009e1e:	464b      	movge	r3, r9
 8009e20:	e77b      	b.n	8009d1a <_dtoa_r+0x632>
 8009e22:	4645      	mov	r5, r8
 8009e24:	4656      	mov	r6, sl
 8009e26:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e28:	e780      	b.n	8009d2c <_dtoa_r+0x644>
 8009e2a:	4642      	mov	r2, r8
 8009e2c:	e7a8      	b.n	8009d80 <_dtoa_r+0x698>
 8009e2e:	f04f 0800 	mov.w	r8, #0
 8009e32:	e7d2      	b.n	8009dda <_dtoa_r+0x6f2>
 8009e34:	4698      	mov	r8, r3
 8009e36:	e7d0      	b.n	8009dda <_dtoa_r+0x6f2>
 8009e38:	f04f 0800 	mov.w	r8, #0
 8009e3c:	692b      	ldr	r3, [r5, #16]
 8009e3e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009e42:	6918      	ldr	r0, [r3, #16]
 8009e44:	f000 fa3d 	bl	800a2c2 <__hi0bits>
 8009e48:	f1c0 0020 	rsb	r0, r0, #32
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	4418      	add	r0, r3
 8009e50:	f010 001f 	ands.w	r0, r0, #31
 8009e54:	d047      	beq.n	8009ee6 <_dtoa_r+0x7fe>
 8009e56:	f1c0 0320 	rsb	r3, r0, #32
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	dd3b      	ble.n	8009ed6 <_dtoa_r+0x7ee>
 8009e5e:	9b07      	ldr	r3, [sp, #28]
 8009e60:	f1c0 001c 	rsb	r0, r0, #28
 8009e64:	4482      	add	sl, r0
 8009e66:	4406      	add	r6, r0
 8009e68:	4403      	add	r3, r0
 8009e6a:	9307      	str	r3, [sp, #28]
 8009e6c:	f1ba 0f00 	cmp.w	sl, #0
 8009e70:	dd05      	ble.n	8009e7e <_dtoa_r+0x796>
 8009e72:	4652      	mov	r2, sl
 8009e74:	9901      	ldr	r1, [sp, #4]
 8009e76:	4620      	mov	r0, r4
 8009e78:	f000 fb5e 	bl	800a538 <__lshift>
 8009e7c:	9001      	str	r0, [sp, #4]
 8009e7e:	9b07      	ldr	r3, [sp, #28]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	dd05      	ble.n	8009e90 <_dtoa_r+0x7a8>
 8009e84:	4629      	mov	r1, r5
 8009e86:	461a      	mov	r2, r3
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f000 fb55 	bl	800a538 <__lshift>
 8009e8e:	4605      	mov	r5, r0
 8009e90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e92:	b353      	cbz	r3, 8009eea <_dtoa_r+0x802>
 8009e94:	4629      	mov	r1, r5
 8009e96:	9801      	ldr	r0, [sp, #4]
 8009e98:	f000 fba2 	bl	800a5e0 <__mcmp>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	da24      	bge.n	8009eea <_dtoa_r+0x802>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	220a      	movs	r2, #10
 8009ea4:	9901      	ldr	r1, [sp, #4]
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 f9d0 	bl	800a24c <__multadd>
 8009eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eae:	9001      	str	r0, [sp, #4]
 8009eb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 8142 	beq.w	800a13e <_dtoa_r+0xa56>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	220a      	movs	r2, #10
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 f9c3 	bl	800a24c <__multadd>
 8009ec6:	9b06      	ldr	r3, [sp, #24]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	4607      	mov	r7, r0
 8009ecc:	dc4b      	bgt.n	8009f66 <_dtoa_r+0x87e>
 8009ece:	9b08      	ldr	r3, [sp, #32]
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	dd48      	ble.n	8009f66 <_dtoa_r+0x87e>
 8009ed4:	e011      	b.n	8009efa <_dtoa_r+0x812>
 8009ed6:	d0c9      	beq.n	8009e6c <_dtoa_r+0x784>
 8009ed8:	9a07      	ldr	r2, [sp, #28]
 8009eda:	331c      	adds	r3, #28
 8009edc:	441a      	add	r2, r3
 8009ede:	449a      	add	sl, r3
 8009ee0:	441e      	add	r6, r3
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	e7c1      	b.n	8009e6a <_dtoa_r+0x782>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	e7f6      	b.n	8009ed8 <_dtoa_r+0x7f0>
 8009eea:	f1b9 0f00 	cmp.w	r9, #0
 8009eee:	dc34      	bgt.n	8009f5a <_dtoa_r+0x872>
 8009ef0:	9b08      	ldr	r3, [sp, #32]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	dd31      	ble.n	8009f5a <_dtoa_r+0x872>
 8009ef6:	f8cd 9018 	str.w	r9, [sp, #24]
 8009efa:	9b06      	ldr	r3, [sp, #24]
 8009efc:	b963      	cbnz	r3, 8009f18 <_dtoa_r+0x830>
 8009efe:	4629      	mov	r1, r5
 8009f00:	2205      	movs	r2, #5
 8009f02:	4620      	mov	r0, r4
 8009f04:	f000 f9a2 	bl	800a24c <__multadd>
 8009f08:	4601      	mov	r1, r0
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	9801      	ldr	r0, [sp, #4]
 8009f0e:	f000 fb67 	bl	800a5e0 <__mcmp>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	f73f adfc 	bgt.w	8009b10 <_dtoa_r+0x428>
 8009f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1a:	9e04      	ldr	r6, [sp, #16]
 8009f1c:	ea6f 0b03 	mvn.w	fp, r3
 8009f20:	f04f 0900 	mov.w	r9, #0
 8009f24:	4629      	mov	r1, r5
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 f979 	bl	800a21e <_Bfree>
 8009f2c:	2f00      	cmp	r7, #0
 8009f2e:	f43f aebb 	beq.w	8009ca8 <_dtoa_r+0x5c0>
 8009f32:	f1b9 0f00 	cmp.w	r9, #0
 8009f36:	d005      	beq.n	8009f44 <_dtoa_r+0x85c>
 8009f38:	45b9      	cmp	r9, r7
 8009f3a:	d003      	beq.n	8009f44 <_dtoa_r+0x85c>
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 f96d 	bl	800a21e <_Bfree>
 8009f44:	4639      	mov	r1, r7
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 f969 	bl	800a21e <_Bfree>
 8009f4c:	e6ac      	b.n	8009ca8 <_dtoa_r+0x5c0>
 8009f4e:	2500      	movs	r5, #0
 8009f50:	462f      	mov	r7, r5
 8009f52:	e7e1      	b.n	8009f18 <_dtoa_r+0x830>
 8009f54:	469b      	mov	fp, r3
 8009f56:	462f      	mov	r7, r5
 8009f58:	e5da      	b.n	8009b10 <_dtoa_r+0x428>
 8009f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f5c:	f8cd 9018 	str.w	r9, [sp, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80f3 	beq.w	800a14c <_dtoa_r+0xa64>
 8009f66:	2e00      	cmp	r6, #0
 8009f68:	dd05      	ble.n	8009f76 <_dtoa_r+0x88e>
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 fae2 	bl	800a538 <__lshift>
 8009f74:	4607      	mov	r7, r0
 8009f76:	f1b8 0f00 	cmp.w	r8, #0
 8009f7a:	d04c      	beq.n	800a016 <_dtoa_r+0x92e>
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 f919 	bl	800a1b6 <_Balloc>
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	3202      	adds	r2, #2
 8009f88:	4606      	mov	r6, r0
 8009f8a:	0092      	lsls	r2, r2, #2
 8009f8c:	f107 010c 	add.w	r1, r7, #12
 8009f90:	300c      	adds	r0, #12
 8009f92:	f000 f903 	bl	800a19c <memcpy>
 8009f96:	2201      	movs	r2, #1
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f000 facc 	bl	800a538 <__lshift>
 8009fa0:	9b02      	ldr	r3, [sp, #8]
 8009fa2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	46b9      	mov	r9, r7
 8009fac:	9307      	str	r3, [sp, #28]
 8009fae:	4607      	mov	r7, r0
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	9801      	ldr	r0, [sp, #4]
 8009fb4:	f7ff fb0c 	bl	80095d0 <quorem>
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4606      	mov	r6, r0
 8009fbc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009fc0:	9801      	ldr	r0, [sp, #4]
 8009fc2:	f000 fb0d 	bl	800a5e0 <__mcmp>
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	9002      	str	r0, [sp, #8]
 8009fca:	4629      	mov	r1, r5
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f000 fb21 	bl	800a614 <__mdiff>
 8009fd2:	68c3      	ldr	r3, [r0, #12]
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	bb03      	cbnz	r3, 800a01a <_dtoa_r+0x932>
 8009fd8:	4601      	mov	r1, r0
 8009fda:	9009      	str	r0, [sp, #36]	; 0x24
 8009fdc:	9801      	ldr	r0, [sp, #4]
 8009fde:	f000 faff 	bl	800a5e0 <__mcmp>
 8009fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4620      	mov	r0, r4
 8009fea:	9309      	str	r3, [sp, #36]	; 0x24
 8009fec:	f000 f917 	bl	800a21e <_Bfree>
 8009ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff2:	b9a3      	cbnz	r3, 800a01e <_dtoa_r+0x936>
 8009ff4:	9a08      	ldr	r2, [sp, #32]
 8009ff6:	b992      	cbnz	r2, 800a01e <_dtoa_r+0x936>
 8009ff8:	9a07      	ldr	r2, [sp, #28]
 8009ffa:	b982      	cbnz	r2, 800a01e <_dtoa_r+0x936>
 8009ffc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a000:	d029      	beq.n	800a056 <_dtoa_r+0x96e>
 800a002:	9b02      	ldr	r3, [sp, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	dd01      	ble.n	800a00c <_dtoa_r+0x924>
 800a008:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800a00c:	f10a 0601 	add.w	r6, sl, #1
 800a010:	f88a 8000 	strb.w	r8, [sl]
 800a014:	e786      	b.n	8009f24 <_dtoa_r+0x83c>
 800a016:	4638      	mov	r0, r7
 800a018:	e7c2      	b.n	8009fa0 <_dtoa_r+0x8b8>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e7e3      	b.n	8009fe6 <_dtoa_r+0x8fe>
 800a01e:	9a02      	ldr	r2, [sp, #8]
 800a020:	2a00      	cmp	r2, #0
 800a022:	db04      	blt.n	800a02e <_dtoa_r+0x946>
 800a024:	d124      	bne.n	800a070 <_dtoa_r+0x988>
 800a026:	9a08      	ldr	r2, [sp, #32]
 800a028:	bb12      	cbnz	r2, 800a070 <_dtoa_r+0x988>
 800a02a:	9a07      	ldr	r2, [sp, #28]
 800a02c:	bb02      	cbnz	r2, 800a070 <_dtoa_r+0x988>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	ddec      	ble.n	800a00c <_dtoa_r+0x924>
 800a032:	2201      	movs	r2, #1
 800a034:	9901      	ldr	r1, [sp, #4]
 800a036:	4620      	mov	r0, r4
 800a038:	f000 fa7e 	bl	800a538 <__lshift>
 800a03c:	4629      	mov	r1, r5
 800a03e:	9001      	str	r0, [sp, #4]
 800a040:	f000 face 	bl	800a5e0 <__mcmp>
 800a044:	2800      	cmp	r0, #0
 800a046:	dc03      	bgt.n	800a050 <_dtoa_r+0x968>
 800a048:	d1e0      	bne.n	800a00c <_dtoa_r+0x924>
 800a04a:	f018 0f01 	tst.w	r8, #1
 800a04e:	d0dd      	beq.n	800a00c <_dtoa_r+0x924>
 800a050:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a054:	d1d8      	bne.n	800a008 <_dtoa_r+0x920>
 800a056:	2339      	movs	r3, #57	; 0x39
 800a058:	f10a 0601 	add.w	r6, sl, #1
 800a05c:	f88a 3000 	strb.w	r3, [sl]
 800a060:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a064:	2b39      	cmp	r3, #57	; 0x39
 800a066:	f106 32ff 	add.w	r2, r6, #4294967295
 800a06a:	d04c      	beq.n	800a106 <_dtoa_r+0xa1e>
 800a06c:	3301      	adds	r3, #1
 800a06e:	e051      	b.n	800a114 <_dtoa_r+0xa2c>
 800a070:	2b00      	cmp	r3, #0
 800a072:	f10a 0601 	add.w	r6, sl, #1
 800a076:	dd05      	ble.n	800a084 <_dtoa_r+0x99c>
 800a078:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a07c:	d0eb      	beq.n	800a056 <_dtoa_r+0x96e>
 800a07e:	f108 0801 	add.w	r8, r8, #1
 800a082:	e7c5      	b.n	800a010 <_dtoa_r+0x928>
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	9a06      	ldr	r2, [sp, #24]
 800a088:	f806 8c01 	strb.w	r8, [r6, #-1]
 800a08c:	1af3      	subs	r3, r6, r3
 800a08e:	4293      	cmp	r3, r2
 800a090:	d021      	beq.n	800a0d6 <_dtoa_r+0x9ee>
 800a092:	2300      	movs	r3, #0
 800a094:	220a      	movs	r2, #10
 800a096:	9901      	ldr	r1, [sp, #4]
 800a098:	4620      	mov	r0, r4
 800a09a:	f000 f8d7 	bl	800a24c <__multadd>
 800a09e:	45b9      	cmp	r9, r7
 800a0a0:	9001      	str	r0, [sp, #4]
 800a0a2:	f04f 0300 	mov.w	r3, #0
 800a0a6:	f04f 020a 	mov.w	r2, #10
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	d105      	bne.n	800a0bc <_dtoa_r+0x9d4>
 800a0b0:	f000 f8cc 	bl	800a24c <__multadd>
 800a0b4:	4681      	mov	r9, r0
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	46b2      	mov	sl, r6
 800a0ba:	e779      	b.n	8009fb0 <_dtoa_r+0x8c8>
 800a0bc:	f000 f8c6 	bl	800a24c <__multadd>
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	4681      	mov	r9, r0
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	220a      	movs	r2, #10
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 f8bf 	bl	800a24c <__multadd>
 800a0ce:	4607      	mov	r7, r0
 800a0d0:	e7f2      	b.n	800a0b8 <_dtoa_r+0x9d0>
 800a0d2:	f04f 0900 	mov.w	r9, #0
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	9901      	ldr	r1, [sp, #4]
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 fa2c 	bl	800a538 <__lshift>
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	9001      	str	r0, [sp, #4]
 800a0e4:	f000 fa7c 	bl	800a5e0 <__mcmp>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	dcb9      	bgt.n	800a060 <_dtoa_r+0x978>
 800a0ec:	d102      	bne.n	800a0f4 <_dtoa_r+0xa0c>
 800a0ee:	f018 0f01 	tst.w	r8, #1
 800a0f2:	d1b5      	bne.n	800a060 <_dtoa_r+0x978>
 800a0f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a0f8:	2b30      	cmp	r3, #48	; 0x30
 800a0fa:	f106 32ff 	add.w	r2, r6, #4294967295
 800a0fe:	f47f af11 	bne.w	8009f24 <_dtoa_r+0x83c>
 800a102:	4616      	mov	r6, r2
 800a104:	e7f6      	b.n	800a0f4 <_dtoa_r+0xa0c>
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	4293      	cmp	r3, r2
 800a10a:	d105      	bne.n	800a118 <_dtoa_r+0xa30>
 800a10c:	9a04      	ldr	r2, [sp, #16]
 800a10e:	f10b 0b01 	add.w	fp, fp, #1
 800a112:	2331      	movs	r3, #49	; 0x31
 800a114:	7013      	strb	r3, [r2, #0]
 800a116:	e705      	b.n	8009f24 <_dtoa_r+0x83c>
 800a118:	4616      	mov	r6, r2
 800a11a:	e7a1      	b.n	800a060 <_dtoa_r+0x978>
 800a11c:	4b16      	ldr	r3, [pc, #88]	; (800a178 <_dtoa_r+0xa90>)
 800a11e:	f7ff bb48 	b.w	80097b2 <_dtoa_r+0xca>
 800a122:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a124:	2b00      	cmp	r3, #0
 800a126:	f47f ab23 	bne.w	8009770 <_dtoa_r+0x88>
 800a12a:	4b14      	ldr	r3, [pc, #80]	; (800a17c <_dtoa_r+0xa94>)
 800a12c:	f7ff bb41 	b.w	80097b2 <_dtoa_r+0xca>
 800a130:	9b08      	ldr	r3, [sp, #32]
 800a132:	2b01      	cmp	r3, #1
 800a134:	f77f ae3b 	ble.w	8009dae <_dtoa_r+0x6c6>
 800a138:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a13c:	e64f      	b.n	8009dde <_dtoa_r+0x6f6>
 800a13e:	9b06      	ldr	r3, [sp, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	dc03      	bgt.n	800a14c <_dtoa_r+0xa64>
 800a144:	9b08      	ldr	r3, [sp, #32]
 800a146:	2b02      	cmp	r3, #2
 800a148:	f73f aed7 	bgt.w	8009efa <_dtoa_r+0x812>
 800a14c:	9e04      	ldr	r6, [sp, #16]
 800a14e:	9801      	ldr	r0, [sp, #4]
 800a150:	4629      	mov	r1, r5
 800a152:	f7ff fa3d 	bl	80095d0 <quorem>
 800a156:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a15a:	f806 8b01 	strb.w	r8, [r6], #1
 800a15e:	9b04      	ldr	r3, [sp, #16]
 800a160:	9a06      	ldr	r2, [sp, #24]
 800a162:	1af3      	subs	r3, r6, r3
 800a164:	429a      	cmp	r2, r3
 800a166:	ddb4      	ble.n	800a0d2 <_dtoa_r+0x9ea>
 800a168:	2300      	movs	r3, #0
 800a16a:	220a      	movs	r2, #10
 800a16c:	9901      	ldr	r1, [sp, #4]
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 f86c 	bl	800a24c <__multadd>
 800a174:	9001      	str	r0, [sp, #4]
 800a176:	e7ea      	b.n	800a14e <_dtoa_r+0xa66>
 800a178:	0800db20 	.word	0x0800db20
 800a17c:	0800db44 	.word	0x0800db44

0800a180 <_localeconv_r>:
 800a180:	4b04      	ldr	r3, [pc, #16]	; (800a194 <_localeconv_r+0x14>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6a18      	ldr	r0, [r3, #32]
 800a186:	4b04      	ldr	r3, [pc, #16]	; (800a198 <_localeconv_r+0x18>)
 800a188:	2800      	cmp	r0, #0
 800a18a:	bf08      	it	eq
 800a18c:	4618      	moveq	r0, r3
 800a18e:	30f0      	adds	r0, #240	; 0xf0
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20000014 	.word	0x20000014
 800a198:	20000078 	.word	0x20000078

0800a19c <memcpy>:
 800a19c:	b510      	push	{r4, lr}
 800a19e:	1e43      	subs	r3, r0, #1
 800a1a0:	440a      	add	r2, r1
 800a1a2:	4291      	cmp	r1, r2
 800a1a4:	d100      	bne.n	800a1a8 <memcpy+0xc>
 800a1a6:	bd10      	pop	{r4, pc}
 800a1a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1b0:	e7f7      	b.n	800a1a2 <memcpy+0x6>

0800a1b2 <__malloc_lock>:
 800a1b2:	4770      	bx	lr

0800a1b4 <__malloc_unlock>:
 800a1b4:	4770      	bx	lr

0800a1b6 <_Balloc>:
 800a1b6:	b570      	push	{r4, r5, r6, lr}
 800a1b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	460e      	mov	r6, r1
 800a1be:	b93d      	cbnz	r5, 800a1d0 <_Balloc+0x1a>
 800a1c0:	2010      	movs	r0, #16
 800a1c2:	f7fe fcdb 	bl	8008b7c <malloc>
 800a1c6:	6260      	str	r0, [r4, #36]	; 0x24
 800a1c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1cc:	6005      	str	r5, [r0, #0]
 800a1ce:	60c5      	str	r5, [r0, #12]
 800a1d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a1d2:	68eb      	ldr	r3, [r5, #12]
 800a1d4:	b183      	cbz	r3, 800a1f8 <_Balloc+0x42>
 800a1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a1de:	b9b8      	cbnz	r0, 800a210 <_Balloc+0x5a>
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	fa01 f506 	lsl.w	r5, r1, r6
 800a1e6:	1d6a      	adds	r2, r5, #5
 800a1e8:	0092      	lsls	r2, r2, #2
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f000 fabe 	bl	800a76c <_calloc_r>
 800a1f0:	b160      	cbz	r0, 800a20c <_Balloc+0x56>
 800a1f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a1f6:	e00e      	b.n	800a216 <_Balloc+0x60>
 800a1f8:	2221      	movs	r2, #33	; 0x21
 800a1fa:	2104      	movs	r1, #4
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 fab5 	bl	800a76c <_calloc_r>
 800a202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a204:	60e8      	str	r0, [r5, #12]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e4      	bne.n	800a1d6 <_Balloc+0x20>
 800a20c:	2000      	movs	r0, #0
 800a20e:	bd70      	pop	{r4, r5, r6, pc}
 800a210:	6802      	ldr	r2, [r0, #0]
 800a212:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a216:	2300      	movs	r3, #0
 800a218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a21c:	e7f7      	b.n	800a20e <_Balloc+0x58>

0800a21e <_Bfree>:
 800a21e:	b570      	push	{r4, r5, r6, lr}
 800a220:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a222:	4606      	mov	r6, r0
 800a224:	460d      	mov	r5, r1
 800a226:	b93c      	cbnz	r4, 800a238 <_Bfree+0x1a>
 800a228:	2010      	movs	r0, #16
 800a22a:	f7fe fca7 	bl	8008b7c <malloc>
 800a22e:	6270      	str	r0, [r6, #36]	; 0x24
 800a230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a234:	6004      	str	r4, [r0, #0]
 800a236:	60c4      	str	r4, [r0, #12]
 800a238:	b13d      	cbz	r5, 800a24a <_Bfree+0x2c>
 800a23a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a23c:	686a      	ldr	r2, [r5, #4]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a244:	6029      	str	r1, [r5, #0]
 800a246:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a24a:	bd70      	pop	{r4, r5, r6, pc}

0800a24c <__multadd>:
 800a24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a250:	690d      	ldr	r5, [r1, #16]
 800a252:	461f      	mov	r7, r3
 800a254:	4606      	mov	r6, r0
 800a256:	460c      	mov	r4, r1
 800a258:	f101 0c14 	add.w	ip, r1, #20
 800a25c:	2300      	movs	r3, #0
 800a25e:	f8dc 0000 	ldr.w	r0, [ip]
 800a262:	b281      	uxth	r1, r0
 800a264:	fb02 7101 	mla	r1, r2, r1, r7
 800a268:	0c0f      	lsrs	r7, r1, #16
 800a26a:	0c00      	lsrs	r0, r0, #16
 800a26c:	fb02 7000 	mla	r0, r2, r0, r7
 800a270:	b289      	uxth	r1, r1
 800a272:	3301      	adds	r3, #1
 800a274:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a278:	429d      	cmp	r5, r3
 800a27a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a27e:	f84c 1b04 	str.w	r1, [ip], #4
 800a282:	dcec      	bgt.n	800a25e <__multadd+0x12>
 800a284:	b1d7      	cbz	r7, 800a2bc <__multadd+0x70>
 800a286:	68a3      	ldr	r3, [r4, #8]
 800a288:	42ab      	cmp	r3, r5
 800a28a:	dc12      	bgt.n	800a2b2 <__multadd+0x66>
 800a28c:	6861      	ldr	r1, [r4, #4]
 800a28e:	4630      	mov	r0, r6
 800a290:	3101      	adds	r1, #1
 800a292:	f7ff ff90 	bl	800a1b6 <_Balloc>
 800a296:	6922      	ldr	r2, [r4, #16]
 800a298:	3202      	adds	r2, #2
 800a29a:	f104 010c 	add.w	r1, r4, #12
 800a29e:	4680      	mov	r8, r0
 800a2a0:	0092      	lsls	r2, r2, #2
 800a2a2:	300c      	adds	r0, #12
 800a2a4:	f7ff ff7a 	bl	800a19c <memcpy>
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f7ff ffb7 	bl	800a21e <_Bfree>
 800a2b0:	4644      	mov	r4, r8
 800a2b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2b6:	3501      	adds	r5, #1
 800a2b8:	615f      	str	r7, [r3, #20]
 800a2ba:	6125      	str	r5, [r4, #16]
 800a2bc:	4620      	mov	r0, r4
 800a2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a2c2 <__hi0bits>:
 800a2c2:	0c02      	lsrs	r2, r0, #16
 800a2c4:	0412      	lsls	r2, r2, #16
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	b9b2      	cbnz	r2, 800a2f8 <__hi0bits+0x36>
 800a2ca:	0403      	lsls	r3, r0, #16
 800a2cc:	2010      	movs	r0, #16
 800a2ce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a2d2:	bf04      	itt	eq
 800a2d4:	021b      	lsleq	r3, r3, #8
 800a2d6:	3008      	addeq	r0, #8
 800a2d8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a2dc:	bf04      	itt	eq
 800a2de:	011b      	lsleq	r3, r3, #4
 800a2e0:	3004      	addeq	r0, #4
 800a2e2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a2e6:	bf04      	itt	eq
 800a2e8:	009b      	lsleq	r3, r3, #2
 800a2ea:	3002      	addeq	r0, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	db06      	blt.n	800a2fe <__hi0bits+0x3c>
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	d503      	bpl.n	800a2fc <__hi0bits+0x3a>
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	4770      	bx	lr
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e7e8      	b.n	800a2ce <__hi0bits+0xc>
 800a2fc:	2020      	movs	r0, #32
 800a2fe:	4770      	bx	lr

0800a300 <__lo0bits>:
 800a300:	6803      	ldr	r3, [r0, #0]
 800a302:	f013 0207 	ands.w	r2, r3, #7
 800a306:	4601      	mov	r1, r0
 800a308:	d00b      	beq.n	800a322 <__lo0bits+0x22>
 800a30a:	07da      	lsls	r2, r3, #31
 800a30c:	d423      	bmi.n	800a356 <__lo0bits+0x56>
 800a30e:	0798      	lsls	r0, r3, #30
 800a310:	bf49      	itett	mi
 800a312:	085b      	lsrmi	r3, r3, #1
 800a314:	089b      	lsrpl	r3, r3, #2
 800a316:	2001      	movmi	r0, #1
 800a318:	600b      	strmi	r3, [r1, #0]
 800a31a:	bf5c      	itt	pl
 800a31c:	600b      	strpl	r3, [r1, #0]
 800a31e:	2002      	movpl	r0, #2
 800a320:	4770      	bx	lr
 800a322:	b298      	uxth	r0, r3
 800a324:	b9a8      	cbnz	r0, 800a352 <__lo0bits+0x52>
 800a326:	0c1b      	lsrs	r3, r3, #16
 800a328:	2010      	movs	r0, #16
 800a32a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a32e:	bf04      	itt	eq
 800a330:	0a1b      	lsreq	r3, r3, #8
 800a332:	3008      	addeq	r0, #8
 800a334:	071a      	lsls	r2, r3, #28
 800a336:	bf04      	itt	eq
 800a338:	091b      	lsreq	r3, r3, #4
 800a33a:	3004      	addeq	r0, #4
 800a33c:	079a      	lsls	r2, r3, #30
 800a33e:	bf04      	itt	eq
 800a340:	089b      	lsreq	r3, r3, #2
 800a342:	3002      	addeq	r0, #2
 800a344:	07da      	lsls	r2, r3, #31
 800a346:	d402      	bmi.n	800a34e <__lo0bits+0x4e>
 800a348:	085b      	lsrs	r3, r3, #1
 800a34a:	d006      	beq.n	800a35a <__lo0bits+0x5a>
 800a34c:	3001      	adds	r0, #1
 800a34e:	600b      	str	r3, [r1, #0]
 800a350:	4770      	bx	lr
 800a352:	4610      	mov	r0, r2
 800a354:	e7e9      	b.n	800a32a <__lo0bits+0x2a>
 800a356:	2000      	movs	r0, #0
 800a358:	4770      	bx	lr
 800a35a:	2020      	movs	r0, #32
 800a35c:	4770      	bx	lr

0800a35e <__i2b>:
 800a35e:	b510      	push	{r4, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	2101      	movs	r1, #1
 800a364:	f7ff ff27 	bl	800a1b6 <_Balloc>
 800a368:	2201      	movs	r2, #1
 800a36a:	6144      	str	r4, [r0, #20]
 800a36c:	6102      	str	r2, [r0, #16]
 800a36e:	bd10      	pop	{r4, pc}

0800a370 <__multiply>:
 800a370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	4614      	mov	r4, r2
 800a376:	690a      	ldr	r2, [r1, #16]
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	bfb8      	it	lt
 800a37e:	460b      	movlt	r3, r1
 800a380:	4688      	mov	r8, r1
 800a382:	bfbc      	itt	lt
 800a384:	46a0      	movlt	r8, r4
 800a386:	461c      	movlt	r4, r3
 800a388:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a38c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a390:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a394:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a398:	eb07 0609 	add.w	r6, r7, r9
 800a39c:	42b3      	cmp	r3, r6
 800a39e:	bfb8      	it	lt
 800a3a0:	3101      	addlt	r1, #1
 800a3a2:	f7ff ff08 	bl	800a1b6 <_Balloc>
 800a3a6:	f100 0514 	add.w	r5, r0, #20
 800a3aa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a3ae:	462b      	mov	r3, r5
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4573      	cmp	r3, lr
 800a3b4:	d316      	bcc.n	800a3e4 <__multiply+0x74>
 800a3b6:	f104 0214 	add.w	r2, r4, #20
 800a3ba:	f108 0114 	add.w	r1, r8, #20
 800a3be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a3c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	9b00      	ldr	r3, [sp, #0]
 800a3ca:	9201      	str	r2, [sp, #4]
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d80c      	bhi.n	800a3ea <__multiply+0x7a>
 800a3d0:	2e00      	cmp	r6, #0
 800a3d2:	dd03      	ble.n	800a3dc <__multiply+0x6c>
 800a3d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d05d      	beq.n	800a498 <__multiply+0x128>
 800a3dc:	6106      	str	r6, [r0, #16]
 800a3de:	b003      	add	sp, #12
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	f843 2b04 	str.w	r2, [r3], #4
 800a3e8:	e7e3      	b.n	800a3b2 <__multiply+0x42>
 800a3ea:	f8b2 b000 	ldrh.w	fp, [r2]
 800a3ee:	f1bb 0f00 	cmp.w	fp, #0
 800a3f2:	d023      	beq.n	800a43c <__multiply+0xcc>
 800a3f4:	4689      	mov	r9, r1
 800a3f6:	46ac      	mov	ip, r5
 800a3f8:	f04f 0800 	mov.w	r8, #0
 800a3fc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a400:	f8dc a000 	ldr.w	sl, [ip]
 800a404:	b2a3      	uxth	r3, r4
 800a406:	fa1f fa8a 	uxth.w	sl, sl
 800a40a:	fb0b a303 	mla	r3, fp, r3, sl
 800a40e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a412:	f8dc 4000 	ldr.w	r4, [ip]
 800a416:	4443      	add	r3, r8
 800a418:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a41c:	fb0b 840a 	mla	r4, fp, sl, r8
 800a420:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a424:	46e2      	mov	sl, ip
 800a426:	b29b      	uxth	r3, r3
 800a428:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a42c:	454f      	cmp	r7, r9
 800a42e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a432:	f84a 3b04 	str.w	r3, [sl], #4
 800a436:	d82b      	bhi.n	800a490 <__multiply+0x120>
 800a438:	f8cc 8004 	str.w	r8, [ip, #4]
 800a43c:	9b01      	ldr	r3, [sp, #4]
 800a43e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a442:	3204      	adds	r2, #4
 800a444:	f1ba 0f00 	cmp.w	sl, #0
 800a448:	d020      	beq.n	800a48c <__multiply+0x11c>
 800a44a:	682b      	ldr	r3, [r5, #0]
 800a44c:	4689      	mov	r9, r1
 800a44e:	46a8      	mov	r8, r5
 800a450:	f04f 0b00 	mov.w	fp, #0
 800a454:	f8b9 c000 	ldrh.w	ip, [r9]
 800a458:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a45c:	fb0a 440c 	mla	r4, sl, ip, r4
 800a460:	445c      	add	r4, fp
 800a462:	46c4      	mov	ip, r8
 800a464:	b29b      	uxth	r3, r3
 800a466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a46a:	f84c 3b04 	str.w	r3, [ip], #4
 800a46e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a472:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a476:	0c1b      	lsrs	r3, r3, #16
 800a478:	fb0a b303 	mla	r3, sl, r3, fp
 800a47c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a480:	454f      	cmp	r7, r9
 800a482:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a486:	d805      	bhi.n	800a494 <__multiply+0x124>
 800a488:	f8c8 3004 	str.w	r3, [r8, #4]
 800a48c:	3504      	adds	r5, #4
 800a48e:	e79b      	b.n	800a3c8 <__multiply+0x58>
 800a490:	46d4      	mov	ip, sl
 800a492:	e7b3      	b.n	800a3fc <__multiply+0x8c>
 800a494:	46e0      	mov	r8, ip
 800a496:	e7dd      	b.n	800a454 <__multiply+0xe4>
 800a498:	3e01      	subs	r6, #1
 800a49a:	e799      	b.n	800a3d0 <__multiply+0x60>

0800a49c <__pow5mult>:
 800a49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4a0:	4615      	mov	r5, r2
 800a4a2:	f012 0203 	ands.w	r2, r2, #3
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	d007      	beq.n	800a4bc <__pow5mult+0x20>
 800a4ac:	3a01      	subs	r2, #1
 800a4ae:	4c21      	ldr	r4, [pc, #132]	; (800a534 <__pow5mult+0x98>)
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4b6:	f7ff fec9 	bl	800a24c <__multadd>
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	10ad      	asrs	r5, r5, #2
 800a4be:	d035      	beq.n	800a52c <__pow5mult+0x90>
 800a4c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4c2:	b93c      	cbnz	r4, 800a4d4 <__pow5mult+0x38>
 800a4c4:	2010      	movs	r0, #16
 800a4c6:	f7fe fb59 	bl	8008b7c <malloc>
 800a4ca:	6270      	str	r0, [r6, #36]	; 0x24
 800a4cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4d0:	6004      	str	r4, [r0, #0]
 800a4d2:	60c4      	str	r4, [r0, #12]
 800a4d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4dc:	b94c      	cbnz	r4, 800a4f2 <__pow5mult+0x56>
 800a4de:	f240 2171 	movw	r1, #625	; 0x271
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7ff ff3b 	bl	800a35e <__i2b>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	f04f 0800 	mov.w	r8, #0
 800a4f6:	07eb      	lsls	r3, r5, #31
 800a4f8:	d50a      	bpl.n	800a510 <__pow5mult+0x74>
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff ff36 	bl	800a370 <__multiply>
 800a504:	4639      	mov	r1, r7
 800a506:	4681      	mov	r9, r0
 800a508:	4630      	mov	r0, r6
 800a50a:	f7ff fe88 	bl	800a21e <_Bfree>
 800a50e:	464f      	mov	r7, r9
 800a510:	106d      	asrs	r5, r5, #1
 800a512:	d00b      	beq.n	800a52c <__pow5mult+0x90>
 800a514:	6820      	ldr	r0, [r4, #0]
 800a516:	b938      	cbnz	r0, 800a528 <__pow5mult+0x8c>
 800a518:	4622      	mov	r2, r4
 800a51a:	4621      	mov	r1, r4
 800a51c:	4630      	mov	r0, r6
 800a51e:	f7ff ff27 	bl	800a370 <__multiply>
 800a522:	6020      	str	r0, [r4, #0]
 800a524:	f8c0 8000 	str.w	r8, [r0]
 800a528:	4604      	mov	r4, r0
 800a52a:	e7e4      	b.n	800a4f6 <__pow5mult+0x5a>
 800a52c:	4638      	mov	r0, r7
 800a52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a532:	bf00      	nop
 800a534:	0800dc48 	.word	0x0800dc48

0800a538 <__lshift>:
 800a538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	460c      	mov	r4, r1
 800a53e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a542:	6923      	ldr	r3, [r4, #16]
 800a544:	6849      	ldr	r1, [r1, #4]
 800a546:	eb0a 0903 	add.w	r9, sl, r3
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	4607      	mov	r7, r0
 800a54e:	4616      	mov	r6, r2
 800a550:	f109 0501 	add.w	r5, r9, #1
 800a554:	42ab      	cmp	r3, r5
 800a556:	db32      	blt.n	800a5be <__lshift+0x86>
 800a558:	4638      	mov	r0, r7
 800a55a:	f7ff fe2c 	bl	800a1b6 <_Balloc>
 800a55e:	2300      	movs	r3, #0
 800a560:	4680      	mov	r8, r0
 800a562:	f100 0114 	add.w	r1, r0, #20
 800a566:	461a      	mov	r2, r3
 800a568:	4553      	cmp	r3, sl
 800a56a:	db2b      	blt.n	800a5c4 <__lshift+0x8c>
 800a56c:	6920      	ldr	r0, [r4, #16]
 800a56e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a572:	f104 0314 	add.w	r3, r4, #20
 800a576:	f016 021f 	ands.w	r2, r6, #31
 800a57a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a57e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a582:	d025      	beq.n	800a5d0 <__lshift+0x98>
 800a584:	f1c2 0e20 	rsb	lr, r2, #32
 800a588:	2000      	movs	r0, #0
 800a58a:	681e      	ldr	r6, [r3, #0]
 800a58c:	468a      	mov	sl, r1
 800a58e:	4096      	lsls	r6, r2
 800a590:	4330      	orrs	r0, r6
 800a592:	f84a 0b04 	str.w	r0, [sl], #4
 800a596:	f853 0b04 	ldr.w	r0, [r3], #4
 800a59a:	459c      	cmp	ip, r3
 800a59c:	fa20 f00e 	lsr.w	r0, r0, lr
 800a5a0:	d814      	bhi.n	800a5cc <__lshift+0x94>
 800a5a2:	6048      	str	r0, [r1, #4]
 800a5a4:	b108      	cbz	r0, 800a5aa <__lshift+0x72>
 800a5a6:	f109 0502 	add.w	r5, r9, #2
 800a5aa:	3d01      	subs	r5, #1
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f8c8 5010 	str.w	r5, [r8, #16]
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	f7ff fe33 	bl	800a21e <_Bfree>
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5be:	3101      	adds	r1, #1
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	e7c7      	b.n	800a554 <__lshift+0x1c>
 800a5c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	e7cd      	b.n	800a568 <__lshift+0x30>
 800a5cc:	4651      	mov	r1, sl
 800a5ce:	e7dc      	b.n	800a58a <__lshift+0x52>
 800a5d0:	3904      	subs	r1, #4
 800a5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5da:	459c      	cmp	ip, r3
 800a5dc:	d8f9      	bhi.n	800a5d2 <__lshift+0x9a>
 800a5de:	e7e4      	b.n	800a5aa <__lshift+0x72>

0800a5e0 <__mcmp>:
 800a5e0:	6903      	ldr	r3, [r0, #16]
 800a5e2:	690a      	ldr	r2, [r1, #16]
 800a5e4:	1a9b      	subs	r3, r3, r2
 800a5e6:	b530      	push	{r4, r5, lr}
 800a5e8:	d10c      	bne.n	800a604 <__mcmp+0x24>
 800a5ea:	0092      	lsls	r2, r2, #2
 800a5ec:	3014      	adds	r0, #20
 800a5ee:	3114      	adds	r1, #20
 800a5f0:	1884      	adds	r4, r0, r2
 800a5f2:	4411      	add	r1, r2
 800a5f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5fc:	4295      	cmp	r5, r2
 800a5fe:	d003      	beq.n	800a608 <__mcmp+0x28>
 800a600:	d305      	bcc.n	800a60e <__mcmp+0x2e>
 800a602:	2301      	movs	r3, #1
 800a604:	4618      	mov	r0, r3
 800a606:	bd30      	pop	{r4, r5, pc}
 800a608:	42a0      	cmp	r0, r4
 800a60a:	d3f3      	bcc.n	800a5f4 <__mcmp+0x14>
 800a60c:	e7fa      	b.n	800a604 <__mcmp+0x24>
 800a60e:	f04f 33ff 	mov.w	r3, #4294967295
 800a612:	e7f7      	b.n	800a604 <__mcmp+0x24>

0800a614 <__mdiff>:
 800a614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	460d      	mov	r5, r1
 800a61a:	4607      	mov	r7, r0
 800a61c:	4611      	mov	r1, r2
 800a61e:	4628      	mov	r0, r5
 800a620:	4614      	mov	r4, r2
 800a622:	f7ff ffdd 	bl	800a5e0 <__mcmp>
 800a626:	1e06      	subs	r6, r0, #0
 800a628:	d108      	bne.n	800a63c <__mdiff+0x28>
 800a62a:	4631      	mov	r1, r6
 800a62c:	4638      	mov	r0, r7
 800a62e:	f7ff fdc2 	bl	800a1b6 <_Balloc>
 800a632:	2301      	movs	r3, #1
 800a634:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63c:	bfa4      	itt	ge
 800a63e:	4623      	movge	r3, r4
 800a640:	462c      	movge	r4, r5
 800a642:	4638      	mov	r0, r7
 800a644:	6861      	ldr	r1, [r4, #4]
 800a646:	bfa6      	itte	ge
 800a648:	461d      	movge	r5, r3
 800a64a:	2600      	movge	r6, #0
 800a64c:	2601      	movlt	r6, #1
 800a64e:	f7ff fdb2 	bl	800a1b6 <_Balloc>
 800a652:	692b      	ldr	r3, [r5, #16]
 800a654:	60c6      	str	r6, [r0, #12]
 800a656:	6926      	ldr	r6, [r4, #16]
 800a658:	f105 0914 	add.w	r9, r5, #20
 800a65c:	f104 0214 	add.w	r2, r4, #20
 800a660:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a664:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a668:	f100 0514 	add.w	r5, r0, #20
 800a66c:	f04f 0e00 	mov.w	lr, #0
 800a670:	f852 ab04 	ldr.w	sl, [r2], #4
 800a674:	f859 4b04 	ldr.w	r4, [r9], #4
 800a678:	fa1e f18a 	uxtah	r1, lr, sl
 800a67c:	b2a3      	uxth	r3, r4
 800a67e:	1ac9      	subs	r1, r1, r3
 800a680:	0c23      	lsrs	r3, r4, #16
 800a682:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a686:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a68a:	b289      	uxth	r1, r1
 800a68c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a690:	45c8      	cmp	r8, r9
 800a692:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a696:	4694      	mov	ip, r2
 800a698:	f845 3b04 	str.w	r3, [r5], #4
 800a69c:	d8e8      	bhi.n	800a670 <__mdiff+0x5c>
 800a69e:	45bc      	cmp	ip, r7
 800a6a0:	d304      	bcc.n	800a6ac <__mdiff+0x98>
 800a6a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a6a6:	b183      	cbz	r3, 800a6ca <__mdiff+0xb6>
 800a6a8:	6106      	str	r6, [r0, #16]
 800a6aa:	e7c5      	b.n	800a638 <__mdiff+0x24>
 800a6ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6b0:	fa1e f381 	uxtah	r3, lr, r1
 800a6b4:	141a      	asrs	r2, r3, #16
 800a6b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a6c4:	f845 3b04 	str.w	r3, [r5], #4
 800a6c8:	e7e9      	b.n	800a69e <__mdiff+0x8a>
 800a6ca:	3e01      	subs	r6, #1
 800a6cc:	e7e9      	b.n	800a6a2 <__mdiff+0x8e>

0800a6ce <__d2b>:
 800a6ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6d2:	460e      	mov	r6, r1
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	ec59 8b10 	vmov	r8, r9, d0
 800a6da:	4615      	mov	r5, r2
 800a6dc:	f7ff fd6b 	bl	800a1b6 <_Balloc>
 800a6e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6ea:	bb34      	cbnz	r4, 800a73a <__d2b+0x6c>
 800a6ec:	9301      	str	r3, [sp, #4]
 800a6ee:	f1b8 0300 	subs.w	r3, r8, #0
 800a6f2:	d027      	beq.n	800a744 <__d2b+0x76>
 800a6f4:	a802      	add	r0, sp, #8
 800a6f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a6fa:	f7ff fe01 	bl	800a300 <__lo0bits>
 800a6fe:	9900      	ldr	r1, [sp, #0]
 800a700:	b1f0      	cbz	r0, 800a740 <__d2b+0x72>
 800a702:	9a01      	ldr	r2, [sp, #4]
 800a704:	f1c0 0320 	rsb	r3, r0, #32
 800a708:	fa02 f303 	lsl.w	r3, r2, r3
 800a70c:	430b      	orrs	r3, r1
 800a70e:	40c2      	lsrs	r2, r0
 800a710:	617b      	str	r3, [r7, #20]
 800a712:	9201      	str	r2, [sp, #4]
 800a714:	9b01      	ldr	r3, [sp, #4]
 800a716:	61bb      	str	r3, [r7, #24]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bf14      	ite	ne
 800a71c:	2102      	movne	r1, #2
 800a71e:	2101      	moveq	r1, #1
 800a720:	6139      	str	r1, [r7, #16]
 800a722:	b1c4      	cbz	r4, 800a756 <__d2b+0x88>
 800a724:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a728:	4404      	add	r4, r0
 800a72a:	6034      	str	r4, [r6, #0]
 800a72c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a730:	6028      	str	r0, [r5, #0]
 800a732:	4638      	mov	r0, r7
 800a734:	b003      	add	sp, #12
 800a736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a73a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a73e:	e7d5      	b.n	800a6ec <__d2b+0x1e>
 800a740:	6179      	str	r1, [r7, #20]
 800a742:	e7e7      	b.n	800a714 <__d2b+0x46>
 800a744:	a801      	add	r0, sp, #4
 800a746:	f7ff fddb 	bl	800a300 <__lo0bits>
 800a74a:	9b01      	ldr	r3, [sp, #4]
 800a74c:	617b      	str	r3, [r7, #20]
 800a74e:	2101      	movs	r1, #1
 800a750:	6139      	str	r1, [r7, #16]
 800a752:	3020      	adds	r0, #32
 800a754:	e7e5      	b.n	800a722 <__d2b+0x54>
 800a756:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a75a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a75e:	6030      	str	r0, [r6, #0]
 800a760:	6918      	ldr	r0, [r3, #16]
 800a762:	f7ff fdae 	bl	800a2c2 <__hi0bits>
 800a766:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a76a:	e7e1      	b.n	800a730 <__d2b+0x62>

0800a76c <_calloc_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	fb02 f401 	mul.w	r4, r2, r1
 800a772:	4621      	mov	r1, r4
 800a774:	f7fe fa68 	bl	8008c48 <_malloc_r>
 800a778:	4605      	mov	r5, r0
 800a77a:	b118      	cbz	r0, 800a784 <_calloc_r+0x18>
 800a77c:	4622      	mov	r2, r4
 800a77e:	2100      	movs	r1, #0
 800a780:	f7fe fa0c 	bl	8008b9c <memset>
 800a784:	4628      	mov	r0, r5
 800a786:	bd38      	pop	{r3, r4, r5, pc}

0800a788 <__ssputs_r>:
 800a788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	688e      	ldr	r6, [r1, #8]
 800a78e:	429e      	cmp	r6, r3
 800a790:	4682      	mov	sl, r0
 800a792:	460c      	mov	r4, r1
 800a794:	4690      	mov	r8, r2
 800a796:	4699      	mov	r9, r3
 800a798:	d837      	bhi.n	800a80a <__ssputs_r+0x82>
 800a79a:	898a      	ldrh	r2, [r1, #12]
 800a79c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7a0:	d031      	beq.n	800a806 <__ssputs_r+0x7e>
 800a7a2:	6825      	ldr	r5, [r4, #0]
 800a7a4:	6909      	ldr	r1, [r1, #16]
 800a7a6:	1a6f      	subs	r7, r5, r1
 800a7a8:	6965      	ldr	r5, [r4, #20]
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a7b4:	f109 0301 	add.w	r3, r9, #1
 800a7b8:	443b      	add	r3, r7
 800a7ba:	429d      	cmp	r5, r3
 800a7bc:	bf38      	it	cc
 800a7be:	461d      	movcc	r5, r3
 800a7c0:	0553      	lsls	r3, r2, #21
 800a7c2:	d530      	bpl.n	800a826 <__ssputs_r+0x9e>
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f7fe fa3f 	bl	8008c48 <_malloc_r>
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	b950      	cbnz	r0, 800a7e4 <__ssputs_r+0x5c>
 800a7ce:	230c      	movs	r3, #12
 800a7d0:	f8ca 3000 	str.w	r3, [sl]
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e4:	463a      	mov	r2, r7
 800a7e6:	6921      	ldr	r1, [r4, #16]
 800a7e8:	f7ff fcd8 	bl	800a19c <memcpy>
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	6126      	str	r6, [r4, #16]
 800a7fa:	6165      	str	r5, [r4, #20]
 800a7fc:	443e      	add	r6, r7
 800a7fe:	1bed      	subs	r5, r5, r7
 800a800:	6026      	str	r6, [r4, #0]
 800a802:	60a5      	str	r5, [r4, #8]
 800a804:	464e      	mov	r6, r9
 800a806:	454e      	cmp	r6, r9
 800a808:	d900      	bls.n	800a80c <__ssputs_r+0x84>
 800a80a:	464e      	mov	r6, r9
 800a80c:	4632      	mov	r2, r6
 800a80e:	4641      	mov	r1, r8
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	f000 f91d 	bl	800aa50 <memmove>
 800a816:	68a3      	ldr	r3, [r4, #8]
 800a818:	1b9b      	subs	r3, r3, r6
 800a81a:	60a3      	str	r3, [r4, #8]
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	441e      	add	r6, r3
 800a820:	6026      	str	r6, [r4, #0]
 800a822:	2000      	movs	r0, #0
 800a824:	e7dc      	b.n	800a7e0 <__ssputs_r+0x58>
 800a826:	462a      	mov	r2, r5
 800a828:	f000 f92b 	bl	800aa82 <_realloc_r>
 800a82c:	4606      	mov	r6, r0
 800a82e:	2800      	cmp	r0, #0
 800a830:	d1e2      	bne.n	800a7f8 <__ssputs_r+0x70>
 800a832:	6921      	ldr	r1, [r4, #16]
 800a834:	4650      	mov	r0, sl
 800a836:	f7fe f9b9 	bl	8008bac <_free_r>
 800a83a:	e7c8      	b.n	800a7ce <__ssputs_r+0x46>

0800a83c <_svfiprintf_r>:
 800a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	461d      	mov	r5, r3
 800a842:	898b      	ldrh	r3, [r1, #12]
 800a844:	061f      	lsls	r7, r3, #24
 800a846:	b09d      	sub	sp, #116	; 0x74
 800a848:	4680      	mov	r8, r0
 800a84a:	460c      	mov	r4, r1
 800a84c:	4616      	mov	r6, r2
 800a84e:	d50f      	bpl.n	800a870 <_svfiprintf_r+0x34>
 800a850:	690b      	ldr	r3, [r1, #16]
 800a852:	b96b      	cbnz	r3, 800a870 <_svfiprintf_r+0x34>
 800a854:	2140      	movs	r1, #64	; 0x40
 800a856:	f7fe f9f7 	bl	8008c48 <_malloc_r>
 800a85a:	6020      	str	r0, [r4, #0]
 800a85c:	6120      	str	r0, [r4, #16]
 800a85e:	b928      	cbnz	r0, 800a86c <_svfiprintf_r+0x30>
 800a860:	230c      	movs	r3, #12
 800a862:	f8c8 3000 	str.w	r3, [r8]
 800a866:	f04f 30ff 	mov.w	r0, #4294967295
 800a86a:	e0c8      	b.n	800a9fe <_svfiprintf_r+0x1c2>
 800a86c:	2340      	movs	r3, #64	; 0x40
 800a86e:	6163      	str	r3, [r4, #20]
 800a870:	2300      	movs	r3, #0
 800a872:	9309      	str	r3, [sp, #36]	; 0x24
 800a874:	2320      	movs	r3, #32
 800a876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a87a:	2330      	movs	r3, #48	; 0x30
 800a87c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a880:	9503      	str	r5, [sp, #12]
 800a882:	f04f 0b01 	mov.w	fp, #1
 800a886:	4637      	mov	r7, r6
 800a888:	463d      	mov	r5, r7
 800a88a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a88e:	b10b      	cbz	r3, 800a894 <_svfiprintf_r+0x58>
 800a890:	2b25      	cmp	r3, #37	; 0x25
 800a892:	d13e      	bne.n	800a912 <_svfiprintf_r+0xd6>
 800a894:	ebb7 0a06 	subs.w	sl, r7, r6
 800a898:	d00b      	beq.n	800a8b2 <_svfiprintf_r+0x76>
 800a89a:	4653      	mov	r3, sl
 800a89c:	4632      	mov	r2, r6
 800a89e:	4621      	mov	r1, r4
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	f7ff ff71 	bl	800a788 <__ssputs_r>
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	f000 80a4 	beq.w	800a9f4 <_svfiprintf_r+0x1b8>
 800a8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ae:	4453      	add	r3, sl
 800a8b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b2:	783b      	ldrb	r3, [r7, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 809d 	beq.w	800a9f4 <_svfiprintf_r+0x1b8>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	9307      	str	r3, [sp, #28]
 800a8c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ce:	462f      	mov	r7, r5
 800a8d0:	2205      	movs	r2, #5
 800a8d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a8d6:	4850      	ldr	r0, [pc, #320]	; (800aa18 <_svfiprintf_r+0x1dc>)
 800a8d8:	f7f5 fd6a 	bl	80003b0 <memchr>
 800a8dc:	9b04      	ldr	r3, [sp, #16]
 800a8de:	b9d0      	cbnz	r0, 800a916 <_svfiprintf_r+0xda>
 800a8e0:	06d9      	lsls	r1, r3, #27
 800a8e2:	bf44      	itt	mi
 800a8e4:	2220      	movmi	r2, #32
 800a8e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a8ea:	071a      	lsls	r2, r3, #28
 800a8ec:	bf44      	itt	mi
 800a8ee:	222b      	movmi	r2, #43	; 0x2b
 800a8f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a8f4:	782a      	ldrb	r2, [r5, #0]
 800a8f6:	2a2a      	cmp	r2, #42	; 0x2a
 800a8f8:	d015      	beq.n	800a926 <_svfiprintf_r+0xea>
 800a8fa:	9a07      	ldr	r2, [sp, #28]
 800a8fc:	462f      	mov	r7, r5
 800a8fe:	2000      	movs	r0, #0
 800a900:	250a      	movs	r5, #10
 800a902:	4639      	mov	r1, r7
 800a904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a908:	3b30      	subs	r3, #48	; 0x30
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	d94d      	bls.n	800a9aa <_svfiprintf_r+0x16e>
 800a90e:	b1b8      	cbz	r0, 800a940 <_svfiprintf_r+0x104>
 800a910:	e00f      	b.n	800a932 <_svfiprintf_r+0xf6>
 800a912:	462f      	mov	r7, r5
 800a914:	e7b8      	b.n	800a888 <_svfiprintf_r+0x4c>
 800a916:	4a40      	ldr	r2, [pc, #256]	; (800aa18 <_svfiprintf_r+0x1dc>)
 800a918:	1a80      	subs	r0, r0, r2
 800a91a:	fa0b f000 	lsl.w	r0, fp, r0
 800a91e:	4318      	orrs	r0, r3
 800a920:	9004      	str	r0, [sp, #16]
 800a922:	463d      	mov	r5, r7
 800a924:	e7d3      	b.n	800a8ce <_svfiprintf_r+0x92>
 800a926:	9a03      	ldr	r2, [sp, #12]
 800a928:	1d11      	adds	r1, r2, #4
 800a92a:	6812      	ldr	r2, [r2, #0]
 800a92c:	9103      	str	r1, [sp, #12]
 800a92e:	2a00      	cmp	r2, #0
 800a930:	db01      	blt.n	800a936 <_svfiprintf_r+0xfa>
 800a932:	9207      	str	r2, [sp, #28]
 800a934:	e004      	b.n	800a940 <_svfiprintf_r+0x104>
 800a936:	4252      	negs	r2, r2
 800a938:	f043 0302 	orr.w	r3, r3, #2
 800a93c:	9207      	str	r2, [sp, #28]
 800a93e:	9304      	str	r3, [sp, #16]
 800a940:	783b      	ldrb	r3, [r7, #0]
 800a942:	2b2e      	cmp	r3, #46	; 0x2e
 800a944:	d10c      	bne.n	800a960 <_svfiprintf_r+0x124>
 800a946:	787b      	ldrb	r3, [r7, #1]
 800a948:	2b2a      	cmp	r3, #42	; 0x2a
 800a94a:	d133      	bne.n	800a9b4 <_svfiprintf_r+0x178>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	1d1a      	adds	r2, r3, #4
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	9203      	str	r2, [sp, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	bfb8      	it	lt
 800a958:	f04f 33ff 	movlt.w	r3, #4294967295
 800a95c:	3702      	adds	r7, #2
 800a95e:	9305      	str	r3, [sp, #20]
 800a960:	4d2e      	ldr	r5, [pc, #184]	; (800aa1c <_svfiprintf_r+0x1e0>)
 800a962:	7839      	ldrb	r1, [r7, #0]
 800a964:	2203      	movs	r2, #3
 800a966:	4628      	mov	r0, r5
 800a968:	f7f5 fd22 	bl	80003b0 <memchr>
 800a96c:	b138      	cbz	r0, 800a97e <_svfiprintf_r+0x142>
 800a96e:	2340      	movs	r3, #64	; 0x40
 800a970:	1b40      	subs	r0, r0, r5
 800a972:	fa03 f000 	lsl.w	r0, r3, r0
 800a976:	9b04      	ldr	r3, [sp, #16]
 800a978:	4303      	orrs	r3, r0
 800a97a:	3701      	adds	r7, #1
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	7839      	ldrb	r1, [r7, #0]
 800a980:	4827      	ldr	r0, [pc, #156]	; (800aa20 <_svfiprintf_r+0x1e4>)
 800a982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a986:	2206      	movs	r2, #6
 800a988:	1c7e      	adds	r6, r7, #1
 800a98a:	f7f5 fd11 	bl	80003b0 <memchr>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d038      	beq.n	800aa04 <_svfiprintf_r+0x1c8>
 800a992:	4b24      	ldr	r3, [pc, #144]	; (800aa24 <_svfiprintf_r+0x1e8>)
 800a994:	bb13      	cbnz	r3, 800a9dc <_svfiprintf_r+0x1a0>
 800a996:	9b03      	ldr	r3, [sp, #12]
 800a998:	3307      	adds	r3, #7
 800a99a:	f023 0307 	bic.w	r3, r3, #7
 800a99e:	3308      	adds	r3, #8
 800a9a0:	9303      	str	r3, [sp, #12]
 800a9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a4:	444b      	add	r3, r9
 800a9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a8:	e76d      	b.n	800a886 <_svfiprintf_r+0x4a>
 800a9aa:	fb05 3202 	mla	r2, r5, r2, r3
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	460f      	mov	r7, r1
 800a9b2:	e7a6      	b.n	800a902 <_svfiprintf_r+0xc6>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	3701      	adds	r7, #1
 800a9b8:	9305      	str	r3, [sp, #20]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	250a      	movs	r5, #10
 800a9be:	4638      	mov	r0, r7
 800a9c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9c4:	3a30      	subs	r2, #48	; 0x30
 800a9c6:	2a09      	cmp	r2, #9
 800a9c8:	d903      	bls.n	800a9d2 <_svfiprintf_r+0x196>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d0c8      	beq.n	800a960 <_svfiprintf_r+0x124>
 800a9ce:	9105      	str	r1, [sp, #20]
 800a9d0:	e7c6      	b.n	800a960 <_svfiprintf_r+0x124>
 800a9d2:	fb05 2101 	mla	r1, r5, r1, r2
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	4607      	mov	r7, r0
 800a9da:	e7f0      	b.n	800a9be <_svfiprintf_r+0x182>
 800a9dc:	ab03      	add	r3, sp, #12
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	4b11      	ldr	r3, [pc, #68]	; (800aa28 <_svfiprintf_r+0x1ec>)
 800a9e4:	a904      	add	r1, sp, #16
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	f7fe fa0e 	bl	8008e08 <_printf_float>
 800a9ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a9f0:	4681      	mov	r9, r0
 800a9f2:	d1d6      	bne.n	800a9a2 <_svfiprintf_r+0x166>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	065b      	lsls	r3, r3, #25
 800a9f8:	f53f af35 	bmi.w	800a866 <_svfiprintf_r+0x2a>
 800a9fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9fe:	b01d      	add	sp, #116	; 0x74
 800aa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa04:	ab03      	add	r3, sp, #12
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	4622      	mov	r2, r4
 800aa0a:	4b07      	ldr	r3, [pc, #28]	; (800aa28 <_svfiprintf_r+0x1ec>)
 800aa0c:	a904      	add	r1, sp, #16
 800aa0e:	4640      	mov	r0, r8
 800aa10:	f7fe fc9c 	bl	800934c <_printf_i>
 800aa14:	e7ea      	b.n	800a9ec <_svfiprintf_r+0x1b0>
 800aa16:	bf00      	nop
 800aa18:	0800dc54 	.word	0x0800dc54
 800aa1c:	0800dc5a 	.word	0x0800dc5a
 800aa20:	0800dc5e 	.word	0x0800dc5e
 800aa24:	08008e09 	.word	0x08008e09
 800aa28:	0800a789 	.word	0x0800a789

0800aa2c <__ascii_mbtowc>:
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	b901      	cbnz	r1, 800aa32 <__ascii_mbtowc+0x6>
 800aa30:	a901      	add	r1, sp, #4
 800aa32:	b142      	cbz	r2, 800aa46 <__ascii_mbtowc+0x1a>
 800aa34:	b14b      	cbz	r3, 800aa4a <__ascii_mbtowc+0x1e>
 800aa36:	7813      	ldrb	r3, [r2, #0]
 800aa38:	600b      	str	r3, [r1, #0]
 800aa3a:	7812      	ldrb	r2, [r2, #0]
 800aa3c:	1c10      	adds	r0, r2, #0
 800aa3e:	bf18      	it	ne
 800aa40:	2001      	movne	r0, #1
 800aa42:	b002      	add	sp, #8
 800aa44:	4770      	bx	lr
 800aa46:	4610      	mov	r0, r2
 800aa48:	e7fb      	b.n	800aa42 <__ascii_mbtowc+0x16>
 800aa4a:	f06f 0001 	mvn.w	r0, #1
 800aa4e:	e7f8      	b.n	800aa42 <__ascii_mbtowc+0x16>

0800aa50 <memmove>:
 800aa50:	4288      	cmp	r0, r1
 800aa52:	b510      	push	{r4, lr}
 800aa54:	eb01 0302 	add.w	r3, r1, r2
 800aa58:	d807      	bhi.n	800aa6a <memmove+0x1a>
 800aa5a:	1e42      	subs	r2, r0, #1
 800aa5c:	4299      	cmp	r1, r3
 800aa5e:	d00a      	beq.n	800aa76 <memmove+0x26>
 800aa60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa64:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aa68:	e7f8      	b.n	800aa5c <memmove+0xc>
 800aa6a:	4283      	cmp	r3, r0
 800aa6c:	d9f5      	bls.n	800aa5a <memmove+0xa>
 800aa6e:	1881      	adds	r1, r0, r2
 800aa70:	1ad2      	subs	r2, r2, r3
 800aa72:	42d3      	cmn	r3, r2
 800aa74:	d100      	bne.n	800aa78 <memmove+0x28>
 800aa76:	bd10      	pop	{r4, pc}
 800aa78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aa80:	e7f7      	b.n	800aa72 <memmove+0x22>

0800aa82 <_realloc_r>:
 800aa82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa84:	4607      	mov	r7, r0
 800aa86:	4614      	mov	r4, r2
 800aa88:	460e      	mov	r6, r1
 800aa8a:	b921      	cbnz	r1, 800aa96 <_realloc_r+0x14>
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa92:	f7fe b8d9 	b.w	8008c48 <_malloc_r>
 800aa96:	b922      	cbnz	r2, 800aaa2 <_realloc_r+0x20>
 800aa98:	f7fe f888 	bl	8008bac <_free_r>
 800aa9c:	4625      	mov	r5, r4
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa2:	f000 f821 	bl	800aae8 <_malloc_usable_size_r>
 800aaa6:	42a0      	cmp	r0, r4
 800aaa8:	d20f      	bcs.n	800aaca <_realloc_r+0x48>
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4638      	mov	r0, r7
 800aaae:	f7fe f8cb 	bl	8008c48 <_malloc_r>
 800aab2:	4605      	mov	r5, r0
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d0f2      	beq.n	800aa9e <_realloc_r+0x1c>
 800aab8:	4631      	mov	r1, r6
 800aaba:	4622      	mov	r2, r4
 800aabc:	f7ff fb6e 	bl	800a19c <memcpy>
 800aac0:	4631      	mov	r1, r6
 800aac2:	4638      	mov	r0, r7
 800aac4:	f7fe f872 	bl	8008bac <_free_r>
 800aac8:	e7e9      	b.n	800aa9e <_realloc_r+0x1c>
 800aaca:	4635      	mov	r5, r6
 800aacc:	e7e7      	b.n	800aa9e <_realloc_r+0x1c>

0800aace <__ascii_wctomb>:
 800aace:	b149      	cbz	r1, 800aae4 <__ascii_wctomb+0x16>
 800aad0:	2aff      	cmp	r2, #255	; 0xff
 800aad2:	bf85      	ittet	hi
 800aad4:	238a      	movhi	r3, #138	; 0x8a
 800aad6:	6003      	strhi	r3, [r0, #0]
 800aad8:	700a      	strbls	r2, [r1, #0]
 800aada:	f04f 30ff 	movhi.w	r0, #4294967295
 800aade:	bf98      	it	ls
 800aae0:	2001      	movls	r0, #1
 800aae2:	4770      	bx	lr
 800aae4:	4608      	mov	r0, r1
 800aae6:	4770      	bx	lr

0800aae8 <_malloc_usable_size_r>:
 800aae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaec:	1f18      	subs	r0, r3, #4
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bfbc      	itt	lt
 800aaf2:	580b      	ldrlt	r3, [r1, r0]
 800aaf4:	18c0      	addlt	r0, r0, r3
 800aaf6:	4770      	bx	lr

0800aaf8 <sqrtf>:
 800aaf8:	b500      	push	{lr}
 800aafa:	ed2d 8b02 	vpush	{d8}
 800aafe:	b08b      	sub	sp, #44	; 0x2c
 800ab00:	eeb0 8a40 	vmov.f32	s16, s0
 800ab04:	f000 f848 	bl	800ab98 <__ieee754_sqrtf>
 800ab08:	4b21      	ldr	r3, [pc, #132]	; (800ab90 <sqrtf+0x98>)
 800ab0a:	f993 3000 	ldrsb.w	r3, [r3]
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	d028      	beq.n	800ab64 <sqrtf+0x6c>
 800ab12:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1a:	d623      	bvs.n	800ab64 <sqrtf+0x6c>
 800ab1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ab20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab24:	d51e      	bpl.n	800ab64 <sqrtf+0x6c>
 800ab26:	2201      	movs	r2, #1
 800ab28:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800ab2c:	9200      	str	r2, [sp, #0]
 800ab2e:	4a19      	ldr	r2, [pc, #100]	; (800ab94 <sqrtf+0x9c>)
 800ab30:	9201      	str	r2, [sp, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	9208      	str	r2, [sp, #32]
 800ab36:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ab3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab3e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800ab88 <sqrtf+0x90>
 800ab42:	b9a3      	cbnz	r3, 800ab6e <sqrtf+0x76>
 800ab44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab48:	4668      	mov	r0, sp
 800ab4a:	f000 f828 	bl	800ab9e <matherr>
 800ab4e:	b1a0      	cbz	r0, 800ab7a <sqrtf+0x82>
 800ab50:	9b08      	ldr	r3, [sp, #32]
 800ab52:	b11b      	cbz	r3, 800ab5c <sqrtf+0x64>
 800ab54:	f7fd ffe8 	bl	8008b28 <__errno>
 800ab58:	9b08      	ldr	r3, [sp, #32]
 800ab5a:	6003      	str	r3, [r0, #0]
 800ab5c:	ed9d 0b06 	vldr	d0, [sp, #24]
 800ab60:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ab64:	b00b      	add	sp, #44	; 0x2c
 800ab66:	ecbd 8b02 	vpop	{d8}
 800ab6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800ab74:	ed8d 6b06 	vstr	d6, [sp, #24]
 800ab78:	d1e6      	bne.n	800ab48 <sqrtf+0x50>
 800ab7a:	f7fd ffd5 	bl	8008b28 <__errno>
 800ab7e:	2321      	movs	r3, #33	; 0x21
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	e7e5      	b.n	800ab50 <sqrtf+0x58>
 800ab84:	f3af 8000 	nop.w
	...
 800ab90:	200001e4 	.word	0x200001e4
 800ab94:	0800dd70 	.word	0x0800dd70

0800ab98 <__ieee754_sqrtf>:
 800ab98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ab9c:	4770      	bx	lr

0800ab9e <matherr>:
 800ab9e:	2000      	movs	r0, #0
 800aba0:	4770      	bx	lr
	...

0800aba4 <_init>:
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba6:	bf00      	nop
 800aba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abaa:	bc08      	pop	{r3}
 800abac:	469e      	mov	lr, r3
 800abae:	4770      	bx	lr

0800abb0 <_fini>:
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	bf00      	nop
 800abb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb6:	bc08      	pop	{r3}
 800abb8:	469e      	mov	lr, r3
 800abba:	4770      	bx	lr
