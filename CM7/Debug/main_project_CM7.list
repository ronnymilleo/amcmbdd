
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bec4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005e3c  0800c15c  0800c15c  0001c15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011f98  08011f98  00021f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011fa0  08011fa0  00021fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011fa4  08011fa4  00021fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08011fa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000141d8  24000078  08012020  00030078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24014250  08012020  00034250  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029780  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000041d7  00000000  00000000  00059826  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001548  00000000  00000000  0005da00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001390  00000000  00000000  0005ef48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b341  00000000  00000000  000602d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00015503  00000000  00000000  0009b619  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00185983  00000000  00000000  000b0b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  0023649f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000578c  00000000  00000000  00236588  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00003cb1  00000000  00000000  0023bd14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c144 	.word	0x0800c144

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	0800c144 	.word	0x0800c144

080002d8 <arm_bitreversal_32>:
 80002d8:	1c4b      	adds	r3, r1, #1
 80002da:	2b01      	cmp	r3, #1
 80002dc:	bf98      	it	ls
 80002de:	4770      	bxls	lr
 80002e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002e4:	1c91      	adds	r1, r2, #2
 80002e6:	089b      	lsrs	r3, r3, #2

080002e8 <arm_bitreversal_32_0>:
 80002e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f0:	880a      	ldrh	r2, [r1, #0]
 80002f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002f6:	4480      	add	r8, r0
 80002f8:	4481      	add	r9, r0
 80002fa:	4402      	add	r2, r0
 80002fc:	4484      	add	ip, r0
 80002fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000302:	f8d8 6000 	ldr.w	r6, [r8]
 8000306:	6815      	ldr	r5, [r2, #0]
 8000308:	f8dc 4000 	ldr.w	r4, [ip]
 800030c:	f8c9 6000 	str.w	r6, [r9]
 8000310:	f8c8 7000 	str.w	r7, [r8]
 8000314:	f8cc 5000 	str.w	r5, [ip]
 8000318:	6014      	str	r4, [r2, #0]
 800031a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800031e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000322:	6855      	ldr	r5, [r2, #4]
 8000324:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000328:	f8c9 6004 	str.w	r6, [r9, #4]
 800032c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000330:	f8cc 5004 	str.w	r5, [ip, #4]
 8000334:	6054      	str	r4, [r2, #4]
 8000336:	3108      	adds	r1, #8
 8000338:	3b01      	subs	r3, #1
 800033a:	d1d5      	bne.n	80002e8 <arm_bitreversal_32_0>
 800033c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000340:	4770      	bx	lr

08000342 <arm_bitreversal_16>:
 8000342:	1c4b      	adds	r3, r1, #1
 8000344:	2b01      	cmp	r3, #1
 8000346:	bf98      	it	ls
 8000348:	4770      	bxls	lr
 800034a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800034e:	1c91      	adds	r1, r2, #2
 8000350:	089b      	lsrs	r3, r3, #2

08000352 <arm_bitreversal_16_0>:
 8000352:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000356:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800035a:	880a      	ldrh	r2, [r1, #0]
 800035c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000360:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000364:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000368:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800036c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000370:	f8d9 7000 	ldr.w	r7, [r9]
 8000374:	f8d8 6000 	ldr.w	r6, [r8]
 8000378:	6815      	ldr	r5, [r2, #0]
 800037a:	f8dc 4000 	ldr.w	r4, [ip]
 800037e:	f8c9 6000 	str.w	r6, [r9]
 8000382:	f8c8 7000 	str.w	r7, [r8]
 8000386:	f8cc 5000 	str.w	r5, [ip]
 800038a:	6014      	str	r4, [r2, #0]
 800038c:	3108      	adds	r1, #8
 800038e:	3b01      	subs	r3, #1
 8000390:	d1df      	bne.n	8000352 <arm_bitreversal_16_0>
 8000392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000396:	4770      	bx	lr

08000398 <__aeabi_uldivmod>:
 8000398:	b953      	cbnz	r3, 80003b0 <__aeabi_uldivmod+0x18>
 800039a:	b94a      	cbnz	r2, 80003b0 <__aeabi_uldivmod+0x18>
 800039c:	2900      	cmp	r1, #0
 800039e:	bf08      	it	eq
 80003a0:	2800      	cmpeq	r0, #0
 80003a2:	bf1c      	itt	ne
 80003a4:	f04f 31ff 	movne.w	r1, #4294967295
 80003a8:	f04f 30ff 	movne.w	r0, #4294967295
 80003ac:	f000 b972 	b.w	8000694 <__aeabi_idiv0>
 80003b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80003b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b8:	f000 f806 	bl	80003c8 <__udivmoddi4>
 80003bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003c4:	b004      	add	sp, #16
 80003c6:	4770      	bx	lr

080003c8 <__udivmoddi4>:
 80003c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003cc:	9e08      	ldr	r6, [sp, #32]
 80003ce:	4604      	mov	r4, r0
 80003d0:	4688      	mov	r8, r1
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d14b      	bne.n	800046e <__udivmoddi4+0xa6>
 80003d6:	428a      	cmp	r2, r1
 80003d8:	4615      	mov	r5, r2
 80003da:	d967      	bls.n	80004ac <__udivmoddi4+0xe4>
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	b14a      	cbz	r2, 80003f6 <__udivmoddi4+0x2e>
 80003e2:	f1c2 0720 	rsb	r7, r2, #32
 80003e6:	fa01 f302 	lsl.w	r3, r1, r2
 80003ea:	fa20 f707 	lsr.w	r7, r0, r7
 80003ee:	4095      	lsls	r5, r2
 80003f0:	ea47 0803 	orr.w	r8, r7, r3
 80003f4:	4094      	lsls	r4, r2
 80003f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003fa:	0c23      	lsrs	r3, r4, #16
 80003fc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000400:	fa1f fc85 	uxth.w	ip, r5
 8000404:	fb0e 8817 	mls	r8, lr, r7, r8
 8000408:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040c:	fb07 f10c 	mul.w	r1, r7, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d909      	bls.n	8000428 <__udivmoddi4+0x60>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f107 30ff 	add.w	r0, r7, #4294967295
 800041a:	f080 811b 	bcs.w	8000654 <__udivmoddi4+0x28c>
 800041e:	4299      	cmp	r1, r3
 8000420:	f240 8118 	bls.w	8000654 <__udivmoddi4+0x28c>
 8000424:	3f02      	subs	r7, #2
 8000426:	442b      	add	r3, r5
 8000428:	1a5b      	subs	r3, r3, r1
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000430:	fb0e 3310 	mls	r3, lr, r0, r3
 8000434:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000438:	fb00 fc0c 	mul.w	ip, r0, ip
 800043c:	45a4      	cmp	ip, r4
 800043e:	d909      	bls.n	8000454 <__udivmoddi4+0x8c>
 8000440:	192c      	adds	r4, r5, r4
 8000442:	f100 33ff 	add.w	r3, r0, #4294967295
 8000446:	f080 8107 	bcs.w	8000658 <__udivmoddi4+0x290>
 800044a:	45a4      	cmp	ip, r4
 800044c:	f240 8104 	bls.w	8000658 <__udivmoddi4+0x290>
 8000450:	3802      	subs	r0, #2
 8000452:	442c      	add	r4, r5
 8000454:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	2700      	movs	r7, #0
 800045e:	b11e      	cbz	r6, 8000468 <__udivmoddi4+0xa0>
 8000460:	40d4      	lsrs	r4, r2
 8000462:	2300      	movs	r3, #0
 8000464:	e9c6 4300 	strd	r4, r3, [r6]
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	428b      	cmp	r3, r1
 8000470:	d909      	bls.n	8000486 <__udivmoddi4+0xbe>
 8000472:	2e00      	cmp	r6, #0
 8000474:	f000 80eb 	beq.w	800064e <__udivmoddi4+0x286>
 8000478:	2700      	movs	r7, #0
 800047a:	e9c6 0100 	strd	r0, r1, [r6]
 800047e:	4638      	mov	r0, r7
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	fab3 f783 	clz	r7, r3
 800048a:	2f00      	cmp	r7, #0
 800048c:	d147      	bne.n	800051e <__udivmoddi4+0x156>
 800048e:	428b      	cmp	r3, r1
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xd0>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 80fa 	bhi.w	800068c <__udivmoddi4+0x2c4>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb61 0303 	sbc.w	r3, r1, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4698      	mov	r8, r3
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d0e0      	beq.n	8000468 <__udivmoddi4+0xa0>
 80004a6:	e9c6 4800 	strd	r4, r8, [r6]
 80004aa:	e7dd      	b.n	8000468 <__udivmoddi4+0xa0>
 80004ac:	b902      	cbnz	r2, 80004b0 <__udivmoddi4+0xe8>
 80004ae:	deff      	udf	#255	; 0xff
 80004b0:	fab2 f282 	clz	r2, r2
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	f040 808f 	bne.w	80005d8 <__udivmoddi4+0x210>
 80004ba:	1b49      	subs	r1, r1, r5
 80004bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c0:	fa1f f885 	uxth.w	r8, r5
 80004c4:	2701      	movs	r7, #1
 80004c6:	fbb1 fcfe 	udiv	ip, r1, lr
 80004ca:	0c23      	lsrs	r3, r4, #16
 80004cc:	fb0e 111c 	mls	r1, lr, ip, r1
 80004d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d4:	fb08 f10c 	mul.w	r1, r8, ip
 80004d8:	4299      	cmp	r1, r3
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x124>
 80004dc:	18eb      	adds	r3, r5, r3
 80004de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x122>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	f200 80cd 	bhi.w	8000684 <__udivmoddi4+0x2bc>
 80004ea:	4684      	mov	ip, r0
 80004ec:	1a59      	subs	r1, r3, r1
 80004ee:	b2a3      	uxth	r3, r4
 80004f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80004f4:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004fc:	fb08 f800 	mul.w	r8, r8, r0
 8000500:	45a0      	cmp	r8, r4
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x14c>
 8000504:	192c      	adds	r4, r5, r4
 8000506:	f100 33ff 	add.w	r3, r0, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x14a>
 800050c:	45a0      	cmp	r8, r4
 800050e:	f200 80b6 	bhi.w	800067e <__udivmoddi4+0x2b6>
 8000512:	4618      	mov	r0, r3
 8000514:	eba4 0408 	sub.w	r4, r4, r8
 8000518:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800051c:	e79f      	b.n	800045e <__udivmoddi4+0x96>
 800051e:	f1c7 0c20 	rsb	ip, r7, #32
 8000522:	40bb      	lsls	r3, r7
 8000524:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000528:	ea4e 0e03 	orr.w	lr, lr, r3
 800052c:	fa01 f407 	lsl.w	r4, r1, r7
 8000530:	fa20 f50c 	lsr.w	r5, r0, ip
 8000534:	fa21 f30c 	lsr.w	r3, r1, ip
 8000538:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800053c:	4325      	orrs	r5, r4
 800053e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000542:	0c2c      	lsrs	r4, r5, #16
 8000544:	fb08 3319 	mls	r3, r8, r9, r3
 8000548:	fa1f fa8e 	uxth.w	sl, lr
 800054c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000550:	fb09 f40a 	mul.w	r4, r9, sl
 8000554:	429c      	cmp	r4, r3
 8000556:	fa02 f207 	lsl.w	r2, r2, r7
 800055a:	fa00 f107 	lsl.w	r1, r0, r7
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b0>
 8000560:	eb1e 0303 	adds.w	r3, lr, r3
 8000564:	f109 30ff 	add.w	r0, r9, #4294967295
 8000568:	f080 8087 	bcs.w	800067a <__udivmoddi4+0x2b2>
 800056c:	429c      	cmp	r4, r3
 800056e:	f240 8084 	bls.w	800067a <__udivmoddi4+0x2b2>
 8000572:	f1a9 0902 	sub.w	r9, r9, #2
 8000576:	4473      	add	r3, lr
 8000578:	1b1b      	subs	r3, r3, r4
 800057a:	b2ad      	uxth	r5, r5
 800057c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000580:	fb08 3310 	mls	r3, r8, r0, r3
 8000584:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000588:	fb00 fa0a 	mul.w	sl, r0, sl
 800058c:	45a2      	cmp	sl, r4
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1da>
 8000590:	eb1e 0404 	adds.w	r4, lr, r4
 8000594:	f100 33ff 	add.w	r3, r0, #4294967295
 8000598:	d26b      	bcs.n	8000672 <__udivmoddi4+0x2aa>
 800059a:	45a2      	cmp	sl, r4
 800059c:	d969      	bls.n	8000672 <__udivmoddi4+0x2aa>
 800059e:	3802      	subs	r0, #2
 80005a0:	4474      	add	r4, lr
 80005a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005a6:	fba0 8902 	umull	r8, r9, r0, r2
 80005aa:	eba4 040a 	sub.w	r4, r4, sl
 80005ae:	454c      	cmp	r4, r9
 80005b0:	46c2      	mov	sl, r8
 80005b2:	464b      	mov	r3, r9
 80005b4:	d354      	bcc.n	8000660 <__udivmoddi4+0x298>
 80005b6:	d051      	beq.n	800065c <__udivmoddi4+0x294>
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d069      	beq.n	8000690 <__udivmoddi4+0x2c8>
 80005bc:	ebb1 050a 	subs.w	r5, r1, sl
 80005c0:	eb64 0403 	sbc.w	r4, r4, r3
 80005c4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c8:	40fd      	lsrs	r5, r7
 80005ca:	40fc      	lsrs	r4, r7
 80005cc:	ea4c 0505 	orr.w	r5, ip, r5
 80005d0:	e9c6 5400 	strd	r5, r4, [r6]
 80005d4:	2700      	movs	r7, #0
 80005d6:	e747      	b.n	8000468 <__udivmoddi4+0xa0>
 80005d8:	f1c2 0320 	rsb	r3, r2, #32
 80005dc:	fa20 f703 	lsr.w	r7, r0, r3
 80005e0:	4095      	lsls	r5, r2
 80005e2:	fa01 f002 	lsl.w	r0, r1, r2
 80005e6:	fa21 f303 	lsr.w	r3, r1, r3
 80005ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005ee:	4338      	orrs	r0, r7
 80005f0:	0c01      	lsrs	r1, r0, #16
 80005f2:	fbb3 f7fe 	udiv	r7, r3, lr
 80005f6:	fa1f f885 	uxth.w	r8, r5
 80005fa:	fb0e 3317 	mls	r3, lr, r7, r3
 80005fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000602:	fb07 f308 	mul.w	r3, r7, r8
 8000606:	428b      	cmp	r3, r1
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d907      	bls.n	800061e <__udivmoddi4+0x256>
 800060e:	1869      	adds	r1, r5, r1
 8000610:	f107 3cff 	add.w	ip, r7, #4294967295
 8000614:	d22f      	bcs.n	8000676 <__udivmoddi4+0x2ae>
 8000616:	428b      	cmp	r3, r1
 8000618:	d92d      	bls.n	8000676 <__udivmoddi4+0x2ae>
 800061a:	3f02      	subs	r7, #2
 800061c:	4429      	add	r1, r5
 800061e:	1acb      	subs	r3, r1, r3
 8000620:	b281      	uxth	r1, r0
 8000622:	fbb3 f0fe 	udiv	r0, r3, lr
 8000626:	fb0e 3310 	mls	r3, lr, r0, r3
 800062a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062e:	fb00 f308 	mul.w	r3, r0, r8
 8000632:	428b      	cmp	r3, r1
 8000634:	d907      	bls.n	8000646 <__udivmoddi4+0x27e>
 8000636:	1869      	adds	r1, r5, r1
 8000638:	f100 3cff 	add.w	ip, r0, #4294967295
 800063c:	d217      	bcs.n	800066e <__udivmoddi4+0x2a6>
 800063e:	428b      	cmp	r3, r1
 8000640:	d915      	bls.n	800066e <__udivmoddi4+0x2a6>
 8000642:	3802      	subs	r0, #2
 8000644:	4429      	add	r1, r5
 8000646:	1ac9      	subs	r1, r1, r3
 8000648:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800064c:	e73b      	b.n	80004c6 <__udivmoddi4+0xfe>
 800064e:	4637      	mov	r7, r6
 8000650:	4630      	mov	r0, r6
 8000652:	e709      	b.n	8000468 <__udivmoddi4+0xa0>
 8000654:	4607      	mov	r7, r0
 8000656:	e6e7      	b.n	8000428 <__udivmoddi4+0x60>
 8000658:	4618      	mov	r0, r3
 800065a:	e6fb      	b.n	8000454 <__udivmoddi4+0x8c>
 800065c:	4541      	cmp	r1, r8
 800065e:	d2ab      	bcs.n	80005b8 <__udivmoddi4+0x1f0>
 8000660:	ebb8 0a02 	subs.w	sl, r8, r2
 8000664:	eb69 020e 	sbc.w	r2, r9, lr
 8000668:	3801      	subs	r0, #1
 800066a:	4613      	mov	r3, r2
 800066c:	e7a4      	b.n	80005b8 <__udivmoddi4+0x1f0>
 800066e:	4660      	mov	r0, ip
 8000670:	e7e9      	b.n	8000646 <__udivmoddi4+0x27e>
 8000672:	4618      	mov	r0, r3
 8000674:	e795      	b.n	80005a2 <__udivmoddi4+0x1da>
 8000676:	4667      	mov	r7, ip
 8000678:	e7d1      	b.n	800061e <__udivmoddi4+0x256>
 800067a:	4681      	mov	r9, r0
 800067c:	e77c      	b.n	8000578 <__udivmoddi4+0x1b0>
 800067e:	3802      	subs	r0, #2
 8000680:	442c      	add	r4, r5
 8000682:	e747      	b.n	8000514 <__udivmoddi4+0x14c>
 8000684:	f1ac 0c02 	sub.w	ip, ip, #2
 8000688:	442b      	add	r3, r5
 800068a:	e72f      	b.n	80004ec <__udivmoddi4+0x124>
 800068c:	4638      	mov	r0, r7
 800068e:	e708      	b.n	80004a2 <__udivmoddi4+0xda>
 8000690:	4637      	mov	r7, r6
 8000692:	e6e9      	b.n	8000468 <__udivmoddi4+0xa0>

08000694 <__aeabi_idiv0>:
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800069c:	4b2f      	ldr	r3, [pc, #188]	; (800075c <SystemInit+0xc4>)
 800069e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a2:	4a2e      	ldr	r2, [pc, #184]	; (800075c <SystemInit+0xc4>)
 80006a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <SystemInit+0xc4>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	4a2a      	ldr	r2, [pc, #168]	; (800075c <SystemInit+0xc4>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemInit+0xc8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a28      	ldr	r2, [pc, #160]	; (8000760 <SystemInit+0xc8>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <SystemInit+0xc8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemInit+0xc8>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4924      	ldr	r1, [pc, #144]	; (8000760 <SystemInit+0xc8>)
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <SystemInit+0xcc>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <SystemInit+0xc8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <SystemInit+0xc8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <SystemInit+0xc8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <SystemInit+0xc8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <SystemInit+0xc8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <SystemInit+0xc8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <SystemInit+0xc8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <SystemInit+0xc8>)
 8000702:	2200      	movs	r2, #0
 8000704:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <SystemInit+0xc8>)
 8000708:	2200      	movs	r2, #0
 800070a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <SystemInit+0xc8>)
 800070e:	2200      	movs	r2, #0
 8000710:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <SystemInit+0xc8>)
 8000714:	2200      	movs	r2, #0
 8000716:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <SystemInit+0xc8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a10      	ldr	r2, [pc, #64]	; (8000760 <SystemInit+0xc8>)
 800071e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000722:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <SystemInit+0xc8>)
 8000726:	2200      	movs	r2, #0
 8000728:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <SystemInit+0xd0>)
 800072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <SystemInit+0xd0>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <SystemInit+0xd4>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <SystemInit+0xd8>)
 800073c:	4013      	ands	r3, r2
 800073e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000742:	d202      	bcs.n	800074a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <SystemInit+0xdc>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <SystemInit+0xc4>)
 800074c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000750:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00
 8000760:	58024400 	.word	0x58024400
 8000764:	eaf6ed7f 	.word	0xeaf6ed7f
 8000768:	580000c0 	.word	0x580000c0
 800076c:	5c001000 	.word	0x5c001000
 8000770:	ffff0000 	.word	0xffff0000
 8000774:	51008108 	.word	0x51008108

08000778 <inst_absolute>:
#include "functions.h"

//**********************************************************************************************//
// Preprocessing - Instantaneous values (6 features)
// To use with instantaneous values
void inst_absolute(float32_t in[], float32_t out[]){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	arm_abs_f32(&in[0], &out[0], frameSize);
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <inst_absolute+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	6839      	ldr	r1, [r7, #0]
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f00a fe62 	bl	800b454 <arm_abs_f32>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	0800c17c 	.word	0x0800c17c

0800079c <complex_inst_absolute>:

// To use with complex input values
void complex_inst_absolute(float32_t in[], float32_t out[]){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	arm_cmplx_mag_f32(&in[0], &out[0], frameSize);
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <complex_inst_absolute+0x20>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	6839      	ldr	r1, [r7, #0]
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f00a fc8c 	bl	800b0cc <arm_cmplx_mag_f32>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	0800c17c 	.word	0x0800c17c

080007c0 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	int j = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	e020      	b.n	8000816 <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	3301      	adds	r3, #1
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	edd3 7a00 	vldr	s15, [r3]
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	ed93 7a00 	vldr	s14, [r3]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	18d4      	adds	r4, r2, r3
 80007f6:	eef0 0a47 	vmov.f32	s1, s14
 80007fa:	eeb0 0a67 	vmov.f32	s0, s15
 80007fe:	f00b fac5 	bl	800bd8c <atan2f>
 8000802:	eef0 7a40 	vmov.f32	s15, s0
 8000806:	edc4 7a00 	vstr	s15, [r4]
		j++;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3302      	adds	r3, #2
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <inst_phase+0x6c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	005a      	lsls	r2, r3, #1
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	429a      	cmp	r2, r3
 8000820:	d8d8      	bhi.n	80007d4 <inst_phase+0x14>
	}
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bd90      	pop	{r4, r7, pc}
 800082a:	bf00      	nop
 800082c:	0800c17c 	.word	0x0800c17c

08000830 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	466b      	mov	r3, sp
 800083c:	461d      	mov	r5, r3
	int32_t k = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t alpha = M_PI;
 8000842:	4b8b      	ldr	r3, [pc, #556]	; (8000a70 <unwrap+0x240>)
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
	// float32_t diff = 0.0f;
	float32_t in_cp[frameSize];
 8000846:	4b8b      	ldr	r3, [pc, #556]	; (8000a74 <unwrap+0x244>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3b01      	subs	r3, #1
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800084e:	4b89      	ldr	r3, [pc, #548]	; (8000a74 <unwrap+0x244>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 0200 	mov.w	r2, #0
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	f04f 0400 	mov.w	r4, #0
 8000860:	0154      	lsls	r4, r2, #5
 8000862:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000866:	014b      	lsls	r3, r1, #5
 8000868:	4b82      	ldr	r3, [pc, #520]	; (8000a74 <unwrap+0x244>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 0200 	mov.w	r2, #0
 8000872:	f04f 0300 	mov.w	r3, #0
 8000876:	f04f 0400 	mov.w	r4, #0
 800087a:	0154      	lsls	r4, r2, #5
 800087c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000880:	014b      	lsls	r3, r1, #5
 8000882:	4b7c      	ldr	r3, [pc, #496]	; (8000a74 <unwrap+0x244>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	3303      	adds	r3, #3
 800088a:	3307      	adds	r3, #7
 800088c:	08db      	lsrs	r3, r3, #3
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	ebad 0d03 	sub.w	sp, sp, r3
 8000894:	466b      	mov	r3, sp
 8000896:	3303      	adds	r3, #3
 8000898:	089b      	lsrs	r3, r3, #2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
	float32_t sub[frameSize];
 800089e:	4b75      	ldr	r3, [pc, #468]	; (8000a74 <unwrap+0x244>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4b73      	ldr	r3, [pc, #460]	; (8000a74 <unwrap+0x244>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 0200 	mov.w	r2, #0
 80008b0:	f04f 0300 	mov.w	r3, #0
 80008b4:	f04f 0400 	mov.w	r4, #0
 80008b8:	0154      	lsls	r4, r2, #5
 80008ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80008be:	014b      	lsls	r3, r1, #5
 80008c0:	4b6c      	ldr	r3, [pc, #432]	; (8000a74 <unwrap+0x244>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	f04f 0300 	mov.w	r3, #0
 80008ce:	f04f 0400 	mov.w	r4, #0
 80008d2:	0154      	lsls	r4, r2, #5
 80008d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80008d8:	014b      	lsls	r3, r1, #5
 80008da:	4b66      	ldr	r3, [pc, #408]	; (8000a74 <unwrap+0x244>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	3303      	adds	r3, #3
 80008e2:	3307      	adds	r3, #7
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	ebad 0d03 	sub.w	sp, sp, r3
 80008ec:	466b      	mov	r3, sp
 80008ee:	3303      	adds	r3, #3
 80008f0:	089b      	lsrs	r3, r3, #2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	617b      	str	r3, [r7, #20]
	float32_t abs_sub[frameSize];
 80008f6:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <unwrap+0x244>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b5d      	ldr	r3, [pc, #372]	; (8000a74 <unwrap+0x244>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 0200 	mov.w	r2, #0
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	f04f 0400 	mov.w	r4, #0
 8000910:	0154      	lsls	r4, r2, #5
 8000912:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000916:	014b      	lsls	r3, r1, #5
 8000918:	4b56      	ldr	r3, [pc, #344]	; (8000a74 <unwrap+0x244>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f04f 0200 	mov.w	r2, #0
 8000922:	f04f 0300 	mov.w	r3, #0
 8000926:	f04f 0400 	mov.w	r4, #0
 800092a:	0154      	lsls	r4, r2, #5
 800092c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000930:	014b      	lsls	r3, r1, #5
 8000932:	4b50      	ldr	r3, [pc, #320]	; (8000a74 <unwrap+0x244>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	3303      	adds	r3, #3
 800093a:	3307      	adds	r3, #7
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	ebad 0d03 	sub.w	sp, sp, r3
 8000944:	466b      	mov	r3, sp
 8000946:	3303      	adds	r3, #3
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize);
 800094e:	69f9      	ldr	r1, [r7, #28]
 8000950:	4b48      	ldr	r3, [pc, #288]	; (8000a74 <unwrap+0x244>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f009 fdce 	bl	800a4f8 <arm_copy_f32>
	arm_sub_f32(&in[1], &in_cp[0], &sub[0], (frameSize - 1));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1d18      	adds	r0, r3, #4
 8000960:	69f9      	ldr	r1, [r7, #28]
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	4b43      	ldr	r3, [pc, #268]	; (8000a74 <unwrap+0x244>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3b01      	subs	r3, #1
 800096a:	f00a fce7 	bl	800b33c <arm_sub_f32>
	arm_abs_f32(&sub[0], &abs_sub[0], (frameSize - 1));
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	68f9      	ldr	r1, [r7, #12]
 8000972:	4b40      	ldr	r3, [pc, #256]	; (8000a74 <unwrap+0x244>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3b01      	subs	r3, #1
 8000978:	461a      	mov	r2, r3
 800097a:	f00a fd6b 	bl	800b454 <arm_abs_f32>
	for(int i = 0; i < (frameSize - 1); i++){
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
 8000982:	e043      	b.n	8000a0c <unwrap+0x1dc>
		out[i] = in[i] + 2*M_PI*k;
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	edd3 7a00 	vldr	s15, [r3]
 8000990:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800099e:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000a68 <unwrap+0x238>
 80009a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80009a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	4413      	add	r3, r2
 80009b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009b6:	edc3 7a00 	vstr	s15, [r3]
		// diff = fabsf(in[i+1] - in[i]);
		// if(diff > alpha){
		if(abs_sub[i] > alpha){
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4413      	add	r3, r2
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80009ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	d518      	bpl.n	8000a06 <unwrap+0x1d6>
			if(in[i+1] < in_cp[i]){
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	3301      	adds	r3, #1
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	ed93 7a00 	vldr	s14, [r3]
 80009e2:	69fa      	ldr	r2, [r7, #28]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	edd3 7a00 	vldr	s15, [r3]
 80009ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f6:	d503      	bpl.n	8000a00 <unwrap+0x1d0>
				k++;
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	3301      	adds	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
 80009fe:	e002      	b.n	8000a06 <unwrap+0x1d6>
			} else {
				k--;
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	3b01      	subs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (frameSize - 1); i++){
 8000a06:	6a3b      	ldr	r3, [r7, #32]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <unwrap+0x244>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	1e5a      	subs	r2, r3, #1
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8b5      	bhi.n	8000984 <unwrap+0x154>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <unwrap+0x244>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	edd3 7a00 	vldr	s15, [r3]
 8000a2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a3a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000a68 <unwrap+0x238>
 8000a3e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <unwrap+0x244>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000a4e:	4413      	add	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	4413      	add	r3, r2
 8000a56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a5a:	edc3 7a00 	vstr	s15, [r3]
 8000a5e:	46ad      	mov	sp, r5
}
 8000a60:	bf00      	nop
 8000a62:	3730      	adds	r7, #48	; 0x30
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bdb0      	pop	{r4, r5, r7, pc}
 8000a68:	54442d18 	.word	0x54442d18
 8000a6c:	401921fb 	.word	0x401921fb
 8000a70:	40490fdb 	.word	0x40490fdb
 8000a74:	0800c17c 	.word	0x0800c17c

08000a78 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <inst_frequency+0x154>)
 8000a84:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a88:	443a      	add	r2, r7
 8000a8a:	4413      	add	r3, r2
 8000a8c:	6018      	str	r0, [r3, #0]
 8000a8e:	4b50      	ldr	r3, [pc, #320]	; (8000bd0 <inst_frequency+0x158>)
 8000a90:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a94:	443a      	add	r2, r7
 8000a96:	4413      	add	r3, r2
 8000a98:	6019      	str	r1, [r3, #0]
	float32_t phase[2048] = {0};
 8000a9a:	4b4e      	ldr	r3, [pc, #312]	; (8000bd4 <inst_frequency+0x15c>)
 8000a9c:	f244 0210 	movw	r2, #16400	; 0x4010
 8000aa0:	443a      	add	r2, r7
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aaa:	461a      	mov	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	f00b f833 	bl	800bb18 <memset>
	float32_t unwrapped_phase[2048] = {0};
 8000ab2:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <inst_frequency+0x160>)
 8000ab4:	f244 0210 	movw	r2, #16400	; 0x4010
 8000ab8:	443a      	add	r2, r7
 8000aba:	4413      	add	r3, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f00b f827 	bl	800bb18 <memset>
	float32_t C = 1 / M_TWOPI;
 8000aca:	4b44      	ldr	r3, [pc, #272]	; (8000bdc <inst_frequency+0x164>)
 8000acc:	f244 0208 	movw	r2, #16392	; 0x4008
 8000ad0:	443a      	add	r2, r7
 8000ad2:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 8000ad4:	4a3f      	ldr	r2, [pc, #252]	; (8000bd4 <inst_frequency+0x15c>)
 8000ad6:	f244 0310 	movw	r3, #16400	; 0x4010
 8000ada:	443b      	add	r3, r7
 8000adc:	441a      	add	r2, r3
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <inst_frequency+0x154>)
 8000ae0:	f244 0110 	movw	r1, #16400	; 0x4010
 8000ae4:	4439      	add	r1, r7
 8000ae6:	440b      	add	r3, r1
 8000ae8:	4611      	mov	r1, r2
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	f7ff fe68 	bl	80007c0 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8000af0:	4a39      	ldr	r2, [pc, #228]	; (8000bd8 <inst_frequency+0x160>)
 8000af2:	f244 0310 	movw	r3, #16400	; 0x4010
 8000af6:	443b      	add	r3, r7
 8000af8:	441a      	add	r2, r3
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <inst_frequency+0x15c>)
 8000afc:	f244 0110 	movw	r1, #16400	; 0x4010
 8000b00:	4439      	add	r1, r7
 8000b02:	440b      	add	r3, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fe92 	bl	8000830 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f244 020c 	movw	r2, #16396	; 0x400c
 8000b12:	443a      	add	r2, r7
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e03a      	b.n	8000b8e <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 8000b18:	f244 030c 	movw	r3, #16396	; 0x400c
 8000b1c:	443b      	add	r3, r7
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <inst_frequency+0x160>)
 8000b24:	f244 0110 	movw	r1, #16400	; 0x4010
 8000b28:	4439      	add	r1, r7
 8000b2a:	440b      	add	r3, r1
 8000b2c:	0092      	lsls	r2, r2, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	ed93 7a00 	vldr	s14, [r3]
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <inst_frequency+0x160>)
 8000b36:	f244 0210 	movw	r2, #16400	; 0x4010
 8000b3a:	443a      	add	r2, r7
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f244 020c 	movw	r2, #16396	; 0x400c
 8000b42:	443a      	add	r2, r7
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	0092      	lsls	r2, r2, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	edd3 7a00 	vldr	s15, [r3]
 8000b4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b52:	f244 030c 	movw	r3, #16396	; 0x400c
 8000b56:	443b      	add	r3, r7
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	009a      	lsls	r2, r3, #2
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <inst_frequency+0x158>)
 8000b5e:	f244 0110 	movw	r1, #16400	; 0x4010
 8000b62:	4439      	add	r1, r7
 8000b64:	440b      	add	r3, r1
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4413      	add	r3, r2
 8000b6a:	f244 0208 	movw	r2, #16392	; 0x4008
 8000b6e:	443a      	add	r2, r7
 8000b70:	edd2 7a00 	vldr	s15, [r2]
 8000b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b78:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8000b7c:	f244 030c 	movw	r3, #16396	; 0x400c
 8000b80:	443b      	add	r3, r7
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	f244 020c 	movw	r2, #16396	; 0x400c
 8000b8a:	443a      	add	r2, r7
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <inst_frequency+0x168>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	f244 030c 	movw	r3, #16396	; 0x400c
 8000b98:	443b      	add	r3, r7
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8bb      	bhi.n	8000b18 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <inst_frequency+0x168>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000ba8:	4413      	add	r3, r2
 8000baa:	009a      	lsls	r2, r3, #2
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <inst_frequency+0x158>)
 8000bae:	f244 0110 	movw	r1, #16400	; 0x4010
 8000bb2:	4439      	add	r1, r7
 8000bb4:	440b      	add	r3, r1
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	ffffbff4 	.word	0xffffbff4
 8000bd0:	ffffbff0 	.word	0xffffbff0
 8000bd4:	ffffdff8 	.word	0xffffdff8
 8000bd8:	ffffbff8 	.word	0xffffbff8
 8000bdc:	3e22f983 	.word	0x3e22f983
 8000be0:	0800c17c 	.word	0x0800c17c

08000be4 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000bfe:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <inst_centralized_normalized_absolute+0xec>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00a ff77 	bl	800baf8 <malloc>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000c0e:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <inst_centralized_normalized_absolute+0xec>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f00a ff6f 	bl	800baf8 <malloc>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	61bb      	str	r3, [r7, #24]
	complex_inst_absolute(in, &absolute[0]);
 8000c1e:	69f9      	ldr	r1, [r7, #28]
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fdbb 	bl	800079c <complex_inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <inst_centralized_normalized_absolute+0xec>)
 8000c28:	6819      	ldr	r1, [r3, #0]
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	f107 0210 	add.w	r2, r7, #16
 8000c32:	69f8      	ldr	r0, [r7, #28]
 8000c34:	f009 fda4 	bl	800a780 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c3c:	e012      	b.n	8000c64 <inst_centralized_normalized_absolute+0x80>
		normalized[a] = absolute[a] / max;
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	4413      	add	r3, r2
 8000c46:	edd3 6a00 	vldr	s13, [r3]
 8000c4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4413      	add	r3, r2
 8000c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c5a:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	3301      	adds	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
 8000c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <inst_centralized_normalized_absolute+0xec>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d3e7      	bcc.n	8000c3e <inst_centralized_normalized_absolute+0x5a>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <inst_centralized_normalized_absolute+0xec>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f107 0214 	add.w	r2, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	69b8      	ldr	r0, [r7, #24]
 8000c7a:	f009 fd4b 	bl	800a714 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
 8000c82:	e016      	b.n	8000cb2 <inst_centralized_normalized_absolute+0xce>
		out[i] = normalized[i] / mean - 1;
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	edd3 6a00 	vldr	s13, [r3]
 8000c90:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ca8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
 8000cb2:	6a3a      	ldr	r2, [r7, #32]
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <inst_centralized_normalized_absolute+0xec>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3e3      	bcc.n	8000c84 <inst_centralized_normalized_absolute+0xa0>
	}
	free(absolute);
 8000cbc:	69f8      	ldr	r0, [r7, #28]
 8000cbe:	f00a ff23 	bl	800bb08 <free>
	free(normalized);
 8000cc2:	69b8      	ldr	r0, [r7, #24]
 8000cc4:	f00a ff20 	bl	800bb08 <free>
}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	0800c17c 	.word	0x0800c17c

08000cd4 <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <std_dev+0x20>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f009 fc36 	bl	800a558 <arm_std_f32>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	0800c17c 	.word	0x0800c17c

08000cf8 <mean_of_signal_magnitude>:
//**********************************************************************************************//
// Feature number 6
void mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	arm_mean_f32(&in[0], frameSize, out);
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <mean_of_signal_magnitude+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f009 fd02 	bl	800a714 <arm_mean_f32>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	0800c17c 	.word	0x0800c17c

08000d1c <squared_mean_of_signal_magnitude>:

// Feature number 7
void squared_mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	float32_t mean_of_signal_magnitude;
	arm_mean_f32(&in[0], frameSize, &mean_of_signal_magnitude);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <squared_mean_of_signal_magnitude+0x34>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f107 020c 	add.w	r2, r7, #12
 8000d2e:	4619      	mov	r1, r3
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f009 fcef 	bl	800a714 <arm_mean_f32>
	*out = mean_of_signal_magnitude * mean_of_signal_magnitude;
 8000d36:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	edc3 7a00 	vstr	s15, [r3]
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	0800c17c 	.word	0x0800c17c

08000d54 <normalized_sqrt_of_sum_of_amp>:

// Feature number 8
void normalized_sqrt_of_sum_of_amp(float32_t in[], float32_t *out) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	float32_t sum = 0.0f;
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	e00e      	b.n	8000d88 <normalized_sqrt_of_sum_of_amp+0x34>
		sum += in[i];
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	edd3 7a00 	vldr	s15, [r3]
 8000d76:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d7e:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <normalized_sqrt_of_sum_of_amp+0x68>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d3eb      	bcc.n	8000d6a <normalized_sqrt_of_sum_of_amp+0x16>
	}
	*out = sqrtf(sum)/frameSize;
 8000d92:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d96:	f00a fffb 	bl	800bd90 <sqrtf>
 8000d9a:	eef0 6a40 	vmov.f32	s13, s0
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <normalized_sqrt_of_sum_of_amp+0x68>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	edc3 7a00 	vstr	s15, [r3]
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0800c17c 	.word	0x0800c17c

08000dc0 <ratio_iq>:

// Feature number 9
void ratio_iq(float32_t in[], float32_t *out) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	// ft_output = np.sum(np.power(np.imag(signal_input), 2)) / np.sum(np.power(np.real(signal_input), 2))
	float32_t sum_of_real_squared = 0.0f;
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
	float32_t sum_of_imag_squared = 0.0f;
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	e02c      	b.n	8000e36 <ratio_iq+0x76>
		sum_of_real_squared += in[i]*in[i];
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	ed93 7a00 	vldr	s14, [r3]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	edd3 7a00 	vldr	s15, [r3]
 8000df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e00:	edc7 7a05 	vstr	s15, [r7, #20]
		sum_of_imag_squared += in[i+1]*in[i+1];
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	ed93 7a00 	vldr	s14, [r3]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3301      	adds	r3, #1
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e24:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2c:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3302      	adds	r3, #2
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <ratio_iq+0xa0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	005a      	lsls	r2, r3, #1
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d8cc      	bhi.n	8000ddc <ratio_iq+0x1c>
	}
	*out = sum_of_imag_squared / sum_of_real_squared;
 8000e42:	edd7 6a04 	vldr	s13, [r7, #16]
 8000e46:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	edc3 7a00 	vstr	s15, [r3]
}
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	0800c17c 	.word	0x0800c17c

08000e64 <gmax>:

// Feature number 10
void gmax(float32_t in[], float32_t *out){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4b61      	ldr	r3, [pc, #388]	; (8000ff4 <gmax+0x190>)
 8000e70:	f244 0228 	movw	r2, #16424	; 0x4028
 8000e74:	443a      	add	r2, r7
 8000e76:	4413      	add	r3, r2
 8000e78:	6018      	str	r0, [r3, #0]
 8000e7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ff8 <gmax+0x194>)
 8000e7c:	f244 0228 	movw	r2, #16424	; 0x4028
 8000e80:	443a      	add	r2, r7
 8000e82:	4413      	add	r3, r2
 8000e84:	6019      	str	r1, [r3, #0]
	uint32_t fftSize = 2048;
 8000e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e8a:	f244 0220 	movw	r2, #16416	; 0x4020
 8000e8e:	443a      	add	r2, r7
 8000e90:	6013      	str	r3, [r2, #0]
	uint32_t ifftFlag = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f244 021c 	movw	r2, #16412	; 0x401c
 8000e98:	443a      	add	r2, r7
 8000e9a:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f244 0218 	movw	r2, #16408	; 0x4018
 8000ea2:	443a      	add	r2, r7
 8000ea4:	6013      	str	r3, [r2, #0]
	uint32_t maxValueIndex; //Unused
	float32_t maxValue;
	float32_t *result_mag;
	float32_t result_fft[4096] = {0};
 8000ea6:	4b55      	ldr	r3, [pc, #340]	; (8000ffc <gmax+0x198>)
 8000ea8:	f244 0228 	movw	r2, #16424	; 0x4028
 8000eac:	443a      	add	r2, r7
 8000eae:	4413      	add	r3, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f00a fe2d 	bl	800bb18 <memset>

	result_mag = (float32_t *) malloc(fftSize * sizeof(float32_t));
 8000ebe:	f244 0320 	movw	r3, #16416	; 0x4020
 8000ec2:	443b      	add	r3, r7
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00a fe15 	bl	800baf8 <malloc>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f244 0214 	movw	r2, #16404	; 0x4014
 8000ed4:	443a      	add	r2, r7
 8000ed6:	6013      	str	r3, [r2, #0]

	// Copy array to calculate
	for(int i = 0; i < frameSize*2; i++){
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f244 0224 	movw	r2, #16420	; 0x4024
 8000ede:	443a      	add	r2, r7
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e021      	b.n	8000f28 <gmax+0xc4>
		result_fft[i] = in[i];
 8000ee4:	f244 0324 	movw	r3, #16420	; 0x4024
 8000ee8:	443b      	add	r3, r7
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	009a      	lsls	r2, r3, #2
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <gmax+0x190>)
 8000ef0:	f244 0128 	movw	r1, #16424	; 0x4028
 8000ef4:	4439      	add	r1, r7
 8000ef6:	440b      	add	r3, r1
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <gmax+0x198>)
 8000f00:	f244 0128 	movw	r1, #16424	; 0x4028
 8000f04:	4439      	add	r1, r7
 8000f06:	440b      	add	r3, r1
 8000f08:	f244 0124 	movw	r1, #16420	; 0x4024
 8000f0c:	4439      	add	r1, r7
 8000f0e:	6809      	ldr	r1, [r1, #0]
 8000f10:	0089      	lsls	r1, r1, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < frameSize*2; i++){
 8000f16:	f244 0324 	movw	r3, #16420	; 0x4024
 8000f1a:	443b      	add	r3, r7
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f244 0224 	movw	r2, #16420	; 0x4024
 8000f24:	443a      	add	r2, r7
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b35      	ldr	r3, [pc, #212]	; (8001000 <gmax+0x19c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	005a      	lsls	r2, r3, #1
 8000f2e:	f244 0324 	movw	r3, #16420	; 0x4024
 8000f32:	443b      	add	r3, r7
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d8d4      	bhi.n	8000ee4 <gmax+0x80>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, &result_fft[0], ifftFlag, doBitReverse);
 8000f3a:	f244 031c 	movw	r3, #16412	; 0x401c
 8000f3e:	443b      	add	r3, r7
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	f244 0318 	movw	r3, #16408	; 0x4018
 8000f48:	443b      	add	r3, r7
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	492b      	ldr	r1, [pc, #172]	; (8000ffc <gmax+0x198>)
 8000f50:	f244 0028 	movw	r0, #16424	; 0x4028
 8000f54:	4438      	add	r0, r7
 8000f56:	4401      	add	r1, r0
 8000f58:	482a      	ldr	r0, [pc, #168]	; (8001004 <gmax+0x1a0>)
 8000f5a:	f009 ff9f 	bl	800ae9c <arm_cfft_f32>
	arm_cmplx_mag_f32(result_fft, result_mag, fftSize);
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <gmax+0x198>)
 8000f60:	f244 0228 	movw	r2, #16424	; 0x4028
 8000f64:	443a      	add	r2, r7
 8000f66:	4413      	add	r3, r2
 8000f68:	f244 0220 	movw	r2, #16416	; 0x4020
 8000f6c:	443a      	add	r2, r7
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	f244 0114 	movw	r1, #16404	; 0x4014
 8000f74:	4439      	add	r1, r7
 8000f76:	6809      	ldr	r1, [r1, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00a f8a7 	bl	800b0cc <arm_cmplx_mag_f32>
	arm_max_f32(result_mag, fftSize, &maxValue, &maxValueIndex);
 8000f7e:	f244 0310 	movw	r3, #16400	; 0x4010
 8000f82:	443b      	add	r3, r7
 8000f84:	f244 020c 	movw	r2, #16396	; 0x400c
 8000f88:	443a      	add	r2, r7
 8000f8a:	f244 0120 	movw	r1, #16416	; 0x4020
 8000f8e:	4439      	add	r1, r7
 8000f90:	6809      	ldr	r1, [r1, #0]
 8000f92:	f244 0014 	movw	r0, #16404	; 0x4014
 8000f96:	4438      	add	r0, r7
 8000f98:	6800      	ldr	r0, [r0, #0]
 8000f9a:	f009 fbf1 	bl	800a780 <arm_max_f32>
	*out = maxValue*maxValue/fftSize;
 8000f9e:	f244 030c 	movw	r3, #16396	; 0x400c
 8000fa2:	443b      	add	r3, r7
 8000fa4:	ed93 7a00 	vldr	s14, [r3]
 8000fa8:	f244 030c 	movw	r3, #16396	; 0x400c
 8000fac:	443b      	add	r3, r7
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000fb6:	f244 0320 	movw	r3, #16416	; 0x4020
 8000fba:	443b      	add	r3, r7
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <gmax+0x194>)
 8000fcc:	f244 0228 	movw	r2, #16424	; 0x4028
 8000fd0:	443a      	add	r2, r7
 8000fd2:	4413      	add	r3, r2
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	edc3 7a00 	vstr	s15, [r3]
	free(result_mag);
 8000fda:	f244 0314 	movw	r3, #16404	; 0x4014
 8000fde:	443b      	add	r3, r7
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	f00a fd91 	bl	800bb08 <free>
}
 8000fe6:	bf00      	nop
 8000fe8:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	ffffbfdc 	.word	0xffffbfdc
 8000ff8:	ffffbfd8 	.word	0xffffbfd8
 8000ffc:	ffffbfe4 	.word	0xffffbfe4
 8001000:	0800c17c 	.word	0x0800c17c
 8001004:	0800c1a0 	.word	0x0800c1a0

08001008 <kurtosis_of_abs_amplitude>:

// Features number 11 and 12
void kurtosis_of_abs_amplitude(float32_t in[], float32_t *out, uint32_t blockSize){
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	466b      	mov	r3, sp
 8001016:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	4603      	mov	r3, r0
 800101c:	3b01      	subs	r3, #1
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
 8001020:	4601      	mov	r1, r0
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	f04f 0400 	mov.w	r4, #0
 800102e:	0154      	lsls	r4, r2, #5
 8001030:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001034:	014b      	lsls	r3, r1, #5
 8001036:	4601      	mov	r1, r0
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	f04f 0400 	mov.w	r4, #0
 8001044:	0154      	lsls	r4, r2, #5
 8001046:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800104a:	014b      	lsls	r3, r1, #5
 800104c:	0083      	lsls	r3, r0, #2
 800104e:	3303      	adds	r3, #3
 8001050:	3307      	adds	r3, #7
 8001052:	08db      	lsrs	r3, r3, #3
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	ebad 0d03 	sub.w	sp, sp, r3
 800105a:	466b      	mov	r3, sp
 800105c:	3303      	adds	r3, #3
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	4603      	mov	r3, r0
 8001068:	3b01      	subs	r3, #1
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800106c:	4601      	mov	r1, r0
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	f04f 0400 	mov.w	r4, #0
 800107a:	0154      	lsls	r4, r2, #5
 800107c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001080:	014b      	lsls	r3, r1, #5
 8001082:	4601      	mov	r1, r0
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	f04f 0400 	mov.w	r4, #0
 8001090:	0154      	lsls	r4, r2, #5
 8001092:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001096:	014b      	lsls	r3, r1, #5
 8001098:	0083      	lsls	r3, r0, #2
 800109a:	3303      	adds	r3, #3
 800109c:	3307      	adds	r3, #7
 800109e:	08db      	lsrs	r3, r3, #3
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	ebad 0d03 	sub.w	sp, sp, r3
 80010a6:	466b      	mov	r3, sp
 80010a8:	3303      	adds	r3, #3
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	4603      	mov	r3, r0
 80010b4:	3b01      	subs	r3, #1
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
 80010b8:	4601      	mov	r1, r0
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	f04f 0400 	mov.w	r4, #0
 80010c6:	0154      	lsls	r4, r2, #5
 80010c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010cc:	014b      	lsls	r3, r1, #5
 80010ce:	4601      	mov	r1, r0
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	f04f 0400 	mov.w	r4, #0
 80010dc:	0154      	lsls	r4, r2, #5
 80010de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010e2:	014b      	lsls	r3, r1, #5
 80010e4:	0083      	lsls	r3, r0, #2
 80010e6:	3303      	adds	r3, #3
 80010e8:	3307      	adds	r3, #7
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	ebad 0d03 	sub.w	sp, sp, r3
 80010f2:	466b      	mov	r3, sp
 80010f4:	3303      	adds	r3, #3
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	4603      	mov	r3, r0
 8001100:	3b01      	subs	r3, #1
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001104:	4601      	mov	r1, r0
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	f04f 0400 	mov.w	r4, #0
 8001112:	0154      	lsls	r4, r2, #5
 8001114:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001118:	014b      	lsls	r3, r1, #5
 800111a:	4601      	mov	r1, r0
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	f04f 0400 	mov.w	r4, #0
 8001128:	0154      	lsls	r4, r2, #5
 800112a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800112e:	014b      	lsls	r3, r1, #5
 8001130:	0083      	lsls	r3, r0, #2
 8001132:	3303      	adds	r3, #3
 8001134:	3307      	adds	r3, #7
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	ebad 0d03 	sub.w	sp, sp, r3
 800113e:	466b      	mov	r3, sp
 8001140:	3303      	adds	r3, #3
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	4603      	mov	r3, r0
 800114c:	3b01      	subs	r3, #1
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001150:	4601      	mov	r1, r0
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	f04f 0400 	mov.w	r4, #0
 800115e:	0154      	lsls	r4, r2, #5
 8001160:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001164:	014b      	lsls	r3, r1, #5
 8001166:	4601      	mov	r1, r0
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	0154      	lsls	r4, r2, #5
 8001176:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800117a:	014b      	lsls	r3, r1, #5
 800117c:	0083      	lsls	r3, r0, #2
 800117e:	3303      	adds	r3, #3
 8001180:	3307      	adds	r3, #7
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	ebad 0d03 	sub.w	sp, sp, r3
 800118a:	466b      	mov	r3, sp
 800118c:	3303      	adds	r3, #3
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4603      	mov	r3, r0
 8001198:	3b01      	subs	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
 800119c:	4601      	mov	r1, r0
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	f04f 0400 	mov.w	r4, #0
 80011aa:	0154      	lsls	r4, r2, #5
 80011ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011b0:	014b      	lsls	r3, r1, #5
 80011b2:	4601      	mov	r1, r0
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	f04f 0400 	mov.w	r4, #0
 80011c0:	0154      	lsls	r4, r2, #5
 80011c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011c6:	014b      	lsls	r3, r1, #5
 80011c8:	0083      	lsls	r3, r0, #2
 80011ca:	3303      	adds	r3, #3
 80011cc:	3307      	adds	r3, #7
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	ebad 0d03 	sub.w	sp, sp, r3
 80011d6:	466b      	mov	r3, sp
 80011d8:	3303      	adds	r3, #3
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	461a      	mov	r2, r3
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f009 fa93 	bl	800a714 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 80011ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80011f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	f009 f95e 	bl	800a4bc <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 8001200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f00a f898 	bl	800b33c <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 800120c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800120e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f009 f970 	bl	800a4f8 <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 8001218:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800121a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800121c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f00a f8d2 	bl	800b3c8 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 8001224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001226:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f00a f8cc 	bl	800b3c8 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 8001230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001232:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001234:	6a3a      	ldr	r2, [r7, #32]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f00a f8c6 	bl	800b3c8 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	f107 0218 	add.w	r2, r7, #24
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	f009 fa65 	bl	800a714 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	f107 0214 	add.w	r2, r7, #20
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f009 fa5e 	bl	800a714 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8001258:	edd7 6a06 	vldr	s13, [r7, #24]
 800125c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001260:	edd7 7a05 	vldr	s15, [r7, #20]
 8001264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	edc3 7a00 	vstr	s15, [r3]
 800127a:	46ad      	mov	sp, r5
}
 800127c:	bf00      	nop
 800127e:	3750      	adds	r7, #80	; 0x50
 8001280:	46bd      	mov	sp, r7
 8001282:	bdb0      	pop	{r4, r5, r7, pc}

08001284 <kurtosis_of_abs_freq>:

void kurtosis_of_abs_freq(float32_t in[], float32_t *out, uint32_t blockSize){
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	466b      	mov	r3, sp
 8001292:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4603      	mov	r3, r0
 8001298:	3b01      	subs	r3, #1
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
 800129c:	4601      	mov	r1, r0
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	f04f 0400 	mov.w	r4, #0
 80012aa:	0154      	lsls	r4, r2, #5
 80012ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012b0:	014b      	lsls	r3, r1, #5
 80012b2:	4601      	mov	r1, r0
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	f04f 0400 	mov.w	r4, #0
 80012c0:	0154      	lsls	r4, r2, #5
 80012c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012c6:	014b      	lsls	r3, r1, #5
 80012c8:	0083      	lsls	r3, r0, #2
 80012ca:	3303      	adds	r3, #3
 80012cc:	3307      	adds	r3, #7
 80012ce:	08db      	lsrs	r3, r3, #3
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	ebad 0d03 	sub.w	sp, sp, r3
 80012d6:	466b      	mov	r3, sp
 80012d8:	3303      	adds	r3, #3
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	4603      	mov	r3, r0
 80012e4:	3b01      	subs	r3, #1
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e8:	4601      	mov	r1, r0
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	0154      	lsls	r4, r2, #5
 80012f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012fc:	014b      	lsls	r3, r1, #5
 80012fe:	4601      	mov	r1, r0
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	f04f 0400 	mov.w	r4, #0
 800130c:	0154      	lsls	r4, r2, #5
 800130e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001312:	014b      	lsls	r3, r1, #5
 8001314:	0083      	lsls	r3, r0, #2
 8001316:	3303      	adds	r3, #3
 8001318:	3307      	adds	r3, #7
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	ebad 0d03 	sub.w	sp, sp, r3
 8001322:	466b      	mov	r3, sp
 8001324:	3303      	adds	r3, #3
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4603      	mov	r3, r0
 8001330:	3b01      	subs	r3, #1
 8001332:	647b      	str	r3, [r7, #68]	; 0x44
 8001334:	4601      	mov	r1, r0
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	f04f 0400 	mov.w	r4, #0
 8001342:	0154      	lsls	r4, r2, #5
 8001344:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001348:	014b      	lsls	r3, r1, #5
 800134a:	4601      	mov	r1, r0
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	f04f 0400 	mov.w	r4, #0
 8001358:	0154      	lsls	r4, r2, #5
 800135a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800135e:	014b      	lsls	r3, r1, #5
 8001360:	0083      	lsls	r3, r0, #2
 8001362:	3303      	adds	r3, #3
 8001364:	3307      	adds	r3, #7
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	ebad 0d03 	sub.w	sp, sp, r3
 800136e:	466b      	mov	r3, sp
 8001370:	3303      	adds	r3, #3
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4603      	mov	r3, r0
 800137c:	3b01      	subs	r3, #1
 800137e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001380:	4601      	mov	r1, r0
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	f04f 0400 	mov.w	r4, #0
 800138e:	0154      	lsls	r4, r2, #5
 8001390:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001394:	014b      	lsls	r3, r1, #5
 8001396:	4601      	mov	r1, r0
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	f04f 0400 	mov.w	r4, #0
 80013a4:	0154      	lsls	r4, r2, #5
 80013a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013aa:	014b      	lsls	r3, r1, #5
 80013ac:	0083      	lsls	r3, r0, #2
 80013ae:	3303      	adds	r3, #3
 80013b0:	3307      	adds	r3, #7
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	ebad 0d03 	sub.w	sp, sp, r3
 80013ba:	466b      	mov	r3, sp
 80013bc:	3303      	adds	r3, #3
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4603      	mov	r3, r0
 80013c8:	3b01      	subs	r3, #1
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013cc:	4601      	mov	r1, r0
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	f04f 0400 	mov.w	r4, #0
 80013da:	0154      	lsls	r4, r2, #5
 80013dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013e0:	014b      	lsls	r3, r1, #5
 80013e2:	4601      	mov	r1, r0
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	f04f 0400 	mov.w	r4, #0
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013f6:	014b      	lsls	r3, r1, #5
 80013f8:	0083      	lsls	r3, r0, #2
 80013fa:	3303      	adds	r3, #3
 80013fc:	3307      	adds	r3, #7
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	ebad 0d03 	sub.w	sp, sp, r3
 8001406:	466b      	mov	r3, sp
 8001408:	3303      	adds	r3, #3
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	4603      	mov	r3, r0
 8001414:	3b01      	subs	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
 8001418:	4601      	mov	r1, r0
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	f04f 0400 	mov.w	r4, #0
 8001426:	0154      	lsls	r4, r2, #5
 8001428:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800142c:	014b      	lsls	r3, r1, #5
 800142e:	4601      	mov	r1, r0
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	f04f 0400 	mov.w	r4, #0
 800143c:	0154      	lsls	r4, r2, #5
 800143e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001442:	014b      	lsls	r3, r1, #5
 8001444:	0083      	lsls	r3, r0, #2
 8001446:	3303      	adds	r3, #3
 8001448:	3307      	adds	r3, #7
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	ebad 0d03 	sub.w	sp, sp, r3
 8001452:	466b      	mov	r3, sp
 8001454:	3303      	adds	r3, #3
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	461a      	mov	r2, r3
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f009 f955 	bl	800a714 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 800146a:	edd7 7a07 	vldr	s15, [r7, #28]
 800146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4618      	mov	r0, r3
 8001474:	eeb0 0a67 	vmov.f32	s0, s15
 8001478:	f009 f820 	bl	800a4bc <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 800147c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800147e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f009 ff5a 	bl	800b33c <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 8001488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800148a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	f009 f832 	bl	800a4f8 <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 8001494:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001496:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f009 ff94 	bl	800b3c8 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 80014a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80014a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f009 ff8e 	bl	800b3c8 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 80014ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f009 ff88 	bl	800b3c8 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	f107 0218 	add.w	r2, r7, #24
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f009 f927 	bl	800a714 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 80014c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c8:	f107 0214 	add.w	r2, r7, #20
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f009 f920 	bl	800a714 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 80014d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80014d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80014dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	edc3 7a00 	vstr	s15, [r3]
 80014f6:	46ad      	mov	sp, r5
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	; 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bdb0      	pop	{r4, r5, r7, pc}

08001500 <moment20>:

// Central moment definition
// Mpq = E[x^(p-q).x*^q]
void moment20(float32_t in[], float32_t out[]){
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	466b      	mov	r3, sp
 800150c:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 800150e:	4b61      	ldr	r3, [pc, #388]	; (8001694 <moment20+0x194>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float32_t in_cp[frameSize*2];
 800151e:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <moment20+0x194>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	3b01      	subs	r3, #1
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001528:	4b5a      	ldr	r3, [pc, #360]	; (8001694 <moment20+0x194>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	f04f 0400 	mov.w	r4, #0
 800153c:	0154      	lsls	r4, r2, #5
 800153e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001542:	014b      	lsls	r3, r1, #5
 8001544:	4b53      	ldr	r3, [pc, #332]	; (8001694 <moment20+0x194>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	f04f 0400 	mov.w	r4, #0
 8001558:	0154      	lsls	r4, r2, #5
 800155a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800155e:	014b      	lsls	r3, r1, #5
 8001560:	4b4c      	ldr	r3, [pc, #304]	; (8001694 <moment20+0x194>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	3303      	adds	r3, #3
 8001568:	3307      	adds	r3, #7
 800156a:	08db      	lsrs	r3, r3, #3
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	ebad 0d03 	sub.w	sp, sp, r3
 8001572:	466b      	mov	r3, sp
 8001574:	3303      	adds	r3, #3
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
	float32_t m20[frameSize*2]; // in^2
 800157c:	4b45      	ldr	r3, [pc, #276]	; (8001694 <moment20+0x194>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	3b01      	subs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	4b43      	ldr	r3, [pc, #268]	; (8001694 <moment20+0x194>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	f04f 0400 	mov.w	r4, #0
 800159a:	0154      	lsls	r4, r2, #5
 800159c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015a0:	014b      	lsls	r3, r1, #5
 80015a2:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <moment20+0x194>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f04f 0400 	mov.w	r4, #0
 80015b6:	0154      	lsls	r4, r2, #5
 80015b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015bc:	014b      	lsls	r3, r1, #5
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <moment20+0x194>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	3303      	adds	r3, #3
 80015c6:	3307      	adds	r3, #7
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	ebad 0d03 	sub.w	sp, sp, r3
 80015d0:	466b      	mov	r3, sp
 80015d2:	3303      	adds	r3, #3
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	613b      	str	r3, [r7, #16]
	float32_t m20_real = 0, m20_imag = 0, m20_real_mean = 0, m20_imag_mean = 0;
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80015f2:	69b9      	ldr	r1, [r7, #24]
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <moment20+0x194>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	461a      	mov	r2, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f008 ff7b 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <moment20+0x194>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f009 fcbe 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
 8001614:	e01b      	b.n	800164e <moment20+0x14e>
		m20_real += m20[i];
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ed97 7a07 	vldr	s14, [r7, #28]
 8001626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162a:	edc7 7a07 	vstr	s15, [r7, #28]
		m20_imag += m20[i+1];
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	3301      	adds	r3, #1
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001644:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int i = 0; i < frameSize*2; i+=2){
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	3302      	adds	r3, #2
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <moment20+0x194>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	005a      	lsls	r2, r3, #1
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	429a      	cmp	r2, r3
 8001658:	d8dd      	bhi.n	8001616 <moment20+0x116>
	}
	m20_real_mean = m20_real / blockSize;
 800165a:	edd7 6a07 	vldr	s13, [r7, #28]
 800165e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001666:	edc7 7a03 	vstr	s15, [r7, #12]
	m20_imag_mean = m20_imag / blockSize;
 800166a:	edd7 6a08 	vldr	s13, [r7, #32]
 800166e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001676:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m20_real_mean;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	601a      	str	r2, [r3, #0]
	out[1] = m20_imag_mean;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	46ad      	mov	sp, r5
	//*out = sqrtf(m20_real_mean*m20_real_mean + m20_imag_mean*m20_imag_mean);
}
 800168a:	bf00      	nop
 800168c:	3730      	adds	r7, #48	; 0x30
 800168e:	46bd      	mov	sp, r7
 8001690:	bdb0      	pop	{r4, r5, r7, pc}
 8001692:	bf00      	nop
 8001694:	0800c17c 	.word	0x0800c17c

08001698 <moment21>:

void moment21(float32_t in[], float32_t out[]){
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	466b      	mov	r3, sp
 80016a4:	461d      	mov	r5, r3
	float32_t in_conj[frameSize*2];
 80016a6:	4b55      	ldr	r3, [pc, #340]	; (80017fc <moment21+0x164>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	3b01      	subs	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	4b52      	ldr	r3, [pc, #328]	; (80017fc <moment21+0x164>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	f04f 0400 	mov.w	r4, #0
 80016c4:	0154      	lsls	r4, r2, #5
 80016c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016ca:	014b      	lsls	r3, r1, #5
 80016cc:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <moment21+0x164>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	f04f 0400 	mov.w	r4, #0
 80016e0:	0154      	lsls	r4, r2, #5
 80016e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016e6:	014b      	lsls	r3, r1, #5
 80016e8:	4b44      	ldr	r3, [pc, #272]	; (80017fc <moment21+0x164>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	3303      	adds	r3, #3
 80016f0:	3307      	adds	r3, #7
 80016f2:	08db      	lsrs	r3, r3, #3
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	ebad 0d03 	sub.w	sp, sp, r3
 80016fa:	466b      	mov	r3, sp
 80016fc:	3303      	adds	r3, #3
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
	float32_t m21[frameSize*2];
 8001704:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <moment21+0x164>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	3b01      	subs	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <moment21+0x164>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	f04f 0400 	mov.w	r4, #0
 8001722:	0154      	lsls	r4, r2, #5
 8001724:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001728:	014b      	lsls	r3, r1, #5
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <moment21+0x164>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	f04f 0400 	mov.w	r4, #0
 800173e:	0154      	lsls	r4, r2, #5
 8001740:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001744:	014b      	lsls	r3, r1, #5
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <moment21+0x164>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	3303      	adds	r3, #3
 800174e:	3307      	adds	r3, #7
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	ebad 0d03 	sub.w	sp, sp, r3
 8001758:	466b      	mov	r3, sp
 800175a:	3303      	adds	r3, #3
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	613b      	str	r3, [r7, #16]
	float32_t in_mag[frameSize];
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <moment21+0x164>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3b01      	subs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <moment21+0x164>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	f04f 0400 	mov.w	r4, #0
 800177c:	0154      	lsls	r4, r2, #5
 800177e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001782:	014b      	lsls	r3, r1, #5
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <moment21+0x164>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f04f 0400 	mov.w	r4, #0
 8001796:	0154      	lsls	r4, r2, #5
 8001798:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800179c:	014b      	lsls	r3, r1, #5
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <moment21+0x164>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	3303      	adds	r3, #3
 80017a6:	3307      	adds	r3, #7
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	ebad 0d03 	sub.w	sp, sp, r3
 80017b0:	466b      	mov	r3, sp
 80017b2:	3303      	adds	r3, #3
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	60bb      	str	r3, [r7, #8]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <moment21+0x164>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f009 fd6a 	bl	800b29c <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 80017c8:	69b9      	ldr	r1, [r7, #24]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <moment21+0x164>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f009 fbdb 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mag_f32(&m21[0], &in_mag[0], frameSize);
 80017d6:	6938      	ldr	r0, [r7, #16]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <moment21+0x164>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	f009 fc74 	bl	800b0cc <arm_cmplx_mag_f32>
	arm_mean_f32(&in_mag[0], frameSize, out);
 80017e4:	68b8      	ldr	r0, [r7, #8]
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <moment21+0x164>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f008 ff91 	bl	800a714 <arm_mean_f32>
 80017f2:	46ad      	mov	sp, r5
	// Calculating the mean after the absolute value here works because there
	// is no imaginary part in the number M21, different from M20
}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bdb0      	pop	{r4, r5, r7, pc}
 80017fc:	0800c17c 	.word	0x0800c17c

08001800 <moment22>:

void moment22(float32_t in[], float32_t out[]){
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b08e      	sub	sp, #56	; 0x38
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	466b      	mov	r3, sp
 800180c:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 800180e:	4b7c      	ldr	r3, [pc, #496]	; (8001a00 <moment22+0x200>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float32_t in_conj[frameSize*2];
 800181e:	4b78      	ldr	r3, [pc, #480]	; (8001a00 <moment22+0x200>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	3b01      	subs	r3, #1
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001828:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <moment22+0x200>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4619      	mov	r1, r3
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	f04f 0400 	mov.w	r4, #0
 800183c:	0154      	lsls	r4, r2, #5
 800183e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001842:	014b      	lsls	r3, r1, #5
 8001844:	4b6e      	ldr	r3, [pc, #440]	; (8001a00 <moment22+0x200>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	f04f 0400 	mov.w	r4, #0
 8001858:	0154      	lsls	r4, r2, #5
 800185a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800185e:	014b      	lsls	r3, r1, #5
 8001860:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <moment22+0x200>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	3303      	adds	r3, #3
 8001868:	3307      	adds	r3, #7
 800186a:	08db      	lsrs	r3, r3, #3
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	ebad 0d03 	sub.w	sp, sp, r3
 8001872:	466b      	mov	r3, sp
 8001874:	3303      	adds	r3, #3
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t in_conj_cp[frameSize*2];
 800187c:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <moment22+0x200>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	3b01      	subs	r3, #1
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
 8001886:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <moment22+0x200>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4619      	mov	r1, r3
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	f04f 0400 	mov.w	r4, #0
 800189a:	0154      	lsls	r4, r2, #5
 800189c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018a0:	014b      	lsls	r3, r1, #5
 80018a2:	4b57      	ldr	r3, [pc, #348]	; (8001a00 <moment22+0x200>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	f04f 0400 	mov.w	r4, #0
 80018b6:	0154      	lsls	r4, r2, #5
 80018b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018bc:	014b      	lsls	r3, r1, #5
 80018be:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <moment22+0x200>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	3303      	adds	r3, #3
 80018c6:	3307      	adds	r3, #7
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	ebad 0d03 	sub.w	sp, sp, r3
 80018d0:	466b      	mov	r3, sp
 80018d2:	3303      	adds	r3, #3
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
	float32_t m22[frameSize*2]; // in^2
 80018da:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <moment22+0x200>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <moment22+0x200>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4619      	mov	r1, r3
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	f04f 0400 	mov.w	r4, #0
 80018f8:	0154      	lsls	r4, r2, #5
 80018fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018fe:	014b      	lsls	r3, r1, #5
 8001900:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <moment22+0x200>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	f04f 0400 	mov.w	r4, #0
 8001914:	0154      	lsls	r4, r2, #5
 8001916:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800191a:	014b      	lsls	r3, r1, #5
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <moment22+0x200>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	3303      	adds	r3, #3
 8001924:	3307      	adds	r3, #7
 8001926:	08db      	lsrs	r3, r3, #3
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	ebad 0d03 	sub.w	sp, sp, r3
 800192e:	466b      	mov	r3, sp
 8001930:	3303      	adds	r3, #3
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]
	float32_t m22_real = 0, m22_imag = 0, m22_real_mean = 0, m22_imag_mean = 0;
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8001950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <moment22+0x200>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f009 fc9f 	bl	800b29c <arm_cmplx_conj_f32>
	arm_copy_f32(&in_conj[0], &in_conj_cp[0], frameSize*2);
 800195e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001960:	69b9      	ldr	r1, [r7, #24]
 8001962:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <moment22+0x200>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	461a      	mov	r2, r3
 800196a:	f008 fdc5 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in_conj[0], &in_conj_cp[0], &m22[0], frameSize);
 800196e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001970:	69b9      	ldr	r1, [r7, #24]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <moment22+0x200>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f009 fb08 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	e01b      	b.n	80019ba <moment22+0x1ba>
		m22_real += m22[i];
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001996:	edc7 7a07 	vstr	s15, [r7, #28]
		m22_imag += m22[i+1];
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	3301      	adds	r3, #1
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80019ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b0:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int i = 0; i < frameSize*2; i+=2){
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	3302      	adds	r3, #2
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <moment22+0x200>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	005a      	lsls	r2, r3, #1
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d8dd      	bhi.n	8001982 <moment22+0x182>
	}
	m22_real_mean = m22_real / blockSize;
 80019c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80019ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d2:	edc7 7a03 	vstr	s15, [r7, #12]
	m22_imag_mean = m22_imag / blockSize;
 80019d6:	edd7 6a08 	vldr	s13, [r7, #32]
 80019da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80019de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e2:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m22_real_mean;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	601a      	str	r2, [r3, #0]
	out[1] = m22_imag_mean;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	3304      	adds	r3, #4
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	46ad      	mov	sp, r5
	//*out = sqrtf(m22_real_mean*m22_real_mean + m22_imag_mean*m22_imag_mean);
}
 80019f6:	bf00      	nop
 80019f8:	3738      	adds	r7, #56	; 0x38
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdb0      	pop	{r4, r5, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	0800c17c 	.word	0x0800c17c

08001a04 <moment40>:

void moment40(float32_t in[], float32_t out[]){
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b090      	sub	sp, #64	; 0x40
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	466b      	mov	r3, sp
 8001a10:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8001a12:	4b94      	ldr	r3, [pc, #592]	; (8001c64 <moment40+0x260>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8001a22:	4b90      	ldr	r3, [pc, #576]	; (8001c64 <moment40+0x260>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2c:	4b8d      	ldr	r3, [pc, #564]	; (8001c64 <moment40+0x260>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	f04f 0400 	mov.w	r4, #0
 8001a40:	0154      	lsls	r4, r2, #5
 8001a42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a46:	014b      	lsls	r3, r1, #5
 8001a48:	4b86      	ldr	r3, [pc, #536]	; (8001c64 <moment40+0x260>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	f04f 0400 	mov.w	r4, #0
 8001a5c:	0154      	lsls	r4, r2, #5
 8001a5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a62:	014b      	lsls	r3, r1, #5
 8001a64:	4b7f      	ldr	r3, [pc, #508]	; (8001c64 <moment40+0x260>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	3307      	adds	r3, #7
 8001a6e:	08db      	lsrs	r3, r3, #3
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	ebad 0d03 	sub.w	sp, sp, r3
 8001a76:	466b      	mov	r3, sp
 8001a78:	3303      	adds	r3, #3
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t m20[frameSize*2]; // in^2
 8001a80:	4b78      	ldr	r3, [pc, #480]	; (8001c64 <moment40+0x260>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	3b01      	subs	r3, #1
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a8a:	4b76      	ldr	r3, [pc, #472]	; (8001c64 <moment40+0x260>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	f04f 0400 	mov.w	r4, #0
 8001a9e:	0154      	lsls	r4, r2, #5
 8001aa0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aa4:	014b      	lsls	r3, r1, #5
 8001aa6:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <moment40+0x260>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f04f 0400 	mov.w	r4, #0
 8001aba:	0154      	lsls	r4, r2, #5
 8001abc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ac0:	014b      	lsls	r3, r1, #5
 8001ac2:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <moment40+0x260>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	3303      	adds	r3, #3
 8001aca:	3307      	adds	r3, #7
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	ebad 0d03 	sub.w	sp, sp, r3
 8001ad4:	466b      	mov	r3, sp
 8001ad6:	3303      	adds	r3, #3
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	623b      	str	r3, [r7, #32]
	float32_t m30[frameSize]; // in^3
 8001ade:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <moment40+0x260>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <moment40+0x260>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	f04f 0400 	mov.w	r4, #0
 8001af8:	0154      	lsls	r4, r2, #5
 8001afa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001afe:	014b      	lsls	r3, r1, #5
 8001b00:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <moment40+0x260>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	f04f 0400 	mov.w	r4, #0
 8001b12:	0154      	lsls	r4, r2, #5
 8001b14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b18:	014b      	lsls	r3, r1, #5
 8001b1a:	4b52      	ldr	r3, [pc, #328]	; (8001c64 <moment40+0x260>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	3303      	adds	r3, #3
 8001b22:	3307      	adds	r3, #7
 8001b24:	08db      	lsrs	r3, r3, #3
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	ebad 0d03 	sub.w	sp, sp, r3
 8001b2c:	466b      	mov	r3, sp
 8001b2e:	3303      	adds	r3, #3
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	61bb      	str	r3, [r7, #24]
	float32_t m40[frameSize]; // in^4
 8001b36:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <moment40+0x260>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <moment40+0x260>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	f04f 0400 	mov.w	r4, #0
 8001b50:	0154      	lsls	r4, r2, #5
 8001b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b56:	014b      	lsls	r3, r1, #5
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <moment40+0x260>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f04f 0400 	mov.w	r4, #0
 8001b6a:	0154      	lsls	r4, r2, #5
 8001b6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b70:	014b      	lsls	r3, r1, #5
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <moment40+0x260>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	3303      	adds	r3, #3
 8001b7a:	3307      	adds	r3, #7
 8001b7c:	08db      	lsrs	r3, r3, #3
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	ebad 0d03 	sub.w	sp, sp, r3
 8001b84:	466b      	mov	r3, sp
 8001b86:	3303      	adds	r3, #3
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	613b      	str	r3, [r7, #16]
	float32_t m40_real = 0.0f, m40_imag = 0.0f;
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m40_real_mean = 0.0f, m40_imag_mean = 0.0f;
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8001ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <moment40+0x260>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	461a      	mov	r2, r3
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f008 fca1 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001bb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bb8:	6a3a      	ldr	r2, [r7, #32]
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <moment40+0x260>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f009 f9e4 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8001bc4:	6a38      	ldr	r0, [r7, #32]
 8001bc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <moment40+0x260>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f009 f9dd 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8001bd2:	69b8      	ldr	r0, [r7, #24]
 8001bd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <moment40+0x260>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f009 f9d6 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be4:	e01b      	b.n	8001c1e <moment40+0x21a>
		m40_real += m40[i];
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m40_imag += m40[i+1];
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	3301      	adds	r3, #1
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <moment40+0x260>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	005a      	lsls	r2, r3, #1
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d8dd      	bhi.n	8001be6 <moment40+0x1e2>
	}
	m40_real_mean = m40_real / blockSize;
 8001c2a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c2e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c36:	edc7 7a03 	vstr	s15, [r7, #12]
	m40_imag_mean = m40_imag / blockSize;
 8001c3a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c3e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c46:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m40_real_mean;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	601a      	str	r2, [r3, #0]
	out[1] = m40_imag_mean;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3304      	adds	r3, #4
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	46ad      	mov	sp, r5
	// *out = sqrtf(m40_real_mean*m40_real_mean + m40_imag_mean*m40_imag_mean);
}
 8001c5a:	bf00      	nop
 8001c5c:	3740      	adds	r7, #64	; 0x40
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bdb0      	pop	{r4, r5, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	0800c17c 	.word	0x0800c17c

08001c68 <moment41>:

void moment41(float32_t in[], float32_t out[]){
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b092      	sub	sp, #72	; 0x48
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	466b      	mov	r3, sp
 8001c74:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8001c76:	4baf      	ldr	r3, [pc, #700]	; (8001f34 <moment41+0x2cc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8001c86:	4bab      	ldr	r3, [pc, #684]	; (8001f34 <moment41+0x2cc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c90:	4ba8      	ldr	r3, [pc, #672]	; (8001f34 <moment41+0x2cc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	f04f 0400 	mov.w	r4, #0
 8001ca4:	0154      	lsls	r4, r2, #5
 8001ca6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001caa:	014b      	lsls	r3, r1, #5
 8001cac:	4ba1      	ldr	r3, [pc, #644]	; (8001f34 <moment41+0x2cc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	f04f 0400 	mov.w	r4, #0
 8001cc0:	0154      	lsls	r4, r2, #5
 8001cc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cc6:	014b      	lsls	r3, r1, #5
 8001cc8:	4b9a      	ldr	r3, [pc, #616]	; (8001f34 <moment41+0x2cc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	3303      	adds	r3, #3
 8001cd0:	3307      	adds	r3, #7
 8001cd2:	08db      	lsrs	r3, r3, #3
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	ebad 0d03 	sub.w	sp, sp, r3
 8001cda:	466b      	mov	r3, sp
 8001cdc:	3303      	adds	r3, #3
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8001ce4:	4b93      	ldr	r3, [pc, #588]	; (8001f34 <moment41+0x2cc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	3b01      	subs	r3, #1
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cee:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <moment41+0x2cc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	f04f 0400 	mov.w	r4, #0
 8001d02:	0154      	lsls	r4, r2, #5
 8001d04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d08:	014b      	lsls	r3, r1, #5
 8001d0a:	4b8a      	ldr	r3, [pc, #552]	; (8001f34 <moment41+0x2cc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4619      	mov	r1, r3
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	f04f 0400 	mov.w	r4, #0
 8001d1e:	0154      	lsls	r4, r2, #5
 8001d20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d24:	014b      	lsls	r3, r1, #5
 8001d26:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <moment41+0x2cc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	3307      	adds	r3, #7
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	ebad 0d03 	sub.w	sp, sp, r3
 8001d38:	466b      	mov	r3, sp
 8001d3a:	3303      	adds	r3, #3
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 8001d42:	4b7c      	ldr	r3, [pc, #496]	; (8001f34 <moment41+0x2cc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d4c:	4b79      	ldr	r3, [pc, #484]	; (8001f34 <moment41+0x2cc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	f04f 0400 	mov.w	r4, #0
 8001d60:	0154      	lsls	r4, r2, #5
 8001d62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d66:	014b      	lsls	r3, r1, #5
 8001d68:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <moment41+0x2cc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	f04f 0400 	mov.w	r4, #0
 8001d7c:	0154      	lsls	r4, r2, #5
 8001d7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d82:	014b      	lsls	r3, r1, #5
 8001d84:	4b6b      	ldr	r3, [pc, #428]	; (8001f34 <moment41+0x2cc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	3303      	adds	r3, #3
 8001d8c:	3307      	adds	r3, #7
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	ebad 0d03 	sub.w	sp, sp, r3
 8001d96:	466b      	mov	r3, sp
 8001d98:	3303      	adds	r3, #3
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	623b      	str	r3, [r7, #32]
	float32_t m30[frameSize]; // in^3
 8001da0:	4b64      	ldr	r3, [pc, #400]	; (8001f34 <moment41+0x2cc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <moment41+0x2cc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	f04f 0400 	mov.w	r4, #0
 8001dba:	0154      	lsls	r4, r2, #5
 8001dbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dc0:	014b      	lsls	r3, r1, #5
 8001dc2:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <moment41+0x2cc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	f04f 0400 	mov.w	r4, #0
 8001dd4:	0154      	lsls	r4, r2, #5
 8001dd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dda:	014b      	lsls	r3, r1, #5
 8001ddc:	4b55      	ldr	r3, [pc, #340]	; (8001f34 <moment41+0x2cc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	3303      	adds	r3, #3
 8001de4:	3307      	adds	r3, #7
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	ebad 0d03 	sub.w	sp, sp, r3
 8001dee:	466b      	mov	r3, sp
 8001df0:	3303      	adds	r3, #3
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
	float32_t m41[frameSize]; // in^4
 8001df8:	4b4e      	ldr	r3, [pc, #312]	; (8001f34 <moment41+0x2cc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <moment41+0x2cc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	f04f 0400 	mov.w	r4, #0
 8001e12:	0154      	lsls	r4, r2, #5
 8001e14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e18:	014b      	lsls	r3, r1, #5
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <moment41+0x2cc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	f04f 0400 	mov.w	r4, #0
 8001e2c:	0154      	lsls	r4, r2, #5
 8001e2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e32:	014b      	lsls	r3, r1, #5
 8001e34:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <moment41+0x2cc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3303      	adds	r3, #3
 8001e3c:	3307      	adds	r3, #7
 8001e3e:	08db      	lsrs	r3, r3, #3
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	ebad 0d03 	sub.w	sp, sp, r3
 8001e46:	466b      	mov	r3, sp
 8001e48:	3303      	adds	r3, #3
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
	float32_t m41_real = 0.0f, m41_imag = 0.0f;
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m41_real_mean = 0.0f, m41_imag_mean = 0.0f;
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8001e68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e6a:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <moment41+0x2cc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	461a      	mov	r2, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f008 fb40 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8001e78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <moment41+0x2cc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f009 fa0b 	bl	800b29c <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001e86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e88:	6a3a      	ldr	r2, [r7, #32]
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <moment41+0x2cc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f009 f87c 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8001e94:	6a38      	ldr	r0, [r7, #32]
 8001e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <moment41+0x2cc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f009 f875 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 8001ea2:	69b8      	ldr	r0, [r7, #24]
 8001ea4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <moment41+0x2cc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f009 f86e 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb4:	e01b      	b.n	8001eee <moment41+0x286>
		m41_real += m41[i];
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m41_imag += m41[i+1];
 8001ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8001ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eea:	3302      	adds	r3, #2
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <moment41+0x2cc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	005a      	lsls	r2, r3, #1
 8001ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d8dd      	bhi.n	8001eb6 <moment41+0x24e>
	}
	m41_real_mean = m41_real / blockSize;
 8001efa:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001efe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f06:	edc7 7a03 	vstr	s15, [r7, #12]
	m41_imag_mean = m41_imag / blockSize;
 8001f0a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f0e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f16:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m41_real_mean;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]
	out[1] = m41_imag_mean;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	3304      	adds	r3, #4
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	46ad      	mov	sp, r5
	// *out = sqrtf(m41_real_mean*m41_real_mean + m41_imag_mean*m41_imag_mean);
}
 8001f2a:	bf00      	nop
 8001f2c:	3748      	adds	r7, #72	; 0x48
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	0800c17c 	.word	0x0800c17c

08001f38 <moment42>:

void moment42(float32_t in[], float32_t out[]){
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	b092      	sub	sp, #72	; 0x48
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	466b      	mov	r3, sp
 8001f44:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8001f46:	4baf      	ldr	r3, [pc, #700]	; (8002204 <moment42+0x2cc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f52:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8001f56:	4bab      	ldr	r3, [pc, #684]	; (8002204 <moment42+0x2cc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f60:	4ba8      	ldr	r3, [pc, #672]	; (8002204 <moment42+0x2cc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	f04f 0400 	mov.w	r4, #0
 8001f74:	0154      	lsls	r4, r2, #5
 8001f76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f7a:	014b      	lsls	r3, r1, #5
 8001f7c:	4ba1      	ldr	r3, [pc, #644]	; (8002204 <moment42+0x2cc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4619      	mov	r1, r3
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	f04f 0400 	mov.w	r4, #0
 8001f90:	0154      	lsls	r4, r2, #5
 8001f92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f96:	014b      	lsls	r3, r1, #5
 8001f98:	4b9a      	ldr	r3, [pc, #616]	; (8002204 <moment42+0x2cc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	3303      	adds	r3, #3
 8001fa0:	3307      	adds	r3, #7
 8001fa2:	08db      	lsrs	r3, r3, #3
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	ebad 0d03 	sub.w	sp, sp, r3
 8001faa:	466b      	mov	r3, sp
 8001fac:	3303      	adds	r3, #3
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8001fb4:	4b93      	ldr	r3, [pc, #588]	; (8002204 <moment42+0x2cc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fbe:	4b91      	ldr	r3, [pc, #580]	; (8002204 <moment42+0x2cc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	0154      	lsls	r4, r2, #5
 8001fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd8:	014b      	lsls	r3, r1, #5
 8001fda:	4b8a      	ldr	r3, [pc, #552]	; (8002204 <moment42+0x2cc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	f04f 0400 	mov.w	r4, #0
 8001fee:	0154      	lsls	r4, r2, #5
 8001ff0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ff4:	014b      	lsls	r3, r1, #5
 8001ff6:	4b83      	ldr	r3, [pc, #524]	; (8002204 <moment42+0x2cc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	3307      	adds	r3, #7
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	ebad 0d03 	sub.w	sp, sp, r3
 8002008:	466b      	mov	r3, sp
 800200a:	3303      	adds	r3, #3
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 8002012:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <moment42+0x2cc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	3b01      	subs	r3, #1
 800201a:	647b      	str	r3, [r7, #68]	; 0x44
 800201c:	4b79      	ldr	r3, [pc, #484]	; (8002204 <moment42+0x2cc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	f04f 0400 	mov.w	r4, #0
 8002030:	0154      	lsls	r4, r2, #5
 8002032:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002036:	014b      	lsls	r3, r1, #5
 8002038:	4b72      	ldr	r3, [pc, #456]	; (8002204 <moment42+0x2cc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4619      	mov	r1, r3
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	f04f 0400 	mov.w	r4, #0
 800204c:	0154      	lsls	r4, r2, #5
 800204e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002052:	014b      	lsls	r3, r1, #5
 8002054:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <moment42+0x2cc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	3303      	adds	r3, #3
 800205c:	3307      	adds	r3, #7
 800205e:	08db      	lsrs	r3, r3, #3
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	ebad 0d03 	sub.w	sp, sp, r3
 8002066:	466b      	mov	r3, sp
 8002068:	3303      	adds	r3, #3
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	623b      	str	r3, [r7, #32]
	float32_t m31[frameSize]; // in^3
 8002070:	4b64      	ldr	r3, [pc, #400]	; (8002204 <moment42+0x2cc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3b01      	subs	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	4b62      	ldr	r3, [pc, #392]	; (8002204 <moment42+0x2cc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	f04f 0400 	mov.w	r4, #0
 800208a:	0154      	lsls	r4, r2, #5
 800208c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002090:	014b      	lsls	r3, r1, #5
 8002092:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <moment42+0x2cc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	f04f 0400 	mov.w	r4, #0
 80020a4:	0154      	lsls	r4, r2, #5
 80020a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020aa:	014b      	lsls	r3, r1, #5
 80020ac:	4b55      	ldr	r3, [pc, #340]	; (8002204 <moment42+0x2cc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	3303      	adds	r3, #3
 80020b4:	3307      	adds	r3, #7
 80020b6:	08db      	lsrs	r3, r3, #3
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	ebad 0d03 	sub.w	sp, sp, r3
 80020be:	466b      	mov	r3, sp
 80020c0:	3303      	adds	r3, #3
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
	float32_t m42[frameSize]; // in^4
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <moment42+0x2cc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <moment42+0x2cc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	f04f 0400 	mov.w	r4, #0
 80020e2:	0154      	lsls	r4, r2, #5
 80020e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020e8:	014b      	lsls	r3, r1, #5
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <moment42+0x2cc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	f04f 0400 	mov.w	r4, #0
 80020fc:	0154      	lsls	r4, r2, #5
 80020fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002102:	014b      	lsls	r3, r1, #5
 8002104:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <moment42+0x2cc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	3303      	adds	r3, #3
 800210c:	3307      	adds	r3, #7
 800210e:	08db      	lsrs	r3, r3, #3
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	ebad 0d03 	sub.w	sp, sp, r3
 8002116:	466b      	mov	r3, sp
 8002118:	3303      	adds	r3, #3
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	613b      	str	r3, [r7, #16]
	float32_t m42_real = 0.0f, m42_imag = 0.0f;
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m42_real_mean = 0.0f, m42_imag_mean = 0.0f;
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <moment42+0x2cc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	461a      	mov	r2, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f008 f9d8 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002148:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800214a:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <moment42+0x2cc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f009 f8a3 	bl	800b29c <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <moment42+0x2cc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f008 ff14 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_conj[0], &m31[0], frameSize);
 8002164:	6a38      	ldr	r0, [r7, #32]
 8002166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <moment42+0x2cc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f008 ff0d 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m31[0], &in_conj[0], &m42[0], frameSize);
 8002172:	69b8      	ldr	r0, [r7, #24]
 8002174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <moment42+0x2cc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f008 ff06 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002184:	e01b      	b.n	80021be <moment42+0x286>
		m42_real += m42[i];
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m42_imag += m42[i+1];
 800219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a0:	3301      	adds	r3, #1
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80021b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	3302      	adds	r3, #2
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <moment42+0x2cc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	005a      	lsls	r2, r3, #1
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d8dd      	bhi.n	8002186 <moment42+0x24e>
	}
	m42_real_mean = m42_real / blockSize;
 80021ca:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80021ce:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80021d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d6:	edc7 7a03 	vstr	s15, [r7, #12]
	m42_imag_mean = m42_imag / blockSize;
 80021da:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80021de:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80021e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e6:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m42_real_mean;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	601a      	str	r2, [r3, #0]
	out[1] = m42_imag_mean;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	3304      	adds	r3, #4
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	46ad      	mov	sp, r5
	// *out = sqrtf(m42_real_mean*m42_real_mean + m42_imag_mean*m42_imag_mean);
}
 80021fa:	bf00      	nop
 80021fc:	3748      	adds	r7, #72	; 0x48
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	0800c17c 	.word	0x0800c17c

08002208 <moment43>:

void moment43(float32_t in[], float32_t out[]){
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b092      	sub	sp, #72	; 0x48
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	466b      	mov	r3, sp
 8002214:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8002216:	4baf      	ldr	r3, [pc, #700]	; (80024d4 <moment43+0x2cc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002222:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 8002226:	4bab      	ldr	r3, [pc, #684]	; (80024d4 <moment43+0x2cc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	3b01      	subs	r3, #1
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
 8002230:	4ba8      	ldr	r3, [pc, #672]	; (80024d4 <moment43+0x2cc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4619      	mov	r1, r3
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	f04f 0400 	mov.w	r4, #0
 8002244:	0154      	lsls	r4, r2, #5
 8002246:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800224a:	014b      	lsls	r3, r1, #5
 800224c:	4ba1      	ldr	r3, [pc, #644]	; (80024d4 <moment43+0x2cc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4619      	mov	r1, r3
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	f04f 0400 	mov.w	r4, #0
 8002260:	0154      	lsls	r4, r2, #5
 8002262:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002266:	014b      	lsls	r3, r1, #5
 8002268:	4b9a      	ldr	r3, [pc, #616]	; (80024d4 <moment43+0x2cc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	3303      	adds	r3, #3
 8002270:	3307      	adds	r3, #7
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	ebad 0d03 	sub.w	sp, sp, r3
 800227a:	466b      	mov	r3, sp
 800227c:	3303      	adds	r3, #3
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8002284:	4b93      	ldr	r3, [pc, #588]	; (80024d4 <moment43+0x2cc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	3b01      	subs	r3, #1
 800228c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228e:	4b91      	ldr	r3, [pc, #580]	; (80024d4 <moment43+0x2cc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4619      	mov	r1, r3
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	f04f 0400 	mov.w	r4, #0
 80022a2:	0154      	lsls	r4, r2, #5
 80022a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022a8:	014b      	lsls	r3, r1, #5
 80022aa:	4b8a      	ldr	r3, [pc, #552]	; (80024d4 <moment43+0x2cc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	f04f 0400 	mov.w	r4, #0
 80022be:	0154      	lsls	r4, r2, #5
 80022c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022c4:	014b      	lsls	r3, r1, #5
 80022c6:	4b83      	ldr	r3, [pc, #524]	; (80024d4 <moment43+0x2cc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	3303      	adds	r3, #3
 80022ce:	3307      	adds	r3, #7
 80022d0:	08db      	lsrs	r3, r3, #3
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	ebad 0d03 	sub.w	sp, sp, r3
 80022d8:	466b      	mov	r3, sp
 80022da:	3303      	adds	r3, #3
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m21[frameSize*2]; // in^2
 80022e2:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <moment43+0x2cc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	3b01      	subs	r3, #1
 80022ea:	647b      	str	r3, [r7, #68]	; 0x44
 80022ec:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <moment43+0x2cc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4619      	mov	r1, r3
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	f04f 0400 	mov.w	r4, #0
 8002300:	0154      	lsls	r4, r2, #5
 8002302:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002306:	014b      	lsls	r3, r1, #5
 8002308:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <moment43+0x2cc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4619      	mov	r1, r3
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	f04f 0400 	mov.w	r4, #0
 800231c:	0154      	lsls	r4, r2, #5
 800231e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002322:	014b      	lsls	r3, r1, #5
 8002324:	4b6b      	ldr	r3, [pc, #428]	; (80024d4 <moment43+0x2cc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	3303      	adds	r3, #3
 800232c:	3307      	adds	r3, #7
 800232e:	08db      	lsrs	r3, r3, #3
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	ebad 0d03 	sub.w	sp, sp, r3
 8002336:	466b      	mov	r3, sp
 8002338:	3303      	adds	r3, #3
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	623b      	str	r3, [r7, #32]
	float32_t m32[frameSize]; // in^3
 8002340:	4b64      	ldr	r3, [pc, #400]	; (80024d4 <moment43+0x2cc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3b01      	subs	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	4b62      	ldr	r3, [pc, #392]	; (80024d4 <moment43+0x2cc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	f04f 0400 	mov.w	r4, #0
 800235a:	0154      	lsls	r4, r2, #5
 800235c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002360:	014b      	lsls	r3, r1, #5
 8002362:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <moment43+0x2cc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	f04f 0400 	mov.w	r4, #0
 8002374:	0154      	lsls	r4, r2, #5
 8002376:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800237a:	014b      	lsls	r3, r1, #5
 800237c:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <moment43+0x2cc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3303      	adds	r3, #3
 8002384:	3307      	adds	r3, #7
 8002386:	08db      	lsrs	r3, r3, #3
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	ebad 0d03 	sub.w	sp, sp, r3
 800238e:	466b      	mov	r3, sp
 8002390:	3303      	adds	r3, #3
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
	float32_t m43[frameSize]; // in^4
 8002398:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <moment43+0x2cc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3b01      	subs	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	4b4c      	ldr	r3, [pc, #304]	; (80024d4 <moment43+0x2cc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	f04f 0400 	mov.w	r4, #0
 80023b2:	0154      	lsls	r4, r2, #5
 80023b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023b8:	014b      	lsls	r3, r1, #5
 80023ba:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <moment43+0x2cc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	f04f 0400 	mov.w	r4, #0
 80023cc:	0154      	lsls	r4, r2, #5
 80023ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023d2:	014b      	lsls	r3, r1, #5
 80023d4:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <moment43+0x2cc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	3303      	adds	r3, #3
 80023dc:	3307      	adds	r3, #7
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	ebad 0d03 	sub.w	sp, sp, r3
 80023e6:	466b      	mov	r3, sp
 80023e8:	3303      	adds	r3, #3
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
	float32_t m43_real = 0.0f, m43_imag = 0.0f;
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m43_real_mean = 0.0f, m43_imag_mean = 0.0f;
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002408:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800240a:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <moment43+0x2cc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	461a      	mov	r2, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f008 f870 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002418:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800241a:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <moment43+0x2cc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f008 ff3b 	bl	800b29c <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 8002426:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002428:	6a3a      	ldr	r2, [r7, #32]
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <moment43+0x2cc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f008 fdac 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m21[0], &in_conj[0], &m32[0], frameSize);
 8002434:	6a38      	ldr	r0, [r7, #32]
 8002436:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <moment43+0x2cc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f008 fda5 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m32[0], &in_conj[0], &m43[0], frameSize);
 8002442:	69b8      	ldr	r0, [r7, #24]
 8002444:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <moment43+0x2cc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f008 fd9e 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002454:	e01b      	b.n	800248e <moment43+0x286>
		m43_real += m43[i];
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m43_imag += m43[i+1];
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	3301      	adds	r3, #1
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002484:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	3302      	adds	r3, #2
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <moment43+0x2cc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	005a      	lsls	r2, r3, #1
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	429a      	cmp	r2, r3
 8002498:	d8dd      	bhi.n	8002456 <moment43+0x24e>
	}
	m43_real_mean = m43_real / blockSize;
 800249a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800249e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a6:	edc7 7a03 	vstr	s15, [r7, #12]
	m43_imag_mean = m43_imag / blockSize;
 80024aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80024ae:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b6:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m43_real_mean;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	601a      	str	r2, [r3, #0]
	out[1] = m43_imag_mean;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	3304      	adds	r3, #4
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	46ad      	mov	sp, r5
	// *out = sqrtf(m43_real_mean*m43_real_mean + m43_imag_mean*m43_imag_mean);
}
 80024ca:	bf00      	nop
 80024cc:	3748      	adds	r7, #72	; 0x48
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bdb0      	pop	{r4, r5, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	0800c17c 	.word	0x0800c17c

080024d8 <moment60>:

void moment60(float32_t in[], float32_t out[]){
 80024d8:	b5b0      	push	{r4, r5, r7, lr}
 80024da:	b094      	sub	sp, #80	; 0x50
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	466b      	mov	r3, sp
 80024e4:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 80024e6:	4ba8      	ldr	r3, [pc, #672]	; (8002788 <moment60+0x2b0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float32_t in_cp[frameSize*2];
 80024f6:	4ba4      	ldr	r3, [pc, #656]	; (8002788 <moment60+0x2b0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002500:	4ba1      	ldr	r3, [pc, #644]	; (8002788 <moment60+0x2b0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4619      	mov	r1, r3
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	f04f 0400 	mov.w	r4, #0
 8002514:	0154      	lsls	r4, r2, #5
 8002516:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800251a:	014b      	lsls	r3, r1, #5
 800251c:	4b9a      	ldr	r3, [pc, #616]	; (8002788 <moment60+0x2b0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4619      	mov	r1, r3
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	f04f 0400 	mov.w	r4, #0
 8002530:	0154      	lsls	r4, r2, #5
 8002532:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002536:	014b      	lsls	r3, r1, #5
 8002538:	4b93      	ldr	r3, [pc, #588]	; (8002788 <moment60+0x2b0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	3303      	adds	r3, #3
 8002540:	3307      	adds	r3, #7
 8002542:	08db      	lsrs	r3, r3, #3
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	ebad 0d03 	sub.w	sp, sp, r3
 800254a:	466b      	mov	r3, sp
 800254c:	3303      	adds	r3, #3
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t m20[frameSize*2]; // in^2
 8002554:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <moment60+0x2b0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	3b01      	subs	r3, #1
 800255c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800255e:	4b8a      	ldr	r3, [pc, #552]	; (8002788 <moment60+0x2b0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4619      	mov	r1, r3
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	f04f 0400 	mov.w	r4, #0
 8002572:	0154      	lsls	r4, r2, #5
 8002574:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002578:	014b      	lsls	r3, r1, #5
 800257a:	4b83      	ldr	r3, [pc, #524]	; (8002788 <moment60+0x2b0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4619      	mov	r1, r3
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	f04f 0400 	mov.w	r4, #0
 800258e:	0154      	lsls	r4, r2, #5
 8002590:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002594:	014b      	lsls	r3, r1, #5
 8002596:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <moment60+0x2b0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	3303      	adds	r3, #3
 800259e:	3307      	adds	r3, #7
 80025a0:	08db      	lsrs	r3, r3, #3
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	ebad 0d03 	sub.w	sp, sp, r3
 80025a8:	466b      	mov	r3, sp
 80025aa:	3303      	adds	r3, #3
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m30[frameSize]; // in^3
 80025b2:	4b75      	ldr	r3, [pc, #468]	; (8002788 <moment60+0x2b0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ba:	4b73      	ldr	r3, [pc, #460]	; (8002788 <moment60+0x2b0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4619      	mov	r1, r3
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	f04f 0400 	mov.w	r4, #0
 80025cc:	0154      	lsls	r4, r2, #5
 80025ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025d2:	014b      	lsls	r3, r1, #5
 80025d4:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <moment60+0x2b0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	f04f 0400 	mov.w	r4, #0
 80025e6:	0154      	lsls	r4, r2, #5
 80025e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025ec:	014b      	lsls	r3, r1, #5
 80025ee:	4b66      	ldr	r3, [pc, #408]	; (8002788 <moment60+0x2b0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	3303      	adds	r3, #3
 80025f6:	3307      	adds	r3, #7
 80025f8:	08db      	lsrs	r3, r3, #3
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	ebad 0d03 	sub.w	sp, sp, r3
 8002600:	466b      	mov	r3, sp
 8002602:	3303      	adds	r3, #3
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m40[frameSize]; // in^4
 800260a:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <moment60+0x2b0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3b01      	subs	r3, #1
 8002610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <moment60+0x2b0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	f04f 0400 	mov.w	r4, #0
 8002624:	0154      	lsls	r4, r2, #5
 8002626:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800262a:	014b      	lsls	r3, r1, #5
 800262c:	4b56      	ldr	r3, [pc, #344]	; (8002788 <moment60+0x2b0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	f04f 0400 	mov.w	r4, #0
 800263e:	0154      	lsls	r4, r2, #5
 8002640:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002644:	014b      	lsls	r3, r1, #5
 8002646:	4b50      	ldr	r3, [pc, #320]	; (8002788 <moment60+0x2b0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	3303      	adds	r3, #3
 800264e:	3307      	adds	r3, #7
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	ebad 0d03 	sub.w	sp, sp, r3
 8002658:	466b      	mov	r3, sp
 800265a:	3303      	adds	r3, #3
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	623b      	str	r3, [r7, #32]
	float32_t m50[frameSize]; // in^5
 8002662:	4b49      	ldr	r3, [pc, #292]	; (8002788 <moment60+0x2b0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <moment60+0x2b0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	f04f 0400 	mov.w	r4, #0
 800267c:	0154      	lsls	r4, r2, #5
 800267e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002682:	014b      	lsls	r3, r1, #5
 8002684:	4b40      	ldr	r3, [pc, #256]	; (8002788 <moment60+0x2b0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	f04f 0400 	mov.w	r4, #0
 8002696:	0154      	lsls	r4, r2, #5
 8002698:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800269c:	014b      	lsls	r3, r1, #5
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <moment60+0x2b0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	3303      	adds	r3, #3
 80026a6:	3307      	adds	r3, #7
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	ebad 0d03 	sub.w	sp, sp, r3
 80026b0:	466b      	mov	r3, sp
 80026b2:	3303      	adds	r3, #3
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
	float32_t m60[frameSize]; // in^6
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <moment60+0x2b0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3b01      	subs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <moment60+0x2b0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	f04f 0400 	mov.w	r4, #0
 80026d4:	0154      	lsls	r4, r2, #5
 80026d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026da:	014b      	lsls	r3, r1, #5
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <moment60+0x2b0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	f04f 0400 	mov.w	r4, #0
 80026ee:	0154      	lsls	r4, r2, #5
 80026f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026f4:	014b      	lsls	r3, r1, #5
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <moment60+0x2b0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	3303      	adds	r3, #3
 80026fe:	3307      	adds	r3, #7
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	ebad 0d03 	sub.w	sp, sp, r3
 8002708:	466b      	mov	r3, sp
 800270a:	3303      	adds	r3, #3
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	613b      	str	r3, [r7, #16]
	float32_t m60_real = 0.0f, m60_imag = 0.0f;
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m60_real_mean = 0.0f, m60_imag_mean = 0.0f;
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 800272a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <moment60+0x2b0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	461a      	mov	r2, r3
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f007 fedf 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 800273a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800273c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <moment60+0x2b0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f008 fc22 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002748:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800274a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800274c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <moment60+0x2b0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f008 fc1b 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8002756:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002758:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <moment60+0x2b0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f008 fc14 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 8002764:	6a38      	ldr	r0, [r7, #32]
 8002766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <moment60+0x2b0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f008 fc0d 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_cp[0], &m60[0], frameSize);
 8002772:	69b8      	ldr	r0, [r7, #24]
 8002774:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <moment60+0x2b0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f008 fc06 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002784:	e01e      	b.n	80027c4 <moment60+0x2ec>
 8002786:	bf00      	nop
 8002788:	0800c17c 	.word	0x0800c17c
		m60_real += m60[i];
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800279c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m60_imag += m60[i+1];
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	3301      	adds	r3, #1
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	3302      	adds	r3, #2
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <moment60+0x330>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d8dd      	bhi.n	800278c <moment60+0x2b4>
	}
	m60_real_mean = m60_real / blockSize;
 80027d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80027d4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80027d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027dc:	edc7 7a03 	vstr	s15, [r7, #12]
	m60_imag_mean = m60_imag / blockSize;
 80027e0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80027e4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80027e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ec:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m60_real_mean;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	601a      	str	r2, [r3, #0]
	out[1] = m60_imag_mean;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	3304      	adds	r3, #4
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	46ad      	mov	sp, r5
	// *out = sqrtf(m60_real_mean*m60_real_mean + m60_imag_mean*m60_imag_mean);
}
 8002800:	bf00      	nop
 8002802:	3750      	adds	r7, #80	; 0x50
 8002804:	46bd      	mov	sp, r7
 8002806:	bdb0      	pop	{r4, r5, r7, pc}
 8002808:	0800c17c 	.word	0x0800c17c

0800280c <moment61>:

void moment61(float32_t in[], float32_t out[]){
 800280c:	b5b0      	push	{r4, r5, r7, lr}
 800280e:	b096      	sub	sp, #88	; 0x58
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	466b      	mov	r3, sp
 8002818:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 800281a:	4bc3      	ldr	r3, [pc, #780]	; (8002b28 <moment61+0x31c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002826:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float32_t in_cp[frameSize*2];
 800282a:	4bbf      	ldr	r3, [pc, #764]	; (8002b28 <moment61+0x31c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	63bb      	str	r3, [r7, #56]	; 0x38
 8002834:	4bbc      	ldr	r3, [pc, #752]	; (8002b28 <moment61+0x31c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	f04f 0400 	mov.w	r4, #0
 8002848:	0154      	lsls	r4, r2, #5
 800284a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800284e:	014b      	lsls	r3, r1, #5
 8002850:	4bb5      	ldr	r3, [pc, #724]	; (8002b28 <moment61+0x31c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4619      	mov	r1, r3
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	f04f 0400 	mov.w	r4, #0
 8002864:	0154      	lsls	r4, r2, #5
 8002866:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800286a:	014b      	lsls	r3, r1, #5
 800286c:	4bae      	ldr	r3, [pc, #696]	; (8002b28 <moment61+0x31c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	3303      	adds	r3, #3
 8002874:	3307      	adds	r3, #7
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	ebad 0d03 	sub.w	sp, sp, r3
 800287e:	466b      	mov	r3, sp
 8002880:	3303      	adds	r3, #3
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
	float32_t in_conj[frameSize*2];
 8002888:	4ba7      	ldr	r3, [pc, #668]	; (8002b28 <moment61+0x31c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	3b01      	subs	r3, #1
 8002890:	643b      	str	r3, [r7, #64]	; 0x40
 8002892:	4ba5      	ldr	r3, [pc, #660]	; (8002b28 <moment61+0x31c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	f04f 0400 	mov.w	r4, #0
 80028a6:	0154      	lsls	r4, r2, #5
 80028a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ac:	014b      	lsls	r3, r1, #5
 80028ae:	4b9e      	ldr	r3, [pc, #632]	; (8002b28 <moment61+0x31c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	f04f 0400 	mov.w	r4, #0
 80028c2:	0154      	lsls	r4, r2, #5
 80028c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028c8:	014b      	lsls	r3, r1, #5
 80028ca:	4b97      	ldr	r3, [pc, #604]	; (8002b28 <moment61+0x31c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3303      	adds	r3, #3
 80028d2:	3307      	adds	r3, #7
 80028d4:	08db      	lsrs	r3, r3, #3
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	ebad 0d03 	sub.w	sp, sp, r3
 80028dc:	466b      	mov	r3, sp
 80028de:	3303      	adds	r3, #3
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44
	float32_t m20[frameSize*2]; // in^2
 80028e6:	4b90      	ldr	r3, [pc, #576]	; (8002b28 <moment61+0x31c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	3b01      	subs	r3, #1
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80028f0:	4b8d      	ldr	r3, [pc, #564]	; (8002b28 <moment61+0x31c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4619      	mov	r1, r3
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	f04f 0400 	mov.w	r4, #0
 8002904:	0154      	lsls	r4, r2, #5
 8002906:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800290a:	014b      	lsls	r3, r1, #5
 800290c:	4b86      	ldr	r3, [pc, #536]	; (8002b28 <moment61+0x31c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4619      	mov	r1, r3
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f04f 0400 	mov.w	r4, #0
 8002920:	0154      	lsls	r4, r2, #5
 8002922:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002926:	014b      	lsls	r3, r1, #5
 8002928:	4b7f      	ldr	r3, [pc, #508]	; (8002b28 <moment61+0x31c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	3303      	adds	r3, #3
 8002930:	3307      	adds	r3, #7
 8002932:	08db      	lsrs	r3, r3, #3
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	ebad 0d03 	sub.w	sp, sp, r3
 800293a:	466b      	mov	r3, sp
 800293c:	3303      	adds	r3, #3
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
	float32_t m30[frameSize]; // in^3
 8002944:	4b78      	ldr	r3, [pc, #480]	; (8002b28 <moment61+0x31c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	653b      	str	r3, [r7, #80]	; 0x50
 800294c:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <moment61+0x31c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	f04f 0400 	mov.w	r4, #0
 800295e:	0154      	lsls	r4, r2, #5
 8002960:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002964:	014b      	lsls	r3, r1, #5
 8002966:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <moment61+0x31c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f04f 0400 	mov.w	r4, #0
 8002978:	0154      	lsls	r4, r2, #5
 800297a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800297e:	014b      	lsls	r3, r1, #5
 8002980:	4b69      	ldr	r3, [pc, #420]	; (8002b28 <moment61+0x31c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	3303      	adds	r3, #3
 8002988:	3307      	adds	r3, #7
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	ebad 0d03 	sub.w	sp, sp, r3
 8002992:	466b      	mov	r3, sp
 8002994:	3303      	adds	r3, #3
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	657b      	str	r3, [r7, #84]	; 0x54
	float32_t m40[frameSize]; // in^4
 800299c:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <moment61+0x31c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
 80029a4:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <moment61+0x31c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	0154      	lsls	r4, r2, #5
 80029b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029bc:	014b      	lsls	r3, r1, #5
 80029be:	4b5a      	ldr	r3, [pc, #360]	; (8002b28 <moment61+0x31c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	0154      	lsls	r4, r2, #5
 80029d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029d6:	014b      	lsls	r3, r1, #5
 80029d8:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <moment61+0x31c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	3303      	adds	r3, #3
 80029e0:	3307      	adds	r3, #7
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	ebad 0d03 	sub.w	sp, sp, r3
 80029ea:	466b      	mov	r3, sp
 80029ec:	3303      	adds	r3, #3
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	623b      	str	r3, [r7, #32]
	float32_t m50[frameSize]; // in^5
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <moment61+0x31c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <moment61+0x31c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	f04f 0400 	mov.w	r4, #0
 8002a0e:	0154      	lsls	r4, r2, #5
 8002a10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a14:	014b      	lsls	r3, r1, #5
 8002a16:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <moment61+0x31c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	f04f 0400 	mov.w	r4, #0
 8002a28:	0154      	lsls	r4, r2, #5
 8002a2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a2e:	014b      	lsls	r3, r1, #5
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <moment61+0x31c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	3303      	adds	r3, #3
 8002a38:	3307      	adds	r3, #7
 8002a3a:	08db      	lsrs	r3, r3, #3
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	ebad 0d03 	sub.w	sp, sp, r3
 8002a42:	466b      	mov	r3, sp
 8002a44:	3303      	adds	r3, #3
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	61bb      	str	r3, [r7, #24]
	float32_t m61[frameSize]; // in^6
 8002a4c:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <moment61+0x31c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <moment61+0x31c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	f04f 0400 	mov.w	r4, #0
 8002a66:	0154      	lsls	r4, r2, #5
 8002a68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a6c:	014b      	lsls	r3, r1, #5
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <moment61+0x31c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	f04f 0400 	mov.w	r4, #0
 8002a80:	0154      	lsls	r4, r2, #5
 8002a82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a86:	014b      	lsls	r3, r1, #5
 8002a88:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <moment61+0x31c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	3303      	adds	r3, #3
 8002a90:	3307      	adds	r3, #7
 8002a92:	08db      	lsrs	r3, r3, #3
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	ebad 0d03 	sub.w	sp, sp, r3
 8002a9a:	466b      	mov	r3, sp
 8002a9c:	3303      	adds	r3, #3
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	613b      	str	r3, [r7, #16]
	float32_t m61_real = 0.0f, m61_imag = 0.0f;
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m61_real_mean = 0.0f, m61_imag_mean = 0.0f;
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <moment61+0x31c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f007 fd16 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002acc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <moment61+0x31c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f008 fbe1 	bl	800b29c <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002adc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <moment61+0x31c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f008 fa52 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002ae8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002aea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <moment61+0x31c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f008 fa4b 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8002af6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002af8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002afa:	6a3a      	ldr	r2, [r7, #32]
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <moment61+0x31c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f008 fa44 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 8002b04:	6a38      	ldr	r0, [r7, #32]
 8002b06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <moment61+0x31c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f008 fa3d 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_conj[0], &m61[0], frameSize);
 8002b12:	69b8      	ldr	r0, [r7, #24]
 8002b14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <moment61+0x31c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f008 fa36 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002b20:	2300      	movs	r3, #0
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
 8002b24:	e01e      	b.n	8002b64 <moment61+0x358>
 8002b26:	bf00      	nop
 8002b28:	0800c17c 	.word	0x0800c17c
		m61_real += m61[i];
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b40:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m61_imag += m61[i+1];
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	3301      	adds	r3, #1
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	3302      	adds	r3, #2
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <moment61+0x39c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	005a      	lsls	r2, r3, #1
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d8dd      	bhi.n	8002b2c <moment61+0x320>
	}
	m61_real_mean = m61_real / blockSize;
 8002b70:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002b74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b7c:	edc7 7a03 	vstr	s15, [r7, #12]
	m61_imag_mean = m61_imag / blockSize;
 8002b80:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002b84:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b8c:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m61_real_mean;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]
	out[1] = m61_imag_mean;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	46ad      	mov	sp, r5
	// *out = sqrtf(m61_real_mean*m61_real_mean + m61_imag_mean*m61_imag_mean);
}
 8002ba0:	bf00      	nop
 8002ba2:	3758      	adds	r7, #88	; 0x58
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba8:	0800c17c 	.word	0x0800c17c

08002bac <moment62>:

void moment62(float32_t in[], float32_t out[]){
 8002bac:	b5b0      	push	{r4, r5, r7, lr}
 8002bae:	b096      	sub	sp, #88	; 0x58
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	466b      	mov	r3, sp
 8002bb8:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8002bba:	4bc3      	ldr	r3, [pc, #780]	; (8002ec8 <moment62+0x31c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float32_t in_cp[frameSize*2];
 8002bca:	4bbf      	ldr	r3, [pc, #764]	; (8002ec8 <moment62+0x31c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd4:	4bbc      	ldr	r3, [pc, #752]	; (8002ec8 <moment62+0x31c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	f04f 0400 	mov.w	r4, #0
 8002be8:	0154      	lsls	r4, r2, #5
 8002bea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bee:	014b      	lsls	r3, r1, #5
 8002bf0:	4bb5      	ldr	r3, [pc, #724]	; (8002ec8 <moment62+0x31c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	0154      	lsls	r4, r2, #5
 8002c06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c0a:	014b      	lsls	r3, r1, #5
 8002c0c:	4bae      	ldr	r3, [pc, #696]	; (8002ec8 <moment62+0x31c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	3303      	adds	r3, #3
 8002c14:	3307      	adds	r3, #7
 8002c16:	08db      	lsrs	r3, r3, #3
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	ebad 0d03 	sub.w	sp, sp, r3
 8002c1e:	466b      	mov	r3, sp
 8002c20:	3303      	adds	r3, #3
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	63fb      	str	r3, [r7, #60]	; 0x3c
	float32_t in_conj[frameSize*2];
 8002c28:	4ba7      	ldr	r3, [pc, #668]	; (8002ec8 <moment62+0x31c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	643b      	str	r3, [r7, #64]	; 0x40
 8002c32:	4ba5      	ldr	r3, [pc, #660]	; (8002ec8 <moment62+0x31c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	f04f 0400 	mov.w	r4, #0
 8002c46:	0154      	lsls	r4, r2, #5
 8002c48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c4c:	014b      	lsls	r3, r1, #5
 8002c4e:	4b9e      	ldr	r3, [pc, #632]	; (8002ec8 <moment62+0x31c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4619      	mov	r1, r3
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	f04f 0400 	mov.w	r4, #0
 8002c62:	0154      	lsls	r4, r2, #5
 8002c64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c68:	014b      	lsls	r3, r1, #5
 8002c6a:	4b97      	ldr	r3, [pc, #604]	; (8002ec8 <moment62+0x31c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	3303      	adds	r3, #3
 8002c72:	3307      	adds	r3, #7
 8002c74:	08db      	lsrs	r3, r3, #3
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	ebad 0d03 	sub.w	sp, sp, r3
 8002c7c:	466b      	mov	r3, sp
 8002c7e:	3303      	adds	r3, #3
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
	float32_t m20[frameSize*2]; // in^2
 8002c86:	4b90      	ldr	r3, [pc, #576]	; (8002ec8 <moment62+0x31c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c90:	4b8d      	ldr	r3, [pc, #564]	; (8002ec8 <moment62+0x31c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	f04f 0400 	mov.w	r4, #0
 8002ca4:	0154      	lsls	r4, r2, #5
 8002ca6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002caa:	014b      	lsls	r3, r1, #5
 8002cac:	4b86      	ldr	r3, [pc, #536]	; (8002ec8 <moment62+0x31c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	f04f 0400 	mov.w	r4, #0
 8002cc0:	0154      	lsls	r4, r2, #5
 8002cc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cc6:	014b      	lsls	r3, r1, #5
 8002cc8:	4b7f      	ldr	r3, [pc, #508]	; (8002ec8 <moment62+0x31c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	3303      	adds	r3, #3
 8002cd0:	3307      	adds	r3, #7
 8002cd2:	08db      	lsrs	r3, r3, #3
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	ebad 0d03 	sub.w	sp, sp, r3
 8002cda:	466b      	mov	r3, sp
 8002cdc:	3303      	adds	r3, #3
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
	float32_t m30[frameSize]; // in^3
 8002ce4:	4b78      	ldr	r3, [pc, #480]	; (8002ec8 <moment62+0x31c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	653b      	str	r3, [r7, #80]	; 0x50
 8002cec:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <moment62+0x31c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	f04f 0400 	mov.w	r4, #0
 8002cfe:	0154      	lsls	r4, r2, #5
 8002d00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d04:	014b      	lsls	r3, r1, #5
 8002d06:	4b70      	ldr	r3, [pc, #448]	; (8002ec8 <moment62+0x31c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	0154      	lsls	r4, r2, #5
 8002d1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d1e:	014b      	lsls	r3, r1, #5
 8002d20:	4b69      	ldr	r3, [pc, #420]	; (8002ec8 <moment62+0x31c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3303      	adds	r3, #3
 8002d28:	3307      	adds	r3, #7
 8002d2a:	08db      	lsrs	r3, r3, #3
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	ebad 0d03 	sub.w	sp, sp, r3
 8002d32:	466b      	mov	r3, sp
 8002d34:	3303      	adds	r3, #3
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	657b      	str	r3, [r7, #84]	; 0x54
	float32_t m40[frameSize]; // in^4
 8002d3c:	4b62      	ldr	r3, [pc, #392]	; (8002ec8 <moment62+0x31c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	4b60      	ldr	r3, [pc, #384]	; (8002ec8 <moment62+0x31c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	f04f 0400 	mov.w	r4, #0
 8002d56:	0154      	lsls	r4, r2, #5
 8002d58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d5c:	014b      	lsls	r3, r1, #5
 8002d5e:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <moment62+0x31c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	f04f 0400 	mov.w	r4, #0
 8002d70:	0154      	lsls	r4, r2, #5
 8002d72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d76:	014b      	lsls	r3, r1, #5
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <moment62+0x31c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	3303      	adds	r3, #3
 8002d80:	3307      	adds	r3, #7
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	ebad 0d03 	sub.w	sp, sp, r3
 8002d8a:	466b      	mov	r3, sp
 8002d8c:	3303      	adds	r3, #3
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	623b      	str	r3, [r7, #32]
	float32_t m51[frameSize]; // in^5
 8002d94:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <moment62+0x31c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <moment62+0x31c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4619      	mov	r1, r3
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	f04f 0400 	mov.w	r4, #0
 8002dae:	0154      	lsls	r4, r2, #5
 8002db0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002db4:	014b      	lsls	r3, r1, #5
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <moment62+0x31c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	f04f 0400 	mov.w	r4, #0
 8002dc8:	0154      	lsls	r4, r2, #5
 8002dca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dce:	014b      	lsls	r3, r1, #5
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <moment62+0x31c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	3307      	adds	r3, #7
 8002dda:	08db      	lsrs	r3, r3, #3
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	ebad 0d03 	sub.w	sp, sp, r3
 8002de2:	466b      	mov	r3, sp
 8002de4:	3303      	adds	r3, #3
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
	float32_t m62[frameSize]; // in^6
 8002dec:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <moment62+0x31c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <moment62+0x31c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f04f 0400 	mov.w	r4, #0
 8002e06:	0154      	lsls	r4, r2, #5
 8002e08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e0c:	014b      	lsls	r3, r1, #5
 8002e0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <moment62+0x31c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4619      	mov	r1, r3
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	f04f 0400 	mov.w	r4, #0
 8002e20:	0154      	lsls	r4, r2, #5
 8002e22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e26:	014b      	lsls	r3, r1, #5
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <moment62+0x31c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	3303      	adds	r3, #3
 8002e30:	3307      	adds	r3, #7
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	ebad 0d03 	sub.w	sp, sp, r3
 8002e3a:	466b      	mov	r3, sp
 8002e3c:	3303      	adds	r3, #3
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	613b      	str	r3, [r7, #16]
	float32_t m62_real = 0.0f, m62_imag = 0.0f;
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m62_real_mean = 0.0f, m62_imag_mean = 0.0f;
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002e5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <moment62+0x31c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	461a      	mov	r2, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f007 fb46 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002e6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e6e:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <moment62+0x31c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f008 fa11 	bl	800b29c <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002e7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <moment62+0x31c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f008 f882 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002e88:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002e8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <moment62+0x31c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f008 f87b 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8002e96:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e9a:	6a3a      	ldr	r2, [r7, #32]
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <moment62+0x31c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f008 f874 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_conj[0], &m51[0], frameSize);
 8002ea4:	6a38      	ldr	r0, [r7, #32]
 8002ea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <moment62+0x31c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f008 f86d 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m51[0], &in_conj[0], &m62[0], frameSize);
 8002eb2:	69b8      	ldr	r0, [r7, #24]
 8002eb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <moment62+0x31c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f008 f866 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec4:	e01e      	b.n	8002f04 <moment62+0x358>
 8002ec6:	bf00      	nop
 8002ec8:	0800c17c 	.word	0x0800c17c
		m62_real += m62[i];
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m62_imag += m62[i+1];
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002efa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	3302      	adds	r3, #2
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <moment62+0x39c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	005a      	lsls	r2, r3, #1
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d8dd      	bhi.n	8002ecc <moment62+0x320>
	}
	m62_real_mean = m62_real / blockSize;
 8002f10:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002f14:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f1c:	edc7 7a03 	vstr	s15, [r7, #12]
	m62_imag_mean = m62_imag / blockSize;
 8002f20:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002f24:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f2c:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m62_real_mean;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]
	out[1] = m62_imag_mean;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	46ad      	mov	sp, r5
	// *out = sqrtf(m62_real_mean*m62_real_mean + m62_imag_mean*m62_imag_mean);
}
 8002f40:	bf00      	nop
 8002f42:	3758      	adds	r7, #88	; 0x58
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bdb0      	pop	{r4, r5, r7, pc}
 8002f48:	0800c17c 	.word	0x0800c17c

08002f4c <moment63>:

void moment63(float32_t in[], float32_t out[]){
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b096      	sub	sp, #88	; 0x58
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	466b      	mov	r3, sp
 8002f58:	461d      	mov	r5, r3
	float32_t blockSize = (float32_t) frameSize;
 8002f5a:	4bc3      	ldr	r3, [pc, #780]	; (8003268 <moment63+0x31c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float32_t in_cp[frameSize*2];
 8002f6a:	4bbf      	ldr	r3, [pc, #764]	; (8003268 <moment63+0x31c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	3b01      	subs	r3, #1
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f74:	4bbc      	ldr	r3, [pc, #752]	; (8003268 <moment63+0x31c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	f04f 0400 	mov.w	r4, #0
 8002f88:	0154      	lsls	r4, r2, #5
 8002f8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f8e:	014b      	lsls	r3, r1, #5
 8002f90:	4bb5      	ldr	r3, [pc, #724]	; (8003268 <moment63+0x31c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4619      	mov	r1, r3
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	f04f 0400 	mov.w	r4, #0
 8002fa4:	0154      	lsls	r4, r2, #5
 8002fa6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002faa:	014b      	lsls	r3, r1, #5
 8002fac:	4bae      	ldr	r3, [pc, #696]	; (8003268 <moment63+0x31c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	3303      	adds	r3, #3
 8002fb4:	3307      	adds	r3, #7
 8002fb6:	08db      	lsrs	r3, r3, #3
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	ebad 0d03 	sub.w	sp, sp, r3
 8002fbe:	466b      	mov	r3, sp
 8002fc0:	3303      	adds	r3, #3
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	float32_t in_conj[frameSize*2];
 8002fc8:	4ba7      	ldr	r3, [pc, #668]	; (8003268 <moment63+0x31c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd2:	4ba5      	ldr	r3, [pc, #660]	; (8003268 <moment63+0x31c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	0154      	lsls	r4, r2, #5
 8002fe8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fec:	014b      	lsls	r3, r1, #5
 8002fee:	4b9e      	ldr	r3, [pc, #632]	; (8003268 <moment63+0x31c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	f04f 0400 	mov.w	r4, #0
 8003002:	0154      	lsls	r4, r2, #5
 8003004:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003008:	014b      	lsls	r3, r1, #5
 800300a:	4b97      	ldr	r3, [pc, #604]	; (8003268 <moment63+0x31c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	3303      	adds	r3, #3
 8003012:	3307      	adds	r3, #7
 8003014:	08db      	lsrs	r3, r3, #3
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	ebad 0d03 	sub.w	sp, sp, r3
 800301c:	466b      	mov	r3, sp
 800301e:	3303      	adds	r3, #3
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	647b      	str	r3, [r7, #68]	; 0x44
	float32_t m20[frameSize*2]; // in^2
 8003026:	4b90      	ldr	r3, [pc, #576]	; (8003268 <moment63+0x31c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003030:	4b8d      	ldr	r3, [pc, #564]	; (8003268 <moment63+0x31c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4619      	mov	r1, r3
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	f04f 0400 	mov.w	r4, #0
 8003044:	0154      	lsls	r4, r2, #5
 8003046:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800304a:	014b      	lsls	r3, r1, #5
 800304c:	4b86      	ldr	r3, [pc, #536]	; (8003268 <moment63+0x31c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4619      	mov	r1, r3
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	f04f 0400 	mov.w	r4, #0
 8003060:	0154      	lsls	r4, r2, #5
 8003062:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003066:	014b      	lsls	r3, r1, #5
 8003068:	4b7f      	ldr	r3, [pc, #508]	; (8003268 <moment63+0x31c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	3303      	adds	r3, #3
 8003070:	3307      	adds	r3, #7
 8003072:	08db      	lsrs	r3, r3, #3
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	ebad 0d03 	sub.w	sp, sp, r3
 800307a:	466b      	mov	r3, sp
 800307c:	3303      	adds	r3, #3
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
	float32_t m30[frameSize]; // in^3
 8003084:	4b78      	ldr	r3, [pc, #480]	; (8003268 <moment63+0x31c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3b01      	subs	r3, #1
 800308a:	653b      	str	r3, [r7, #80]	; 0x50
 800308c:	4b76      	ldr	r3, [pc, #472]	; (8003268 <moment63+0x31c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4619      	mov	r1, r3
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	f04f 0400 	mov.w	r4, #0
 800309e:	0154      	lsls	r4, r2, #5
 80030a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030a4:	014b      	lsls	r3, r1, #5
 80030a6:	4b70      	ldr	r3, [pc, #448]	; (8003268 <moment63+0x31c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4619      	mov	r1, r3
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	f04f 0400 	mov.w	r4, #0
 80030b8:	0154      	lsls	r4, r2, #5
 80030ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030be:	014b      	lsls	r3, r1, #5
 80030c0:	4b69      	ldr	r3, [pc, #420]	; (8003268 <moment63+0x31c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3303      	adds	r3, #3
 80030c8:	3307      	adds	r3, #7
 80030ca:	08db      	lsrs	r3, r3, #3
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	ebad 0d03 	sub.w	sp, sp, r3
 80030d2:	466b      	mov	r3, sp
 80030d4:	3303      	adds	r3, #3
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	657b      	str	r3, [r7, #84]	; 0x54
	float32_t m41[frameSize]; // in^4
 80030dc:	4b62      	ldr	r3, [pc, #392]	; (8003268 <moment63+0x31c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
 80030e4:	4b60      	ldr	r3, [pc, #384]	; (8003268 <moment63+0x31c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	f04f 0400 	mov.w	r4, #0
 80030f6:	0154      	lsls	r4, r2, #5
 80030f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030fc:	014b      	lsls	r3, r1, #5
 80030fe:	4b5a      	ldr	r3, [pc, #360]	; (8003268 <moment63+0x31c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	0154      	lsls	r4, r2, #5
 8003112:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003116:	014b      	lsls	r3, r1, #5
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <moment63+0x31c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	3303      	adds	r3, #3
 8003120:	3307      	adds	r3, #7
 8003122:	08db      	lsrs	r3, r3, #3
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	ebad 0d03 	sub.w	sp, sp, r3
 800312a:	466b      	mov	r3, sp
 800312c:	3303      	adds	r3, #3
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	623b      	str	r3, [r7, #32]
	float32_t m52[frameSize]; // in^5
 8003134:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <moment63+0x31c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3b01      	subs	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <moment63+0x31c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4619      	mov	r1, r3
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	f04f 0400 	mov.w	r4, #0
 800314e:	0154      	lsls	r4, r2, #5
 8003150:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003154:	014b      	lsls	r3, r1, #5
 8003156:	4b44      	ldr	r3, [pc, #272]	; (8003268 <moment63+0x31c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	0154      	lsls	r4, r2, #5
 800316a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800316e:	014b      	lsls	r3, r1, #5
 8003170:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <moment63+0x31c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	3303      	adds	r3, #3
 8003178:	3307      	adds	r3, #7
 800317a:	08db      	lsrs	r3, r3, #3
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	ebad 0d03 	sub.w	sp, sp, r3
 8003182:	466b      	mov	r3, sp
 8003184:	3303      	adds	r3, #3
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	61bb      	str	r3, [r7, #24]
	float32_t m63[frameSize]; // in^6
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <moment63+0x31c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3b01      	subs	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	4b34      	ldr	r3, [pc, #208]	; (8003268 <moment63+0x31c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4619      	mov	r1, r3
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	f04f 0400 	mov.w	r4, #0
 80031a6:	0154      	lsls	r4, r2, #5
 80031a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031ac:	014b      	lsls	r3, r1, #5
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <moment63+0x31c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4619      	mov	r1, r3
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	f04f 0400 	mov.w	r4, #0
 80031c0:	0154      	lsls	r4, r2, #5
 80031c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031c6:	014b      	lsls	r3, r1, #5
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <moment63+0x31c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	3303      	adds	r3, #3
 80031d0:	3307      	adds	r3, #7
 80031d2:	08db      	lsrs	r3, r3, #3
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	ebad 0d03 	sub.w	sp, sp, r3
 80031da:	466b      	mov	r3, sp
 80031dc:	3303      	adds	r3, #3
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	613b      	str	r3, [r7, #16]
	float32_t m63_real = 0.0f, m63_imag = 0.0f;
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m63_real_mean = 0.0f, m63_imag_mean = 0.0f;
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80031fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <moment63+0x31c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	461a      	mov	r2, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f007 f976 	bl	800a4f8 <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 800320c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <moment63+0x31c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f008 f841 	bl	800b29c <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 800321a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800321c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <moment63+0x31c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f007 feb2 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8003228:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800322a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800322c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <moment63+0x31c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f007 feab 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 8003236:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003238:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800323a:	6a3a      	ldr	r2, [r7, #32]
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <moment63+0x31c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f007 fea4 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m41[0], &in_conj[0], &m52[0], frameSize);
 8003244:	6a38      	ldr	r0, [r7, #32]
 8003246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <moment63+0x31c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f007 fe9d 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m52[0], &in_conj[0], &m63[0], frameSize);
 8003252:	69b8      	ldr	r0, [r7, #24]
 8003254:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <moment63+0x31c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f007 fe96 	bl	800af8c <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8003260:	2300      	movs	r3, #0
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
 8003264:	e01e      	b.n	80032a4 <moment63+0x358>
 8003266:	bf00      	nop
 8003268:	0800c17c 	.word	0x0800c17c
		m63_real += m63[i];
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800327c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003280:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m63_imag += m63[i+1];
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	3301      	adds	r3, #1
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	edd3 7a00 	vldr	s15, [r3]
 8003292:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	3302      	adds	r3, #2
 80032a2:	633b      	str	r3, [r7, #48]	; 0x30
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <moment63+0x39c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	005a      	lsls	r2, r3, #1
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d8dd      	bhi.n	800326c <moment63+0x320>
	}
	m63_real_mean = m63_real / blockSize;
 80032b0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80032b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80032b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032bc:	edc7 7a03 	vstr	s15, [r7, #12]
	m63_imag_mean = m63_imag / blockSize;
 80032c0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80032c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80032c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032cc:	edc7 7a02 	vstr	s15, [r7, #8]
	out[0] = m63_real_mean;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	601a      	str	r2, [r3, #0]
	out[1] = m63_imag_mean;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	3304      	adds	r3, #4
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	46ad      	mov	sp, r5
	// *out = sqrtf(m63_real_mean*m63_real_mean + m63_imag_mean*m63_imag_mean);
}
 80032e0:	bf00      	nop
 80032e2:	3758      	adds	r7, #88	; 0x58
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bdb0      	pop	{r4, r5, r7, pc}
 80032e8:	0800c17c 	.word	0x0800c17c

080032ec <cumulant_20>:

// Features no 13, 14, 15, 16, 17, 18, 19, 20 and 21
void cumulant_20(float32_t in[], float32_t *out){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
	float32_t temp[2];
	moment20(&in[0], &temp[0]);
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	4619      	mov	r1, r3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fe f8ff 	bl	8001500 <moment20>
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8003302:	ed97 7a02 	vldr	s14, [r7, #8]
 8003306:	edd7 7a02 	vldr	s15, [r7, #8]
 800330a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003312:	edd7 7a03 	vldr	s15, [r7, #12]
 8003316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800331a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331e:	eeb0 0a67 	vmov.f32	s0, s15
 8003322:	f008 fd35 	bl	800bd90 <sqrtf>
 8003326:	eef0 7a40 	vmov.f32	s15, s0
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	edc3 7a00 	vstr	s15, [r3]
};
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <cumulant_21>:
void cumulant_21(float32_t in[], float32_t *out){
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
	moment21(&in[0], out);
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fe f9a7 	bl	8001698 <moment21>
};
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <cumulant_40>:

void cumulant_40(float32_t in[], float32_t *out){
 8003352:	b580      	push	{r7, lr}
 8003354:	b08c      	sub	sp, #48	; 0x30
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
	float32_t m40[2], m20[2];
	float32_t m20_2[2], _3_m20_2[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 800335c:	f107 0320 	add.w	r3, r7, #32
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe f8cc 	bl	8001500 <moment20>
	moment40(&in[0], &m40[0]); // m40 is complex
 8003368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fe fb48 	bl	8001a04 <moment40>
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	// Calculate 3*m20^2
	m20_2[0] = m20[0] * m20[0] - m20[1] * m20[1];
 8003374:	ed97 7a08 	vldr	s14, [r7, #32]
 8003378:	edd7 7a08 	vldr	s15, [r7, #32]
 800337c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003380:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003384:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003390:	edc7 7a06 	vstr	s15, [r7, #24]
	m20_2[1] = 2 * m20[0] * m20[1];
 8003394:	edd7 7a08 	vldr	s15, [r7, #32]
 8003398:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800339c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	edc7 7a07 	vstr	s15, [r7, #28]
	_3_m20_2[0] = m20_2[0] * 3;
 80033a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80033ac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80033b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b4:	edc7 7a04 	vstr	s15, [r7, #16]
	_3_m20_2[1] = m20_2[1] * 3;
 80033b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80033bc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80033c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c4:	edc7 7a05 	vstr	s15, [r7, #20]
	// Save temporary complex number and calculate absolute value
	temp[0] = m40[0] - _3_m20_2[0];
 80033c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80033cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80033d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d4:	edc7 7a02 	vstr	s15, [r7, #8]
	temp[1] = m40[1] - _3_m20_2[1];
 80033d8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80033dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80033e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e4:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 80033e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80033ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80033f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80033f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	eeb0 0a67 	vmov.f32	s0, s15
 8003408:	f008 fcc2 	bl	800bd90 <sqrtf>
 800340c:	eef0 7a40 	vmov.f32	s15, s0
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m40 - 3*m20*m20);
};
 8003416:	bf00      	nop
 8003418:	3730      	adds	r7, #48	; 0x30
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <cumulant_41>:
void cumulant_41(float32_t in[], float32_t *out){
 800341e:	b580      	push	{r7, lr}
 8003420:	b08c      	sub	sp, #48	; 0x30
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
	float32_t m41[2], m20[2], m21;
	float32_t _3_m20_m21[2];
	float32_t temp[2];
	moment41(&in[0], &m41[0]); // m41 is complex
 8003428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fc1a 	bl	8001c68 <moment41>
	moment20(&in[0], &m20[0]); // m20 is complex
 8003434:	f107 0320 	add.w	r3, r7, #32
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe f860 	bl	8001500 <moment20>
	moment21(&in[0], &m21);    // m21 is real
 8003440:	f107 031c 	add.w	r3, r7, #28
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fe f926 	bl	8001698 <moment21>
	// Calculate 3*m20*m21
	_3_m20_m21[0] = 3 * m20[0] * m21;
 800344c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003450:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003454:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003458:	edd7 7a07 	vldr	s15, [r7, #28]
 800345c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003460:	edc7 7a05 	vstr	s15, [r7, #20]
	_3_m20_m21[1] = 3 * m20[1] * m21;
 8003464:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003468:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800346c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003470:	edd7 7a07 	vldr	s15, [r7, #28]
 8003474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003478:	edc7 7a06 	vstr	s15, [r7, #24]
	temp[0] = m41[0] - _3_m20_m21[0];
 800347c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003480:	edd7 7a05 	vldr	s15, [r7, #20]
 8003484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003488:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m41[1] - _3_m20_m21[1];
 800348c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003490:	edd7 7a06 	vldr	s15, [r7, #24]
 8003494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003498:	edc7 7a04 	vstr	s15, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 800349c:	ed97 7a03 	vldr	s14, [r7, #12]
 80034a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80034a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a8:	edd7 6a04 	vldr	s13, [r7, #16]
 80034ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80034b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	f008 fc68 	bl	800bd90 <sqrtf>
 80034c0:	eef0 7a40 	vmov.f32	s15, s0
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m41 - 3*m20*m21);
};
 80034ca:	bf00      	nop
 80034cc:	3730      	adds	r7, #48	; 0x30
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <cumulant_42>:
void cumulant_42(float32_t in[], float32_t *out){
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08e      	sub	sp, #56	; 0x38
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
	float32_t m42[2], m20[2], m20_2[2], m21;
	float32_t _2_m21_2, abs_m20_2;
	float32_t temp[2];
	// From complex multiplication
	// Calculate 3*m20*m21
	moment42(&in[0], &m42[0]); // m42 is complex
 80034dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fe fd28 	bl	8001f38 <moment42>
	moment20(&in[0], &m20[0]); // m20 is complex
 80034e8:	f107 0320 	add.w	r3, r7, #32
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe f806 	bl	8001500 <moment20>
	moment21(&in[0], &m21);    // m21 is real
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fe f8cc 	bl	8001698 <moment21>
	// Calculate 2*m1^2
	_2_m21_2 = 2 * m21 * m21;
 8003500:	edd7 7a05 	vldr	s15, [r7, #20]
 8003504:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003508:	edd7 7a05 	vldr	s15, [r7, #20]
 800350c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003510:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	// Calculate |m20^2|
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	m20_2[0] = m20[0] * m20[0] - m20[1] * m20[1];
 8003514:	ed97 7a08 	vldr	s14, [r7, #32]
 8003518:	edd7 7a08 	vldr	s15, [r7, #32]
 800351c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003520:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003524:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003530:	edc7 7a06 	vstr	s15, [r7, #24]
	m20_2[1] = 2 * m20[0] * m20[1];
 8003534:	edd7 7a08 	vldr	s15, [r7, #32]
 8003538:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800353c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003544:	edc7 7a07 	vstr	s15, [r7, #28]
	abs_m20_2 = sqrtf(m20_2[0]*m20_2[0] + m20_2[1]*m20_2[1]);
 8003548:	ed97 7a06 	vldr	s14, [r7, #24]
 800354c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003554:	edd7 6a07 	vldr	s13, [r7, #28]
 8003558:	edd7 7a07 	vldr	s15, [r7, #28]
 800355c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003564:	eeb0 0a67 	vmov.f32	s0, s15
 8003568:	f008 fc12 	bl	800bd90 <sqrtf>
 800356c:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	temp[0] = m42[0] - abs_m20_2 - _2_m21_2;
 8003570:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003574:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003578:	ee37 7a67 	vsub.f32	s14, s14, s15
 800357c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003584:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m42[1];
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	613b      	str	r3, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 800358c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003590:	edd7 7a03 	vldr	s15, [r7, #12]
 8003594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003598:	edd7 6a04 	vldr	s13, [r7, #16]
 800359c:	edd7 7a04 	vldr	s15, [r7, #16]
 80035a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a8:	eeb0 0a67 	vmov.f32	s0, s15
 80035ac:	f008 fbf0 	bl	800bd90 <sqrtf>
 80035b0:	eef0 7a40 	vmov.f32	s15, s0
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m42 - fabsf(m20*m20) - 2*m21*m21);
};
 80035ba:	bf00      	nop
 80035bc:	3738      	adds	r7, #56	; 0x38
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <cumulant_60>:
void cumulant_60(float32_t in[], float32_t *out){
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b08e      	sub	sp, #56	; 0x38
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
	float32_t m60[2], m40[2], m20[2];
	float32_t _15_m20_m40[2], _3_m20_3[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 80035cc:	f107 0320 	add.w	r3, r7, #32
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd ff94 	bl	8001500 <moment20>
	moment40(&in[0], &m40[0]); // m40 is complex
 80035d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fa10 	bl	8001a04 <moment40>
	moment60(&in[0], &m60[0]); // m60 is complexs
 80035e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe ff74 	bl	80024d8 <moment60>
	// Calculate 15*m20*m40
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_15_m20_m40[0] = 15 * (m20[0] * m40[0] - m20[1] * m40[1]);
 80035f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80035f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80035f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003600:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800360c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003614:	edc7 7a06 	vstr	s15, [r7, #24]
	_15_m20_m40[1] = 15 * (m20[0] * m40[1] + m20[1] * m40[0]);
 8003618:	ed97 7a08 	vldr	s14, [r7, #32]
 800361c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003624:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003628:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800362c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003634:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800363c:	edc7 7a07 	vstr	s15, [r7, #28]
	// Calculate 30*m20*m20*m20
	// From complex multiplication
	// (a + bi)(a + bi)(a + bi) = (a^3 - 3ab^2) + (3a^2b - b^3)i
	_3_m20_3[0] = 3 * (m20[0]*m20[0]*m20[0] - 3 * m20[0]*m20[1]*m20[1]);
 8003640:	ed97 7a08 	vldr	s14, [r7, #32]
 8003644:	edd7 7a08 	vldr	s15, [r7, #32]
 8003648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800364c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003654:	edd7 7a08 	vldr	s15, [r7, #32]
 8003658:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800365c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003660:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003664:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003668:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800366c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003674:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800367c:	edc7 7a04 	vstr	s15, [r7, #16]
	_3_m20_3[1] = 3 * (3 * m20[0]*m20[0]*m20[1] - m20[1]*m20[1]*m20[1]);
 8003680:	edd7 7a08 	vldr	s15, [r7, #32]
 8003684:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003688:	ee27 7a87 	vmul.f32	s14, s15, s14
 800368c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003694:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800369c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80036a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80036b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036bc:	edc7 7a05 	vstr	s15, [r7, #20]
	temp[0] = m60[0] -_15_m20_m40[0] + _3_m20_3[0];
 80036c0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80036c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80036c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80036d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d4:	edc7 7a02 	vstr	s15, [r7, #8]
	temp[1] = m60[1] -_15_m20_m40[1] + _3_m20_3[1];
 80036d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80036dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80036e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80036e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ec:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 80036f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80036f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8003700:	edd7 7a03 	vldr	s15, [r7, #12]
 8003704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370c:	eeb0 0a67 	vmov.f32	s0, s15
 8003710:	f008 fb3e 	bl	800bd90 <sqrtf>
 8003714:	eef0 7a40 	vmov.f32	s15, s0
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m60 - 15*m20*m40 + 30*m20*m20*m20);
};
 800371e:	bf00      	nop
 8003720:	3738      	adds	r7, #56	; 0x38
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <cumulant_61>:
void cumulant_61(float32_t in[], float32_t *out){
 8003726:	b580      	push	{r7, lr}
 8003728:	b096      	sub	sp, #88	; 0x58
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
	//M61 - 5 M21 M40 - 10 M20 M41 + 30 M20 M20 M21
	float32_t m61[2], m21, m40[2], m20[2], m41[2];
	float32_t _5_m21_m40[2], _10_m20_m41[2], _30_m20_2[2], _30_m20_m21[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 8003730:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fee2 	bl	8001500 <moment20>
	moment21(&in[0], &m21); // m21 is real
 800373c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd ffa8 	bl	8001698 <moment21>
	moment40(&in[0], &m40[0]); // m40 is complex
 8003748:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe f958 	bl	8001a04 <moment40>
	moment41(&in[0], &m41[0]); // m41 is complex
 8003754:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe fa84 	bl	8001c68 <moment41>
	moment61(&in[0], &m61[0]); // m61 is complex
 8003760:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff f850 	bl	800280c <moment61>
	// Calculate 5*m21*m40
	_5_m21_m40[0] = 5 * m40[0]*m21;
 800376c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003770:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003774:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003778:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800377c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003780:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_5_m21_m40[1] = 5 * m40[1]*m21;
 8003784:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003788:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800378c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003790:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003798:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	// Calculate 10*m20*m41
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_10_m20_m41[0] = 10 * (m20[0] * m41[0] - m20[1] * m41[1]);
 800379c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80037a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80037a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037a8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80037ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80037b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80037bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	_10_m20_m41[1] = 10 * (m20[0] * m41[1] + m20[1] * m41[0]);
 80037c4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80037c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80037cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80037d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80037d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80037e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// Calculate 30*m20^2*m21
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_30_m20_2[0] = 30 * (m20[0] * m20[0] - m20[1] * m20[1]);
 80037ec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80037f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80037f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80037fc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003808:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800380c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003810:	edc7 7a07 	vstr	s15, [r7, #28]
	_30_m20_2[1] = 30 * (2 * m20[0] * m20[1]);
 8003814:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003818:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800381c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003824:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382c:	edc7 7a08 	vstr	s15, [r7, #32]
	_30_m20_m21[0] = _30_m20_2[0]*m21;
 8003830:	ed97 7a07 	vldr	s14, [r7, #28]
 8003834:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383c:	edc7 7a05 	vstr	s15, [r7, #20]
	_30_m20_m21[1] = _30_m20_2[1]*m21;
 8003840:	ed97 7a08 	vldr	s14, [r7, #32]
 8003844:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384c:	edc7 7a06 	vstr	s15, [r7, #24]
	temp[0] = m61[0] - _5_m21_m40[0] - _10_m20_m41[0] + _30_m20_m21[0];
 8003850:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003854:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800385c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003860:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003864:	edd7 7a05 	vldr	s15, [r7, #20]
 8003868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m61[1] - _5_m21_m40[1] - _10_m20_m41[1] + _30_m20_m21[1];
 8003870:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003874:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003878:	ee37 7a67 	vsub.f32	s14, s14, s15
 800387c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003880:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003884:	edd7 7a06 	vldr	s15, [r7, #24]
 8003888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388c:	edc7 7a04 	vstr	s15, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8003890:	ed97 7a03 	vldr	s14, [r7, #12]
 8003894:	edd7 7a03 	vldr	s15, [r7, #12]
 8003898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800389c:	edd7 6a04 	vldr	s13, [r7, #16]
 80038a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ac:	eeb0 0a67 	vmov.f32	s0, s15
 80038b0:	f008 fa6e 	bl	800bd90 <sqrtf>
 80038b4:	eef0 7a40 	vmov.f32	s15, s0
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m61 - 5*m21*m40 - 10*m20*m41 + 30*m20*m20*m21);
};
 80038be:	bf00      	nop
 80038c0:	3758      	adds	r7, #88	; 0x58
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <cumulant_62>:
void cumulant_62(float32_t in[], float32_t *out){
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b09e      	sub	sp, #120	; 0x78
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
	// M62 - 6 M20 M42 - 8 M21 M41 - M22 M40 + 6 M20 M20 M22 + 24 M21 M21 M22
	float32_t m62[2], m20[2], m42[2], m21, m41[2], m22[2], m40[2];
	float32_t _6_m20_m42[2], _8_m21_m41[2], m22_m40[2], _6_m20_2[2], _6_m20_m20_m22[2], _24_m21_m21_m22[2];
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 80038d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fe12 	bl	8001500 <moment20>
	moment21(&in[0], &m21); // m21 is real
 80038dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd fed8 	bl	8001698 <moment21>
	moment22(&in[0], &m22[0]); // m22 is complex
 80038e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd ff86 	bl	8001800 <moment22>
	moment40(&in[0], &m40[0]); // m40 is complex
 80038f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fe f882 	bl	8001a04 <moment40>
	moment41(&in[0], &m41[0]); // m41 is complex
 8003900:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003904:	4619      	mov	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fe f9ae 	bl	8001c68 <moment41>
	moment42(&in[0], &m42[0]); // m42 is complex
 800390c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fe fb10 	bl	8001f38 <moment42>
	moment62(&in[0], &m62[0]); // m62 is complex
 8003918:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff f944 	bl	8002bac <moment62>
	// Calculate 6*m20*m42, 8*m21*m41, m22*m40, 6*m20*m20*m22 + 24*m21*m21*m22
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_6_m20_m42[0] = 6 * (m20[0] * m42[0] - m20[1] * m42[1]);
 8003924:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003928:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800392c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003930:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8003934:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800393c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003940:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003948:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	_6_m20_m42[1] = 6 * (m20[0] * m42[1] + m20[1] * m42[0]);
 800394c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003950:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003958:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800395c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003968:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800396c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003970:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_8_m21_m41[0] = 8 * m21 * m41[0];
 8003974:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003978:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800397c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003980:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003988:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	_8_m21_m41[1] = 8 * m21 * m41[1];
 800398c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003990:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003994:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003998:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800399c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	m22_m40[0] = (m22[0] * m40[0] - m22[1] * m40[1]);
 80039a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80039a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039b0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80039b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80039b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	m22_m40[1] = (m22[0] * m40[1] + m22[1] * m40[0]);
 80039c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80039c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80039cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039d0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80039d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	_6_m20_2[0] = 6 * (m20[0] * m20[0] - m20[1] * m20[1]);
 80039e4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80039e8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80039ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039f0:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80039f4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80039f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a00:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	_6_m20_2[1] = 6 * (2 * m20[0] * m20[1]);
 8003a0c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003a10:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a14:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a24:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	_6_m20_m20_m22[0] = _6_m20_2[0] * m22[0] - _6_m20_2[1] * m22[1];
 8003a28:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a2c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a34:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003a38:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a44:	edc7 7a07 	vstr	s15, [r7, #28]
	_6_m20_m20_m22[1] = _6_m20_2[0] * m22[1] + _6_m20_2[1] * m22[0];
 8003a48:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a4c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003a50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a54:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003a58:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a64:	edc7 7a08 	vstr	s15, [r7, #32]
	_24_m21_m21_m22[0] = 24 * m21 * m21 * m20[0];
 8003a68:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003a6c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8003a70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a7c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a84:	edc7 7a05 	vstr	s15, [r7, #20]
	_24_m21_m21_m22[1] = 24 * m21 * m21 * m20[1];
 8003a88:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003a8c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8003a90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a9c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa4:	edc7 7a06 	vstr	s15, [r7, #24]
	temp[0] = m62[0] - _6_m20_m42[0] - _8_m21_m41[0] - m22_m40[0] + _6_m20_m20_m22[0] + _24_m21_m21_m22[0];
 8003aa8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003aac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003ab0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ab4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003abc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ac4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad4:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = m62[1] - _6_m20_m42[1] - _8_m21_m41[1] - m22_m40[1] + _6_m20_m20_m22[1] + _24_m21_m21_m22[1];
 8003ad8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003adc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003ae0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ae4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003ae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003af4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003afc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b04:	edc7 7a04 	vstr	s15, [r7, #16]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8003b08:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b14:	edd7 6a04 	vldr	s13, [r7, #16]
 8003b18:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b24:	eeb0 0a67 	vmov.f32	s0, s15
 8003b28:	f008 f932 	bl	800bd90 <sqrtf>
 8003b2c:	eef0 7a40 	vmov.f32	s15, s0
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m62 - 6*m20*m42 - 8*m21*m41 - m22*m40 + 6*m20*m20*m22 + 24*m21*m21*m20);
};
 8003b36:	bf00      	nop
 8003b38:	3778      	adds	r7, #120	; 0x78
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <cumulant_63>:
void cumulant_63(float32_t in[], float32_t *out){
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b09a      	sub	sp, #104	; 0x68
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
	// M63 - 9 M21 M42 + 12 M21 M21 M21 - 3 M20 M43 - 3 M22 M41 + 18 M20 M21 M22
	float32_t m63[2], m21, m42[2], m20[2], m43[2], m22[2], m41[2];
	float32_t _9_m21_m42[2], _3_m20_m43[2], _3_m22_m41[2], _18_m20_m21_m22[2], _12_m21_3;
	float32_t temp[2];
	moment20(&in[0], &m20[0]); // m20 is complex
 8003b48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd fcd6 	bl	8001500 <moment20>
	moment21(&in[0], &m21); // m21 is real
 8003b54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fd9c 	bl	8001698 <moment21>
	moment22(&in[0], &m22[0]); // m22 is complex
 8003b60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fe4a 	bl	8001800 <moment22>
	moment41(&in[0], &m41[0]); // m41 is complex
 8003b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fe f878 	bl	8001c68 <moment41>
	moment42(&in[0], &m42[0]); // m42 is complex
 8003b78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe f9da 	bl	8001f38 <moment42>
	moment43(&in[0], &m43[0]); // m43 is complex
 8003b84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fe fb3c 	bl	8002208 <moment43>
	moment63(&in[0], &m63[0]); // m64 is complex
 8003b90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff f9d8 	bl	8002f4c <moment63>
	// Calculate 9*m21*m42, 3*m20*m43, 3*m22*m41 + 18*m20*m21*m22
	// From complex multiplication
	// (a + bi)(a + bi) = (a^2 - b^2) + (2ab)i
	_9_m21_m42[0] = 9 * m21 * m42[0];
 8003b9c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003ba0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003ba4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ba8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	_9_m21_m42[1] = 9 * m21 * m42[1];
 8003bb4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003bb8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bc0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_3_m20_m43[0] = 3 * (m20[0] * m43[0] - m20[1] * m43[1]);
 8003bcc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003bd0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bd8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003bdc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bf0:	edc7 7a08 	vstr	s15, [r7, #32]
	_3_m20_m43[1] = 3 * (m20[0] * m43[1] + m20[1] * m43[0]);
 8003bf4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003bf8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c00:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8003c04:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c10:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	_3_m22_m41[0] = 3 * (m22[0] * m41[0] - m22[1] * m41[1]);
 8003c1c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003c20:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c28:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003c2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c38:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c40:	edc7 7a06 	vstr	s15, [r7, #24]
	_3_m22_m41[1] = 3 * (m22[0] * m41[1] + m22[1] * m41[0]);
 8003c44:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003c48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c50:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003c54:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c60:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c68:	edc7 7a07 	vstr	s15, [r7, #28]
	_18_m20_m21_m22[0] = 18 * m21 * (m20[0] * m22[0] - m20[1] * m22[1]);
 8003c6c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003c70:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c78:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8003c7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003c80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c84:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8003c88:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003c8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c98:	edc7 7a04 	vstr	s15, [r7, #16]
	_18_m20_m21_m22[1] = 18 * m21 * (m20[0] * m22[1] + m20[1] * m22[0]);
 8003c9c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003ca0:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003ca4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ca8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8003cac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003cb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cb4:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8003cb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003cbc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc8:	edc7 7a05 	vstr	s15, [r7, #20]
	// Calculate 12*m21*m21*m21
	_12_m21_3 = 12 * m21 * m21 * m21;
 8003ccc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003cd0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003cd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cd8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ce0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	temp[0] = m63[0] - _9_m21_m42[0] + _12_m21_3 - _3_m20_m43[0] - _3_m22_m41[0] + _18_m20_m21_m22[0];
 8003cec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003cf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cf8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d00:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d18:	edc7 7a02 	vstr	s15, [r7, #8]
	temp[1] = m63[1] - _9_m21_m42[1] - _3_m20_m43[1] - _3_m22_m41[1] + _18_m20_m21_m22[1];
 8003d1c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003d20:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003d24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d40:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(temp[0]*temp[0] + temp[1]*temp[1]);
 8003d44:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d50:	edd7 6a03 	vldr	s13, [r7, #12]
 8003d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d60:	eeb0 0a67 	vmov.f32	s0, s15
 8003d64:	f008 f814 	bl	800bd90 <sqrtf>
 8003d68:	eef0 7a40 	vmov.f32	s15, s0
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	edc3 7a00 	vstr	s15, [r3]
	// *out = fabsf(m63 - 9*m21*m42 + 12*m21*m21*m21 - 3*m20*m43 - 3*m22*m41 + 18*m20*m21*m22);
};
 8003d72:	bf00      	nop
 8003d74:	3768      	adds	r7, #104	; 0x68
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	; 0x30
 8003d80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d82:	f107 031c 	add.w	r3, r7, #28
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d92:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d98:	4a49      	ldr	r2, [pc, #292]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003da2:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003db0:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db6:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dc0:	4b3f      	ldr	r3, [pc, #252]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	4b3c      	ldr	r3, [pc, #240]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dd4:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003dd6:	f043 0302 	orr.w	r3, r3, #2
 8003dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dde:	4b38      	ldr	r3, [pc, #224]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dec:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003df2:	4a33      	ldr	r2, [pc, #204]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003df4:	f043 0308 	orr.w	r3, r3, #8
 8003df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dfc:	4b30      	ldr	r3, [pc, #192]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e10:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e2e:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003e30:	f043 0310 	orr.w	r3, r3, #16
 8003e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <MX_GPIO_Init+0x144>)
 8003e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8003e46:	2200      	movs	r2, #0
 8003e48:	f244 0101 	movw	r1, #16385	; 0x4001
 8003e4c:	481d      	ldr	r0, [pc, #116]	; (8003ec4 <MX_GPIO_Init+0x148>)
 8003e4e:	f001 fe3f 	bl	8005ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003e52:	2200      	movs	r2, #0
 8003e54:	2102      	movs	r1, #2
 8003e56:	481c      	ldr	r0, [pc, #112]	; (8003ec8 <MX_GPIO_Init+0x14c>)
 8003e58:	f001 fe3a 	bl	8005ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8003e5c:	f244 0301 	movw	r3, #16385	; 0x4001
 8003e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e62:	2301      	movs	r3, #1
 8003e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6e:	f107 031c 	add.w	r3, r7, #28
 8003e72:	4619      	mov	r1, r3
 8003e74:	4813      	ldr	r0, [pc, #76]	; (8003ec4 <MX_GPIO_Init+0x148>)
 8003e76:	f001 fc7b 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003e7a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003e8c:	230a      	movs	r3, #10
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e90:	f107 031c 	add.w	r3, r7, #28
 8003e94:	4619      	mov	r1, r3
 8003e96:	480d      	ldr	r0, [pc, #52]	; (8003ecc <MX_GPIO_Init+0x150>)
 8003e98:	f001 fc6a 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4805      	ldr	r0, [pc, #20]	; (8003ec8 <MX_GPIO_Init+0x14c>)
 8003eb4:	f001 fc5c 	bl	8005770 <HAL_GPIO_Init>

}
 8003eb8:	bf00      	nop
 8003eba:	3730      	adds	r7, #48	; 0x30
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	58020400 	.word	0x58020400
 8003ec8:	58021000 	.word	0x58021000
 8003ecc:	58020000 	.word	0x58020000

08003ed0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ed4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ed8:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <SCB_EnableICache+0x3c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003ee4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ee8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <SCB_EnableICache+0x3c>)
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	4a06      	ldr	r2, [pc, #24]	; (8003f0c <SCB_EnableICache+0x3c>)
 8003ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003efc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003f16:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <SCB_EnableDCache+0x7c>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003f1e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <SCB_EnableDCache+0x7c>)
 8003f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f28:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	0b5b      	lsrs	r3, r3, #13
 8003f2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f32:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	08db      	lsrs	r3, r3, #3
 8003f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003f46:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003f4c:	490f      	ldr	r1, [pc, #60]	; (8003f8c <SCB_EnableDCache+0x7c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	1e5a      	subs	r2, r3, #1
 8003f58:	60ba      	str	r2, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1ef      	bne.n	8003f3e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1e5a      	subs	r2, r3, #1
 8003f62:	60fa      	str	r2, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e5      	bne.n	8003f34 <SCB_EnableDCache+0x24>
 8003f68:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <SCB_EnableDCache+0x7c>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	4a06      	ldr	r2, [pc, #24]	; (8003f8c <SCB_EnableDCache+0x7c>)
 8003f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f76:	6153      	str	r3, [r2, #20]
 8003f78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f7c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08e      	sub	sp, #56	; 0x38
 8003f94:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/*****************************************************************************************************/
	q15_t q15_input_vector[22] = {0};
 8003f96:	f107 0308 	add.w	r3, r7, #8
 8003f9a:	222c      	movs	r2, #44	; 0x2c
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f007 fdba 	bl	800bb18 <memset>
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8003fa4:	f7ff ff94 	bl	8003ed0 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8003fa8:	f7ff ffb2 	bl	8003f10 <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8003fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003fb2:	bf00      	nop
 8003fb4:	4b33      	ldr	r3, [pc, #204]	; (8004084 <main+0xf4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <main+0x3a>
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	637a      	str	r2, [r7, #52]	; 0x34
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	dcf4      	bgt.n	8003fb4 <main+0x24>
	if ( timeout < 0 )
 8003fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	da01      	bge.n	8003fd4 <main+0x44>
	{
		Error_Handler();
 8003fd0:	f000 fdfe 	bl	8004bd0 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003fd4:	f000 ffb8 	bl	8004f48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003fd8:	f000 fa92 	bl	8004500 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8003fdc:	4b29      	ldr	r3, [pc, #164]	; (8004084 <main+0xf4>)
 8003fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fe2:	4a28      	ldr	r2, [pc, #160]	; (8004084 <main+0xf4>)
 8003fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <main+0xf4>)
 8003fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f001 fd82 	bl	8005b04 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8004000:	2100      	movs	r1, #0
 8004002:	2000      	movs	r0, #0
 8004004:	f001 fd98 	bl	8005b38 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8004008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800400c:	637b      	str	r3, [r7, #52]	; 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800400e:	bf00      	nop
 8004010:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <main+0xf4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d104      	bne.n	8004026 <main+0x96>
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	1e5a      	subs	r2, r3, #1
 8004020:	637a      	str	r2, [r7, #52]	; 0x34
 8004022:	2b00      	cmp	r3, #0
 8004024:	dcf4      	bgt.n	8004010 <main+0x80>
	if ( timeout < 0 )
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	2b00      	cmp	r3, #0
 800402a:	da01      	bge.n	8004030 <main+0xa0>
	{
		Error_Handler();
 800402c:	f000 fdd0 	bl	8004bd0 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004030:	f7ff fea4 	bl	8003d7c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8004034:	f000 fec0 	bl	8004db8 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8004038:	f000 fe50 	bl	8004cdc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	/*****************************************************************************************************/
	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <main+0xf8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b11      	ldr	r3, [pc, #68]	; (8004088 <main+0xf8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <main+0xf8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <main+0xf8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 800405c:	480a      	ldr	r0, [pc, #40]	; (8004088 <main+0xf8>)
 800405e:	f004 f8c5 	bl	80081ec <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <main+0xf8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	625a      	str	r2, [r3, #36]	; 0x24
	/* USER CODE BEGIN WHILE */
	/*****************************************************************************************************/
	while (1)
	{
		// Put UART peripheral in reception process
		if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 800406a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800406e:	4907      	ldr	r1, [pc, #28]	; (800408c <main+0xfc>)
 8004070:	4807      	ldr	r0, [pc, #28]	; (8004090 <main+0x100>)
 8004072:	f004 fc4d 	bl	8008910 <HAL_UART_Receive_IT>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d013      	beq.n	80040a4 <main+0x114>
		{
			Error_Handler();
 800407c:	f000 fda8 	bl	8004bd0 <Error_Handler>
		}
		// Wait for message
		while (UartReady != SET)
 8004080:	e010      	b.n	80040a4 <main+0x114>
 8004082:	bf00      	nop
 8004084:	58024400 	.word	0x58024400
 8004088:	24014170 	.word	0x24014170
 800408c:	24010094 	.word	0x24010094
 8004090:	240141bc 	.word	0x240141bc
		{
			HAL_Delay(500);
 8004094:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004098:	f000 ffe8 	bl	800506c <HAL_Delay>
			blink_green();
 800409c:	f000 fb2a 	bl	80046f4 <blink_green>
			blink_green();
 80040a0:	f000 fb28 	bl	80046f4 <blink_green>
		while (UartReady != SET)
 80040a4:	4b99      	ldr	r3, [pc, #612]	; (800430c <main+0x37c>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d1f2      	bne.n	8004094 <main+0x104>
		}
		UartReady = RESET;
 80040ae:	4b97      	ldr	r3, [pc, #604]	; (800430c <main+0x37c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80040b4:	2201      	movs	r2, #1
 80040b6:	2101      	movs	r1, #1
 80040b8:	4895      	ldr	r0, [pc, #596]	; (8004310 <main+0x380>)
 80040ba:	f001 fd09 	bl	8005ad0 <HAL_GPIO_WritePin>
		if(rxBuffer.bytes[8191] != 0){
 80040be:	4a95      	ldr	r2, [pc, #596]	; (8004314 <main+0x384>)
 80040c0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80040c4:	4413      	add	r3, r2
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <main+0x146>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 80040cc:	2201      	movs	r2, #1
 80040ce:	2102      	movs	r1, #2
 80040d0:	4891      	ldr	r0, [pc, #580]	; (8004318 <main+0x388>)
 80040d2:	f001 fcfd 	bl	8005ad0 <HAL_GPIO_WritePin>
		}
		// Echo
		transmit_echo(&rxBuffer.bytes[0], RX_DATA_SIZE*4);
 80040d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040da:	488e      	ldr	r0, [pc, #568]	; (8004314 <main+0x384>)
 80040dc:	f000 fc36 	bl	800494c <transmit_echo>
		// Instantaneous absolute value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80040e0:	4b8e      	ldr	r3, [pc, #568]	; (800431c <main+0x38c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
		complex_inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 80040e8:	498d      	ldr	r1, [pc, #564]	; (8004320 <main+0x390>)
 80040ea:	488a      	ldr	r0, [pc, #552]	; (8004314 <main+0x384>)
 80040ec:	f7fc fb56 	bl	800079c <complex_inst_absolute>
		counter_array.number[0] = __HAL_TIM_GET_COUNTER(&htim2);
 80040f0:	4b8a      	ldr	r3, [pc, #552]	; (800431c <main+0x38c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	4a8b      	ldr	r2, [pc, #556]	; (8004324 <main+0x394>)
 80040f8:	6013      	str	r3, [r2, #0]
		transmit_array(&instAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[0]);
 80040fa:	4a8a      	ldr	r2, [pc, #552]	; (8004324 <main+0x394>)
 80040fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004100:	4887      	ldr	r0, [pc, #540]	; (8004320 <main+0x390>)
 8004102:	f000 fbc5 	bl	8004890 <transmit_array>

		// Instantaneous phase value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004106:	4b85      	ldr	r3, [pc, #532]	; (800431c <main+0x38c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	625a      	str	r2, [r3, #36]	; 0x24
		inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 800410e:	4986      	ldr	r1, [pc, #536]	; (8004328 <main+0x398>)
 8004110:	4880      	ldr	r0, [pc, #512]	; (8004314 <main+0x384>)
 8004112:	f7fc fb55 	bl	80007c0 <inst_phase>
		counter_array.number[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8004116:	4b81      	ldr	r3, [pc, #516]	; (800431c <main+0x38c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	4a81      	ldr	r2, [pc, #516]	; (8004324 <main+0x394>)
 800411e:	6053      	str	r3, [r2, #4]
		transmit_array(&instPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[4]);
 8004120:	4a82      	ldr	r2, [pc, #520]	; (800432c <main+0x39c>)
 8004122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004126:	4880      	ldr	r0, [pc, #512]	; (8004328 <main+0x398>)
 8004128:	f000 fbb2 	bl	8004890 <transmit_array>

		// Instantaneous unwrapped phase value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800412c:	4b7b      	ldr	r3, [pc, #492]	; (800431c <main+0x38c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2200      	movs	r2, #0
 8004132:	625a      	str	r2, [r3, #36]	; 0x24
		inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8004134:	497c      	ldr	r1, [pc, #496]	; (8004328 <main+0x398>)
 8004136:	4877      	ldr	r0, [pc, #476]	; (8004314 <main+0x384>)
 8004138:	f7fc fb42 	bl	80007c0 <inst_phase>
		unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 800413c:	497c      	ldr	r1, [pc, #496]	; (8004330 <main+0x3a0>)
 800413e:	487a      	ldr	r0, [pc, #488]	; (8004328 <main+0x398>)
 8004140:	f7fc fb76 	bl	8000830 <unwrap>
		counter_array.number[2] = __HAL_TIM_GET_COUNTER(&htim2);
 8004144:	4b75      	ldr	r3, [pc, #468]	; (800431c <main+0x38c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	4a76      	ldr	r2, [pc, #472]	; (8004324 <main+0x394>)
 800414c:	6093      	str	r3, [r2, #8]
		transmit_array(&instUnwrappedPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[8]);
 800414e:	4a79      	ldr	r2, [pc, #484]	; (8004334 <main+0x3a4>)
 8004150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004154:	4876      	ldr	r0, [pc, #472]	; (8004330 <main+0x3a0>)
 8004156:	f000 fb9b 	bl	8004890 <transmit_array>

		// Instantaneous frequency value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800415a:	4b70      	ldr	r3, [pc, #448]	; (800431c <main+0x38c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	625a      	str	r2, [r3, #36]	; 0x24
		inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 8004162:	4975      	ldr	r1, [pc, #468]	; (8004338 <main+0x3a8>)
 8004164:	486b      	ldr	r0, [pc, #428]	; (8004314 <main+0x384>)
 8004166:	f7fc fc87 	bl	8000a78 <inst_frequency>
		counter_array.number[3] = __HAL_TIM_GET_COUNTER(&htim2);
 800416a:	4b6c      	ldr	r3, [pc, #432]	; (800431c <main+0x38c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	4a6c      	ldr	r2, [pc, #432]	; (8004324 <main+0x394>)
 8004172:	60d3      	str	r3, [r2, #12]
		transmit_array(&instFreq.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[12]);
 8004174:	4a71      	ldr	r2, [pc, #452]	; (800433c <main+0x3ac>)
 8004176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800417a:	486f      	ldr	r0, [pc, #444]	; (8004338 <main+0x3a8>)
 800417c:	f000 fb88 	bl	8004890 <transmit_array>

		// Instantaneous centered normalized absolute value
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004180:	4b66      	ldr	r3, [pc, #408]	; (800431c <main+0x38c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2200      	movs	r2, #0
 8004186:	625a      	str	r2, [r3, #36]	; 0x24
		inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 8004188:	496d      	ldr	r1, [pc, #436]	; (8004340 <main+0x3b0>)
 800418a:	4862      	ldr	r0, [pc, #392]	; (8004314 <main+0x384>)
 800418c:	f7fc fd2a 	bl	8000be4 <inst_centralized_normalized_absolute>
		counter_array.number[4] = __HAL_TIM_GET_COUNTER(&htim2);
 8004190:	4b62      	ldr	r3, [pc, #392]	; (800431c <main+0x38c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	4a63      	ldr	r2, [pc, #396]	; (8004324 <main+0x394>)
 8004198:	6113      	str	r3, [r2, #16]
		transmit_array(&instCNAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter_array.bytes[16]);
 800419a:	4a6a      	ldr	r2, [pc, #424]	; (8004344 <main+0x3b4>)
 800419c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041a0:	4867      	ldr	r0, [pc, #412]	; (8004340 <main+0x3b0>)
 80041a2:	f000 fb75 	bl	8004890 <transmit_array>

		/*****************************************************************************************************/
		// Standard deviation of the instantaneous phase
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80041a6:	4b5d      	ldr	r3, [pc, #372]	; (800431c <main+0x38c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24
		std_dev(&instPhase.number[0], &ft_array.number[0]);
 80041ae:	4966      	ldr	r1, [pc, #408]	; (8004348 <main+0x3b8>)
 80041b0:	485d      	ldr	r0, [pc, #372]	; (8004328 <main+0x398>)
 80041b2:	f7fc fd8f 	bl	8000cd4 <std_dev>
		counter_array.number[5] = __HAL_TIM_GET_COUNTER(&htim2);
 80041b6:	4b59      	ldr	r3, [pc, #356]	; (800431c <main+0x38c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	4a59      	ldr	r2, [pc, #356]	; (8004324 <main+0x394>)
 80041be:	6153      	str	r3, [r2, #20]

		// Standard deviation of the absolute instantaneous phase
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80041c0:	4b56      	ldr	r3, [pc, #344]	; (800431c <main+0x38c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24
		inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 80041c8:	4960      	ldr	r1, [pc, #384]	; (800434c <main+0x3bc>)
 80041ca:	4857      	ldr	r0, [pc, #348]	; (8004328 <main+0x398>)
 80041cc:	f7fc fad4 	bl	8000778 <inst_absolute>
		std_dev(&instAbsPhase.number[0], &ft_array.number[1]);
 80041d0:	495f      	ldr	r1, [pc, #380]	; (8004350 <main+0x3c0>)
 80041d2:	485e      	ldr	r0, [pc, #376]	; (800434c <main+0x3bc>)
 80041d4:	f7fc fd7e 	bl	8000cd4 <std_dev>
		counter_array.number[6] = __HAL_TIM_GET_COUNTER(&htim2);
 80041d8:	4b50      	ldr	r3, [pc, #320]	; (800431c <main+0x38c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	4a51      	ldr	r2, [pc, #324]	; (8004324 <main+0x394>)
 80041e0:	6193      	str	r3, [r2, #24]

		// Standard deviation of the instantaneous frequency
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80041e2:	4b4e      	ldr	r3, [pc, #312]	; (800431c <main+0x38c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24
		std_dev(&instFreq.number[0], &ft_array.number[2]);
 80041ea:	495a      	ldr	r1, [pc, #360]	; (8004354 <main+0x3c4>)
 80041ec:	4852      	ldr	r0, [pc, #328]	; (8004338 <main+0x3a8>)
 80041ee:	f7fc fd71 	bl	8000cd4 <std_dev>
		counter_array.number[7] = __HAL_TIM_GET_COUNTER(&htim2);
 80041f2:	4b4a      	ldr	r3, [pc, #296]	; (800431c <main+0x38c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	4a4a      	ldr	r2, [pc, #296]	; (8004324 <main+0x394>)
 80041fa:	61d3      	str	r3, [r2, #28]

		// Standard deviation of the absolute instantaneous frequency
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80041fc:	4b47      	ldr	r3, [pc, #284]	; (800431c <main+0x38c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2200      	movs	r2, #0
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
		inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 8004204:	4954      	ldr	r1, [pc, #336]	; (8004358 <main+0x3c8>)
 8004206:	484c      	ldr	r0, [pc, #304]	; (8004338 <main+0x3a8>)
 8004208:	f7fc fab6 	bl	8000778 <inst_absolute>
		std_dev(&instAbsFreq.number[0], &ft_array.number[3]);
 800420c:	4953      	ldr	r1, [pc, #332]	; (800435c <main+0x3cc>)
 800420e:	4852      	ldr	r0, [pc, #328]	; (8004358 <main+0x3c8>)
 8004210:	f7fc fd60 	bl	8000cd4 <std_dev>
		counter_array.number[8] = __HAL_TIM_GET_COUNTER(&htim2);
 8004214:	4b41      	ldr	r3, [pc, #260]	; (800431c <main+0x38c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	4a42      	ldr	r2, [pc, #264]	; (8004324 <main+0x394>)
 800421c:	6213      	str	r3, [r2, #32]

		// Standard deviation of the centralized normalized absolute amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800421e:	4b3f      	ldr	r3, [pc, #252]	; (800431c <main+0x38c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
		std_dev(&instCNAbs.number[0], &ft_array.number[4]);
 8004226:	494e      	ldr	r1, [pc, #312]	; (8004360 <main+0x3d0>)
 8004228:	4845      	ldr	r0, [pc, #276]	; (8004340 <main+0x3b0>)
 800422a:	f7fc fd53 	bl	8000cd4 <std_dev>
		counter_array.number[9] = __HAL_TIM_GET_COUNTER(&htim2);
 800422e:	4b3b      	ldr	r3, [pc, #236]	; (800431c <main+0x38c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <main+0x394>)
 8004236:	6253      	str	r3, [r2, #36]	; 0x24

		// Standard deviation of the absolute centralized normalized absolute amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004238:	4b38      	ldr	r3, [pc, #224]	; (800431c <main+0x38c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2200      	movs	r2, #0
 800423e:	625a      	str	r2, [r3, #36]	; 0x24
		inst_absolute(&instCNAbs.number[0], &instAbsCNAbs.number[0]);
 8004240:	4948      	ldr	r1, [pc, #288]	; (8004364 <main+0x3d4>)
 8004242:	483f      	ldr	r0, [pc, #252]	; (8004340 <main+0x3b0>)
 8004244:	f7fc fa98 	bl	8000778 <inst_absolute>
		std_dev(&instAbsCNAbs.number[0], &ft_array.number[5]);
 8004248:	4947      	ldr	r1, [pc, #284]	; (8004368 <main+0x3d8>)
 800424a:	4846      	ldr	r0, [pc, #280]	; (8004364 <main+0x3d4>)
 800424c:	f7fc fd42 	bl	8000cd4 <std_dev>
		counter_array.number[10] = __HAL_TIM_GET_COUNTER(&htim2);
 8004250:	4b32      	ldr	r3, [pc, #200]	; (800431c <main+0x38c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	4a33      	ldr	r2, [pc, #204]	; (8004324 <main+0x394>)
 8004258:	6293      	str	r3, [r2, #40]	; 0x28

		// Mean Value of the Signal Magnitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800425a:	4b30      	ldr	r3, [pc, #192]	; (800431c <main+0x38c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2200      	movs	r2, #0
 8004260:	625a      	str	r2, [r3, #36]	; 0x24
		mean_of_signal_magnitude(&instAbs.number[0], &ft_array.number[6]);
 8004262:	4942      	ldr	r1, [pc, #264]	; (800436c <main+0x3dc>)
 8004264:	482e      	ldr	r0, [pc, #184]	; (8004320 <main+0x390>)
 8004266:	f7fc fd47 	bl	8000cf8 <mean_of_signal_magnitude>
		counter_array.number[11] = __HAL_TIM_GET_COUNTER(&htim2);
 800426a:	4b2c      	ldr	r3, [pc, #176]	; (800431c <main+0x38c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	4a2c      	ldr	r2, [pc, #176]	; (8004324 <main+0x394>)
 8004272:	62d3      	str	r3, [r2, #44]	; 0x2c

		// Squared Mean of the Signal Magnitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004274:	4b29      	ldr	r3, [pc, #164]	; (800431c <main+0x38c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2200      	movs	r2, #0
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
		squared_mean_of_signal_magnitude(&instAbs.number[0], &ft_array.number[7]);
 800427c:	493c      	ldr	r1, [pc, #240]	; (8004370 <main+0x3e0>)
 800427e:	4828      	ldr	r0, [pc, #160]	; (8004320 <main+0x390>)
 8004280:	f7fc fd4c 	bl	8000d1c <squared_mean_of_signal_magnitude>
		counter_array.number[12] = __HAL_TIM_GET_COUNTER(&htim2);
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <main+0x38c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	4a26      	ldr	r2, [pc, #152]	; (8004324 <main+0x394>)
 800428c:	6313      	str	r3, [r2, #48]	; 0x30

		// Normalized Sqrt Value of Sum of Amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800428e:	4b23      	ldr	r3, [pc, #140]	; (800431c <main+0x38c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2200      	movs	r2, #0
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
		normalized_sqrt_of_sum_of_amp(&instAbs.number[0], &ft_array.number[8]);
 8004296:	4937      	ldr	r1, [pc, #220]	; (8004374 <main+0x3e4>)
 8004298:	4821      	ldr	r0, [pc, #132]	; (8004320 <main+0x390>)
 800429a:	f7fc fd5b 	bl	8000d54 <normalized_sqrt_of_sum_of_amp>
		counter_array.number[13] = __HAL_TIM_GET_COUNTER(&htim2);
 800429e:	4b1f      	ldr	r3, [pc, #124]	; (800431c <main+0x38c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <main+0x394>)
 80042a6:	6353      	str	r3, [r2, #52]	; 0x34

		// Ratio of I/Q Components
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80042a8:	4b1c      	ldr	r3, [pc, #112]	; (800431c <main+0x38c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2200      	movs	r2, #0
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24
		ratio_iq(&rxBuffer.number[0], &ft_array.number[9]);
 80042b0:	4931      	ldr	r1, [pc, #196]	; (8004378 <main+0x3e8>)
 80042b2:	4818      	ldr	r0, [pc, #96]	; (8004314 <main+0x384>)
 80042b4:	f7fc fd84 	bl	8000dc0 <ratio_iq>
		counter_array.number[14] = __HAL_TIM_GET_COUNTER(&htim2);
 80042b8:	4b18      	ldr	r3, [pc, #96]	; (800431c <main+0x38c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	4a19      	ldr	r2, [pc, #100]	; (8004324 <main+0x394>)
 80042c0:	6393      	str	r3, [r2, #56]	; 0x38

		// Gmax
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <main+0x38c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24
		gmax(&rxBuffer.number[0], &ft_array.number[10]);
 80042ca:	492c      	ldr	r1, [pc, #176]	; (800437c <main+0x3ec>)
 80042cc:	4811      	ldr	r0, [pc, #68]	; (8004314 <main+0x384>)
 80042ce:	f7fc fdc9 	bl	8000e64 <gmax>
		counter_array.number[15] = __HAL_TIM_GET_COUNTER(&htim2);
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <main+0x38c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	4a12      	ldr	r2, [pc, #72]	; (8004324 <main+0x394>)
 80042da:	63d3      	str	r3, [r2, #60]	; 0x3c

		// Kurtosis of the Absolute Amplitude
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <main+0x38c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24
		kurtosis_of_abs_amplitude(&instAbs.number[0], &ft_array.number[11], frameSize);
 80042e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042e8:	461a      	mov	r2, r3
 80042ea:	4925      	ldr	r1, [pc, #148]	; (8004380 <main+0x3f0>)
 80042ec:	480c      	ldr	r0, [pc, #48]	; (8004320 <main+0x390>)
 80042ee:	f7fc fe8b 	bl	8001008 <kurtosis_of_abs_amplitude>
		counter_array.number[16] = __HAL_TIM_GET_COUNTER(&htim2);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <main+0x38c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <main+0x394>)
 80042fa:	6413      	str	r3, [r2, #64]	; 0x40

		// Kurtosis of the Absolute Frequency
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <main+0x38c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2200      	movs	r2, #0
 8004302:	625a      	str	r2, [r3, #36]	; 0x24
		kurtosis_of_abs_freq(&instAbsFreq.number[0], &ft_array.number[12], frameSize - 1);
 8004304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004308:	3b01      	subs	r3, #1
 800430a:	e03b      	b.n	8004384 <main+0x3f4>
 800430c:	24014160 	.word	0x24014160
 8004310:	58020400 	.word	0x58020400
 8004314:	24010094 	.word	0x24010094
 8004318:	58021000 	.word	0x58021000
 800431c:	24014170 	.word	0x24014170
 8004320:	24000094 	.word	0x24000094
 8004324:	24014094 	.word	0x24014094
 8004328:	24002094 	.word	0x24002094
 800432c:	24014098 	.word	0x24014098
 8004330:	24006094 	.word	0x24006094
 8004334:	2401409c 	.word	0x2401409c
 8004338:	24008094 	.word	0x24008094
 800433c:	240140a0 	.word	0x240140a0
 8004340:	2400c094 	.word	0x2400c094
 8004344:	240140a4 	.word	0x240140a4
 8004348:	24014104 	.word	0x24014104
 800434c:	24004094 	.word	0x24004094
 8004350:	24014108 	.word	0x24014108
 8004354:	2401410c 	.word	0x2401410c
 8004358:	2400a094 	.word	0x2400a094
 800435c:	24014110 	.word	0x24014110
 8004360:	24014114 	.word	0x24014114
 8004364:	2400e094 	.word	0x2400e094
 8004368:	24014118 	.word	0x24014118
 800436c:	2401411c 	.word	0x2401411c
 8004370:	24014120 	.word	0x24014120
 8004374:	24014124 	.word	0x24014124
 8004378:	24014128 	.word	0x24014128
 800437c:	2401412c 	.word	0x2401412c
 8004380:	24014130 	.word	0x24014130
 8004384:	461a      	mov	r2, r3
 8004386:	494c      	ldr	r1, [pc, #304]	; (80044b8 <main+0x528>)
 8004388:	484c      	ldr	r0, [pc, #304]	; (80044bc <main+0x52c>)
 800438a:	f7fc ff7b 	bl	8001284 <kurtosis_of_abs_freq>
		counter_array.number[17] = __HAL_TIM_GET_COUNTER(&htim2);
 800438e:	4b4c      	ldr	r3, [pc, #304]	; (80044c0 <main+0x530>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	4a4b      	ldr	r2, [pc, #300]	; (80044c4 <main+0x534>)
 8004396:	6453      	str	r3, [r2, #68]	; 0x44

		// Cumulant 20
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004398:	4b49      	ldr	r3, [pc, #292]	; (80044c0 <main+0x530>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2200      	movs	r2, #0
 800439e:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_20(&rxBuffer.number[0], &ft_array.number[13]);
 80043a0:	4949      	ldr	r1, [pc, #292]	; (80044c8 <main+0x538>)
 80043a2:	484a      	ldr	r0, [pc, #296]	; (80044cc <main+0x53c>)
 80043a4:	f7fe ffa2 	bl	80032ec <cumulant_20>
		counter_array.number[18] = __HAL_TIM_GET_COUNTER(&htim2);
 80043a8:	4b45      	ldr	r3, [pc, #276]	; (80044c0 <main+0x530>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	4a45      	ldr	r2, [pc, #276]	; (80044c4 <main+0x534>)
 80043b0:	6493      	str	r3, [r2, #72]	; 0x48

		// Cumulant 21
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80043b2:	4b43      	ldr	r3, [pc, #268]	; (80044c0 <main+0x530>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_21(&rxBuffer.number[0], &ft_array.number[14]);
 80043ba:	4945      	ldr	r1, [pc, #276]	; (80044d0 <main+0x540>)
 80043bc:	4843      	ldr	r0, [pc, #268]	; (80044cc <main+0x53c>)
 80043be:	f7fe ffbb 	bl	8003338 <cumulant_21>
		counter_array.number[19] = __HAL_TIM_GET_COUNTER(&htim2);
 80043c2:	4b3f      	ldr	r3, [pc, #252]	; (80044c0 <main+0x530>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	4a3e      	ldr	r2, [pc, #248]	; (80044c4 <main+0x534>)
 80043ca:	64d3      	str	r3, [r2, #76]	; 0x4c

		// Cumulant 40
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80043cc:	4b3c      	ldr	r3, [pc, #240]	; (80044c0 <main+0x530>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2200      	movs	r2, #0
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_40(&rxBuffer.number[0], &ft_array.number[15]);
 80043d4:	493f      	ldr	r1, [pc, #252]	; (80044d4 <main+0x544>)
 80043d6:	483d      	ldr	r0, [pc, #244]	; (80044cc <main+0x53c>)
 80043d8:	f7fe ffbb 	bl	8003352 <cumulant_40>
		counter_array.number[20] = __HAL_TIM_GET_COUNTER(&htim2);
 80043dc:	4b38      	ldr	r3, [pc, #224]	; (80044c0 <main+0x530>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	4a38      	ldr	r2, [pc, #224]	; (80044c4 <main+0x534>)
 80043e4:	6513      	str	r3, [r2, #80]	; 0x50

		// Cumulant 41
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80043e6:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <main+0x530>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2200      	movs	r2, #0
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_41(&rxBuffer.number[0], &ft_array.number[16]);
 80043ee:	493a      	ldr	r1, [pc, #232]	; (80044d8 <main+0x548>)
 80043f0:	4836      	ldr	r0, [pc, #216]	; (80044cc <main+0x53c>)
 80043f2:	f7ff f814 	bl	800341e <cumulant_41>
		counter_array.number[21] = __HAL_TIM_GET_COUNTER(&htim2);
 80043f6:	4b32      	ldr	r3, [pc, #200]	; (80044c0 <main+0x530>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	4a31      	ldr	r2, [pc, #196]	; (80044c4 <main+0x534>)
 80043fe:	6553      	str	r3, [r2, #84]	; 0x54

		// Cumulant 42
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004400:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <main+0x530>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2200      	movs	r2, #0
 8004406:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_42(&rxBuffer.number[0], &ft_array.number[17]);
 8004408:	4934      	ldr	r1, [pc, #208]	; (80044dc <main+0x54c>)
 800440a:	4830      	ldr	r0, [pc, #192]	; (80044cc <main+0x53c>)
 800440c:	f7ff f861 	bl	80034d2 <cumulant_42>
		counter_array.number[22] = __HAL_TIM_GET_COUNTER(&htim2);
 8004410:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <main+0x530>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	4a2b      	ldr	r2, [pc, #172]	; (80044c4 <main+0x534>)
 8004418:	6593      	str	r3, [r2, #88]	; 0x58

		// Cumulant 60
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800441a:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <main+0x530>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_60(&rxBuffer.number[0], &ft_array.number[18]);
 8004422:	492f      	ldr	r1, [pc, #188]	; (80044e0 <main+0x550>)
 8004424:	4829      	ldr	r0, [pc, #164]	; (80044cc <main+0x53c>)
 8004426:	f7ff f8cc 	bl	80035c2 <cumulant_60>
		counter_array.number[23] = __HAL_TIM_GET_COUNTER(&htim2);
 800442a:	4b25      	ldr	r3, [pc, #148]	; (80044c0 <main+0x530>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <main+0x534>)
 8004432:	65d3      	str	r3, [r2, #92]	; 0x5c

		// Cumulant 61
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004434:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <main+0x530>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2200      	movs	r2, #0
 800443a:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_61(&rxBuffer.number[0], &ft_array.number[19]);
 800443c:	4929      	ldr	r1, [pc, #164]	; (80044e4 <main+0x554>)
 800443e:	4823      	ldr	r0, [pc, #140]	; (80044cc <main+0x53c>)
 8004440:	f7ff f971 	bl	8003726 <cumulant_61>
		counter_array.number[24] = __HAL_TIM_GET_COUNTER(&htim2);
 8004444:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <main+0x530>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <main+0x534>)
 800444c:	6613      	str	r3, [r2, #96]	; 0x60

		// Cumulant 62
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800444e:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <main+0x530>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_62(&rxBuffer.number[0], &ft_array.number[20]);
 8004456:	4924      	ldr	r1, [pc, #144]	; (80044e8 <main+0x558>)
 8004458:	481c      	ldr	r0, [pc, #112]	; (80044cc <main+0x53c>)
 800445a:	f7ff fa34 	bl	80038c6 <cumulant_62>
		counter_array.number[25] = __HAL_TIM_GET_COUNTER(&htim2);
 800445e:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <main+0x530>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <main+0x534>)
 8004466:	6653      	str	r3, [r2, #100]	; 0x64

		// Cumulant 63
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <main+0x530>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2200      	movs	r2, #0
 800446e:	625a      	str	r2, [r3, #36]	; 0x24
		cumulant_63(&rxBuffer.number[0], &ft_array.number[21]);
 8004470:	491e      	ldr	r1, [pc, #120]	; (80044ec <main+0x55c>)
 8004472:	4816      	ldr	r0, [pc, #88]	; (80044cc <main+0x53c>)
 8004474:	f7ff fb63 	bl	8003b3e <cumulant_63>
		counter_array.number[26] = __HAL_TIM_GET_COUNTER(&htim2);
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <main+0x530>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	4a11      	ldr	r2, [pc, #68]	; (80044c4 <main+0x534>)
 8004480:	6693      	str	r3, [r2, #104]	; 0x68

		transmit_features(&ft_array.bytes[0], &counter_array.bytes[20]);
 8004482:	491b      	ldr	r1, [pc, #108]	; (80044f0 <main+0x560>)
 8004484:	481b      	ldr	r0, [pc, #108]	; (80044f4 <main+0x564>)
 8004486:	f000 f9a7 	bl	80047d8 <transmit_features>

		// Evaluate neural network
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <main+0x530>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	625a      	str	r2, [r3, #36]	; 0x24
		quantize_features(&ft_array.number[0], &q15_input_vector[0]);
 8004492:	f107 0308 	add.w	r3, r7, #8
 8004496:	4619      	mov	r1, r3
 8004498:	4816      	ldr	r0, [pc, #88]	; (80044f4 <main+0x564>)
 800449a:	f000 faa5 	bl	80049e8 <quantize_features>
		// fully_connected_run(&q15_input_vector[0], &predicted.number);
		counter_array.number[27] = __HAL_TIM_GET_COUNTER(&htim2);
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <main+0x530>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <main+0x534>)
 80044a6:	66d3      	str	r3, [r2, #108]	; 0x6c
		transmit_prediction(&predicted.bytes[0], &counter_array.bytes[4*27]);
 80044a8:	4913      	ldr	r1, [pc, #76]	; (80044f8 <main+0x568>)
 80044aa:	4814      	ldr	r0, [pc, #80]	; (80044fc <main+0x56c>)
 80044ac:	f000 f938 	bl	8004720 <transmit_prediction>
		/*************************************************************************************************/
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		blink_orange_slow();
 80044b0:	f000 f908 	bl	80046c4 <blink_orange_slow>
		if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 80044b4:	e5d9      	b.n	800406a <main+0xda>
 80044b6:	bf00      	nop
 80044b8:	24014134 	.word	0x24014134
 80044bc:	2400a094 	.word	0x2400a094
 80044c0:	24014170 	.word	0x24014170
 80044c4:	24014094 	.word	0x24014094
 80044c8:	24014138 	.word	0x24014138
 80044cc:	24010094 	.word	0x24010094
 80044d0:	2401413c 	.word	0x2401413c
 80044d4:	24014140 	.word	0x24014140
 80044d8:	24014144 	.word	0x24014144
 80044dc:	24014148 	.word	0x24014148
 80044e0:	2401414c 	.word	0x2401414c
 80044e4:	24014150 	.word	0x24014150
 80044e8:	24014154 	.word	0x24014154
 80044ec:	24014158 	.word	0x24014158
 80044f0:	240140a8 	.word	0x240140a8
 80044f4:	24014104 	.word	0x24014104
 80044f8:	24014100 	.word	0x24014100
 80044fc:	2401415c 	.word	0x2401415c

08004500 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b0cc      	sub	sp, #304	; 0x130
 8004504:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004506:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800450a:	224c      	movs	r2, #76	; 0x4c
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f007 fb02 	bl	800bb18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004514:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004518:	2220      	movs	r2, #32
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f007 fafb 	bl	800bb18 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004522:	f107 0308 	add.w	r3, r7, #8
 8004526:	4618      	mov	r0, r3
 8004528:	23bc      	movs	r3, #188	; 0xbc
 800452a:	461a      	mov	r2, r3
 800452c:	2100      	movs	r1, #0
 800452e:	f007 faf3 	bl	800bb18 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8004532:	2004      	movs	r0, #4
 8004534:	f001 fb14 	bl	8005b60 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004538:	1d3b      	adds	r3, r7, #4
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <SystemClock_Config+0x15c>)
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	4a46      	ldr	r2, [pc, #280]	; (800465c <SystemClock_Config+0x15c>)
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	62d3      	str	r3, [r2, #44]	; 0x2c
 800454a:	4b44      	ldr	r3, [pc, #272]	; (800465c <SystemClock_Config+0x15c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f003 0201 	and.w	r2, r3, #1
 8004552:	1d3b      	adds	r3, r7, #4
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	4b42      	ldr	r3, [pc, #264]	; (8004660 <SystemClock_Config+0x160>)
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	4a41      	ldr	r2, [pc, #260]	; (8004660 <SystemClock_Config+0x160>)
 800455c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004560:	6193      	str	r3, [r2, #24]
 8004562:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <SystemClock_Config+0x160>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800456a:	1d3b      	adds	r3, r7, #4
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	1d3b      	adds	r3, r7, #4
 8004570:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004572:	bf00      	nop
 8004574:	4b3a      	ldr	r3, [pc, #232]	; (8004660 <SystemClock_Config+0x160>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004580:	d1f8      	bne.n	8004574 <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004582:	2302      	movs	r3, #2
 8004584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004588:	2301      	movs	r3, #1
 800458a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800458e:	2340      	movs	r3, #64	; 0x40
 8004590:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004594:	2302      	movs	r3, #2
 8004596:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800459a:	2300      	movs	r3, #0
 800459c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80045a0:	2304      	movs	r3, #4
 80045a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 80045a6:	2332      	movs	r3, #50	; 0x32
 80045a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 80045ac:	2302      	movs	r3, #2
 80045ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80045b2:	2302      	movs	r3, #2
 80045b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80045b8:	2302      	movs	r3, #2
 80045ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80045be:	230c      	movs	r3, #12
 80045c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fb1d 	bl	8005c14 <HAL_RCC_OscConfig>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 80045e0:	f000 faf6 	bl	8004bd0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045e4:	233f      	movs	r3, #63	; 0x3f
 80045e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045ea:	2303      	movs	r3, #3
 80045ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80045f6:	2308      	movs	r3, #8
 80045f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80045fc:	2340      	movs	r3, #64	; 0x40
 80045fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004602:	2340      	movs	r3, #64	; 0x40
 8004604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800460c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004610:	2340      	movs	r3, #64	; 0x40
 8004612:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004616:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f001 ff09 	bl	8006434 <HAL_RCC_ClockConfig>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <SystemClock_Config+0x12c>
	{
		Error_Handler();
 8004628:	f000 fad2 	bl	8004bd0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800462c:	f107 0308 	add.w	r3, r7, #8
 8004630:	2202      	movs	r2, #2
 8004632:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8004634:	f107 0308 	add.w	r3, r7, #8
 8004638:	2203      	movs	r2, #3
 800463a:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800463c:	f107 0308 	add.w	r3, r7, #8
 8004640:	4618      	mov	r0, r3
 8004642:	f002 fa7b 	bl	8006b3c <HAL_RCCEx_PeriphCLKConfig>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <SystemClock_Config+0x150>
	{
		Error_Handler();
 800464c:	f000 fac0 	bl	8004bd0 <Error_Handler>
	}
}
 8004650:	bf00      	nop
 8004652:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	58000400 	.word	0x58000400
 8004660:	58024800 	.word	0x58024800

08004664 <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8004668:	2200      	movs	r2, #0
 800466a:	2101      	movs	r1, #1
 800466c:	4807      	ldr	r0, [pc, #28]	; (800468c <clear_leds+0x28>)
 800466e:	f001 fa2f 	bl	8005ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8004672:	2200      	movs	r2, #0
 8004674:	2102      	movs	r1, #2
 8004676:	4806      	ldr	r0, [pc, #24]	; (8004690 <clear_leds+0x2c>)
 8004678:	f001 fa2a 	bl	8005ad0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800467c:	2200      	movs	r2, #0
 800467e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004682:	4802      	ldr	r0, [pc, #8]	; (800468c <clear_leds+0x28>)
 8004684:	f001 fa24 	bl	8005ad0 <HAL_GPIO_WritePin>
}
 8004688:	bf00      	nop
 800468a:	bd80      	pop	{r7, pc}
 800468c:	58020400 	.word	0x58020400
 8004690:	58021000 	.word	0x58021000

08004694 <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8004698:	2200      	movs	r2, #0
 800469a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800469e:	4808      	ldr	r0, [pc, #32]	; (80046c0 <blink_red_fast+0x2c>)
 80046a0:	f001 fa16 	bl	8005ad0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80046a4:	2032      	movs	r0, #50	; 0x32
 80046a6:	f000 fce1 	bl	800506c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80046aa:	2201      	movs	r2, #1
 80046ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046b0:	4803      	ldr	r0, [pc, #12]	; (80046c0 <blink_red_fast+0x2c>)
 80046b2:	f001 fa0d 	bl	8005ad0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80046b6:	2032      	movs	r0, #50	; 0x32
 80046b8:	f000 fcd8 	bl	800506c <HAL_Delay>
}
 80046bc:	bf00      	nop
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	58020400 	.word	0x58020400

080046c4 <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80046c8:	2200      	movs	r2, #0
 80046ca:	2102      	movs	r1, #2
 80046cc:	4808      	ldr	r0, [pc, #32]	; (80046f0 <blink_orange_slow+0x2c>)
 80046ce:	f001 f9ff 	bl	8005ad0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80046d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046d6:	f000 fcc9 	bl	800506c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 80046da:	2201      	movs	r2, #1
 80046dc:	2102      	movs	r1, #2
 80046de:	4804      	ldr	r0, [pc, #16]	; (80046f0 <blink_orange_slow+0x2c>)
 80046e0:	f001 f9f6 	bl	8005ad0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80046e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046e8:	f000 fcc0 	bl	800506c <HAL_Delay>
}
 80046ec:	bf00      	nop
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	58021000 	.word	0x58021000

080046f4 <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80046f8:	2200      	movs	r2, #0
 80046fa:	2101      	movs	r1, #1
 80046fc:	4807      	ldr	r0, [pc, #28]	; (800471c <blink_green+0x28>)
 80046fe:	f001 f9e7 	bl	8005ad0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8004702:	20c8      	movs	r0, #200	; 0xc8
 8004704:	f000 fcb2 	bl	800506c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8004708:	2201      	movs	r2, #1
 800470a:	2101      	movs	r1, #1
 800470c:	4803      	ldr	r0, [pc, #12]	; (800471c <blink_green+0x28>)
 800470e:	f001 f9df 	bl	8005ad0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8004712:	20c8      	movs	r0, #200	; 0xc8
 8004714:	f000 fcaa 	bl	800506c <HAL_Delay>
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}
 800471c:	58020400 	.word	0x58020400

08004720 <transmit_prediction>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void transmit_prediction(uint8_t *value, uint8_t *counter){
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800472a:	4827      	ldr	r0, [pc, #156]	; (80047c8 <transmit_prediction+0xa8>)
 800472c:	f005 f9a4 	bl	8009a78 <UART_CheckIdleState>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d13f      	bne.n	80047b6 <transmit_prediction+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8004736:	2204      	movs	r2, #4
 8004738:	4924      	ldr	r1, [pc, #144]	; (80047cc <transmit_prediction+0xac>)
 800473a:	4823      	ldr	r0, [pc, #140]	; (80047c8 <transmit_prediction+0xa8>)
 800473c:	f004 f864 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004740:	e001      	b.n	8004746 <transmit_prediction+0x26>
			blink_red_fast();
 8004742:	f7ff ffa7 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <transmit_prediction+0xb0>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d1f8      	bne.n	8004742 <transmit_prediction+0x22>
		}
		UartReady = RESET;
 8004750:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <transmit_prediction+0xb0>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4);
 8004756:	2204      	movs	r2, #4
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	481b      	ldr	r0, [pc, #108]	; (80047c8 <transmit_prediction+0xa8>)
 800475c:	f004 f854 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004760:	e001      	b.n	8004766 <transmit_prediction+0x46>
			blink_red_fast();
 8004762:	f7ff ff97 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <transmit_prediction+0xb0>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d1f8      	bne.n	8004762 <transmit_prediction+0x42>
		}
		UartReady = RESET;
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <transmit_prediction+0xb0>)
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 8004776:	2204      	movs	r2, #4
 8004778:	6839      	ldr	r1, [r7, #0]
 800477a:	4813      	ldr	r0, [pc, #76]	; (80047c8 <transmit_prediction+0xa8>)
 800477c:	f004 f844 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004780:	e001      	b.n	8004786 <transmit_prediction+0x66>
			blink_red_fast();
 8004782:	f7ff ff87 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <transmit_prediction+0xb0>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d1f8      	bne.n	8004782 <transmit_prediction+0x62>
		}
		UartReady = RESET;
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <transmit_prediction+0xb0>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8004796:	2204      	movs	r2, #4
 8004798:	490e      	ldr	r1, [pc, #56]	; (80047d4 <transmit_prediction+0xb4>)
 800479a:	480b      	ldr	r0, [pc, #44]	; (80047c8 <transmit_prediction+0xa8>)
 800479c:	f004 f834 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80047a0:	e001      	b.n	80047a6 <transmit_prediction+0x86>
			blink_red_fast();
 80047a2:	f7ff ff77 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 80047a6:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <transmit_prediction+0xb0>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d1f8      	bne.n	80047a2 <transmit_prediction+0x82>
		}
		UartReady = RESET;
 80047b0:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <transmit_prediction+0xb0>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 80047b6:	f7ff ff85 	bl	80046c4 <blink_orange_slow>
	clear_leds();
 80047ba:	f7ff ff53 	bl	8004664 <clear_leds>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	240141bc 	.word	0x240141bc
 80047cc:	0800c180 	.word	0x0800c180
 80047d0:	24014160 	.word	0x24014160
 80047d4:	0800c184 	.word	0x0800c184

080047d8 <transmit_features>:
void transmit_features(uint8_t *value, uint8_t *counter){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80047e2:	4827      	ldr	r0, [pc, #156]	; (8004880 <transmit_features+0xa8>)
 80047e4:	f005 f948 	bl	8009a78 <UART_CheckIdleState>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13f      	bne.n	800486e <transmit_features+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80047ee:	2204      	movs	r2, #4
 80047f0:	4924      	ldr	r1, [pc, #144]	; (8004884 <transmit_features+0xac>)
 80047f2:	4823      	ldr	r0, [pc, #140]	; (8004880 <transmit_features+0xa8>)
 80047f4:	f004 f808 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80047f8:	e001      	b.n	80047fe <transmit_features+0x26>
			blink_red_fast();
 80047fa:	f7ff ff4b 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 80047fe:	4b22      	ldr	r3, [pc, #136]	; (8004888 <transmit_features+0xb0>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d1f8      	bne.n	80047fa <transmit_features+0x22>
		}
		UartReady = RESET;
 8004808:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <transmit_features+0xb0>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4*22);
 800480e:	2258      	movs	r2, #88	; 0x58
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	481b      	ldr	r0, [pc, #108]	; (8004880 <transmit_features+0xa8>)
 8004814:	f003 fff8 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004818:	e001      	b.n	800481e <transmit_features+0x46>
			blink_red_fast();
 800481a:	f7ff ff3b 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 800481e:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <transmit_features+0xb0>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d1f8      	bne.n	800481a <transmit_features+0x42>
		}
		UartReady = RESET;
 8004828:	4b17      	ldr	r3, [pc, #92]	; (8004888 <transmit_features+0xb0>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4*22);
 800482e:	2258      	movs	r2, #88	; 0x58
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	4813      	ldr	r0, [pc, #76]	; (8004880 <transmit_features+0xa8>)
 8004834:	f003 ffe8 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004838:	e001      	b.n	800483e <transmit_features+0x66>
			blink_red_fast();
 800483a:	f7ff ff2b 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <transmit_features+0xb0>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d1f8      	bne.n	800483a <transmit_features+0x62>
		}
		UartReady = RESET;
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <transmit_features+0xb0>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 800484e:	2204      	movs	r2, #4
 8004850:	490e      	ldr	r1, [pc, #56]	; (800488c <transmit_features+0xb4>)
 8004852:	480b      	ldr	r0, [pc, #44]	; (8004880 <transmit_features+0xa8>)
 8004854:	f003 ffd8 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004858:	e001      	b.n	800485e <transmit_features+0x86>
			blink_red_fast();
 800485a:	f7ff ff1b 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <transmit_features+0xb0>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d1f8      	bne.n	800485a <transmit_features+0x82>
		}
		UartReady = RESET;
 8004868:	4b07      	ldr	r3, [pc, #28]	; (8004888 <transmit_features+0xb0>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 800486e:	f7ff ff29 	bl	80046c4 <blink_orange_slow>
	clear_leds();
 8004872:	f7ff fef7 	bl	8004664 <clear_leds>
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	240141bc 	.word	0x240141bc
 8004884:	0800c180 	.word	0x0800c180
 8004888:	24014160 	.word	0x24014160
 800488c:	0800c184 	.word	0x0800c184

08004890 <transmit_array>:
void transmit_array(uint8_t *array, uint16_t size, uint8_t *counter){
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	460b      	mov	r3, r1
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	817b      	strh	r3, [r7, #10]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800489e:	4827      	ldr	r0, [pc, #156]	; (800493c <transmit_array+0xac>)
 80048a0:	f005 f8ea 	bl	8009a78 <UART_CheckIdleState>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d140      	bne.n	800492c <transmit_array+0x9c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80048aa:	2204      	movs	r2, #4
 80048ac:	4924      	ldr	r1, [pc, #144]	; (8004940 <transmit_array+0xb0>)
 80048ae:	4823      	ldr	r0, [pc, #140]	; (800493c <transmit_array+0xac>)
 80048b0:	f003 ffaa 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80048b4:	e001      	b.n	80048ba <transmit_array+0x2a>
			blink_red_fast();
 80048b6:	f7ff feed 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 80048ba:	4b22      	ldr	r3, [pc, #136]	; (8004944 <transmit_array+0xb4>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d1f8      	bne.n	80048b6 <transmit_array+0x26>
		}
		UartReady = RESET;
 80048c4:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <transmit_array+0xb4>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	461a      	mov	r2, r3
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	481a      	ldr	r0, [pc, #104]	; (800493c <transmit_array+0xac>)
 80048d2:	f003 ff99 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80048d6:	e001      	b.n	80048dc <transmit_array+0x4c>
			blink_red_fast();
 80048d8:	f7ff fedc 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <transmit_array+0xb4>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d1f8      	bne.n	80048d8 <transmit_array+0x48>
		}
		UartReady = RESET;
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <transmit_array+0xb4>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 80048ec:	2204      	movs	r2, #4
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4812      	ldr	r0, [pc, #72]	; (800493c <transmit_array+0xac>)
 80048f2:	f003 ff89 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80048f6:	e001      	b.n	80048fc <transmit_array+0x6c>
			blink_red_fast();
 80048f8:	f7ff fecc 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <transmit_array+0xb4>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d1f8      	bne.n	80048f8 <transmit_array+0x68>
		}
		UartReady = RESET;
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <transmit_array+0xb4>)
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 800490c:	2204      	movs	r2, #4
 800490e:	490e      	ldr	r1, [pc, #56]	; (8004948 <transmit_array+0xb8>)
 8004910:	480a      	ldr	r0, [pc, #40]	; (800493c <transmit_array+0xac>)
 8004912:	f003 ff79 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004916:	e001      	b.n	800491c <transmit_array+0x8c>
			blink_red_fast();
 8004918:	f7ff febc 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <transmit_array+0xb4>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d1f8      	bne.n	8004918 <transmit_array+0x88>
		}
		UartReady = RESET;
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <transmit_array+0xb4>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 800492c:	f7ff feca 	bl	80046c4 <blink_orange_slow>
	clear_leds();
 8004930:	f7ff fe98 	bl	8004664 <clear_leds>
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	240141bc 	.word	0x240141bc
 8004940:	0800c180 	.word	0x0800c180
 8004944:	24014160 	.word	0x24014160
 8004948:	0800c184 	.word	0x0800c184

0800494c <transmit_echo>:
void transmit_echo(uint8_t *array, uint16_t size){
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	807b      	strh	r3, [r7, #2]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8004958:	481f      	ldr	r0, [pc, #124]	; (80049d8 <transmit_echo+0x8c>)
 800495a:	f005 f88d 	bl	8009a78 <UART_CheckIdleState>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d130      	bne.n	80049c6 <transmit_echo+0x7a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8004964:	2204      	movs	r2, #4
 8004966:	491d      	ldr	r1, [pc, #116]	; (80049dc <transmit_echo+0x90>)
 8004968:	481b      	ldr	r0, [pc, #108]	; (80049d8 <transmit_echo+0x8c>)
 800496a:	f003 ff4d 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800496e:	e001      	b.n	8004974 <transmit_echo+0x28>
			blink_red_fast();
 8004970:	f7ff fe90 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 8004974:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <transmit_echo+0x94>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b01      	cmp	r3, #1
 800497c:	d1f8      	bne.n	8004970 <transmit_echo+0x24>
		}
		UartReady = RESET;
 800497e:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <transmit_echo+0x94>)
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 8004984:	887b      	ldrh	r3, [r7, #2]
 8004986:	461a      	mov	r2, r3
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4813      	ldr	r0, [pc, #76]	; (80049d8 <transmit_echo+0x8c>)
 800498c:	f003 ff3c 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004990:	e001      	b.n	8004996 <transmit_echo+0x4a>
			blink_red_fast();
 8004992:	f7ff fe7f 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <transmit_echo+0x94>)
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d1f8      	bne.n	8004992 <transmit_echo+0x46>
		}
		UartReady = RESET;
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <transmit_echo+0x94>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 80049a6:	2204      	movs	r2, #4
 80049a8:	490e      	ldr	r1, [pc, #56]	; (80049e4 <transmit_echo+0x98>)
 80049aa:	480b      	ldr	r0, [pc, #44]	; (80049d8 <transmit_echo+0x8c>)
 80049ac:	f003 ff2c 	bl	8008808 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80049b0:	e001      	b.n	80049b6 <transmit_echo+0x6a>
			blink_red_fast();
 80049b2:	f7ff fe6f 	bl	8004694 <blink_red_fast>
		while(UartReady != SET){
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <transmit_echo+0x94>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d1f8      	bne.n	80049b2 <transmit_echo+0x66>
		}
		UartReady = RESET;
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <transmit_echo+0x94>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
	}
	blink_orange_slow();
 80049c6:	f7ff fe7d 	bl	80046c4 <blink_orange_slow>
	clear_leds();
 80049ca:	f7ff fe4b 	bl	8004664 <clear_leds>
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	240141bc 	.word	0x240141bc
 80049dc:	0800c180 	.word	0x0800c180
 80049e0:	24014160 	.word	0x24014160
 80049e4:	0800c184 	.word	0x0800c184

080049e8 <quantize_features>:
void quantize_features(float32_t in[], q15_t out[]){
 80049e8:	b580      	push	{r7, lr}
 80049ea:	ed2d 8b02 	vpush	{d8}
 80049ee:	b08c      	sub	sp, #48	; 0x30
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
	const int16_t min_int16_t = SHRT_MIN;
 80049f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
	const int16_t max_int16_t = SHRT_MAX;
 80049fc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004a00:	857b      	strh	r3, [r7, #42]	; 0x2a
	const float32_t max_float = FLT_MAX;
 8004a02:	4b62      	ldr	r3, [pc, #392]	; (8004b8c <quantize_features+0x1a4>)
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24

	float32_t min_range = 0.0f;
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
	uint32_t min_index = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
	float32_t max_range = 0.0f;
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
	uint32_t max_index = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
	float32_t scale_factor_from_min_side = 0.0f;
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	623b      	str	r3, [r7, #32]
	float32_t scale_factor_from_max_side = 0.0f;
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
	float32_t scale_factor = 0.0f;
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]

	arm_min_f32(in, number_of_features, &min_range, &min_index);
 8004a2c:	2116      	movs	r1, #22
 8004a2e:	f107 0310 	add.w	r3, r7, #16
 8004a32:	f107 0214 	add.w	r2, r7, #20
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f005 fe06 	bl	800a648 <arm_min_f32>
	arm_max_f32(in, number_of_features, &max_range, &max_index);
 8004a3c:	2116      	movs	r1, #22
 8004a3e:	f107 0308 	add.w	r3, r7, #8
 8004a42:	f107 020c 	add.w	r2, r7, #12
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f005 fe9a 	bl	800a780 <arm_max_f32>
	scale_factor_from_min_side = (min_int16_t * min_range > 0) ? min_int16_t / min_range : max_float;
 8004a4c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a58:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a68:	dd0a      	ble.n	8004a80 <quantize_features+0x98>
 8004a6a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a76:	ed97 7a05 	vldr	s14, [r7, #20]
 8004a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a7e:	e001      	b.n	8004a84 <quantize_features+0x9c>
 8004a80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a84:	edc7 7a08 	vstr	s15, [r7, #32]
	scale_factor_from_max_side = (max_int16_t * max_range > 0) ? max_int16_t / max_range : max_float;
 8004a88:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa4:	dd0a      	ble.n	8004abc <quantize_features+0xd4>
 8004aa6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ab2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aba:	e001      	b.n	8004ac0 <quantize_features+0xd8>
 8004abc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004ac0:	edc7 7a07 	vstr	s15, [r7, #28]
	scale_factor = fminf(scale_factor_from_min_side, scale_factor_from_max_side);
 8004ac4:	edd7 0a07 	vldr	s1, [r7, #28]
 8004ac8:	ed97 0a08 	vldr	s0, [r7, #32]
 8004acc:	f007 f901 	bl	800bcd2 <fminf>
 8004ad0:	ed87 0a06 	vstr	s0, [r7, #24]

	min_range = min_int16_t / scale_factor;
 8004ad4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ae0:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ae8:	edc7 7a05 	vstr	s15, [r7, #20]
	max_range = max_int16_t / scale_factor;
 8004aec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004af8:	ed97 7a06 	vldr	s14, [r7, #24]
 8004afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b00:	edc7 7a03 	vstr	s15, [r7, #12]

	for(uint8_t i = 0; i < number_of_features; i++){
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b0a:	e034      	b.n	8004b76 <quantize_features+0x18e>
		out[i] = (int16_t) roundf(fminf(max_range, fmaxf(min_range, in[i])) * scale_factor);
 8004b0c:	ed97 8a03 	vldr	s16, [r7, #12]
 8004b10:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	ed93 7a00 	vldr	s14, [r3]
 8004b22:	eef0 0a47 	vmov.f32	s1, s14
 8004b26:	eeb0 0a67 	vmov.f32	s0, s15
 8004b2a:	f007 f8b7 	bl	800bc9c <fmaxf>
 8004b2e:	eef0 7a40 	vmov.f32	s15, s0
 8004b32:	eef0 0a67 	vmov.f32	s1, s15
 8004b36:	eeb0 0a48 	vmov.f32	s0, s16
 8004b3a:	f007 f8ca 	bl	800bcd2 <fminf>
 8004b3e:	eeb0 7a40 	vmov.f32	s14, s0
 8004b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b4e:	f007 f8f7 	bl	800bd40 <roundf>
 8004b52:	eef0 7a40 	vmov.f32	s15, s0
 8004b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	4413      	add	r3, r2
 8004b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b64:	ee17 2a90 	vmov	r2, s15
 8004b68:	b212      	sxth	r2, r2
 8004b6a:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < number_of_features; i++){
 8004b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b70:	3301      	adds	r3, #1
 8004b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b7a:	2216      	movs	r2, #22
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d3c5      	bcc.n	8004b0c <quantize_features+0x124>
	}
}
 8004b80:	bf00      	nop
 8004b82:	3730      	adds	r7, #48	; 0x30
 8004b84:	46bd      	mov	sp, r7
 8004b86:	ecbd 8b02 	vpop	{d8}
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	7f7fffff 	.word	0x7f7fffff

08004b90 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <HAL_UART_TxCpltCallback+0x1c>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	24014160 	.word	0x24014160

08004bb0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <HAL_UART_RxCpltCallback+0x1c>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	24014160 	.word	0x24014160

08004bd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_MspInit+0x30>)
 8004be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bec:	4a08      	ldr	r2, [pc, #32]	; (8004c10 <HAL_MspInit+0x30>)
 8004bee:	f043 0302 	orr.w	r3, r3, #2
 8004bf2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004bf6:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_MspInit+0x30>)
 8004bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	58024400 	.word	0x58024400

08004c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c22:	b480      	push	{r7}
 8004c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c26:	e7fe      	b.n	8004c26 <HardFault_Handler+0x4>

08004c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c2c:	e7fe      	b.n	8004c2c <MemManage_Handler+0x4>

08004c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c32:	e7fe      	b.n	8004c32 <BusFault_Handler+0x4>

08004c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c38:	e7fe      	b.n	8004c38 <UsageFault_Handler+0x4>

08004c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c68:	f000 f9e0 	bl	800502c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c6c:	bf00      	nop
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c74:	4802      	ldr	r0, [pc, #8]	; (8004c80 <USART3_IRQHandler+0x10>)
 8004c76:	f003 ff23 	bl	8008ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	240141bc 	.word	0x240141bc

08004c84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <_sbrk+0x50>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <_sbrk+0x16>
		heap_end = &end;
 8004c94:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <_sbrk+0x50>)
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <_sbrk+0x54>)
 8004c98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <_sbrk+0x50>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <_sbrk+0x50>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	466a      	mov	r2, sp
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d907      	bls.n	8004cbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004cae:	f006 fef9 	bl	800baa4 <__errno>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbc:	e006      	b.n	8004ccc <_sbrk+0x48>
	}

	heap_end += incr;
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <_sbrk+0x50>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	4a03      	ldr	r2, [pc, #12]	; (8004cd4 <_sbrk+0x50>)
 8004cc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004cca:	68fb      	ldr	r3, [r7, #12]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	24014164 	.word	0x24014164
 8004cd8:	24014250 	.word	0x24014250

08004cdc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ce2:	f107 0310 	add.w	r3, r7, #16
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	605a      	str	r2, [r3, #4]
 8004cec:	609a      	str	r2, [r3, #8]
 8004cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cf0:	1d3b      	adds	r3, r7, #4
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8004cfa:	4b1e      	ldr	r3, [pc, #120]	; (8004d74 <MX_TIM2_Init+0x98>)
 8004cfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004d02:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <MX_TIM2_Init+0x98>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <MX_TIM2_Init+0x98>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004d0e:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <MX_TIM2_Init+0x98>)
 8004d10:	f04f 32ff 	mov.w	r2, #4294967295
 8004d14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d16:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <MX_TIM2_Init+0x98>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d1c:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <MX_TIM2_Init+0x98>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d22:	4814      	ldr	r0, [pc, #80]	; (8004d74 <MX_TIM2_Init+0x98>)
 8004d24:	f003 fa0a 	bl	800813c <HAL_TIM_Base_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004d2e:	f7ff ff4f 	bl	8004bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d38:	f107 0310 	add.w	r3, r7, #16
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	480d      	ldr	r0, [pc, #52]	; (8004d74 <MX_TIM2_Init+0x98>)
 8004d40:	f003 fa82 	bl	8008248 <HAL_TIM_ConfigClockSource>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004d4a:	f7ff ff41 	bl	8004bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d56:	1d3b      	adds	r3, r7, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4806      	ldr	r0, [pc, #24]	; (8004d74 <MX_TIM2_Init+0x98>)
 8004d5c:	f003 fc7c 	bl	8008658 <HAL_TIMEx_MasterConfigSynchronization>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004d66:	f7ff ff33 	bl	8004bd0 <Error_Handler>
  }

}
 8004d6a:	bf00      	nop
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	24014170 	.word	0x24014170

08004d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d88:	d10e      	bne.n	8004da8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <HAL_TIM_Base_MspInit+0x3c>)
 8004d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d90:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <HAL_TIM_Base_MspInit+0x3c>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <HAL_TIM_Base_MspInit+0x3c>)
 8004d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	58024400 	.word	0x58024400

08004db8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004dbc:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004dbe:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <MX_USART3_UART_Init+0x94>)
 8004dc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004dc2:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004dc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004dca:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004dd0:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004dde:	220c      	movs	r2, #12
 8004de0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004de2:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004de8:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004dee:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004df4:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e00:	4811      	ldr	r0, [pc, #68]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004e02:	f003 fcb1 	bl	8008768 <HAL_UART_Init>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004e0c:	f7ff fee0 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e10:	2100      	movs	r1, #0
 8004e12:	480d      	ldr	r0, [pc, #52]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004e14:	f005 fa6d 	bl	800a2f2 <HAL_UARTEx_SetTxFifoThreshold>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004e1e:	f7ff fed7 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e22:	2100      	movs	r1, #0
 8004e24:	4808      	ldr	r0, [pc, #32]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004e26:	f005 faa2 	bl	800a36e <HAL_UARTEx_SetRxFifoThreshold>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004e30:	f7ff fece 	bl	8004bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004e34:	4804      	ldr	r0, [pc, #16]	; (8004e48 <MX_USART3_UART_Init+0x90>)
 8004e36:	f005 fa23 	bl	800a280 <HAL_UARTEx_DisableFifoMode>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004e40:	f7ff fec6 	bl	8004bd0 <Error_Handler>
  }

}
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	240141bc 	.word	0x240141bc
 8004e4c:	40004800 	.word	0x40004800

08004e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <HAL_UART_MspInit+0x98>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d136      	bne.n	8004ee0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e72:	4b1e      	ldr	r3, [pc, #120]	; (8004eec <HAL_UART_MspInit+0x9c>)
 8004e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e78:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <HAL_UART_MspInit+0x9c>)
 8004e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e82:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <HAL_UART_MspInit+0x9c>)
 8004e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e90:	4b16      	ldr	r3, [pc, #88]	; (8004eec <HAL_UART_MspInit+0x9c>)
 8004e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e96:	4a15      	ldr	r2, [pc, #84]	; (8004eec <HAL_UART_MspInit+0x9c>)
 8004e98:	f043 0308 	orr.w	r3, r3, #8
 8004e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <HAL_UART_MspInit+0x9c>)
 8004ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004eae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ec0:	2307      	movs	r3, #7
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ec4:	f107 0314 	add.w	r3, r7, #20
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4809      	ldr	r0, [pc, #36]	; (8004ef0 <HAL_UART_MspInit+0xa0>)
 8004ecc:	f000 fc50 	bl	8005770 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	2027      	movs	r0, #39	; 0x27
 8004ed6:	f000 f9d2 	bl	800527e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004eda:	2027      	movs	r0, #39	; 0x27
 8004edc:	f000 f9e9 	bl	80052b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004ee0:	bf00      	nop
 8004ee2:	3728      	adds	r7, #40	; 0x28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40004800 	.word	0x40004800
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	58020c00 	.word	0x58020c00

08004ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ef8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004efa:	e003      	b.n	8004f04 <LoopCopyDataInit>

08004efc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004efe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f02:	3104      	adds	r1, #4

08004f04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f04:	480b      	ldr	r0, [pc, #44]	; (8004f34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004f08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f0c:	d3f6      	bcc.n	8004efc <CopyDataInit>
  ldr  r2, =_sbss
 8004f0e:	4a0b      	ldr	r2, [pc, #44]	; (8004f3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004f10:	e002      	b.n	8004f18 <LoopFillZerobss>

08004f12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004f12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004f14:	f842 3b04 	str.w	r3, [r2], #4

08004f18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004f1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f1c:	d3f9      	bcc.n	8004f12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f1e:	f7fb fbbb 	bl	8000698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f22:	f006 fdc5 	bl	800bab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f26:	f7ff f833 	bl	8003f90 <main>
  bx  lr    
 8004f2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004f30:	08011fa8 	.word	0x08011fa8
  ldr  r0, =_sdata
 8004f34:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004f38:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8004f3c:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8004f40:	24014250 	.word	0x24014250

08004f44 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f44:	e7fe      	b.n	8004f44 <ADC3_IRQHandler>
	...

08004f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f4e:	2003      	movs	r0, #3
 8004f50:	f000 f98a 	bl	8005268 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f54:	f001 fc24 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 8004f58:	4601      	mov	r1, r0
 8004f5a:	4b15      	ldr	r3, [pc, #84]	; (8004fb0 <HAL_Init+0x68>)
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <HAL_Init+0x6c>)
 8004f66:	5cd3      	ldrb	r3, [r2, r3]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	fa21 f303 	lsr.w	r3, r1, r3
 8004f70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f72:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <HAL_Init+0x68>)
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	4a0e      	ldr	r2, [pc, #56]	; (8004fb4 <HAL_Init+0x6c>)
 8004f7c:	5cd3      	ldrb	r3, [r2, r3]
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
 8004f88:	4a0b      	ldr	r2, [pc, #44]	; (8004fb8 <HAL_Init+0x70>)
 8004f8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f8c:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <HAL_Init+0x74>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f92:	2000      	movs	r0, #0
 8004f94:	f000 f814 	bl	8004fc0 <HAL_InitTick>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e002      	b.n	8004fa8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004fa2:	f7ff fe1d 	bl	8004be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	0800c16c 	.word	0x0800c16c
 8004fb8:	24000004 	.word	0x24000004
 8004fbc:	24000000 	.word	0x24000000

08004fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <HAL_InitTick+0x60>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e021      	b.n	8005018 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004fd4:	4b13      	ldr	r3, [pc, #76]	; (8005024 <HAL_InitTick+0x64>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <HAL_InitTick+0x60>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f96f 	bl	80052ce <HAL_SYSTICK_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e00e      	b.n	8005018 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b0f      	cmp	r3, #15
 8004ffe:	d80a      	bhi.n	8005016 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005000:	2200      	movs	r2, #0
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	f000 f939 	bl	800527e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800500c:	4a06      	ldr	r2, [pc, #24]	; (8005028 <HAL_InitTick+0x68>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	e000      	b.n	8005018 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	2400000c 	.word	0x2400000c
 8005024:	24000000 	.word	0x24000000
 8005028:	24000008 	.word	0x24000008

0800502c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005030:	4b06      	ldr	r3, [pc, #24]	; (800504c <HAL_IncTick+0x20>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_IncTick+0x24>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4413      	add	r3, r2
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <HAL_IncTick+0x24>)
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	2400000c 	.word	0x2400000c
 8005050:	24014248 	.word	0x24014248

08005054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return uwTick;
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <HAL_GetTick+0x14>)
 800505a:	681b      	ldr	r3, [r3, #0]
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	24014248 	.word	0x24014248

0800506c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005074:	f7ff ffee 	bl	8005054 <HAL_GetTick>
 8005078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d005      	beq.n	8005092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005086:	4b09      	ldr	r3, [pc, #36]	; (80050ac <HAL_Delay+0x40>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005092:	bf00      	nop
 8005094:	f7ff ffde 	bl	8005054 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d8f7      	bhi.n	8005094 <HAL_Delay+0x28>
  {
  }
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	2400000c 	.word	0x2400000c

080050b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_GetREVID+0x14>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0c1b      	lsrs	r3, r3, #16
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	5c001000 	.word	0x5c001000

080050c8 <__NVIC_SetPriorityGrouping>:
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <__NVIC_SetPriorityGrouping+0x40>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050e4:	4013      	ands	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <__NVIC_SetPriorityGrouping+0x44>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050f6:	4a04      	ldr	r2, [pc, #16]	; (8005108 <__NVIC_SetPriorityGrouping+0x40>)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	60d3      	str	r3, [r2, #12]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	e000ed00 	.word	0xe000ed00
 800510c:	05fa0000 	.word	0x05fa0000

08005110 <__NVIC_GetPriorityGrouping>:
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__NVIC_GetPriorityGrouping+0x18>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	0a1b      	lsrs	r3, r3, #8
 800511a:	f003 0307 	and.w	r3, r3, #7
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	e000ed00 	.word	0xe000ed00

0800512c <__NVIC_EnableIRQ>:
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	db0b      	blt.n	8005156 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	f003 021f 	and.w	r2, r3, #31
 8005144:	4907      	ldr	r1, [pc, #28]	; (8005164 <__NVIC_EnableIRQ+0x38>)
 8005146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	2001      	movs	r0, #1
 800514e:	fa00 f202 	lsl.w	r2, r0, r2
 8005152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	e000e100 	.word	0xe000e100

08005168 <__NVIC_SetPriority>:
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	6039      	str	r1, [r7, #0]
 8005172:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005178:	2b00      	cmp	r3, #0
 800517a:	db0a      	blt.n	8005192 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	b2da      	uxtb	r2, r3
 8005180:	490c      	ldr	r1, [pc, #48]	; (80051b4 <__NVIC_SetPriority+0x4c>)
 8005182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005186:	0112      	lsls	r2, r2, #4
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	440b      	add	r3, r1
 800518c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005190:	e00a      	b.n	80051a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	4908      	ldr	r1, [pc, #32]	; (80051b8 <__NVIC_SetPriority+0x50>)
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	3b04      	subs	r3, #4
 80051a0:	0112      	lsls	r2, r2, #4
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	440b      	add	r3, r1
 80051a6:	761a      	strb	r2, [r3, #24]
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	e000e100 	.word	0xe000e100
 80051b8:	e000ed00 	.word	0xe000ed00

080051bc <NVIC_EncodePriority>:
{
 80051bc:	b480      	push	{r7}
 80051be:	b089      	sub	sp, #36	; 0x24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f1c3 0307 	rsb	r3, r3, #7
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	bf28      	it	cs
 80051da:	2304      	movcs	r3, #4
 80051dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3304      	adds	r3, #4
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d902      	bls.n	80051ec <NVIC_EncodePriority+0x30>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	3b03      	subs	r3, #3
 80051ea:	e000      	b.n	80051ee <NVIC_EncodePriority+0x32>
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f0:	f04f 32ff 	mov.w	r2, #4294967295
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43da      	mvns	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	401a      	ands	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005204:	f04f 31ff 	mov.w	r1, #4294967295
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	fa01 f303 	lsl.w	r3, r1, r3
 800520e:	43d9      	mvns	r1, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005214:	4313      	orrs	r3, r2
}
 8005216:	4618      	mov	r0, r3
 8005218:	3724      	adds	r7, #36	; 0x24
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3b01      	subs	r3, #1
 8005230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005234:	d301      	bcc.n	800523a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005236:	2301      	movs	r3, #1
 8005238:	e00f      	b.n	800525a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800523a:	4a0a      	ldr	r2, [pc, #40]	; (8005264 <SysTick_Config+0x40>)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3b01      	subs	r3, #1
 8005240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005242:	210f      	movs	r1, #15
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	f7ff ff8e 	bl	8005168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <SysTick_Config+0x40>)
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005252:	4b04      	ldr	r3, [pc, #16]	; (8005264 <SysTick_Config+0x40>)
 8005254:	2207      	movs	r2, #7
 8005256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	e000e010 	.word	0xe000e010

08005268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ff29 	bl	80050c8 <__NVIC_SetPriorityGrouping>
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	4603      	mov	r3, r0
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800528c:	f7ff ff40 	bl	8005110 <__NVIC_GetPriorityGrouping>
 8005290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	f7ff ff90 	bl	80051bc <NVIC_EncodePriority>
 800529c:	4602      	mov	r2, r0
 800529e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052a2:	4611      	mov	r1, r2
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff ff5f 	bl	8005168 <__NVIC_SetPriority>
}
 80052aa:	bf00      	nop
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	4603      	mov	r3, r0
 80052ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff ff33 	bl	800512c <__NVIC_EnableIRQ>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff ffa4 	bl	8005224 <SysTick_Config>
 80052dc:	4603      	mov	r3, r0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e205      	b.n	8005706 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d004      	beq.n	8005310 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2280      	movs	r2, #128	; 0x80
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e1fa      	b.n	8005706 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a8c      	ldr	r2, [pc, #560]	; (8005548 <HAL_DMA_Abort_IT+0x260>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d04a      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a8b      	ldr	r2, [pc, #556]	; (800554c <HAL_DMA_Abort_IT+0x264>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d045      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a89      	ldr	r2, [pc, #548]	; (8005550 <HAL_DMA_Abort_IT+0x268>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d040      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a88      	ldr	r2, [pc, #544]	; (8005554 <HAL_DMA_Abort_IT+0x26c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d03b      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a86      	ldr	r2, [pc, #536]	; (8005558 <HAL_DMA_Abort_IT+0x270>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d036      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a85      	ldr	r2, [pc, #532]	; (800555c <HAL_DMA_Abort_IT+0x274>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d031      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a83      	ldr	r2, [pc, #524]	; (8005560 <HAL_DMA_Abort_IT+0x278>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d02c      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a82      	ldr	r2, [pc, #520]	; (8005564 <HAL_DMA_Abort_IT+0x27c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d027      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a80      	ldr	r2, [pc, #512]	; (8005568 <HAL_DMA_Abort_IT+0x280>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d022      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a7f      	ldr	r2, [pc, #508]	; (800556c <HAL_DMA_Abort_IT+0x284>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d01d      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a7d      	ldr	r2, [pc, #500]	; (8005570 <HAL_DMA_Abort_IT+0x288>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d018      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a7c      	ldr	r2, [pc, #496]	; (8005574 <HAL_DMA_Abort_IT+0x28c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a7a      	ldr	r2, [pc, #488]	; (8005578 <HAL_DMA_Abort_IT+0x290>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00e      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a79      	ldr	r2, [pc, #484]	; (800557c <HAL_DMA_Abort_IT+0x294>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a77      	ldr	r2, [pc, #476]	; (8005580 <HAL_DMA_Abort_IT+0x298>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_DMA_Abort_IT+0xc8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a76      	ldr	r2, [pc, #472]	; (8005584 <HAL_DMA_Abort_IT+0x29c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d101      	bne.n	80053b4 <HAL_DMA_Abort_IT+0xcc>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <HAL_DMA_Abort_IT+0xce>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d065      	beq.n	8005486 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a60      	ldr	r2, [pc, #384]	; (8005548 <HAL_DMA_Abort_IT+0x260>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d04a      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a5e      	ldr	r2, [pc, #376]	; (800554c <HAL_DMA_Abort_IT+0x264>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d045      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a5d      	ldr	r2, [pc, #372]	; (8005550 <HAL_DMA_Abort_IT+0x268>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d040      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a5b      	ldr	r2, [pc, #364]	; (8005554 <HAL_DMA_Abort_IT+0x26c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d03b      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a5a      	ldr	r2, [pc, #360]	; (8005558 <HAL_DMA_Abort_IT+0x270>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d036      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a58      	ldr	r2, [pc, #352]	; (800555c <HAL_DMA_Abort_IT+0x274>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d031      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a57      	ldr	r2, [pc, #348]	; (8005560 <HAL_DMA_Abort_IT+0x278>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d02c      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a55      	ldr	r2, [pc, #340]	; (8005564 <HAL_DMA_Abort_IT+0x27c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d027      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a54      	ldr	r2, [pc, #336]	; (8005568 <HAL_DMA_Abort_IT+0x280>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a52      	ldr	r2, [pc, #328]	; (800556c <HAL_DMA_Abort_IT+0x284>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01d      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a51      	ldr	r2, [pc, #324]	; (8005570 <HAL_DMA_Abort_IT+0x288>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a4f      	ldr	r2, [pc, #316]	; (8005574 <HAL_DMA_Abort_IT+0x28c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a4e      	ldr	r2, [pc, #312]	; (8005578 <HAL_DMA_Abort_IT+0x290>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a4c      	ldr	r2, [pc, #304]	; (800557c <HAL_DMA_Abort_IT+0x294>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a4b      	ldr	r2, [pc, #300]	; (8005580 <HAL_DMA_Abort_IT+0x298>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_DMA_Abort_IT+0x17a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a49      	ldr	r2, [pc, #292]	; (8005584 <HAL_DMA_Abort_IT+0x29c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d108      	bne.n	8005474 <HAL_DMA_Abort_IT+0x18c>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e147      	b.n	8005704 <HAL_DMA_Abort_IT+0x41c>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	e13e      	b.n	8005704 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 020e 	bic.w	r2, r2, #14
 8005494:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <HAL_DMA_Abort_IT+0x260>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d04a      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a29      	ldr	r2, [pc, #164]	; (800554c <HAL_DMA_Abort_IT+0x264>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d045      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a28      	ldr	r2, [pc, #160]	; (8005550 <HAL_DMA_Abort_IT+0x268>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d040      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a26      	ldr	r2, [pc, #152]	; (8005554 <HAL_DMA_Abort_IT+0x26c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d03b      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a25      	ldr	r2, [pc, #148]	; (8005558 <HAL_DMA_Abort_IT+0x270>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d036      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a23      	ldr	r2, [pc, #140]	; (800555c <HAL_DMA_Abort_IT+0x274>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d031      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a22      	ldr	r2, [pc, #136]	; (8005560 <HAL_DMA_Abort_IT+0x278>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d02c      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a20      	ldr	r2, [pc, #128]	; (8005564 <HAL_DMA_Abort_IT+0x27c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d027      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <HAL_DMA_Abort_IT+0x280>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <HAL_DMA_Abort_IT+0x284>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <HAL_DMA_Abort_IT+0x288>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <HAL_DMA_Abort_IT+0x28c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a19      	ldr	r2, [pc, #100]	; (8005578 <HAL_DMA_Abort_IT+0x290>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a17      	ldr	r2, [pc, #92]	; (800557c <HAL_DMA_Abort_IT+0x294>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a16      	ldr	r2, [pc, #88]	; (8005580 <HAL_DMA_Abort_IT+0x298>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_DMA_Abort_IT+0x24e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a14      	ldr	r2, [pc, #80]	; (8005584 <HAL_DMA_Abort_IT+0x29c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d128      	bne.n	8005588 <HAL_DMA_Abort_IT+0x2a0>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0201 	bic.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e027      	b.n	8005598 <HAL_DMA_Abort_IT+0x2b0>
 8005548:	40020010 	.word	0x40020010
 800554c:	40020028 	.word	0x40020028
 8005550:	40020040 	.word	0x40020040
 8005554:	40020058 	.word	0x40020058
 8005558:	40020070 	.word	0x40020070
 800555c:	40020088 	.word	0x40020088
 8005560:	400200a0 	.word	0x400200a0
 8005564:	400200b8 	.word	0x400200b8
 8005568:	40020410 	.word	0x40020410
 800556c:	40020428 	.word	0x40020428
 8005570:	40020440 	.word	0x40020440
 8005574:	40020458 	.word	0x40020458
 8005578:	40020470 	.word	0x40020470
 800557c:	40020488 	.word	0x40020488
 8005580:	400204a0 	.word	0x400204a0
 8005584:	400204b8 	.word	0x400204b8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a5c      	ldr	r2, [pc, #368]	; (8005710 <HAL_DMA_Abort_IT+0x428>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d072      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a5b      	ldr	r2, [pc, #364]	; (8005714 <HAL_DMA_Abort_IT+0x42c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d06d      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a59      	ldr	r2, [pc, #356]	; (8005718 <HAL_DMA_Abort_IT+0x430>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d068      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a58      	ldr	r2, [pc, #352]	; (800571c <HAL_DMA_Abort_IT+0x434>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d063      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a56      	ldr	r2, [pc, #344]	; (8005720 <HAL_DMA_Abort_IT+0x438>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d05e      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a55      	ldr	r2, [pc, #340]	; (8005724 <HAL_DMA_Abort_IT+0x43c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d059      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a53      	ldr	r2, [pc, #332]	; (8005728 <HAL_DMA_Abort_IT+0x440>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d054      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a52      	ldr	r2, [pc, #328]	; (800572c <HAL_DMA_Abort_IT+0x444>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d04f      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a50      	ldr	r2, [pc, #320]	; (8005730 <HAL_DMA_Abort_IT+0x448>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d04a      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a4f      	ldr	r2, [pc, #316]	; (8005734 <HAL_DMA_Abort_IT+0x44c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d045      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a4d      	ldr	r2, [pc, #308]	; (8005738 <HAL_DMA_Abort_IT+0x450>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d040      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a4c      	ldr	r2, [pc, #304]	; (800573c <HAL_DMA_Abort_IT+0x454>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d03b      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a4a      	ldr	r2, [pc, #296]	; (8005740 <HAL_DMA_Abort_IT+0x458>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d036      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a49      	ldr	r2, [pc, #292]	; (8005744 <HAL_DMA_Abort_IT+0x45c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d031      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a47      	ldr	r2, [pc, #284]	; (8005748 <HAL_DMA_Abort_IT+0x460>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d02c      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a46      	ldr	r2, [pc, #280]	; (800574c <HAL_DMA_Abort_IT+0x464>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d027      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a44      	ldr	r2, [pc, #272]	; (8005750 <HAL_DMA_Abort_IT+0x468>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d022      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a43      	ldr	r2, [pc, #268]	; (8005754 <HAL_DMA_Abort_IT+0x46c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d01d      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a41      	ldr	r2, [pc, #260]	; (8005758 <HAL_DMA_Abort_IT+0x470>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d018      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a40      	ldr	r2, [pc, #256]	; (800575c <HAL_DMA_Abort_IT+0x474>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d013      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a3e      	ldr	r2, [pc, #248]	; (8005760 <HAL_DMA_Abort_IT+0x478>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00e      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a3d      	ldr	r2, [pc, #244]	; (8005764 <HAL_DMA_Abort_IT+0x47c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d009      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a3b      	ldr	r2, [pc, #236]	; (8005768 <HAL_DMA_Abort_IT+0x480>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_DMA_Abort_IT+0x3a0>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a3a      	ldr	r2, [pc, #232]	; (800576c <HAL_DMA_Abort_IT+0x484>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d101      	bne.n	800568c <HAL_DMA_Abort_IT+0x3a4>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_DMA_Abort_IT+0x3a6>
 800568c:	2300      	movs	r3, #0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d028      	beq.n	80056e4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	2201      	movs	r2, #1
 80056b2:	409a      	lsls	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80056e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40020010 	.word	0x40020010
 8005714:	40020028 	.word	0x40020028
 8005718:	40020040 	.word	0x40020040
 800571c:	40020058 	.word	0x40020058
 8005720:	40020070 	.word	0x40020070
 8005724:	40020088 	.word	0x40020088
 8005728:	400200a0 	.word	0x400200a0
 800572c:	400200b8 	.word	0x400200b8
 8005730:	40020410 	.word	0x40020410
 8005734:	40020428 	.word	0x40020428
 8005738:	40020440 	.word	0x40020440
 800573c:	40020458 	.word	0x40020458
 8005740:	40020470 	.word	0x40020470
 8005744:	40020488 	.word	0x40020488
 8005748:	400204a0 	.word	0x400204a0
 800574c:	400204b8 	.word	0x400204b8
 8005750:	58025408 	.word	0x58025408
 8005754:	5802541c 	.word	0x5802541c
 8005758:	58025430 	.word	0x58025430
 800575c:	58025444 	.word	0x58025444
 8005760:	58025458 	.word	0x58025458
 8005764:	5802546c 	.word	0x5802546c
 8005768:	58025480 	.word	0x58025480
 800576c:	58025494 	.word	0x58025494

08005770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	; 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800577e:	4b89      	ldr	r3, [pc, #548]	; (80059a4 <HAL_GPIO_Init+0x234>)
 8005780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005782:	e194      	b.n	8005aae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	2101      	movs	r1, #1
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	fa01 f303 	lsl.w	r3, r1, r3
 8005790:	4013      	ands	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8186 	beq.w	8005aa8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d00b      	beq.n	80057bc <HAL_GPIO_Init+0x4c>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d007      	beq.n	80057bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057b0:	2b11      	cmp	r3, #17
 80057b2:	d003      	beq.n	80057bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b12      	cmp	r3, #18
 80057ba:	d130      	bne.n	800581e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	2203      	movs	r2, #3
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057f2:	2201      	movs	r2, #1
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4013      	ands	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	f003 0201 	and.w	r2, r3, #1
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4313      	orrs	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	2203      	movs	r2, #3
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4313      	orrs	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d003      	beq.n	800585e <HAL_GPIO_Init+0xee>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b12      	cmp	r3, #18
 800585c:	d123      	bne.n	80058a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	08da      	lsrs	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3208      	adds	r2, #8
 8005866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	220f      	movs	r2, #15
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	08da      	lsrs	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3208      	adds	r2, #8
 80058a0:	69b9      	ldr	r1, [r7, #24]
 80058a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	2203      	movs	r2, #3
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	43db      	mvns	r3, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4013      	ands	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f003 0203 	and.w	r2, r3, #3
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80e0 	beq.w	8005aa8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058e8:	4b2f      	ldr	r3, [pc, #188]	; (80059a8 <HAL_GPIO_Init+0x238>)
 80058ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058ee:	4a2e      	ldr	r2, [pc, #184]	; (80059a8 <HAL_GPIO_Init+0x238>)
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058f8:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <HAL_GPIO_Init+0x238>)
 80058fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005906:	4a29      	ldr	r2, [pc, #164]	; (80059ac <HAL_GPIO_Init+0x23c>)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	089b      	lsrs	r3, r3, #2
 800590c:	3302      	adds	r3, #2
 800590e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	220f      	movs	r2, #15
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4013      	ands	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a20      	ldr	r2, [pc, #128]	; (80059b0 <HAL_GPIO_Init+0x240>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d052      	beq.n	80059d8 <HAL_GPIO_Init+0x268>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <HAL_GPIO_Init+0x244>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d031      	beq.n	800599e <HAL_GPIO_Init+0x22e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <HAL_GPIO_Init+0x248>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d02b      	beq.n	800599a <HAL_GPIO_Init+0x22a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <HAL_GPIO_Init+0x24c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d025      	beq.n	8005996 <HAL_GPIO_Init+0x226>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <HAL_GPIO_Init+0x250>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01f      	beq.n	8005992 <HAL_GPIO_Init+0x222>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_GPIO_Init+0x254>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d019      	beq.n	800598e <HAL_GPIO_Init+0x21e>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <HAL_GPIO_Init+0x258>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_GPIO_Init+0x21a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a19      	ldr	r2, [pc, #100]	; (80059cc <HAL_GPIO_Init+0x25c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00d      	beq.n	8005986 <HAL_GPIO_Init+0x216>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a18      	ldr	r2, [pc, #96]	; (80059d0 <HAL_GPIO_Init+0x260>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <HAL_GPIO_Init+0x212>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a17      	ldr	r2, [pc, #92]	; (80059d4 <HAL_GPIO_Init+0x264>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d101      	bne.n	800597e <HAL_GPIO_Init+0x20e>
 800597a:	2309      	movs	r3, #9
 800597c:	e02d      	b.n	80059da <HAL_GPIO_Init+0x26a>
 800597e:	230a      	movs	r3, #10
 8005980:	e02b      	b.n	80059da <HAL_GPIO_Init+0x26a>
 8005982:	2308      	movs	r3, #8
 8005984:	e029      	b.n	80059da <HAL_GPIO_Init+0x26a>
 8005986:	2307      	movs	r3, #7
 8005988:	e027      	b.n	80059da <HAL_GPIO_Init+0x26a>
 800598a:	2306      	movs	r3, #6
 800598c:	e025      	b.n	80059da <HAL_GPIO_Init+0x26a>
 800598e:	2305      	movs	r3, #5
 8005990:	e023      	b.n	80059da <HAL_GPIO_Init+0x26a>
 8005992:	2304      	movs	r3, #4
 8005994:	e021      	b.n	80059da <HAL_GPIO_Init+0x26a>
 8005996:	2303      	movs	r3, #3
 8005998:	e01f      	b.n	80059da <HAL_GPIO_Init+0x26a>
 800599a:	2302      	movs	r3, #2
 800599c:	e01d      	b.n	80059da <HAL_GPIO_Init+0x26a>
 800599e:	2301      	movs	r3, #1
 80059a0:	e01b      	b.n	80059da <HAL_GPIO_Init+0x26a>
 80059a2:	bf00      	nop
 80059a4:	58000080 	.word	0x58000080
 80059a8:	58024400 	.word	0x58024400
 80059ac:	58000400 	.word	0x58000400
 80059b0:	58020000 	.word	0x58020000
 80059b4:	58020400 	.word	0x58020400
 80059b8:	58020800 	.word	0x58020800
 80059bc:	58020c00 	.word	0x58020c00
 80059c0:	58021000 	.word	0x58021000
 80059c4:	58021400 	.word	0x58021400
 80059c8:	58021800 	.word	0x58021800
 80059cc:	58021c00 	.word	0x58021c00
 80059d0:	58022000 	.word	0x58022000
 80059d4:	58022400 	.word	0x58022400
 80059d8:	2300      	movs	r3, #0
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	f002 0203 	and.w	r2, r2, #3
 80059e0:	0092      	lsls	r2, r2, #2
 80059e2:	4093      	lsls	r3, r2
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059ea:	4938      	ldr	r1, [pc, #224]	; (8005acc <HAL_GPIO_Init+0x35c>)
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	089b      	lsrs	r3, r3, #2
 80059f0:	3302      	adds	r3, #2
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	43db      	mvns	r3, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	43db      	mvns	r3, r3
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f ae63 	bne.w	8005784 <HAL_GPIO_Init+0x14>
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3724      	adds	r7, #36	; 0x24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	58000400 	.word	0x58000400

08005ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	807b      	strh	r3, [r7, #2]
 8005adc:	4613      	mov	r3, r2
 8005ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ae0:	787b      	ldrb	r3, [r7, #1]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ae6:	887a      	ldrh	r2, [r7, #2]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005aec:	e003      	b.n	8005af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005aee:	887b      	ldrh	r3, [r7, #2]
 8005af0:	041a      	lsls	r2, r3, #16
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	619a      	str	r2, [r3, #24]
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005b0c:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <HAL_HSEM_FastTake+0x2c>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3320      	adds	r3, #32
 8005b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b16:	4a07      	ldr	r2, [pc, #28]	; (8005b34 <HAL_HSEM_FastTake+0x30>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d101      	bne.n	8005b20 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	58026400 	.word	0x58026400
 8005b34:	80000300 	.word	0x80000300

08005b38 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005b42:	4906      	ldr	r1, [pc, #24]	; (8005b5c <HAL_HSEM_Release+0x24>)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	58026400 	.word	0x58026400

08005b60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005b68:	4b29      	ldr	r3, [pc, #164]	; (8005c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	2b06      	cmp	r3, #6
 8005b72:	d00a      	beq.n	8005b8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b74:	4b26      	ldr	r3, [pc, #152]	; (8005c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d001      	beq.n	8005b86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e040      	b.n	8005c08 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e03e      	b.n	8005c08 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b8a:	4b21      	ldr	r3, [pc, #132]	; (8005c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005b92:	491f      	ldr	r1, [pc, #124]	; (8005c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b9a:	f7ff fa5b 	bl	8005054 <HAL_GetTick>
 8005b9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ba0:	e009      	b.n	8005bb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ba2:	f7ff fa57 	bl	8005054 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb0:	d901      	bls.n	8005bb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e028      	b.n	8005c08 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bb6:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc2:	d1ee      	bne.n	8005ba2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b1e      	cmp	r3, #30
 8005bc8:	d008      	beq.n	8005bdc <HAL_PWREx_ConfigSupply+0x7c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8005bce:	d005      	beq.n	8005bdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b1d      	cmp	r3, #29
 8005bd4:	d002      	beq.n	8005bdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b2d      	cmp	r3, #45	; 0x2d
 8005bda:	d114      	bne.n	8005c06 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005bdc:	f7ff fa3a 	bl	8005054 <HAL_GetTick>
 8005be0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005be2:	e009      	b.n	8005bf8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005be4:	f7ff fa36 	bl	8005054 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bf2:	d901      	bls.n	8005bf8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e007      	b.n	8005c08 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d1ee      	bne.n	8005be4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	58024800 	.word	0x58024800

08005c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	; 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e3ff      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8087 	beq.w	8005d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c34:	4b99      	ldr	r3, [pc, #612]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c3e:	4b97      	ldr	r3, [pc, #604]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d007      	beq.n	8005c5a <HAL_RCC_OscConfig+0x46>
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	2b18      	cmp	r3, #24
 8005c4e:	d110      	bne.n	8005c72 <HAL_RCC_OscConfig+0x5e>
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d10b      	bne.n	8005c72 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5a:	4b90      	ldr	r3, [pc, #576]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d06c      	beq.n	8005d40 <HAL_RCC_OscConfig+0x12c>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d168      	bne.n	8005d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e3d9      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCC_OscConfig+0x76>
 8005c7c:	4b87      	ldr	r3, [pc, #540]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a86      	ldr	r2, [pc, #536]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e02e      	b.n	8005ce8 <HAL_RCC_OscConfig+0xd4>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10c      	bne.n	8005cac <HAL_RCC_OscConfig+0x98>
 8005c92:	4b82      	ldr	r3, [pc, #520]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a81      	ldr	r2, [pc, #516]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4b7f      	ldr	r3, [pc, #508]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a7e      	ldr	r2, [pc, #504]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e01d      	b.n	8005ce8 <HAL_RCC_OscConfig+0xd4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0xbc>
 8005cb6:	4b79      	ldr	r3, [pc, #484]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a78      	ldr	r2, [pc, #480]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b76      	ldr	r3, [pc, #472]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a75      	ldr	r2, [pc, #468]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e00b      	b.n	8005ce8 <HAL_RCC_OscConfig+0xd4>
 8005cd0:	4b72      	ldr	r3, [pc, #456]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a71      	ldr	r2, [pc, #452]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	4b6f      	ldr	r3, [pc, #444]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a6e      	ldr	r2, [pc, #440]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d013      	beq.n	8005d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf0:	f7ff f9b0 	bl	8005054 <HAL_GetTick>
 8005cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf8:	f7ff f9ac 	bl	8005054 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b64      	cmp	r3, #100	; 0x64
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e38d      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d0a:	4b64      	ldr	r3, [pc, #400]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0xe4>
 8005d16:	e014      	b.n	8005d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d18:	f7ff f99c 	bl	8005054 <HAL_GetTick>
 8005d1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d20:	f7ff f998 	bl	8005054 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	; 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e379      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d32:	4b5a      	ldr	r3, [pc, #360]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0x10c>
 8005d3e:	e000      	b.n	8005d42 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80ae 	beq.w	8005eac <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d50:	4b52      	ldr	r3, [pc, #328]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d5a:	4b50      	ldr	r3, [pc, #320]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <HAL_RCC_OscConfig+0x162>
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	2b18      	cmp	r3, #24
 8005d6a:	d13a      	bne.n	8005de2 <HAL_RCC_OscConfig+0x1ce>
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d135      	bne.n	8005de2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d76:	4b49      	ldr	r3, [pc, #292]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <HAL_RCC_OscConfig+0x17a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e34b      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d8e:	f7ff f98f 	bl	80050b0 <HAL_GetREVID>
 8005d92:	4602      	mov	r2, r0
 8005d94:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d817      	bhi.n	8005dcc <HAL_RCC_OscConfig+0x1b8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d108      	bne.n	8005db6 <HAL_RCC_OscConfig+0x1a2>
 8005da4:	4b3d      	ldr	r3, [pc, #244]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005dac:	4a3b      	ldr	r2, [pc, #236]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db4:	e07a      	b.n	8005eac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db6:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	031b      	lsls	r3, r3, #12
 8005dc4:	4935      	ldr	r1, [pc, #212]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dca:	e06f      	b.n	8005eac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dcc:	4b33      	ldr	r3, [pc, #204]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	061b      	lsls	r3, r3, #24
 8005dda:	4930      	ldr	r1, [pc, #192]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de0:	e064      	b.n	8005eac <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d045      	beq.n	8005e76 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dea:	4b2c      	ldr	r3, [pc, #176]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 0219 	bic.w	r2, r3, #25
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	4929      	ldr	r1, [pc, #164]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfc:	f7ff f92a 	bl	8005054 <HAL_GetTick>
 8005e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e04:	f7ff f926 	bl	8005054 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e307      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e16:	4b21      	ldr	r3, [pc, #132]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e22:	f7ff f945 	bl	80050b0 <HAL_GetREVID>
 8005e26:	4602      	mov	r2, r0
 8005e28:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d817      	bhi.n	8005e60 <HAL_RCC_OscConfig+0x24c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d108      	bne.n	8005e4a <HAL_RCC_OscConfig+0x236>
 8005e38:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e40:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e46:	6053      	str	r3, [r2, #4]
 8005e48:	e030      	b.n	8005eac <HAL_RCC_OscConfig+0x298>
 8005e4a:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	031b      	lsls	r3, r3, #12
 8005e58:	4910      	ldr	r1, [pc, #64]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	604b      	str	r3, [r1, #4]
 8005e5e:	e025      	b.n	8005eac <HAL_RCC_OscConfig+0x298>
 8005e60:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	490b      	ldr	r1, [pc, #44]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	604b      	str	r3, [r1, #4]
 8005e74:	e01a      	b.n	8005eac <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e76:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a08      	ldr	r2, [pc, #32]	; (8005e9c <HAL_RCC_OscConfig+0x288>)
 8005e7c:	f023 0301 	bic.w	r3, r3, #1
 8005e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e82:	f7ff f8e7 	bl	8005054 <HAL_GetTick>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e88:	e00a      	b.n	8005ea0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e8a:	f7ff f8e3 	bl	8005054 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d903      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e2c4      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
 8005e9c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ea0:	4ba4      	ldr	r3, [pc, #656]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1ee      	bne.n	8005e8a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80a9 	beq.w	800600c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eba:	4b9e      	ldr	r3, [pc, #632]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ec2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ec4:	4b9b      	ldr	r3, [pc, #620]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d007      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x2cc>
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b18      	cmp	r3, #24
 8005ed4:	d13a      	bne.n	8005f4c <HAL_RCC_OscConfig+0x338>
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d135      	bne.n	8005f4c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ee0:	4b94      	ldr	r3, [pc, #592]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x2e4>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e296      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ef8:	f7ff f8da 	bl	80050b0 <HAL_GetREVID>
 8005efc:	4602      	mov	r2, r0
 8005efe:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d817      	bhi.n	8005f36 <HAL_RCC_OscConfig+0x322>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d108      	bne.n	8005f20 <HAL_RCC_OscConfig+0x30c>
 8005f0e:	4b89      	ldr	r3, [pc, #548]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005f16:	4a87      	ldr	r2, [pc, #540]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f1c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f1e:	e075      	b.n	800600c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f20:	4b84      	ldr	r3, [pc, #528]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	069b      	lsls	r3, r3, #26
 8005f2e:	4981      	ldr	r1, [pc, #516]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f34:	e06a      	b.n	800600c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f36:	4b7f      	ldr	r3, [pc, #508]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	061b      	lsls	r3, r3, #24
 8005f44:	497b      	ldr	r1, [pc, #492]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f4a:	e05f      	b.n	800600c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d042      	beq.n	8005fda <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f54:	4b77      	ldr	r3, [pc, #476]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a76      	ldr	r2, [pc, #472]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7ff f878 	bl	8005054 <HAL_GetTick>
 8005f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f68:	f7ff f874 	bl	8005054 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e255      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f7a:	4b6e      	ldr	r3, [pc, #440]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f86:	f7ff f893 	bl	80050b0 <HAL_GetREVID>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d817      	bhi.n	8005fc4 <HAL_RCC_OscConfig+0x3b0>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d108      	bne.n	8005fae <HAL_RCC_OscConfig+0x39a>
 8005f9c:	4b65      	ldr	r3, [pc, #404]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fa4:	4a63      	ldr	r2, [pc, #396]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005fa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005faa:	6053      	str	r3, [r2, #4]
 8005fac:	e02e      	b.n	800600c <HAL_RCC_OscConfig+0x3f8>
 8005fae:	4b61      	ldr	r3, [pc, #388]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	069b      	lsls	r3, r3, #26
 8005fbc:	495d      	ldr	r1, [pc, #372]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	604b      	str	r3, [r1, #4]
 8005fc2:	e023      	b.n	800600c <HAL_RCC_OscConfig+0x3f8>
 8005fc4:	4b5b      	ldr	r3, [pc, #364]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	061b      	lsls	r3, r3, #24
 8005fd2:	4958      	ldr	r1, [pc, #352]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60cb      	str	r3, [r1, #12]
 8005fd8:	e018      	b.n	800600c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005fda:	4b56      	ldr	r3, [pc, #344]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a55      	ldr	r2, [pc, #340]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8005fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe6:	f7ff f835 	bl	8005054 <HAL_GetTick>
 8005fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005fee:	f7ff f831 	bl	8005054 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e212      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006000:	4b4c      	ldr	r3, [pc, #304]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f0      	bne.n	8005fee <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d036      	beq.n	8006086 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d019      	beq.n	8006054 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006020:	4b44      	ldr	r3, [pc, #272]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8006022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006024:	4a43      	ldr	r2, [pc, #268]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7ff f812 	bl	8005054 <HAL_GetTick>
 8006030:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006034:	f7ff f80e 	bl	8005054 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e1ef      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006046:	4b3b      	ldr	r3, [pc, #236]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8006048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x420>
 8006052:	e018      	b.n	8006086 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006054:	4b37      	ldr	r3, [pc, #220]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 8006056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006058:	4a36      	ldr	r2, [pc, #216]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 800605a:	f023 0301 	bic.w	r3, r3, #1
 800605e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006060:	f7fe fff8 	bl	8005054 <HAL_GetTick>
 8006064:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006068:	f7fe fff4 	bl	8005054 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e1d5      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800607a:	4b2e      	ldr	r3, [pc, #184]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 800607c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f0      	bne.n	8006068 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d036      	beq.n	8006100 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d019      	beq.n	80060ce <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800609a:	4b26      	ldr	r3, [pc, #152]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a25      	ldr	r2, [pc, #148]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 80060a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060a6:	f7fe ffd5 	bl	8005054 <HAL_GetTick>
 80060aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060ac:	e008      	b.n	80060c0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060ae:	f7fe ffd1 	bl	8005054 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e1b2      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060c0:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0f0      	beq.n	80060ae <HAL_RCC_OscConfig+0x49a>
 80060cc:	e018      	b.n	8006100 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060ce:	4b19      	ldr	r3, [pc, #100]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 80060d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060da:	f7fe ffbb 	bl	8005054 <HAL_GetTick>
 80060de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80060e2:	f7fe ffb7 	bl	8005054 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e198      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <HAL_RCC_OscConfig+0x520>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f0      	bne.n	80060e2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 8085 	beq.w	8006218 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800610e:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <HAL_RCC_OscConfig+0x524>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <HAL_RCC_OscConfig+0x524>)
 8006114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006118:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800611a:	f7fe ff9b 	bl	8005054 <HAL_GetTick>
 800611e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006120:	e00c      	b.n	800613c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006122:	f7fe ff97 	bl	8005054 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b64      	cmp	r3, #100	; 0x64
 800612e:	d905      	bls.n	800613c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e178      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
 8006134:	58024400 	.word	0x58024400
 8006138:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800613c:	4b96      	ldr	r3, [pc, #600]	; (8006398 <HAL_RCC_OscConfig+0x784>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0ec      	beq.n	8006122 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d106      	bne.n	800615e <HAL_RCC_OscConfig+0x54a>
 8006150:	4b92      	ldr	r3, [pc, #584]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006154:	4a91      	ldr	r2, [pc, #580]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	6713      	str	r3, [r2, #112]	; 0x70
 800615c:	e02d      	b.n	80061ba <HAL_RCC_OscConfig+0x5a6>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10c      	bne.n	8006180 <HAL_RCC_OscConfig+0x56c>
 8006166:	4b8d      	ldr	r3, [pc, #564]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616a:	4a8c      	ldr	r2, [pc, #560]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800616c:	f023 0301 	bic.w	r3, r3, #1
 8006170:	6713      	str	r3, [r2, #112]	; 0x70
 8006172:	4b8a      	ldr	r3, [pc, #552]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006176:	4a89      	ldr	r2, [pc, #548]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006178:	f023 0304 	bic.w	r3, r3, #4
 800617c:	6713      	str	r3, [r2, #112]	; 0x70
 800617e:	e01c      	b.n	80061ba <HAL_RCC_OscConfig+0x5a6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b05      	cmp	r3, #5
 8006186:	d10c      	bne.n	80061a2 <HAL_RCC_OscConfig+0x58e>
 8006188:	4b84      	ldr	r3, [pc, #528]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800618a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618c:	4a83      	ldr	r2, [pc, #524]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800618e:	f043 0304 	orr.w	r3, r3, #4
 8006192:	6713      	str	r3, [r2, #112]	; 0x70
 8006194:	4b81      	ldr	r3, [pc, #516]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006198:	4a80      	ldr	r2, [pc, #512]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	6713      	str	r3, [r2, #112]	; 0x70
 80061a0:	e00b      	b.n	80061ba <HAL_RCC_OscConfig+0x5a6>
 80061a2:	4b7e      	ldr	r3, [pc, #504]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	4a7d      	ldr	r2, [pc, #500]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	6713      	str	r3, [r2, #112]	; 0x70
 80061ae:	4b7b      	ldr	r3, [pc, #492]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	4a7a      	ldr	r2, [pc, #488]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80061b4:	f023 0304 	bic.w	r3, r3, #4
 80061b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d015      	beq.n	80061ee <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c2:	f7fe ff47 	bl	8005054 <HAL_GetTick>
 80061c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061c8:	e00a      	b.n	80061e0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ca:	f7fe ff43 	bl	8005054 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d8:	4293      	cmp	r3, r2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e122      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061e0:	4b6e      	ldr	r3, [pc, #440]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ee      	beq.n	80061ca <HAL_RCC_OscConfig+0x5b6>
 80061ec:	e014      	b.n	8006218 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ee:	f7fe ff31 	bl	8005054 <HAL_GetTick>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061f4:	e00a      	b.n	800620c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f6:	f7fe ff2d 	bl	8005054 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f241 3288 	movw	r2, #5000	; 0x1388
 8006204:	4293      	cmp	r3, r2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e10c      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800620c:	4b63      	ldr	r3, [pc, #396]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800620e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1ee      	bne.n	80061f6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8101 	beq.w	8006424 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006222:	4b5e      	ldr	r3, [pc, #376]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800622a:	2b18      	cmp	r3, #24
 800622c:	f000 80bc 	beq.w	80063a8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	2b02      	cmp	r3, #2
 8006236:	f040 8095 	bne.w	8006364 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800623a:	4b58      	ldr	r3, [pc, #352]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a57      	ldr	r2, [pc, #348]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006246:	f7fe ff05 	bl	8005054 <HAL_GetTick>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800624e:	f7fe ff01 	bl	8005054 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e0e2      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006260:	4b4e      	ldr	r3, [pc, #312]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f0      	bne.n	800624e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800626c:	4b4b      	ldr	r3, [pc, #300]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800626e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006270:	4b4b      	ldr	r3, [pc, #300]	; (80063a0 <HAL_RCC_OscConfig+0x78c>)
 8006272:	4013      	ands	r3, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800627c:	0112      	lsls	r2, r2, #4
 800627e:	430a      	orrs	r2, r1
 8006280:	4946      	ldr	r1, [pc, #280]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006282:	4313      	orrs	r3, r2
 8006284:	628b      	str	r3, [r1, #40]	; 0x28
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	3b01      	subs	r3, #1
 800628c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006294:	3b01      	subs	r3, #1
 8006296:	025b      	lsls	r3, r3, #9
 8006298:	b29b      	uxth	r3, r3
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	3b01      	subs	r3, #1
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ae:	3b01      	subs	r3, #1
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062b6:	4939      	ldr	r1, [pc, #228]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80062bc:	4b37      	ldr	r3, [pc, #220]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	4a36      	ldr	r2, [pc, #216]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80062c2:	f023 0301 	bic.w	r3, r3, #1
 80062c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062c8:	4b34      	ldr	r3, [pc, #208]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80062ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062cc:	4b35      	ldr	r3, [pc, #212]	; (80063a4 <HAL_RCC_OscConfig+0x790>)
 80062ce:	4013      	ands	r3, r2
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062d4:	00d2      	lsls	r2, r2, #3
 80062d6:	4931      	ldr	r1, [pc, #196]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062dc:	4b2f      	ldr	r3, [pc, #188]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	f023 020c 	bic.w	r2, r3, #12
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	492c      	ldr	r1, [pc, #176]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80062ee:	4b2b      	ldr	r3, [pc, #172]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	f023 0202 	bic.w	r2, r3, #2
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	4928      	ldr	r1, [pc, #160]	; (800639c <HAL_RCC_OscConfig+0x788>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006300:	4b26      	ldr	r3, [pc, #152]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	4a25      	ldr	r2, [pc, #148]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630c:	4b23      	ldr	r3, [pc, #140]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	4a22      	ldr	r2, [pc, #136]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006318:	4b20      	ldr	r3, [pc, #128]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	4a1f      	ldr	r2, [pc, #124]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800631e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006324:	4b1d      	ldr	r3, [pc, #116]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	4a1c      	ldr	r2, [pc, #112]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a19      	ldr	r2, [pc, #100]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800633a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fe fe8a 	bl	8005054 <HAL_GetTick>
 8006340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006344:	f7fe fe86 	bl	8005054 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e067      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f0      	beq.n	8006344 <HAL_RCC_OscConfig+0x730>
 8006362:	e05f      	b.n	8006424 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006364:	4b0d      	ldr	r3, [pc, #52]	; (800639c <HAL_RCC_OscConfig+0x788>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a0c      	ldr	r2, [pc, #48]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800636a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800636e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006370:	f7fe fe70 	bl	8005054 <HAL_GetTick>
 8006374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006378:	f7fe fe6c 	bl	8005054 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e04d      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800638a:	4b04      	ldr	r3, [pc, #16]	; (800639c <HAL_RCC_OscConfig+0x788>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f0      	bne.n	8006378 <HAL_RCC_OscConfig+0x764>
 8006396:	e045      	b.n	8006424 <HAL_RCC_OscConfig+0x810>
 8006398:	58024800 	.word	0x58024800
 800639c:	58024400 	.word	0x58024400
 80063a0:	fffffc0c 	.word	0xfffffc0c
 80063a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80063a8:	4b21      	ldr	r3, [pc, #132]	; (8006430 <HAL_RCC_OscConfig+0x81c>)
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80063ae:	4b20      	ldr	r3, [pc, #128]	; (8006430 <HAL_RCC_OscConfig+0x81c>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d031      	beq.n	8006420 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f003 0203 	and.w	r2, r3, #3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d12a      	bne.n	8006420 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	091b      	lsrs	r3, r3, #4
 80063ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d122      	bne.n	8006420 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d11a      	bne.n	8006420 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	0a5b      	lsrs	r3, r3, #9
 80063ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d111      	bne.n	8006420 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	0c1b      	lsrs	r3, r3, #16
 8006400:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d108      	bne.n	8006420 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	0e1b      	lsrs	r3, r3, #24
 8006412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d001      	beq.n	8006424 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3730      	adds	r7, #48	; 0x30
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	58024400 	.word	0x58024400

08006434 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e19c      	b.n	8006782 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006448:	4b8a      	ldr	r3, [pc, #552]	; (8006674 <HAL_RCC_ClockConfig+0x240>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d910      	bls.n	8006478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b87      	ldr	r3, [pc, #540]	; (8006674 <HAL_RCC_ClockConfig+0x240>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f023 020f 	bic.w	r2, r3, #15
 800645e:	4985      	ldr	r1, [pc, #532]	; (8006674 <HAL_RCC_ClockConfig+0x240>)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	4313      	orrs	r3, r2
 8006464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	4b83      	ldr	r3, [pc, #524]	; (8006674 <HAL_RCC_ClockConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e184      	b.n	8006782 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d010      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	4b7b      	ldr	r3, [pc, #492]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006490:	429a      	cmp	r2, r3
 8006492:	d908      	bls.n	80064a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006494:	4b78      	ldr	r3, [pc, #480]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	4975      	ldr	r1, [pc, #468]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d010      	beq.n	80064d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695a      	ldr	r2, [r3, #20]
 80064b6:	4b70      	ldr	r3, [pc, #448]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064be:	429a      	cmp	r2, r3
 80064c0:	d908      	bls.n	80064d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064c2:	4b6d      	ldr	r3, [pc, #436]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	496a      	ldr	r1, [pc, #424]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d010      	beq.n	8006502 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699a      	ldr	r2, [r3, #24]
 80064e4:	4b64      	ldr	r3, [pc, #400]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d908      	bls.n	8006502 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064f0:	4b61      	ldr	r3, [pc, #388]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	495e      	ldr	r1, [pc, #376]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d010      	beq.n	8006530 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69da      	ldr	r2, [r3, #28]
 8006512:	4b59      	ldr	r3, [pc, #356]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800651a:	429a      	cmp	r2, r3
 800651c:	d908      	bls.n	8006530 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800651e:	4b56      	ldr	r3, [pc, #344]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	4953      	ldr	r1, [pc, #332]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 800652c:	4313      	orrs	r3, r2
 800652e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d010      	beq.n	800655e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	4b4d      	ldr	r3, [pc, #308]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	429a      	cmp	r2, r3
 800654a:	d908      	bls.n	800655e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800654c:	4b4a      	ldr	r3, [pc, #296]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	f023 020f 	bic.w	r2, r3, #15
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	4947      	ldr	r1, [pc, #284]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 800655a:	4313      	orrs	r3, r2
 800655c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d055      	beq.n	8006616 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800656a:	4b43      	ldr	r3, [pc, #268]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	4940      	ldr	r1, [pc, #256]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006578:	4313      	orrs	r3, r2
 800657a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d107      	bne.n	8006594 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006584:	4b3c      	ldr	r3, [pc, #240]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d121      	bne.n	80065d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e0f6      	b.n	8006782 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d107      	bne.n	80065ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800659c:	4b36      	ldr	r3, [pc, #216]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d115      	bne.n	80065d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e0ea      	b.n	8006782 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d107      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065b4:	4b30      	ldr	r3, [pc, #192]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e0de      	b.n	8006782 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065c4:	4b2c      	ldr	r3, [pc, #176]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0d6      	b.n	8006782 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065d4:	4b28      	ldr	r3, [pc, #160]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f023 0207 	bic.w	r2, r3, #7
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	4925      	ldr	r1, [pc, #148]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e6:	f7fe fd35 	bl	8005054 <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ec:	e00a      	b.n	8006604 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ee:	f7fe fd31 	bl	8005054 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e0be      	b.n	8006782 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006604:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	429a      	cmp	r2, r3
 8006614:	d1eb      	bne.n	80065ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d010      	beq.n	8006644 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	4b14      	ldr	r3, [pc, #80]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	429a      	cmp	r2, r3
 8006630:	d208      	bcs.n	8006644 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f023 020f 	bic.w	r2, r3, #15
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	490e      	ldr	r1, [pc, #56]	; (8006678 <HAL_RCC_ClockConfig+0x244>)
 8006640:	4313      	orrs	r3, r2
 8006642:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006644:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <HAL_RCC_ClockConfig+0x240>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d214      	bcs.n	800667c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006652:	4b08      	ldr	r3, [pc, #32]	; (8006674 <HAL_RCC_ClockConfig+0x240>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f023 020f 	bic.w	r2, r3, #15
 800665a:	4906      	ldr	r1, [pc, #24]	; (8006674 <HAL_RCC_ClockConfig+0x240>)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	4313      	orrs	r3, r2
 8006660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006662:	4b04      	ldr	r3, [pc, #16]	; (8006674 <HAL_RCC_ClockConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d005      	beq.n	800667c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e086      	b.n	8006782 <HAL_RCC_ClockConfig+0x34e>
 8006674:	52002000 	.word	0x52002000
 8006678:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d010      	beq.n	80066aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	4b3f      	ldr	r3, [pc, #252]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006694:	429a      	cmp	r2, r3
 8006696:	d208      	bcs.n	80066aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006698:	4b3c      	ldr	r3, [pc, #240]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	4939      	ldr	r1, [pc, #228]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d010      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	4b34      	ldr	r3, [pc, #208]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d208      	bcs.n	80066d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066c6:	4b31      	ldr	r3, [pc, #196]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	492e      	ldr	r1, [pc, #184]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d010      	beq.n	8006706 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699a      	ldr	r2, [r3, #24]
 80066e8:	4b28      	ldr	r3, [pc, #160]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d208      	bcs.n	8006706 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066f4:	4b25      	ldr	r3, [pc, #148]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	4922      	ldr	r1, [pc, #136]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 8006702:	4313      	orrs	r3, r2
 8006704:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d010      	beq.n	8006734 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69da      	ldr	r2, [r3, #28]
 8006716:	4b1d      	ldr	r3, [pc, #116]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800671e:	429a      	cmp	r2, r3
 8006720:	d208      	bcs.n	8006734 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006722:	4b1a      	ldr	r3, [pc, #104]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	4917      	ldr	r1, [pc, #92]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 8006730:	4313      	orrs	r3, r2
 8006732:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006734:	f000 f834 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 8006738:	4601      	mov	r1, r0
 800673a:	4b14      	ldr	r3, [pc, #80]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	4a12      	ldr	r2, [pc, #72]	; (8006790 <HAL_RCC_ClockConfig+0x35c>)
 8006746:	5cd3      	ldrb	r3, [r2, r3]
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	fa21 f303 	lsr.w	r3, r1, r3
 8006750:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006752:	4b0e      	ldr	r3, [pc, #56]	; (800678c <HAL_RCC_ClockConfig+0x358>)
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	4a0d      	ldr	r2, [pc, #52]	; (8006790 <HAL_RCC_ClockConfig+0x35c>)
 800675c:	5cd3      	ldrb	r3, [r2, r3]
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
 8006768:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <HAL_RCC_ClockConfig+0x360>)
 800676a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800676c:	4a0a      	ldr	r2, [pc, #40]	; (8006798 <HAL_RCC_ClockConfig+0x364>)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006772:	4b0a      	ldr	r3, [pc, #40]	; (800679c <HAL_RCC_ClockConfig+0x368>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe fc22 	bl	8004fc0 <HAL_InitTick>
 800677c:	4603      	mov	r3, r0
 800677e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	58024400 	.word	0x58024400
 8006790:	0800c16c 	.word	0x0800c16c
 8006794:	24000004 	.word	0x24000004
 8006798:	24000000 	.word	0x24000000
 800679c:	24000008 	.word	0x24000008

080067a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b089      	sub	sp, #36	; 0x24
 80067a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067a6:	4baf      	ldr	r3, [pc, #700]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ae:	2b18      	cmp	r3, #24
 80067b0:	f200 814e 	bhi.w	8006a50 <HAL_RCC_GetSysClockFreq+0x2b0>
 80067b4:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	08006821 	.word	0x08006821
 80067c0:	08006a51 	.word	0x08006a51
 80067c4:	08006a51 	.word	0x08006a51
 80067c8:	08006a51 	.word	0x08006a51
 80067cc:	08006a51 	.word	0x08006a51
 80067d0:	08006a51 	.word	0x08006a51
 80067d4:	08006a51 	.word	0x08006a51
 80067d8:	08006a51 	.word	0x08006a51
 80067dc:	08006847 	.word	0x08006847
 80067e0:	08006a51 	.word	0x08006a51
 80067e4:	08006a51 	.word	0x08006a51
 80067e8:	08006a51 	.word	0x08006a51
 80067ec:	08006a51 	.word	0x08006a51
 80067f0:	08006a51 	.word	0x08006a51
 80067f4:	08006a51 	.word	0x08006a51
 80067f8:	08006a51 	.word	0x08006a51
 80067fc:	0800684d 	.word	0x0800684d
 8006800:	08006a51 	.word	0x08006a51
 8006804:	08006a51 	.word	0x08006a51
 8006808:	08006a51 	.word	0x08006a51
 800680c:	08006a51 	.word	0x08006a51
 8006810:	08006a51 	.word	0x08006a51
 8006814:	08006a51 	.word	0x08006a51
 8006818:	08006a51 	.word	0x08006a51
 800681c:	08006853 	.word	0x08006853
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006820:	4b90      	ldr	r3, [pc, #576]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800682c:	4b8d      	ldr	r3, [pc, #564]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	08db      	lsrs	r3, r3, #3
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	4a8c      	ldr	r2, [pc, #560]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006838:	fa22 f303 	lsr.w	r3, r2, r3
 800683c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800683e:	e10a      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006840:	4b89      	ldr	r3, [pc, #548]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006842:	61bb      	str	r3, [r7, #24]
    break;
 8006844:	e107      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006846:	4b89      	ldr	r3, [pc, #548]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006848:	61bb      	str	r3, [r7, #24]
    break;
 800684a:	e104      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800684c:	4b88      	ldr	r3, [pc, #544]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800684e:	61bb      	str	r3, [r7, #24]
    break;
 8006850:	e101      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006852:	4b84      	ldr	r3, [pc, #528]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800685c:	4b81      	ldr	r3, [pc, #516]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	091b      	lsrs	r3, r3, #4
 8006862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006866:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006868:	4b7e      	ldr	r3, [pc, #504]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006872:	4b7c      	ldr	r3, [pc, #496]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006876:	08db      	lsrs	r3, r3, #3
 8006878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	fb02 f303 	mul.w	r3, r2, r3
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 80da 	beq.w	8006a4a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d05a      	beq.n	8006952 <HAL_RCC_GetSysClockFreq+0x1b2>
 800689c:	2b01      	cmp	r3, #1
 800689e:	d302      	bcc.n	80068a6 <HAL_RCC_GetSysClockFreq+0x106>
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d078      	beq.n	8006996 <HAL_RCC_GetSysClockFreq+0x1f6>
 80068a4:	e099      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068a6:	4b6f      	ldr	r3, [pc, #444]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d02d      	beq.n	800690e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068b2:	4b6c      	ldr	r3, [pc, #432]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	08db      	lsrs	r3, r3, #3
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	4a6a      	ldr	r2, [pc, #424]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80068be:	fa22 f303 	lsr.w	r3, r2, r3
 80068c2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068dc:	4b61      	ldr	r3, [pc, #388]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80068f0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006a74 <HAL_RCC_GetSysClockFreq+0x2d4>
 80068f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006908:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800690c:	e087      	b.n	8006a1e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	ee07 3a90 	vmov	s15, r3
 8006914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006918:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006a78 <HAL_RCC_GetSysClockFreq+0x2d8>
 800691c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006920:	4b50      	ldr	r3, [pc, #320]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006928:	ee07 3a90 	vmov	s15, r3
 800692c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006930:	ed97 6a02 	vldr	s12, [r7, #8]
 8006934:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006a74 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006938:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006950:	e065      	b.n	8006a1e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	ee07 3a90 	vmov	s15, r3
 8006958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006a7c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006964:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696c:	ee07 3a90 	vmov	s15, r3
 8006970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006974:	ed97 6a02 	vldr	s12, [r7, #8]
 8006978:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006a74 <HAL_RCC_GetSysClockFreq+0x2d4>
 800697c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006990:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006994:	e043      	b.n	8006a1e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006a80 <HAL_RCC_GetSysClockFreq+0x2e0>
 80069a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a8:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b0:	ee07 3a90 	vmov	s15, r3
 80069b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80069bc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006a74 <HAL_RCC_GetSysClockFreq+0x2d4>
 80069c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069d8:	e021      	b.n	8006a1e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006a7c <HAL_RCC_GetSysClockFreq+0x2dc>
 80069e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ec:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f4:	ee07 3a90 	vmov	s15, r3
 80069f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a00:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006a74 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a1c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a1e:	4b11      	ldr	r3, [pc, #68]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	0a5b      	lsrs	r3, r3, #9
 8006a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a28:	3301      	adds	r3, #1
 8006a2a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a36:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a42:	ee17 3a90 	vmov	r3, s15
 8006a46:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006a48:	e005      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
    break;
 8006a4e:	e002      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006a52:	61bb      	str	r3, [r7, #24]
    break;
 8006a54:	bf00      	nop
  }

  return sysclockfreq;
 8006a56:	69bb      	ldr	r3, [r7, #24]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3724      	adds	r7, #36	; 0x24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	58024400 	.word	0x58024400
 8006a68:	03d09000 	.word	0x03d09000
 8006a6c:	003d0900 	.word	0x003d0900
 8006a70:	02625a00 	.word	0x02625a00
 8006a74:	46000000 	.word	0x46000000
 8006a78:	4c742400 	.word	0x4c742400
 8006a7c:	4a742400 	.word	0x4a742400
 8006a80:	4c189680 	.word	0x4c189680

08006a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a8a:	f7ff fe89 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 8006a8e:	4601      	mov	r1, r0
 8006a90:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	0a1b      	lsrs	r3, r3, #8
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	4a0f      	ldr	r2, [pc, #60]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a9c:	5cd3      	ldrb	r3, [r2, r3]
 8006a9e:	f003 031f 	and.w	r3, r3, #31
 8006aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8006aa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	4a09      	ldr	r2, [pc, #36]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ab2:	5cd3      	ldrb	r3, [r2, r3]
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	fa22 f303 	lsr.w	r3, r2, r3
 8006abe:	4a07      	ldr	r2, [pc, #28]	; (8006adc <HAL_RCC_GetHCLKFreq+0x58>)
 8006ac0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ac2:	4a07      	ldr	r2, [pc, #28]	; (8006ae0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ac8:	4b04      	ldr	r3, [pc, #16]	; (8006adc <HAL_RCC_GetHCLKFreq+0x58>)
 8006aca:	681b      	ldr	r3, [r3, #0]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	0800c16c 	.word	0x0800c16c
 8006adc:	24000004 	.word	0x24000004
 8006ae0:	24000000 	.word	0x24000000

08006ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ae8:	f7ff ffcc 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8006aec:	4601      	mov	r1, r0
 8006aee:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	091b      	lsrs	r3, r3, #4
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006afa:	5cd3      	ldrb	r3, [r2, r3]
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	58024400 	.word	0x58024400
 8006b0c:	0800c16c 	.word	0x0800c16c

08006b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b14:	f7ff ffb6 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8006b18:	4601      	mov	r1, r0
 8006b1a:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b26:	5cd3      	ldrb	r3, [r2, r3]
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	58024400 	.word	0x58024400
 8006b38:	0800c16c 	.word	0x0800c16c

08006b3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b44:	2300      	movs	r3, #0
 8006b46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b48:	2300      	movs	r3, #0
 8006b4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d03d      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b60:	d013      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b66:	d802      	bhi.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d007      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006b6c:	e01f      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b72:	d013      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006b74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b78:	d01c      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006b7a:	e018      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7c:	4baf      	ldr	r3, [pc, #700]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	4aae      	ldr	r2, [pc, #696]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b88:	e015      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	2102      	movs	r1, #2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 f96f 	bl	8007e74 <RCCEx_PLL2_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b9a:	e00c      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3324      	adds	r3, #36	; 0x24
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f001 fa18 	bl	8007fd8 <RCCEx_PLL3_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006bac:	e003      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb2:	e000      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bbc:	4b9f      	ldr	r3, [pc, #636]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc8:	499c      	ldr	r1, [pc, #624]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	650b      	str	r3, [r1, #80]	; 0x50
 8006bce:	e001      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d03d      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d826      	bhi.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006be8:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c05 	.word	0x08006c05
 8006bf4:	08006c13 	.word	0x08006c13
 8006bf8:	08006c25 	.word	0x08006c25
 8006bfc:	08006c3d 	.word	0x08006c3d
 8006c00:	08006c3d 	.word	0x08006c3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c04:	4b8d      	ldr	r3, [pc, #564]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	4a8c      	ldr	r2, [pc, #560]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c10:	e015      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3304      	adds	r3, #4
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 f92b 	bl	8007e74 <RCCEx_PLL2_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c22:	e00c      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3324      	adds	r3, #36	; 0x24
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f001 f9d4 	bl	8007fd8 <RCCEx_PLL3_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3a:	e000      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c44:	4b7d      	ldr	r3, [pc, #500]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c48:	f023 0207 	bic.w	r2, r3, #7
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	497a      	ldr	r1, [pc, #488]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	650b      	str	r3, [r1, #80]	; 0x50
 8006c56:	e001      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d03e      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6c:	2b80      	cmp	r3, #128	; 0x80
 8006c6e:	d01c      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d804      	bhi.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d00d      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006c7c:	e01e      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c80:	d01f      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c86:	d01e      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c88:	e018      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c8a:	4b6c      	ldr	r3, [pc, #432]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	4a6b      	ldr	r2, [pc, #428]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006c96:	e017      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f001 f8e8 	bl	8007e74 <RCCEx_PLL2_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ca8:	e00e      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3324      	adds	r3, #36	; 0x24
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 f991 	bl	8007fd8 <RCCEx_PLL3_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006cba:	e005      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	e002      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006cce:	4b5b      	ldr	r3, [pc, #364]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cda:	4958      	ldr	r1, [pc, #352]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	650b      	str	r3, [r1, #80]	; 0x50
 8006ce0:	e001      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d044      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cfc:	d01f      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d02:	d805      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d0c:	d00e      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006d0e:	e01f      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006d10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d14:	d01f      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d1a:	d01e      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006d1c:	e018      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d1e:	4b47      	ldr	r3, [pc, #284]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	4a46      	ldr	r2, [pc, #280]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d2a:	e017      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 f89e 	bl	8007e74 <RCCEx_PLL2_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006d3c:	e00e      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3324      	adds	r3, #36	; 0x24
 8006d42:	2100      	movs	r1, #0
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 f947 	bl	8007fd8 <RCCEx_PLL3_Config>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d4e:	e005      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	75fb      	strb	r3, [r7, #23]
      break;
 8006d54:	e002      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006d56:	bf00      	nop
 8006d58:	e000      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d62:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d66:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d70:	4932      	ldr	r1, [pc, #200]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	658b      	str	r3, [r1, #88]	; 0x58
 8006d76:	e001      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d044      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d92:	d01f      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d98:	d805      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006d9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006da2:	d00e      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006da4:	e01f      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006da6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006daa:	d01f      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006db0:	d01e      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006db2:	e018      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db4:	4b21      	ldr	r3, [pc, #132]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	4a20      	ldr	r2, [pc, #128]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dc0:	e017      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 f853 	bl	8007e74 <RCCEx_PLL2_Config>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006dd2:	e00e      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3324      	adds	r3, #36	; 0x24
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f8fc 	bl	8007fd8 <RCCEx_PLL3_Config>
 8006de0:	4603      	mov	r3, r0
 8006de2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006de4:	e005      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dea:	e002      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006df8:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e06:	490d      	ldr	r1, [pc, #52]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	658b      	str	r3, [r1, #88]	; 0x58
 8006e0c:	e001      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d035      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d00c      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d802      	bhi.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01b      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006e2e:	e017      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d00c      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006e34:	2b30      	cmp	r3, #48	; 0x30
 8006e36:	d018      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006e38:	e012      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006e3a:	bf00      	nop
 8006e3c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e40:	4baf      	ldr	r3, [pc, #700]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	4aae      	ldr	r2, [pc, #696]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006e4c:	e00e      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3304      	adds	r3, #4
 8006e52:	2102      	movs	r1, #2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f001 f80d 	bl	8007e74 <RCCEx_PLL2_Config>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006e5e:	e005      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
      break;
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e72:	4ba3      	ldr	r3, [pc, #652]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7e:	49a0      	ldr	r1, [pc, #640]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e84:	e001      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d042      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e9e:	d01f      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea4:	d805      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eae:	d00e      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006eb0:	e01f      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006eb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006eb6:	d01f      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ebc:	d01e      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006ebe:	e018      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec0:	4b8f      	ldr	r3, [pc, #572]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	4a8e      	ldr	r2, [pc, #568]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ecc:	e017      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 ffcd 	bl	8007e74 <RCCEx_PLL2_Config>
 8006eda:	4603      	mov	r3, r0
 8006edc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ede:	e00e      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3324      	adds	r3, #36	; 0x24
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 f876 	bl	8007fd8 <RCCEx_PLL3_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ef0:	e005      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef6:	e002      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006ef8:	bf00      	nop
 8006efa:	e000      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f04:	4b7e      	ldr	r3, [pc, #504]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f08:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f10:	497b      	ldr	r1, [pc, #492]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	650b      	str	r3, [r1, #80]	; 0x50
 8006f16:	e001      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d042      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f30:	d01b      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f36:	d805      	bhi.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d022      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f40:	d00a      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006f42:	e01b      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006f44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f48:	d01d      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006f4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f4e:	d01c      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006f50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f54:	d01b      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006f56:	e011      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 ff88 	bl	8007e74 <RCCEx_PLL2_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f68:	e012      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3324      	adds	r3, #36	; 0x24
 8006f6e:	2101      	movs	r1, #1
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 f831 	bl	8007fd8 <RCCEx_PLL3_Config>
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f7a:	e009      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f80:	e006      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006f82:	bf00      	nop
 8006f84:	e004      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006f86:	bf00      	nop
 8006f88:	e002      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006f8a:	bf00      	nop
 8006f8c:	e000      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f96:	4b5a      	ldr	r3, [pc, #360]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa2:	4957      	ldr	r1, [pc, #348]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	650b      	str	r3, [r1, #80]	; 0x50
 8006fa8:	e001      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d044      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fc4:	d01b      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fca:	d805      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d022      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006fd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006fd6:	e01b      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fdc:	d01d      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fe2:	d01c      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006fe4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fe8:	d01b      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006fea:	e011      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 ff3e 	bl	8007e74 <RCCEx_PLL2_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ffc:	e012      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3324      	adds	r3, #36	; 0x24
 8007002:	2101      	movs	r1, #1
 8007004:	4618      	mov	r0, r3
 8007006:	f000 ffe7 	bl	8007fd8 <RCCEx_PLL3_Config>
 800700a:	4603      	mov	r3, r0
 800700c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800700e:	e009      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
      break;
 8007014:	e006      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007016:	bf00      	nop
 8007018:	e004      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800701a:	bf00      	nop
 800701c:	e002      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800701e:	bf00      	nop
 8007020:	e000      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800702a:	4b35      	ldr	r3, [pc, #212]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800702c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007038:	4931      	ldr	r1, [pc, #196]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800703a:	4313      	orrs	r3, r2
 800703c:	658b      	str	r3, [r1, #88]	; 0x58
 800703e:	e001      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d02d      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007058:	d005      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705e:	d009      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d013      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007064:	e00f      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007066:	4b26      	ldr	r3, [pc, #152]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	4a25      	ldr	r2, [pc, #148]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800706c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007070:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007072:	e00c      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3304      	adds	r3, #4
 8007078:	2101      	movs	r1, #1
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fefa 	bl	8007e74 <RCCEx_PLL2_Config>
 8007080:	4603      	mov	r3, r0
 8007082:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007084:	e003      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	75fb      	strb	r3, [r7, #23]
      break;
 800708a:	e000      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800708c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d109      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007094:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007098:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a0:	4917      	ldr	r1, [pc, #92]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	650b      	str	r3, [r1, #80]	; 0x50
 80070a6:	e001      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
 80070aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d035      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d81b      	bhi.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80070c0:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	08007105 	.word	0x08007105
 80070cc:	080070d9 	.word	0x080070d9
 80070d0:	080070e7 	.word	0x080070e7
 80070d4:	08007105 	.word	0x08007105
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d8:	4b09      	ldr	r3, [pc, #36]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	4a08      	ldr	r2, [pc, #32]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80070e4:	e00f      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2102      	movs	r1, #2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fec1 	bl	8007e74 <RCCEx_PLL2_Config>
 80070f2:	4603      	mov	r3, r0
 80070f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80070f6:	e006      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	75fb      	strb	r3, [r7, #23]
      break;
 80070fc:	e003      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80070fe:	bf00      	nop
 8007100:	58024400 	.word	0x58024400
      break;
 8007104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800710c:	4bba      	ldr	r3, [pc, #744]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800710e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007110:	f023 0203 	bic.w	r2, r3, #3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007118:	49b7      	ldr	r1, [pc, #732]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800711a:	4313      	orrs	r3, r2
 800711c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800711e:	e001      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 8086 	beq.w	800723e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007132:	4bb2      	ldr	r3, [pc, #712]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4ab1      	ldr	r2, [pc, #708]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800713c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800713e:	f7fd ff89 	bl	8005054 <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007144:	e009      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007146:	f7fd ff85 	bl	8005054 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b64      	cmp	r3, #100	; 0x64
 8007152:	d902      	bls.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	75fb      	strb	r3, [r7, #23]
        break;
 8007158:	e005      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800715a:	4ba8      	ldr	r3, [pc, #672]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0ef      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d166      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800716c:	4ba2      	ldr	r3, [pc, #648]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800716e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007176:	4053      	eors	r3, r2
 8007178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800717c:	2b00      	cmp	r3, #0
 800717e:	d013      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007180:	4b9d      	ldr	r3, [pc, #628]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007188:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800718a:	4b9b      	ldr	r3, [pc, #620]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	4a9a      	ldr	r2, [pc, #616]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007194:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007196:	4b98      	ldr	r3, [pc, #608]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	4a97      	ldr	r2, [pc, #604]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800719c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071a2:	4a95      	ldr	r2, [pc, #596]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b2:	d115      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b4:	f7fd ff4e 	bl	8005054 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071ba:	e00b      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071bc:	f7fd ff4a 	bl	8005054 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d902      	bls.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	75fb      	strb	r3, [r7, #23]
            break;
 80071d2:	e005      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071d4:	4b88      	ldr	r3, [pc, #544]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80071d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0ed      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d126      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071f4:	d10d      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80071f6:	4b80      	ldr	r3, [pc, #512]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007204:	0919      	lsrs	r1, r3, #4
 8007206:	4b7e      	ldr	r3, [pc, #504]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007208:	400b      	ands	r3, r1
 800720a:	497b      	ldr	r1, [pc, #492]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800720c:	4313      	orrs	r3, r2
 800720e:	610b      	str	r3, [r1, #16]
 8007210:	e005      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007212:	4b79      	ldr	r3, [pc, #484]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	4a78      	ldr	r2, [pc, #480]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007218:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800721c:	6113      	str	r3, [r2, #16]
 800721e:	4b76      	ldr	r3, [pc, #472]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800722c:	4972      	ldr	r1, [pc, #456]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800722e:	4313      	orrs	r3, r2
 8007230:	670b      	str	r3, [r1, #112]	; 0x70
 8007232:	e004      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	75bb      	strb	r3, [r7, #22]
 8007238:	e001      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d07d      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800724e:	2b28      	cmp	r3, #40	; 0x28
 8007250:	d866      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007252:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007258:	08007327 	.word	0x08007327
 800725c:	08007321 	.word	0x08007321
 8007260:	08007321 	.word	0x08007321
 8007264:	08007321 	.word	0x08007321
 8007268:	08007321 	.word	0x08007321
 800726c:	08007321 	.word	0x08007321
 8007270:	08007321 	.word	0x08007321
 8007274:	08007321 	.word	0x08007321
 8007278:	080072fd 	.word	0x080072fd
 800727c:	08007321 	.word	0x08007321
 8007280:	08007321 	.word	0x08007321
 8007284:	08007321 	.word	0x08007321
 8007288:	08007321 	.word	0x08007321
 800728c:	08007321 	.word	0x08007321
 8007290:	08007321 	.word	0x08007321
 8007294:	08007321 	.word	0x08007321
 8007298:	0800730f 	.word	0x0800730f
 800729c:	08007321 	.word	0x08007321
 80072a0:	08007321 	.word	0x08007321
 80072a4:	08007321 	.word	0x08007321
 80072a8:	08007321 	.word	0x08007321
 80072ac:	08007321 	.word	0x08007321
 80072b0:	08007321 	.word	0x08007321
 80072b4:	08007321 	.word	0x08007321
 80072b8:	08007327 	.word	0x08007327
 80072bc:	08007321 	.word	0x08007321
 80072c0:	08007321 	.word	0x08007321
 80072c4:	08007321 	.word	0x08007321
 80072c8:	08007321 	.word	0x08007321
 80072cc:	08007321 	.word	0x08007321
 80072d0:	08007321 	.word	0x08007321
 80072d4:	08007321 	.word	0x08007321
 80072d8:	08007327 	.word	0x08007327
 80072dc:	08007321 	.word	0x08007321
 80072e0:	08007321 	.word	0x08007321
 80072e4:	08007321 	.word	0x08007321
 80072e8:	08007321 	.word	0x08007321
 80072ec:	08007321 	.word	0x08007321
 80072f0:	08007321 	.word	0x08007321
 80072f4:	08007321 	.word	0x08007321
 80072f8:	08007327 	.word	0x08007327
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	2101      	movs	r1, #1
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fdb6 	bl	8007e74 <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800730c:	e00c      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3324      	adds	r3, #36	; 0x24
 8007312:	2101      	movs	r1, #1
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fe5f 	bl	8007fd8 <RCCEx_PLL3_Config>
 800731a:	4603      	mov	r3, r0
 800731c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800731e:	e003      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	75fb      	strb	r3, [r7, #23]
      break;
 8007324:	e000      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d109      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800732e:	4b32      	ldr	r3, [pc, #200]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007332:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800733a:	492f      	ldr	r1, [pc, #188]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800733c:	4313      	orrs	r3, r2
 800733e:	654b      	str	r3, [r1, #84]	; 0x54
 8007340:	e001      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d037      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007356:	2b05      	cmp	r3, #5
 8007358:	d820      	bhi.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	080073a3 	.word	0x080073a3
 8007364:	08007379 	.word	0x08007379
 8007368:	0800738b 	.word	0x0800738b
 800736c:	080073a3 	.word	0x080073a3
 8007370:	080073a3 	.word	0x080073a3
 8007374:	080073a3 	.word	0x080073a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3304      	adds	r3, #4
 800737c:	2101      	movs	r1, #1
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fd78 	bl	8007e74 <RCCEx_PLL2_Config>
 8007384:	4603      	mov	r3, r0
 8007386:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007388:	e00c      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3324      	adds	r3, #36	; 0x24
 800738e:	2101      	movs	r1, #1
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fe21 	bl	8007fd8 <RCCEx_PLL3_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800739a:	e003      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
      break;
 80073a0:	e000      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80073a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d109      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80073aa:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	f023 0207 	bic.w	r2, r3, #7
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b6:	4910      	ldr	r1, [pc, #64]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	654b      	str	r3, [r1, #84]	; 0x54
 80073bc:	e001      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d040      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d4:	2b05      	cmp	r3, #5
 80073d6:	d827      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80073d8:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	0800742f 	.word	0x0800742f
 80073e4:	08007405 	.word	0x08007405
 80073e8:	08007417 	.word	0x08007417
 80073ec:	0800742f 	.word	0x0800742f
 80073f0:	0800742f 	.word	0x0800742f
 80073f4:	0800742f 	.word	0x0800742f
 80073f8:	58024400 	.word	0x58024400
 80073fc:	58024800 	.word	0x58024800
 8007400:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3304      	adds	r3, #4
 8007408:	2101      	movs	r1, #1
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fd32 	bl	8007e74 <RCCEx_PLL2_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007414:	e00c      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3324      	adds	r3, #36	; 0x24
 800741a:	2101      	movs	r1, #1
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fddb 	bl	8007fd8 <RCCEx_PLL3_Config>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007426:	e003      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	75fb      	strb	r3, [r7, #23]
      break;
 800742c:	e000      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800742e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007436:	4bb2      	ldr	r3, [pc, #712]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743a:	f023 0207 	bic.w	r2, r3, #7
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007444:	49ae      	ldr	r1, [pc, #696]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007446:	4313      	orrs	r3, r2
 8007448:	658b      	str	r3, [r1, #88]	; 0x58
 800744a:	e001      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d044      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007466:	d01b      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800746c:	d805      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d022      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007476:	d00a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007478:	e01b      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800747a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800747e:	d01d      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007484:	d01c      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007486:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800748a:	d01b      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800748c:	e011      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3304      	adds	r3, #4
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fced 	bl	8007e74 <RCCEx_PLL2_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800749e:	e012      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3324      	adds	r3, #36	; 0x24
 80074a4:	2102      	movs	r1, #2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fd96 	bl	8007fd8 <RCCEx_PLL3_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80074b0:	e009      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	75fb      	strb	r3, [r7, #23]
      break;
 80074b6:	e006      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80074b8:	bf00      	nop
 80074ba:	e004      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80074bc:	bf00      	nop
 80074be:	e002      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80074c0:	bf00      	nop
 80074c2:	e000      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80074c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074cc:	4b8c      	ldr	r3, [pc, #560]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80074ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074da:	4989      	ldr	r1, [pc, #548]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	654b      	str	r3, [r1, #84]	; 0x54
 80074e0:	e001      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d044      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074fc:	d01b      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80074fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007502:	d805      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d022      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800750e:	e01b      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007514:	d01d      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007516:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800751a:	d01c      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800751c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007520:	d01b      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007522:	e011      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3304      	adds	r3, #4
 8007528:	2100      	movs	r1, #0
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fca2 	bl	8007e74 <RCCEx_PLL2_Config>
 8007530:	4603      	mov	r3, r0
 8007532:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007534:	e012      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3324      	adds	r3, #36	; 0x24
 800753a:	2102      	movs	r1, #2
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fd4b 	bl	8007fd8 <RCCEx_PLL3_Config>
 8007542:	4603      	mov	r3, r0
 8007544:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007546:	e009      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]
      break;
 800754c:	e006      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800754e:	bf00      	nop
 8007550:	e004      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007552:	bf00      	nop
 8007554:	e002      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007556:	bf00      	nop
 8007558:	e000      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800755a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007562:	4b67      	ldr	r3, [pc, #412]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007566:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007570:	4963      	ldr	r1, [pc, #396]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007572:	4313      	orrs	r3, r2
 8007574:	658b      	str	r3, [r1, #88]	; 0x58
 8007576:	e001      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d044      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800758e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007592:	d01b      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007598:	d805      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d022      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800759e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a2:	d00a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80075a4:	e01b      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80075a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075aa:	d01d      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80075ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075b0:	d01c      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80075b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075b6:	d01b      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80075b8:	e011      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3304      	adds	r3, #4
 80075be:	2100      	movs	r1, #0
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fc57 	bl	8007e74 <RCCEx_PLL2_Config>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80075ca:	e012      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3324      	adds	r3, #36	; 0x24
 80075d0:	2102      	movs	r1, #2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fd00 	bl	8007fd8 <RCCEx_PLL3_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80075dc:	e009      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	75fb      	strb	r3, [r7, #23]
      break;
 80075e2:	e006      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80075e4:	bf00      	nop
 80075e6:	e004      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80075e8:	bf00      	nop
 80075ea:	e002      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80075ec:	bf00      	nop
 80075ee:	e000      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80075f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075f8:	4b41      	ldr	r3, [pc, #260]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007606:	493e      	ldr	r1, [pc, #248]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007608:	4313      	orrs	r3, r2
 800760a:	658b      	str	r3, [r1, #88]	; 0x58
 800760c:	e001      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01a      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007628:	d10a      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3324      	adds	r3, #36	; 0x24
 800762e:	2102      	movs	r1, #2
 8007630:	4618      	mov	r0, r3
 8007632:	f000 fcd1 	bl	8007fd8 <RCCEx_PLL3_Config>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007640:	4b2f      	ldr	r3, [pc, #188]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800764e:	492c      	ldr	r1, [pc, #176]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007650:	4313      	orrs	r3, r2
 8007652:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800766a:	d10a      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3324      	adds	r3, #36	; 0x24
 8007670:	2102      	movs	r1, #2
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fcb0 	bl	8007fd8 <RCCEx_PLL3_Config>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007682:	4b1f      	ldr	r3, [pc, #124]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007690:	491b      	ldr	r1, [pc, #108]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007692:	4313      	orrs	r3, r2
 8007694:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d032      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ac:	d00d      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80076ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076b2:	d016      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d111      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	2100      	movs	r1, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fbd8 	bl	8007e74 <RCCEx_PLL2_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80076c8:	e00c      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3324      	adds	r3, #36	; 0x24
 80076ce:	2102      	movs	r1, #2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 fc81 	bl	8007fd8 <RCCEx_PLL3_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80076da:	e003      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]
      break;
 80076e0:	e000      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80076e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10c      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076ea:	4b05      	ldr	r3, [pc, #20]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076f8:	4901      	ldr	r1, [pc, #4]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	658b      	str	r3, [r1, #88]	; 0x58
 80076fe:	e003      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	7dfb      	ldrb	r3, [r7, #23]
 8007706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d02f      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800771a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800771e:	d00c      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007724:	d015      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800772a:	d10f      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772c:	4b79      	ldr	r3, [pc, #484]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	4a78      	ldr	r2, [pc, #480]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007738:	e00c      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3324      	adds	r3, #36	; 0x24
 800773e:	2101      	movs	r1, #1
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fc49 	bl	8007fd8 <RCCEx_PLL3_Config>
 8007746:	4603      	mov	r3, r0
 8007748:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800774a:	e003      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	75fb      	strb	r3, [r7, #23]
      break;
 8007750:	e000      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800775a:	4b6e      	ldr	r3, [pc, #440]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007768:	496a      	ldr	r1, [pc, #424]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800776a:	4313      	orrs	r3, r2
 800776c:	654b      	str	r3, [r1, #84]	; 0x54
 800776e:	e001      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007770:	7dfb      	ldrb	r3, [r7, #23]
 8007772:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d029      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800778c:	d007      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800778e:	e00f      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007790:	4b60      	ldr	r3, [pc, #384]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	4a5f      	ldr	r2, [pc, #380]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800779c:	e00b      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	2102      	movs	r1, #2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fb65 	bl	8007e74 <RCCEx_PLL2_Config>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80077ae:	e002      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	75fb      	strb	r3, [r7, #23]
      break;
 80077b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d109      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077bc:	4b55      	ldr	r3, [pc, #340]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c8:	4952      	ldr	r1, [pc, #328]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077ce:	e001      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3324      	adds	r3, #36	; 0x24
 80077e4:	2102      	movs	r1, #2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fbf6 	bl	8007fd8 <RCCEx_PLL3_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d02f      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780a:	d00c      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800780c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007810:	d802      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d011      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007816:	e00d      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781c:	d00f      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800781e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007822:	d00e      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007824:	e006      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007826:	4b3b      	ldr	r3, [pc, #236]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	4a3a      	ldr	r2, [pc, #232]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800782c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007830:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007832:	e007      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	75fb      	strb	r3, [r7, #23]
      break;
 8007838:	e004      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800783a:	bf00      	nop
 800783c:	e002      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d109      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800784a:	4b32      	ldr	r3, [pc, #200]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800784c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007856:	492f      	ldr	r1, [pc, #188]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007858:	4313      	orrs	r3, r2
 800785a:	654b      	str	r3, [r1, #84]	; 0x54
 800785c:	e001      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800786e:	4b29      	ldr	r3, [pc, #164]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007872:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	4926      	ldr	r1, [pc, #152]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800787c:	4313      	orrs	r3, r2
 800787e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800788c:	4b21      	ldr	r3, [pc, #132]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800789a:	491e      	ldr	r1, [pc, #120]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800789c:	4313      	orrs	r3, r2
 800789e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078ac:	4b19      	ldr	r3, [pc, #100]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b8:	4916      	ldr	r1, [pc, #88]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00d      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078ca:	4b12      	ldr	r3, [pc, #72]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	4a11      	ldr	r2, [pc, #68]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078d4:	6113      	str	r3, [r2, #16]
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078d8:	691a      	ldr	r2, [r3, #16]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80078e0:	490c      	ldr	r1, [pc, #48]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	da08      	bge.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80078ee:	4b09      	ldr	r3, [pc, #36]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fa:	4906      	ldr	r1, [pc, #24]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007900:	7dbb      	ldrb	r3, [r7, #22]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e000      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	58024400 	.word	0x58024400

08007918 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800791c:	f7ff f8b2 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8007920:	4601      	mov	r1, r0
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	4a04      	ldr	r2, [pc, #16]	; (8007940 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800792e:	5cd3      	ldrb	r3, [r2, r3]
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	58024400 	.word	0x58024400
 8007940:	0800c16c 	.word	0x0800c16c

08007944 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007944:	b480      	push	{r7}
 8007946:	b089      	sub	sp, #36	; 0x24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800794c:	4b9d      	ldr	r3, [pc, #628]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007956:	4b9b      	ldr	r3, [pc, #620]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	0b1b      	lsrs	r3, r3, #12
 800795c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007960:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007962:	4b98      	ldr	r3, [pc, #608]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007966:	091b      	lsrs	r3, r3, #4
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800796e:	4b95      	ldr	r3, [pc, #596]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	08db      	lsrs	r3, r3, #3
 8007974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	fb02 f303 	mul.w	r3, r2, r3
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 810a 	beq.w	8007ba6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d05a      	beq.n	8007a4e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007998:	2b01      	cmp	r3, #1
 800799a:	d302      	bcc.n	80079a2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800799c:	2b02      	cmp	r3, #2
 800799e:	d078      	beq.n	8007a92 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80079a0:	e099      	b.n	8007ad6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a2:	4b88      	ldr	r3, [pc, #544]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d02d      	beq.n	8007a0a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079ae:	4b85      	ldr	r3, [pc, #532]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	08db      	lsrs	r3, r3, #3
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	4a83      	ldr	r2, [pc, #524]	; (8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80079ba:	fa22 f303 	lsr.w	r3, r2, r3
 80079be:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	ee07 3a90 	vmov	s15, r3
 80079d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d8:	4b7a      	ldr	r3, [pc, #488]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e0:	ee07 3a90 	vmov	s15, r3
 80079e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80079f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a04:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a08:	e087      	b.n	8007b1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a14:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1c:	4b69      	ldr	r3, [pc, #420]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a24:	ee07 3a90 	vmov	s15, r3
 8007a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a30:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a4c:	e065      	b.n	8007b1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	ee07 3a90 	vmov	s15, r3
 8007a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a58:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a60:	4b58      	ldr	r3, [pc, #352]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a74:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a90:	e043      	b.n	8007b1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa4:	4b47      	ldr	r3, [pc, #284]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ad4:	e021      	b.n	8007b1a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	ee07 3a90 	vmov	s15, r3
 8007adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae8:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af0:	ee07 3a90 	vmov	s15, r3
 8007af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007afc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b18:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007b1a:	4b2a      	ldr	r3, [pc, #168]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	0a5b      	lsrs	r3, r3, #9
 8007b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b24:	ee07 3a90 	vmov	s15, r3
 8007b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b40:	ee17 2a90 	vmov	r2, s15
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007b48:	4b1e      	ldr	r3, [pc, #120]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	0c1b      	lsrs	r3, r3, #16
 8007b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b6e:	ee17 2a90 	vmov	r2, s15
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007b76:	4b13      	ldr	r3, [pc, #76]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	0e1b      	lsrs	r3, r3, #24
 8007b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b90:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b9c:	ee17 2a90 	vmov	r2, s15
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	609a      	str	r2, [r3, #8]
}
 8007bb8:	bf00      	nop
 8007bba:	3724      	adds	r7, #36	; 0x24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	58024400 	.word	0x58024400
 8007bc8:	03d09000 	.word	0x03d09000
 8007bcc:	46000000 	.word	0x46000000
 8007bd0:	4c742400 	.word	0x4c742400
 8007bd4:	4a742400 	.word	0x4a742400
 8007bd8:	4c189680 	.word	0x4c189680

08007bdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b089      	sub	sp, #36	; 0x24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007be4:	4b9d      	ldr	r3, [pc, #628]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007bee:	4b9b      	ldr	r3, [pc, #620]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	0d1b      	lsrs	r3, r3, #20
 8007bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007bfa:	4b98      	ldr	r3, [pc, #608]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007c06:	4b95      	ldr	r3, [pc, #596]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0a:	08db      	lsrs	r3, r3, #3
 8007c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 810a 	beq.w	8007e3e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d05a      	beq.n	8007ce6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d302      	bcc.n	8007c3a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d078      	beq.n	8007d2a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007c38:	e099      	b.n	8007d6e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c3a:	4b88      	ldr	r3, [pc, #544]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d02d      	beq.n	8007ca2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c46:	4b85      	ldr	r3, [pc, #532]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	08db      	lsrs	r3, r3, #3
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	4a83      	ldr	r2, [pc, #524]	; (8007e60 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007c52:	fa22 f303 	lsr.w	r3, r2, r3
 8007c56:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	ee07 3a90 	vmov	s15, r3
 8007c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c70:	4b7a      	ldr	r3, [pc, #488]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c84:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ca0:	e087      	b.n	8007db2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb4:	4b69      	ldr	r3, [pc, #420]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ce4:	e065      	b.n	8007db2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf8:	4b58      	ldr	r3, [pc, #352]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d00:	ee07 3a90 	vmov	s15, r3
 8007d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d08:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d28:	e043      	b.n	8007db2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3c:	4b47      	ldr	r3, [pc, #284]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d44:	ee07 3a90 	vmov	s15, r3
 8007d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d50:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d6c:	e021      	b.n	8007db2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	ee07 3a90 	vmov	s15, r3
 8007d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d78:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007d7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d80:	4b36      	ldr	r3, [pc, #216]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d88:	ee07 3a90 	vmov	s15, r3
 8007d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d90:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d94:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007db0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007db2:	4b2a      	ldr	r3, [pc, #168]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	0a5b      	lsrs	r3, r3, #9
 8007db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dd8:	ee17 2a90 	vmov	r2, s15
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007de0:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de4:	0c1b      	lsrs	r3, r3, #16
 8007de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e06:	ee17 2a90 	vmov	r2, s15
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007e0e:	4b13      	ldr	r3, [pc, #76]	; (8007e5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	0e1b      	lsrs	r3, r3, #24
 8007e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e18:	ee07 3a90 	vmov	s15, r3
 8007e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e34:	ee17 2a90 	vmov	r2, s15
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e3c:	e008      	b.n	8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	609a      	str	r2, [r3, #8]
}
 8007e50:	bf00      	nop
 8007e52:	3724      	adds	r7, #36	; 0x24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	58024400 	.word	0x58024400
 8007e60:	03d09000 	.word	0x03d09000
 8007e64:	46000000 	.word	0x46000000
 8007e68:	4c742400 	.word	0x4c742400
 8007e6c:	4a742400 	.word	0x4a742400
 8007e70:	4c189680 	.word	0x4c189680

08007e74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e82:	4b53      	ldr	r3, [pc, #332]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d101      	bne.n	8007e92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e099      	b.n	8007fc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e92:	4b4f      	ldr	r3, [pc, #316]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a4e      	ldr	r2, [pc, #312]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007e98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e9e:	f7fd f8d9 	bl	8005054 <HAL_GetTick>
 8007ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ea4:	e008      	b.n	8007eb8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ea6:	f7fd f8d5 	bl	8005054 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e086      	b.n	8007fc6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007eb8:	4b45      	ldr	r3, [pc, #276]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1f0      	bne.n	8007ea6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ec4:	4b42      	ldr	r3, [pc, #264]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	031b      	lsls	r3, r3, #12
 8007ed2:	493f      	ldr	r1, [pc, #252]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	628b      	str	r3, [r1, #40]	; 0x28
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	025b      	lsls	r3, r3, #9
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	041b      	lsls	r3, r3, #16
 8007ef6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	061b      	lsls	r3, r3, #24
 8007f04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f08:	4931      	ldr	r1, [pc, #196]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f0e:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	492d      	ldr	r1, [pc, #180]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f20:	4b2b      	ldr	r3, [pc, #172]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	f023 0220 	bic.w	r2, r3, #32
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	4928      	ldr	r1, [pc, #160]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007f32:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	4a26      	ldr	r2, [pc, #152]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f38:	f023 0310 	bic.w	r3, r3, #16
 8007f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f42:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <RCCEx_PLL2_Config+0x160>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	69d2      	ldr	r2, [r2, #28]
 8007f4a:	00d2      	lsls	r2, r2, #3
 8007f4c:	4920      	ldr	r1, [pc, #128]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007f52:	4b1f      	ldr	r3, [pc, #124]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	4a1e      	ldr	r2, [pc, #120]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f58:	f043 0310 	orr.w	r3, r3, #16
 8007f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d106      	bne.n	8007f72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007f64:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	4a19      	ldr	r2, [pc, #100]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f70:	e00f      	b.n	8007f92 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d106      	bne.n	8007f86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f78:	4b15      	ldr	r3, [pc, #84]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	4a14      	ldr	r2, [pc, #80]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f84:	e005      	b.n	8007f92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	4a11      	ldr	r2, [pc, #68]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f92:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a0e      	ldr	r2, [pc, #56]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f9e:	f7fd f859 	bl	8005054 <HAL_GetTick>
 8007fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fa4:	e008      	b.n	8007fb8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fa6:	f7fd f855 	bl	8005054 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d901      	bls.n	8007fb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e006      	b.n	8007fc6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fb8:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <RCCEx_PLL2_Config+0x15c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0f0      	beq.n	8007fa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	58024400 	.word	0x58024400
 8007fd4:	ffff0007 	.word	0xffff0007

08007fd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fe6:	4b53      	ldr	r3, [pc, #332]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d101      	bne.n	8007ff6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e099      	b.n	800812a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ff6:	4b4f      	ldr	r3, [pc, #316]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a4e      	ldr	r2, [pc, #312]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 8007ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008002:	f7fd f827 	bl	8005054 <HAL_GetTick>
 8008006:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008008:	e008      	b.n	800801c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800800a:	f7fd f823 	bl	8005054 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b02      	cmp	r3, #2
 8008016:	d901      	bls.n	800801c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e086      	b.n	800812a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800801c:	4b45      	ldr	r3, [pc, #276]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f0      	bne.n	800800a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008028:	4b42      	ldr	r3, [pc, #264]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	051b      	lsls	r3, r3, #20
 8008036:	493f      	ldr	r1, [pc, #252]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 8008038:	4313      	orrs	r3, r2
 800803a:	628b      	str	r3, [r1, #40]	; 0x28
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	3b01      	subs	r3, #1
 8008042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	3b01      	subs	r3, #1
 800804c:	025b      	lsls	r3, r3, #9
 800804e:	b29b      	uxth	r3, r3
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	3b01      	subs	r3, #1
 8008058:	041b      	lsls	r3, r3, #16
 800805a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	3b01      	subs	r3, #1
 8008066:	061b      	lsls	r3, r3, #24
 8008068:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800806c:	4931      	ldr	r1, [pc, #196]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 800806e:	4313      	orrs	r3, r2
 8008070:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008072:	4b30      	ldr	r3, [pc, #192]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 8008074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	492d      	ldr	r1, [pc, #180]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 8008080:	4313      	orrs	r3, r2
 8008082:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008084:	4b2b      	ldr	r3, [pc, #172]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	4928      	ldr	r1, [pc, #160]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 8008092:	4313      	orrs	r3, r2
 8008094:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008096:	4b27      	ldr	r3, [pc, #156]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	4a26      	ldr	r2, [pc, #152]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 800809c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80080a2:	4b24      	ldr	r3, [pc, #144]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a6:	4b24      	ldr	r3, [pc, #144]	; (8008138 <RCCEx_PLL3_Config+0x160>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	69d2      	ldr	r2, [r2, #28]
 80080ae:	00d2      	lsls	r2, r2, #3
 80080b0:	4920      	ldr	r1, [pc, #128]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80080b6:	4b1f      	ldr	r3, [pc, #124]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ba:	4a1e      	ldr	r2, [pc, #120]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80080c8:	4b1a      	ldr	r3, [pc, #104]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	4a19      	ldr	r2, [pc, #100]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80080d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080d4:	e00f      	b.n	80080f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d106      	bne.n	80080ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80080dc:	4b15      	ldr	r3, [pc, #84]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4a14      	ldr	r2, [pc, #80]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80080e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080e8:	e005      	b.n	80080f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80080ea:	4b12      	ldr	r3, [pc, #72]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	4a11      	ldr	r2, [pc, #68]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80080f6:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a0e      	ldr	r2, [pc, #56]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 80080fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008102:	f7fc ffa7 	bl	8005054 <HAL_GetTick>
 8008106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008108:	e008      	b.n	800811c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800810a:	f7fc ffa3 	bl	8005054 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d901      	bls.n	800811c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e006      	b.n	800812a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <RCCEx_PLL3_Config+0x15c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0f0      	beq.n	800810a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	58024400 	.word	0x58024400
 8008138:	ffff0007 	.word	0xffff0007

0800813c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e049      	b.n	80081e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d106      	bne.n	8008168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fc fe08 	bl	8004d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3304      	adds	r3, #4
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f000 f934 	bl	80083e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d001      	beq.n	8008204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e019      	b.n	8008238 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689a      	ldr	r2, [r3, #8]
 8008212:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <HAL_TIM_Base_Start+0x58>)
 8008214:	4013      	ands	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b06      	cmp	r3, #6
 800821c:	d00b      	beq.n	8008236 <HAL_TIM_Base_Start+0x4a>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008224:	d007      	beq.n	8008236 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f042 0201 	orr.w	r2, r2, #1
 8008234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	00010007 	.word	0x00010007

08008248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_TIM_ConfigClockSource+0x18>
 800825c:	2302      	movs	r3, #2
 800825e:	e0b7      	b.n	80083d0 <HAL_TIM_ConfigClockSource+0x188>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4b57      	ldr	r3, [pc, #348]	; (80083d8 <HAL_TIM_ConfigClockSource+0x190>)
 800827c:	4013      	ands	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008286:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b70      	cmp	r3, #112	; 0x70
 8008296:	d02e      	beq.n	80082f6 <HAL_TIM_ConfigClockSource+0xae>
 8008298:	2b70      	cmp	r3, #112	; 0x70
 800829a:	d812      	bhi.n	80082c2 <HAL_TIM_ConfigClockSource+0x7a>
 800829c:	2b30      	cmp	r3, #48	; 0x30
 800829e:	f000 8084 	beq.w	80083aa <HAL_TIM_ConfigClockSource+0x162>
 80082a2:	2b30      	cmp	r3, #48	; 0x30
 80082a4:	d806      	bhi.n	80082b4 <HAL_TIM_ConfigClockSource+0x6c>
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	d07f      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x162>
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d07d      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x162>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d07b      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80082b2:	e084      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80082b4:	2b50      	cmp	r3, #80	; 0x50
 80082b6:	d048      	beq.n	800834a <HAL_TIM_ConfigClockSource+0x102>
 80082b8:	2b60      	cmp	r3, #96	; 0x60
 80082ba:	d056      	beq.n	800836a <HAL_TIM_ConfigClockSource+0x122>
 80082bc:	2b40      	cmp	r3, #64	; 0x40
 80082be:	d064      	beq.n	800838a <HAL_TIM_ConfigClockSource+0x142>
      break;
 80082c0:	e07d      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80082c2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80082c6:	d070      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x162>
 80082c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80082cc:	d809      	bhi.n	80082e2 <HAL_TIM_ConfigClockSource+0x9a>
 80082ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082d2:	d027      	beq.n	8008324 <HAL_TIM_ConfigClockSource+0xdc>
 80082d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082d8:	d067      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x162>
 80082da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082de:	d06d      	beq.n	80083bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082e0:	e06d      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80082e2:	4a3e      	ldr	r2, [pc, #248]	; (80083dc <HAL_TIM_ConfigClockSource+0x194>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d060      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x162>
 80082e8:	4a3d      	ldr	r2, [pc, #244]	; (80083e0 <HAL_TIM_ConfigClockSource+0x198>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d05d      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x162>
 80082ee:	4a3d      	ldr	r2, [pc, #244]	; (80083e4 <HAL_TIM_ConfigClockSource+0x19c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d05a      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x162>
      break;
 80082f4:	e063      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6899      	ldr	r1, [r3, #8]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f000 f987 	bl	8008618 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008318:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	609a      	str	r2, [r3, #8]
      break;
 8008322:	e04c      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	6899      	ldr	r1, [r3, #8]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f000 f970 	bl	8008618 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008346:	609a      	str	r2, [r3, #8]
      break;
 8008348:	e039      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6818      	ldr	r0, [r3, #0]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	6859      	ldr	r1, [r3, #4]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	461a      	mov	r2, r3
 8008358:	f000 f8e0 	bl	800851c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2150      	movs	r1, #80	; 0x50
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f93a 	bl	80085dc <TIM_ITRx_SetConfig>
      break;
 8008368:	e029      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	6859      	ldr	r1, [r3, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	461a      	mov	r2, r3
 8008378:	f000 f8ff 	bl	800857a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2160      	movs	r1, #96	; 0x60
 8008382:	4618      	mov	r0, r3
 8008384:	f000 f92a 	bl	80085dc <TIM_ITRx_SetConfig>
      break;
 8008388:	e019      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6859      	ldr	r1, [r3, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	461a      	mov	r2, r3
 8008398:	f000 f8c0 	bl	800851c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2140      	movs	r1, #64	; 0x40
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f91a 	bl	80085dc <TIM_ITRx_SetConfig>
      break;
 80083a8:	e009      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4619      	mov	r1, r3
 80083b4:	4610      	mov	r0, r2
 80083b6:	f000 f911 	bl	80085dc <TIM_ITRx_SetConfig>
      break;
 80083ba:	e000      	b.n	80083be <HAL_TIM_ConfigClockSource+0x176>
      break;
 80083bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	ffceff88 	.word	0xffceff88
 80083dc:	00100030 	.word	0x00100030
 80083e0:	00100040 	.word	0x00100040
 80083e4:	00100020 	.word	0x00100020

080083e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a40      	ldr	r2, [pc, #256]	; (80084fc <TIM_Base_SetConfig+0x114>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008406:	d00f      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a3d      	ldr	r2, [pc, #244]	; (8008500 <TIM_Base_SetConfig+0x118>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00b      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a3c      	ldr	r2, [pc, #240]	; (8008504 <TIM_Base_SetConfig+0x11c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d007      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a3b      	ldr	r2, [pc, #236]	; (8008508 <TIM_Base_SetConfig+0x120>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a3a      	ldr	r2, [pc, #232]	; (800850c <TIM_Base_SetConfig+0x124>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d108      	bne.n	800843a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a2f      	ldr	r2, [pc, #188]	; (80084fc <TIM_Base_SetConfig+0x114>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d01f      	beq.n	8008482 <TIM_Base_SetConfig+0x9a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008448:	d01b      	beq.n	8008482 <TIM_Base_SetConfig+0x9a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a2c      	ldr	r2, [pc, #176]	; (8008500 <TIM_Base_SetConfig+0x118>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d017      	beq.n	8008482 <TIM_Base_SetConfig+0x9a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a2b      	ldr	r2, [pc, #172]	; (8008504 <TIM_Base_SetConfig+0x11c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d013      	beq.n	8008482 <TIM_Base_SetConfig+0x9a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a2a      	ldr	r2, [pc, #168]	; (8008508 <TIM_Base_SetConfig+0x120>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00f      	beq.n	8008482 <TIM_Base_SetConfig+0x9a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a29      	ldr	r2, [pc, #164]	; (800850c <TIM_Base_SetConfig+0x124>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d00b      	beq.n	8008482 <TIM_Base_SetConfig+0x9a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a28      	ldr	r2, [pc, #160]	; (8008510 <TIM_Base_SetConfig+0x128>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d007      	beq.n	8008482 <TIM_Base_SetConfig+0x9a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a27      	ldr	r2, [pc, #156]	; (8008514 <TIM_Base_SetConfig+0x12c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d003      	beq.n	8008482 <TIM_Base_SetConfig+0x9a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a26      	ldr	r2, [pc, #152]	; (8008518 <TIM_Base_SetConfig+0x130>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d108      	bne.n	8008494 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4313      	orrs	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a10      	ldr	r2, [pc, #64]	; (80084fc <TIM_Base_SetConfig+0x114>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d00f      	beq.n	80084e0 <TIM_Base_SetConfig+0xf8>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a12      	ldr	r2, [pc, #72]	; (800850c <TIM_Base_SetConfig+0x124>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00b      	beq.n	80084e0 <TIM_Base_SetConfig+0xf8>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a11      	ldr	r2, [pc, #68]	; (8008510 <TIM_Base_SetConfig+0x128>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d007      	beq.n	80084e0 <TIM_Base_SetConfig+0xf8>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a10      	ldr	r2, [pc, #64]	; (8008514 <TIM_Base_SetConfig+0x12c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d003      	beq.n	80084e0 <TIM_Base_SetConfig+0xf8>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a0f      	ldr	r2, [pc, #60]	; (8008518 <TIM_Base_SetConfig+0x130>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d103      	bne.n	80084e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	691a      	ldr	r2, [r3, #16]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	615a      	str	r2, [r3, #20]
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40010000 	.word	0x40010000
 8008500:	40000400 	.word	0x40000400
 8008504:	40000800 	.word	0x40000800
 8008508:	40000c00 	.word	0x40000c00
 800850c:	40010400 	.word	0x40010400
 8008510:	40014000 	.word	0x40014000
 8008514:	40014400 	.word	0x40014400
 8008518:	40014800 	.word	0x40014800

0800851c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	f023 0201 	bic.w	r2, r3, #1
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	4313      	orrs	r3, r2
 8008550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f023 030a 	bic.w	r3, r3, #10
 8008558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	621a      	str	r2, [r3, #32]
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800857a:	b480      	push	{r7}
 800857c:	b087      	sub	sp, #28
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	f023 0210 	bic.w	r2, r3, #16
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	031b      	lsls	r3, r3, #12
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	621a      	str	r2, [r3, #32]
}
 80085ce:	bf00      	nop
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	4b09      	ldr	r3, [pc, #36]	; (8008614 <TIM_ITRx_SetConfig+0x38>)
 80085f0:	4013      	ands	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f043 0307 	orr.w	r3, r3, #7
 80085fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	609a      	str	r2, [r3, #8]
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	ffcfff8f 	.word	0xffcfff8f

08008618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	021a      	lsls	r2, r3, #8
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	431a      	orrs	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4313      	orrs	r3, r2
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	609a      	str	r2, [r3, #8]
}
 800864c:	bf00      	nop
 800864e:	371c      	adds	r7, #28
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800866c:	2302      	movs	r3, #2
 800866e:	e068      	b.n	8008742 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a2e      	ldr	r2, [pc, #184]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d004      	beq.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a2d      	ldr	r2, [pc, #180]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d108      	bne.n	80086b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1e      	ldr	r2, [pc, #120]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d01d      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e2:	d018      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1b      	ldr	r2, [pc, #108]	; (8008758 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a1a      	ldr	r2, [pc, #104]	; (800875c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00e      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a18      	ldr	r2, [pc, #96]	; (8008760 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d009      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a13      	ldr	r2, [pc, #76]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d004      	beq.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a14      	ldr	r2, [pc, #80]	; (8008764 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d10c      	bne.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800871c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	4313      	orrs	r3, r2
 8008726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	40010000 	.word	0x40010000
 8008754:	40010400 	.word	0x40010400
 8008758:	40000400 	.word	0x40000400
 800875c:	40000800 	.word	0x40000800
 8008760:	40000c00 	.word	0x40000c00
 8008764:	40001800 	.word	0x40001800

08008768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e042      	b.n	8008800 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008780:	2b00      	cmp	r3, #0
 8008782:	d106      	bne.n	8008792 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7fc fb5f 	bl	8004e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2224      	movs	r2, #36	; 0x24
 8008796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0201 	bic.w	r2, r2, #1
 80087a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fb12 	bl	8008dd4 <UART_SetConfig>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e022      	b.n	8008800 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 f8b6 	bl	8009934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0201 	orr.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 f93d 	bl	8009a78 <UART_CheckIdleState>
 80087fe:	4603      	mov	r3, r0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800881c:	2b20      	cmp	r3, #32
 800881e:	d168      	bne.n	80088f2 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d002      	beq.n	800882c <HAL_UART_Transmit_IT+0x24>
 8008826:	88fb      	ldrh	r3, [r7, #6]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e061      	b.n	80088f4 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008836:	2b01      	cmp	r3, #1
 8008838:	d101      	bne.n	800883e <HAL_UART_Transmit_IT+0x36>
 800883a:	2302      	movs	r3, #2
 800883c:	e05a      	b.n	80088f4 <HAL_UART_Transmit_IT+0xec>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	88fa      	ldrh	r2, [r7, #6]
 8008850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	88fa      	ldrh	r2, [r7, #6]
 8008858:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2221      	movs	r2, #33	; 0x21
 800886e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800887a:	d11c      	bne.n	80088b6 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008884:	d107      	bne.n	8008896 <HAL_UART_Transmit_IT+0x8e>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d103      	bne.n	8008896 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <HAL_UART_Transmit_IT+0xf8>)
 8008892:	671a      	str	r2, [r3, #112]	; 0x70
 8008894:	e002      	b.n	800889c <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4a1a      	ldr	r2, [pc, #104]	; (8008904 <HAL_UART_Transmit_IT+0xfc>)
 800889a:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80088b2:	609a      	str	r2, [r3, #8]
 80088b4:	e01b      	b.n	80088ee <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088be:	d107      	bne.n	80088d0 <HAL_UART_Transmit_IT+0xc8>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d103      	bne.n	80088d0 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4a0f      	ldr	r2, [pc, #60]	; (8008908 <HAL_UART_Transmit_IT+0x100>)
 80088cc:	671a      	str	r2, [r3, #112]	; 0x70
 80088ce:	e002      	b.n	80088d6 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4a0e      	ldr	r2, [pc, #56]	; (800890c <HAL_UART_Transmit_IT+0x104>)
 80088d4:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088ec:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e000      	b.n	80088f4 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80088f2:	2302      	movs	r3, #2
  }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	08009e09 	.word	0x08009e09
 8008904:	08009d6f 	.word	0x08009d6f
 8008908:	08009cf1 	.word	0x08009cf1
 800890c:	08009c7d 	.word	0x08009c7d

08008910 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008924:	2b20      	cmp	r3, #32
 8008926:	f040 80bc 	bne.w	8008aa2 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <HAL_UART_Receive_IT+0x26>
 8008930:	88fb      	ldrh	r3, [r7, #6]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e0b4      	b.n	8008aa4 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_UART_Receive_IT+0x38>
 8008944:	2302      	movs	r3, #2
 8008946:	e0ad      	b.n	8008aa4 <HAL_UART_Receive_IT+0x194>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	88fa      	ldrh	r2, [r7, #6]
 800895a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	88fa      	ldrh	r2, [r7, #6]
 8008962:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008974:	d10e      	bne.n	8008994 <HAL_UART_Receive_IT+0x84>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d105      	bne.n	800898a <HAL_UART_Receive_IT+0x7a>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008984:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008988:	e02d      	b.n	80089e6 <HAL_UART_Receive_IT+0xd6>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	22ff      	movs	r2, #255	; 0xff
 800898e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008992:	e028      	b.n	80089e6 <HAL_UART_Receive_IT+0xd6>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10d      	bne.n	80089b8 <HAL_UART_Receive_IT+0xa8>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <HAL_UART_Receive_IT+0x9e>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	22ff      	movs	r2, #255	; 0xff
 80089a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089ac:	e01b      	b.n	80089e6 <HAL_UART_Receive_IT+0xd6>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	227f      	movs	r2, #127	; 0x7f
 80089b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089b6:	e016      	b.n	80089e6 <HAL_UART_Receive_IT+0xd6>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089c0:	d10d      	bne.n	80089de <HAL_UART_Receive_IT+0xce>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <HAL_UART_Receive_IT+0xc4>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	227f      	movs	r2, #127	; 0x7f
 80089ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089d2:	e008      	b.n	80089e6 <HAL_UART_Receive_IT+0xd6>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	223f      	movs	r2, #63	; 0x3f
 80089d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089dc:	e003      	b.n	80089e6 <HAL_UART_Receive_IT+0xd6>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2222      	movs	r2, #34	; 0x22
 80089f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689a      	ldr	r2, [r3, #8]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f042 0201 	orr.w	r2, r2, #1
 8008a04:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a0e:	d12a      	bne.n	8008a66 <HAL_UART_Receive_IT+0x156>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a16:	88fa      	ldrh	r2, [r7, #6]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d324      	bcc.n	8008a66 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a24:	d107      	bne.n	8008a36 <HAL_UART_Receive_IT+0x126>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d103      	bne.n	8008a36 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4a1f      	ldr	r2, [pc, #124]	; (8008ab0 <HAL_UART_Receive_IT+0x1a0>)
 8008a32:	66da      	str	r2, [r3, #108]	; 0x6c
 8008a34:	e002      	b.n	8008a3c <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	4a1e      	ldr	r2, [pc, #120]	; (8008ab4 <HAL_UART_Receive_IT+0x1a4>)
 8008a3a:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a52:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689a      	ldr	r2, [r3, #8]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008a62:	609a      	str	r2, [r3, #8]
 8008a64:	e01b      	b.n	8008a9e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a6e:	d107      	bne.n	8008a80 <HAL_UART_Receive_IT+0x170>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d103      	bne.n	8008a80 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a0f      	ldr	r2, [pc, #60]	; (8008ab8 <HAL_UART_Receive_IT+0x1a8>)
 8008a7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8008a7e:	e002      	b.n	8008a86 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4a0e      	ldr	r2, [pc, #56]	; (8008abc <HAL_UART_Receive_IT+0x1ac>)
 8008a84:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008a9c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e000      	b.n	8008aa4 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8008aa2:	2302      	movs	r3, #2
  }
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	0800a13d 	.word	0x0800a13d
 8008ab4:	0800a035 	.word	0x0800a035
 8008ab8:	08009f8b 	.word	0x08009f8b
 8008abc:	08009ee1 	.word	0x08009ee1

08008ac0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d118      	bne.n	8008b22 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f003 0320 	and.w	r3, r3, #32
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d013      	beq.n	8008b22 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d009      	beq.n	8008b22 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 8145 	beq.w	8008da2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	4798      	blx	r3
      }
      return;
 8008b20:	e13f      	b.n	8008da2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 80e8 	beq.w	8008cfa <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4ba1      	ldr	r3, [pc, #644]	; (8008db4 <HAL_UART_IRQHandler+0x2f4>)
 8008b2e:	4013      	ands	r3, r2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d105      	bne.n	8008b40 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	4ba0      	ldr	r3, [pc, #640]	; (8008db8 <HAL_UART_IRQHandler+0x2f8>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 80dd 	beq.w	8008cfa <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d010      	beq.n	8008b6c <HAL_UART_IRQHandler+0xac>
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00b      	beq.n	8008b6c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b62:	f043 0201 	orr.w	r2, r3, #1
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d010      	beq.n	8008b98 <HAL_UART_IRQHandler+0xd8>
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2202      	movs	r2, #2
 8008b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8e:	f043 0204 	orr.w	r2, r3, #4
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	f003 0304 	and.w	r3, r3, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d010      	beq.n	8008bc4 <HAL_UART_IRQHandler+0x104>
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2204      	movs	r2, #4
 8008bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bba:	f043 0202 	orr.w	r2, r3, #2
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	f003 0308 	and.w	r3, r3, #8
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d015      	beq.n	8008bfa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	f003 0320 	and.w	r3, r3, #32
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	4b76      	ldr	r3, [pc, #472]	; (8008db4 <HAL_UART_IRQHandler+0x2f4>)
 8008bdc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2208      	movs	r2, #8
 8008be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf0:	f043 0208 	orr.w	r2, r3, #8
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d011      	beq.n	8008c28 <HAL_UART_IRQHandler+0x168>
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00c      	beq.n	8008c28 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1e:	f043 0220 	orr.w	r2, r3, #32
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 80b9 	beq.w	8008da6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d011      	beq.n	8008c62 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	f003 0320 	and.w	r3, r3, #32
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d104      	bne.n	8008c52 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c68:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c74:	2b40      	cmp	r3, #64	; 0x40
 8008c76:	d004      	beq.n	8008c82 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d031      	beq.n	8008ce6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 ffc0 	bl	8009c08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c92:	2b40      	cmp	r3, #64	; 0x40
 8008c94:	d123      	bne.n	8008cde <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ca4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d013      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cb2:	4a42      	ldr	r2, [pc, #264]	; (8008dbc <HAL_UART_IRQHandler+0x2fc>)
 8008cb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fc fb14 	bl	80052e8 <HAL_DMA_Abort_IT>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d017      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd4:	e00f      	b.n	8008cf6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f872 	bl	8008dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cdc:	e00b      	b.n	8008cf6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f86e 	bl	8008dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce4:	e007      	b.n	8008cf6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f86a 	bl	8008dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8008cf4:	e057      	b.n	8008da6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf6:	bf00      	nop
    return;
 8008cf8:	e055      	b.n	8008da6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00d      	beq.n	8008d20 <HAL_UART_IRQHandler+0x260>
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d008      	beq.n	8008d20 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 fa93 	bl	800a244 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d1e:	e045      	b.n	8008dac <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d012      	beq.n	8008d50 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d008      	beq.n	8008d50 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d031      	beq.n	8008daa <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	4798      	blx	r3
    }
    return;
 8008d4e:	e02c      	b.n	8008daa <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d008      	beq.n	8008d6c <HAL_UART_IRQHandler+0x2ac>
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d003      	beq.n	8008d6c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 f8a1 	bl	8009eac <UART_EndTransmit_IT>
    return;
 8008d6a:	e01f      	b.n	8008dac <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d008      	beq.n	8008d88 <HAL_UART_IRQHandler+0x2c8>
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f001 fa73 	bl	800a26c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d86:	e011      	b.n	8008dac <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00c      	beq.n	8008dac <HAL_UART_IRQHandler+0x2ec>
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	da09      	bge.n	8008dac <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 fa5d 	bl	800a258 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d9e:	bf00      	nop
 8008da0:	e004      	b.n	8008dac <HAL_UART_IRQHandler+0x2ec>
      return;
 8008da2:	bf00      	nop
 8008da4:	e002      	b.n	8008dac <HAL_UART_IRQHandler+0x2ec>
    return;
 8008da6:	bf00      	nop
 8008da8:	e000      	b.n	8008dac <HAL_UART_IRQHandler+0x2ec>
    return;
 8008daa:	bf00      	nop
  }
}
 8008dac:	3720      	adds	r7, #32
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	10000001 	.word	0x10000001
 8008db8:	04000120 	.word	0x04000120
 8008dbc:	08009c51 	.word	0x08009c51

08008dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008dd8:	b08e      	sub	sp, #56	; 0x38
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689a      	ldr	r2, [r3, #8]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	431a      	orrs	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e02:	4313      	orrs	r3, r2
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	4bc1      	ldr	r3, [pc, #772]	; (8009114 <UART_SetConfig+0x340>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6812      	ldr	r2, [r2, #0]
 8008e14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e16:	430b      	orrs	r3, r1
 8008e18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4ab7      	ldr	r2, [pc, #732]	; (8009118 <UART_SetConfig+0x344>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d004      	beq.n	8008e4a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e46:	4313      	orrs	r3, r2
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	4bb2      	ldr	r3, [pc, #712]	; (800911c <UART_SetConfig+0x348>)
 8008e52:	4013      	ands	r3, r2
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6812      	ldr	r2, [r2, #0]
 8008e58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	f023 010f 	bic.w	r1, r3, #15
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4aa9      	ldr	r2, [pc, #676]	; (8009120 <UART_SetConfig+0x34c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d177      	bne.n	8008f6e <UART_SetConfig+0x19a>
 8008e7e:	4ba9      	ldr	r3, [pc, #676]	; (8009124 <UART_SetConfig+0x350>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e86:	2b28      	cmp	r3, #40	; 0x28
 8008e88:	d86c      	bhi.n	8008f64 <UART_SetConfig+0x190>
 8008e8a:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <UART_SetConfig+0xbc>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008f35 	.word	0x08008f35
 8008e94:	08008f65 	.word	0x08008f65
 8008e98:	08008f65 	.word	0x08008f65
 8008e9c:	08008f65 	.word	0x08008f65
 8008ea0:	08008f65 	.word	0x08008f65
 8008ea4:	08008f65 	.word	0x08008f65
 8008ea8:	08008f65 	.word	0x08008f65
 8008eac:	08008f65 	.word	0x08008f65
 8008eb0:	08008f3d 	.word	0x08008f3d
 8008eb4:	08008f65 	.word	0x08008f65
 8008eb8:	08008f65 	.word	0x08008f65
 8008ebc:	08008f65 	.word	0x08008f65
 8008ec0:	08008f65 	.word	0x08008f65
 8008ec4:	08008f65 	.word	0x08008f65
 8008ec8:	08008f65 	.word	0x08008f65
 8008ecc:	08008f65 	.word	0x08008f65
 8008ed0:	08008f45 	.word	0x08008f45
 8008ed4:	08008f65 	.word	0x08008f65
 8008ed8:	08008f65 	.word	0x08008f65
 8008edc:	08008f65 	.word	0x08008f65
 8008ee0:	08008f65 	.word	0x08008f65
 8008ee4:	08008f65 	.word	0x08008f65
 8008ee8:	08008f65 	.word	0x08008f65
 8008eec:	08008f65 	.word	0x08008f65
 8008ef0:	08008f4d 	.word	0x08008f4d
 8008ef4:	08008f65 	.word	0x08008f65
 8008ef8:	08008f65 	.word	0x08008f65
 8008efc:	08008f65 	.word	0x08008f65
 8008f00:	08008f65 	.word	0x08008f65
 8008f04:	08008f65 	.word	0x08008f65
 8008f08:	08008f65 	.word	0x08008f65
 8008f0c:	08008f65 	.word	0x08008f65
 8008f10:	08008f55 	.word	0x08008f55
 8008f14:	08008f65 	.word	0x08008f65
 8008f18:	08008f65 	.word	0x08008f65
 8008f1c:	08008f65 	.word	0x08008f65
 8008f20:	08008f65 	.word	0x08008f65
 8008f24:	08008f65 	.word	0x08008f65
 8008f28:	08008f65 	.word	0x08008f65
 8008f2c:	08008f65 	.word	0x08008f65
 8008f30:	08008f5d 	.word	0x08008f5d
 8008f34:	2301      	movs	r3, #1
 8008f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3a:	e233      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f42:	e22f      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008f44:	2308      	movs	r3, #8
 8008f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4a:	e22b      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f52:	e227      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008f54:	2320      	movs	r3, #32
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	e223      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008f5c:	2340      	movs	r3, #64	; 0x40
 8008f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f62:	e21f      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008f64:	2380      	movs	r3, #128	; 0x80
 8008f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6a:	bf00      	nop
 8008f6c:	e21a      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a6d      	ldr	r2, [pc, #436]	; (8009128 <UART_SetConfig+0x354>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d132      	bne.n	8008fde <UART_SetConfig+0x20a>
 8008f78:	4b6a      	ldr	r3, [pc, #424]	; (8009124 <UART_SetConfig+0x350>)
 8008f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	2b05      	cmp	r3, #5
 8008f82:	d827      	bhi.n	8008fd4 <UART_SetConfig+0x200>
 8008f84:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <UART_SetConfig+0x1b8>)
 8008f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8a:	bf00      	nop
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08008fad 	.word	0x08008fad
 8008f94:	08008fb5 	.word	0x08008fb5
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	08008fc5 	.word	0x08008fc5
 8008fa0:	08008fcd 	.word	0x08008fcd
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008faa:	e1fb      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008fac:	2304      	movs	r3, #4
 8008fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb2:	e1f7      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fba:	e1f3      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc2:	e1ef      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fca:	e1eb      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008fcc:	2340      	movs	r3, #64	; 0x40
 8008fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd2:	e1e7      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008fd4:	2380      	movs	r3, #128	; 0x80
 8008fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fda:	bf00      	nop
 8008fdc:	e1e2      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a52      	ldr	r2, [pc, #328]	; (800912c <UART_SetConfig+0x358>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d132      	bne.n	800904e <UART_SetConfig+0x27a>
 8008fe8:	4b4e      	ldr	r3, [pc, #312]	; (8009124 <UART_SetConfig+0x350>)
 8008fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fec:	f003 0307 	and.w	r3, r3, #7
 8008ff0:	2b05      	cmp	r3, #5
 8008ff2:	d827      	bhi.n	8009044 <UART_SetConfig+0x270>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <UART_SetConfig+0x228>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	08009015 	.word	0x08009015
 8009000:	0800901d 	.word	0x0800901d
 8009004:	08009025 	.word	0x08009025
 8009008:	0800902d 	.word	0x0800902d
 800900c:	08009035 	.word	0x08009035
 8009010:	0800903d 	.word	0x0800903d
 8009014:	2300      	movs	r3, #0
 8009016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901a:	e1c3      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800901c:	2304      	movs	r3, #4
 800901e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009022:	e1bf      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009024:	2308      	movs	r3, #8
 8009026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902a:	e1bb      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800902c:	2310      	movs	r3, #16
 800902e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009032:	e1b7      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009034:	2320      	movs	r3, #32
 8009036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903a:	e1b3      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800903c:	2340      	movs	r3, #64	; 0x40
 800903e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009042:	e1af      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009044:	2380      	movs	r3, #128	; 0x80
 8009046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904a:	bf00      	nop
 800904c:	e1aa      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a37      	ldr	r2, [pc, #220]	; (8009130 <UART_SetConfig+0x35c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d132      	bne.n	80090be <UART_SetConfig+0x2ea>
 8009058:	4b32      	ldr	r3, [pc, #200]	; (8009124 <UART_SetConfig+0x350>)
 800905a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800905c:	f003 0307 	and.w	r3, r3, #7
 8009060:	2b05      	cmp	r3, #5
 8009062:	d827      	bhi.n	80090b4 <UART_SetConfig+0x2e0>
 8009064:	a201      	add	r2, pc, #4	; (adr r2, 800906c <UART_SetConfig+0x298>)
 8009066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906a:	bf00      	nop
 800906c:	08009085 	.word	0x08009085
 8009070:	0800908d 	.word	0x0800908d
 8009074:	08009095 	.word	0x08009095
 8009078:	0800909d 	.word	0x0800909d
 800907c:	080090a5 	.word	0x080090a5
 8009080:	080090ad 	.word	0x080090ad
 8009084:	2300      	movs	r3, #0
 8009086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908a:	e18b      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800908c:	2304      	movs	r3, #4
 800908e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009092:	e187      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009094:	2308      	movs	r3, #8
 8009096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909a:	e183      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800909c:	2310      	movs	r3, #16
 800909e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a2:	e17f      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80090a4:	2320      	movs	r3, #32
 80090a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090aa:	e17b      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80090ac:	2340      	movs	r3, #64	; 0x40
 80090ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b2:	e177      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80090b4:	2380      	movs	r3, #128	; 0x80
 80090b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ba:	bf00      	nop
 80090bc:	e172      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1c      	ldr	r2, [pc, #112]	; (8009134 <UART_SetConfig+0x360>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d144      	bne.n	8009152 <UART_SetConfig+0x37e>
 80090c8:	4b16      	ldr	r3, [pc, #88]	; (8009124 <UART_SetConfig+0x350>)
 80090ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	2b05      	cmp	r3, #5
 80090d2:	d839      	bhi.n	8009148 <UART_SetConfig+0x374>
 80090d4:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <UART_SetConfig+0x308>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	080090f5 	.word	0x080090f5
 80090e0:	080090fd 	.word	0x080090fd
 80090e4:	08009105 	.word	0x08009105
 80090e8:	0800910d 	.word	0x0800910d
 80090ec:	08009139 	.word	0x08009139
 80090f0:	08009141 	.word	0x08009141
 80090f4:	2300      	movs	r3, #0
 80090f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090fa:	e153      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80090fc:	2304      	movs	r3, #4
 80090fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009102:	e14f      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009104:	2308      	movs	r3, #8
 8009106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910a:	e14b      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800910c:	2310      	movs	r3, #16
 800910e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009112:	e147      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009114:	cfff69f3 	.word	0xcfff69f3
 8009118:	58000c00 	.word	0x58000c00
 800911c:	11fff4ff 	.word	0x11fff4ff
 8009120:	40011000 	.word	0x40011000
 8009124:	58024400 	.word	0x58024400
 8009128:	40004400 	.word	0x40004400
 800912c:	40004800 	.word	0x40004800
 8009130:	40004c00 	.word	0x40004c00
 8009134:	40005000 	.word	0x40005000
 8009138:	2320      	movs	r3, #32
 800913a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800913e:	e131      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009140:	2340      	movs	r3, #64	; 0x40
 8009142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009146:	e12d      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009148:	2380      	movs	r3, #128	; 0x80
 800914a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800914e:	bf00      	nop
 8009150:	e128      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4ab6      	ldr	r2, [pc, #728]	; (8009430 <UART_SetConfig+0x65c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d178      	bne.n	800924e <UART_SetConfig+0x47a>
 800915c:	4bb5      	ldr	r3, [pc, #724]	; (8009434 <UART_SetConfig+0x660>)
 800915e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009164:	2b28      	cmp	r3, #40	; 0x28
 8009166:	d86d      	bhi.n	8009244 <UART_SetConfig+0x470>
 8009168:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <UART_SetConfig+0x39c>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	08009215 	.word	0x08009215
 8009174:	08009245 	.word	0x08009245
 8009178:	08009245 	.word	0x08009245
 800917c:	08009245 	.word	0x08009245
 8009180:	08009245 	.word	0x08009245
 8009184:	08009245 	.word	0x08009245
 8009188:	08009245 	.word	0x08009245
 800918c:	08009245 	.word	0x08009245
 8009190:	0800921d 	.word	0x0800921d
 8009194:	08009245 	.word	0x08009245
 8009198:	08009245 	.word	0x08009245
 800919c:	08009245 	.word	0x08009245
 80091a0:	08009245 	.word	0x08009245
 80091a4:	08009245 	.word	0x08009245
 80091a8:	08009245 	.word	0x08009245
 80091ac:	08009245 	.word	0x08009245
 80091b0:	08009225 	.word	0x08009225
 80091b4:	08009245 	.word	0x08009245
 80091b8:	08009245 	.word	0x08009245
 80091bc:	08009245 	.word	0x08009245
 80091c0:	08009245 	.word	0x08009245
 80091c4:	08009245 	.word	0x08009245
 80091c8:	08009245 	.word	0x08009245
 80091cc:	08009245 	.word	0x08009245
 80091d0:	0800922d 	.word	0x0800922d
 80091d4:	08009245 	.word	0x08009245
 80091d8:	08009245 	.word	0x08009245
 80091dc:	08009245 	.word	0x08009245
 80091e0:	08009245 	.word	0x08009245
 80091e4:	08009245 	.word	0x08009245
 80091e8:	08009245 	.word	0x08009245
 80091ec:	08009245 	.word	0x08009245
 80091f0:	08009235 	.word	0x08009235
 80091f4:	08009245 	.word	0x08009245
 80091f8:	08009245 	.word	0x08009245
 80091fc:	08009245 	.word	0x08009245
 8009200:	08009245 	.word	0x08009245
 8009204:	08009245 	.word	0x08009245
 8009208:	08009245 	.word	0x08009245
 800920c:	08009245 	.word	0x08009245
 8009210:	0800923d 	.word	0x0800923d
 8009214:	2301      	movs	r3, #1
 8009216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800921a:	e0c3      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800921c:	2304      	movs	r3, #4
 800921e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009222:	e0bf      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009224:	2308      	movs	r3, #8
 8009226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922a:	e0bb      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800922c:	2310      	movs	r3, #16
 800922e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009232:	e0b7      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009234:	2320      	movs	r3, #32
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e0b3      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800923c:	2340      	movs	r3, #64	; 0x40
 800923e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009242:	e0af      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009244:	2380      	movs	r3, #128	; 0x80
 8009246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800924a:	bf00      	nop
 800924c:	e0aa      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a79      	ldr	r2, [pc, #484]	; (8009438 <UART_SetConfig+0x664>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d132      	bne.n	80092be <UART_SetConfig+0x4ea>
 8009258:	4b76      	ldr	r3, [pc, #472]	; (8009434 <UART_SetConfig+0x660>)
 800925a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	2b05      	cmp	r3, #5
 8009262:	d827      	bhi.n	80092b4 <UART_SetConfig+0x4e0>
 8009264:	a201      	add	r2, pc, #4	; (adr r2, 800926c <UART_SetConfig+0x498>)
 8009266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926a:	bf00      	nop
 800926c:	08009285 	.word	0x08009285
 8009270:	0800928d 	.word	0x0800928d
 8009274:	08009295 	.word	0x08009295
 8009278:	0800929d 	.word	0x0800929d
 800927c:	080092a5 	.word	0x080092a5
 8009280:	080092ad 	.word	0x080092ad
 8009284:	2300      	movs	r3, #0
 8009286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928a:	e08b      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800928c:	2304      	movs	r3, #4
 800928e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009292:	e087      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009294:	2308      	movs	r3, #8
 8009296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929a:	e083      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800929c:	2310      	movs	r3, #16
 800929e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a2:	e07f      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80092a4:	2320      	movs	r3, #32
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092aa:	e07b      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80092ac:	2340      	movs	r3, #64	; 0x40
 80092ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b2:	e077      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80092b4:	2380      	movs	r3, #128	; 0x80
 80092b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ba:	bf00      	nop
 80092bc:	e072      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a5e      	ldr	r2, [pc, #376]	; (800943c <UART_SetConfig+0x668>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d132      	bne.n	800932e <UART_SetConfig+0x55a>
 80092c8:	4b5a      	ldr	r3, [pc, #360]	; (8009434 <UART_SetConfig+0x660>)
 80092ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	2b05      	cmp	r3, #5
 80092d2:	d827      	bhi.n	8009324 <UART_SetConfig+0x550>
 80092d4:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <UART_SetConfig+0x508>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	080092f5 	.word	0x080092f5
 80092e0:	080092fd 	.word	0x080092fd
 80092e4:	08009305 	.word	0x08009305
 80092e8:	0800930d 	.word	0x0800930d
 80092ec:	08009315 	.word	0x08009315
 80092f0:	0800931d 	.word	0x0800931d
 80092f4:	2300      	movs	r3, #0
 80092f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fa:	e053      	b.n	80093a4 <UART_SetConfig+0x5d0>
 80092fc:	2304      	movs	r3, #4
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e04f      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009304:	2308      	movs	r3, #8
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e04b      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800930c:	2310      	movs	r3, #16
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e047      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009314:	2320      	movs	r3, #32
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e043      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800931c:	2340      	movs	r3, #64	; 0x40
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	e03f      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009324:	2380      	movs	r3, #128	; 0x80
 8009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932a:	bf00      	nop
 800932c:	e03a      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a43      	ldr	r2, [pc, #268]	; (8009440 <UART_SetConfig+0x66c>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d132      	bne.n	800939e <UART_SetConfig+0x5ca>
 8009338:	4b3e      	ldr	r3, [pc, #248]	; (8009434 <UART_SetConfig+0x660>)
 800933a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	2b05      	cmp	r3, #5
 8009342:	d827      	bhi.n	8009394 <UART_SetConfig+0x5c0>
 8009344:	a201      	add	r2, pc, #4	; (adr r2, 800934c <UART_SetConfig+0x578>)
 8009346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934a:	bf00      	nop
 800934c:	08009365 	.word	0x08009365
 8009350:	0800936d 	.word	0x0800936d
 8009354:	08009375 	.word	0x08009375
 8009358:	0800937d 	.word	0x0800937d
 800935c:	08009385 	.word	0x08009385
 8009360:	0800938d 	.word	0x0800938d
 8009364:	2302      	movs	r3, #2
 8009366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936a:	e01b      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800936c:	2304      	movs	r3, #4
 800936e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009372:	e017      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009374:	2308      	movs	r3, #8
 8009376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937a:	e013      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800937c:	2310      	movs	r3, #16
 800937e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009382:	e00f      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009384:	2320      	movs	r3, #32
 8009386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938a:	e00b      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800938c:	2340      	movs	r3, #64	; 0x40
 800938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009392:	e007      	b.n	80093a4 <UART_SetConfig+0x5d0>
 8009394:	2380      	movs	r3, #128	; 0x80
 8009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800939a:	bf00      	nop
 800939c:	e002      	b.n	80093a4 <UART_SetConfig+0x5d0>
 800939e:	2380      	movs	r3, #128	; 0x80
 80093a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a25      	ldr	r2, [pc, #148]	; (8009440 <UART_SetConfig+0x66c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	f040 80b8 	bne.w	8009520 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093b4:	2b08      	cmp	r3, #8
 80093b6:	d019      	beq.n	80093ec <UART_SetConfig+0x618>
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	dc04      	bgt.n	80093c6 <UART_SetConfig+0x5f2>
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d009      	beq.n	80093d4 <UART_SetConfig+0x600>
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d00b      	beq.n	80093dc <UART_SetConfig+0x608>
 80093c4:	e042      	b.n	800944c <UART_SetConfig+0x678>
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d02b      	beq.n	8009422 <UART_SetConfig+0x64e>
 80093ca:	2b40      	cmp	r3, #64	; 0x40
 80093cc:	d02c      	beq.n	8009428 <UART_SetConfig+0x654>
 80093ce:	2b10      	cmp	r3, #16
 80093d0:	d014      	beq.n	80093fc <UART_SetConfig+0x628>
 80093d2:	e03b      	b.n	800944c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093d4:	f7fe faa0 	bl	8007918 <HAL_RCCEx_GetD3PCLK1Freq>
 80093d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80093da:	e03d      	b.n	8009458 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093dc:	f107 0314 	add.w	r3, r7, #20
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe faaf 	bl	8007944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093ea:	e035      	b.n	8009458 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ec:	f107 0308 	add.w	r3, r7, #8
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fe fbf3 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093fa:	e02d      	b.n	8009458 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093fc:	4b0d      	ldr	r3, [pc, #52]	; (8009434 <UART_SetConfig+0x660>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0320 	and.w	r3, r3, #32
 8009404:	2b00      	cmp	r3, #0
 8009406:	d009      	beq.n	800941c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <UART_SetConfig+0x660>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	08db      	lsrs	r3, r3, #3
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	4a0c      	ldr	r2, [pc, #48]	; (8009444 <UART_SetConfig+0x670>)
 8009414:	fa22 f303 	lsr.w	r3, r2, r3
 8009418:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800941a:	e01d      	b.n	8009458 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800941c:	4b09      	ldr	r3, [pc, #36]	; (8009444 <UART_SetConfig+0x670>)
 800941e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009420:	e01a      	b.n	8009458 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009422:	4b09      	ldr	r3, [pc, #36]	; (8009448 <UART_SetConfig+0x674>)
 8009424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009426:	e017      	b.n	8009458 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800942c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800942e:	e013      	b.n	8009458 <UART_SetConfig+0x684>
 8009430:	40011400 	.word	0x40011400
 8009434:	58024400 	.word	0x58024400
 8009438:	40007800 	.word	0x40007800
 800943c:	40007c00 	.word	0x40007c00
 8009440:	58000c00 	.word	0x58000c00
 8009444:	03d09000 	.word	0x03d09000
 8009448:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009456:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 824d 	beq.w	80098fa <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	4aad      	ldr	r2, [pc, #692]	; (800971c <UART_SetConfig+0x948>)
 8009466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800946a:	461a      	mov	r2, r3
 800946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009472:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	4613      	mov	r3, r2
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	4413      	add	r3, r2
 800947e:	6a3a      	ldr	r2, [r7, #32]
 8009480:	429a      	cmp	r2, r3
 8009482:	d305      	bcc.n	8009490 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800948a:	6a3a      	ldr	r2, [r7, #32]
 800948c:	429a      	cmp	r2, r3
 800948e:	d903      	bls.n	8009498 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009496:	e230      	b.n	80098fa <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	4618      	mov	r0, r3
 800949c:	f04f 0100 	mov.w	r1, #0
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	4a9d      	ldr	r2, [pc, #628]	; (800971c <UART_SetConfig+0x948>)
 80094a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	f04f 0400 	mov.w	r4, #0
 80094b0:	461a      	mov	r2, r3
 80094b2:	4623      	mov	r3, r4
 80094b4:	f7f6 ff70 	bl	8000398 <__aeabi_uldivmod>
 80094b8:	4603      	mov	r3, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	4619      	mov	r1, r3
 80094be:	4622      	mov	r2, r4
 80094c0:	f04f 0300 	mov.w	r3, #0
 80094c4:	f04f 0400 	mov.w	r4, #0
 80094c8:	0214      	lsls	r4, r2, #8
 80094ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80094ce:	020b      	lsls	r3, r1, #8
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	6852      	ldr	r2, [r2, #4]
 80094d4:	0852      	lsrs	r2, r2, #1
 80094d6:	4611      	mov	r1, r2
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	eb13 0b01 	adds.w	fp, r3, r1
 80094e0:	eb44 0c02 	adc.w	ip, r4, r2
 80094e4:	4658      	mov	r0, fp
 80094e6:	4661      	mov	r1, ip
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f04f 0400 	mov.w	r4, #0
 80094f0:	461a      	mov	r2, r3
 80094f2:	4623      	mov	r3, r4
 80094f4:	f7f6 ff50 	bl	8000398 <__aeabi_uldivmod>
 80094f8:	4603      	mov	r3, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009504:	d308      	bcc.n	8009518 <UART_SetConfig+0x744>
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800950c:	d204      	bcs.n	8009518 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009514:	60da      	str	r2, [r3, #12]
 8009516:	e1f0      	b.n	80098fa <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800951e:	e1ec      	b.n	80098fa <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009528:	f040 8100 	bne.w	800972c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800952c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009530:	2b40      	cmp	r3, #64	; 0x40
 8009532:	f200 80b7 	bhi.w	80096a4 <UART_SetConfig+0x8d0>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <UART_SetConfig+0x768>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	08009641 	.word	0x08009641
 8009540:	08009649 	.word	0x08009649
 8009544:	080096a5 	.word	0x080096a5
 8009548:	080096a5 	.word	0x080096a5
 800954c:	08009651 	.word	0x08009651
 8009550:	080096a5 	.word	0x080096a5
 8009554:	080096a5 	.word	0x080096a5
 8009558:	080096a5 	.word	0x080096a5
 800955c:	08009661 	.word	0x08009661
 8009560:	080096a5 	.word	0x080096a5
 8009564:	080096a5 	.word	0x080096a5
 8009568:	080096a5 	.word	0x080096a5
 800956c:	080096a5 	.word	0x080096a5
 8009570:	080096a5 	.word	0x080096a5
 8009574:	080096a5 	.word	0x080096a5
 8009578:	080096a5 	.word	0x080096a5
 800957c:	08009671 	.word	0x08009671
 8009580:	080096a5 	.word	0x080096a5
 8009584:	080096a5 	.word	0x080096a5
 8009588:	080096a5 	.word	0x080096a5
 800958c:	080096a5 	.word	0x080096a5
 8009590:	080096a5 	.word	0x080096a5
 8009594:	080096a5 	.word	0x080096a5
 8009598:	080096a5 	.word	0x080096a5
 800959c:	080096a5 	.word	0x080096a5
 80095a0:	080096a5 	.word	0x080096a5
 80095a4:	080096a5 	.word	0x080096a5
 80095a8:	080096a5 	.word	0x080096a5
 80095ac:	080096a5 	.word	0x080096a5
 80095b0:	080096a5 	.word	0x080096a5
 80095b4:	080096a5 	.word	0x080096a5
 80095b8:	080096a5 	.word	0x080096a5
 80095bc:	08009697 	.word	0x08009697
 80095c0:	080096a5 	.word	0x080096a5
 80095c4:	080096a5 	.word	0x080096a5
 80095c8:	080096a5 	.word	0x080096a5
 80095cc:	080096a5 	.word	0x080096a5
 80095d0:	080096a5 	.word	0x080096a5
 80095d4:	080096a5 	.word	0x080096a5
 80095d8:	080096a5 	.word	0x080096a5
 80095dc:	080096a5 	.word	0x080096a5
 80095e0:	080096a5 	.word	0x080096a5
 80095e4:	080096a5 	.word	0x080096a5
 80095e8:	080096a5 	.word	0x080096a5
 80095ec:	080096a5 	.word	0x080096a5
 80095f0:	080096a5 	.word	0x080096a5
 80095f4:	080096a5 	.word	0x080096a5
 80095f8:	080096a5 	.word	0x080096a5
 80095fc:	080096a5 	.word	0x080096a5
 8009600:	080096a5 	.word	0x080096a5
 8009604:	080096a5 	.word	0x080096a5
 8009608:	080096a5 	.word	0x080096a5
 800960c:	080096a5 	.word	0x080096a5
 8009610:	080096a5 	.word	0x080096a5
 8009614:	080096a5 	.word	0x080096a5
 8009618:	080096a5 	.word	0x080096a5
 800961c:	080096a5 	.word	0x080096a5
 8009620:	080096a5 	.word	0x080096a5
 8009624:	080096a5 	.word	0x080096a5
 8009628:	080096a5 	.word	0x080096a5
 800962c:	080096a5 	.word	0x080096a5
 8009630:	080096a5 	.word	0x080096a5
 8009634:	080096a5 	.word	0x080096a5
 8009638:	080096a5 	.word	0x080096a5
 800963c:	0800969d 	.word	0x0800969d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009640:	f7fd fa50 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 8009644:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009646:	e033      	b.n	80096b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009648:	f7fd fa62 	bl	8006b10 <HAL_RCC_GetPCLK2Freq>
 800964c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800964e:	e02f      	b.n	80096b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009650:	f107 0314 	add.w	r3, r7, #20
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe f975 	bl	8007944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800965e:	e027      	b.n	80096b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009660:	f107 0308 	add.w	r3, r7, #8
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe fab9 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800966e:	e01f      	b.n	80096b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009670:	4b2b      	ldr	r3, [pc, #172]	; (8009720 <UART_SetConfig+0x94c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0320 	and.w	r3, r3, #32
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800967c:	4b28      	ldr	r3, [pc, #160]	; (8009720 <UART_SetConfig+0x94c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	08db      	lsrs	r3, r3, #3
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	4a27      	ldr	r2, [pc, #156]	; (8009724 <UART_SetConfig+0x950>)
 8009688:	fa22 f303 	lsr.w	r3, r2, r3
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800968e:	e00f      	b.n	80096b0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009690:	4b24      	ldr	r3, [pc, #144]	; (8009724 <UART_SetConfig+0x950>)
 8009692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009694:	e00c      	b.n	80096b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009696:	4b24      	ldr	r3, [pc, #144]	; (8009728 <UART_SetConfig+0x954>)
 8009698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800969a:	e009      	b.n	80096b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800969c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096a2:	e005      	b.n	80096b0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80096ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 8121 	beq.w	80098fa <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	4a17      	ldr	r2, [pc, #92]	; (800971c <UART_SetConfig+0x948>)
 80096be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096c2:	461a      	mov	r2, r3
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80096ca:	005a      	lsls	r2, r3, #1
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	085b      	lsrs	r3, r3, #1
 80096d2:	441a      	add	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096dc:	b29b      	uxth	r3, r3
 80096de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	2b0f      	cmp	r3, #15
 80096e4:	d916      	bls.n	8009714 <UART_SetConfig+0x940>
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ec:	d212      	bcs.n	8009714 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	f023 030f 	bic.w	r3, r3, #15
 80096f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	f003 0307 	and.w	r3, r3, #7
 8009702:	b29a      	uxth	r2, r3
 8009704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009706:	4313      	orrs	r3, r2
 8009708:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	e0f2      	b.n	80098fa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800971a:	e0ee      	b.n	80098fa <UART_SetConfig+0xb26>
 800971c:	0800c188 	.word	0x0800c188
 8009720:	58024400 	.word	0x58024400
 8009724:	03d09000 	.word	0x03d09000
 8009728:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800972c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009730:	2b40      	cmp	r3, #64	; 0x40
 8009732:	f200 80b7 	bhi.w	80098a4 <UART_SetConfig+0xad0>
 8009736:	a201      	add	r2, pc, #4	; (adr r2, 800973c <UART_SetConfig+0x968>)
 8009738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973c:	08009841 	.word	0x08009841
 8009740:	08009849 	.word	0x08009849
 8009744:	080098a5 	.word	0x080098a5
 8009748:	080098a5 	.word	0x080098a5
 800974c:	08009851 	.word	0x08009851
 8009750:	080098a5 	.word	0x080098a5
 8009754:	080098a5 	.word	0x080098a5
 8009758:	080098a5 	.word	0x080098a5
 800975c:	08009861 	.word	0x08009861
 8009760:	080098a5 	.word	0x080098a5
 8009764:	080098a5 	.word	0x080098a5
 8009768:	080098a5 	.word	0x080098a5
 800976c:	080098a5 	.word	0x080098a5
 8009770:	080098a5 	.word	0x080098a5
 8009774:	080098a5 	.word	0x080098a5
 8009778:	080098a5 	.word	0x080098a5
 800977c:	08009871 	.word	0x08009871
 8009780:	080098a5 	.word	0x080098a5
 8009784:	080098a5 	.word	0x080098a5
 8009788:	080098a5 	.word	0x080098a5
 800978c:	080098a5 	.word	0x080098a5
 8009790:	080098a5 	.word	0x080098a5
 8009794:	080098a5 	.word	0x080098a5
 8009798:	080098a5 	.word	0x080098a5
 800979c:	080098a5 	.word	0x080098a5
 80097a0:	080098a5 	.word	0x080098a5
 80097a4:	080098a5 	.word	0x080098a5
 80097a8:	080098a5 	.word	0x080098a5
 80097ac:	080098a5 	.word	0x080098a5
 80097b0:	080098a5 	.word	0x080098a5
 80097b4:	080098a5 	.word	0x080098a5
 80097b8:	080098a5 	.word	0x080098a5
 80097bc:	08009897 	.word	0x08009897
 80097c0:	080098a5 	.word	0x080098a5
 80097c4:	080098a5 	.word	0x080098a5
 80097c8:	080098a5 	.word	0x080098a5
 80097cc:	080098a5 	.word	0x080098a5
 80097d0:	080098a5 	.word	0x080098a5
 80097d4:	080098a5 	.word	0x080098a5
 80097d8:	080098a5 	.word	0x080098a5
 80097dc:	080098a5 	.word	0x080098a5
 80097e0:	080098a5 	.word	0x080098a5
 80097e4:	080098a5 	.word	0x080098a5
 80097e8:	080098a5 	.word	0x080098a5
 80097ec:	080098a5 	.word	0x080098a5
 80097f0:	080098a5 	.word	0x080098a5
 80097f4:	080098a5 	.word	0x080098a5
 80097f8:	080098a5 	.word	0x080098a5
 80097fc:	080098a5 	.word	0x080098a5
 8009800:	080098a5 	.word	0x080098a5
 8009804:	080098a5 	.word	0x080098a5
 8009808:	080098a5 	.word	0x080098a5
 800980c:	080098a5 	.word	0x080098a5
 8009810:	080098a5 	.word	0x080098a5
 8009814:	080098a5 	.word	0x080098a5
 8009818:	080098a5 	.word	0x080098a5
 800981c:	080098a5 	.word	0x080098a5
 8009820:	080098a5 	.word	0x080098a5
 8009824:	080098a5 	.word	0x080098a5
 8009828:	080098a5 	.word	0x080098a5
 800982c:	080098a5 	.word	0x080098a5
 8009830:	080098a5 	.word	0x080098a5
 8009834:	080098a5 	.word	0x080098a5
 8009838:	080098a5 	.word	0x080098a5
 800983c:	0800989d 	.word	0x0800989d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009840:	f7fd f950 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 8009844:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009846:	e033      	b.n	80098b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009848:	f7fd f962 	bl	8006b10 <HAL_RCC_GetPCLK2Freq>
 800984c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800984e:	e02f      	b.n	80098b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009850:	f107 0314 	add.w	r3, r7, #20
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe f875 	bl	8007944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800985e:	e027      	b.n	80098b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009860:	f107 0308 	add.w	r3, r7, #8
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe f9b9 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800986e:	e01f      	b.n	80098b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009870:	4b2c      	ldr	r3, [pc, #176]	; (8009924 <UART_SetConfig+0xb50>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0320 	and.w	r3, r3, #32
 8009878:	2b00      	cmp	r3, #0
 800987a:	d009      	beq.n	8009890 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800987c:	4b29      	ldr	r3, [pc, #164]	; (8009924 <UART_SetConfig+0xb50>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	4a28      	ldr	r2, [pc, #160]	; (8009928 <UART_SetConfig+0xb54>)
 8009888:	fa22 f303 	lsr.w	r3, r2, r3
 800988c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800988e:	e00f      	b.n	80098b0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8009890:	4b25      	ldr	r3, [pc, #148]	; (8009928 <UART_SetConfig+0xb54>)
 8009892:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009894:	e00c      	b.n	80098b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009896:	4b25      	ldr	r3, [pc, #148]	; (800992c <UART_SetConfig+0xb58>)
 8009898:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800989a:	e009      	b.n	80098b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800989c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098a2:	e005      	b.n	80098b0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80098ae:	bf00      	nop
    }

    if (pclk != 0U)
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d021      	beq.n	80098fa <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ba:	4a1d      	ldr	r2, [pc, #116]	; (8009930 <UART_SetConfig+0xb5c>)
 80098bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098c0:	461a      	mov	r2, r3
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	085b      	lsrs	r3, r3, #1
 80098ce:	441a      	add	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d8:	b29b      	uxth	r3, r3
 80098da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	2b0f      	cmp	r3, #15
 80098e0:	d908      	bls.n	80098f4 <UART_SetConfig+0xb20>
 80098e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e8:	d204      	bcs.n	80098f4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f0:	60da      	str	r2, [r3, #12]
 80098f2:	e002      	b.n	80098fa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009916:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800991a:	4618      	mov	r0, r3
 800991c:	3738      	adds	r7, #56	; 0x38
 800991e:	46bd      	mov	sp, r7
 8009920:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009924:	58024400 	.word	0x58024400
 8009928:	03d09000 	.word	0x03d09000
 800992c:	003d0900 	.word	0x003d0900
 8009930:	0800c188 	.word	0x0800c188

08009934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009984:	f003 0304 	and.w	r3, r3, #4
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00a      	beq.n	80099a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a6:	f003 0308 	and.w	r3, r3, #8
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	f003 0310 	and.w	r3, r3, #16
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00a      	beq.n	80099e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00a      	beq.n	8009a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	430a      	orrs	r2, r1
 8009a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d01a      	beq.n	8009a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a32:	d10a      	bne.n	8009a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00a      	beq.n	8009a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	605a      	str	r2, [r3, #4]
  }
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af02      	add	r7, sp, #8
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009a88:	f7fb fae4 	bl	8005054 <HAL_GetTick>
 8009a8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0308 	and.w	r3, r3, #8
 8009a98:	2b08      	cmp	r3, #8
 8009a9a:	d10e      	bne.n	8009aba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f82c 	bl	8009b08 <UART_WaitOnFlagUntilTimeout>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e022      	b.n	8009b00 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	d10e      	bne.n	8009ae6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f816 	bl	8009b08 <UART_WaitOnFlagUntilTimeout>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e00c      	b.n	8009b00 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	603b      	str	r3, [r7, #0]
 8009b14:	4613      	mov	r3, r2
 8009b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b18:	e062      	b.n	8009be0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b20:	d05e      	beq.n	8009be0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b22:	f7fb fa97 	bl	8005054 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d302      	bcc.n	8009b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11d      	bne.n	8009b74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b46:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689a      	ldr	r2, [r3, #8]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 0201 	bic.w	r2, r2, #1
 8009b56:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e045      	b.n	8009c00 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d02e      	beq.n	8009be0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b90:	d126      	bne.n	8009be0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009baa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 0201 	bic.w	r2, r2, #1
 8009bba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e00f      	b.n	8009c00 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	69da      	ldr	r2, [r3, #28]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	4013      	ands	r3, r2
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	bf0c      	ite	eq
 8009bf0:	2301      	moveq	r3, #1
 8009bf2:	2300      	movne	r3, #0
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	79fb      	ldrb	r3, [r7, #7]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d08d      	beq.n	8009b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009c1e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6899      	ldr	r1, [r3, #8]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	4b08      	ldr	r3, [pc, #32]	; (8009c4c <UART_EndRxTransfer+0x44>)
 8009c2c:	400b      	ands	r3, r1
 8009c2e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2220      	movs	r2, #32
 8009c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8009c3e:	bf00      	nop
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	effffffe 	.word	0xeffffffe

08009c50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7ff f8a6 	bl	8008dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c74:	bf00      	nop
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c8a:	2b21      	cmp	r3, #33	; 0x21
 8009c8c:	d12a      	bne.n	8009ce4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d110      	bne.n	8009cbc <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ca8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cb8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009cba:	e013      	b.n	8009ce4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc0:	781a      	ldrb	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cfe:	2b21      	cmp	r3, #33	; 0x21
 8009d00:	d12f      	bne.n	8009d62 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d110      	bne.n	8009d30 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d1c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d2c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009d2e:	e018      	b.n	8009d62 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d34:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	881b      	ldrh	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d44:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4a:	1c9a      	adds	r2, r3, #2
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009d62:	bf00      	nop
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b085      	sub	sp, #20
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d7c:	2b21      	cmp	r3, #33	; 0x21
 8009d7e:	d13d      	bne.n	8009dfc <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d86:	81fb      	strh	r3, [r7, #14]
 8009d88:	e035      	b.n	8009df6 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d111      	bne.n	8009dba <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009da4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009db4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8009db6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8009db8:	e020      	b.n	8009dfc <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d013      	beq.n	8009df0 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dcc:	781a      	ldrb	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	3b01      	subs	r3, #1
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009df0:	89fb      	ldrh	r3, [r7, #14]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	81fb      	strh	r3, [r7, #14]
 8009df6:	89fb      	ldrh	r3, [r7, #14]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1c6      	bne.n	8009d8a <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8009dfc:	bf00      	nop
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e16:	2b21      	cmp	r3, #33	; 0x21
 8009e18:	d142      	bne.n	8009ea0 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009e20:	81fb      	strh	r3, [r7, #14]
 8009e22:	e03a      	b.n	8009e9a <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d111      	bne.n	8009e54 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009e3e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e4e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8009e50:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8009e52:	e025      	b.n	8009ea0 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d018      	beq.n	8009e94 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e66:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e76:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e7c:	1c9a      	adds	r2, r3, #2
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009e94:	89fb      	ldrh	r3, [r7, #14]
 8009e96:	3b01      	subs	r3, #1
 8009e98:	81fb      	strh	r3, [r7, #14]
 8009e9a:	89fb      	ldrh	r3, [r7, #14]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1c1      	bne.n	8009e24 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ec2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7fa fe5c 	bl	8004b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009eee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ef6:	2b22      	cmp	r3, #34	; 0x22
 8009ef8:	d13b      	bne.n	8009f72 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f02:	89bb      	ldrh	r3, [r7, #12]
 8009f04:	b2d9      	uxtb	r1, r3
 8009f06:	89fb      	ldrh	r3, [r7, #14]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0e:	400a      	ands	r2, r1
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	3b01      	subs	r3, #1
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d122      	bne.n	8009f82 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f4a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0201 	bic.w	r2, r2, #1
 8009f5a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7fa fe20 	bl	8004bb0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f70:	e007      	b.n	8009f82 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	699a      	ldr	r2, [r3, #24]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 0208 	orr.w	r2, r2, #8
 8009f80:	619a      	str	r2, [r3, #24]
}
 8009f82:	bf00      	nop
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f98:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fa0:	2b22      	cmp	r3, #34	; 0x22
 8009fa2:	d13b      	bne.n	800a01c <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009fb2:	89ba      	ldrh	r2, [r7, #12]
 8009fb4:	89fb      	ldrh	r3, [r7, #14]
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc2:	1c9a      	adds	r2, r3, #2
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d122      	bne.n	800a02c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ff4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0201 	bic.w	r2, r2, #1
 800a004:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2220      	movs	r2, #32
 800a00a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7fa fdcb 	bl	8004bb0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a01a:	e007      	b.n	800a02c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699a      	ldr	r2, [r3, #24]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0208 	orr.w	r2, r2, #8
 800a02a:	619a      	str	r2, [r3, #24]
}
 800a02c:	bf00      	nop
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a042:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a04a:	2b22      	cmp	r3, #34	; 0x22
 800a04c:	d166      	bne.n	800a11c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a054:	81fb      	strh	r3, [r7, #14]
 800a056:	e03d      	b.n	800a0d4 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a060:	893b      	ldrh	r3, [r7, #8]
 800a062:	b2d9      	uxtb	r1, r3
 800a064:	89bb      	ldrh	r3, [r7, #12]
 800a066:	b2da      	uxtb	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06c:	400a      	ands	r2, r1
 800a06e:	b2d2      	uxtb	r2, r2
 800a070:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a076:	1c5a      	adds	r2, r3, #1
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a082:	b29b      	uxth	r3, r3
 800a084:	3b01      	subs	r3, #1
 800a086:	b29a      	uxth	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a094:	b29b      	uxth	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d119      	bne.n	800a0ce <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0a8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6899      	ldr	r1, [r3, #8]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	4b1f      	ldr	r3, [pc, #124]	; (800a134 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800a0b6:	400b      	ands	r3, r1
 800a0b8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7fa fd71 	bl	8004bb0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a0ce:	89fb      	ldrh	r3, [r7, #14]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	81fb      	strh	r3, [r7, #14]
 800a0d4:	89fb      	ldrh	r3, [r7, #14]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1be      	bne.n	800a058 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0e0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a0e2:	897b      	ldrh	r3, [r7, #10]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d021      	beq.n	800a12c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0ee:	897a      	ldrh	r2, [r7, #10]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d21b      	bcs.n	800a12c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689a      	ldr	r2, [r3, #8]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a102:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a0c      	ldr	r2, [pc, #48]	; (800a138 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800a108:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f042 0220 	orr.w	r2, r2, #32
 800a118:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a11a:	e007      	b.n	800a12c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	699a      	ldr	r2, [r3, #24]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f042 0208 	orr.w	r2, r2, #8
 800a12a:	619a      	str	r2, [r3, #24]
}
 800a12c:	bf00      	nop
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	effffffe 	.word	0xeffffffe
 800a138:	08009ee1 	.word	0x08009ee1

0800a13c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a14a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a152:	2b22      	cmp	r3, #34	; 0x22
 800a154:	d166      	bne.n	800a224 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a15c:	82fb      	strh	r3, [r7, #22]
 800a15e:	e03d      	b.n	800a1dc <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a16c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a16e:	8a3a      	ldrh	r2, [r7, #16]
 800a170:	8abb      	ldrh	r3, [r7, #20]
 800a172:	4013      	ands	r3, r2
 800a174:	b29a      	uxth	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a17e:	1c9a      	adds	r2, r3, #2
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	3b01      	subs	r3, #1
 800a18e:	b29a      	uxth	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d119      	bne.n	800a1d6 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1b0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6899      	ldr	r1, [r3, #8]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	4b1f      	ldr	r3, [pc, #124]	; (800a23c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800a1be:	400b      	ands	r3, r1
 800a1c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7fa fced 	bl	8004bb0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a1d6:	8afb      	ldrh	r3, [r7, #22]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	82fb      	strh	r3, [r7, #22]
 800a1dc:	8afb      	ldrh	r3, [r7, #22]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1be      	bne.n	800a160 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1e8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1ea:	8a7b      	ldrh	r3, [r7, #18]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d021      	beq.n	800a234 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a1f6:	8a7a      	ldrh	r2, [r7, #18]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d21b      	bcs.n	800a234 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a20a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a0c      	ldr	r2, [pc, #48]	; (800a240 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800a210:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f042 0220 	orr.w	r2, r2, #32
 800a220:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a222:	e007      	b.n	800a234 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	699a      	ldr	r2, [r3, #24]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f042 0208 	orr.w	r2, r2, #8
 800a232:	619a      	str	r2, [r3, #24]
}
 800a234:	bf00      	nop
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	effffffe 	.word	0xeffffffe
 800a240:	08009f8b 	.word	0x08009f8b

0800a244 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d101      	bne.n	800a296 <HAL_UARTEx_DisableFifoMode+0x16>
 800a292:	2302      	movs	r3, #2
 800a294:	e027      	b.n	800a2e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2224      	movs	r2, #36	; 0x24
 800a2a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0201 	bic.w	r2, r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a302:	2b01      	cmp	r3, #1
 800a304:	d101      	bne.n	800a30a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a306:	2302      	movs	r3, #2
 800a308:	e02d      	b.n	800a366 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2224      	movs	r2, #36	; 0x24
 800a316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0201 	bic.w	r2, r2, #1
 800a330:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f850 	bl	800a3ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2220      	movs	r2, #32
 800a358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d101      	bne.n	800a386 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a382:	2302      	movs	r3, #2
 800a384:	e02d      	b.n	800a3e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2224      	movs	r2, #36	; 0x24
 800a392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0201 	bic.w	r2, r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f812 	bl	800a3ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
	...

0800a3ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b089      	sub	sp, #36	; 0x24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a3f4:	4a2f      	ldr	r2, [pc, #188]	; (800a4b4 <UARTEx_SetNbDataToProcess+0xc8>)
 800a3f6:	f107 0314 	add.w	r3, r7, #20
 800a3fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a402:	4a2d      	ldr	r2, [pc, #180]	; (800a4b8 <UARTEx_SetNbDataToProcess+0xcc>)
 800a404:	f107 030c 	add.w	r3, r7, #12
 800a408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a40c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a414:	2b00      	cmp	r3, #0
 800a416:	d108      	bne.n	800a42a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a428:	e03d      	b.n	800a4a6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a42a:	2310      	movs	r3, #16
 800a42c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a42e:	2310      	movs	r3, #16
 800a430:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	0e5b      	lsrs	r3, r3, #25
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	0f5b      	lsrs	r3, r3, #29
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 0307 	and.w	r3, r3, #7
 800a450:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a452:	7fbb      	ldrb	r3, [r7, #30]
 800a454:	7f3a      	ldrb	r2, [r7, #28]
 800a456:	f107 0120 	add.w	r1, r7, #32
 800a45a:	440a      	add	r2, r1
 800a45c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a460:	fb02 f303 	mul.w	r3, r2, r3
 800a464:	7f3a      	ldrb	r2, [r7, #28]
 800a466:	f107 0120 	add.w	r1, r7, #32
 800a46a:	440a      	add	r2, r1
 800a46c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a470:	fb93 f3f2 	sdiv	r3, r3, r2
 800a474:	b29a      	uxth	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a47c:	7ffb      	ldrb	r3, [r7, #31]
 800a47e:	7f7a      	ldrb	r2, [r7, #29]
 800a480:	f107 0120 	add.w	r1, r7, #32
 800a484:	440a      	add	r2, r1
 800a486:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a48a:	fb02 f303 	mul.w	r3, r2, r3
 800a48e:	7f7a      	ldrb	r2, [r7, #29]
 800a490:	f107 0120 	add.w	r1, r7, #32
 800a494:	440a      	add	r2, r1
 800a496:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a49a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4a6:	bf00      	nop
 800a4a8:	3724      	adds	r7, #36	; 0x24
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	0800c15c 	.word	0x0800c15c
 800a4b8:	0800c164 	.word	0x0800c164

0800a4bc <arm_fill_f32>:
 800a4bc:	b410      	push	{r4}
 800a4be:	088c      	lsrs	r4, r1, #2
 800a4c0:	d010      	beq.n	800a4e4 <arm_fill_f32+0x28>
 800a4c2:	f100 0310 	add.w	r3, r0, #16
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	3a01      	subs	r2, #1
 800a4ca:	ed03 0a04 	vstr	s0, [r3, #-16]
 800a4ce:	ed03 0a03 	vstr	s0, [r3, #-12]
 800a4d2:	f103 0310 	add.w	r3, r3, #16
 800a4d6:	ed03 0a06 	vstr	s0, [r3, #-24]	; 0xffffffe8
 800a4da:	ed03 0a05 	vstr	s0, [r3, #-20]	; 0xffffffec
 800a4de:	d1f3      	bne.n	800a4c8 <arm_fill_f32+0xc>
 800a4e0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800a4e4:	f011 0103 	ands.w	r1, r1, #3
 800a4e8:	d003      	beq.n	800a4f2 <arm_fill_f32+0x36>
 800a4ea:	3901      	subs	r1, #1
 800a4ec:	eca0 0a01 	vstmia	r0!, {s0}
 800a4f0:	d1fb      	bne.n	800a4ea <arm_fill_f32+0x2e>
 800a4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <arm_copy_f32>:
 800a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fc:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a500:	d01e      	beq.n	800a540 <arm_copy_f32+0x48>
 800a502:	f100 0410 	add.w	r4, r0, #16
 800a506:	f101 0310 	add.w	r3, r1, #16
 800a50a:	4645      	mov	r5, r8
 800a50c:	f854 cc10 	ldr.w	ip, [r4, #-16]
 800a510:	3d01      	subs	r5, #1
 800a512:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 800a516:	f103 0310 	add.w	r3, r3, #16
 800a51a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800a51e:	f104 0410 	add.w	r4, r4, #16
 800a522:	f854 6c14 	ldr.w	r6, [r4, #-20]
 800a526:	f843 cc20 	str.w	ip, [r3, #-32]
 800a52a:	f843 ec1c 	str.w	lr, [r3, #-28]
 800a52e:	f843 7c18 	str.w	r7, [r3, #-24]
 800a532:	f843 6c14 	str.w	r6, [r3, #-20]
 800a536:	d1e9      	bne.n	800a50c <arm_copy_f32+0x14>
 800a538:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800a53c:	4440      	add	r0, r8
 800a53e:	4441      	add	r1, r8
 800a540:	f012 0203 	ands.w	r2, r2, #3
 800a544:	d005      	beq.n	800a552 <arm_copy_f32+0x5a>
 800a546:	f850 3b04 	ldr.w	r3, [r0], #4
 800a54a:	3a01      	subs	r2, #1
 800a54c:	f841 3b04 	str.w	r3, [r1], #4
 800a550:	d1f9      	bne.n	800a546 <arm_copy_f32+0x4e>
 800a552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a556:	bf00      	nop

0800a558 <arm_std_f32>:
 800a558:	2901      	cmp	r1, #1
 800a55a:	d065      	beq.n	800a628 <arm_std_f32+0xd0>
 800a55c:	eddf 5a39 	vldr	s11, [pc, #228]	; 800a644 <arm_std_f32+0xec>
 800a560:	b530      	push	{r4, r5, lr}
 800a562:	088d      	lsrs	r5, r1, #2
 800a564:	b083      	sub	sp, #12
 800a566:	d062      	beq.n	800a62e <arm_std_f32+0xd6>
 800a568:	eef0 6a65 	vmov.f32	s13, s11
 800a56c:	f100 0310 	add.w	r3, r0, #16
 800a570:	462c      	mov	r4, r5
 800a572:	ed53 7a04 	vldr	s15, [r3, #-16]
 800a576:	3c01      	subs	r4, #1
 800a578:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a57c:	f103 0310 	add.w	r3, r3, #16
 800a580:	ee27 4aa7 	vmul.f32	s8, s15, s15
 800a584:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 800a588:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a58c:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800a590:	ee27 5a07 	vmul.f32	s10, s14, s14
 800a594:	ee74 5a25 	vadd.f32	s11, s8, s11
 800a598:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a59c:	ee64 6aa4 	vmul.f32	s13, s9, s9
 800a5a0:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a5a4:	ee77 7a24 	vadd.f32	s15, s14, s9
 800a5a8:	ee26 7a06 	vmul.f32	s14, s12, s12
 800a5ac:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800a5b0:	ee77 6a86 	vadd.f32	s13, s15, s12
 800a5b4:	ee77 5a25 	vadd.f32	s11, s14, s11
 800a5b8:	d1db      	bne.n	800a572 <arm_std_f32+0x1a>
 800a5ba:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a5be:	f011 0303 	ands.w	r3, r1, #3
 800a5c2:	d009      	beq.n	800a5d8 <arm_std_f32+0x80>
 800a5c4:	ecf0 7a01 	vldmia	r0!, {s15}
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a5ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a5d2:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a5d6:	d1f5      	bne.n	800a5c4 <arm_std_f32+0x6c>
 800a5d8:	ee07 1a90 	vmov	s15, r1
 800a5dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5e8:	ee77 6ac6 	vsub.f32	s13, s15, s12
 800a5ec:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 800a5f0:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800a5f4:	ee27 7a07 	vmul.f32	s14, s14, s14
 800a5f8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800a5fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a600:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a608:	db0a      	blt.n	800a620 <arm_std_f32+0xc8>
 800a60a:	eeb1 0ac7 	vsqrt.f32	s0, s14
 800a60e:	eeb4 0a40 	vcmp.f32	s0, s0
 800a612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a616:	d10d      	bne.n	800a634 <arm_std_f32+0xdc>
 800a618:	ed82 0a00 	vstr	s0, [r2]
 800a61c:	b003      	add	sp, #12
 800a61e:	bd30      	pop	{r4, r5, pc}
 800a620:	2300      	movs	r3, #0
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	b003      	add	sp, #12
 800a626:	bd30      	pop	{r4, r5, pc}
 800a628:	2300      	movs	r3, #0
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	4770      	bx	lr
 800a62e:	eef0 6a65 	vmov.f32	s13, s11
 800a632:	e7c4      	b.n	800a5be <arm_std_f32+0x66>
 800a634:	eeb0 0a47 	vmov.f32	s0, s14
 800a638:	9201      	str	r2, [sp, #4]
 800a63a:	f001 fba9 	bl	800bd90 <sqrtf>
 800a63e:	9a01      	ldr	r2, [sp, #4]
 800a640:	e7ea      	b.n	800a618 <arm_std_f32+0xc0>
 800a642:	bf00      	nop
 800a644:	00000000 	.word	0x00000000

0800a648 <arm_min_f32>:
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	1e4d      	subs	r5, r1, #1
 800a64e:	f100 0c04 	add.w	ip, r0, #4
 800a652:	edd0 7a00 	vldr	s15, [r0]
 800a656:	ea5f 0995 	movs.w	r9, r5, lsr #2
 800a65a:	d056      	beq.n	800a70a <arm_min_f32+0xc2>
 800a65c:	3014      	adds	r0, #20
 800a65e:	46c8      	mov	r8, r9
 800a660:	2404      	movs	r4, #4
 800a662:	2600      	movs	r6, #0
 800a664:	ed10 6a04 	vldr	s12, [r0, #-16]
 800a668:	f1a4 0a03 	sub.w	sl, r4, #3
 800a66c:	ed50 6a03 	vldr	s13, [r0, #-12]
 800a670:	f1a4 0e02 	sub.w	lr, r4, #2
 800a674:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800a678:	ed10 7a02 	vldr	s14, [r0, #-8]
 800a67c:	ed50 5a01 	vldr	s11, [r0, #-4]
 800a680:	1e67      	subs	r7, r4, #1
 800a682:	3010      	adds	r0, #16
 800a684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a688:	bf48      	it	mi
 800a68a:	eef0 7a46 	vmovmi.f32	s15, s12
 800a68e:	bf48      	it	mi
 800a690:	4656      	movmi	r6, sl
 800a692:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69a:	bfc8      	it	gt
 800a69c:	eef0 7a66 	vmovgt.f32	s15, s13
 800a6a0:	bfc8      	it	gt
 800a6a2:	4676      	movgt	r6, lr
 800a6a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ac:	bfc8      	it	gt
 800a6ae:	eef0 7a47 	vmovgt.f32	s15, s14
 800a6b2:	bfc8      	it	gt
 800a6b4:	463e      	movgt	r6, r7
 800a6b6:	eef4 7ae5 	vcmpe.f32	s15, s11
 800a6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6be:	bfc8      	it	gt
 800a6c0:	4626      	movgt	r6, r4
 800a6c2:	bfc8      	it	gt
 800a6c4:	eef0 7a65 	vmovgt.f32	s15, s11
 800a6c8:	f1b8 0801 	subs.w	r8, r8, #1
 800a6cc:	f104 0404 	add.w	r4, r4, #4
 800a6d0:	d1c8      	bne.n	800a664 <arm_min_f32+0x1c>
 800a6d2:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 800a6d6:	f015 0003 	ands.w	r0, r5, #3
 800a6da:	d018      	beq.n	800a70e <arm_min_f32+0xc6>
 800a6dc:	1a08      	subs	r0, r1, r0
 800a6de:	ecbc 7a01 	vldmia	ip!, {s14}
 800a6e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ea:	bf48      	it	mi
 800a6ec:	4606      	movmi	r6, r0
 800a6ee:	f100 0001 	add.w	r0, r0, #1
 800a6f2:	bf58      	it	pl
 800a6f4:	eeb0 7a67 	vmovpl.f32	s14, s15
 800a6f8:	4281      	cmp	r1, r0
 800a6fa:	eef0 7a47 	vmov.f32	s15, s14
 800a6fe:	d1ee      	bne.n	800a6de <arm_min_f32+0x96>
 800a700:	ed82 7a00 	vstr	s14, [r2]
 800a704:	601e      	str	r6, [r3, #0]
 800a706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70a:	464e      	mov	r6, r9
 800a70c:	e7e3      	b.n	800a6d6 <arm_min_f32+0x8e>
 800a70e:	eeb0 7a67 	vmov.f32	s14, s15
 800a712:	e7f5      	b.n	800a700 <arm_min_f32+0xb8>

0800a714 <arm_mean_f32>:
 800a714:	b430      	push	{r4, r5}
 800a716:	088d      	lsrs	r5, r1, #2
 800a718:	d02d      	beq.n	800a776 <arm_mean_f32+0x62>
 800a71a:	f100 0310 	add.w	r3, r0, #16
 800a71e:	462c      	mov	r4, r5
 800a720:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a77c <arm_mean_f32+0x68>
 800a724:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a728:	3c01      	subs	r4, #1
 800a72a:	ed13 6a03 	vldr	s12, [r3, #-12]
 800a72e:	f103 0310 	add.w	r3, r3, #16
 800a732:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a736:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800a73a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 800a73e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a742:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a74a:	d1eb      	bne.n	800a724 <arm_mean_f32+0x10>
 800a74c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a750:	f011 0303 	ands.w	r3, r1, #3
 800a754:	d005      	beq.n	800a762 <arm_mean_f32+0x4e>
 800a756:	ecb0 7a01 	vldmia	r0!, {s14}
 800a75a:	3b01      	subs	r3, #1
 800a75c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a760:	d1f9      	bne.n	800a756 <arm_mean_f32+0x42>
 800a762:	ee07 1a10 	vmov	s14, r1
 800a766:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a76a:	bc30      	pop	{r4, r5}
 800a76c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a770:	edc2 6a00 	vstr	s13, [r2]
 800a774:	4770      	bx	lr
 800a776:	eddf 7a01 	vldr	s15, [pc, #4]	; 800a77c <arm_mean_f32+0x68>
 800a77a:	e7e9      	b.n	800a750 <arm_mean_f32+0x3c>
 800a77c:	00000000 	.word	0x00000000

0800a780 <arm_max_f32>:
 800a780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a784:	1e4d      	subs	r5, r1, #1
 800a786:	f100 0c04 	add.w	ip, r0, #4
 800a78a:	edd0 7a00 	vldr	s15, [r0]
 800a78e:	ea5f 0995 	movs.w	r9, r5, lsr #2
 800a792:	d056      	beq.n	800a842 <arm_max_f32+0xc2>
 800a794:	3014      	adds	r0, #20
 800a796:	46c8      	mov	r8, r9
 800a798:	2404      	movs	r4, #4
 800a79a:	2600      	movs	r6, #0
 800a79c:	ed10 6a04 	vldr	s12, [r0, #-16]
 800a7a0:	f1a4 0a03 	sub.w	sl, r4, #3
 800a7a4:	ed50 6a03 	vldr	s13, [r0, #-12]
 800a7a8:	f1a4 0e02 	sub.w	lr, r4, #2
 800a7ac:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800a7b0:	ed10 7a02 	vldr	s14, [r0, #-8]
 800a7b4:	ed50 5a01 	vldr	s11, [r0, #-4]
 800a7b8:	1e67      	subs	r7, r4, #1
 800a7ba:	3010      	adds	r0, #16
 800a7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c0:	bfc8      	it	gt
 800a7c2:	eef0 7a46 	vmovgt.f32	s15, s12
 800a7c6:	bfc8      	it	gt
 800a7c8:	4656      	movgt	r6, sl
 800a7ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d2:	bf48      	it	mi
 800a7d4:	eef0 7a66 	vmovmi.f32	s15, s13
 800a7d8:	bf48      	it	mi
 800a7da:	4676      	movmi	r6, lr
 800a7dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e4:	bf48      	it	mi
 800a7e6:	eef0 7a47 	vmovmi.f32	s15, s14
 800a7ea:	bf48      	it	mi
 800a7ec:	463e      	movmi	r6, r7
 800a7ee:	eef4 7ae5 	vcmpe.f32	s15, s11
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	bf48      	it	mi
 800a7f8:	4626      	movmi	r6, r4
 800a7fa:	bf48      	it	mi
 800a7fc:	eef0 7a65 	vmovmi.f32	s15, s11
 800a800:	f1b8 0801 	subs.w	r8, r8, #1
 800a804:	f104 0404 	add.w	r4, r4, #4
 800a808:	d1c8      	bne.n	800a79c <arm_max_f32+0x1c>
 800a80a:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 800a80e:	f015 0003 	ands.w	r0, r5, #3
 800a812:	d018      	beq.n	800a846 <arm_max_f32+0xc6>
 800a814:	1a08      	subs	r0, r1, r0
 800a816:	ecbc 7a01 	vldmia	ip!, {s14}
 800a81a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a822:	bfc8      	it	gt
 800a824:	4606      	movgt	r6, r0
 800a826:	f100 0001 	add.w	r0, r0, #1
 800a82a:	bfd8      	it	le
 800a82c:	eeb0 7a67 	vmovle.f32	s14, s15
 800a830:	4281      	cmp	r1, r0
 800a832:	eef0 7a47 	vmov.f32	s15, s14
 800a836:	d1ee      	bne.n	800a816 <arm_max_f32+0x96>
 800a838:	ed82 7a00 	vstr	s14, [r2]
 800a83c:	601e      	str	r6, [r3, #0]
 800a83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a842:	464e      	mov	r6, r9
 800a844:	e7e3      	b.n	800a80e <arm_max_f32+0x8e>
 800a846:	eeb0 7a67 	vmov.f32	s14, s15
 800a84a:	e7f5      	b.n	800a838 <arm_max_f32+0xb8>

0800a84c <arm_cfft_radix8by2_f32>:
 800a84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a850:	4607      	mov	r7, r0
 800a852:	4608      	mov	r0, r1
 800a854:	ed2d 8b06 	vpush	{d8-d10}
 800a858:	f8b7 e000 	ldrh.w	lr, [r7]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800a862:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800a866:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a86a:	f000 80b0 	beq.w	800a9ce <arm_cfft_radix8by2_f32+0x182>
 800a86e:	008b      	lsls	r3, r1, #2
 800a870:	3210      	adds	r2, #16
 800a872:	f100 0610 	add.w	r6, r0, #16
 800a876:	f108 0510 	add.w	r5, r8, #16
 800a87a:	3310      	adds	r3, #16
 800a87c:	18c4      	adds	r4, r0, r3
 800a87e:	4443      	add	r3, r8
 800a880:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a884:	f1be 0e01 	subs.w	lr, lr, #1
 800a888:	ed56 4a04 	vldr	s9, [r6, #-16]
 800a88c:	f104 0410 	add.w	r4, r4, #16
 800a890:	ed15 7a03 	vldr	s14, [r5, #-12]
 800a894:	f106 0610 	add.w	r6, r6, #16
 800a898:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800a89c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800a8a0:	ed55 2a01 	vldr	s5, [r5, #-4]
 800a8a4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a8a8:	ed53 0a04 	vldr	s1, [r3, #-16]
 800a8ac:	f102 0210 	add.w	r2, r2, #16
 800a8b0:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a8b4:	f105 0510 	add.w	r5, r5, #16
 800a8b8:	ed13 3a02 	vldr	s6, [r3, #-8]
 800a8bc:	f103 0310 	add.w	r3, r3, #16
 800a8c0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800a8c4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800a8c8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800a8cc:	ee33 8a83 	vadd.f32	s16, s7, s6
 800a8d0:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800a8d4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800a8d8:	ee34 0a06 	vadd.f32	s0, s8, s12
 800a8dc:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800a8e0:	ee76 aa87 	vadd.f32	s21, s13, s14
 800a8e4:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800a8e8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a8ec:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800a8f0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800a8f4:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800a8f8:	ee71 8a05 	vadd.f32	s17, s2, s10
 800a8fc:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800a900:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800a904:	ee72 9a22 	vadd.f32	s19, s4, s5
 800a908:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a90c:	ee35 5a41 	vsub.f32	s10, s10, s2
 800a910:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800a914:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800a918:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a91c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800a920:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800a924:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800a928:	ee72 7a62 	vsub.f32	s15, s4, s5
 800a92c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800a930:	ee73 2a63 	vsub.f32	s5, s6, s7
 800a934:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800a938:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800a93c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800a940:	ee24 3a84 	vmul.f32	s6, s9, s8
 800a944:	ee27 2a26 	vmul.f32	s4, s14, s13
 800a948:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800a94c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800a950:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a954:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a958:	ee65 6a26 	vmul.f32	s13, s10, s13
 800a95c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a960:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a964:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a968:	ee33 4a02 	vadd.f32	s8, s6, s4
 800a96c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a970:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800a974:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800a978:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800a97c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800a980:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800a984:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a988:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800a98c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800a990:	ee61 5a87 	vmul.f32	s11, s3, s14
 800a994:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a998:	ee22 5a87 	vmul.f32	s10, s5, s14
 800a99c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a9a0:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a9a4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800a9a8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a9ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a9b0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a9b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a9b8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800a9bc:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800a9c0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800a9c4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800a9c8:	f47f af5a 	bne.w	800a880 <arm_cfft_radix8by2_f32+0x34>
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	b28c      	uxth	r4, r1
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	f000 fd74 	bl	800b4c0 <arm_radix8_butterfly_f32>
 800a9d8:	4621      	mov	r1, r4
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	4640      	mov	r0, r8
 800a9de:	2302      	movs	r3, #2
 800a9e0:	ecbd 8b06 	vpop	{d8-d10}
 800a9e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e8:	f000 bd6a 	b.w	800b4c0 <arm_radix8_butterfly_f32>

0800a9ec <arm_cfft_radix8by4_f32>:
 800a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f0:	ed2d 8b06 	vpush	{d8-d10}
 800a9f4:	8804      	ldrh	r4, [r0, #0]
 800a9f6:	b08f      	sub	sp, #60	; 0x3c
 800a9f8:	ed91 6a00 	vldr	s12, [r1]
 800a9fc:	460a      	mov	r2, r1
 800a9fe:	0864      	lsrs	r4, r4, #1
 800aa00:	ed91 7a01 	vldr	s14, [r1, #4]
 800aa04:	9101      	str	r1, [sp, #4]
 800aa06:	00a3      	lsls	r3, r4, #2
 800aa08:	6841      	ldr	r1, [r0, #4]
 800aa0a:	0864      	lsrs	r4, r4, #1
 800aa0c:	900c      	str	r0, [sp, #48]	; 0x30
 800aa0e:	9205      	str	r2, [sp, #20]
 800aa10:	f101 0610 	add.w	r6, r1, #16
 800aa14:	4625      	mov	r5, r4
 800aa16:	940b      	str	r4, [sp, #44]	; 0x2c
 800aa18:	f101 0408 	add.w	r4, r1, #8
 800aa1c:	9602      	str	r6, [sp, #8]
 800aa1e:	9407      	str	r4, [sp, #28]
 800aa20:	18d4      	adds	r4, r2, r3
 800aa22:	1eaa      	subs	r2, r5, #2
 800aa24:	f101 0518 	add.w	r5, r1, #24
 800aa28:	18e0      	adds	r0, r4, r3
 800aa2a:	edd4 4a00 	vldr	s9, [r4]
 800aa2e:	ed94 4a01 	vldr	s8, [r4, #4]
 800aa32:	46a6      	mov	lr, r4
 800aa34:	edd0 6a00 	vldr	s13, [r0]
 800aa38:	18c7      	adds	r7, r0, r3
 800aa3a:	edd0 7a01 	vldr	s15, [r0, #4]
 800aa3e:	46a0      	mov	r8, r4
 800aa40:	ee76 5a26 	vadd.f32	s11, s12, s13
 800aa44:	ed97 5a00 	vldr	s10, [r7]
 800aa48:	ee76 6a66 	vsub.f32	s13, s12, s13
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	9506      	str	r5, [sp, #24]
 800aa50:	4605      	mov	r5, r0
 800aa52:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800aa56:	900a      	str	r0, [sp, #40]	; 0x28
 800aa58:	9801      	ldr	r0, [sp, #4]
 800aa5a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800aa5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa62:	ed97 3a01 	vldr	s6, [r7, #4]
 800aa66:	ee72 2a85 	vadd.f32	s5, s5, s10
 800aa6a:	46bc      	mov	ip, r7
 800aa6c:	ee76 3a84 	vadd.f32	s7, s13, s8
 800aa70:	9704      	str	r7, [sp, #16]
 800aa72:	ee36 7a44 	vsub.f32	s14, s12, s8
 800aa76:	f8cd e00c 	str.w	lr, [sp, #12]
 800aa7a:	ee12 9a90 	vmov	r9, s5
 800aa7e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800aa82:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800aa86:	1f3e      	subs	r6, r7, #4
 800aa88:	f840 9b08 	str.w	r9, [r0], #8
 800aa8c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800aa90:	edde 2a01 	vldr	s5, [lr, #4]
 800aa94:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800aa98:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800aa9c:	eddc 4a01 	vldr	s9, [ip, #4]
 800aaa0:	ee36 6a22 	vadd.f32	s12, s12, s5
 800aaa4:	9001      	str	r0, [sp, #4]
 800aaa6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800aaaa:	9805      	ldr	r0, [sp, #20]
 800aaac:	ee13 9a90 	vmov	r9, s7
 800aab0:	ee37 7a43 	vsub.f32	s14, s14, s6
 800aab4:	ee36 6a24 	vadd.f32	s12, s12, s9
 800aab8:	f1ae 0704 	sub.w	r7, lr, #4
 800aabc:	ee74 4a05 	vadd.f32	s9, s8, s10
 800aac0:	ee76 6a83 	vadd.f32	s13, s13, s6
 800aac4:	ed80 6a01 	vstr	s12, [r0, #4]
 800aac8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800aacc:	f848 9b08 	str.w	r9, [r8], #8
 800aad0:	edce 4a01 	vstr	s9, [lr, #4]
 800aad4:	ee15 ea90 	vmov	lr, s11
 800aad8:	f844 eb08 	str.w	lr, [r4], #8
 800aadc:	ee16 ea90 	vmov	lr, s13
 800aae0:	9408      	str	r4, [sp, #32]
 800aae2:	462c      	mov	r4, r5
 800aae4:	ed85 7a01 	vstr	s14, [r5, #4]
 800aae8:	9d04      	ldr	r5, [sp, #16]
 800aaea:	f84c eb08 	str.w	lr, [ip], #8
 800aaee:	edc5 7a01 	vstr	s15, [r5, #4]
 800aaf2:	0855      	lsrs	r5, r2, #1
 800aaf4:	9509      	str	r5, [sp, #36]	; 0x24
 800aaf6:	f000 8130 	beq.w	800ad5a <arm_cfft_radix8by4_f32+0x36e>
 800aafa:	9805      	ldr	r0, [sp, #20]
 800aafc:	3b08      	subs	r3, #8
 800aafe:	46ab      	mov	fp, r5
 800ab00:	f1a4 020c 	sub.w	r2, r4, #12
 800ab04:	f100 0510 	add.w	r5, r0, #16
 800ab08:	f101 0920 	add.w	r9, r1, #32
 800ab0c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800ab10:	f8dd a008 	ldr.w	sl, [sp, #8]
 800ab14:	4433      	add	r3, r6
 800ab16:	3410      	adds	r4, #16
 800ab18:	4660      	mov	r0, ip
 800ab1a:	4641      	mov	r1, r8
 800ab1c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800ab20:	ed54 6a02 	vldr	s13, [r4, #-8]
 800ab24:	f1bb 0b01 	subs.w	fp, fp, #1
 800ab28:	ed55 5a02 	vldr	s11, [r5, #-8]
 800ab2c:	f10a 0a08 	add.w	sl, sl, #8
 800ab30:	edd1 7a00 	vldr	s15, [r1]
 800ab34:	f105 0508 	add.w	r5, r5, #8
 800ab38:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800ab3c:	edd0 2a00 	vldr	s5, [r0]
 800ab40:	ed14 7a01 	vldr	s14, [r4, #-4]
 800ab44:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800ab48:	ed55 6a03 	vldr	s13, [r5, #-12]
 800ab4c:	f1a2 0208 	sub.w	r2, r2, #8
 800ab50:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800ab54:	ed90 2a01 	vldr	s4, [r0, #4]
 800ab58:	ee36 5a87 	vadd.f32	s10, s13, s14
 800ab5c:	ed91 6a01 	vldr	s12, [r1, #4]
 800ab60:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ab64:	f109 0910 	add.w	r9, r9, #16
 800ab68:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800ab6c:	f104 0408 	add.w	r4, r4, #8
 800ab70:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800ab74:	f10e 0e18 	add.w	lr, lr, #24
 800ab78:	ee37 3a67 	vsub.f32	s6, s14, s15
 800ab7c:	f1a3 0308 	sub.w	r3, r3, #8
 800ab80:	ed45 6a04 	vstr	s13, [r5, #-16]
 800ab84:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab88:	edd1 6a01 	vldr	s13, [r1, #4]
 800ab8c:	ee75 1a86 	vadd.f32	s3, s11, s12
 800ab90:	edd0 4a01 	vldr	s9, [r0, #4]
 800ab94:	ee33 3a22 	vadd.f32	s6, s6, s5
 800ab98:	ee75 6a26 	vadd.f32	s13, s10, s13
 800ab9c:	ee35 5a46 	vsub.f32	s10, s10, s12
 800aba0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800aba4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800aba8:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800abac:	ee35 5a42 	vsub.f32	s10, s10, s4
 800abb0:	ed45 6a03 	vstr	s13, [r5, #-12]
 800abb4:	ee36 2a02 	vadd.f32	s4, s12, s4
 800abb8:	edd6 7a00 	vldr	s15, [r6]
 800abbc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800abc0:	ed97 1a00 	vldr	s2, [r7]
 800abc4:	ee77 2a62 	vsub.f32	s5, s14, s5
 800abc8:	ed92 8a04 	vldr	s16, [r2, #16]
 800abcc:	ee71 8a27 	vadd.f32	s17, s2, s15
 800abd0:	ed93 aa04 	vldr	s20, [r3, #16]
 800abd4:	ed16 7a01 	vldr	s14, [r6, #-4]
 800abd8:	ee71 7a67 	vsub.f32	s15, s2, s15
 800abdc:	ed57 0a01 	vldr	s1, [r7, #-4]
 800abe0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800abe4:	ee38 6a88 	vadd.f32	s12, s17, s16
 800abe8:	edd3 9a03 	vldr	s19, [r3, #12]
 800abec:	ee30 0a87 	vadd.f32	s0, s1, s14
 800abf0:	ed92 9a03 	vldr	s18, [r2, #12]
 800abf4:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800abf8:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800abfc:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800ac00:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800ac04:	ee16 ca10 	vmov	ip, s12
 800ac08:	ee30 6a49 	vsub.f32	s12, s0, s18
 800ac0c:	ee77 4a01 	vadd.f32	s9, s14, s2
 800ac10:	f847 c908 	str.w	ip, [r7], #-8
 800ac14:	ee34 4a29 	vadd.f32	s8, s8, s19
 800ac18:	edd2 8a03 	vldr	s17, [r2, #12]
 800ac1c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800ac20:	ed93 8a03 	vldr	s16, [r3, #12]
 800ac24:	ee71 0a47 	vsub.f32	s1, s2, s14
 800ac28:	ee30 0a28 	vadd.f32	s0, s0, s17
 800ac2c:	ee39 1a67 	vsub.f32	s2, s18, s15
 800ac30:	ee36 6a69 	vsub.f32	s12, s12, s19
 800ac34:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ac38:	ee75 5aca 	vsub.f32	s11, s11, s20
 800ac3c:	ed87 0a01 	vstr	s0, [r7, #4]
 800ac40:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800ac44:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800ac48:	ee21 8a80 	vmul.f32	s16, s3, s0
 800ac4c:	ee23 7a26 	vmul.f32	s14, s6, s13
 800ac50:	ee64 7a26 	vmul.f32	s15, s8, s13
 800ac54:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800ac58:	ee24 4a00 	vmul.f32	s8, s8, s0
 800ac5c:	ee23 3a00 	vmul.f32	s6, s6, s0
 800ac60:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800ac64:	ee24 0a80 	vmul.f32	s0, s9, s0
 800ac68:	ee38 7a07 	vadd.f32	s14, s16, s14
 800ac6c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800ac70:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ac74:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ac78:	ee17 ca10 	vmov	ip, s14
 800ac7c:	f841 cb08 	str.w	ip, [r1], #8
 800ac80:	ed01 3a01 	vstr	s6, [r1, #-4]
 800ac84:	ed82 0a04 	vstr	s0, [r2, #16]
 800ac88:	edc2 6a03 	vstr	s13, [r2, #12]
 800ac8c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800ac90:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800ac94:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800ac98:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800ac9c:	ee65 4a27 	vmul.f32	s9, s10, s15
 800aca0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800aca4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800aca8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800acac:	ee25 5a26 	vmul.f32	s10, s10, s13
 800acb0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800acb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acb8:	ee34 6a24 	vadd.f32	s12, s8, s9
 800acbc:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800acc0:	ee35 5a63 	vsub.f32	s10, s10, s7
 800acc4:	ee17 ca90 	vmov	ip, s15
 800acc8:	ed04 6a04 	vstr	s12, [r4, #-16]
 800accc:	ed04 5a03 	vstr	s10, [r4, #-12]
 800acd0:	f846 c908 	str.w	ip, [r6], #-8
 800acd4:	edc6 6a01 	vstr	s13, [r6, #4]
 800acd8:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800acdc:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800ace0:	ee62 5a27 	vmul.f32	s11, s4, s15
 800ace4:	ee22 6a87 	vmul.f32	s12, s5, s14
 800ace8:	ee22 2a07 	vmul.f32	s4, s4, s14
 800acec:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800acf0:	ee61 6a07 	vmul.f32	s13, s2, s14
 800acf4:	ee20 7a87 	vmul.f32	s14, s1, s14
 800acf8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800acfc:	ee61 7a27 	vmul.f32	s15, s2, s15
 800ad00:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ad04:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800ad08:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800ad0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad10:	ee16 ca10 	vmov	ip, s12
 800ad14:	f840 cb08 	str.w	ip, [r0], #8
 800ad18:	ed40 2a01 	vstr	s5, [r0, #-4]
 800ad1c:	edc3 0a04 	vstr	s1, [r3, #16]
 800ad20:	edc3 7a03 	vstr	s15, [r3, #12]
 800ad24:	f47f aefc 	bne.w	800ab20 <arm_cfft_radix8by4_f32+0x134>
 800ad28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad2a:	9802      	ldr	r0, [sp, #8]
 800ad2c:	00cb      	lsls	r3, r1, #3
 800ad2e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800ad32:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ad36:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ad3a:	4498      	add	r8, r3
 800ad3c:	449c      	add	ip, r3
 800ad3e:	9102      	str	r1, [sp, #8]
 800ad40:	9901      	ldr	r1, [sp, #4]
 800ad42:	4419      	add	r1, r3
 800ad44:	9101      	str	r1, [sp, #4]
 800ad46:	9907      	ldr	r1, [sp, #28]
 800ad48:	4419      	add	r1, r3
 800ad4a:	9107      	str	r1, [sp, #28]
 800ad4c:	9908      	ldr	r1, [sp, #32]
 800ad4e:	4419      	add	r1, r3
 800ad50:	9b06      	ldr	r3, [sp, #24]
 800ad52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad56:	9108      	str	r1, [sp, #32]
 800ad58:	9306      	str	r3, [sp, #24]
 800ad5a:	9a01      	ldr	r2, [sp, #4]
 800ad5c:	2304      	movs	r3, #4
 800ad5e:	9e08      	ldr	r6, [sp, #32]
 800ad60:	edd2 7a00 	vldr	s15, [r2]
 800ad64:	ed96 7a00 	vldr	s14, [r6]
 800ad68:	edd8 2a00 	vldr	s5, [r8]
 800ad6c:	ee77 5a87 	vadd.f32	s11, s15, s14
 800ad70:	ed9c 3a00 	vldr	s6, [ip]
 800ad74:	ed92 6a01 	vldr	s12, [r2, #4]
 800ad78:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ad7c:	edd6 6a01 	vldr	s13, [r6, #4]
 800ad80:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800ad84:	ed9c 2a01 	vldr	s4, [ip, #4]
 800ad88:	ee36 5a26 	vadd.f32	s10, s12, s13
 800ad8c:	edd8 7a01 	vldr	s15, [r8, #4]
 800ad90:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ad94:	9d02      	ldr	r5, [sp, #8]
 800ad96:	ee34 6a83 	vadd.f32	s12, s9, s6
 800ad9a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800ad9e:	ee37 4a27 	vadd.f32	s8, s14, s15
 800ada2:	9805      	ldr	r0, [sp, #20]
 800ada4:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800ada8:	4621      	mov	r1, r4
 800adaa:	ed82 6a00 	vstr	s12, [r2]
 800adae:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800adb2:	edd8 3a01 	vldr	s7, [r8, #4]
 800adb6:	ee75 5a67 	vsub.f32	s11, s10, s15
 800adba:	eddc 1a01 	vldr	s3, [ip, #4]
 800adbe:	ee34 4a42 	vsub.f32	s8, s8, s4
 800adc2:	ee75 3a23 	vadd.f32	s7, s10, s7
 800adc6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800adca:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800adce:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800add2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800add6:	ee36 6a43 	vsub.f32	s12, s12, s6
 800adda:	ed82 5a01 	vstr	s10, [r2, #4]
 800adde:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ade2:	9a07      	ldr	r2, [sp, #28]
 800ade4:	ee77 7a02 	vadd.f32	s15, s14, s4
 800ade8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800adec:	edd2 2a00 	vldr	s5, [r2]
 800adf0:	ed92 5a01 	vldr	s10, [r2, #4]
 800adf4:	ee64 3a22 	vmul.f32	s7, s8, s5
 800adf8:	ee24 4a05 	vmul.f32	s8, s8, s10
 800adfc:	ee24 5a85 	vmul.f32	s10, s9, s10
 800ae00:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800ae04:	ee33 5a85 	vadd.f32	s10, s7, s10
 800ae08:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800ae0c:	ed88 5a00 	vstr	s10, [r8]
 800ae10:	edc8 4a01 	vstr	s9, [r8, #4]
 800ae14:	edd5 4a01 	vldr	s9, [r5, #4]
 800ae18:	edd5 6a00 	vldr	s13, [r5]
 800ae1c:	9d06      	ldr	r5, [sp, #24]
 800ae1e:	ee26 5a26 	vmul.f32	s10, s12, s13
 800ae22:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ae26:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800ae2a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800ae2e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800ae32:	ee75 5a25 	vadd.f32	s11, s10, s11
 800ae36:	ed86 6a01 	vstr	s12, [r6, #4]
 800ae3a:	edc6 5a00 	vstr	s11, [r6]
 800ae3e:	edd5 5a01 	vldr	s11, [r5, #4]
 800ae42:	edd5 6a00 	vldr	s13, [r5]
 800ae46:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ae48:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800ae4c:	ee67 6a26 	vmul.f32	s13, s14, s13
 800ae50:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ae54:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ae58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ae5c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800ae60:	edcc 7a01 	vstr	s15, [ip, #4]
 800ae64:	ed8c 7a00 	vstr	s14, [ip]
 800ae68:	6872      	ldr	r2, [r6, #4]
 800ae6a:	f000 fb29 	bl	800b4c0 <arm_radix8_butterfly_f32>
 800ae6e:	9803      	ldr	r0, [sp, #12]
 800ae70:	4621      	mov	r1, r4
 800ae72:	6872      	ldr	r2, [r6, #4]
 800ae74:	2304      	movs	r3, #4
 800ae76:	f000 fb23 	bl	800b4c0 <arm_radix8_butterfly_f32>
 800ae7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	6872      	ldr	r2, [r6, #4]
 800ae80:	2304      	movs	r3, #4
 800ae82:	f000 fb1d 	bl	800b4c0 <arm_radix8_butterfly_f32>
 800ae86:	4621      	mov	r1, r4
 800ae88:	6872      	ldr	r2, [r6, #4]
 800ae8a:	2304      	movs	r3, #4
 800ae8c:	9804      	ldr	r0, [sp, #16]
 800ae8e:	b00f      	add	sp, #60	; 0x3c
 800ae90:	ecbd 8b06 	vpop	{d8-d10}
 800ae94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae98:	f000 bb12 	b.w	800b4c0 <arm_radix8_butterfly_f32>

0800ae9c <arm_cfft_f32>:
 800ae9c:	2a01      	cmp	r2, #1
 800ae9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea2:	4606      	mov	r6, r0
 800aea4:	4617      	mov	r7, r2
 800aea6:	460c      	mov	r4, r1
 800aea8:	4698      	mov	r8, r3
 800aeaa:	8805      	ldrh	r5, [r0, #0]
 800aeac:	d053      	beq.n	800af56 <arm_cfft_f32+0xba>
 800aeae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800aeb2:	d04b      	beq.n	800af4c <arm_cfft_f32+0xb0>
 800aeb4:	d916      	bls.n	800aee4 <arm_cfft_f32+0x48>
 800aeb6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800aeba:	d01a      	beq.n	800aef2 <arm_cfft_f32+0x56>
 800aebc:	d95a      	bls.n	800af74 <arm_cfft_f32+0xd8>
 800aebe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800aec2:	d043      	beq.n	800af4c <arm_cfft_f32+0xb0>
 800aec4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800aec8:	d105      	bne.n	800aed6 <arm_cfft_f32+0x3a>
 800aeca:	2301      	movs	r3, #1
 800aecc:	6872      	ldr	r2, [r6, #4]
 800aece:	4629      	mov	r1, r5
 800aed0:	4620      	mov	r0, r4
 800aed2:	f000 faf5 	bl	800b4c0 <arm_radix8_butterfly_f32>
 800aed6:	f1b8 0f00 	cmp.w	r8, #0
 800aeda:	d111      	bne.n	800af00 <arm_cfft_f32+0x64>
 800aedc:	2f01      	cmp	r7, #1
 800aede:	d016      	beq.n	800af0e <arm_cfft_f32+0x72>
 800aee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee4:	2d20      	cmp	r5, #32
 800aee6:	d031      	beq.n	800af4c <arm_cfft_f32+0xb0>
 800aee8:	d948      	bls.n	800af7c <arm_cfft_f32+0xe0>
 800aeea:	2d40      	cmp	r5, #64	; 0x40
 800aeec:	d0ed      	beq.n	800aeca <arm_cfft_f32+0x2e>
 800aeee:	2d80      	cmp	r5, #128	; 0x80
 800aef0:	d1f1      	bne.n	800aed6 <arm_cfft_f32+0x3a>
 800aef2:	4621      	mov	r1, r4
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7ff fca9 	bl	800a84c <arm_cfft_radix8by2_f32>
 800aefa:	f1b8 0f00 	cmp.w	r8, #0
 800aefe:	d0ed      	beq.n	800aedc <arm_cfft_f32+0x40>
 800af00:	68b2      	ldr	r2, [r6, #8]
 800af02:	4620      	mov	r0, r4
 800af04:	89b1      	ldrh	r1, [r6, #12]
 800af06:	f7f5 f9e7 	bl	80002d8 <arm_bitreversal_32>
 800af0a:	2f01      	cmp	r7, #1
 800af0c:	d1e8      	bne.n	800aee0 <arm_cfft_f32+0x44>
 800af0e:	ee07 5a90 	vmov	s15, r5
 800af12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800af1e:	2d00      	cmp	r5, #0
 800af20:	d0de      	beq.n	800aee0 <arm_cfft_f32+0x44>
 800af22:	f104 0108 	add.w	r1, r4, #8
 800af26:	2300      	movs	r3, #0
 800af28:	ed11 7a02 	vldr	s14, [r1, #-8]
 800af2c:	3301      	adds	r3, #1
 800af2e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800af32:	3108      	adds	r1, #8
 800af34:	429d      	cmp	r5, r3
 800af36:	ee27 7a26 	vmul.f32	s14, s14, s13
 800af3a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800af3e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800af42:	ed41 7a03 	vstr	s15, [r1, #-12]
 800af46:	d1ef      	bne.n	800af28 <arm_cfft_f32+0x8c>
 800af48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af4c:	4621      	mov	r1, r4
 800af4e:	4630      	mov	r0, r6
 800af50:	f7ff fd4c 	bl	800a9ec <arm_cfft_radix8by4_f32>
 800af54:	e7bf      	b.n	800aed6 <arm_cfft_f32+0x3a>
 800af56:	b1a5      	cbz	r5, 800af82 <arm_cfft_f32+0xe6>
 800af58:	f101 030c 	add.w	r3, r1, #12
 800af5c:	2200      	movs	r2, #0
 800af5e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800af62:	3201      	adds	r2, #1
 800af64:	3308      	adds	r3, #8
 800af66:	eef1 7a67 	vneg.f32	s15, s15
 800af6a:	4295      	cmp	r5, r2
 800af6c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800af70:	d1f5      	bne.n	800af5e <arm_cfft_f32+0xc2>
 800af72:	e79c      	b.n	800aeae <arm_cfft_f32+0x12>
 800af74:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800af78:	d0a7      	beq.n	800aeca <arm_cfft_f32+0x2e>
 800af7a:	e7ac      	b.n	800aed6 <arm_cfft_f32+0x3a>
 800af7c:	2d10      	cmp	r5, #16
 800af7e:	d0b8      	beq.n	800aef2 <arm_cfft_f32+0x56>
 800af80:	e7a9      	b.n	800aed6 <arm_cfft_f32+0x3a>
 800af82:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800af86:	d896      	bhi.n	800aeb6 <arm_cfft_f32+0x1a>
 800af88:	e7ac      	b.n	800aee4 <arm_cfft_f32+0x48>
 800af8a:	bf00      	nop

0800af8c <arm_cmplx_mult_cmplx_f32>:
 800af8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af8e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800af92:	d073      	beq.n	800b07c <arm_cmplx_mult_cmplx_f32+0xf0>
 800af94:	f100 0620 	add.w	r6, r0, #32
 800af98:	f101 0520 	add.w	r5, r1, #32
 800af9c:	f102 0420 	add.w	r4, r2, #32
 800afa0:	4677      	mov	r7, lr
 800afa2:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 800afa6:	3f01      	subs	r7, #1
 800afa8:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 800afac:	f106 0620 	add.w	r6, r6, #32
 800afb0:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 800afb4:	f105 0520 	add.w	r5, r5, #32
 800afb8:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 800afbc:	ee27 3a27 	vmul.f32	s6, s14, s15
 800afc0:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800afc4:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 800afc8:	ee25 4aa6 	vmul.f32	s8, s11, s13
 800afcc:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 800afd0:	ee67 6a26 	vmul.f32	s13, s14, s13
 800afd4:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 800afd8:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 800afdc:	ee66 3a27 	vmul.f32	s7, s12, s15
 800afe0:	ee66 5a05 	vmul.f32	s11, s12, s10
 800afe4:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 800afe8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800afec:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 800aff0:	ee25 5a22 	vmul.f32	s10, s10, s5
 800aff4:	f104 0420 	add.w	r4, r4, #32
 800aff8:	ee33 4a44 	vsub.f32	s8, s6, s8
 800affc:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800b000:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b004:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 800b008:	ee67 4a06 	vmul.f32	s9, s14, s12
 800b00c:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 800b010:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b014:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 800b018:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 800b01c:	ee66 5a05 	vmul.f32	s11, s12, s10
 800b020:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 800b024:	ee25 5a26 	vmul.f32	s10, s10, s13
 800b028:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800b02c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b030:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800b034:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 800b038:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 800b03c:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800b040:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 800b044:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b048:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b04c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b050:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 800b054:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b058:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b05c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b060:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800b064:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 800b068:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800b06c:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 800b070:	d197      	bne.n	800afa2 <arm_cmplx_mult_cmplx_f32+0x16>
 800b072:	ea4f 144e 	mov.w	r4, lr, lsl #5
 800b076:	4420      	add	r0, r4
 800b078:	4421      	add	r1, r4
 800b07a:	4422      	add	r2, r4
 800b07c:	f013 0303 	ands.w	r3, r3, #3
 800b080:	d022      	beq.n	800b0c8 <arm_cmplx_mult_cmplx_f32+0x13c>
 800b082:	3008      	adds	r0, #8
 800b084:	3108      	adds	r1, #8
 800b086:	3208      	adds	r2, #8
 800b088:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	ed11 7a02 	vldr	s14, [r1, #-8]
 800b092:	f100 0008 	add.w	r0, r0, #8
 800b096:	ed50 6a03 	vldr	s13, [r0, #-12]
 800b09a:	f101 0108 	add.w	r1, r1, #8
 800b09e:	ed51 5a03 	vldr	s11, [r1, #-12]
 800b0a2:	ee27 6a87 	vmul.f32	s12, s15, s14
 800b0a6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b0aa:	f102 0208 	add.w	r2, r2, #8
 800b0ae:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b0b2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b0b6:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b0ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0be:	ed42 6a04 	vstr	s13, [r2, #-16]
 800b0c2:	ed42 7a03 	vstr	s15, [r2, #-12]
 800b0c6:	d1df      	bne.n	800b088 <arm_cmplx_mult_cmplx_f32+0xfc>
 800b0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0ca:	bf00      	nop

0800b0cc <arm_cmplx_mag_f32>:
 800b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	d07f      	beq.n	800b1d8 <arm_cmplx_mag_f32+0x10c>
 800b0d8:	f100 0420 	add.w	r4, r0, #32
 800b0dc:	f101 0510 	add.w	r5, r1, #16
 800b0e0:	4646      	mov	r6, r8
 800b0e2:	2700      	movs	r7, #0
 800b0e4:	e05a      	b.n	800b19c <arm_cmplx_mag_f32+0xd0>
 800b0e6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800b0ea:	eeb4 0a40 	vcmp.f32	s0, s0
 800b0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f2:	f040 80a4 	bne.w	800b23e <arm_cmplx_mag_f32+0x172>
 800b0f6:	ed05 0a04 	vstr	s0, [r5, #-16]
 800b0fa:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800b0fe:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800b102:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b106:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b10a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b10e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b116:	f2c0 808f 	blt.w	800b238 <arm_cmplx_mag_f32+0x16c>
 800b11a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800b11e:	eeb4 0a40 	vcmp.f32	s0, s0
 800b122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b126:	f040 80af 	bne.w	800b288 <arm_cmplx_mag_f32+0x1bc>
 800b12a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800b12e:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b132:	ed14 0a03 	vldr	s0, [r4, #-12]
 800b136:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b13a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b13e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14a:	db72      	blt.n	800b232 <arm_cmplx_mag_f32+0x166>
 800b14c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800b150:	eeb4 0a40 	vcmp.f32	s0, s0
 800b154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b158:	f040 808c 	bne.w	800b274 <arm_cmplx_mag_f32+0x1a8>
 800b15c:	ed05 0a02 	vstr	s0, [r5, #-8]
 800b160:	ed54 7a02 	vldr	s15, [r4, #-8]
 800b164:	ed14 0a01 	vldr	s0, [r4, #-4]
 800b168:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b16c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b170:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17c:	db20      	blt.n	800b1c0 <arm_cmplx_mag_f32+0xf4>
 800b17e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800b182:	eeb4 0a40 	vcmp.f32	s0, s0
 800b186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b18a:	d169      	bne.n	800b260 <arm_cmplx_mag_f32+0x194>
 800b18c:	3e01      	subs	r6, #1
 800b18e:	ed05 0a01 	vstr	s0, [r5, #-4]
 800b192:	f104 0420 	add.w	r4, r4, #32
 800b196:	f105 0510 	add.w	r5, r5, #16
 800b19a:	d019      	beq.n	800b1d0 <arm_cmplx_mag_f32+0x104>
 800b19c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800b1a0:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800b1a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b1ac:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b1b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b8:	da95      	bge.n	800b0e6 <arm_cmplx_mag_f32+0x1a>
 800b1ba:	f845 7c10 	str.w	r7, [r5, #-16]
 800b1be:	e79c      	b.n	800b0fa <arm_cmplx_mag_f32+0x2e>
 800b1c0:	3e01      	subs	r6, #1
 800b1c2:	f845 7c04 	str.w	r7, [r5, #-4]
 800b1c6:	f104 0420 	add.w	r4, r4, #32
 800b1ca:	f105 0510 	add.w	r5, r5, #16
 800b1ce:	d1e5      	bne.n	800b19c <arm_cmplx_mag_f32+0xd0>
 800b1d0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800b1d4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800b1d8:	f012 0503 	ands.w	r5, r2, #3
 800b1dc:	d026      	beq.n	800b22c <arm_cmplx_mag_f32+0x160>
 800b1de:	f100 0408 	add.w	r4, r0, #8
 800b1e2:	2600      	movs	r6, #0
 800b1e4:	e00c      	b.n	800b200 <arm_cmplx_mag_f32+0x134>
 800b1e6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800b1ea:	eeb4 0a40 	vcmp.f32	s0, s0
 800b1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f2:	d12e      	bne.n	800b252 <arm_cmplx_mag_f32+0x186>
 800b1f4:	3d01      	subs	r5, #1
 800b1f6:	ed01 0a01 	vstr	s0, [r1, #-4]
 800b1fa:	f104 0408 	add.w	r4, r4, #8
 800b1fe:	d015      	beq.n	800b22c <arm_cmplx_mag_f32+0x160>
 800b200:	ed54 7a02 	vldr	s15, [r4, #-8]
 800b204:	3104      	adds	r1, #4
 800b206:	ed14 0a01 	vldr	s0, [r4, #-4]
 800b20a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b20e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b212:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21e:	dae2      	bge.n	800b1e6 <arm_cmplx_mag_f32+0x11a>
 800b220:	3d01      	subs	r5, #1
 800b222:	f841 6c04 	str.w	r6, [r1, #-4]
 800b226:	f104 0408 	add.w	r4, r4, #8
 800b22a:	d1e9      	bne.n	800b200 <arm_cmplx_mag_f32+0x134>
 800b22c:	b004      	add	sp, #16
 800b22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b232:	f845 7c08 	str.w	r7, [r5, #-8]
 800b236:	e793      	b.n	800b160 <arm_cmplx_mag_f32+0x94>
 800b238:	f845 7c0c 	str.w	r7, [r5, #-12]
 800b23c:	e777      	b.n	800b12e <arm_cmplx_mag_f32+0x62>
 800b23e:	eeb0 0a67 	vmov.f32	s0, s15
 800b242:	9203      	str	r2, [sp, #12]
 800b244:	9102      	str	r1, [sp, #8]
 800b246:	9001      	str	r0, [sp, #4]
 800b248:	f000 fda2 	bl	800bd90 <sqrtf>
 800b24c:	a801      	add	r0, sp, #4
 800b24e:	c807      	ldmia	r0, {r0, r1, r2}
 800b250:	e751      	b.n	800b0f6 <arm_cmplx_mag_f32+0x2a>
 800b252:	eeb0 0a67 	vmov.f32	s0, s15
 800b256:	9101      	str	r1, [sp, #4]
 800b258:	f000 fd9a 	bl	800bd90 <sqrtf>
 800b25c:	9901      	ldr	r1, [sp, #4]
 800b25e:	e7c9      	b.n	800b1f4 <arm_cmplx_mag_f32+0x128>
 800b260:	eeb0 0a67 	vmov.f32	s0, s15
 800b264:	9203      	str	r2, [sp, #12]
 800b266:	9102      	str	r1, [sp, #8]
 800b268:	9001      	str	r0, [sp, #4]
 800b26a:	f000 fd91 	bl	800bd90 <sqrtf>
 800b26e:	a801      	add	r0, sp, #4
 800b270:	c807      	ldmia	r0, {r0, r1, r2}
 800b272:	e78b      	b.n	800b18c <arm_cmplx_mag_f32+0xc0>
 800b274:	eeb0 0a67 	vmov.f32	s0, s15
 800b278:	9203      	str	r2, [sp, #12]
 800b27a:	9102      	str	r1, [sp, #8]
 800b27c:	9001      	str	r0, [sp, #4]
 800b27e:	f000 fd87 	bl	800bd90 <sqrtf>
 800b282:	a801      	add	r0, sp, #4
 800b284:	c807      	ldmia	r0, {r0, r1, r2}
 800b286:	e769      	b.n	800b15c <arm_cmplx_mag_f32+0x90>
 800b288:	eeb0 0a67 	vmov.f32	s0, s15
 800b28c:	9203      	str	r2, [sp, #12]
 800b28e:	9102      	str	r1, [sp, #8]
 800b290:	9001      	str	r0, [sp, #4]
 800b292:	f000 fd7d 	bl	800bd90 <sqrtf>
 800b296:	a801      	add	r0, sp, #4
 800b298:	c807      	ldmia	r0, {r0, r1, r2}
 800b29a:	e746      	b.n	800b12a <arm_cmplx_mag_f32+0x5e>

0800b29c <arm_cmplx_conj_f32>:
 800b29c:	b4f0      	push	{r4, r5, r6, r7}
 800b29e:	0897      	lsrs	r7, r2, #2
 800b2a0:	d035      	beq.n	800b30e <arm_cmplx_conj_f32+0x72>
 800b2a2:	f100 0420 	add.w	r4, r0, #32
 800b2a6:	f101 0320 	add.w	r3, r1, #32
 800b2aa:	463d      	mov	r5, r7
 800b2ac:	f854 6c20 	ldr.w	r6, [r4, #-32]
 800b2b0:	3d01      	subs	r5, #1
 800b2b2:	f104 0420 	add.w	r4, r4, #32
 800b2b6:	f103 0320 	add.w	r3, r3, #32
 800b2ba:	f843 6c40 	str.w	r6, [r3, #-64]
 800b2be:	f854 6c38 	ldr.w	r6, [r4, #-56]
 800b2c2:	f843 6c38 	str.w	r6, [r3, #-56]
 800b2c6:	f854 6c30 	ldr.w	r6, [r4, #-48]
 800b2ca:	f843 6c30 	str.w	r6, [r3, #-48]
 800b2ce:	f854 6c28 	ldr.w	r6, [r4, #-40]
 800b2d2:	f843 6c28 	str.w	r6, [r3, #-40]
 800b2d6:	ed14 6a0f 	vldr	s12, [r4, #-60]	; 0xffffffc4
 800b2da:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800b2de:	ed14 7a0b 	vldr	s14, [r4, #-44]	; 0xffffffd4
 800b2e2:	eeb1 6a46 	vneg.f32	s12, s12
 800b2e6:	ed54 7a09 	vldr	s15, [r4, #-36]	; 0xffffffdc
 800b2ea:	eef1 6a66 	vneg.f32	s13, s13
 800b2ee:	eeb1 7a47 	vneg.f32	s14, s14
 800b2f2:	eef1 7a67 	vneg.f32	s15, s15
 800b2f6:	ed03 6a0f 	vstr	s12, [r3, #-60]	; 0xffffffc4
 800b2fa:	ed43 6a0d 	vstr	s13, [r3, #-52]	; 0xffffffcc
 800b2fe:	ed03 7a0b 	vstr	s14, [r3, #-44]	; 0xffffffd4
 800b302:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 800b306:	d1d1      	bne.n	800b2ac <arm_cmplx_conj_f32+0x10>
 800b308:	017f      	lsls	r7, r7, #5
 800b30a:	4438      	add	r0, r7
 800b30c:	4439      	add	r1, r7
 800b30e:	f012 0203 	ands.w	r2, r2, #3
 800b312:	d011      	beq.n	800b338 <arm_cmplx_conj_f32+0x9c>
 800b314:	3108      	adds	r1, #8
 800b316:	3008      	adds	r0, #8
 800b318:	f850 3c08 	ldr.w	r3, [r0, #-8]
 800b31c:	3a01      	subs	r2, #1
 800b31e:	f100 0008 	add.w	r0, r0, #8
 800b322:	f101 0108 	add.w	r1, r1, #8
 800b326:	f841 3c10 	str.w	r3, [r1, #-16]
 800b32a:	ed50 7a03 	vldr	s15, [r0, #-12]
 800b32e:	eef1 7a67 	vneg.f32	s15, s15
 800b332:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b336:	d1ef      	bne.n	800b318 <arm_cmplx_conj_f32+0x7c>
 800b338:	bcf0      	pop	{r4, r5, r6, r7}
 800b33a:	4770      	bx	lr

0800b33c <arm_sub_f32>:
 800b33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800b342:	d033      	beq.n	800b3ac <arm_sub_f32+0x70>
 800b344:	f100 0610 	add.w	r6, r0, #16
 800b348:	f101 0510 	add.w	r5, r1, #16
 800b34c:	f102 0410 	add.w	r4, r2, #16
 800b350:	4677      	mov	r7, lr
 800b352:	ed16 7a03 	vldr	s14, [r6, #-12]
 800b356:	3f01      	subs	r7, #1
 800b358:	ed56 7a02 	vldr	s15, [r6, #-8]
 800b35c:	f105 0510 	add.w	r5, r5, #16
 800b360:	ed15 6a07 	vldr	s12, [r5, #-28]	; 0xffffffe4
 800b364:	f106 0610 	add.w	r6, r6, #16
 800b368:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800b36c:	f104 0410 	add.w	r4, r4, #16
 800b370:	ed15 5a05 	vldr	s10, [r5, #-20]	; 0xffffffec
 800b374:	ee37 6a46 	vsub.f32	s12, s14, s12
 800b378:	ed55 5a08 	vldr	s11, [r5, #-32]	; 0xffffffe0
 800b37c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b380:	ed16 7a05 	vldr	s14, [r6, #-20]	; 0xffffffec
 800b384:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800b388:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b38c:	ed04 6a07 	vstr	s12, [r4, #-28]	; 0xffffffe4
 800b390:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b394:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800b398:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800b39c:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800b3a0:	d1d7      	bne.n	800b352 <arm_sub_f32+0x16>
 800b3a2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800b3a6:	4420      	add	r0, r4
 800b3a8:	4421      	add	r1, r4
 800b3aa:	4422      	add	r2, r4
 800b3ac:	f013 0303 	ands.w	r3, r3, #3
 800b3b0:	d009      	beq.n	800b3c6 <arm_sub_f32+0x8a>
 800b3b2:	ecf0 7a01 	vldmia	r0!, {s15}
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	ecb1 7a01 	vldmia	r1!, {s14}
 800b3bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3c0:	ece2 7a01 	vstmia	r2!, {s15}
 800b3c4:	d1f5      	bne.n	800b3b2 <arm_sub_f32+0x76>
 800b3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3c8 <arm_mult_f32>:
 800b3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ca:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800b3ce:	d033      	beq.n	800b438 <arm_mult_f32+0x70>
 800b3d0:	f100 0610 	add.w	r6, r0, #16
 800b3d4:	f101 0510 	add.w	r5, r1, #16
 800b3d8:	f102 0410 	add.w	r4, r2, #16
 800b3dc:	4677      	mov	r7, lr
 800b3de:	ed16 7a04 	vldr	s14, [r6, #-16]
 800b3e2:	3f01      	subs	r7, #1
 800b3e4:	ed15 6a04 	vldr	s12, [r5, #-16]
 800b3e8:	f106 0610 	add.w	r6, r6, #16
 800b3ec:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800b3f0:	f105 0510 	add.w	r5, r5, #16
 800b3f4:	ee27 6a06 	vmul.f32	s12, s14, s12
 800b3f8:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800b3fc:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 800b400:	f104 0410 	add.w	r4, r4, #16
 800b404:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800b408:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b40c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800b410:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 800b414:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b418:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800b41c:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800b420:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b424:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800b428:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800b42c:	d1d7      	bne.n	800b3de <arm_mult_f32+0x16>
 800b42e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800b432:	4420      	add	r0, r4
 800b434:	4421      	add	r1, r4
 800b436:	4422      	add	r2, r4
 800b438:	f013 0303 	ands.w	r3, r3, #3
 800b43c:	d009      	beq.n	800b452 <arm_mult_f32+0x8a>
 800b43e:	ecf0 7a01 	vldmia	r0!, {s15}
 800b442:	3b01      	subs	r3, #1
 800b444:	ecb1 7a01 	vldmia	r1!, {s14}
 800b448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b44c:	ece2 7a01 	vstmia	r2!, {s15}
 800b450:	d1f5      	bne.n	800b43e <arm_mult_f32+0x76>
 800b452:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b454 <arm_abs_f32>:
 800b454:	b470      	push	{r4, r5, r6}
 800b456:	0896      	lsrs	r6, r2, #2
 800b458:	d025      	beq.n	800b4a6 <arm_abs_f32+0x52>
 800b45a:	f100 0410 	add.w	r4, r0, #16
 800b45e:	f101 0310 	add.w	r3, r1, #16
 800b462:	4635      	mov	r5, r6
 800b464:	ed14 6a04 	vldr	s12, [r4, #-16]
 800b468:	3d01      	subs	r5, #1
 800b46a:	ed54 6a03 	vldr	s13, [r4, #-12]
 800b46e:	f103 0310 	add.w	r3, r3, #16
 800b472:	ed14 7a02 	vldr	s14, [r4, #-8]
 800b476:	eeb0 6ac6 	vabs.f32	s12, s12
 800b47a:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b47e:	eef0 6ae6 	vabs.f32	s13, s13
 800b482:	eeb0 7ac7 	vabs.f32	s14, s14
 800b486:	f104 0410 	add.w	r4, r4, #16
 800b48a:	eef0 7ae7 	vabs.f32	s15, s15
 800b48e:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
 800b492:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800b496:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 800b49a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b49e:	d1e1      	bne.n	800b464 <arm_abs_f32+0x10>
 800b4a0:	0136      	lsls	r6, r6, #4
 800b4a2:	4430      	add	r0, r6
 800b4a4:	4431      	add	r1, r6
 800b4a6:	f012 0203 	ands.w	r2, r2, #3
 800b4aa:	d007      	beq.n	800b4bc <arm_abs_f32+0x68>
 800b4ac:	ecf0 7a01 	vldmia	r0!, {s15}
 800b4b0:	3a01      	subs	r2, #1
 800b4b2:	eef0 7ae7 	vabs.f32	s15, s15
 800b4b6:	ece1 7a01 	vstmia	r1!, {s15}
 800b4ba:	d1f7      	bne.n	800b4ac <arm_abs_f32+0x58>
 800b4bc:	bc70      	pop	{r4, r5, r6}
 800b4be:	4770      	bx	lr

0800b4c0 <arm_radix8_butterfly_f32>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	469e      	mov	lr, r3
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	468a      	mov	sl, r1
 800b4ca:	468b      	mov	fp, r1
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	ed2d 8b10 	vpush	{d8-d15}
 800b4d2:	469c      	mov	ip, r3
 800b4d4:	b09d      	sub	sp, #116	; 0x74
 800b4d6:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800b7e4 <arm_radix8_butterfly_f32+0x324>
 800b4da:	9019      	str	r0, [sp, #100]	; 0x64
 800b4dc:	921a      	str	r2, [sp, #104]	; 0x68
 800b4de:	931b      	str	r3, [sp, #108]	; 0x6c
 800b4e0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800b4e4:	f04f 0800 	mov.w	r8, #0
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	9311      	str	r3, [sp, #68]	; 0x44
 800b4ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	0053      	lsls	r3, r2, #1
 800b4fa:	18d5      	adds	r5, r2, r3
 800b4fc:	9301      	str	r3, [sp, #4]
 800b4fe:	0113      	lsls	r3, r2, #4
 800b500:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b502:	194c      	adds	r4, r1, r5
 800b504:	eb02 0609 	add.w	r6, r2, r9
 800b508:	9302      	str	r3, [sp, #8]
 800b50a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b50e:	4613      	mov	r3, r2
 800b510:	190a      	adds	r2, r1, r4
 800b512:	eb06 0709 	add.w	r7, r6, r9
 800b516:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b51a:	1888      	adds	r0, r1, r2
 800b51c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b520:	4401      	add	r1, r0
 800b522:	3204      	adds	r2, #4
 800b524:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b528:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b52c:	9b00      	ldr	r3, [sp, #0]
 800b52e:	3104      	adds	r1, #4
 800b530:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800b534:	44d8      	add	r8, fp
 800b536:	ed90 7a00 	vldr	s14, [r0]
 800b53a:	ed94 5a00 	vldr	s10, [r4]
 800b53e:	45c2      	cmp	sl, r8
 800b540:	edd7 3a00 	vldr	s7, [r7]
 800b544:	ed96 6a00 	vldr	s12, [r6]
 800b548:	ee37 1a85 	vadd.f32	s2, s15, s10
 800b54c:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b550:	ee73 4a87 	vadd.f32	s9, s7, s14
 800b554:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800b558:	edd5 7a00 	vldr	s15, [r5]
 800b55c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800b560:	ed11 7a01 	vldr	s14, [r1, #-4]
 800b564:	ee36 2a26 	vadd.f32	s4, s12, s13
 800b568:	ee37 4a87 	vadd.f32	s8, s15, s14
 800b56c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b570:	ee71 5a24 	vadd.f32	s11, s2, s9
 800b574:	ee32 6a04 	vadd.f32	s12, s4, s8
 800b578:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b57c:	ee31 1a64 	vsub.f32	s2, s2, s9
 800b580:	ee75 4a86 	vadd.f32	s9, s11, s12
 800b584:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800b588:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800b58c:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800b590:	ee32 2a44 	vsub.f32	s4, s4, s8
 800b594:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b598:	ed94 0a01 	vldr	s0, [r4, #4]
 800b59c:	edc4 5a00 	vstr	s11, [r4]
 800b5a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b5a4:	edd6 5a01 	vldr	s11, [r6, #4]
 800b5a8:	edd5 2a01 	vldr	s5, [r5, #4]
 800b5ac:	ee75 1a27 	vadd.f32	s3, s10, s15
 800b5b0:	ed92 4a00 	vldr	s8, [r2]
 800b5b4:	ee75 7a67 	vsub.f32	s15, s10, s15
 800b5b8:	edd1 4a00 	vldr	s9, [r1]
 800b5bc:	ee27 7a09 	vmul.f32	s14, s14, s18
 800b5c0:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800b5c4:	ed9c 6a00 	vldr	s12, [ip]
 800b5c8:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800b5cc:	edd0 0a01 	vldr	s1, [r0, #4]
 800b5d0:	ed97 5a01 	vldr	s10, [r7, #4]
 800b5d4:	ee35 4a84 	vadd.f32	s8, s11, s8
 800b5d8:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800b5dc:	ee73 5a26 	vadd.f32	s11, s6, s13
 800b5e0:	ee76 2a00 	vadd.f32	s5, s12, s0
 800b5e4:	ee73 6a66 	vsub.f32	s13, s6, s13
 800b5e8:	ee36 6a40 	vsub.f32	s12, s12, s0
 800b5ec:	ee35 0a20 	vadd.f32	s0, s10, s1
 800b5f0:	ee65 5a89 	vmul.f32	s11, s11, s18
 800b5f4:	ee35 5a60 	vsub.f32	s10, s10, s1
 800b5f8:	ee32 3a80 	vadd.f32	s6, s5, s0
 800b5fc:	ee74 0a24 	vadd.f32	s1, s8, s9
 800b600:	ee66 6a89 	vmul.f32	s13, s13, s18
 800b604:	ee74 4a64 	vsub.f32	s9, s8, s9
 800b608:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800b60c:	ee75 2a25 	vadd.f32	s5, s10, s11
 800b610:	ee33 0a20 	vadd.f32	s0, s6, s1
 800b614:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b618:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b61c:	ee36 5a26 	vadd.f32	s10, s12, s13
 800b620:	ed8c 0a00 	vstr	s0, [ip]
 800b624:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b628:	449c      	add	ip, r3
 800b62a:	ee33 6a87 	vadd.f32	s12, s7, s14
 800b62e:	ed84 3a01 	vstr	s6, [r4, #4]
 800b632:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800b636:	441c      	add	r4, r3
 800b638:	ee71 3a24 	vadd.f32	s7, s2, s9
 800b63c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b640:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800b644:	edc7 3a00 	vstr	s7, [r7]
 800b648:	ee34 1a42 	vsub.f32	s2, s8, s4
 800b64c:	edc0 4a00 	vstr	s9, [r0]
 800b650:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800b654:	ee75 4a46 	vsub.f32	s9, s10, s12
 800b658:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b65c:	ed87 1a01 	vstr	s2, [r7, #4]
 800b660:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800b664:	441f      	add	r7, r3
 800b666:	ee32 4a04 	vadd.f32	s8, s4, s8
 800b66a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800b66e:	ee36 6a05 	vadd.f32	s12, s12, s10
 800b672:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b676:	ed80 4a01 	vstr	s8, [r0, #4]
 800b67a:	ed86 3a00 	vstr	s6, [r6]
 800b67e:	4418      	add	r0, r3
 800b680:	ed41 1a01 	vstr	s3, [r1, #-4]
 800b684:	ed42 3a01 	vstr	s7, [r2, #-4]
 800b688:	edc5 7a00 	vstr	s15, [r5]
 800b68c:	edc6 4a01 	vstr	s9, [r6, #4]
 800b690:	441e      	add	r6, r3
 800b692:	ed81 6a00 	vstr	s12, [r1]
 800b696:	4419      	add	r1, r3
 800b698:	edc2 5a00 	vstr	s11, [r2]
 800b69c:	441a      	add	r2, r3
 800b69e:	ed85 7a01 	vstr	s14, [r5, #4]
 800b6a2:	441d      	add	r5, r3
 800b6a4:	f63f af44 	bhi.w	800b530 <arm_radix8_butterfly_f32+0x70>
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6ac:	2b07      	cmp	r3, #7
 800b6ae:	f240 81f4 	bls.w	800ba9a <arm_radix8_butterfly_f32+0x5da>
 800b6b2:	9901      	ldr	r1, [sp, #4]
 800b6b4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800b6b8:	9d02      	ldr	r5, [sp, #8]
 800b6ba:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800b6be:	3101      	adds	r1, #1
 800b6c0:	eb04 000e 	add.w	r0, r4, lr
 800b6c4:	00e4      	lsls	r4, r4, #3
 800b6c6:	3508      	adds	r5, #8
 800b6c8:	4419      	add	r1, r3
 800b6ca:	eb00 0c0e 	add.w	ip, r0, lr
 800b6ce:	9413      	str	r4, [sp, #76]	; 0x4c
 800b6d0:	00c0      	lsls	r0, r0, #3
 800b6d2:	185e      	adds	r6, r3, r1
 800b6d4:	4617      	mov	r7, r2
 800b6d6:	9218      	str	r2, [sp, #96]	; 0x60
 800b6d8:	f109 0908 	add.w	r9, r9, #8
 800b6dc:	199c      	adds	r4, r3, r6
 800b6de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b6e2:	9012      	str	r0, [sp, #72]	; 0x48
 800b6e4:	195d      	adds	r5, r3, r5
 800b6e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b6e8:	443a      	add	r2, r7
 800b6ea:	950c      	str	r5, [sp, #48]	; 0x30
 800b6ec:	4698      	mov	r8, r3
 800b6ee:	4420      	add	r0, r4
 800b6f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b6f2:	19d7      	adds	r7, r2, r7
 800b6f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b6f8:	4405      	add	r5, r0
 800b6fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b6fe:	9710      	str	r7, [sp, #64]	; 0x40
 800b700:	eb0c 070e 	add.w	r7, ip, lr
 800b704:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800b708:	3404      	adds	r4, #4
 800b70a:	3004      	adds	r0, #4
 800b70c:	44c8      	add	r8, r9
 800b70e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800b712:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b714:	940a      	str	r4, [sp, #40]	; 0x28
 800b716:	9009      	str	r0, [sp, #36]	; 0x24
 800b718:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b71c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800b71e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b722:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b724:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800b728:	eb07 080e 	add.w	r8, r7, lr
 800b72c:	eb04 0900 	add.w	r9, r4, r0
 800b730:	00f8      	lsls	r0, r7, #3
 800b732:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800b736:	3504      	adds	r5, #4
 800b738:	4607      	mov	r7, r0
 800b73a:	9017      	str	r0, [sp, #92]	; 0x5c
 800b73c:	910b      	str	r1, [sp, #44]	; 0x2c
 800b73e:	4618      	mov	r0, r3
 800b740:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800b744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b746:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800b74a:	18e3      	adds	r3, r4, r3
 800b74c:	9508      	str	r5, [sp, #32]
 800b74e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b750:	910e      	str	r1, [sp, #56]	; 0x38
 800b752:	4621      	mov	r1, r4
 800b754:	eb04 0805 	add.w	r8, r4, r5
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	19e5      	adds	r5, r4, r7
 800b75c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800b760:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b762:	9316      	str	r3, [sp, #88]	; 0x58
 800b764:	190b      	adds	r3, r1, r4
 800b766:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800b768:	9505      	str	r5, [sp, #20]
 800b76a:	9303      	str	r3, [sp, #12]
 800b76c:	f100 0308 	add.w	r3, r0, #8
 800b770:	9707      	str	r7, [sp, #28]
 800b772:	4638      	mov	r0, r7
 800b774:	930f      	str	r3, [sp, #60]	; 0x3c
 800b776:	2301      	movs	r3, #1
 800b778:	9306      	str	r3, [sp, #24]
 800b77a:	9b00      	ldr	r3, [sp, #0]
 800b77c:	ed90 fa00 	vldr	s30, [r0]
 800b780:	edd0 ba01 	vldr	s23, [r0, #4]
 800b784:	9803      	ldr	r0, [sp, #12]
 800b786:	9903      	ldr	r1, [sp, #12]
 800b788:	ed90 ba01 	vldr	s22, [r0, #4]
 800b78c:	9804      	ldr	r0, [sp, #16]
 800b78e:	edd1 ea00 	vldr	s29, [r1]
 800b792:	edd0 aa01 	vldr	s21, [r0, #4]
 800b796:	9805      	ldr	r0, [sp, #20]
 800b798:	9905      	ldr	r1, [sp, #20]
 800b79a:	edd0 7a01 	vldr	s15, [r0, #4]
 800b79e:	ed91 da00 	vldr	s26, [r1]
 800b7a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b7a4:	9c04      	ldr	r4, [sp, #16]
 800b7a6:	edcd 7a01 	vstr	s15, [sp, #4]
 800b7aa:	edd8 7a01 	vldr	s15, [r8, #4]
 800b7ae:	9100      	str	r1, [sp, #0]
 800b7b0:	edd2 fa00 	vldr	s31, [r2]
 800b7b4:	ed94 ea00 	vldr	s28, [r4]
 800b7b8:	ed92 ca01 	vldr	s24, [r2, #4]
 800b7bc:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b7c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b7c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b7c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b7c6:	edd9 da00 	vldr	s27, [r9]
 800b7ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b7cc:	edd8 ca00 	vldr	s25, [r8]
 800b7d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b7d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b7d4:	f8dd c018 	ldr.w	ip, [sp, #24]
 800b7d8:	ed99 aa01 	vldr	s20, [r9, #4]
 800b7dc:	edcd 7a02 	vstr	s15, [sp, #8]
 800b7e0:	9800      	ldr	r0, [sp, #0]
 800b7e2:	e001      	b.n	800b7e8 <arm_radix8_butterfly_f32+0x328>
 800b7e4:	3f3504f3 	.word	0x3f3504f3
 800b7e8:	edd5 3a00 	vldr	s7, [r5]
 800b7ec:	44dc      	add	ip, fp
 800b7ee:	ed91 7a00 	vldr	s14, [r1]
 800b7f2:	edd4 8a00 	vldr	s17, [r4]
 800b7f6:	45e2      	cmp	sl, ip
 800b7f8:	ed57 7a01 	vldr	s15, [r7, #-4]
 800b7fc:	ed90 5a00 	vldr	s10, [r0]
 800b800:	ed56 5a01 	vldr	s11, [r6, #-4]
 800b804:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800b808:	ed92 1a00 	vldr	s2, [r2]
 800b80c:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800b810:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800b814:	ee75 9a25 	vadd.f32	s19, s10, s11
 800b818:	ee31 3a07 	vadd.f32	s6, s2, s14
 800b81c:	ed92 8a01 	vldr	s16, [r2, #4]
 800b820:	ee73 6a84 	vadd.f32	s13, s7, s8
 800b824:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b828:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b82c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b830:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800b834:	ee75 7a84 	vadd.f32	s15, s11, s8
 800b838:	ee31 1a47 	vsub.f32	s2, s2, s14
 800b83c:	ee31 7a85 	vadd.f32	s14, s3, s10
 800b840:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b844:	ee33 3a46 	vsub.f32	s6, s6, s12
 800b848:	ed82 7a00 	vstr	s14, [r2]
 800b84c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800b850:	ed96 6a00 	vldr	s12, [r6]
 800b854:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800b858:	edd5 3a01 	vldr	s7, [r5, #4]
 800b85c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800b860:	ed90 7a01 	vldr	s14, [r0, #4]
 800b864:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800b868:	edde 4a00 	vldr	s9, [lr]
 800b86c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800b870:	ee77 2a46 	vsub.f32	s5, s14, s12
 800b874:	edd1 6a01 	vldr	s13, [r1, #4]
 800b878:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800b87c:	edd7 0a00 	vldr	s1, [r7]
 800b880:	ee77 5a06 	vadd.f32	s11, s14, s12
 800b884:	ed94 7a01 	vldr	s14, [r4, #4]
 800b888:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800b88c:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800b890:	ee78 4a66 	vsub.f32	s9, s16, s13
 800b894:	ee78 3a26 	vadd.f32	s7, s16, s13
 800b898:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800b89c:	ee77 6a20 	vadd.f32	s13, s14, s1
 800b8a0:	ee24 4a09 	vmul.f32	s8, s8, s18
 800b8a4:	ee37 7a60 	vsub.f32	s14, s14, s1
 800b8a8:	ee20 8a09 	vmul.f32	s16, s0, s18
 800b8ac:	ee75 0a86 	vadd.f32	s1, s11, s12
 800b8b0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800b8b4:	ee62 2a89 	vmul.f32	s5, s5, s18
 800b8b8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b8bc:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800b8c0:	ee77 7a62 	vsub.f32	s15, s14, s5
 800b8c4:	ee74 5a88 	vadd.f32	s11, s9, s16
 800b8c8:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800b8cc:	ee77 4a22 	vadd.f32	s9, s14, s5
 800b8d0:	ee71 2a04 	vadd.f32	s5, s2, s8
 800b8d4:	ee31 7a44 	vsub.f32	s14, s2, s8
 800b8d8:	ee30 1a60 	vsub.f32	s2, s0, s1
 800b8dc:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b8e0:	ee33 6a46 	vsub.f32	s12, s6, s12
 800b8e4:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800b8e8:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800b8ec:	ee38 4a68 	vsub.f32	s8, s16, s17
 800b8f0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800b8f4:	ee72 5a25 	vadd.f32	s11, s4, s11
 800b8f8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800b8fc:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800b900:	ee77 2a27 	vadd.f32	s5, s14, s15
 800b904:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b908:	ee78 7a88 	vadd.f32	s15, s17, s16
 800b90c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800b910:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800b914:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800b918:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800b91c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800b920:	ee70 0a20 	vadd.f32	s1, s0, s1
 800b924:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800b928:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800b92c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800b930:	edc2 0a01 	vstr	s1, [r2, #4]
 800b934:	ee38 8a88 	vadd.f32	s16, s17, s16
 800b938:	441a      	add	r2, r3
 800b93a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800b93e:	ee31 5a45 	vsub.f32	s10, s2, s10
 800b942:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800b946:	ed81 8a00 	vstr	s16, [r1]
 800b94a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800b94e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b952:	ed81 5a01 	vstr	s10, [r1, #4]
 800b956:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800b95a:	edcd 3a00 	vstr	s7, [sp]
 800b95e:	ed9d 5a02 	vldr	s10, [sp, #8]
 800b962:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800b966:	eddd 3a01 	vldr	s7, [sp, #4]
 800b96a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800b96e:	ed84 0a00 	vstr	s0, [r4]
 800b972:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b976:	ed84 3a01 	vstr	s6, [r4, #4]
 800b97a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800b97e:	ee23 6a86 	vmul.f32	s12, s7, s12
 800b982:	eddd 3a00 	vldr	s7, [sp]
 800b986:	ee25 5a25 	vmul.f32	s10, s10, s11
 800b98a:	4419      	add	r1, r3
 800b98c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800b990:	441c      	add	r4, r3
 800b992:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800b996:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b99a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800b99e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800b9a2:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800b9a6:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800b9aa:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800b9ae:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800b9b2:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800b9b6:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800b9ba:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800b9be:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800b9c2:	ee38 8a01 	vadd.f32	s16, s16, s2
 800b9c6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800b9ca:	ee39 5a85 	vadd.f32	s10, s19, s10
 800b9ce:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800b9d2:	ed07 8a01 	vstr	s16, [r7, #-4]
 800b9d6:	ee30 0a21 	vadd.f32	s0, s0, s3
 800b9da:	ed87 6a00 	vstr	s12, [r7]
 800b9de:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b9e2:	edc0 0a00 	vstr	s1, [r0]
 800b9e6:	ee33 3a28 	vadd.f32	s6, s6, s17
 800b9ea:	edc0 3a01 	vstr	s7, [r0, #4]
 800b9ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b9f2:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800b9f6:	edce 4a00 	vstr	s9, [lr]
 800b9fa:	4418      	add	r0, r3
 800b9fc:	ed06 0a01 	vstr	s0, [r6, #-4]
 800ba00:	441f      	add	r7, r3
 800ba02:	edc6 2a00 	vstr	s5, [r6]
 800ba06:	449e      	add	lr, r3
 800ba08:	ed85 3a00 	vstr	s6, [r5]
 800ba0c:	441e      	add	r6, r3
 800ba0e:	ed85 7a01 	vstr	s14, [r5, #4]
 800ba12:	441d      	add	r5, r3
 800ba14:	f63f aee8 	bhi.w	800b7e8 <arm_radix8_butterfly_f32+0x328>
 800ba18:	9a06      	ldr	r2, [sp, #24]
 800ba1a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ba1c:	3201      	adds	r2, #1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	9206      	str	r2, [sp, #24]
 800ba22:	9a07      	ldr	r2, [sp, #28]
 800ba24:	4402      	add	r2, r0
 800ba26:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ba28:	9207      	str	r2, [sp, #28]
 800ba2a:	9a03      	ldr	r2, [sp, #12]
 800ba2c:	4402      	add	r2, r0
 800ba2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ba30:	9203      	str	r2, [sp, #12]
 800ba32:	9a04      	ldr	r2, [sp, #16]
 800ba34:	4402      	add	r2, r0
 800ba36:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ba38:	9204      	str	r2, [sp, #16]
 800ba3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba3c:	4491      	add	r9, r2
 800ba3e:	9a05      	ldr	r2, [sp, #20]
 800ba40:	4402      	add	r2, r0
 800ba42:	9205      	str	r2, [sp, #20]
 800ba44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba46:	4490      	add	r8, r2
 800ba48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba4a:	3208      	adds	r2, #8
 800ba4c:	920f      	str	r2, [sp, #60]	; 0x3c
 800ba4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba50:	3208      	adds	r2, #8
 800ba52:	920e      	str	r2, [sp, #56]	; 0x38
 800ba54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba56:	3208      	adds	r2, #8
 800ba58:	920d      	str	r2, [sp, #52]	; 0x34
 800ba5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba5c:	3208      	adds	r2, #8
 800ba5e:	920c      	str	r2, [sp, #48]	; 0x30
 800ba60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba62:	3208      	adds	r2, #8
 800ba64:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba68:	3208      	adds	r2, #8
 800ba6a:	920a      	str	r2, [sp, #40]	; 0x28
 800ba6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba6e:	3208      	adds	r2, #8
 800ba70:	9209      	str	r2, [sp, #36]	; 0x24
 800ba72:	9a08      	ldr	r2, [sp, #32]
 800ba74:	3208      	adds	r2, #8
 800ba76:	9208      	str	r2, [sp, #32]
 800ba78:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ba7a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ba7c:	4622      	mov	r2, r4
 800ba7e:	4288      	cmp	r0, r1
 800ba80:	d005      	beq.n	800ba8e <arm_radix8_butterfly_f32+0x5ce>
 800ba82:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ba84:	4621      	mov	r1, r4
 800ba86:	4401      	add	r1, r0
 800ba88:	9807      	ldr	r0, [sp, #28]
 800ba8a:	9110      	str	r1, [sp, #64]	; 0x40
 800ba8c:	e676      	b.n	800b77c <arm_radix8_butterfly_f32+0x2bc>
 800ba8e:	4683      	mov	fp, r0
 800ba90:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800ba94:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800ba98:	e522      	b.n	800b4e0 <arm_radix8_butterfly_f32+0x20>
 800ba9a:	b01d      	add	sp, #116	; 0x74
 800ba9c:	ecbd 8b10 	vpop	{d8-d15}
 800baa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800baa4 <__errno>:
 800baa4:	4b01      	ldr	r3, [pc, #4]	; (800baac <__errno+0x8>)
 800baa6:	6818      	ldr	r0, [r3, #0]
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	24000010 	.word	0x24000010

0800bab0 <__libc_init_array>:
 800bab0:	b570      	push	{r4, r5, r6, lr}
 800bab2:	4e0d      	ldr	r6, [pc, #52]	; (800bae8 <__libc_init_array+0x38>)
 800bab4:	4c0d      	ldr	r4, [pc, #52]	; (800baec <__libc_init_array+0x3c>)
 800bab6:	1ba4      	subs	r4, r4, r6
 800bab8:	10a4      	asrs	r4, r4, #2
 800baba:	2500      	movs	r5, #0
 800babc:	42a5      	cmp	r5, r4
 800babe:	d109      	bne.n	800bad4 <__libc_init_array+0x24>
 800bac0:	4e0b      	ldr	r6, [pc, #44]	; (800baf0 <__libc_init_array+0x40>)
 800bac2:	4c0c      	ldr	r4, [pc, #48]	; (800baf4 <__libc_init_array+0x44>)
 800bac4:	f000 fb3e 	bl	800c144 <_init>
 800bac8:	1ba4      	subs	r4, r4, r6
 800baca:	10a4      	asrs	r4, r4, #2
 800bacc:	2500      	movs	r5, #0
 800bace:	42a5      	cmp	r5, r4
 800bad0:	d105      	bne.n	800bade <__libc_init_array+0x2e>
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
 800bad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bad8:	4798      	blx	r3
 800bada:	3501      	adds	r5, #1
 800badc:	e7ee      	b.n	800babc <__libc_init_array+0xc>
 800bade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bae2:	4798      	blx	r3
 800bae4:	3501      	adds	r5, #1
 800bae6:	e7f2      	b.n	800bace <__libc_init_array+0x1e>
 800bae8:	08011fa0 	.word	0x08011fa0
 800baec:	08011fa0 	.word	0x08011fa0
 800baf0:	08011fa0 	.word	0x08011fa0
 800baf4:	08011fa4 	.word	0x08011fa4

0800baf8 <malloc>:
 800baf8:	4b02      	ldr	r3, [pc, #8]	; (800bb04 <malloc+0xc>)
 800bafa:	4601      	mov	r1, r0
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	f000 b861 	b.w	800bbc4 <_malloc_r>
 800bb02:	bf00      	nop
 800bb04:	24000010 	.word	0x24000010

0800bb08 <free>:
 800bb08:	4b02      	ldr	r3, [pc, #8]	; (800bb14 <free+0xc>)
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	6818      	ldr	r0, [r3, #0]
 800bb0e:	f000 b80b 	b.w	800bb28 <_free_r>
 800bb12:	bf00      	nop
 800bb14:	24000010 	.word	0x24000010

0800bb18 <memset>:
 800bb18:	4402      	add	r2, r0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d100      	bne.n	800bb22 <memset+0xa>
 800bb20:	4770      	bx	lr
 800bb22:	f803 1b01 	strb.w	r1, [r3], #1
 800bb26:	e7f9      	b.n	800bb1c <memset+0x4>

0800bb28 <_free_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	2900      	cmp	r1, #0
 800bb2e:	d045      	beq.n	800bbbc <_free_r+0x94>
 800bb30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb34:	1f0c      	subs	r4, r1, #4
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	bfb8      	it	lt
 800bb3a:	18e4      	addlt	r4, r4, r3
 800bb3c:	f000 f8ac 	bl	800bc98 <__malloc_lock>
 800bb40:	4a1f      	ldr	r2, [pc, #124]	; (800bbc0 <_free_r+0x98>)
 800bb42:	6813      	ldr	r3, [r2, #0]
 800bb44:	4610      	mov	r0, r2
 800bb46:	b933      	cbnz	r3, 800bb56 <_free_r+0x2e>
 800bb48:	6063      	str	r3, [r4, #4]
 800bb4a:	6014      	str	r4, [r2, #0]
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb52:	f000 b8a2 	b.w	800bc9a <__malloc_unlock>
 800bb56:	42a3      	cmp	r3, r4
 800bb58:	d90c      	bls.n	800bb74 <_free_r+0x4c>
 800bb5a:	6821      	ldr	r1, [r4, #0]
 800bb5c:	1862      	adds	r2, r4, r1
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	bf04      	itt	eq
 800bb62:	681a      	ldreq	r2, [r3, #0]
 800bb64:	685b      	ldreq	r3, [r3, #4]
 800bb66:	6063      	str	r3, [r4, #4]
 800bb68:	bf04      	itt	eq
 800bb6a:	1852      	addeq	r2, r2, r1
 800bb6c:	6022      	streq	r2, [r4, #0]
 800bb6e:	6004      	str	r4, [r0, #0]
 800bb70:	e7ec      	b.n	800bb4c <_free_r+0x24>
 800bb72:	4613      	mov	r3, r2
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	b10a      	cbz	r2, 800bb7c <_free_r+0x54>
 800bb78:	42a2      	cmp	r2, r4
 800bb7a:	d9fa      	bls.n	800bb72 <_free_r+0x4a>
 800bb7c:	6819      	ldr	r1, [r3, #0]
 800bb7e:	1858      	adds	r0, r3, r1
 800bb80:	42a0      	cmp	r0, r4
 800bb82:	d10b      	bne.n	800bb9c <_free_r+0x74>
 800bb84:	6820      	ldr	r0, [r4, #0]
 800bb86:	4401      	add	r1, r0
 800bb88:	1858      	adds	r0, r3, r1
 800bb8a:	4282      	cmp	r2, r0
 800bb8c:	6019      	str	r1, [r3, #0]
 800bb8e:	d1dd      	bne.n	800bb4c <_free_r+0x24>
 800bb90:	6810      	ldr	r0, [r2, #0]
 800bb92:	6852      	ldr	r2, [r2, #4]
 800bb94:	605a      	str	r2, [r3, #4]
 800bb96:	4401      	add	r1, r0
 800bb98:	6019      	str	r1, [r3, #0]
 800bb9a:	e7d7      	b.n	800bb4c <_free_r+0x24>
 800bb9c:	d902      	bls.n	800bba4 <_free_r+0x7c>
 800bb9e:	230c      	movs	r3, #12
 800bba0:	602b      	str	r3, [r5, #0]
 800bba2:	e7d3      	b.n	800bb4c <_free_r+0x24>
 800bba4:	6820      	ldr	r0, [r4, #0]
 800bba6:	1821      	adds	r1, r4, r0
 800bba8:	428a      	cmp	r2, r1
 800bbaa:	bf04      	itt	eq
 800bbac:	6811      	ldreq	r1, [r2, #0]
 800bbae:	6852      	ldreq	r2, [r2, #4]
 800bbb0:	6062      	str	r2, [r4, #4]
 800bbb2:	bf04      	itt	eq
 800bbb4:	1809      	addeq	r1, r1, r0
 800bbb6:	6021      	streq	r1, [r4, #0]
 800bbb8:	605c      	str	r4, [r3, #4]
 800bbba:	e7c7      	b.n	800bb4c <_free_r+0x24>
 800bbbc:	bd38      	pop	{r3, r4, r5, pc}
 800bbbe:	bf00      	nop
 800bbc0:	24014168 	.word	0x24014168

0800bbc4 <_malloc_r>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	1ccd      	adds	r5, r1, #3
 800bbc8:	f025 0503 	bic.w	r5, r5, #3
 800bbcc:	3508      	adds	r5, #8
 800bbce:	2d0c      	cmp	r5, #12
 800bbd0:	bf38      	it	cc
 800bbd2:	250c      	movcc	r5, #12
 800bbd4:	2d00      	cmp	r5, #0
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	db01      	blt.n	800bbde <_malloc_r+0x1a>
 800bbda:	42a9      	cmp	r1, r5
 800bbdc:	d903      	bls.n	800bbe6 <_malloc_r+0x22>
 800bbde:	230c      	movs	r3, #12
 800bbe0:	6033      	str	r3, [r6, #0]
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}
 800bbe6:	f000 f857 	bl	800bc98 <__malloc_lock>
 800bbea:	4a21      	ldr	r2, [pc, #132]	; (800bc70 <_malloc_r+0xac>)
 800bbec:	6814      	ldr	r4, [r2, #0]
 800bbee:	4621      	mov	r1, r4
 800bbf0:	b991      	cbnz	r1, 800bc18 <_malloc_r+0x54>
 800bbf2:	4c20      	ldr	r4, [pc, #128]	; (800bc74 <_malloc_r+0xb0>)
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	b91b      	cbnz	r3, 800bc00 <_malloc_r+0x3c>
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f000 f83d 	bl	800bc78 <_sbrk_r>
 800bbfe:	6020      	str	r0, [r4, #0]
 800bc00:	4629      	mov	r1, r5
 800bc02:	4630      	mov	r0, r6
 800bc04:	f000 f838 	bl	800bc78 <_sbrk_r>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d124      	bne.n	800bc56 <_malloc_r+0x92>
 800bc0c:	230c      	movs	r3, #12
 800bc0e:	6033      	str	r3, [r6, #0]
 800bc10:	4630      	mov	r0, r6
 800bc12:	f000 f842 	bl	800bc9a <__malloc_unlock>
 800bc16:	e7e4      	b.n	800bbe2 <_malloc_r+0x1e>
 800bc18:	680b      	ldr	r3, [r1, #0]
 800bc1a:	1b5b      	subs	r3, r3, r5
 800bc1c:	d418      	bmi.n	800bc50 <_malloc_r+0x8c>
 800bc1e:	2b0b      	cmp	r3, #11
 800bc20:	d90f      	bls.n	800bc42 <_malloc_r+0x7e>
 800bc22:	600b      	str	r3, [r1, #0]
 800bc24:	50cd      	str	r5, [r1, r3]
 800bc26:	18cc      	adds	r4, r1, r3
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f000 f836 	bl	800bc9a <__malloc_unlock>
 800bc2e:	f104 000b 	add.w	r0, r4, #11
 800bc32:	1d23      	adds	r3, r4, #4
 800bc34:	f020 0007 	bic.w	r0, r0, #7
 800bc38:	1ac3      	subs	r3, r0, r3
 800bc3a:	d0d3      	beq.n	800bbe4 <_malloc_r+0x20>
 800bc3c:	425a      	negs	r2, r3
 800bc3e:	50e2      	str	r2, [r4, r3]
 800bc40:	e7d0      	b.n	800bbe4 <_malloc_r+0x20>
 800bc42:	428c      	cmp	r4, r1
 800bc44:	684b      	ldr	r3, [r1, #4]
 800bc46:	bf16      	itet	ne
 800bc48:	6063      	strne	r3, [r4, #4]
 800bc4a:	6013      	streq	r3, [r2, #0]
 800bc4c:	460c      	movne	r4, r1
 800bc4e:	e7eb      	b.n	800bc28 <_malloc_r+0x64>
 800bc50:	460c      	mov	r4, r1
 800bc52:	6849      	ldr	r1, [r1, #4]
 800bc54:	e7cc      	b.n	800bbf0 <_malloc_r+0x2c>
 800bc56:	1cc4      	adds	r4, r0, #3
 800bc58:	f024 0403 	bic.w	r4, r4, #3
 800bc5c:	42a0      	cmp	r0, r4
 800bc5e:	d005      	beq.n	800bc6c <_malloc_r+0xa8>
 800bc60:	1a21      	subs	r1, r4, r0
 800bc62:	4630      	mov	r0, r6
 800bc64:	f000 f808 	bl	800bc78 <_sbrk_r>
 800bc68:	3001      	adds	r0, #1
 800bc6a:	d0cf      	beq.n	800bc0c <_malloc_r+0x48>
 800bc6c:	6025      	str	r5, [r4, #0]
 800bc6e:	e7db      	b.n	800bc28 <_malloc_r+0x64>
 800bc70:	24014168 	.word	0x24014168
 800bc74:	2401416c 	.word	0x2401416c

0800bc78 <_sbrk_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4c06      	ldr	r4, [pc, #24]	; (800bc94 <_sbrk_r+0x1c>)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4605      	mov	r5, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	6023      	str	r3, [r4, #0]
 800bc84:	f7f8 fffe 	bl	8004c84 <_sbrk>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_sbrk_r+0x1a>
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_sbrk_r+0x1a>
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	2401424c 	.word	0x2401424c

0800bc98 <__malloc_lock>:
 800bc98:	4770      	bx	lr

0800bc9a <__malloc_unlock>:
 800bc9a:	4770      	bx	lr

0800bc9c <fmaxf>:
 800bc9c:	b508      	push	{r3, lr}
 800bc9e:	ed2d 8b02 	vpush	{d8}
 800bca2:	eeb0 8a40 	vmov.f32	s16, s0
 800bca6:	eef0 8a60 	vmov.f32	s17, s1
 800bcaa:	f000 f82d 	bl	800bd08 <__fpclassifyf>
 800bcae:	b148      	cbz	r0, 800bcc4 <fmaxf+0x28>
 800bcb0:	eeb0 0a68 	vmov.f32	s0, s17
 800bcb4:	f000 f828 	bl	800bd08 <__fpclassifyf>
 800bcb8:	b130      	cbz	r0, 800bcc8 <fmaxf+0x2c>
 800bcba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc2:	dc01      	bgt.n	800bcc8 <fmaxf+0x2c>
 800bcc4:	eeb0 8a68 	vmov.f32	s16, s17
 800bcc8:	eeb0 0a48 	vmov.f32	s0, s16
 800bccc:	ecbd 8b02 	vpop	{d8}
 800bcd0:	bd08      	pop	{r3, pc}

0800bcd2 <fminf>:
 800bcd2:	b508      	push	{r3, lr}
 800bcd4:	ed2d 8b02 	vpush	{d8}
 800bcd8:	eeb0 8a40 	vmov.f32	s16, s0
 800bcdc:	eef0 8a60 	vmov.f32	s17, s1
 800bce0:	f000 f812 	bl	800bd08 <__fpclassifyf>
 800bce4:	b148      	cbz	r0, 800bcfa <fminf+0x28>
 800bce6:	eeb0 0a68 	vmov.f32	s0, s17
 800bcea:	f000 f80d 	bl	800bd08 <__fpclassifyf>
 800bcee:	b130      	cbz	r0, 800bcfe <fminf+0x2c>
 800bcf0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bcf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf8:	d401      	bmi.n	800bcfe <fminf+0x2c>
 800bcfa:	eeb0 8a68 	vmov.f32	s16, s17
 800bcfe:	eeb0 0a48 	vmov.f32	s0, s16
 800bd02:	ecbd 8b02 	vpop	{d8}
 800bd06:	bd08      	pop	{r3, pc}

0800bd08 <__fpclassifyf>:
 800bd08:	ee10 3a10 	vmov	r3, s0
 800bd0c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800bd10:	d00d      	beq.n	800bd2e <__fpclassifyf+0x26>
 800bd12:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800bd16:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800bd1a:	d30a      	bcc.n	800bd32 <__fpclassifyf+0x2a>
 800bd1c:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <__fpclassifyf+0x34>)
 800bd1e:	1e42      	subs	r2, r0, #1
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d908      	bls.n	800bd36 <__fpclassifyf+0x2e>
 800bd24:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800bd28:	4258      	negs	r0, r3
 800bd2a:	4158      	adcs	r0, r3
 800bd2c:	4770      	bx	lr
 800bd2e:	2002      	movs	r0, #2
 800bd30:	4770      	bx	lr
 800bd32:	2004      	movs	r0, #4
 800bd34:	4770      	bx	lr
 800bd36:	2003      	movs	r0, #3
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	007ffffe 	.word	0x007ffffe

0800bd40 <roundf>:
 800bd40:	ee10 0a10 	vmov	r0, s0
 800bd44:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bd48:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800bd4c:	2a16      	cmp	r2, #22
 800bd4e:	dc15      	bgt.n	800bd7c <roundf+0x3c>
 800bd50:	2a00      	cmp	r2, #0
 800bd52:	da08      	bge.n	800bd66 <roundf+0x26>
 800bd54:	3201      	adds	r2, #1
 800bd56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800bd5a:	d101      	bne.n	800bd60 <roundf+0x20>
 800bd5c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800bd60:	ee00 3a10 	vmov	s0, r3
 800bd64:	4770      	bx	lr
 800bd66:	4908      	ldr	r1, [pc, #32]	; (800bd88 <roundf+0x48>)
 800bd68:	4111      	asrs	r1, r2
 800bd6a:	4208      	tst	r0, r1
 800bd6c:	d0fa      	beq.n	800bd64 <roundf+0x24>
 800bd6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bd72:	4113      	asrs	r3, r2
 800bd74:	4403      	add	r3, r0
 800bd76:	ea23 0301 	bic.w	r3, r3, r1
 800bd7a:	e7f1      	b.n	800bd60 <roundf+0x20>
 800bd7c:	2a80      	cmp	r2, #128	; 0x80
 800bd7e:	d1f1      	bne.n	800bd64 <roundf+0x24>
 800bd80:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	007fffff 	.word	0x007fffff

0800bd8c <atan2f>:
 800bd8c:	f000 b850 	b.w	800be30 <__ieee754_atan2f>

0800bd90 <sqrtf>:
 800bd90:	b500      	push	{lr}
 800bd92:	ed2d 8b02 	vpush	{d8}
 800bd96:	b08b      	sub	sp, #44	; 0x2c
 800bd98:	eeb0 8a40 	vmov.f32	s16, s0
 800bd9c:	f000 f8f2 	bl	800bf84 <__ieee754_sqrtf>
 800bda0:	4b21      	ldr	r3, [pc, #132]	; (800be28 <sqrtf+0x98>)
 800bda2:	f993 3000 	ldrsb.w	r3, [r3]
 800bda6:	1c5a      	adds	r2, r3, #1
 800bda8:	d028      	beq.n	800bdfc <sqrtf+0x6c>
 800bdaa:	eeb4 8a48 	vcmp.f32	s16, s16
 800bdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb2:	d623      	bvs.n	800bdfc <sqrtf+0x6c>
 800bdb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdbc:	d51e      	bpl.n	800bdfc <sqrtf+0x6c>
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800bdc4:	9200      	str	r2, [sp, #0]
 800bdc6:	4a19      	ldr	r2, [pc, #100]	; (800be2c <sqrtf+0x9c>)
 800bdc8:	9201      	str	r2, [sp, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	9208      	str	r2, [sp, #32]
 800bdce:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bdd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bdd6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800be20 <sqrtf+0x90>
 800bdda:	b9a3      	cbnz	r3, 800be06 <sqrtf+0x76>
 800bddc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bde0:	4668      	mov	r0, sp
 800bde2:	f000 f8d2 	bl	800bf8a <matherr>
 800bde6:	b1a0      	cbz	r0, 800be12 <sqrtf+0x82>
 800bde8:	9b08      	ldr	r3, [sp, #32]
 800bdea:	b11b      	cbz	r3, 800bdf4 <sqrtf+0x64>
 800bdec:	f7ff fe5a 	bl	800baa4 <__errno>
 800bdf0:	9b08      	ldr	r3, [sp, #32]
 800bdf2:	6003      	str	r3, [r0, #0]
 800bdf4:	ed9d 0b06 	vldr	d0, [sp, #24]
 800bdf8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bdfc:	b00b      	add	sp, #44	; 0x2c
 800bdfe:	ecbd 8b02 	vpop	{d8}
 800be02:	f85d fb04 	ldr.w	pc, [sp], #4
 800be06:	2b02      	cmp	r3, #2
 800be08:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800be0c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800be10:	d1e6      	bne.n	800bde0 <sqrtf+0x50>
 800be12:	f7ff fe47 	bl	800baa4 <__errno>
 800be16:	2321      	movs	r3, #33	; 0x21
 800be18:	6003      	str	r3, [r0, #0]
 800be1a:	e7e5      	b.n	800bde8 <sqrtf+0x58>
 800be1c:	f3af 8000 	nop.w
	...
 800be28:	24000074 	.word	0x24000074
 800be2c:	08011f70 	.word	0x08011f70

0800be30 <__ieee754_atan2f>:
 800be30:	ee10 2a90 	vmov	r2, s1
 800be34:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800be38:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800be3c:	b510      	push	{r4, lr}
 800be3e:	eef0 7a40 	vmov.f32	s15, s0
 800be42:	dc06      	bgt.n	800be52 <__ieee754_atan2f+0x22>
 800be44:	ee10 0a10 	vmov	r0, s0
 800be48:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800be4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800be50:	dd04      	ble.n	800be5c <__ieee754_atan2f+0x2c>
 800be52:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800be56:	eeb0 0a67 	vmov.f32	s0, s15
 800be5a:	bd10      	pop	{r4, pc}
 800be5c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800be60:	d103      	bne.n	800be6a <__ieee754_atan2f+0x3a>
 800be62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be66:	f000 b893 	b.w	800bf90 <atanf>
 800be6a:	1794      	asrs	r4, r2, #30
 800be6c:	f004 0402 	and.w	r4, r4, #2
 800be70:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800be74:	b93b      	cbnz	r3, 800be86 <__ieee754_atan2f+0x56>
 800be76:	2c02      	cmp	r4, #2
 800be78:	d06b      	beq.n	800bf52 <__ieee754_atan2f+0x122>
 800be7a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800bf58 <__ieee754_atan2f+0x128>
 800be7e:	2c03      	cmp	r4, #3
 800be80:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800be84:	e7e7      	b.n	800be56 <__ieee754_atan2f+0x26>
 800be86:	b939      	cbnz	r1, 800be98 <__ieee754_atan2f+0x68>
 800be88:	eddf 7a34 	vldr	s15, [pc, #208]	; 800bf5c <__ieee754_atan2f+0x12c>
 800be8c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800bf60 <__ieee754_atan2f+0x130>
 800be90:	2800      	cmp	r0, #0
 800be92:	fe67 7a87 	vselge.f32	s15, s15, s14
 800be96:	e7de      	b.n	800be56 <__ieee754_atan2f+0x26>
 800be98:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800be9c:	d121      	bne.n	800bee2 <__ieee754_atan2f+0xb2>
 800be9e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bea2:	d111      	bne.n	800bec8 <__ieee754_atan2f+0x98>
 800bea4:	2c02      	cmp	r4, #2
 800bea6:	d009      	beq.n	800bebc <__ieee754_atan2f+0x8c>
 800bea8:	2c03      	cmp	r4, #3
 800beaa:	d00a      	beq.n	800bec2 <__ieee754_atan2f+0x92>
 800beac:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800bf64 <__ieee754_atan2f+0x134>
 800beb0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800bf68 <__ieee754_atan2f+0x138>
 800beb4:	2c01      	cmp	r4, #1
 800beb6:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800beba:	e7cc      	b.n	800be56 <__ieee754_atan2f+0x26>
 800bebc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bf6c <__ieee754_atan2f+0x13c>
 800bec0:	e7c9      	b.n	800be56 <__ieee754_atan2f+0x26>
 800bec2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bf70 <__ieee754_atan2f+0x140>
 800bec6:	e7c6      	b.n	800be56 <__ieee754_atan2f+0x26>
 800bec8:	2c02      	cmp	r4, #2
 800beca:	d042      	beq.n	800bf52 <__ieee754_atan2f+0x122>
 800becc:	2c03      	cmp	r4, #3
 800bece:	d005      	beq.n	800bedc <__ieee754_atan2f+0xac>
 800bed0:	2c01      	cmp	r4, #1
 800bed2:	eddf 7a28 	vldr	s15, [pc, #160]	; 800bf74 <__ieee754_atan2f+0x144>
 800bed6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800bf78 <__ieee754_atan2f+0x148>
 800beda:	e7ec      	b.n	800beb6 <__ieee754_atan2f+0x86>
 800bedc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800bf58 <__ieee754_atan2f+0x128>
 800bee0:	e7b9      	b.n	800be56 <__ieee754_atan2f+0x26>
 800bee2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bee6:	d0cf      	beq.n	800be88 <__ieee754_atan2f+0x58>
 800bee8:	1a5b      	subs	r3, r3, r1
 800beea:	15db      	asrs	r3, r3, #23
 800beec:	2b3c      	cmp	r3, #60	; 0x3c
 800beee:	dc1a      	bgt.n	800bf26 <__ieee754_atan2f+0xf6>
 800bef0:	2a00      	cmp	r2, #0
 800bef2:	da01      	bge.n	800bef8 <__ieee754_atan2f+0xc8>
 800bef4:	333c      	adds	r3, #60	; 0x3c
 800bef6:	db19      	blt.n	800bf2c <__ieee754_atan2f+0xfc>
 800bef8:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800befc:	f000 f91a 	bl	800c134 <fabsf>
 800bf00:	f000 f846 	bl	800bf90 <atanf>
 800bf04:	eef0 7a40 	vmov.f32	s15, s0
 800bf08:	2c01      	cmp	r4, #1
 800bf0a:	d012      	beq.n	800bf32 <__ieee754_atan2f+0x102>
 800bf0c:	2c02      	cmp	r4, #2
 800bf0e:	d017      	beq.n	800bf40 <__ieee754_atan2f+0x110>
 800bf10:	2c00      	cmp	r4, #0
 800bf12:	d0a0      	beq.n	800be56 <__ieee754_atan2f+0x26>
 800bf14:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800bf7c <__ieee754_atan2f+0x14c>
 800bf18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf1c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800bf80 <__ieee754_atan2f+0x150>
 800bf20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf24:	e797      	b.n	800be56 <__ieee754_atan2f+0x26>
 800bf26:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800bf5c <__ieee754_atan2f+0x12c>
 800bf2a:	e7ed      	b.n	800bf08 <__ieee754_atan2f+0xd8>
 800bf2c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bf78 <__ieee754_atan2f+0x148>
 800bf30:	e7ea      	b.n	800bf08 <__ieee754_atan2f+0xd8>
 800bf32:	ee17 3a90 	vmov	r3, s15
 800bf36:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	e78a      	b.n	800be56 <__ieee754_atan2f+0x26>
 800bf40:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800bf7c <__ieee754_atan2f+0x14c>
 800bf44:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf48:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800bf80 <__ieee754_atan2f+0x150>
 800bf4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf50:	e781      	b.n	800be56 <__ieee754_atan2f+0x26>
 800bf52:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800bf80 <__ieee754_atan2f+0x150>
 800bf56:	e77e      	b.n	800be56 <__ieee754_atan2f+0x26>
 800bf58:	c0490fdb 	.word	0xc0490fdb
 800bf5c:	3fc90fdb 	.word	0x3fc90fdb
 800bf60:	bfc90fdb 	.word	0xbfc90fdb
 800bf64:	bf490fdb 	.word	0xbf490fdb
 800bf68:	3f490fdb 	.word	0x3f490fdb
 800bf6c:	4016cbe4 	.word	0x4016cbe4
 800bf70:	c016cbe4 	.word	0xc016cbe4
 800bf74:	80000000 	.word	0x80000000
 800bf78:	00000000 	.word	0x00000000
 800bf7c:	33bbbd2e 	.word	0x33bbbd2e
 800bf80:	40490fdb 	.word	0x40490fdb

0800bf84 <__ieee754_sqrtf>:
 800bf84:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bf88:	4770      	bx	lr

0800bf8a <matherr>:
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	4770      	bx	lr
	...

0800bf90 <atanf>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	ee10 5a10 	vmov	r5, s0
 800bf96:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bf9a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800bf9e:	eef0 7a40 	vmov.f32	s15, s0
 800bfa2:	db0f      	blt.n	800bfc4 <atanf+0x34>
 800bfa4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800bfa8:	dd04      	ble.n	800bfb4 <atanf+0x24>
 800bfaa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bfae:	eeb0 0a67 	vmov.f32	s0, s15
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c0e8 <atanf+0x158>
 800bfb8:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800c0ec <atanf+0x15c>
 800bfbc:	2d00      	cmp	r5, #0
 800bfbe:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800bfc2:	e7f4      	b.n	800bfae <atanf+0x1e>
 800bfc4:	4b4a      	ldr	r3, [pc, #296]	; (800c0f0 <atanf+0x160>)
 800bfc6:	429c      	cmp	r4, r3
 800bfc8:	dc10      	bgt.n	800bfec <atanf+0x5c>
 800bfca:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800bfce:	da0a      	bge.n	800bfe6 <atanf+0x56>
 800bfd0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800c0f4 <atanf+0x164>
 800bfd4:	ee30 7a07 	vadd.f32	s14, s0, s14
 800bfd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfdc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bfe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe4:	dce3      	bgt.n	800bfae <atanf+0x1e>
 800bfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfea:	e013      	b.n	800c014 <atanf+0x84>
 800bfec:	f000 f8a2 	bl	800c134 <fabsf>
 800bff0:	4b41      	ldr	r3, [pc, #260]	; (800c0f8 <atanf+0x168>)
 800bff2:	429c      	cmp	r4, r3
 800bff4:	dc4f      	bgt.n	800c096 <atanf+0x106>
 800bff6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800bffa:	429c      	cmp	r4, r3
 800bffc:	dc41      	bgt.n	800c082 <atanf+0xf2>
 800bffe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c002:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c006:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c00a:	2300      	movs	r3, #0
 800c00c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c010:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c014:	1c5a      	adds	r2, r3, #1
 800c016:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c01a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c0fc <atanf+0x16c>
 800c01e:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c100 <atanf+0x170>
 800c022:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c104 <atanf+0x174>
 800c026:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c02a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c02e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c108 <atanf+0x178>
 800c032:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c036:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c10c <atanf+0x17c>
 800c03a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c03e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c110 <atanf+0x180>
 800c042:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c046:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c114 <atanf+0x184>
 800c04a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c04e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c118 <atanf+0x188>
 800c052:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c056:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c11c <atanf+0x18c>
 800c05a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c05e:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800c120 <atanf+0x190>
 800c062:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c066:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800c124 <atanf+0x194>
 800c06a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c06e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c072:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c07a:	d121      	bne.n	800c0c0 <atanf+0x130>
 800c07c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c080:	e795      	b.n	800bfae <atanf+0x1e>
 800c082:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c086:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c08a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c08e:	2301      	movs	r3, #1
 800c090:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c094:	e7be      	b.n	800c014 <atanf+0x84>
 800c096:	4b24      	ldr	r3, [pc, #144]	; (800c128 <atanf+0x198>)
 800c098:	429c      	cmp	r4, r3
 800c09a:	dc0b      	bgt.n	800c0b4 <atanf+0x124>
 800c09c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c0a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c0ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0b2:	e7af      	b.n	800c014 <atanf+0x84>
 800c0b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c0b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c0bc:	2303      	movs	r3, #3
 800c0be:	e7a9      	b.n	800c014 <atanf+0x84>
 800c0c0:	4a1a      	ldr	r2, [pc, #104]	; (800c12c <atanf+0x19c>)
 800c0c2:	491b      	ldr	r1, [pc, #108]	; (800c130 <atanf+0x1a0>)
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	441a      	add	r2, r3
 800c0c8:	440b      	add	r3, r1
 800c0ca:	edd3 6a00 	vldr	s13, [r3]
 800c0ce:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c0d2:	2d00      	cmp	r5, #0
 800c0d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0d8:	ed92 7a00 	vldr	s14, [r2]
 800c0dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0e0:	bfb8      	it	lt
 800c0e2:	eef1 7a67 	vneglt.f32	s15, s15
 800c0e6:	e762      	b.n	800bfae <atanf+0x1e>
 800c0e8:	bfc90fdb 	.word	0xbfc90fdb
 800c0ec:	3fc90fdb 	.word	0x3fc90fdb
 800c0f0:	3edfffff 	.word	0x3edfffff
 800c0f4:	7149f2ca 	.word	0x7149f2ca
 800c0f8:	3f97ffff 	.word	0x3f97ffff
 800c0fc:	3c8569d7 	.word	0x3c8569d7
 800c100:	3d4bda59 	.word	0x3d4bda59
 800c104:	bd6ef16b 	.word	0xbd6ef16b
 800c108:	3d886b35 	.word	0x3d886b35
 800c10c:	3dba2e6e 	.word	0x3dba2e6e
 800c110:	3e124925 	.word	0x3e124925
 800c114:	3eaaaaab 	.word	0x3eaaaaab
 800c118:	bd15a221 	.word	0xbd15a221
 800c11c:	bd9d8795 	.word	0xbd9d8795
 800c120:	bde38e38 	.word	0xbde38e38
 800c124:	be4ccccd 	.word	0xbe4ccccd
 800c128:	401bffff 	.word	0x401bffff
 800c12c:	08011f78 	.word	0x08011f78
 800c130:	08011f88 	.word	0x08011f88

0800c134 <fabsf>:
 800c134:	ee10 3a10 	vmov	r3, s0
 800c138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c13c:	ee00 3a10 	vmov	s0, r3
 800c140:	4770      	bx	lr
	...

0800c144 <_init>:
 800c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c146:	bf00      	nop
 800c148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c14a:	bc08      	pop	{r3}
 800c14c:	469e      	mov	lr, r3
 800c14e:	4770      	bx	lr

0800c150 <_fini>:
 800c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c152:	bf00      	nop
 800c154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c156:	bc08      	pop	{r3}
 800c158:	469e      	mov	lr, r3
 800c15a:	4770      	bx	lr
