
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031b8  0800ac58  0800ac58  0001ac58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800de10  0800de10  0001de10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800de18  0800de18  0001de18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800de1c  0800de1c  0001de1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  0800de20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004548  200001e8  0800e008  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004730  0800e008  00024730  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aac0  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000049ad  00000000  00000000  0004acd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016f8  00000000  00000000  0004f688  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001540  00000000  00000000  00050d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c1d5  00000000  00000000  000522c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001768e  00000000  00000000  0008e495  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001868d8  00000000  00000000  000a5b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  0022c3fb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000659c  00000000  00000000  0022c4e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000035a5  00000000  00000000  00232a80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ac3c 	.word	0x0800ac3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	0800ac3c 	.word	0x0800ac3c

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <SystemInit+0xc4>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <SystemInit+0xc4>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <SystemInit+0xc4>)
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SystemInit+0xc4>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemInit+0xc8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a28      	ldr	r2, [pc, #160]	; (8000818 <SystemInit+0xc8>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <SystemInit+0xc8>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemInit+0xc8>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4924      	ldr	r1, [pc, #144]	; (8000818 <SystemInit+0xc8>)
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemInit+0xcc>)
 800078a:	4013      	ands	r3, r2
 800078c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemInit+0xc8>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <SystemInit+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemInit+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <SystemInit+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <SystemInit+0xc8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <SystemInit+0xc8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <SystemInit+0xc8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <SystemInit+0xc8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <SystemInit+0xc8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <SystemInit+0xc8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <SystemInit+0xc8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <SystemInit+0xc8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <SystemInit+0xc8>)
 80007d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <SystemInit+0xc8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <SystemInit+0xd0>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <SystemInit+0xd0>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <SystemInit+0xd4>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <SystemInit+0xd8>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007fa:	d202      	bcs.n	8000802 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <SystemInit+0xdc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SystemInit+0xc4>)
 8000804:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000808:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	58024400 	.word	0x58024400
 800081c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000820:	580000c0 	.word	0x580000c0
 8000824:	5c001000 	.word	0x5c001000
 8000828:	ffff0000 	.word	0xffff0000
 800082c:	51008108 	.word	0x51008108

08000830 <inst_absolute>:

#include "functions.h"

// Preprocessing

void inst_absolute(float32_t src[], float32_t dst[], uint32_t *length){
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	arm_abs_f32(&src[0], &dst[0], *length);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f007 fe91 	bl	800856c <arm_abs_f32>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <mean>:
}
void inst_centralized_normalized_absolute(float32_t src[], float32_t dst[], uint32_t *length){

}

void mean(float32_t src[], float32_t *dst, uint32_t *length) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
	arm_mean_f32(&src[0], *length, dst);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	4619      	mov	r1, r3
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f007 f916 	bl	8007a98 <arm_mean_f32>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <mean_of_squared>:

void mean_of_squared(float32_t src[], float32_t *dst, uint32_t *length) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	float32_t result;
	arm_power_f32(&src[0], *length, &result);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f107 0214 	add.w	r2, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f007 f8ca 	bl	8007a24 <arm_power_f32>
	*dst = result / (float32_t) *length;
 8000890:	edd7 6a05 	vldr	s13, [r7, #20]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	ee07 3a90 	vmov	s15, r3
 800089c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	edc3 7a00 	vstr	s15, [r3]
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <std_dev>:

void std_dev(float32_t src[], float32_t *dst, uint32_t *length) {
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
	arm_std_f32(&src[0], *length, dst);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	4619      	mov	r1, r3
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f007 f834 	bl	8007934 <arm_std_f32>
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <variance>:

void variance(float32_t src[], float32_t *dst, uint32_t *length) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
	arm_var_f32(&src[0], *length, dst);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	4619      	mov	r1, r3
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f006 ff9b 	bl	8007824 <arm_var_f32>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <gmax>:

void gmax(float32_t src[], uint32_t *length, float32_t *maxValue, uint32_t *maxValueIndex){
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	4c5b      	ldr	r4, [pc, #364]	; (8000a70 <gmax+0x178>)
 8000904:	f242 0c28 	movw	ip, #8232	; 0x2028
 8000908:	44bc      	add	ip, r7
 800090a:	4464      	add	r4, ip
 800090c:	6020      	str	r0, [r4, #0]
 800090e:	4859      	ldr	r0, [pc, #356]	; (8000a74 <gmax+0x17c>)
 8000910:	f242 0428 	movw	r4, #8232	; 0x2028
 8000914:	443c      	add	r4, r7
 8000916:	4420      	add	r0, r4
 8000918:	6001      	str	r1, [r0, #0]
 800091a:	4957      	ldr	r1, [pc, #348]	; (8000a78 <gmax+0x180>)
 800091c:	f242 0028 	movw	r0, #8232	; 0x2028
 8000920:	4438      	add	r0, r7
 8000922:	4401      	add	r1, r0
 8000924:	600a      	str	r2, [r1, #0]
 8000926:	4a55      	ldr	r2, [pc, #340]	; (8000a7c <gmax+0x184>)
 8000928:	f242 0128 	movw	r1, #8232	; 0x2028
 800092c:	4439      	add	r1, r7
 800092e:	440a      	add	r2, r1
 8000930:	6013      	str	r3, [r2, #0]
	uint32_t fftSize = 1024;
 8000932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000936:	f242 0220 	movw	r2, #8224	; 0x2020
 800093a:	443a      	add	r2, r7
 800093c:	6013      	str	r3, [r2, #0]
	uint32_t ifftFlag = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f242 021c 	movw	r2, #8220	; 0x201c
 8000944:	443a      	add	r2, r7
 8000946:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	f242 0218 	movw	r2, #8216	; 0x2018
 800094e:	443a      	add	r2, r7
 8000950:	6013      	str	r3, [r2, #0]
	float32_t *result_mag;
	float32_t result_fft[2048] = {0};
 8000952:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <gmax+0x188>)
 8000954:	f242 0228 	movw	r2, #8232	; 0x2028
 8000958:	443a      	add	r2, r7
 800095a:	4413      	add	r3, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	461a      	mov	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f008 f963 	bl	8008c30 <memset>

	result_mag = (float32_t *) malloc(fftSize/2 * sizeof(float32_t));
 800096a:	f242 0320 	movw	r3, #8224	; 0x2020
 800096e:	443b      	add	r3, r7
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	085b      	lsrs	r3, r3, #1
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f008 f94a 	bl	8008c10 <malloc>
 800097c:	4603      	mov	r3, r0
 800097e:	f242 0214 	movw	r2, #8212	; 0x2014
 8000982:	443a      	add	r2, r7
 8000984:	6013      	str	r3, [r2, #0]

	for(int i = 0; i < 2048; i++){
 8000986:	2300      	movs	r3, #0
 8000988:	f242 0224 	movw	r2, #8228	; 0x2024
 800098c:	443a      	add	r2, r7
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e021      	b.n	80009d6 <gmax+0xde>
		result_fft[i] = src[i];
 8000992:	f242 0324 	movw	r3, #8228	; 0x2024
 8000996:	443b      	add	r3, r7
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	009a      	lsls	r2, r3, #2
 800099c:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <gmax+0x178>)
 800099e:	f242 0128 	movw	r1, #8232	; 0x2028
 80009a2:	4439      	add	r1, r7
 80009a4:	440b      	add	r3, r1
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <gmax+0x188>)
 80009ae:	f242 0128 	movw	r1, #8232	; 0x2028
 80009b2:	4439      	add	r1, r7
 80009b4:	440b      	add	r3, r1
 80009b6:	f242 0124 	movw	r1, #8228	; 0x2024
 80009ba:	4439      	add	r1, r7
 80009bc:	6809      	ldr	r1, [r1, #0]
 80009be:	0089      	lsls	r1, r1, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2048; i++){
 80009c4:	f242 0324 	movw	r3, #8228	; 0x2024
 80009c8:	443b      	add	r3, r7
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	f242 0224 	movw	r2, #8228	; 0x2024
 80009d2:	443a      	add	r2, r7
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	f242 0324 	movw	r3, #8228	; 0x2024
 80009da:	443b      	add	r3, r7
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e2:	dbd6      	blt.n	8000992 <gmax+0x9a>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len1024, &result_fft[0], ifftFlag, doBitReverse);
 80009e4:	f242 031c 	movw	r3, #8220	; 0x201c
 80009e8:	443b      	add	r3, r7
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	f242 0318 	movw	r3, #8216	; 0x2018
 80009f2:	443b      	add	r3, r7
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4921      	ldr	r1, [pc, #132]	; (8000a80 <gmax+0x188>)
 80009fa:	f242 0028 	movw	r0, #8232	; 0x2028
 80009fe:	4438      	add	r0, r7
 8000a00:	4401      	add	r1, r0
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <gmax+0x18c>)
 8000a04:	f007 fc0c 	bl	8008220 <arm_cfft_f32>
	arm_cmplx_mag_f32(result_fft, result_mag, fftSize/2);
 8000a08:	f242 0320 	movw	r3, #8224	; 0x2020
 8000a0c:	443b      	add	r3, r7
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	085a      	lsrs	r2, r3, #1
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <gmax+0x188>)
 8000a14:	f242 0128 	movw	r1, #8232	; 0x2028
 8000a18:	4439      	add	r1, r7
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f242 0114 	movw	r1, #8212	; 0x2014
 8000a20:	4439      	add	r1, r7
 8000a22:	6809      	ldr	r1, [r1, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f007 fc73 	bl	8008310 <arm_cmplx_mag_f32>
	arm_max_f32(result_mag, fftSize/2, maxValue, maxValueIndex);
 8000a2a:	f242 0320 	movw	r3, #8224	; 0x2020
 8000a2e:	443b      	add	r3, r7
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	0859      	lsrs	r1, r3, #1
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <gmax+0x184>)
 8000a36:	f242 0228 	movw	r2, #8232	; 0x2028
 8000a3a:	443a      	add	r2, r7
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <gmax+0x180>)
 8000a40:	f242 0028 	movw	r0, #8232	; 0x2028
 8000a44:	4438      	add	r0, r7
 8000a46:	4402      	add	r2, r0
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	f242 0014 	movw	r0, #8212	; 0x2014
 8000a50:	4438      	add	r0, r7
 8000a52:	6800      	ldr	r0, [r0, #0]
 8000a54:	f007 f856 	bl	8007b04 <arm_max_f32>
	free(result_mag);
 8000a58:	f242 0314 	movw	r3, #8212	; 0x2014
 8000a5c:	443b      	add	r3, r7
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	f008 f8de 	bl	8008c20 <free>
}
 8000a64:	bf00      	nop
 8000a66:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000a6a:	372c      	adds	r7, #44	; 0x2c
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	ffffdfe4 	.word	0xffffdfe4
 8000a74:	ffffdfe0 	.word	0xffffdfe0
 8000a78:	ffffdfdc 	.word	0xffffdfdc
 8000a7c:	ffffdfd8 	.word	0xffffdfd8
 8000a80:	ffffdfec 	.word	0xffffdfec
 8000a84:	0800ad88 	.word	0x0800ad88

08000a88 <central_moment>:

void central_moment(float32_t src[], uint32_t *length, uint32_t *power, float32_t *dst){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	float32_t m = 0.0f;
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
	float32_t *sub, *mult;
	sub = (float32_t *) malloc((*length) * sizeof(float32_t));
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 f8b4 	bl	8008c10 <malloc>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	61bb      	str	r3, [r7, #24]
	mult = (float32_t *) malloc((*length) * sizeof(float32_t));
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f008 f8ac 	bl	8008c10 <malloc>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	617b      	str	r3, [r7, #20]
	//float32_t parcial[2048] = {0};
	//float32_t mult[2048] = {0};
	arm_mean_f32(src, *length, &m);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f006 ffe6 	bl	8007a98 <arm_mean_f32>
	for(uint32_t i = 0; i < (*length); i = i + 4){
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	e048      	b.n	8000b64 <central_moment+0xdc>
		sub[i+0] = (src[i+0] - m);
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	ed93 7a00 	vldr	s14, [r3]
 8000ade:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	4413      	add	r3, r2
 8000aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aee:	edc3 7a00 	vstr	s15, [r3]
		sub[i+1] = (src[i+1] - m);
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	ed93 7a00 	vldr	s14, [r3]
 8000b00:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	3301      	adds	r3, #1
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b12:	edc3 7a00 	vstr	s15, [r3]
		sub[i+2] = (src[i+2] - m);
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3302      	adds	r3, #2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	ed93 7a00 	vldr	s14, [r3]
 8000b24:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4413      	add	r3, r2
 8000b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b36:	edc3 7a00 	vstr	s15, [r3]
		sub[i+3] = (src[i+3] - m);
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3303      	adds	r3, #3
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	ed93 7a00 	vldr	s14, [r3]
 8000b48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	3303      	adds	r3, #3
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4413      	add	r3, r2
 8000b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b5a:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < (*length); i = i + 4){
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	69fa      	ldr	r2, [r7, #28]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d3b1      	bcc.n	8000ad2 <central_moment+0x4a>
	}
	arm_mult_f32(sub, sub, mult, *length);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	69b9      	ldr	r1, [r7, #24]
 8000b76:	69b8      	ldr	r0, [r7, #24]
 8000b78:	f007 fcb2 	bl	80084e0 <arm_mult_f32>
	arm_mean_f32(mult, *length, dst);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	6978      	ldr	r0, [r7, #20]
 8000b86:	f006 ff87 	bl	8007a98 <arm_mean_f32>
	free(sub);
 8000b8a:	69b8      	ldr	r0, [r7, #24]
 8000b8c:	f008 f848 	bl	8008c20 <free>
	free(mult);
 8000b90:	6978      	ldr	r0, [r7, #20]
 8000b92:	f008 f845 	bl	8008c20 <free>
}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a41      	ldr	r2, [pc, #260]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b3f      	ldr	r3, [pc, #252]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd4:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a3a      	ldr	r2, [pc, #232]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c10:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a23      	ldr	r2, [pc, #140]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c70:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <MX_GPIO_Init+0x128>)
 8000c72:	f001 fdcf 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4814      	ldr	r0, [pc, #80]	; (8000ccc <MX_GPIO_Init+0x12c>)
 8000c7c:	f001 fdca 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c80:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <MX_GPIO_Init+0x128>)
 8000c9a:	f001 fbf3 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_GPIO_Init+0x12c>)
 8000cb6:	f001 fbe5 	bl	8002484 <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020400 	.word	0x58020400
 8000ccc:	58021000 	.word	0x58021000

08000cd0 <reset_buffer>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void reset_buffer(char *buffer){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 1; i < 50; i++){
 8000cd8:	2301      	movs	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	e007      	b.n	8000cee <reset_buffer+0x1e>
		buffer[i] = '\0';
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 1; i < 50; i++){
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2b31      	cmp	r3, #49	; 0x31
 8000cf2:	d9f4      	bls.n	8000cde <reset_buffer+0xe>
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <processBuffer>:
void processBuffer(uint8_t *receiveBuffer, float *processedBuffer, uint16_t arraySize){
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e00f      	b.n	8000d34 <processBuffer+0x34>
		memcpy(&processedBuffer[i / 4], &receiveBuffer[i], 4);
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	da00      	bge.n	8000d1c <processBuffer+0x1c>
 8000d1a:	3303      	adds	r3, #3
 8000d1c:	109b      	asrs	r3, r3, #2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	4413      	add	r3, r2
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	68f9      	ldr	r1, [r7, #12]
 8000d28:	440a      	add	r2, r1
 8000d2a:	6812      	ldr	r2, [r2, #0]
 8000d2c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dbea      	blt.n	8000d14 <processBuffer+0x14>
	}
	processed = 1;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <processBuffer+0x58>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
	received = 1;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <processBuffer+0x5c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
}
 8000d4a:	bf00      	nop
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000237 	.word	0x20000237
 8000d5c:	20000236 	.word	0x20000236

08000d60 <echoReceived>:
void echoReceived(float *processedBuffer, char *transmitBuffer){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af04      	add	r7, sp, #16
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d70:	482e      	ldr	r0, [pc, #184]	; (8000e2c <echoReceived+0xcc>)
 8000d72:	f001 fd4f 	bl	8002814 <HAL_GPIO_WritePin>
	for(int i = 0; i < 2048; i = i + 2){
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	e02e      	b.n	8000dda <echoReceived+0x7a>
		reset_buffer(&transmitBuffer[0]);
 8000d7c:	6838      	ldr	r0, [r7, #0]
 8000d7e:	f7ff ffa7 	bl	8000cd0 <reset_buffer>
		sprintf(&transmitBuffer[0], "%d - (%.6f) + j(%.6f)\r\n", i, processedBuffer[i], processedBuffer[i+1]);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	edd3 7a00 	vldr	s15, [r3]
 8000d8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3301      	adds	r3, #1
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	edd3 6a00 	vldr	s13, [r3]
 8000da0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000da4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000da8:	ed8d 7b00 	vstr	d7, [sp]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4920      	ldr	r1, [pc, #128]	; (8000e30 <echoReceived+0xd0>)
 8000db0:	6838      	ldr	r0, [r7, #0]
 8000db2:	f008 fc39 	bl	8009628 <siprintf>
		if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000db6:	481f      	ldr	r0, [pc, #124]	; (8000e34 <echoReceived+0xd4>)
 8000db8:	f005 fe80 	bl	8006abc <UART_CheckIdleState>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d108      	bne.n	8000dd4 <echoReceived+0x74>
			if(HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100) == HAL_TIMEOUT){
 8000dc2:	2364      	movs	r3, #100	; 0x64
 8000dc4:	2232      	movs	r2, #50	; 0x32
 8000dc6:	6839      	ldr	r1, [r7, #0]
 8000dc8:	481a      	ldr	r0, [pc, #104]	; (8000e34 <echoReceived+0xd4>)
 8000dca:	f004 fd17 	bl	80057fc <HAL_UART_Transmit>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d007      	beq.n	8000de4 <echoReceived+0x84>
	for(int i = 0; i < 2048; i = i + 2){
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000de0:	dbcc      	blt.n	8000d7c <echoReceived+0x1c>
 8000de2:	e000      	b.n	8000de6 <echoReceived+0x86>
				break;
 8000de4:	bf00      	nop
			}
		}
	}
	reset_buffer(&transmitBuffer[0]);
 8000de6:	6838      	ldr	r0, [r7, #0]
 8000de8:	f7ff ff72 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "&");
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	4912      	ldr	r1, [pc, #72]	; (8000e38 <echoReceived+0xd8>)
 8000df0:	461a      	mov	r2, r3
 8000df2:	460b      	mov	r3, r1
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	8013      	strh	r3, [r2, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000df8:	480e      	ldr	r0, [pc, #56]	; (8000e34 <echoReceived+0xd4>)
 8000dfa:	f005 fe5f 	bl	8006abc <UART_CheckIdleState>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <echoReceived+0xb0>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100);
 8000e04:	2364      	movs	r3, #100	; 0x64
 8000e06:	2232      	movs	r2, #50	; 0x32
 8000e08:	6839      	ldr	r1, [r7, #0]
 8000e0a:	480a      	ldr	r0, [pc, #40]	; (8000e34 <echoReceived+0xd4>)
 8000e0c:	f004 fcf6 	bl	80057fc <HAL_UART_Transmit>
	}
	received = 0;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <echoReceived+0xdc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <echoReceived+0xcc>)
 8000e1e:	f001 fcf9 	bl	8002814 <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	58020400 	.word	0x58020400
 8000e30:	0800ac58 	.word	0x0800ac58
 8000e34:	20004294 	.word	0x20004294
 8000e38:	0800ac70 	.word	0x0800ac70
 8000e3c:	20000236 	.word	0x20000236

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char hello_world[50] = {"\r\nHello World!\r\n"};
 8000e4a:	4b69      	ldr	r3, [pc, #420]	; (8000ff0 <main+0x1b0>)
 8000e4c:	f242 0428 	movw	r4, #8232	; 0x2028
 8000e50:	443c      	add	r4, r7
 8000e52:	461d      	mov	r5, r3
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	7023      	strb	r3, [r4, #0]
 8000e5c:	f242 0339 	movw	r3, #8249	; 0x2039
 8000e60:	443b      	add	r3, r7
 8000e62:	2221      	movs	r2, #33	; 0x21
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 fee2 	bl	8008c30 <memset>
	float32_t signal_array[2048] = {0};
 8000e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e70:	4618      	mov	r0, r3
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	461a      	mov	r2, r3
 8000e78:	2100      	movs	r1, #0
 8000e7a:	f007 fed9 	bl	8008c30 <memset>
	float32_t mean_value = 0.0f, mean_of_squared_value = 0.0f, std_dev_value = 0.0f, max = 0.0f;
 8000e7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <main+0x1b4>)
 8000e80:	f242 0268 	movw	r2, #8296	; 0x2068
 8000e84:	443a      	add	r2, r7
 8000e86:	4413      	add	r3, r2
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <main+0x1b8>)
 8000e90:	f242 0268 	movw	r2, #8296	; 0x2068
 8000e94:	443a      	add	r2, r7
 8000e96:	4413      	add	r3, r2
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <main+0x1bc>)
 8000ea0:	f242 0268 	movw	r2, #8296	; 0x2068
 8000ea4:	443a      	add	r2, r7
 8000ea6:	4413      	add	r3, r2
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	4b54      	ldr	r3, [pc, #336]	; (8001000 <main+0x1c0>)
 8000eb0:	f242 0268 	movw	r2, #8296	; 0x2068
 8000eb4:	443a      	add	r2, r7
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
	float32_t moment = 0.0f, var = 0.0f;
 8000ebe:	4b51      	ldr	r3, [pc, #324]	; (8001004 <main+0x1c4>)
 8000ec0:	f242 0268 	movw	r2, #8296	; 0x2068
 8000ec4:	443a      	add	r2, r7
 8000ec6:	4413      	add	r3, r2
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <main+0x1c8>)
 8000ed0:	f242 0268 	movw	r2, #8296	; 0x2068
 8000ed4:	443a      	add	r2, r7
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
	float32_t * result;
	uint32_t power = 2;
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <main+0x1cc>)
 8000ee0:	f242 0268 	movw	r2, #8296	; 0x2068
 8000ee4:	443a      	add	r2, r7
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2202      	movs	r2, #2
 8000eea:	601a      	str	r2, [r3, #0]
	uint32_t counter, length=2048, max_index;
 8000eec:	4b48      	ldr	r3, [pc, #288]	; (8001010 <main+0x1d0>)
 8000eee:	f242 0268 	movw	r2, #8296	; 0x2068
 8000ef2:	443a      	add	r2, r7
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efa:	601a      	str	r2, [r3, #0]
    int32_t timeout; 
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f00:	f242 0264 	movw	r2, #8292	; 0x2064
 8000f04:	443a      	add	r2, r7
 8000f06:	6013      	str	r3, [r2, #0]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000f08:	bf00      	nop
 8000f0a:	4b42      	ldr	r3, [pc, #264]	; (8001014 <main+0x1d4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00a      	beq.n	8000f2c <main+0xec>
 8000f16:	f242 0364 	movw	r3, #8292	; 0x2064
 8000f1a:	443b      	add	r3, r7
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	f242 0164 	movw	r1, #8292	; 0x2064
 8000f24:	4439      	add	r1, r7
 8000f26:	600a      	str	r2, [r1, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	dcee      	bgt.n	8000f0a <main+0xca>
  if ( timeout < 0 )
 8000f2c:	f242 0364 	movw	r3, #8292	; 0x2064
 8000f30:	443b      	add	r3, r7
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da01      	bge.n	8000f3c <main+0xfc>
  {
  Error_Handler();
 8000f38:	f000 fc4a 	bl	80017d0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f000 fe8e 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 fb68 	bl	8001614 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <main+0x1d4>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	4a32      	ldr	r2, [pc, #200]	; (8001014 <main+0x1d4>)
 8000f4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <main+0x1d4>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <main+0x1d8>)
 8000f60:	f242 0168 	movw	r1, #8296	; 0x2068
 8000f64:	4439      	add	r1, r7
 8000f66:	440b      	add	r3, r1
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <main+0x1d8>)
 8000f6c:	f242 0268 	movw	r2, #8296	; 0x2068
 8000f70:	443a      	add	r2, r7
 8000f72:	4413      	add	r3, r2
 8000f74:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f001 fc66 	bl	8002848 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f001 fc7c 	bl	800287c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f88:	f242 0264 	movw	r2, #8292	; 0x2064
 8000f8c:	443a      	add	r2, r7
 8000f8e:	6013      	str	r3, [r2, #0]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f90:	bf00      	nop
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <main+0x1d4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10a      	bne.n	8000fb4 <main+0x174>
 8000f9e:	f242 0364 	movw	r3, #8292	; 0x2064
 8000fa2:	443b      	add	r3, r7
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1e5a      	subs	r2, r3, #1
 8000fa8:	f242 0164 	movw	r1, #8292	; 0x2064
 8000fac:	4439      	add	r1, r7
 8000fae:	600a      	str	r2, [r1, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dcee      	bgt.n	8000f92 <main+0x152>
if ( timeout < 0 )
 8000fb4:	f242 0364 	movw	r3, #8292	; 0x2064
 8000fb8:	443b      	add	r3, r7
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da01      	bge.n	8000fc4 <main+0x184>
{
Error_Handler();
 8000fc0:	f000 fc06 	bl	80017d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff fdec 	bl	8000ba0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fc8:	f000 fcf6 	bl	80019b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fcc:	f000 fd92 	bl	8001af4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000fd0:	f000 fc84 	bl	80018dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Put UART peripheral in reception process
  if(HAL_UART_Receive_IT(&huart3, &receiveBuffer[0], bufferSize) != HAL_OK)
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <main+0x1dc>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4911      	ldr	r1, [pc, #68]	; (8001020 <main+0x1e0>)
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <main+0x1e4>)
 8000fde:	f004 fca3 	bl	8005928 <HAL_UART_Receive_IT>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d040      	beq.n	800106a <main+0x22a>
  {
    Error_Handler();
 8000fe8:	f000 fbf2 	bl	80017d0 <Error_Handler>
  }
  // Wait for message
  while (UartReady != SET)
 8000fec:	e03d      	b.n	800106a <main+0x22a>
 8000fee:	bf00      	nop
 8000ff0:	0800ad1c 	.word	0x0800ad1c
 8000ff4:	ffffdfbc 	.word	0xffffdfbc
 8000ff8:	ffffdfb8 	.word	0xffffdfb8
 8000ffc:	ffffdfb4 	.word	0xffffdfb4
 8001000:	ffffdfb0 	.word	0xffffdfb0
 8001004:	ffffdfac 	.word	0xffffdfac
 8001008:	ffffdfa8 	.word	0xffffdfa8
 800100c:	ffffdfa4 	.word	0xffffdfa4
 8001010:	ffffdfa0 	.word	0xffffdfa0
 8001014:	58024400 	.word	0x58024400
 8001018:	ffffdf98 	.word	0xffffdf98
 800101c:	20000008 	.word	0x20000008
 8001020:	20002248 	.word	0x20002248
 8001024:	20004294 	.word	0x20004294
  {
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2101      	movs	r1, #1
 800102c:	48b7      	ldr	r0, [pc, #732]	; (800130c <main+0x4cc>)
 800102e:	f001 fbf1 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f000 fea4 	bl	8001d80 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2101      	movs	r1, #1
 800103c:	48b3      	ldr	r0, [pc, #716]	; (800130c <main+0x4cc>)
 800103e:	f001 fbe9 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001042:	2064      	movs	r0, #100	; 0x64
 8001044:	f000 fe9c 	bl	8001d80 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2101      	movs	r1, #1
 800104c:	48af      	ldr	r0, [pc, #700]	; (800130c <main+0x4cc>)
 800104e:	f001 fbe1 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001052:	2064      	movs	r0, #100	; 0x64
 8001054:	f000 fe94 	bl	8001d80 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2101      	movs	r1, #1
 800105c:	48ab      	ldr	r0, [pc, #684]	; (800130c <main+0x4cc>)
 800105e:	f001 fbd9 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001062:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001066:	f000 fe8b 	bl	8001d80 <HAL_Delay>
  while (UartReady != SET)
 800106a:	4ba9      	ldr	r3, [pc, #676]	; (8001310 <main+0x4d0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d1d9      	bne.n	8001028 <main+0x1e8>
  }
  UartReady = RESET;
 8001074:	4ba6      	ldr	r3, [pc, #664]	; (8001310 <main+0x4d0>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart3, (uint8_t*) &hello_world[0], sizeof(hello_world), 100);
 800107a:	f242 0128 	movw	r1, #8232	; 0x2028
 800107e:	4439      	add	r1, r7
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	2232      	movs	r2, #50	; 0x32
 8001084:	48a3      	ldr	r0, [pc, #652]	; (8001314 <main+0x4d4>)
 8001086:	f004 fbb9 	bl	80057fc <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	489f      	ldr	r0, [pc, #636]	; (800130c <main+0x4cc>)
 8001090:	f001 fbc0 	bl	8002814 <HAL_GPIO_WritePin>

  // HRTimer enable
  __HAL_TIM_ENABLE(&htim2);
 8001094:	4ba0      	ldr	r3, [pc, #640]	; (8001318 <main+0x4d8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b9f      	ldr	r3, [pc, #636]	; (8001318 <main+0x4d8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
  __HAL_TIM_UIFREMAP_DISABLE(&htim2);
 80010a4:	4b9c      	ldr	r3, [pc, #624]	; (8001318 <main+0x4d8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b9b      	ldr	r3, [pc, #620]	; (8001318 <main+0x4d8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010b2:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 80010b4:	4898      	ldr	r0, [pc, #608]	; (8001318 <main+0x4d8>)
 80010b6:	f004 f893 	bl	80051e0 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010ba:	4b97      	ldr	r3, [pc, #604]	; (8001318 <main+0x4d8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24

    // Instantaneous absolute value
	result = (float32_t *) malloc(length * sizeof(float32_t));
 80010c2:	4b96      	ldr	r3, [pc, #600]	; (800131c <main+0x4dc>)
 80010c4:	f242 0268 	movw	r2, #8296	; 0x2068
 80010c8:	443a      	add	r2, r7
 80010ca:	4413      	add	r3, r2
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f007 fd9d 	bl	8008c10 <malloc>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f242 0260 	movw	r2, #8288	; 0x2060
 80010dc:	443a      	add	r2, r7
 80010de:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010e0:	4b8d      	ldr	r3, [pc, #564]	; (8001318 <main+0x4d8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(signal_array, result, &length);
 80010e8:	4b8c      	ldr	r3, [pc, #560]	; (800131c <main+0x4dc>)
 80010ea:	f242 0268 	movw	r2, #8296	; 0x2068
 80010ee:	443a      	add	r2, r7
 80010f0:	4413      	add	r3, r2
 80010f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010f6:	461a      	mov	r2, r3
 80010f8:	f242 0360 	movw	r3, #8288	; 0x2060
 80010fc:	443b      	add	r3, r7
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	f7ff fb96 	bl	8000830 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001104:	4b84      	ldr	r3, [pc, #528]	; (8001318 <main+0x4d8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f242 025c 	movw	r2, #8284	; 0x205c
 800110e:	443a      	add	r2, r7
 8001110:	6013      	str	r3, [r2, #0]

	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 8001112:	4883      	ldr	r0, [pc, #524]	; (8001320 <main+0x4e0>)
 8001114:	f7ff fddc 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Inst abs counter = %ld\r\n", counter);
 8001118:	f242 035c 	movw	r3, #8284	; 0x205c
 800111c:	443b      	add	r3, r7
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4980      	ldr	r1, [pc, #512]	; (8001324 <main+0x4e4>)
 8001122:	487f      	ldr	r0, [pc, #508]	; (8001320 <main+0x4e0>)
 8001124:	f008 fa80 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001128:	487a      	ldr	r0, [pc, #488]	; (8001314 <main+0x4d4>)
 800112a:	f005 fcc7 	bl	8006abc <UART_CheckIdleState>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d105      	bne.n	8001140 <main+0x300>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001134:	2364      	movs	r3, #100	; 0x64
 8001136:	2232      	movs	r2, #50	; 0x32
 8001138:	4979      	ldr	r1, [pc, #484]	; (8001320 <main+0x4e0>)
 800113a:	4876      	ldr	r0, [pc, #472]	; (8001314 <main+0x4d4>)
 800113c:	f004 fb5e 	bl	80057fc <HAL_UART_Transmit>
	}

	free(result);
 8001140:	f242 0360 	movw	r3, #8288	; 0x2060
 8001144:	443b      	add	r3, r7
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	f007 fd6a 	bl	8008c20 <free>

	// Mean
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800114c:	4b72      	ldr	r3, [pc, #456]	; (8001318 <main+0x4d8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	mean(signal_array, &mean_value, &length);
 8001154:	4a71      	ldr	r2, [pc, #452]	; (800131c <main+0x4dc>)
 8001156:	f242 0368 	movw	r3, #8296	; 0x2068
 800115a:	443b      	add	r3, r7
 800115c:	441a      	add	r2, r3
 800115e:	4b72      	ldr	r3, [pc, #456]	; (8001328 <main+0x4e8>)
 8001160:	f242 0168 	movw	r1, #8296	; 0x2068
 8001164:	4439      	add	r1, r7
 8001166:	440b      	add	r3, r1
 8001168:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fb70 	bl	8000852 <mean>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001172:	4b69      	ldr	r3, [pc, #420]	; (8001318 <main+0x4d8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f242 025c 	movw	r2, #8284	; 0x205c
 800117c:	443a      	add	r2, r7
 800117e:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 8001180:	4867      	ldr	r0, [pc, #412]	; (8001320 <main+0x4e0>)
 8001182:	f7ff fda5 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Mean = %f\r\n", mean_value);
 8001186:	4b68      	ldr	r3, [pc, #416]	; (8001328 <main+0x4e8>)
 8001188:	f242 0268 	movw	r2, #8296	; 0x2068
 800118c:	443a      	add	r2, r7
 800118e:	4413      	add	r3, r2
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001198:	ec53 2b17 	vmov	r2, r3, d7
 800119c:	4963      	ldr	r1, [pc, #396]	; (800132c <main+0x4ec>)
 800119e:	4860      	ldr	r0, [pc, #384]	; (8001320 <main+0x4e0>)
 80011a0:	f008 fa42 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80011a4:	485b      	ldr	r0, [pc, #364]	; (8001314 <main+0x4d4>)
 80011a6:	f005 fc89 	bl	8006abc <UART_CheckIdleState>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <main+0x37c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	2232      	movs	r2, #50	; 0x32
 80011b4:	495a      	ldr	r1, [pc, #360]	; (8001320 <main+0x4e0>)
 80011b6:	4857      	ldr	r0, [pc, #348]	; (8001314 <main+0x4d4>)
 80011b8:	f004 fb20 	bl	80057fc <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80011bc:	4858      	ldr	r0, [pc, #352]	; (8001320 <main+0x4e0>)
 80011be:	f7ff fd87 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 80011c2:	f242 035c 	movw	r3, #8284	; 0x205c
 80011c6:	443b      	add	r3, r7
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4959      	ldr	r1, [pc, #356]	; (8001330 <main+0x4f0>)
 80011cc:	4854      	ldr	r0, [pc, #336]	; (8001320 <main+0x4e0>)
 80011ce:	f008 fa2b 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80011d2:	4850      	ldr	r0, [pc, #320]	; (8001314 <main+0x4d4>)
 80011d4:	f005 fc72 	bl	8006abc <UART_CheckIdleState>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d105      	bne.n	80011ea <main+0x3aa>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80011de:	2364      	movs	r3, #100	; 0x64
 80011e0:	2232      	movs	r2, #50	; 0x32
 80011e2:	494f      	ldr	r1, [pc, #316]	; (8001320 <main+0x4e0>)
 80011e4:	484b      	ldr	r0, [pc, #300]	; (8001314 <main+0x4d4>)
 80011e6:	f004 fb09 	bl	80057fc <HAL_UART_Transmit>
	}

	// Mean of squared
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80011ea:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <main+0x4d8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	mean_of_squared(signal_array, &mean_of_squared_value, &length);
 80011f2:	4a4a      	ldr	r2, [pc, #296]	; (800131c <main+0x4dc>)
 80011f4:	f242 0368 	movw	r3, #8296	; 0x2068
 80011f8:	443b      	add	r3, r7
 80011fa:	441a      	add	r2, r3
 80011fc:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <main+0x4f4>)
 80011fe:	f242 0168 	movw	r1, #8296	; 0x2068
 8001202:	4439      	add	r1, r7
 8001204:	440b      	add	r3, r1
 8001206:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fb32 	bl	8000874 <mean_of_squared>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001210:	4b41      	ldr	r3, [pc, #260]	; (8001318 <main+0x4d8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	f242 025c 	movw	r2, #8284	; 0x205c
 800121a:	443a      	add	r2, r7
 800121c:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 800121e:	4840      	ldr	r0, [pc, #256]	; (8001320 <main+0x4e0>)
 8001220:	f7ff fd56 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Mean of squared = %f\r\n", mean_of_squared_value);
 8001224:	4b43      	ldr	r3, [pc, #268]	; (8001334 <main+0x4f4>)
 8001226:	f242 0268 	movw	r2, #8296	; 0x2068
 800122a:	443a      	add	r2, r7
 800122c:	4413      	add	r3, r2
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001236:	ec53 2b17 	vmov	r2, r3, d7
 800123a:	493f      	ldr	r1, [pc, #252]	; (8001338 <main+0x4f8>)
 800123c:	4838      	ldr	r0, [pc, #224]	; (8001320 <main+0x4e0>)
 800123e:	f008 f9f3 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001242:	4834      	ldr	r0, [pc, #208]	; (8001314 <main+0x4d4>)
 8001244:	f005 fc3a 	bl	8006abc <UART_CheckIdleState>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d105      	bne.n	800125a <main+0x41a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	2232      	movs	r2, #50	; 0x32
 8001252:	4933      	ldr	r1, [pc, #204]	; (8001320 <main+0x4e0>)
 8001254:	482f      	ldr	r0, [pc, #188]	; (8001314 <main+0x4d4>)
 8001256:	f004 fad1 	bl	80057fc <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 800125a:	4831      	ldr	r0, [pc, #196]	; (8001320 <main+0x4e0>)
 800125c:	f7ff fd38 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001260:	f242 035c 	movw	r3, #8284	; 0x205c
 8001264:	443b      	add	r3, r7
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4931      	ldr	r1, [pc, #196]	; (8001330 <main+0x4f0>)
 800126a:	482d      	ldr	r0, [pc, #180]	; (8001320 <main+0x4e0>)
 800126c:	f008 f9dc 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001270:	4828      	ldr	r0, [pc, #160]	; (8001314 <main+0x4d4>)
 8001272:	f005 fc23 	bl	8006abc <UART_CheckIdleState>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <main+0x448>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 800127c:	2364      	movs	r3, #100	; 0x64
 800127e:	2232      	movs	r2, #50	; 0x32
 8001280:	4927      	ldr	r1, [pc, #156]	; (8001320 <main+0x4e0>)
 8001282:	4824      	ldr	r0, [pc, #144]	; (8001314 <main+0x4d4>)
 8001284:	f004 faba 	bl	80057fc <HAL_UART_Transmit>
	}

	// Standard deviation
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <main+0x4d8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	std_dev(signal_array, &std_dev_value, &length);
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <main+0x4dc>)
 8001292:	f242 0368 	movw	r3, #8296	; 0x2068
 8001296:	443b      	add	r3, r7
 8001298:	441a      	add	r2, r3
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <main+0x4fc>)
 800129c:	f242 0168 	movw	r1, #8296	; 0x2068
 80012a0:	4439      	add	r1, r7
 80012a2:	440b      	add	r3, r1
 80012a4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fb02 	bl	80008b2 <std_dev>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <main+0x4d8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	f242 025c 	movw	r2, #8284	; 0x205c
 80012b8:	443a      	add	r2, r7
 80012ba:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80012bc:	4818      	ldr	r0, [pc, #96]	; (8001320 <main+0x4e0>)
 80012be:	f7ff fd07 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <main+0x4fc>)
 80012c4:	f242 0268 	movw	r2, #8296	; 0x2068
 80012c8:	443a      	add	r2, r7
 80012ca:	4413      	add	r3, r2
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d4:	ec53 2b17 	vmov	r2, r3, d7
 80012d8:	4919      	ldr	r1, [pc, #100]	; (8001340 <main+0x500>)
 80012da:	4811      	ldr	r0, [pc, #68]	; (8001320 <main+0x4e0>)
 80012dc:	f008 f9a4 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <main+0x4d4>)
 80012e2:	f005 fbeb 	bl	8006abc <UART_CheckIdleState>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <main+0x4b8>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	2232      	movs	r2, #50	; 0x32
 80012f0:	490b      	ldr	r1, [pc, #44]	; (8001320 <main+0x4e0>)
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <main+0x4d4>)
 80012f4:	f004 fa82 	bl	80057fc <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <main+0x4e0>)
 80012fa:	f7ff fce9 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 80012fe:	f242 035c 	movw	r3, #8284	; 0x205c
 8001302:	443b      	add	r3, r7
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	490a      	ldr	r1, [pc, #40]	; (8001330 <main+0x4f0>)
 8001308:	e01c      	b.n	8001344 <main+0x504>
 800130a:	bf00      	nop
 800130c:	58020400 	.word	0x58020400
 8001310:	20000238 	.word	0x20000238
 8001314:	20004294 	.word	0x20004294
 8001318:	20004248 	.word	0x20004248
 800131c:	ffffdfa0 	.word	0xffffdfa0
 8001320:	20000204 	.word	0x20000204
 8001324:	0800ac74 	.word	0x0800ac74
 8001328:	ffffdfbc 	.word	0xffffdfbc
 800132c:	0800ac90 	.word	0x0800ac90
 8001330:	0800ac9c 	.word	0x0800ac9c
 8001334:	ffffdfb8 	.word	0xffffdfb8
 8001338:	0800acb4 	.word	0x0800acb4
 800133c:	ffffdfb4 	.word	0xffffdfb4
 8001340:	0800accc 	.word	0x0800accc
 8001344:	489f      	ldr	r0, [pc, #636]	; (80015c4 <main+0x784>)
 8001346:	f008 f96f 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800134a:	489f      	ldr	r0, [pc, #636]	; (80015c8 <main+0x788>)
 800134c:	f005 fbb6 	bl	8006abc <UART_CheckIdleState>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d105      	bne.n	8001362 <main+0x522>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	2232      	movs	r2, #50	; 0x32
 800135a:	499a      	ldr	r1, [pc, #616]	; (80015c4 <main+0x784>)
 800135c:	489a      	ldr	r0, [pc, #616]	; (80015c8 <main+0x788>)
 800135e:	f004 fa4d 	bl	80057fc <HAL_UART_Transmit>
	}

	// GMAX
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001362:	4b9a      	ldr	r3, [pc, #616]	; (80015cc <main+0x78c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	gmax(signal_array, &length, &max, &max_index);
 800136a:	4b99      	ldr	r3, [pc, #612]	; (80015d0 <main+0x790>)
 800136c:	f242 0268 	movw	r2, #8296	; 0x2068
 8001370:	443a      	add	r2, r7
 8001372:	4413      	add	r3, r2
 8001374:	4a97      	ldr	r2, [pc, #604]	; (80015d4 <main+0x794>)
 8001376:	f242 0168 	movw	r1, #8296	; 0x2068
 800137a:	4439      	add	r1, r7
 800137c:	440a      	add	r2, r1
 800137e:	4996      	ldr	r1, [pc, #600]	; (80015d8 <main+0x798>)
 8001380:	f242 0068 	movw	r0, #8296	; 0x2068
 8001384:	4438      	add	r0, r7
 8001386:	4401      	add	r1, r0
 8001388:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800138c:	f7ff fab4 	bl	80008f8 <gmax>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001390:	4b8e      	ldr	r3, [pc, #568]	; (80015cc <main+0x78c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	f242 025c 	movw	r2, #8284	; 0x205c
 800139a:	443a      	add	r2, r7
 800139c:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 800139e:	4889      	ldr	r0, [pc, #548]	; (80015c4 <main+0x784>)
 80013a0:	f7ff fc96 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Gmax = %f\r\n", max);
 80013a4:	4b8b      	ldr	r3, [pc, #556]	; (80015d4 <main+0x794>)
 80013a6:	f242 0268 	movw	r2, #8296	; 0x2068
 80013aa:	443a      	add	r2, r7
 80013ac:	4413      	add	r3, r2
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013b6:	ec53 2b17 	vmov	r2, r3, d7
 80013ba:	4988      	ldr	r1, [pc, #544]	; (80015dc <main+0x79c>)
 80013bc:	4881      	ldr	r0, [pc, #516]	; (80015c4 <main+0x784>)
 80013be:	f008 f933 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80013c2:	4881      	ldr	r0, [pc, #516]	; (80015c8 <main+0x788>)
 80013c4:	f005 fb7a 	bl	8006abc <UART_CheckIdleState>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <main+0x59a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80013ce:	2364      	movs	r3, #100	; 0x64
 80013d0:	2232      	movs	r2, #50	; 0x32
 80013d2:	497c      	ldr	r1, [pc, #496]	; (80015c4 <main+0x784>)
 80013d4:	487c      	ldr	r0, [pc, #496]	; (80015c8 <main+0x788>)
 80013d6:	f004 fa11 	bl	80057fc <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80013da:	487a      	ldr	r0, [pc, #488]	; (80015c4 <main+0x784>)
 80013dc:	f7ff fc78 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 80013e0:	f242 035c 	movw	r3, #8284	; 0x205c
 80013e4:	443b      	add	r3, r7
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	497d      	ldr	r1, [pc, #500]	; (80015e0 <main+0x7a0>)
 80013ea:	4876      	ldr	r0, [pc, #472]	; (80015c4 <main+0x784>)
 80013ec:	f008 f91c 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80013f0:	4875      	ldr	r0, [pc, #468]	; (80015c8 <main+0x788>)
 80013f2:	f005 fb63 	bl	8006abc <UART_CheckIdleState>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <main+0x5c8>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	2232      	movs	r2, #50	; 0x32
 8001400:	4970      	ldr	r1, [pc, #448]	; (80015c4 <main+0x784>)
 8001402:	4871      	ldr	r0, [pc, #452]	; (80015c8 <main+0x788>)
 8001404:	f004 f9fa 	bl	80057fc <HAL_UART_Transmit>
	}

	// Variance
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001408:	4b70      	ldr	r3, [pc, #448]	; (80015cc <main+0x78c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	variance(signal_array, &var, &length);
 8001410:	4a71      	ldr	r2, [pc, #452]	; (80015d8 <main+0x798>)
 8001412:	f242 0368 	movw	r3, #8296	; 0x2068
 8001416:	443b      	add	r3, r7
 8001418:	441a      	add	r2, r3
 800141a:	4b72      	ldr	r3, [pc, #456]	; (80015e4 <main+0x7a4>)
 800141c:	f242 0168 	movw	r1, #8296	; 0x2068
 8001420:	4439      	add	r1, r7
 8001422:	440b      	add	r3, r1
 8001424:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fa53 	bl	80008d4 <variance>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <main+0x78c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f242 025c 	movw	r2, #8284	; 0x205c
 8001438:	443a      	add	r2, r7
 800143a:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 800143c:	4861      	ldr	r0, [pc, #388]	; (80015c4 <main+0x784>)
 800143e:	f7ff fc47 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Variance = %f\r\n", var);
 8001442:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <main+0x7a4>)
 8001444:	f242 0268 	movw	r2, #8296	; 0x2068
 8001448:	443a      	add	r2, r7
 800144a:	4413      	add	r3, r2
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001454:	ec53 2b17 	vmov	r2, r3, d7
 8001458:	4963      	ldr	r1, [pc, #396]	; (80015e8 <main+0x7a8>)
 800145a:	485a      	ldr	r0, [pc, #360]	; (80015c4 <main+0x784>)
 800145c:	f008 f8e4 	bl	8009628 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001460:	4859      	ldr	r0, [pc, #356]	; (80015c8 <main+0x788>)
 8001462:	f004 fcc3 	bl	8005dec <HAL_UART_GetState>
 8001466:	4603      	mov	r3, r0
 8001468:	2b20      	cmp	r3, #32
 800146a:	d105      	bne.n	8001478 <main+0x638>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 800146c:	2364      	movs	r3, #100	; 0x64
 800146e:	2232      	movs	r2, #50	; 0x32
 8001470:	4954      	ldr	r1, [pc, #336]	; (80015c4 <main+0x784>)
 8001472:	4855      	ldr	r0, [pc, #340]	; (80015c8 <main+0x788>)
 8001474:	f004 f9c2 	bl	80057fc <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 8001478:	4852      	ldr	r0, [pc, #328]	; (80015c4 <main+0x784>)
 800147a:	f7ff fc29 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 800147e:	f242 035c 	movw	r3, #8284	; 0x205c
 8001482:	443b      	add	r3, r7
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4956      	ldr	r1, [pc, #344]	; (80015e0 <main+0x7a0>)
 8001488:	484e      	ldr	r0, [pc, #312]	; (80015c4 <main+0x784>)
 800148a:	f008 f8cd 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800148e:	484e      	ldr	r0, [pc, #312]	; (80015c8 <main+0x788>)
 8001490:	f005 fb14 	bl	8006abc <UART_CheckIdleState>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d105      	bne.n	80014a6 <main+0x666>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 800149a:	2364      	movs	r3, #100	; 0x64
 800149c:	2232      	movs	r2, #50	; 0x32
 800149e:	4949      	ldr	r1, [pc, #292]	; (80015c4 <main+0x784>)
 80014a0:	4849      	ldr	r0, [pc, #292]	; (80015c8 <main+0x788>)
 80014a2:	f004 f9ab 	bl	80057fc <HAL_UART_Transmit>
	}

	// Central moment
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80014a6:	4b49      	ldr	r3, [pc, #292]	; (80015cc <main+0x78c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	central_moment(signal_array, &length, &power, &moment);
 80014ae:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <main+0x7ac>)
 80014b0:	f242 0268 	movw	r2, #8296	; 0x2068
 80014b4:	443a      	add	r2, r7
 80014b6:	4413      	add	r3, r2
 80014b8:	4a4d      	ldr	r2, [pc, #308]	; (80015f0 <main+0x7b0>)
 80014ba:	f242 0168 	movw	r1, #8296	; 0x2068
 80014be:	4439      	add	r1, r7
 80014c0:	440a      	add	r2, r1
 80014c2:	4945      	ldr	r1, [pc, #276]	; (80015d8 <main+0x798>)
 80014c4:	f242 0068 	movw	r0, #8296	; 0x2068
 80014c8:	4438      	add	r0, r7
 80014ca:	4401      	add	r1, r0
 80014cc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80014d0:	f7ff fada 	bl	8000a88 <central_moment>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <main+0x78c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f242 025c 	movw	r2, #8284	; 0x205c
 80014de:	443a      	add	r2, r7
 80014e0:	6013      	str	r3, [r2, #0]
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 80014e2:	4838      	ldr	r0, [pc, #224]	; (80015c4 <main+0x784>)
 80014e4:	f7ff fbf4 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Central moment = %f\r\n", moment);
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <main+0x7ac>)
 80014ea:	f242 0268 	movw	r2, #8296	; 0x2068
 80014ee:	443a      	add	r2, r7
 80014f0:	4413      	add	r3, r2
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014fa:	ec53 2b17 	vmov	r2, r3, d7
 80014fe:	493d      	ldr	r1, [pc, #244]	; (80015f4 <main+0x7b4>)
 8001500:	4830      	ldr	r0, [pc, #192]	; (80015c4 <main+0x784>)
 8001502:	f008 f891 	bl	8009628 <siprintf>
	if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY){
 8001506:	4830      	ldr	r0, [pc, #192]	; (80015c8 <main+0x788>)
 8001508:	f004 fc70 	bl	8005dec <HAL_UART_GetState>
 800150c:	4603      	mov	r3, r0
 800150e:	2b20      	cmp	r3, #32
 8001510:	d105      	bne.n	800151e <main+0x6de>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001512:	2364      	movs	r3, #100	; 0x64
 8001514:	2232      	movs	r2, #50	; 0x32
 8001516:	492b      	ldr	r1, [pc, #172]	; (80015c4 <main+0x784>)
 8001518:	482b      	ldr	r0, [pc, #172]	; (80015c8 <main+0x788>)
 800151a:	f004 f96f 	bl	80057fc <HAL_UART_Transmit>
	}
	// Transmission routine
	reset_buffer(&transmitBuffer[0]);
 800151e:	4829      	ldr	r0, [pc, #164]	; (80015c4 <main+0x784>)
 8001520:	f7ff fbd6 	bl	8000cd0 <reset_buffer>
	sprintf(&transmitBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001524:	f242 035c 	movw	r3, #8284	; 0x205c
 8001528:	443b      	add	r3, r7
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	492c      	ldr	r1, [pc, #176]	; (80015e0 <main+0x7a0>)
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <main+0x784>)
 8001530:	f008 f87a 	bl	8009628 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001534:	4824      	ldr	r0, [pc, #144]	; (80015c8 <main+0x788>)
 8001536:	f005 fac1 	bl	8006abc <UART_CheckIdleState>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <main+0x70c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], sizeof(transmitBuffer), 100);
 8001540:	2364      	movs	r3, #100	; 0x64
 8001542:	2232      	movs	r2, #50	; 0x32
 8001544:	491f      	ldr	r1, [pc, #124]	; (80015c4 <main+0x784>)
 8001546:	4820      	ldr	r0, [pc, #128]	; (80015c8 <main+0x788>)
 8001548:	f004 f958 	bl	80057fc <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <main+0x78c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
  {
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <main+0x78c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <main+0x7b8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d9f9      	bls.n	8001554 <main+0x714>
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 8001560:	2102      	movs	r1, #2
 8001562:	4826      	ldr	r0, [pc, #152]	; (80015fc <main+0x7bc>)
 8001564:	f001 f93e 	bl	80027e4 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <main+0x73a>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2102      	movs	r1, #2
 8001572:	4822      	ldr	r0, [pc, #136]	; (80015fc <main+0x7bc>)
 8001574:	f001 f94e 	bl	8002814 <HAL_GPIO_WritePin>
 8001578:	e004      	b.n	8001584 <main+0x744>
		} else {
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2102      	movs	r1, #2
 800157e:	481f      	ldr	r0, [pc, #124]	; (80015fc <main+0x7bc>)
 8001580:	f001 f948 	bl	8002814 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <main+0x78c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
		if(receiveBuffer[8191] != 0 && (processed == 0)){
 800158c:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <main+0x7c0>)
 800158e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001592:	4413      	add	r3, r2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00a      	beq.n	80015b0 <main+0x770>
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <main+0x7c4>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <main+0x770>
			processBuffer(receiveBuffer, processedBuffer, arraySize);
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <main+0x7c8>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4918      	ldr	r1, [pc, #96]	; (800160c <main+0x7cc>)
 80015aa:	4815      	ldr	r0, [pc, #84]	; (8001600 <main+0x7c0>)
 80015ac:	f7ff fba8 	bl	8000d00 <processBuffer>
		}
		if(received == 1){
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <main+0x7d0>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d1cd      	bne.n	8001554 <main+0x714>
			echoReceived(&processedBuffer[0], &transmitBuffer[0]);
 80015b8:	4902      	ldr	r1, [pc, #8]	; (80015c4 <main+0x784>)
 80015ba:	4814      	ldr	r0, [pc, #80]	; (800160c <main+0x7cc>)
 80015bc:	f7ff fbd0 	bl	8000d60 <echoReceived>
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 80015c0:	e7c8      	b.n	8001554 <main+0x714>
 80015c2:	bf00      	nop
 80015c4:	20000204 	.word	0x20000204
 80015c8:	20004294 	.word	0x20004294
 80015cc:	20004248 	.word	0x20004248
 80015d0:	ffffdf9c 	.word	0xffffdf9c
 80015d4:	ffffdfb0 	.word	0xffffdfb0
 80015d8:	ffffdfa0 	.word	0xffffdfa0
 80015dc:	0800ace8 	.word	0x0800ace8
 80015e0:	0800ac9c 	.word	0x0800ac9c
 80015e4:	ffffdfa8 	.word	0xffffdfa8
 80015e8:	0800acf4 	.word	0x0800acf4
 80015ec:	ffffdfac 	.word	0xffffdfac
 80015f0:	ffffdfa4 	.word	0xffffdfa4
 80015f4:	0800ad04 	.word	0x0800ad04
 80015f8:	0e4e1bff 	.word	0x0e4e1bff
 80015fc:	58021000 	.word	0x58021000
 8001600:	20002248 	.word	0x20002248
 8001604:	20000237 	.word	0x20000237
 8001608:	2000000a 	.word	0x2000000a
 800160c:	20000248 	.word	0x20000248
 8001610:	20000236 	.word	0x20000236

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0cc      	sub	sp, #304	; 0x130
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800161e:	224c      	movs	r2, #76	; 0x4c
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f007 fb04 	bl	8008c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800162c:	2220      	movs	r2, #32
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f007 fafd 	bl	8008c30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4618      	mov	r0, r3
 800163c:	23bc      	movs	r3, #188	; 0xbc
 800163e:	461a      	mov	r2, r3
 8001640:	2100      	movs	r1, #0
 8001642:	f007 faf5 	bl	8008c30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001646:	2004      	movs	r0, #4
 8001648:	f001 fa74 	bl	8002b34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <SystemClock_Config+0x170>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <SystemClock_Config+0x170>)
 8001658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <SystemClock_Config+0x170>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	4b47      	ldr	r3, [pc, #284]	; (8001788 <SystemClock_Config+0x174>)
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	4a46      	ldr	r2, [pc, #280]	; (8001788 <SystemClock_Config+0x174>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <SystemClock_Config+0x174>)
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	f003 0201 	and.w	r2, r3, #1
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001686:	bf00      	nop
 8001688:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <SystemClock_Config+0x170>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001694:	d1f8      	bne.n	8001688 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001696:	2322      	movs	r3, #34	; 0x22
 8001698:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800169c:	2301      	movs	r3, #1
 800169e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a2:	2340      	movs	r3, #64	; 0x40
 80016a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016ba:	2304      	movs	r3, #4
 80016bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 80016c0:	233c      	movs	r3, #60	; 0x3c
 80016c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80016d8:	230c      	movs	r3, #12
 80016da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 fa8a 	bl	8002c08 <HAL_RCC_OscConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0xea>
  {
    Error_Handler();
 80016fa:	f000 f869 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fe:	233f      	movs	r3, #63	; 0x3f
 8001700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001704:	2303      	movs	r3, #3
 8001706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001710:	2308      	movs	r3, #8
 8001712:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800171c:	2340      	movs	r3, #64	; 0x40
 800171e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800172a:	2340      	movs	r3, #64	; 0x40
 800172c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001730:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001734:	2104      	movs	r1, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fe76 	bl	8003428 <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8001742:	f000 f845 	bl	80017d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <SystemClock_Config+0x178>)
 800174c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	2203      	movs	r2, #3
 8001754:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800175e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4618      	mov	r0, r3
 8001768:	f002 f9e2 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0x162>
  {
    Error_Handler();
 8001772:	f000 f82d 	bl	80017d0 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8001776:	f001 fa37 	bl	8002be8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800177a:	bf00      	nop
 800177c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58024800 	.word	0x58024800
 8001788:	58000400 	.word	0x58000400
 800178c:	00040002 	.word	0x00040002

08001790 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_UART_TxCpltCallback+0x1c>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000238 	.word	0x20000238

080017b0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <HAL_UART_RxCpltCallback+0x1c>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000238 	.word	0x20000238

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_MspInit+0x30>)
 80017e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ec:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_MspInit+0x30>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_MspInit+0x30>)
 80017f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	58024400 	.word	0x58024400

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001868:	f000 fa6a 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <USART3_IRQHandler+0x10>)
 8001876:	f004 f92f 	bl	8005ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20004294 	.word	0x20004294

08001884 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x50>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x16>
		heap_end = &end;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <_sbrk+0x50>)
 8001896:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <_sbrk+0x54>)
 8001898:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <_sbrk+0x50>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <_sbrk+0x50>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	466a      	mov	r2, sp
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d907      	bls.n	80018be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018ae:	f007 f985 	bl	8008bbc <__errno>
 80018b2:	4602      	mov	r2, r0
 80018b4:	230c      	movs	r3, #12
 80018b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
 80018bc:	e006      	b.n	80018cc <_sbrk+0x48>
	}

	heap_end += incr;
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <_sbrk+0x50>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <_sbrk+0x50>)
 80018c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000023c 	.word	0x2000023c
 80018d8:	20004730 	.word	0x20004730

080018dc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <MX_TIM2_Init+0x98>)
 80018fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001900:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <MX_TIM2_Init+0x98>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_TIM2_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <MX_TIM2_Init+0x98>)
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_TIM2_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_TIM2_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001922:	4814      	ldr	r0, [pc, #80]	; (8001974 <MX_TIM2_Init+0x98>)
 8001924:	f003 fc04 	bl	8005130 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800192e:	f7ff ff4f 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <MX_TIM2_Init+0x98>)
 8001940:	f003 fc7c 	bl	800523c <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800194a:	f7ff ff41 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <MX_TIM2_Init+0x98>)
 800195c:	f003 fe76 	bl	800564c <HAL_TIMEx_MasterConfigSynchronization>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001966:	f7ff ff33 	bl	80017d0 <Error_Handler>
  }

}
 800196a:	bf00      	nop
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20004248 	.word	0x20004248

08001978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001988:	d10e      	bne.n	80019a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_TIM_Base_MspInit+0x3c>)
 800198c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001990:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_TIM_Base_MspInit+0x3c>)
 800199c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	58024400 	.word	0x58024400

080019b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019be:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <MX_USART3_UART_Init+0x94>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a00:	4811      	ldr	r0, [pc, #68]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 8001a02:	f003 feab 	bl	800575c <HAL_UART_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a0c:	f7ff fee0 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a10:	2100      	movs	r1, #0
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 8001a14:	f005 fb77 	bl	8007106 <HAL_UARTEx_SetTxFifoThreshold>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a1e:	f7ff fed7 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a22:	2100      	movs	r1, #0
 8001a24:	4808      	ldr	r0, [pc, #32]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 8001a26:	f005 fbac 	bl	8007182 <HAL_UARTEx_SetRxFifoThreshold>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a30:	f7ff fece 	bl	80017d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <MX_USART3_UART_Init+0x90>)
 8001a36:	f005 fb2d 	bl	8007094 <HAL_UARTEx_DisableFifoMode>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a40:	f7ff fec6 	bl	80017d0 <Error_Handler>
  }

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20004294 	.word	0x20004294
 8001a4c:	40004800 	.word	0x40004800

08001a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d136      	bne.n	8001ae0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_UART_MspInit+0x9c>)
 8001a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a78:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_UART_MspInit+0x9c>)
 8001a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_UART_MspInit+0x9c>)
 8001a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_UART_MspInit+0x9c>)
 8001a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a96:	4a15      	ldr	r2, [pc, #84]	; (8001aec <HAL_UART_MspInit+0x9c>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_UART_MspInit+0x9c>)
 8001aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <HAL_UART_MspInit+0xa0>)
 8001acc:	f000 fcda 	bl	8002484 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2027      	movs	r0, #39	; 0x27
 8001ad6:	f000 fa5c 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ada:	2027      	movs	r0, #39	; 0x27
 8001adc:	f000 fa73 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40004800 	.word	0x40004800
 8001aec:	58024400 	.word	0x58024400
 8001af0:	58020c00 	.word	0x58020c00

08001af4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001afa:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001afc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b00:	2209      	movs	r2, #9
 8001b02:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b06:	2202      	movs	r2, #2
 8001b08:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b3c:	f000 feb2 	bl	80028a4 <HAL_PCD_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001b46:	f7ff fe43 	bl	80017d0 <Error_Handler>
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20004320 	.word	0x20004320
 8001b54:	40080000 	.word	0x40080000

08001b58 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <HAL_PCD_MspInit+0xa4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d13b      	bne.n	8001bf2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_PCD_MspInit+0xa8>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_PCD_MspInit+0xa8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_PCD_MspInit+0xa8>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001b98:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001baa:	230a      	movs	r3, #10
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4813      	ldr	r0, [pc, #76]	; (8001c04 <HAL_PCD_MspInit+0xac>)
 8001bb6:	f000 fc65 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <HAL_PCD_MspInit+0xac>)
 8001bd0:	f000 fc58 	bl	8002484 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_PCD_MspInit+0xa8>)
 8001bd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_PCD_MspInit+0xa8>)
 8001bdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001be0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_PCD_MspInit+0xa8>)
 8001be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40080000 	.word	0x40080000
 8001c00:	58024400 	.word	0x58024400
 8001c04:	58020000 	.word	0x58020000

08001c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c0e:	e003      	b.n	8001c18 <LoopCopyDataInit>

08001c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c16:	3104      	adds	r1, #4

08001c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c18:	480b      	ldr	r0, [pc, #44]	; (8001c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c20:	d3f6      	bcc.n	8001c10 <CopyDataInit>
  ldr  r2, =_sbss
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c24:	e002      	b.n	8001c2c <LoopFillZerobss>

08001c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c28:	f842 3b04 	str.w	r3, [r2], #4

08001c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c30:	d3f9      	bcc.n	8001c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c32:	f7fe fd8d 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f006 ffc7 	bl	8008bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3a:	f7ff f901 	bl	8000e40 <main>
  bx  lr    
 8001c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c44:	0800de20 	.word	0x0800de20
  ldr  r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c4c:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001c50:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8001c54:	20004730 	.word	0x20004730

08001c58 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC3_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 f98a 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c68:	f001 fd94 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_Init+0x68>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <HAL_Init+0x6c>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa21 f303 	lsr.w	r3, r1, r3
 8001c84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_Init+0x68>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_Init+0x6c>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_Init+0x70>)
 8001c9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <HAL_Init+0x74>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 f814 	bl	8001cd4 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e002      	b.n	8001cbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb6:	f7ff fd93 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	0800ad60 	.word	0x0800ad60
 8001ccc:	20000004 	.word	0x20000004
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_InitTick+0x60>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e021      	b.n	8001d2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_InitTick+0x64>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_InitTick+0x60>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f96f 	bl	8001fe2 <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 f939 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_InitTick+0x68>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000010 	.word	0x20000010
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	2000000c 	.word	0x2000000c

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000010 	.word	0x20000010
 8001d64:	20004728 	.word	0x20004728

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20004728 	.word	0x20004728

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_Delay+0x40>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000010 	.word	0x20000010

08001dc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_GetREVID+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	5c001000 	.word	0x5c001000

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <__NVIC_SetPriorityGrouping+0x40>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <__NVIC_SetPriorityGrouping+0x40>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00
 8001e20:	05fa0000 	.word	0x05fa0000

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4907      	ldr	r1, [pc, #28]	; (8001e78 <__NVIC_EnableIRQ+0x38>)
 8001e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff8e 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff29 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa0:	f7ff ff40 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ff90 	bl	8001ed0 <NVIC_EncodePriority>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff5f 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff33 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffa4 	bl	8001f38 <SysTick_Config>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e205      	b.n	800241a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d004      	beq.n	8002024 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e1fa      	b.n	800241a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a8c      	ldr	r2, [pc, #560]	; (800225c <HAL_DMA_Abort_IT+0x260>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d04a      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a8b      	ldr	r2, [pc, #556]	; (8002260 <HAL_DMA_Abort_IT+0x264>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d045      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a89      	ldr	r2, [pc, #548]	; (8002264 <HAL_DMA_Abort_IT+0x268>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d040      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a88      	ldr	r2, [pc, #544]	; (8002268 <HAL_DMA_Abort_IT+0x26c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d03b      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a86      	ldr	r2, [pc, #536]	; (800226c <HAL_DMA_Abort_IT+0x270>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d036      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a85      	ldr	r2, [pc, #532]	; (8002270 <HAL_DMA_Abort_IT+0x274>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d031      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a83      	ldr	r2, [pc, #524]	; (8002274 <HAL_DMA_Abort_IT+0x278>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02c      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a82      	ldr	r2, [pc, #520]	; (8002278 <HAL_DMA_Abort_IT+0x27c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d027      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a80      	ldr	r2, [pc, #512]	; (800227c <HAL_DMA_Abort_IT+0x280>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d022      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a7f      	ldr	r2, [pc, #508]	; (8002280 <HAL_DMA_Abort_IT+0x284>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d01d      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a7d      	ldr	r2, [pc, #500]	; (8002284 <HAL_DMA_Abort_IT+0x288>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d018      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7c      	ldr	r2, [pc, #496]	; (8002288 <HAL_DMA_Abort_IT+0x28c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a7a      	ldr	r2, [pc, #488]	; (800228c <HAL_DMA_Abort_IT+0x290>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00e      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a79      	ldr	r2, [pc, #484]	; (8002290 <HAL_DMA_Abort_IT+0x294>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a77      	ldr	r2, [pc, #476]	; (8002294 <HAL_DMA_Abort_IT+0x298>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_DMA_Abort_IT+0xc8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a76      	ldr	r2, [pc, #472]	; (8002298 <HAL_DMA_Abort_IT+0x29c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_DMA_Abort_IT+0xcc>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_DMA_Abort_IT+0xce>
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d065      	beq.n	800219a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2204      	movs	r2, #4
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a60      	ldr	r2, [pc, #384]	; (800225c <HAL_DMA_Abort_IT+0x260>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d04a      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5e      	ldr	r2, [pc, #376]	; (8002260 <HAL_DMA_Abort_IT+0x264>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d045      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <HAL_DMA_Abort_IT+0x268>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d040      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a5b      	ldr	r2, [pc, #364]	; (8002268 <HAL_DMA_Abort_IT+0x26c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d03b      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5a      	ldr	r2, [pc, #360]	; (800226c <HAL_DMA_Abort_IT+0x270>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d036      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_DMA_Abort_IT+0x274>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d031      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a57      	ldr	r2, [pc, #348]	; (8002274 <HAL_DMA_Abort_IT+0x278>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d02c      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a55      	ldr	r2, [pc, #340]	; (8002278 <HAL_DMA_Abort_IT+0x27c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d027      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a54      	ldr	r2, [pc, #336]	; (800227c <HAL_DMA_Abort_IT+0x280>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_DMA_Abort_IT+0x284>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a51      	ldr	r2, [pc, #324]	; (8002284 <HAL_DMA_Abort_IT+0x288>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d018      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <HAL_DMA_Abort_IT+0x28c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4e      	ldr	r2, [pc, #312]	; (800228c <HAL_DMA_Abort_IT+0x290>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00e      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a4c      	ldr	r2, [pc, #304]	; (8002290 <HAL_DMA_Abort_IT+0x294>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a4b      	ldr	r2, [pc, #300]	; (8002294 <HAL_DMA_Abort_IT+0x298>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <HAL_DMA_Abort_IT+0x17a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a49      	ldr	r2, [pc, #292]	; (8002298 <HAL_DMA_Abort_IT+0x29c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d108      	bne.n	8002188 <HAL_DMA_Abort_IT+0x18c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e147      	b.n	8002418 <HAL_DMA_Abort_IT+0x41c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e13e      	b.n	8002418 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 020e 	bic.w	r2, r2, #14
 80021a8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2b      	ldr	r2, [pc, #172]	; (800225c <HAL_DMA_Abort_IT+0x260>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d04a      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <HAL_DMA_Abort_IT+0x264>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d045      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a28      	ldr	r2, [pc, #160]	; (8002264 <HAL_DMA_Abort_IT+0x268>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d040      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a26      	ldr	r2, [pc, #152]	; (8002268 <HAL_DMA_Abort_IT+0x26c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d03b      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <HAL_DMA_Abort_IT+0x270>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d036      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a23      	ldr	r2, [pc, #140]	; (8002270 <HAL_DMA_Abort_IT+0x274>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d031      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a22      	ldr	r2, [pc, #136]	; (8002274 <HAL_DMA_Abort_IT+0x278>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d02c      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a20      	ldr	r2, [pc, #128]	; (8002278 <HAL_DMA_Abort_IT+0x27c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d027      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HAL_DMA_Abort_IT+0x280>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d022      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <HAL_DMA_Abort_IT+0x284>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01d      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <HAL_DMA_Abort_IT+0x288>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d018      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <HAL_DMA_Abort_IT+0x28c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_DMA_Abort_IT+0x290>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00e      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a17      	ldr	r2, [pc, #92]	; (8002290 <HAL_DMA_Abort_IT+0x294>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d009      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_DMA_Abort_IT+0x298>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d004      	beq.n	800224a <HAL_DMA_Abort_IT+0x24e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <HAL_DMA_Abort_IT+0x29c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d128      	bne.n	800229c <HAL_DMA_Abort_IT+0x2a0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e027      	b.n	80022ac <HAL_DMA_Abort_IT+0x2b0>
 800225c:	40020010 	.word	0x40020010
 8002260:	40020028 	.word	0x40020028
 8002264:	40020040 	.word	0x40020040
 8002268:	40020058 	.word	0x40020058
 800226c:	40020070 	.word	0x40020070
 8002270:	40020088 	.word	0x40020088
 8002274:	400200a0 	.word	0x400200a0
 8002278:	400200b8 	.word	0x400200b8
 800227c:	40020410 	.word	0x40020410
 8002280:	40020428 	.word	0x40020428
 8002284:	40020440 	.word	0x40020440
 8002288:	40020458 	.word	0x40020458
 800228c:	40020470 	.word	0x40020470
 8002290:	40020488 	.word	0x40020488
 8002294:	400204a0 	.word	0x400204a0
 8002298:	400204b8 	.word	0x400204b8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5c      	ldr	r2, [pc, #368]	; (8002424 <HAL_DMA_Abort_IT+0x428>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d072      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a5b      	ldr	r2, [pc, #364]	; (8002428 <HAL_DMA_Abort_IT+0x42c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d06d      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a59      	ldr	r2, [pc, #356]	; (800242c <HAL_DMA_Abort_IT+0x430>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d068      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_DMA_Abort_IT+0x434>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d063      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a56      	ldr	r2, [pc, #344]	; (8002434 <HAL_DMA_Abort_IT+0x438>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d05e      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a55      	ldr	r2, [pc, #340]	; (8002438 <HAL_DMA_Abort_IT+0x43c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d059      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a53      	ldr	r2, [pc, #332]	; (800243c <HAL_DMA_Abort_IT+0x440>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d054      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_DMA_Abort_IT+0x444>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d04f      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a50      	ldr	r2, [pc, #320]	; (8002444 <HAL_DMA_Abort_IT+0x448>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04a      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a4f      	ldr	r2, [pc, #316]	; (8002448 <HAL_DMA_Abort_IT+0x44c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d045      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a4d      	ldr	r2, [pc, #308]	; (800244c <HAL_DMA_Abort_IT+0x450>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d040      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a4c      	ldr	r2, [pc, #304]	; (8002450 <HAL_DMA_Abort_IT+0x454>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d03b      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a4a      	ldr	r2, [pc, #296]	; (8002454 <HAL_DMA_Abort_IT+0x458>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d036      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a49      	ldr	r2, [pc, #292]	; (8002458 <HAL_DMA_Abort_IT+0x45c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d031      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a47      	ldr	r2, [pc, #284]	; (800245c <HAL_DMA_Abort_IT+0x460>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02c      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a46      	ldr	r2, [pc, #280]	; (8002460 <HAL_DMA_Abort_IT+0x464>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d027      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a44      	ldr	r2, [pc, #272]	; (8002464 <HAL_DMA_Abort_IT+0x468>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d022      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a43      	ldr	r2, [pc, #268]	; (8002468 <HAL_DMA_Abort_IT+0x46c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d01d      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a41      	ldr	r2, [pc, #260]	; (800246c <HAL_DMA_Abort_IT+0x470>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d018      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a40      	ldr	r2, [pc, #256]	; (8002470 <HAL_DMA_Abort_IT+0x474>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3e      	ldr	r2, [pc, #248]	; (8002474 <HAL_DMA_Abort_IT+0x478>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00e      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a3d      	ldr	r2, [pc, #244]	; (8002478 <HAL_DMA_Abort_IT+0x47c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3b      	ldr	r2, [pc, #236]	; (800247c <HAL_DMA_Abort_IT+0x480>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_DMA_Abort_IT+0x3a0>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3a      	ldr	r2, [pc, #232]	; (8002480 <HAL_DMA_Abort_IT+0x484>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Abort_IT+0x3a4>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_DMA_Abort_IT+0x3a6>
 80023a0:	2300      	movs	r3, #0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2201      	movs	r2, #1
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40020010 	.word	0x40020010
 8002428:	40020028 	.word	0x40020028
 800242c:	40020040 	.word	0x40020040
 8002430:	40020058 	.word	0x40020058
 8002434:	40020070 	.word	0x40020070
 8002438:	40020088 	.word	0x40020088
 800243c:	400200a0 	.word	0x400200a0
 8002440:	400200b8 	.word	0x400200b8
 8002444:	40020410 	.word	0x40020410
 8002448:	40020428 	.word	0x40020428
 800244c:	40020440 	.word	0x40020440
 8002450:	40020458 	.word	0x40020458
 8002454:	40020470 	.word	0x40020470
 8002458:	40020488 	.word	0x40020488
 800245c:	400204a0 	.word	0x400204a0
 8002460:	400204b8 	.word	0x400204b8
 8002464:	58025408 	.word	0x58025408
 8002468:	5802541c 	.word	0x5802541c
 800246c:	58025430 	.word	0x58025430
 8002470:	58025444 	.word	0x58025444
 8002474:	58025458 	.word	0x58025458
 8002478:	5802546c 	.word	0x5802546c
 800247c:	58025480 	.word	0x58025480
 8002480:	58025494 	.word	0x58025494

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002492:	4b89      	ldr	r3, [pc, #548]	; (80026b8 <HAL_GPIO_Init+0x234>)
 8002494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002496:	e194      	b.n	80027c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8186 	beq.w	80027bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d00b      	beq.n	80024d0 <HAL_GPIO_Init+0x4c>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d007      	beq.n	80024d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024c4:	2b11      	cmp	r3, #17
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b12      	cmp	r3, #18
 80024ce:	d130      	bne.n	8002532 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002506:	2201      	movs	r2, #1
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 0201 	and.w	r2, r3, #1
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0xee>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b12      	cmp	r3, #18
 8002570:	d123      	bne.n	80025ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80e0 	beq.w	80027bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <HAL_GPIO_Init+0x238>)
 80025fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002602:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <HAL_GPIO_Init+0x238>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_GPIO_Init+0x238>)
 800260e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261a:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <HAL_GPIO_Init+0x23c>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_GPIO_Init+0x240>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d052      	beq.n	80026ec <HAL_GPIO_Init+0x268>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_GPIO_Init+0x244>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d031      	beq.n	80026b2 <HAL_GPIO_Init+0x22e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <HAL_GPIO_Init+0x248>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02b      	beq.n	80026ae <HAL_GPIO_Init+0x22a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_GPIO_Init+0x24c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x226>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_GPIO_Init+0x250>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x222>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <HAL_GPIO_Init+0x254>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x21e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_GPIO_Init+0x258>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x21a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_GPIO_Init+0x25c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x216>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_GPIO_Init+0x260>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x212>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_GPIO_Init+0x264>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x20e>
 800268e:	2309      	movs	r3, #9
 8002690:	e02d      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 8002692:	230a      	movs	r3, #10
 8002694:	e02b      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 8002696:	2308      	movs	r3, #8
 8002698:	e029      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 800269a:	2307      	movs	r3, #7
 800269c:	e027      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 800269e:	2306      	movs	r3, #6
 80026a0:	e025      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e023      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e021      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e01f      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e01d      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e01b      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026b6:	bf00      	nop
 80026b8:	58000080 	.word	0x58000080
 80026bc:	58024400 	.word	0x58024400
 80026c0:	58000400 	.word	0x58000400
 80026c4:	58020000 	.word	0x58020000
 80026c8:	58020400 	.word	0x58020400
 80026cc:	58020800 	.word	0x58020800
 80026d0:	58020c00 	.word	0x58020c00
 80026d4:	58021000 	.word	0x58021000
 80026d8:	58021400 	.word	0x58021400
 80026dc:	58021800 	.word	0x58021800
 80026e0:	58021c00 	.word	0x58021c00
 80026e4:	58022000 	.word	0x58022000
 80026e8:	58022400 	.word	0x58022400
 80026ec:	2300      	movs	r3, #0
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	f002 0203 	and.w	r2, r2, #3
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	4093      	lsls	r3, r2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026fe:	4938      	ldr	r1, [pc, #224]	; (80027e0 <HAL_GPIO_Init+0x35c>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f ae63 	bne.w	8002498 <HAL_GPIO_Init+0x14>
  }
}
 80027d2:	bf00      	nop
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	58000400 	.word	0x58000400

080027e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e001      	b.n	8002806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002850:	4a08      	ldr	r2, [pc, #32]	; (8002874 <HAL_HSEM_FastTake+0x2c>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3320      	adds	r3, #32
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_HSEM_FastTake+0x30>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	58026400 	.word	0x58026400
 8002878:	80000300 	.word	0x80000300

0800287c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002886:	4906      	ldr	r1, [pc, #24]	; (80028a0 <HAL_HSEM_Release+0x24>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	58026400 	.word	0x58026400

080028a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a6:	b08f      	sub	sp, #60	; 0x3c
 80028a8:	af0a      	add	r7, sp, #40	; 0x28
 80028aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e116      	b.n	8002ae4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff f941 	bl	8001b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2203      	movs	r2, #3
 80028da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fd4d 	bl	8007394 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	687e      	ldr	r6, [r7, #4]
 8002902:	466d      	mov	r5, sp
 8002904:	f106 0410 	add.w	r4, r6, #16
 8002908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800290c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002910:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002914:	e885 0003 	stmia.w	r5, {r0, r1}
 8002918:	1d33      	adds	r3, r6, #4
 800291a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291c:	6838      	ldr	r0, [r7, #0]
 800291e:	f004 fcd7 	bl	80072d0 <USB_CoreInit>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0d7      	b.n	8002ae4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f004 fd3b 	bl	80073b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e04a      	b.n	80029dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	333d      	adds	r3, #61	; 0x3d
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	333c      	adds	r3, #60	; 0x3c
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	b298      	uxth	r0, r3
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3342      	adds	r3, #66	; 0x42
 8002982:	4602      	mov	r2, r0
 8002984:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	333f      	adds	r3, #63	; 0x3f
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3344      	adds	r3, #68	; 0x44
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3348      	adds	r3, #72	; 0x48
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3350      	adds	r3, #80	; 0x50
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	3301      	adds	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d3af      	bcc.n	8002946 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e044      	b.n	8002a76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	3301      	adds	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d3b5      	bcc.n	80029ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	687e      	ldr	r6, [r7, #4]
 8002a88:	466d      	mov	r5, sp
 8002a8a:	f106 0410 	add.w	r4, r6, #16
 8002a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a9e:	1d33      	adds	r3, r6, #4
 8002aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa2:	6838      	ldr	r0, [r7, #0]
 8002aa4:	f004 fcb2 	bl	800740c <USB_DevInit>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e014      	b.n	8002ae4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d102      	bne.n	8002ad8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f80a 	bl	8002aec <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 fe54 	bl	800778a <USB_DevDisconnect>

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	10000003 	.word	0x10000003

08002b34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002b3c:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d00a      	beq.n	8002b5e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b48:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e040      	b.n	8002bdc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e03e      	b.n	8002bdc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b66:	491f      	ldr	r1, [pc, #124]	; (8002be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b6e:	f7ff f8fb 	bl	8001d68 <HAL_GetTick>
 8002b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b74:	e009      	b.n	8002b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b76:	f7ff f8f7 	bl	8001d68 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b84:	d901      	bls.n	8002b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e028      	b.n	8002bdc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b96:	d1ee      	bne.n	8002b76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b1e      	cmp	r3, #30
 8002b9c:	d008      	beq.n	8002bb0 <HAL_PWREx_ConfigSupply+0x7c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ba2:	d005      	beq.n	8002bb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b1d      	cmp	r3, #29
 8002ba8:	d002      	beq.n	8002bb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b2d      	cmp	r3, #45	; 0x2d
 8002bae:	d114      	bne.n	8002bda <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002bb0:	f7ff f8da 	bl	8001d68 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bb6:	e009      	b.n	8002bcc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bb8:	f7ff f8d6 	bl	8001d68 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc6:	d901      	bls.n	8002bcc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e007      	b.n	8002bdc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d1ee      	bne.n	8002bb8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	58024800 	.word	0x58024800

08002be8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	60d3      	str	r3, [r2, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	58024800 	.word	0x58024800

08002c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08c      	sub	sp, #48	; 0x30
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e3ff      	b.n	800341a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8087 	beq.w	8002d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c28:	4b99      	ldr	r3, [pc, #612]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c32:	4b97      	ldr	r3, [pc, #604]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	2b10      	cmp	r3, #16
 8002c3c:	d007      	beq.n	8002c4e <HAL_RCC_OscConfig+0x46>
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	2b18      	cmp	r3, #24
 8002c42:	d110      	bne.n	8002c66 <HAL_RCC_OscConfig+0x5e>
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d10b      	bne.n	8002c66 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4e:	4b90      	ldr	r3, [pc, #576]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d06c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x12c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d168      	bne.n	8002d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e3d9      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x76>
 8002c70:	4b87      	ldr	r3, [pc, #540]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a86      	ldr	r2, [pc, #536]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e02e      	b.n	8002cdc <HAL_RCC_OscConfig+0xd4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x98>
 8002c86:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a81      	ldr	r2, [pc, #516]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7e      	ldr	r2, [pc, #504]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xd4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xbc>
 8002caa:	4b79      	ldr	r3, [pc, #484]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a78      	ldr	r2, [pc, #480]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b76      	ldr	r3, [pc, #472]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a75      	ldr	r2, [pc, #468]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xd4>
 8002cc4:	4b72      	ldr	r3, [pc, #456]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a71      	ldr	r2, [pc, #452]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6e      	ldr	r2, [pc, #440]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7ff f840 	bl	8001d68 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cec:	f7ff f83c 	bl	8001d68 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e38d      	b.n	800341a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cfe:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xe4>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7ff f82c 	bl	8001d68 <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7ff f828 	bl	8001d68 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e379      	b.n	800341a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d26:	4b5a      	ldr	r3, [pc, #360]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x10c>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80ae 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d44:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d4e:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_RCC_OscConfig+0x162>
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	2b18      	cmp	r3, #24
 8002d5e:	d13a      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x1ce>
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d135      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d6a:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_RCC_OscConfig+0x17a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e34b      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	f7ff f81f 	bl	8001dc4 <HAL_GetREVID>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d817      	bhi.n	8002dc0 <HAL_RCC_OscConfig+0x1b8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d108      	bne.n	8002daa <HAL_RCC_OscConfig+0x1a2>
 8002d98:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002da0:	4a3b      	ldr	r2, [pc, #236]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da8:	e07a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	031b      	lsls	r3, r3, #12
 8002db8:	4935      	ldr	r1, [pc, #212]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dbe:	e06f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	4930      	ldr	r1, [pc, #192]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd4:	e064      	b.n	8002ea0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d045      	beq.n	8002e6a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 0219 	bic.w	r2, r3, #25
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4929      	ldr	r1, [pc, #164]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe ffba 	bl	8001d68 <HAL_GetTick>
 8002df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df8:	f7fe ffb6 	bl	8001d68 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e307      	b.n	800341a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e0a:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	f7fe ffd5 	bl	8001dc4 <HAL_GetREVID>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d817      	bhi.n	8002e54 <HAL_RCC_OscConfig+0x24c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d108      	bne.n	8002e3e <HAL_RCC_OscConfig+0x236>
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e34:	4a16      	ldr	r2, [pc, #88]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3a:	6053      	str	r3, [r2, #4]
 8002e3c:	e030      	b.n	8002ea0 <HAL_RCC_OscConfig+0x298>
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	031b      	lsls	r3, r3, #12
 8002e4c:	4910      	ldr	r1, [pc, #64]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
 8002e52:	e025      	b.n	8002ea0 <HAL_RCC_OscConfig+0x298>
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	490b      	ldr	r1, [pc, #44]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
 8002e68:	e01a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <HAL_RCC_OscConfig+0x288>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe ff77 	bl	8001d68 <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe ff73 	bl	8001d68 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d903      	bls.n	8002e94 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e2c4      	b.n	800341a <HAL_RCC_OscConfig+0x812>
 8002e90:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e94:	4ba4      	ldr	r3, [pc, #656]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ee      	bne.n	8002e7e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80a9 	beq.w	8003000 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eae:	4b9e      	ldr	r3, [pc, #632]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eb8:	4b9b      	ldr	r3, [pc, #620]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d007      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x2cc>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b18      	cmp	r3, #24
 8002ec8:	d13a      	bne.n	8002f40 <HAL_RCC_OscConfig+0x338>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d135      	bne.n	8002f40 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ed4:	4b94      	ldr	r3, [pc, #592]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_OscConfig+0x2e4>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e296      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002eec:	f7fe ff6a 	bl	8001dc4 <HAL_GetREVID>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d817      	bhi.n	8002f2a <HAL_RCC_OscConfig+0x322>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_OscConfig+0x30c>
 8002f02:	4b89      	ldr	r3, [pc, #548]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f0a:	4a87      	ldr	r2, [pc, #540]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f12:	e075      	b.n	8003000 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f14:	4b84      	ldr	r3, [pc, #528]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	069b      	lsls	r3, r3, #26
 8002f22:	4981      	ldr	r1, [pc, #516]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f28:	e06a      	b.n	8003000 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	061b      	lsls	r3, r3, #24
 8002f38:	497b      	ldr	r1, [pc, #492]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f3e:	e05f      	b.n	8003000 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d042      	beq.n	8002fce <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f48:	4b77      	ldr	r3, [pc, #476]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a76      	ldr	r2, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe ff08 	bl	8001d68 <HAL_GetTick>
 8002f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f5c:	f7fe ff04 	bl	8001d68 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e255      	b.n	800341a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f6e:	4b6e      	ldr	r3, [pc, #440]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f7a:	f7fe ff23 	bl	8001dc4 <HAL_GetREVID>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d817      	bhi.n	8002fb8 <HAL_RCC_OscConfig+0x3b0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d108      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x39a>
 8002f90:	4b65      	ldr	r3, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f98:	4a63      	ldr	r2, [pc, #396]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002f9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f9e:	6053      	str	r3, [r2, #4]
 8002fa0:	e02e      	b.n	8003000 <HAL_RCC_OscConfig+0x3f8>
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	069b      	lsls	r3, r3, #26
 8002fb0:	495d      	ldr	r1, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
 8002fb6:	e023      	b.n	8003000 <HAL_RCC_OscConfig+0x3f8>
 8002fb8:	4b5b      	ldr	r3, [pc, #364]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	4958      	ldr	r1, [pc, #352]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60cb      	str	r3, [r1, #12]
 8002fcc:	e018      	b.n	8003000 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fce:	4b56      	ldr	r3, [pc, #344]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a55      	ldr	r2, [pc, #340]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7fe fec5 	bl	8001d68 <HAL_GetTick>
 8002fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002fe2:	f7fe fec1 	bl	8001d68 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e212      	b.n	800341a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d036      	beq.n	800307a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d019      	beq.n	8003048 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003014:	4b44      	ldr	r3, [pc, #272]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8003016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003018:	4a43      	ldr	r2, [pc, #268]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fe fea2 	bl	8001d68 <HAL_GetTick>
 8003024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003028:	f7fe fe9e 	bl	8001d68 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e1ef      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x420>
 8003046:	e018      	b.n	800307a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003048:	4b37      	ldr	r3, [pc, #220]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	4a36      	ldr	r2, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe fe88 	bl	8001d68 <HAL_GetTick>
 8003058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe fe84 	bl	8001d68 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1d5      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800306e:	4b2e      	ldr	r3, [pc, #184]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d036      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d019      	beq.n	80030c2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a25      	ldr	r2, [pc, #148]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 8003094:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003098:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800309a:	f7fe fe65 	bl	8001d68 <HAL_GetTick>
 800309e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030a2:	f7fe fe61 	bl	8001d68 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1b2      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x49a>
 80030c0:	e018      	b.n	80030f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a18      	ldr	r2, [pc, #96]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 80030c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fe4b 	bl	8001d68 <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030d6:	f7fe fe47 	bl	8001d68 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e198      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <HAL_RCC_OscConfig+0x520>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8085 	beq.w	800320c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_OscConfig+0x524>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <HAL_RCC_OscConfig+0x524>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800310e:	f7fe fe2b 	bl	8001d68 <HAL_GetTick>
 8003112:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003114:	e00c      	b.n	8003130 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fe fe27 	bl	8001d68 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d905      	bls.n	8003130 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e178      	b.n	800341a <HAL_RCC_OscConfig+0x812>
 8003128:	58024400 	.word	0x58024400
 800312c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003130:	4b96      	ldr	r3, [pc, #600]	; (800338c <HAL_RCC_OscConfig+0x784>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ec      	beq.n	8003116 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x54a>
 8003144:	4b92      	ldr	r3, [pc, #584]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	4a91      	ldr	r2, [pc, #580]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6713      	str	r3, [r2, #112]	; 0x70
 8003150:	e02d      	b.n	80031ae <HAL_RCC_OscConfig+0x5a6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x56c>
 800315a:	4b8d      	ldr	r3, [pc, #564]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a8c      	ldr	r2, [pc, #560]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
 8003166:	4b8a      	ldr	r3, [pc, #552]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	4a89      	ldr	r2, [pc, #548]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800316c:	f023 0304 	bic.w	r3, r3, #4
 8003170:	6713      	str	r3, [r2, #112]	; 0x70
 8003172:	e01c      	b.n	80031ae <HAL_RCC_OscConfig+0x5a6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d10c      	bne.n	8003196 <HAL_RCC_OscConfig+0x58e>
 800317c:	4b84      	ldr	r3, [pc, #528]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a83      	ldr	r2, [pc, #524]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
 8003188:	4b81      	ldr	r3, [pc, #516]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a80      	ldr	r2, [pc, #512]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	e00b      	b.n	80031ae <HAL_RCC_OscConfig+0x5a6>
 8003196:	4b7e      	ldr	r3, [pc, #504]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a7d      	ldr	r2, [pc, #500]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	4b7b      	ldr	r3, [pc, #492]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	4a7a      	ldr	r2, [pc, #488]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80031a8:	f023 0304 	bic.w	r3, r3, #4
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d015      	beq.n	80031e2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fe fdd7 	bl	8001d68 <HAL_GetTick>
 80031ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fe fdd3 	bl	8001d68 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e122      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d4:	4b6e      	ldr	r3, [pc, #440]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ee      	beq.n	80031be <HAL_RCC_OscConfig+0x5b6>
 80031e0:	e014      	b.n	800320c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe fdc1 	bl	8001d68 <HAL_GetTick>
 80031e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fe fdbd 	bl	8001d68 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e10c      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003200:	4b63      	ldr	r3, [pc, #396]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ee      	bne.n	80031ea <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8101 	beq.w	8003418 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003216:	4b5e      	ldr	r3, [pc, #376]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800321e:	2b18      	cmp	r3, #24
 8003220:	f000 80bc 	beq.w	800339c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b02      	cmp	r3, #2
 800322a:	f040 8095 	bne.w	8003358 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b58      	ldr	r3, [pc, #352]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a57      	ldr	r2, [pc, #348]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe fd95 	bl	8001d68 <HAL_GetTick>
 800323e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003242:	f7fe fd91 	bl	8001d68 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0e2      	b.n	800341a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003254:	4b4e      	ldr	r3, [pc, #312]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f0      	bne.n	8003242 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003260:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_RCC_OscConfig+0x78c>)
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	430a      	orrs	r2, r1
 8003274:	4946      	ldr	r1, [pc, #280]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003276:	4313      	orrs	r3, r2
 8003278:	628b      	str	r3, [r1, #40]	; 0x28
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	3b01      	subs	r3, #1
 8003280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	3b01      	subs	r3, #1
 800328a:	025b      	lsls	r3, r3, #9
 800328c:	b29b      	uxth	r3, r3
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	3b01      	subs	r3, #1
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	3b01      	subs	r3, #1
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032aa:	4939      	ldr	r1, [pc, #228]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80032b0:	4b37      	ldr	r3, [pc, #220]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	4a36      	ldr	r2, [pc, #216]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032bc:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_RCC_OscConfig+0x790>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032c8:	00d2      	lsls	r2, r2, #3
 80032ca:	4931      	ldr	r1, [pc, #196]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032d0:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	f023 020c 	bic.w	r2, r3, #12
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	492c      	ldr	r1, [pc, #176]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032e2:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	f023 0202 	bic.w	r2, r3, #2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4928      	ldr	r1, [pc, #160]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032f4:	4b26      	ldr	r3, [pc, #152]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	4a25      	ldr	r2, [pc, #148]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003300:	4b23      	ldr	r3, [pc, #140]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	4a22      	ldr	r2, [pc, #136]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003324:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a19      	ldr	r2, [pc, #100]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fd1a 	bl	8001d68 <HAL_GetTick>
 8003334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003338:	f7fe fd16 	bl	8001d68 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e067      	b.n	800341a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x730>
 8003356:	e05f      	b.n	8003418 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fd00 	bl	8001d68 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fcfc 	bl	8001d68 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e04d      	b.n	800341a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <HAL_RCC_OscConfig+0x788>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x764>
 800338a:	e045      	b.n	8003418 <HAL_RCC_OscConfig+0x810>
 800338c:	58024800 	.word	0x58024800
 8003390:	58024400 	.word	0x58024400
 8003394:	fffffc0c 	.word	0xfffffc0c
 8003398:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <HAL_RCC_OscConfig+0x81c>)
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033a2:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_RCC_OscConfig+0x81c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d031      	beq.n	8003414 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f003 0203 	and.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d12a      	bne.n	8003414 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d122      	bne.n	8003414 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d11a      	bne.n	8003414 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	0a5b      	lsrs	r3, r3, #9
 80033e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d111      	bne.n	8003414 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	0c1b      	lsrs	r3, r3, #16
 80033f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d108      	bne.n	8003414 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	0e1b      	lsrs	r3, r3, #24
 8003406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3730      	adds	r7, #48	; 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	58024400 	.word	0x58024400

08003428 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e19c      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b8a      	ldr	r3, [pc, #552]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d910      	bls.n	800346c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b87      	ldr	r3, [pc, #540]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 020f 	bic.w	r2, r3, #15
 8003452:	4985      	ldr	r1, [pc, #532]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b83      	ldr	r3, [pc, #524]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e184      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d010      	beq.n	800349a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	4b7b      	ldr	r3, [pc, #492]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003484:	429a      	cmp	r2, r3
 8003486:	d908      	bls.n	800349a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003488:	4b78      	ldr	r3, [pc, #480]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	4975      	ldr	r1, [pc, #468]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003496:	4313      	orrs	r3, r2
 8003498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	4b70      	ldr	r3, [pc, #448]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d908      	bls.n	80034c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	496a      	ldr	r1, [pc, #424]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d010      	beq.n	80034f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699a      	ldr	r2, [r3, #24]
 80034d8:	4b64      	ldr	r3, [pc, #400]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d908      	bls.n	80034f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034e4:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	495e      	ldr	r1, [pc, #376]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800350e:	429a      	cmp	r2, r3
 8003510:	d908      	bls.n	8003524 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003512:	4b56      	ldr	r3, [pc, #344]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	4953      	ldr	r1, [pc, #332]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003520:	4313      	orrs	r3, r2
 8003522:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	4b4d      	ldr	r3, [pc, #308]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	429a      	cmp	r2, r3
 800353e:	d908      	bls.n	8003552 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003540:	4b4a      	ldr	r3, [pc, #296]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f023 020f 	bic.w	r2, r3, #15
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4947      	ldr	r1, [pc, #284]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800354e:	4313      	orrs	r3, r2
 8003550:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d055      	beq.n	800360a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800355e:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4940      	ldr	r1, [pc, #256]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800356c:	4313      	orrs	r3, r2
 800356e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d107      	bne.n	8003588 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003578:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d121      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0f6      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003590:	4b36      	ldr	r3, [pc, #216]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d115      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0ea      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035a8:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0de      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b8:	4b2c      	ldr	r3, [pc, #176]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0d6      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f023 0207 	bic.w	r2, r3, #7
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4925      	ldr	r1, [pc, #148]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fe fbc5 	bl	8001d68 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e2:	f7fe fbc1 	bl	8001d68 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0be      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	429a      	cmp	r2, r3
 8003608:	d1eb      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d010      	beq.n	8003638 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	429a      	cmp	r2, r3
 8003624:	d208      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f023 020f 	bic.w	r2, r3, #15
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	490e      	ldr	r1, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x244>)
 8003634:	4313      	orrs	r3, r2
 8003636:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d214      	bcs.n	8003670 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 020f 	bic.w	r2, r3, #15
 800364e:	4906      	ldr	r1, [pc, #24]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_RCC_ClockConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e086      	b.n	8003776 <HAL_RCC_ClockConfig+0x34e>
 8003668:	52002000 	.word	0x52002000
 800366c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	4b3f      	ldr	r3, [pc, #252]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003688:	429a      	cmp	r2, r3
 800368a:	d208      	bcs.n	800369e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800368c:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4939      	ldr	r1, [pc, #228]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 800369a:	4313      	orrs	r3, r2
 800369c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d208      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	492e      	ldr	r1, [pc, #184]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d208      	bcs.n	80036fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4922      	ldr	r1, [pc, #136]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003712:	429a      	cmp	r2, r3
 8003714:	d208      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4917      	ldr	r1, [pc, #92]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003724:	4313      	orrs	r3, r2
 8003726:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003728:	f000 f834 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 800372c:	4601      	mov	r1, r0
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	4a12      	ldr	r2, [pc, #72]	; (8003784 <HAL_RCC_ClockConfig+0x35c>)
 800373a:	5cd3      	ldrb	r3, [r2, r3]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	fa21 f303 	lsr.w	r3, r1, r3
 8003744:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_RCC_ClockConfig+0x358>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <HAL_RCC_ClockConfig+0x35c>)
 8003750:	5cd3      	ldrb	r3, [r2, r3]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <HAL_RCC_ClockConfig+0x360>)
 800375e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x364>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x368>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fab2 	bl	8001cd4 <HAL_InitTick>
 8003770:	4603      	mov	r3, r0
 8003772:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	58024400 	.word	0x58024400
 8003784:	0800ad60 	.word	0x0800ad60
 8003788:	20000004 	.word	0x20000004
 800378c:	20000000 	.word	0x20000000
 8003790:	2000000c 	.word	0x2000000c

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379a:	4baf      	ldr	r3, [pc, #700]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037a2:	2b18      	cmp	r3, #24
 80037a4:	f200 814e 	bhi.w	8003a44 <HAL_RCC_GetSysClockFreq+0x2b0>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	08003815 	.word	0x08003815
 80037b4:	08003a45 	.word	0x08003a45
 80037b8:	08003a45 	.word	0x08003a45
 80037bc:	08003a45 	.word	0x08003a45
 80037c0:	08003a45 	.word	0x08003a45
 80037c4:	08003a45 	.word	0x08003a45
 80037c8:	08003a45 	.word	0x08003a45
 80037cc:	08003a45 	.word	0x08003a45
 80037d0:	0800383b 	.word	0x0800383b
 80037d4:	08003a45 	.word	0x08003a45
 80037d8:	08003a45 	.word	0x08003a45
 80037dc:	08003a45 	.word	0x08003a45
 80037e0:	08003a45 	.word	0x08003a45
 80037e4:	08003a45 	.word	0x08003a45
 80037e8:	08003a45 	.word	0x08003a45
 80037ec:	08003a45 	.word	0x08003a45
 80037f0:	08003841 	.word	0x08003841
 80037f4:	08003a45 	.word	0x08003a45
 80037f8:	08003a45 	.word	0x08003a45
 80037fc:	08003a45 	.word	0x08003a45
 8003800:	08003a45 	.word	0x08003a45
 8003804:	08003a45 	.word	0x08003a45
 8003808:	08003a45 	.word	0x08003a45
 800380c:	08003a45 	.word	0x08003a45
 8003810:	08003847 	.word	0x08003847
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003814:	4b90      	ldr	r3, [pc, #576]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003820:	4b8d      	ldr	r3, [pc, #564]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	08db      	lsrs	r3, r3, #3
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	4a8c      	ldr	r2, [pc, #560]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
 8003830:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003832:	e10a      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003834:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003836:	61bb      	str	r3, [r7, #24]
    break;
 8003838:	e107      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800383a:	4b89      	ldr	r3, [pc, #548]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800383c:	61bb      	str	r3, [r7, #24]
    break;
 800383e:	e104      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003840:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003842:	61bb      	str	r3, [r7, #24]
    break;
 8003844:	e101      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003846:	4b84      	ldr	r3, [pc, #528]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003850:	4b81      	ldr	r3, [pc, #516]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800385a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800385c:	4b7e      	ldr	r3, [pc, #504]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003866:	4b7c      	ldr	r3, [pc, #496]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	08db      	lsrs	r3, r3, #3
 800386c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80da 	beq.w	8003a3e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d05a      	beq.n	8003946 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003890:	2b01      	cmp	r3, #1
 8003892:	d302      	bcc.n	800389a <HAL_RCC_GetSysClockFreq+0x106>
 8003894:	2b02      	cmp	r3, #2
 8003896:	d078      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003898:	e099      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800389a:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02d      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038a6:	4b6c      	ldr	r3, [pc, #432]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	08db      	lsrs	r3, r3, #3
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	4a6a      	ldr	r2, [pc, #424]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d0:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80038e4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>
 80038e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003900:	e087      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	ee07 3a90 	vmov	s15, r3
 8003908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003a6c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003914:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003924:	ed97 6a02 	vldr	s12, [r7, #8]
 8003928:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>
 800392c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800393c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003940:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003944:	e065      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	ee07 3a90 	vmov	s15, r3
 800394c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003950:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003a70 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003958:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003968:	ed97 6a02 	vldr	s12, [r7, #8]
 800396c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800397c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003984:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003988:	e043      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003994:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003a74 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399c:	4b2e      	ldr	r3, [pc, #184]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80039b0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>
 80039b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039cc:	e021      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003a70 <HAL_RCC_GetSysClockFreq+0x2dc>
 80039dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e8:	ee07 3a90 	vmov	s15, r3
 80039ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80039f4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003a68 <HAL_RCC_GetSysClockFreq+0x2d4>
 80039f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a10:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	0a5b      	lsrs	r3, r3, #9
 8003a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a36:	ee17 3a90 	vmov	r3, s15
 8003a3a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003a3c:	e005      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
    break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003a46:	61bb      	str	r3, [r7, #24]
    break;
 8003a48:	bf00      	nop
  }

  return sysclockfreq;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3724      	adds	r7, #36	; 0x24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	58024400 	.word	0x58024400
 8003a5c:	03d09000 	.word	0x03d09000
 8003a60:	003d0900 	.word	0x003d0900
 8003a64:	02625a00 	.word	0x02625a00
 8003a68:	46000000 	.word	0x46000000
 8003a6c:	4c742400 	.word	0x4c742400
 8003a70:	4a742400 	.word	0x4a742400
 8003a74:	4c189680 	.word	0x4c189680

08003a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a7e:	f7ff fe89 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003a82:	4601      	mov	r1, r0
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	4a0f      	ldr	r2, [pc, #60]	; (8003acc <HAL_RCC_GetHCLKFreq+0x54>)
 8003a90:	5cd3      	ldrb	r3, [r2, r3]
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	fa21 f303 	lsr.w	r3, r1, r3
 8003a9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	4a09      	ldr	r2, [pc, #36]	; (8003acc <HAL_RCC_GetHCLKFreq+0x54>)
 8003aa6:	5cd3      	ldrb	r3, [r2, r3]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ab4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	58024400 	.word	0x58024400
 8003acc:	0800ad60 	.word	0x0800ad60
 8003ad0:	20000004 	.word	0x20000004
 8003ad4:	20000000 	.word	0x20000000

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003adc:	f7ff ffcc 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4601      	mov	r1, r0
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	58024400 	.word	0x58024400
 8003b00:	0800ad60 	.word	0x0800ad60

08003b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b08:	f7ff ffb6 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003b0c:	4601      	mov	r1, r0
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	58024400 	.word	0x58024400
 8003b2c:	0800ad60 	.word	0x0800ad60

08003b30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b38:	2300      	movs	r3, #0
 8003b3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d03d      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b54:	d013      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5a:	d802      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003b60:	e01f      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b66:	d013      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003b68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b6c:	d01c      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003b6e:	e018      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b70:	4baf      	ldr	r3, [pc, #700]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4aae      	ldr	r2, [pc, #696]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b7c:	e015      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2102      	movs	r1, #2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 f96f 	bl	8004e68 <RCCEx_PLL2_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b8e:	e00c      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3324      	adds	r3, #36	; 0x24
 8003b94:	2102      	movs	r1, #2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 fa18 	bl	8004fcc <RCCEx_PLL3_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ba0:	e003      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003bb0:	4b9f      	ldr	r3, [pc, #636]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bbc:	499c      	ldr	r1, [pc, #624]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	650b      	str	r3, [r1, #80]	; 0x50
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d03d      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d826      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003bf9 	.word	0x08003bf9
 8003be8:	08003c07 	.word	0x08003c07
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c31 	.word	0x08003c31
 8003bf4:	08003c31 	.word	0x08003c31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf8:	4b8d      	ldr	r3, [pc, #564]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	4a8c      	ldr	r2, [pc, #560]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c04:	e015      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 f92b 	bl	8004e68 <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c16:	e00c      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3324      	adds	r3, #36	; 0x24
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 f9d4 	bl	8004fcc <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c28:	e003      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c38:	4b7d      	ldr	r3, [pc, #500]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	f023 0207 	bic.w	r2, r3, #7
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	497a      	ldr	r1, [pc, #488]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	650b      	str	r3, [r1, #80]	; 0x50
 8003c4a:	e001      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d03e      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	2b80      	cmp	r3, #128	; 0x80
 8003c62:	d01c      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d804      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d00d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c70:	e01e      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003c72:	2bc0      	cmp	r3, #192	; 0xc0
 8003c74:	d01f      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7a:	d01e      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c7c:	e018      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c7e:	4b6c      	ldr	r3, [pc, #432]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	4a6b      	ldr	r2, [pc, #428]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c8a:	e017      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 f8e8 	bl	8004e68 <RCCEx_PLL2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c9c:	e00e      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3324      	adds	r3, #36	; 0x24
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 f991 	bl	8004fcc <RCCEx_PLL3_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cae:	e005      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb4:	e002      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003cc2:	4b5b      	ldr	r3, [pc, #364]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	4958      	ldr	r1, [pc, #352]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	650b      	str	r3, [r1, #80]	; 0x50
 8003cd4:	e001      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d044      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf0:	d01f      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf6:	d805      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d00:	d00e      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003d02:	e01f      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003d04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d08:	d01f      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003d0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d0e:	d01e      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d10:	e018      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	4a46      	ldr	r2, [pc, #280]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d1e:	e017      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f89e 	bl	8004e68 <RCCEx_PLL2_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d30:	e00e      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3324      	adds	r3, #36	; 0x24
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 f947 	bl	8004fcc <RCCEx_PLL3_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d42:	e005      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
      break;
 8003d48:	e002      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d64:	4932      	ldr	r1, [pc, #200]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	658b      	str	r3, [r1, #88]	; 0x58
 8003d6a:	e001      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d044      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d86:	d01f      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d8c:	d805      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003d92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d96:	d00e      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003d98:	e01f      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003d9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d9e:	d01f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da4:	d01e      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003da6:	e018      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a20      	ldr	r2, [pc, #128]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003db4:	e017      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 f853 	bl	8004e68 <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003dc6:	e00e      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3324      	adds	r3, #36	; 0x24
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 f8fc 	bl	8004fcc <RCCEx_PLL3_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dd8:	e005      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dde:	e002      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dfa:	490d      	ldr	r1, [pc, #52]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	658b      	str	r3, [r1, #88]	; 0x58
 8003e00:	e001      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d035      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d00c      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d802      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003e22:	e017      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d00c      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003e28:	2b30      	cmp	r3, #48	; 0x30
 8003e2a:	d018      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003e2c:	e012      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003e2e:	bf00      	nop
 8003e30:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e34:	4baf      	ldr	r3, [pc, #700]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4aae      	ldr	r2, [pc, #696]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e40:	e00e      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2102      	movs	r1, #2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f80d 	bl	8004e68 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e52:	e005      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	e002      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e66:	4ba3      	ldr	r3, [pc, #652]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	49a0      	ldr	r1, [pc, #640]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d042      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e92:	d01f      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e98:	d805      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003ea4:	e01f      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003ea6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eaa:	d01f      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eb0:	d01e      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003eb2:	e018      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb4:	4b8f      	ldr	r3, [pc, #572]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	4a8e      	ldr	r2, [pc, #568]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ec0:	e017      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 ffcd 	bl	8004e68 <RCCEx_PLL2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ed2:	e00e      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3324      	adds	r3, #36	; 0x24
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f876 	bl	8004fcc <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eea:	e002      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003eec:	bf00      	nop
 8003eee:	e000      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d109      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ef8:	4b7e      	ldr	r3, [pc, #504]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	497b      	ldr	r1, [pc, #492]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	650b      	str	r3, [r1, #80]	; 0x50
 8003f0a:	e001      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d042      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f24:	d01b      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f2a:	d805      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d022      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003f36:	e01b      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003f38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f3c:	d01d      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003f3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f42:	d01c      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003f44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f48:	d01b      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003f4a:	e011      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	2101      	movs	r1, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 ff88 	bl	8004e68 <RCCEx_PLL2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f5c:	e012      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3324      	adds	r3, #36	; 0x24
 8003f62:	2101      	movs	r1, #1
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 f831 	bl	8004fcc <RCCEx_PLL3_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f6e:	e009      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
      break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003f76:	bf00      	nop
 8003f78:	e004      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f8a:	4b5a      	ldr	r3, [pc, #360]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f96:	4957      	ldr	r1, [pc, #348]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	650b      	str	r3, [r1, #80]	; 0x50
 8003f9c:	e001      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d044      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb8:	d01b      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fbe:	d805      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d022      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003fca:	e01b      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd0:	d01d      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fd6:	d01c      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003fd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fdc:	d01b      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003fde:	e011      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 ff3e 	bl	8004e68 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ff0:	e012      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3324      	adds	r3, #36	; 0x24
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 ffe7 	bl	8004fcc <RCCEx_PLL3_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004002:	e009      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
      break;
 8004008:	e006      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800400a:	bf00      	nop
 800400c:	e004      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800400e:	bf00      	nop
 8004010:	e002      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004018:	7dfb      	ldrb	r3, [r7, #23]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800401e:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800402c:	4931      	ldr	r1, [pc, #196]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	658b      	str	r3, [r1, #88]	; 0x58
 8004032:	e001      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02d      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404c:	d005      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800404e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004052:	d009      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004058:	e00f      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004066:	e00c      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2101      	movs	r1, #1
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fefa 	bl	8004e68 <RCCEx_PLL2_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004078:	e003      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
      break;
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004088:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004094:	4917      	ldr	r1, [pc, #92]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	650b      	str	r3, [r1, #80]	; 0x50
 800409a:	e001      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d035      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d81b      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040f9 	.word	0x080040f9
 80040c0:	080040cd 	.word	0x080040cd
 80040c4:	080040db 	.word	0x080040db
 80040c8:	080040f9 	.word	0x080040f9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040d8:	e00f      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3304      	adds	r3, #4
 80040de:	2102      	movs	r1, #2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fec1 	bl	8004e68 <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80040ea:	e006      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	75fb      	strb	r3, [r7, #23]
      break;
 80040f0:	e003      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80040f2:	bf00      	nop
 80040f4:	58024400 	.word	0x58024400
      break;
 80040f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004100:	4bba      	ldr	r3, [pc, #744]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	f023 0203 	bic.w	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	49b7      	ldr	r1, [pc, #732]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004112:	e001      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8086 	beq.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004126:	4bb2      	ldr	r3, [pc, #712]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4ab1      	ldr	r2, [pc, #708]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004130:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004132:	f7fd fe19 	bl	8001d68 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004138:	e009      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413a:	f7fd fe15 	bl	8001d68 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b64      	cmp	r3, #100	; 0x64
 8004146:	d902      	bls.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	75fb      	strb	r3, [r7, #23]
        break;
 800414c:	e005      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800414e:	4ba8      	ldr	r3, [pc, #672]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ef      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d166      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004160:	4ba2      	ldr	r3, [pc, #648]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004162:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800416a:	4053      	eors	r3, r2
 800416c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004170:	2b00      	cmp	r3, #0
 8004172:	d013      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004174:	4b9d      	ldr	r3, [pc, #628]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800417e:	4b9b      	ldr	r3, [pc, #620]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4a9a      	ldr	r2, [pc, #616]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800418a:	4b98      	ldr	r3, [pc, #608]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a97      	ldr	r2, [pc, #604]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004196:	4a95      	ldr	r2, [pc, #596]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a6:	d115      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd fdde 	bl	8001d68 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ae:	e00b      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fd fdda 	bl	8001d68 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d902      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	75fb      	strb	r3, [r7, #23]
            break;
 80041c6:	e005      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041c8:	4b88      	ldr	r3, [pc, #544]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ed      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d126      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e8:	d10d      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80041ea:	4b80      	ldr	r3, [pc, #512]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041f8:	0919      	lsrs	r1, r3, #4
 80041fa:	4b7e      	ldr	r3, [pc, #504]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80041fc:	400b      	ands	r3, r1
 80041fe:	497b      	ldr	r1, [pc, #492]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	610b      	str	r3, [r1, #16]
 8004204:	e005      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004206:	4b79      	ldr	r3, [pc, #484]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	4a78      	ldr	r2, [pc, #480]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800420c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004210:	6113      	str	r3, [r2, #16]
 8004212:	4b76      	ldr	r3, [pc, #472]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004214:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	4972      	ldr	r1, [pc, #456]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	670b      	str	r3, [r1, #112]	; 0x70
 8004226:	e004      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	75bb      	strb	r3, [r7, #22]
 800422c:	e001      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422e:	7dfb      	ldrb	r3, [r7, #23]
 8004230:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d07d      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004242:	2b28      	cmp	r3, #40	; 0x28
 8004244:	d866      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004246:	a201      	add	r2, pc, #4	; (adr r2, 800424c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424c:	0800431b 	.word	0x0800431b
 8004250:	08004315 	.word	0x08004315
 8004254:	08004315 	.word	0x08004315
 8004258:	08004315 	.word	0x08004315
 800425c:	08004315 	.word	0x08004315
 8004260:	08004315 	.word	0x08004315
 8004264:	08004315 	.word	0x08004315
 8004268:	08004315 	.word	0x08004315
 800426c:	080042f1 	.word	0x080042f1
 8004270:	08004315 	.word	0x08004315
 8004274:	08004315 	.word	0x08004315
 8004278:	08004315 	.word	0x08004315
 800427c:	08004315 	.word	0x08004315
 8004280:	08004315 	.word	0x08004315
 8004284:	08004315 	.word	0x08004315
 8004288:	08004315 	.word	0x08004315
 800428c:	08004303 	.word	0x08004303
 8004290:	08004315 	.word	0x08004315
 8004294:	08004315 	.word	0x08004315
 8004298:	08004315 	.word	0x08004315
 800429c:	08004315 	.word	0x08004315
 80042a0:	08004315 	.word	0x08004315
 80042a4:	08004315 	.word	0x08004315
 80042a8:	08004315 	.word	0x08004315
 80042ac:	0800431b 	.word	0x0800431b
 80042b0:	08004315 	.word	0x08004315
 80042b4:	08004315 	.word	0x08004315
 80042b8:	08004315 	.word	0x08004315
 80042bc:	08004315 	.word	0x08004315
 80042c0:	08004315 	.word	0x08004315
 80042c4:	08004315 	.word	0x08004315
 80042c8:	08004315 	.word	0x08004315
 80042cc:	0800431b 	.word	0x0800431b
 80042d0:	08004315 	.word	0x08004315
 80042d4:	08004315 	.word	0x08004315
 80042d8:	08004315 	.word	0x08004315
 80042dc:	08004315 	.word	0x08004315
 80042e0:	08004315 	.word	0x08004315
 80042e4:	08004315 	.word	0x08004315
 80042e8:	08004315 	.word	0x08004315
 80042ec:	0800431b 	.word	0x0800431b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fdb6 	bl	8004e68 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004300:	e00c      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fe5f 	bl	8004fcc <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004312:	e003      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
      break;
 8004318:	e000      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800431a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004322:	4b32      	ldr	r3, [pc, #200]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800432e:	492f      	ldr	r1, [pc, #188]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	654b      	str	r3, [r1, #84]	; 0x54
 8004334:	e001      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d037      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434a:	2b05      	cmp	r3, #5
 800434c:	d820      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800434e:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	08004397 	.word	0x08004397
 8004358:	0800436d 	.word	0x0800436d
 800435c:	0800437f 	.word	0x0800437f
 8004360:	08004397 	.word	0x08004397
 8004364:	08004397 	.word	0x08004397
 8004368:	08004397 	.word	0x08004397
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fd78 	bl	8004e68 <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800437c:	e00c      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3324      	adds	r3, #36	; 0x24
 8004382:	2101      	movs	r1, #1
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fe21 	bl	8004fcc <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
      break;
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f023 0207 	bic.w	r2, r3, #7
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043aa:	4910      	ldr	r1, [pc, #64]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	654b      	str	r3, [r1, #84]	; 0x54
 80043b0:	e001      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d040      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d827      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80043cc:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	08004423 	.word	0x08004423
 80043d8:	080043f9 	.word	0x080043f9
 80043dc:	0800440b 	.word	0x0800440b
 80043e0:	08004423 	.word	0x08004423
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004423 	.word	0x08004423
 80043ec:	58024400 	.word	0x58024400
 80043f0:	58024800 	.word	0x58024800
 80043f4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2101      	movs	r1, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fd32 	bl	8004e68 <RCCEx_PLL2_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004408:	e00c      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3324      	adds	r3, #36	; 0x24
 800440e:	2101      	movs	r1, #1
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fddb 	bl	8004fcc <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	75fb      	strb	r3, [r7, #23]
      break;
 8004420:	e000      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800442a:	4bb2      	ldr	r3, [pc, #712]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f023 0207 	bic.w	r2, r3, #7
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	49ae      	ldr	r1, [pc, #696]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	658b      	str	r3, [r1, #88]	; 0x58
 800443e:	e001      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d044      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445a:	d01b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800445c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004460:	d805      	bhi.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d022      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800446c:	e01b      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004472:	d01d      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004478:	d01c      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800447a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800447e:	d01b      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004480:	e011      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fced 	bl	8004e68 <RCCEx_PLL2_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004492:	e012      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	2102      	movs	r1, #2
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fd96 	bl	8004fcc <RCCEx_PLL3_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044a4:	e009      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
      break;
 80044aa:	e006      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044ac:	bf00      	nop
 80044ae:	e004      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044c0:	4b8c      	ldr	r3, [pc, #560]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ce:	4989      	ldr	r1, [pc, #548]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	654b      	str	r3, [r1, #84]	; 0x54
 80044d4:	e001      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d044      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f0:	d01b      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f6:	d805      	bhi.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d022      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004502:	e01b      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004508:	d01d      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800450a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800450e:	d01c      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004510:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004514:	d01b      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004516:	e011      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fca2 	bl	8004e68 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004528:	e012      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3324      	adds	r3, #36	; 0x24
 800452e:	2102      	movs	r1, #2
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fd4b 	bl	8004fcc <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800453a:	e009      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	75fb      	strb	r3, [r7, #23]
      break;
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004542:	bf00      	nop
 8004544:	e004      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004546:	bf00      	nop
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800454e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004556:	4b67      	ldr	r3, [pc, #412]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004564:	4963      	ldr	r1, [pc, #396]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	658b      	str	r3, [r1, #88]	; 0x58
 800456a:	e001      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d044      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004586:	d01b      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800458c:	d805      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d022      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004598:	e01b      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800459a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459e:	d01d      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80045a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045a4:	d01c      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80045a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045aa:	d01b      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80045ac:	e011      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fc57 	bl	8004e68 <RCCEx_PLL2_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045be:	e012      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	2102      	movs	r1, #2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fd00 	bl	8004fcc <RCCEx_PLL3_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045d0:	e009      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
      break;
 80045d6:	e006      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80045d8:	bf00      	nop
 80045da:	e004      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80045dc:	bf00      	nop
 80045de:	e002      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80045e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045ec:	4b41      	ldr	r3, [pc, #260]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045fa:	493e      	ldr	r1, [pc, #248]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	658b      	str	r3, [r1, #88]	; 0x58
 8004600:	e001      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d10a      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3324      	adds	r3, #36	; 0x24
 8004622:	2102      	movs	r1, #2
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fcd1 	bl	8004fcc <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004634:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004638:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004642:	492c      	ldr	r1, [pc, #176]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465e:	d10a      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3324      	adds	r3, #36	; 0x24
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fcb0 	bl	8004fcc <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004676:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004684:	491b      	ldr	r1, [pc, #108]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d032      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a0:	d00d      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80046a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046a6:	d016      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d111      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fbd8 	bl	8004e68 <RCCEx_PLL2_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046bc:	e00c      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3324      	adds	r3, #36	; 0x24
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fc81 	bl	8004fcc <RCCEx_PLL3_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80046ce:	e003      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
      break;
 80046d4:	e000      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80046d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ec:	4901      	ldr	r1, [pc, #4]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	658b      	str	r3, [r1, #88]	; 0x58
 80046f2:	e003      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80046f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d02f      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004712:	d00c      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004718:	d015      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800471a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800471e:	d10f      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004720:	4b79      	ldr	r3, [pc, #484]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	4a78      	ldr	r2, [pc, #480]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800472c:	e00c      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3324      	adds	r3, #36	; 0x24
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fc49 	bl	8004fcc <RCCEx_PLL3_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800473e:	e003      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	75fb      	strb	r3, [r7, #23]
      break;
 8004744:	e000      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800474e:	4b6e      	ldr	r3, [pc, #440]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475c:	496a      	ldr	r1, [pc, #424]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800475e:	4313      	orrs	r3, r2
 8004760:	654b      	str	r3, [r1, #84]	; 0x54
 8004762:	e001      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d029      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004780:	d007      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004782:	e00f      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004784:	4b60      	ldr	r3, [pc, #384]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	4a5f      	ldr	r2, [pc, #380]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800478a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004790:	e00b      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3304      	adds	r3, #4
 8004796:	2102      	movs	r1, #2
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fb65 	bl	8004e68 <RCCEx_PLL2_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047a2:	e002      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	75fb      	strb	r3, [r7, #23]
      break;
 80047a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047b0:	4b55      	ldr	r3, [pc, #340]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047bc:	4952      	ldr	r1, [pc, #328]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3324      	adds	r3, #36	; 0x24
 80047d8:	2102      	movs	r1, #2
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fbf6 	bl	8004fcc <RCCEx_PLL3_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d02f      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fe:	d00c      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004804:	d802      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d011      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800480a:	e00d      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800480c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004810:	d00f      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004816:	d00e      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004818:	e006      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800481a:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	4a3a      	ldr	r2, [pc, #232]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004824:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004826:	e007      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
      break;
 800482c:	e004      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800483e:	4b32      	ldr	r3, [pc, #200]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484a:	492f      	ldr	r1, [pc, #188]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800484c:	4313      	orrs	r3, r2
 800484e:	654b      	str	r3, [r1, #84]	; 0x54
 8004850:	e001      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004866:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	4926      	ldr	r1, [pc, #152]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004870:	4313      	orrs	r3, r2
 8004872:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004880:	4b21      	ldr	r3, [pc, #132]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800488e:	491e      	ldr	r1, [pc, #120]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004890:	4313      	orrs	r3, r2
 8004892:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ac:	4916      	ldr	r1, [pc, #88]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	4a11      	ldr	r2, [pc, #68]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048c8:	6113      	str	r3, [r2, #16]
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048d4:	490c      	ldr	r1, [pc, #48]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da08      	bge.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ee:	4906      	ldr	r1, [pc, #24]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80048f4:	7dbb      	ldrb	r3, [r7, #22]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e000      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	58024400 	.word	0x58024400

0800490c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004910:	f7ff f8b2 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8004914:	4601      	mov	r1, r0
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4a04      	ldr	r2, [pc, #16]	; (8004934 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004922:	5cd3      	ldrb	r3, [r2, r3]
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	58024400 	.word	0x58024400
 8004934:	0800ad60 	.word	0x0800ad60

08004938 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	; 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004940:	4b9d      	ldr	r3, [pc, #628]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800494a:	4b9b      	ldr	r3, [pc, #620]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	0b1b      	lsrs	r3, r3, #12
 8004950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004954:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004956:	4b98      	ldr	r3, [pc, #608]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004962:	4b95      	ldr	r3, [pc, #596]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	08db      	lsrs	r3, r3, #3
 8004968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 810a 	beq.w	8004b9a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d05a      	beq.n	8004a42 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800498c:	2b01      	cmp	r3, #1
 800498e:	d302      	bcc.n	8004996 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004990:	2b02      	cmp	r3, #2
 8004992:	d078      	beq.n	8004a86 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004994:	e099      	b.n	8004aca <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004996:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d02d      	beq.n	80049fe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049a2:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	08db      	lsrs	r3, r3, #3
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	4a83      	ldr	r2, [pc, #524]	; (8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049cc:	4b7a      	ldr	r3, [pc, #488]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80049e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049fc:	e087      	b.n	8004b0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a08:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a10:	4b69      	ldr	r3, [pc, #420]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a18:	ee07 3a90 	vmov	s15, r3
 8004a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a20:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a24:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a40:	e065      	b.n	8004b0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a54:	4b58      	ldr	r3, [pc, #352]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a64:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a68:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a84:	e043      	b.n	8004b0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	ee07 3a90 	vmov	s15, r3
 8004a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a90:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a98:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa0:	ee07 3a90 	vmov	s15, r3
 8004aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aac:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ac8:	e021      	b.n	8004b0e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	ee07 3a90 	vmov	s15, r3
 8004ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004adc:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aec:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b0c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	0a5b      	lsrs	r3, r3, #9
 8004b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b34:	ee17 2a90 	vmov	r2, s15
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b62:	ee17 2a90 	vmov	r2, s15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	0e1b      	lsrs	r3, r3, #24
 8004b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b90:	ee17 2a90 	vmov	r2, s15
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b98:	e008      	b.n	8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	609a      	str	r2, [r3, #8]
}
 8004bac:	bf00      	nop
 8004bae:	3724      	adds	r7, #36	; 0x24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	58024400 	.word	0x58024400
 8004bbc:	03d09000 	.word	0x03d09000
 8004bc0:	46000000 	.word	0x46000000
 8004bc4:	4c742400 	.word	0x4c742400
 8004bc8:	4a742400 	.word	0x4a742400
 8004bcc:	4c189680 	.word	0x4c189680

08004bd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bd8:	4b9d      	ldr	r3, [pc, #628]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004be2:	4b9b      	ldr	r3, [pc, #620]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	0d1b      	lsrs	r3, r3, #20
 8004be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bee:	4b98      	ldr	r3, [pc, #608]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004bfa:	4b95      	ldr	r3, [pc, #596]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	08db      	lsrs	r3, r3, #3
 8004c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 810a 	beq.w	8004e32 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d05a      	beq.n	8004cda <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d302      	bcc.n	8004c2e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d078      	beq.n	8004d1e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004c2c:	e099      	b.n	8004d62 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c2e:	4b88      	ldr	r3, [pc, #544]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d02d      	beq.n	8004c96 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c3a:	4b85      	ldr	r3, [pc, #532]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	08db      	lsrs	r3, r3, #3
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	4a83      	ldr	r2, [pc, #524]	; (8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004c46:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	ee07 3a90 	vmov	s15, r3
 8004c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c64:	4b7a      	ldr	r3, [pc, #488]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c74:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c78:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c90:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c94:	e087      	b.n	8004da6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca8:	4b69      	ldr	r3, [pc, #420]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb0:	ee07 3a90 	vmov	s15, r3
 8004cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cbc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cd8:	e065      	b.n	8004da6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cec:	4b58      	ldr	r3, [pc, #352]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d1c:	e043      	b.n	8004da6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d30:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d40:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d60:	e021      	b.n	8004da6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d74:	4b36      	ldr	r3, [pc, #216]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d84:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004da4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004da6:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	0a5b      	lsrs	r3, r3, #9
 8004dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dcc:	ee17 2a90 	vmov	r2, s15
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dfa:	ee17 2a90 	vmov	r2, s15
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	0e1b      	lsrs	r3, r3, #24
 8004e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e28:	ee17 2a90 	vmov	r2, s15
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e30:	e008      	b.n	8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	609a      	str	r2, [r3, #8]
}
 8004e44:	bf00      	nop
 8004e46:	3724      	adds	r7, #36	; 0x24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	58024400 	.word	0x58024400
 8004e54:	03d09000 	.word	0x03d09000
 8004e58:	46000000 	.word	0x46000000
 8004e5c:	4c742400 	.word	0x4c742400
 8004e60:	4a742400 	.word	0x4a742400
 8004e64:	4c189680 	.word	0x4c189680

08004e68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e76:	4b53      	ldr	r3, [pc, #332]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d101      	bne.n	8004e86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e099      	b.n	8004fba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e86:	4b4f      	ldr	r3, [pc, #316]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4e      	ldr	r2, [pc, #312]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004e8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e92:	f7fc ff69 	bl	8001d68 <HAL_GetTick>
 8004e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e98:	e008      	b.n	8004eac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e9a:	f7fc ff65 	bl	8001d68 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e086      	b.n	8004fba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004eac:	4b45      	ldr	r3, [pc, #276]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004eb8:	4b42      	ldr	r3, [pc, #264]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	031b      	lsls	r3, r3, #12
 8004ec6:	493f      	ldr	r1, [pc, #252]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	628b      	str	r3, [r1, #40]	; 0x28
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	025b      	lsls	r3, r3, #9
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	041b      	lsls	r3, r3, #16
 8004eea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	061b      	lsls	r3, r3, #24
 8004ef8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004efc:	4931      	ldr	r1, [pc, #196]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f02:	4b30      	ldr	r3, [pc, #192]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	492d      	ldr	r1, [pc, #180]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f14:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	f023 0220 	bic.w	r2, r3, #32
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	4928      	ldr	r1, [pc, #160]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f26:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	4a26      	ldr	r2, [pc, #152]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f2c:	f023 0310 	bic.w	r3, r3, #16
 8004f30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f32:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <RCCEx_PLL2_Config+0x160>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	69d2      	ldr	r2, [r2, #28]
 8004f3e:	00d2      	lsls	r2, r2, #3
 8004f40:	4920      	ldr	r1, [pc, #128]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f46:	4b1f      	ldr	r3, [pc, #124]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	f043 0310 	orr.w	r3, r3, #16
 8004f50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f58:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f64:	e00f      	b.n	8004f86 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d106      	bne.n	8004f7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f6c:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f78:	e005      	b.n	8004f86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	4a11      	ldr	r2, [pc, #68]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a0e      	ldr	r2, [pc, #56]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004f8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f92:	f7fc fee9 	bl	8001d68 <HAL_GetTick>
 8004f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f98:	e008      	b.n	8004fac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f9a:	f7fc fee5 	bl	8001d68 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e006      	b.n	8004fba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <RCCEx_PLL2_Config+0x15c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	ffff0007 	.word	0xffff0007

08004fcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fda:	4b53      	ldr	r3, [pc, #332]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d101      	bne.n	8004fea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e099      	b.n	800511e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fea:	4b4f      	ldr	r3, [pc, #316]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a4e      	ldr	r2, [pc, #312]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8004ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff6:	f7fc feb7 	bl	8001d68 <HAL_GetTick>
 8004ffa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ffc:	e008      	b.n	8005010 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ffe:	f7fc feb3 	bl	8001d68 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e086      	b.n	800511e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005010:	4b45      	ldr	r3, [pc, #276]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f0      	bne.n	8004ffe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800501c:	4b42      	ldr	r3, [pc, #264]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	051b      	lsls	r3, r3, #20
 800502a:	493f      	ldr	r1, [pc, #252]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	628b      	str	r3, [r1, #40]	; 0x28
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	3b01      	subs	r3, #1
 8005036:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	3b01      	subs	r3, #1
 8005040:	025b      	lsls	r3, r3, #9
 8005042:	b29b      	uxth	r3, r3
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	3b01      	subs	r3, #1
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	3b01      	subs	r3, #1
 800505a:	061b      	lsls	r3, r3, #24
 800505c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005060:	4931      	ldr	r1, [pc, #196]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8005062:	4313      	orrs	r3, r2
 8005064:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005066:	4b30      	ldr	r3, [pc, #192]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	492d      	ldr	r1, [pc, #180]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8005074:	4313      	orrs	r3, r2
 8005076:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005078:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	4928      	ldr	r1, [pc, #160]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800508a:	4b27      	ldr	r3, [pc, #156]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	4a26      	ldr	r2, [pc, #152]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8005090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8005098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800509a:	4b24      	ldr	r3, [pc, #144]	; (800512c <RCCEx_PLL3_Config+0x160>)
 800509c:	4013      	ands	r3, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	69d2      	ldr	r2, [r2, #28]
 80050a2:	00d2      	lsls	r2, r2, #3
 80050a4:	4920      	ldr	r1, [pc, #128]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050aa:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050bc:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	4a19      	ldr	r2, [pc, #100]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050c8:	e00f      	b.n	80050ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d106      	bne.n	80050de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050d0:	4b15      	ldr	r3, [pc, #84]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	4a14      	ldr	r2, [pc, #80]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050dc:	e005      	b.n	80050ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	4a11      	ldr	r2, [pc, #68]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a0e      	ldr	r2, [pc, #56]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 80050f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f6:	f7fc fe37 	bl	8001d68 <HAL_GetTick>
 80050fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050fc:	e008      	b.n	8005110 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80050fe:	f7fc fe33 	bl	8001d68 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e006      	b.n	800511e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <RCCEx_PLL3_Config+0x15c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800511c:	7bfb      	ldrb	r3, [r7, #15]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	58024400 	.word	0x58024400
 800512c:	ffff0007 	.word	0xffff0007

08005130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e049      	b.n	80051d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fc fc0e 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	4619      	mov	r1, r3
 800516e:	4610      	mov	r0, r2
 8005170:	f000 f934 	bl	80053dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d001      	beq.n	80051f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e019      	b.n	800522c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <HAL_TIM_Base_Start+0x58>)
 8005208:	4013      	ands	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b06      	cmp	r3, #6
 8005210:	d00b      	beq.n	800522a <HAL_TIM_Base_Start+0x4a>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005218:	d007      	beq.n	800522a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0201 	orr.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	00010007 	.word	0x00010007

0800523c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_TIM_ConfigClockSource+0x18>
 8005250:	2302      	movs	r3, #2
 8005252:	e0b7      	b.n	80053c4 <HAL_TIM_ConfigClockSource+0x188>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4b57      	ldr	r3, [pc, #348]	; (80053cc <HAL_TIM_ConfigClockSource+0x190>)
 8005270:	4013      	ands	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800527a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b70      	cmp	r3, #112	; 0x70
 800528a:	d02e      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0xae>
 800528c:	2b70      	cmp	r3, #112	; 0x70
 800528e:	d812      	bhi.n	80052b6 <HAL_TIM_ConfigClockSource+0x7a>
 8005290:	2b30      	cmp	r3, #48	; 0x30
 8005292:	f000 8084 	beq.w	800539e <HAL_TIM_ConfigClockSource+0x162>
 8005296:	2b30      	cmp	r3, #48	; 0x30
 8005298:	d806      	bhi.n	80052a8 <HAL_TIM_ConfigClockSource+0x6c>
 800529a:	2b10      	cmp	r3, #16
 800529c:	d07f      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x162>
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d07d      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x162>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d07b      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052a6:	e084      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80052a8:	2b50      	cmp	r3, #80	; 0x50
 80052aa:	d048      	beq.n	800533e <HAL_TIM_ConfigClockSource+0x102>
 80052ac:	2b60      	cmp	r3, #96	; 0x60
 80052ae:	d056      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x122>
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d064      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x142>
      break;
 80052b4:	e07d      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80052b6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80052ba:	d070      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x162>
 80052bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80052c0:	d809      	bhi.n	80052d6 <HAL_TIM_ConfigClockSource+0x9a>
 80052c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c6:	d027      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0xdc>
 80052c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052cc:	d067      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x162>
 80052ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d2:	d06d      	beq.n	80053b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052d4:	e06d      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80052d6:	4a3e      	ldr	r2, [pc, #248]	; (80053d0 <HAL_TIM_ConfigClockSource+0x194>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d060      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x162>
 80052dc:	4a3d      	ldr	r2, [pc, #244]	; (80053d4 <HAL_TIM_ConfigClockSource+0x198>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d05d      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x162>
 80052e2:	4a3d      	ldr	r2, [pc, #244]	; (80053d8 <HAL_TIM_ConfigClockSource+0x19c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d05a      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x162>
      break;
 80052e8:	e063      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6899      	ldr	r1, [r3, #8]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f000 f987 	bl	800560c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800530c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	609a      	str	r2, [r3, #8]
      break;
 8005316:	e04c      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6899      	ldr	r1, [r3, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f000 f970 	bl	800560c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800533a:	609a      	str	r2, [r3, #8]
      break;
 800533c:	e039      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6859      	ldr	r1, [r3, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	461a      	mov	r2, r3
 800534c:	f000 f8e0 	bl	8005510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2150      	movs	r1, #80	; 0x50
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f93a 	bl	80055d0 <TIM_ITRx_SetConfig>
      break;
 800535c:	e029      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	f000 f8ff 	bl	800556e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2160      	movs	r1, #96	; 0x60
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f92a 	bl	80055d0 <TIM_ITRx_SetConfig>
      break;
 800537c:	e019      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	461a      	mov	r2, r3
 800538c:	f000 f8c0 	bl	8005510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2140      	movs	r1, #64	; 0x40
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f91a 	bl	80055d0 <TIM_ITRx_SetConfig>
      break;
 800539c:	e009      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	4610      	mov	r0, r2
 80053aa:	f000 f911 	bl	80055d0 <TIM_ITRx_SetConfig>
      break;
 80053ae:	e000      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80053b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	ffceff88 	.word	0xffceff88
 80053d0:	00100030 	.word	0x00100030
 80053d4:	00100040 	.word	0x00100040
 80053d8:	00100020 	.word	0x00100020

080053dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a40      	ldr	r2, [pc, #256]	; (80054f0 <TIM_Base_SetConfig+0x114>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fa:	d00f      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3d      	ldr	r2, [pc, #244]	; (80054f4 <TIM_Base_SetConfig+0x118>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <TIM_Base_SetConfig+0x11c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a3b      	ldr	r2, [pc, #236]	; (80054fc <TIM_Base_SetConfig+0x120>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a3a      	ldr	r2, [pc, #232]	; (8005500 <TIM_Base_SetConfig+0x124>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d108      	bne.n	800542e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2f      	ldr	r2, [pc, #188]	; (80054f0 <TIM_Base_SetConfig+0x114>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01f      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543c:	d01b      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2c      	ldr	r2, [pc, #176]	; (80054f4 <TIM_Base_SetConfig+0x118>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d017      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2b      	ldr	r2, [pc, #172]	; (80054f8 <TIM_Base_SetConfig+0x11c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2a      	ldr	r2, [pc, #168]	; (80054fc <TIM_Base_SetConfig+0x120>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00f      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a29      	ldr	r2, [pc, #164]	; (8005500 <TIM_Base_SetConfig+0x124>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00b      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a28      	ldr	r2, [pc, #160]	; (8005504 <TIM_Base_SetConfig+0x128>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d007      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a27      	ldr	r2, [pc, #156]	; (8005508 <TIM_Base_SetConfig+0x12c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d003      	beq.n	8005476 <TIM_Base_SetConfig+0x9a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a26      	ldr	r2, [pc, #152]	; (800550c <TIM_Base_SetConfig+0x130>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d108      	bne.n	8005488 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a10      	ldr	r2, [pc, #64]	; (80054f0 <TIM_Base_SetConfig+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00f      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a12      	ldr	r2, [pc, #72]	; (8005500 <TIM_Base_SetConfig+0x124>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a11      	ldr	r2, [pc, #68]	; (8005504 <TIM_Base_SetConfig+0x128>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a10      	ldr	r2, [pc, #64]	; (8005508 <TIM_Base_SetConfig+0x12c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a0f      	ldr	r2, [pc, #60]	; (800550c <TIM_Base_SetConfig+0x130>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d103      	bne.n	80054dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	615a      	str	r2, [r3, #20]
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40000c00 	.word	0x40000c00
 8005500:	40010400 	.word	0x40010400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0201 	bic.w	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800553a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 030a 	bic.w	r3, r3, #10
 800554c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556e:	b480      	push	{r7}
 8005570:	b087      	sub	sp, #28
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0210 	bic.w	r2, r3, #16
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	031b      	lsls	r3, r3, #12
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <TIM_ITRx_SetConfig+0x38>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f043 0307 	orr.w	r3, r3, #7
 80055f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	609a      	str	r2, [r3, #8]
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	ffcfff8f 	.word	0xffcfff8f

0800560c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	431a      	orrs	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4313      	orrs	r3, r2
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005660:	2302      	movs	r3, #2
 8005662:	e068      	b.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a2e      	ldr	r2, [pc, #184]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a2d      	ldr	r2, [pc, #180]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d108      	bne.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800569e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01d      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d6:	d018      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1b      	ldr	r2, [pc, #108]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1a      	ldr	r2, [pc, #104]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a18      	ldr	r2, [pc, #96]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a13      	ldr	r2, [pc, #76]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a14      	ldr	r2, [pc, #80]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d10c      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40010400 	.word	0x40010400
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40001800 	.word	0x40001800

0800575c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e042      	b.n	80057f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fc f965 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2224      	movs	r2, #36	; 0x24
 800578a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0201 	bic.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fb3a 	bl	8005e18 <UART_SetConfig>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e022      	b.n	80057f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 f8de 	bl	8006978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 f965 	bl	8006abc <UART_CheckIdleState>
 80057f2:	4603      	mov	r3, r0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005812:	2b20      	cmp	r3, #32
 8005814:	f040 8083 	bne.w	800591e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_UART_Transmit+0x28>
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e07b      	b.n	8005920 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_UART_Transmit+0x3a>
 8005832:	2302      	movs	r3, #2
 8005834:	e074      	b.n	8005920 <HAL_UART_Transmit+0x124>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2221      	movs	r2, #33	; 0x21
 800584a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800584e:	f7fc fa8b 	bl	8001d68 <HAL_GetTick>
 8005852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586c:	d108      	bne.n	8005880 <HAL_UART_Transmit+0x84>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	e003      	b.n	8005888 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005890:	e02c      	b.n	80058ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2200      	movs	r2, #0
 800589a:	2180      	movs	r1, #128	; 0x80
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f001 f955 	bl	8006b4c <UART_WaitOnFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e039      	b.n	8005920 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	3302      	adds	r3, #2
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	e007      	b.n	80058da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	781a      	ldrb	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	3301      	adds	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1cc      	bne.n	8005892 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2200      	movs	r2, #0
 8005900:	2140      	movs	r1, #64	; 0x40
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f001 f922 	bl	8006b4c <UART_WaitOnFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e006      	b.n	8005920 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e000      	b.n	8005920 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800591e:	2302      	movs	r3, #2
  }
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	4613      	mov	r3, r2
 8005934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800593c:	2b20      	cmp	r3, #32
 800593e:	f040 80bc 	bne.w	8005aba <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_UART_Receive_IT+0x26>
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e0b4      	b.n	8005abc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_UART_Receive_IT+0x38>
 800595c:	2302      	movs	r3, #2
 800595e:	e0ad      	b.n	8005abc <HAL_UART_Receive_IT+0x194>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	88fa      	ldrh	r2, [r7, #6]
 8005972:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598c:	d10e      	bne.n	80059ac <HAL_UART_Receive_IT+0x84>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d105      	bne.n	80059a2 <HAL_UART_Receive_IT+0x7a>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f240 12ff 	movw	r2, #511	; 0x1ff
 800599c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059a0:	e02d      	b.n	80059fe <HAL_UART_Receive_IT+0xd6>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	22ff      	movs	r2, #255	; 0xff
 80059a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059aa:	e028      	b.n	80059fe <HAL_UART_Receive_IT+0xd6>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10d      	bne.n	80059d0 <HAL_UART_Receive_IT+0xa8>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <HAL_UART_Receive_IT+0x9e>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	22ff      	movs	r2, #255	; 0xff
 80059c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059c4:	e01b      	b.n	80059fe <HAL_UART_Receive_IT+0xd6>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	227f      	movs	r2, #127	; 0x7f
 80059ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059ce:	e016      	b.n	80059fe <HAL_UART_Receive_IT+0xd6>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059d8:	d10d      	bne.n	80059f6 <HAL_UART_Receive_IT+0xce>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <HAL_UART_Receive_IT+0xc4>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	227f      	movs	r2, #127	; 0x7f
 80059e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059ea:	e008      	b.n	80059fe <HAL_UART_Receive_IT+0xd6>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	223f      	movs	r2, #63	; 0x3f
 80059f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059f4:	e003      	b.n	80059fe <HAL_UART_Receive_IT+0xd6>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2222      	movs	r2, #34	; 0x22
 8005a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a26:	d12a      	bne.n	8005a7e <HAL_UART_Receive_IT+0x156>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d324      	bcc.n	8005a7e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3c:	d107      	bne.n	8005a4e <HAL_UART_Receive_IT+0x126>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <HAL_UART_Receive_IT+0x1a0>)
 8005a4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8005a4c:	e002      	b.n	8005a54 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <HAL_UART_Receive_IT+0x1a4>)
 8005a52:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a7a:	609a      	str	r2, [r3, #8]
 8005a7c:	e01b      	b.n	8005ab6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a86:	d107      	bne.n	8005a98 <HAL_UART_Receive_IT+0x170>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a0f      	ldr	r2, [pc, #60]	; (8005ad0 <HAL_UART_Receive_IT+0x1a8>)
 8005a94:	66da      	str	r2, [r3, #108]	; 0x6c
 8005a96:	e002      	b.n	8005a9e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <HAL_UART_Receive_IT+0x1ac>)
 8005a9c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005ab4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e000      	b.n	8005abc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005aba:	2302      	movs	r3, #2
  }
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	08006f51 	.word	0x08006f51
 8005acc:	08006e49 	.word	0x08006e49
 8005ad0:	08006d9f 	.word	0x08006d9f
 8005ad4:	08006cf5 	.word	0x08006cf5

08005ad8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	f640 030f 	movw	r3, #2063	; 0x80f
 8005afe:	4013      	ands	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d118      	bne.n	8005b3a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d013      	beq.n	8005b3a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8145 	beq.w	8005dba <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
      }
      return;
 8005b38:	e13f      	b.n	8005dba <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80e8 	beq.w	8005d12 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4ba1      	ldr	r3, [pc, #644]	; (8005dcc <HAL_UART_IRQHandler+0x2f4>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4ba0      	ldr	r3, [pc, #640]	; (8005dd0 <HAL_UART_IRQHandler+0x2f8>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 80dd 	beq.w	8005d12 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d010      	beq.n	8005b84 <HAL_UART_IRQHandler+0xac>
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2201      	movs	r2, #1
 8005b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f043 0201 	orr.w	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d010      	beq.n	8005bb0 <HAL_UART_IRQHandler+0xd8>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d010      	beq.n	8005bdc <HAL_UART_IRQHandler+0x104>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	f043 0202 	orr.w	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d015      	beq.n	8005c12 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4b76      	ldr	r3, [pc, #472]	; (8005dcc <HAL_UART_IRQHandler+0x2f4>)
 8005bf4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2208      	movs	r2, #8
 8005c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c08:	f043 0208 	orr.w	r2, r3, #8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d011      	beq.n	8005c40 <HAL_UART_IRQHandler+0x168>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00c      	beq.n	8005c40 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c36:	f043 0220 	orr.w	r2, r3, #32
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 80b9 	beq.w	8005dbe <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d011      	beq.n	8005c7a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d004      	beq.n	8005c9a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d031      	beq.n	8005cfe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 ffd6 	bl	8006c4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d123      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cbc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d013      	beq.n	8005cee <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cca:	4a42      	ldr	r2, [pc, #264]	; (8005dd4 <HAL_UART_IRQHandler+0x2fc>)
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fc f992 	bl	8001ffc <HAL_DMA_Abort_IT>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d017      	beq.n	8005d0e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cec:	e00f      	b.n	8005d0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f872 	bl	8005dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	e00b      	b.n	8005d0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f86e 	bl	8005dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	e007      	b.n	8005d0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f86a 	bl	8005dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005d0c:	e057      	b.n	8005dbe <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0e:	bf00      	nop
    return;
 8005d10:	e055      	b.n	8005dbe <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00d      	beq.n	8005d38 <HAL_UART_IRQHandler+0x260>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f991 	bl	8007058 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d36:	e045      	b.n	8005dc4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d012      	beq.n	8005d68 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d104      	bne.n	8005d56 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d031      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	4798      	blx	r3
    }
    return;
 8005d66:	e02c      	b.n	8005dc2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d008      	beq.n	8005d84 <HAL_UART_IRQHandler+0x2ac>
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 ff9f 	bl	8006cc0 <UART_EndTransmit_IT>
    return;
 8005d82:	e01f      	b.n	8005dc4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d008      	beq.n	8005da0 <HAL_UART_IRQHandler+0x2c8>
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 f971 	bl	8007080 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d9e:	e011      	b.n	8005dc4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00c      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x2ec>
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	da09      	bge.n	8005dc4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 f95b 	bl	800706c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005db6:	bf00      	nop
 8005db8:	e004      	b.n	8005dc4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005dba:	bf00      	nop
 8005dbc:	e002      	b.n	8005dc4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005dc2:	bf00      	nop
  }
}
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	10000001 	.word	0x10000001
 8005dd0:	04000120 	.word	0x04000120
 8005dd4:	08006c95 	.word	0x08006c95

08005dd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfa:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e02:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4313      	orrs	r3, r2
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005e1c:	b08e      	sub	sp, #56	; 0x38
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e46:	4313      	orrs	r3, r2
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4bc1      	ldr	r3, [pc, #772]	; (8006158 <UART_SetConfig+0x340>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4ab7      	ldr	r2, [pc, #732]	; (800615c <UART_SetConfig+0x344>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	4bb2      	ldr	r3, [pc, #712]	; (8006160 <UART_SetConfig+0x348>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e9e:	430b      	orrs	r3, r1
 8005ea0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	f023 010f 	bic.w	r1, r3, #15
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4aa9      	ldr	r2, [pc, #676]	; (8006164 <UART_SetConfig+0x34c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d177      	bne.n	8005fb2 <UART_SetConfig+0x19a>
 8005ec2:	4ba9      	ldr	r3, [pc, #676]	; (8006168 <UART_SetConfig+0x350>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eca:	2b28      	cmp	r3, #40	; 0x28
 8005ecc:	d86c      	bhi.n	8005fa8 <UART_SetConfig+0x190>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0xbc>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005f79 	.word	0x08005f79
 8005ed8:	08005fa9 	.word	0x08005fa9
 8005edc:	08005fa9 	.word	0x08005fa9
 8005ee0:	08005fa9 	.word	0x08005fa9
 8005ee4:	08005fa9 	.word	0x08005fa9
 8005ee8:	08005fa9 	.word	0x08005fa9
 8005eec:	08005fa9 	.word	0x08005fa9
 8005ef0:	08005fa9 	.word	0x08005fa9
 8005ef4:	08005f81 	.word	0x08005f81
 8005ef8:	08005fa9 	.word	0x08005fa9
 8005efc:	08005fa9 	.word	0x08005fa9
 8005f00:	08005fa9 	.word	0x08005fa9
 8005f04:	08005fa9 	.word	0x08005fa9
 8005f08:	08005fa9 	.word	0x08005fa9
 8005f0c:	08005fa9 	.word	0x08005fa9
 8005f10:	08005fa9 	.word	0x08005fa9
 8005f14:	08005f89 	.word	0x08005f89
 8005f18:	08005fa9 	.word	0x08005fa9
 8005f1c:	08005fa9 	.word	0x08005fa9
 8005f20:	08005fa9 	.word	0x08005fa9
 8005f24:	08005fa9 	.word	0x08005fa9
 8005f28:	08005fa9 	.word	0x08005fa9
 8005f2c:	08005fa9 	.word	0x08005fa9
 8005f30:	08005fa9 	.word	0x08005fa9
 8005f34:	08005f91 	.word	0x08005f91
 8005f38:	08005fa9 	.word	0x08005fa9
 8005f3c:	08005fa9 	.word	0x08005fa9
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005fa9 	.word	0x08005fa9
 8005f48:	08005fa9 	.word	0x08005fa9
 8005f4c:	08005fa9 	.word	0x08005fa9
 8005f50:	08005fa9 	.word	0x08005fa9
 8005f54:	08005f99 	.word	0x08005f99
 8005f58:	08005fa9 	.word	0x08005fa9
 8005f5c:	08005fa9 	.word	0x08005fa9
 8005f60:	08005fa9 	.word	0x08005fa9
 8005f64:	08005fa9 	.word	0x08005fa9
 8005f68:	08005fa9 	.word	0x08005fa9
 8005f6c:	08005fa9 	.word	0x08005fa9
 8005f70:	08005fa9 	.word	0x08005fa9
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7e:	e233      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8005f80:	2304      	movs	r3, #4
 8005f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f86:	e22f      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8e:	e22b      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f96:	e227      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8005f98:	2320      	movs	r3, #32
 8005f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f9e:	e223      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa6:	e21f      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fae:	bf00      	nop
 8005fb0:	e21a      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a6d      	ldr	r2, [pc, #436]	; (800616c <UART_SetConfig+0x354>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d132      	bne.n	8006022 <UART_SetConfig+0x20a>
 8005fbc:	4b6a      	ldr	r3, [pc, #424]	; (8006168 <UART_SetConfig+0x350>)
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d827      	bhi.n	8006018 <UART_SetConfig+0x200>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <UART_SetConfig+0x1b8>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08005fe9 	.word	0x08005fe9
 8005fd4:	08005ff1 	.word	0x08005ff1
 8005fd8:	08005ff9 	.word	0x08005ff9
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fee:	e1fb      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff6:	e1f7      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8005ff8:	2308      	movs	r3, #8
 8005ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffe:	e1f3      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006000:	2310      	movs	r3, #16
 8006002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006006:	e1ef      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006008:	2320      	movs	r3, #32
 800600a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800600e:	e1eb      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006010:	2340      	movs	r3, #64	; 0x40
 8006012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006016:	e1e7      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006018:	2380      	movs	r3, #128	; 0x80
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601e:	bf00      	nop
 8006020:	e1e2      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a52      	ldr	r2, [pc, #328]	; (8006170 <UART_SetConfig+0x358>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d132      	bne.n	8006092 <UART_SetConfig+0x27a>
 800602c:	4b4e      	ldr	r3, [pc, #312]	; (8006168 <UART_SetConfig+0x350>)
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	2b05      	cmp	r3, #5
 8006036:	d827      	bhi.n	8006088 <UART_SetConfig+0x270>
 8006038:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <UART_SetConfig+0x228>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	08006059 	.word	0x08006059
 8006044:	08006061 	.word	0x08006061
 8006048:	08006069 	.word	0x08006069
 800604c:	08006071 	.word	0x08006071
 8006050:	08006079 	.word	0x08006079
 8006054:	08006081 	.word	0x08006081
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605e:	e1c3      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006066:	e1bf      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606e:	e1bb      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006076:	e1b7      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006078:	2320      	movs	r3, #32
 800607a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607e:	e1b3      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006080:	2340      	movs	r3, #64	; 0x40
 8006082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006086:	e1af      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006088:	2380      	movs	r3, #128	; 0x80
 800608a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608e:	bf00      	nop
 8006090:	e1aa      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a37      	ldr	r2, [pc, #220]	; (8006174 <UART_SetConfig+0x35c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d132      	bne.n	8006102 <UART_SetConfig+0x2ea>
 800609c:	4b32      	ldr	r3, [pc, #200]	; (8006168 <UART_SetConfig+0x350>)
 800609e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	d827      	bhi.n	80060f8 <UART_SetConfig+0x2e0>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x298>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060c9 	.word	0x080060c9
 80060b4:	080060d1 	.word	0x080060d1
 80060b8:	080060d9 	.word	0x080060d9
 80060bc:	080060e1 	.word	0x080060e1
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060f1 	.word	0x080060f1
 80060c8:	2300      	movs	r3, #0
 80060ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ce:	e18b      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80060d0:	2304      	movs	r3, #4
 80060d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060d6:	e187      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80060d8:	2308      	movs	r3, #8
 80060da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060de:	e183      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80060e0:	2310      	movs	r3, #16
 80060e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060e6:	e17f      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80060e8:	2320      	movs	r3, #32
 80060ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ee:	e17b      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f6:	e177      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80060f8:	2380      	movs	r3, #128	; 0x80
 80060fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fe:	bf00      	nop
 8006100:	e172      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <UART_SetConfig+0x360>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d144      	bne.n	8006196 <UART_SetConfig+0x37e>
 800610c:	4b16      	ldr	r3, [pc, #88]	; (8006168 <UART_SetConfig+0x350>)
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	f003 0307 	and.w	r3, r3, #7
 8006114:	2b05      	cmp	r3, #5
 8006116:	d839      	bhi.n	800618c <UART_SetConfig+0x374>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0x308>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006139 	.word	0x08006139
 8006124:	08006141 	.word	0x08006141
 8006128:	08006149 	.word	0x08006149
 800612c:	08006151 	.word	0x08006151
 8006130:	0800617d 	.word	0x0800617d
 8006134:	08006185 	.word	0x08006185
 8006138:	2300      	movs	r3, #0
 800613a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800613e:	e153      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006140:	2304      	movs	r3, #4
 8006142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006146:	e14f      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006148:	2308      	movs	r3, #8
 800614a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800614e:	e14b      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006150:	2310      	movs	r3, #16
 8006152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006156:	e147      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006158:	cfff69f3 	.word	0xcfff69f3
 800615c:	58000c00 	.word	0x58000c00
 8006160:	11fff4ff 	.word	0x11fff4ff
 8006164:	40011000 	.word	0x40011000
 8006168:	58024400 	.word	0x58024400
 800616c:	40004400 	.word	0x40004400
 8006170:	40004800 	.word	0x40004800
 8006174:	40004c00 	.word	0x40004c00
 8006178:	40005000 	.word	0x40005000
 800617c:	2320      	movs	r3, #32
 800617e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006182:	e131      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618a:	e12d      	b.n	80063e8 <UART_SetConfig+0x5d0>
 800618c:	2380      	movs	r3, #128	; 0x80
 800618e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006192:	bf00      	nop
 8006194:	e128      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4ab6      	ldr	r2, [pc, #728]	; (8006474 <UART_SetConfig+0x65c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d178      	bne.n	8006292 <UART_SetConfig+0x47a>
 80061a0:	4bb5      	ldr	r3, [pc, #724]	; (8006478 <UART_SetConfig+0x660>)
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061a8:	2b28      	cmp	r3, #40	; 0x28
 80061aa:	d86d      	bhi.n	8006288 <UART_SetConfig+0x470>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0x39c>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	08006259 	.word	0x08006259
 80061b8:	08006289 	.word	0x08006289
 80061bc:	08006289 	.word	0x08006289
 80061c0:	08006289 	.word	0x08006289
 80061c4:	08006289 	.word	0x08006289
 80061c8:	08006289 	.word	0x08006289
 80061cc:	08006289 	.word	0x08006289
 80061d0:	08006289 	.word	0x08006289
 80061d4:	08006261 	.word	0x08006261
 80061d8:	08006289 	.word	0x08006289
 80061dc:	08006289 	.word	0x08006289
 80061e0:	08006289 	.word	0x08006289
 80061e4:	08006289 	.word	0x08006289
 80061e8:	08006289 	.word	0x08006289
 80061ec:	08006289 	.word	0x08006289
 80061f0:	08006289 	.word	0x08006289
 80061f4:	08006269 	.word	0x08006269
 80061f8:	08006289 	.word	0x08006289
 80061fc:	08006289 	.word	0x08006289
 8006200:	08006289 	.word	0x08006289
 8006204:	08006289 	.word	0x08006289
 8006208:	08006289 	.word	0x08006289
 800620c:	08006289 	.word	0x08006289
 8006210:	08006289 	.word	0x08006289
 8006214:	08006271 	.word	0x08006271
 8006218:	08006289 	.word	0x08006289
 800621c:	08006289 	.word	0x08006289
 8006220:	08006289 	.word	0x08006289
 8006224:	08006289 	.word	0x08006289
 8006228:	08006289 	.word	0x08006289
 800622c:	08006289 	.word	0x08006289
 8006230:	08006289 	.word	0x08006289
 8006234:	08006279 	.word	0x08006279
 8006238:	08006289 	.word	0x08006289
 800623c:	08006289 	.word	0x08006289
 8006240:	08006289 	.word	0x08006289
 8006244:	08006289 	.word	0x08006289
 8006248:	08006289 	.word	0x08006289
 800624c:	08006289 	.word	0x08006289
 8006250:	08006289 	.word	0x08006289
 8006254:	08006281 	.word	0x08006281
 8006258:	2301      	movs	r3, #1
 800625a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625e:	e0c3      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006260:	2304      	movs	r3, #4
 8006262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006266:	e0bf      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006268:	2308      	movs	r3, #8
 800626a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626e:	e0bb      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006270:	2310      	movs	r3, #16
 8006272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006276:	e0b7      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006278:	2320      	movs	r3, #32
 800627a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627e:	e0b3      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006280:	2340      	movs	r3, #64	; 0x40
 8006282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006286:	e0af      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006288:	2380      	movs	r3, #128	; 0x80
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	bf00      	nop
 8006290:	e0aa      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a79      	ldr	r2, [pc, #484]	; (800647c <UART_SetConfig+0x664>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d132      	bne.n	8006302 <UART_SetConfig+0x4ea>
 800629c:	4b76      	ldr	r3, [pc, #472]	; (8006478 <UART_SetConfig+0x660>)
 800629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	2b05      	cmp	r3, #5
 80062a6:	d827      	bhi.n	80062f8 <UART_SetConfig+0x4e0>
 80062a8:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <UART_SetConfig+0x498>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	080062c9 	.word	0x080062c9
 80062b4:	080062d1 	.word	0x080062d1
 80062b8:	080062d9 	.word	0x080062d9
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	2300      	movs	r3, #0
 80062ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ce:	e08b      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80062d0:	2304      	movs	r3, #4
 80062d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d6:	e087      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80062d8:	2308      	movs	r3, #8
 80062da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062de:	e083      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80062e0:	2310      	movs	r3, #16
 80062e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062e6:	e07f      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80062e8:	2320      	movs	r3, #32
 80062ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ee:	e07b      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80062f0:	2340      	movs	r3, #64	; 0x40
 80062f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f6:	e077      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fe:	bf00      	nop
 8006300:	e072      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a5e      	ldr	r2, [pc, #376]	; (8006480 <UART_SetConfig+0x668>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d132      	bne.n	8006372 <UART_SetConfig+0x55a>
 800630c:	4b5a      	ldr	r3, [pc, #360]	; (8006478 <UART_SetConfig+0x660>)
 800630e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	2b05      	cmp	r3, #5
 8006316:	d827      	bhi.n	8006368 <UART_SetConfig+0x550>
 8006318:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0x508>)
 800631a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631e:	bf00      	nop
 8006320:	08006339 	.word	0x08006339
 8006324:	08006341 	.word	0x08006341
 8006328:	08006349 	.word	0x08006349
 800632c:	08006351 	.word	0x08006351
 8006330:	08006359 	.word	0x08006359
 8006334:	08006361 	.word	0x08006361
 8006338:	2300      	movs	r3, #0
 800633a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800633e:	e053      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006340:	2304      	movs	r3, #4
 8006342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006346:	e04f      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006348:	2308      	movs	r3, #8
 800634a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800634e:	e04b      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006350:	2310      	movs	r3, #16
 8006352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006356:	e047      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006358:	2320      	movs	r3, #32
 800635a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635e:	e043      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006360:	2340      	movs	r3, #64	; 0x40
 8006362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006366:	e03f      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636e:	bf00      	nop
 8006370:	e03a      	b.n	80063e8 <UART_SetConfig+0x5d0>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a43      	ldr	r2, [pc, #268]	; (8006484 <UART_SetConfig+0x66c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d132      	bne.n	80063e2 <UART_SetConfig+0x5ca>
 800637c:	4b3e      	ldr	r3, [pc, #248]	; (8006478 <UART_SetConfig+0x660>)
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	2b05      	cmp	r3, #5
 8006386:	d827      	bhi.n	80063d8 <UART_SetConfig+0x5c0>
 8006388:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <UART_SetConfig+0x578>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063a9 	.word	0x080063a9
 8006394:	080063b1 	.word	0x080063b1
 8006398:	080063b9 	.word	0x080063b9
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	2302      	movs	r3, #2
 80063aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ae:	e01b      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80063b0:	2304      	movs	r3, #4
 80063b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063b6:	e017      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80063b8:	2308      	movs	r3, #8
 80063ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063be:	e013      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80063c0:	2310      	movs	r3, #16
 80063c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c6:	e00f      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80063c8:	2320      	movs	r3, #32
 80063ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ce:	e00b      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80063d0:	2340      	movs	r3, #64	; 0x40
 80063d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d6:	e007      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80063d8:	2380      	movs	r3, #128	; 0x80
 80063da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063de:	bf00      	nop
 80063e0:	e002      	b.n	80063e8 <UART_SetConfig+0x5d0>
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a25      	ldr	r2, [pc, #148]	; (8006484 <UART_SetConfig+0x66c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	f040 80b8 	bne.w	8006564 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d019      	beq.n	8006430 <UART_SetConfig+0x618>
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	dc04      	bgt.n	800640a <UART_SetConfig+0x5f2>
 8006400:	2b02      	cmp	r3, #2
 8006402:	d009      	beq.n	8006418 <UART_SetConfig+0x600>
 8006404:	2b04      	cmp	r3, #4
 8006406:	d00b      	beq.n	8006420 <UART_SetConfig+0x608>
 8006408:	e042      	b.n	8006490 <UART_SetConfig+0x678>
 800640a:	2b20      	cmp	r3, #32
 800640c:	d02b      	beq.n	8006466 <UART_SetConfig+0x64e>
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d02c      	beq.n	800646c <UART_SetConfig+0x654>
 8006412:	2b10      	cmp	r3, #16
 8006414:	d014      	beq.n	8006440 <UART_SetConfig+0x628>
 8006416:	e03b      	b.n	8006490 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006418:	f7fe fa78 	bl	800490c <HAL_RCCEx_GetD3PCLK1Freq>
 800641c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800641e:	e03d      	b.n	800649c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006420:	f107 0314 	add.w	r3, r7, #20
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fa87 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800642e:	e035      	b.n	800649c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006430:	f107 0308 	add.w	r3, r7, #8
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fbcb 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800643e:	e02d      	b.n	800649c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006440:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <UART_SetConfig+0x660>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <UART_SetConfig+0x660>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	08db      	lsrs	r3, r3, #3
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	4a0c      	ldr	r2, [pc, #48]	; (8006488 <UART_SetConfig+0x670>)
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800645e:	e01d      	b.n	800649c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <UART_SetConfig+0x670>)
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006464:	e01a      	b.n	800649c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006466:	4b09      	ldr	r3, [pc, #36]	; (800648c <UART_SetConfig+0x674>)
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800646a:	e017      	b.n	800649c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006472:	e013      	b.n	800649c <UART_SetConfig+0x684>
 8006474:	40011400 	.word	0x40011400
 8006478:	58024400 	.word	0x58024400
 800647c:	40007800 	.word	0x40007800
 8006480:	40007c00 	.word	0x40007c00
 8006484:	58000c00 	.word	0x58000c00
 8006488:	03d09000 	.word	0x03d09000
 800648c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800649a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 824d 	beq.w	800693e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	4aad      	ldr	r2, [pc, #692]	; (8006760 <UART_SetConfig+0x948>)
 80064aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ae:	461a      	mov	r2, r3
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	4413      	add	r3, r2
 80064c2:	6a3a      	ldr	r2, [r7, #32]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d305      	bcc.n	80064d4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ce:	6a3a      	ldr	r2, [r7, #32]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d903      	bls.n	80064dc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80064da:	e230      	b.n	800693e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	4618      	mov	r0, r3
 80064e0:	f04f 0100 	mov.w	r1, #0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	4a9d      	ldr	r2, [pc, #628]	; (8006760 <UART_SetConfig+0x948>)
 80064ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f04f 0400 	mov.w	r4, #0
 80064f4:	461a      	mov	r2, r3
 80064f6:	4623      	mov	r3, r4
 80064f8:	f7f9 ffaa 	bl	8000450 <__aeabi_uldivmod>
 80064fc:	4603      	mov	r3, r0
 80064fe:	460c      	mov	r4, r1
 8006500:	4619      	mov	r1, r3
 8006502:	4622      	mov	r2, r4
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	f04f 0400 	mov.w	r4, #0
 800650c:	0214      	lsls	r4, r2, #8
 800650e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006512:	020b      	lsls	r3, r1, #8
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6852      	ldr	r2, [r2, #4]
 8006518:	0852      	lsrs	r2, r2, #1
 800651a:	4611      	mov	r1, r2
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	eb13 0b01 	adds.w	fp, r3, r1
 8006524:	eb44 0c02 	adc.w	ip, r4, r2
 8006528:	4658      	mov	r0, fp
 800652a:	4661      	mov	r1, ip
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f04f 0400 	mov.w	r4, #0
 8006534:	461a      	mov	r2, r3
 8006536:	4623      	mov	r3, r4
 8006538:	f7f9 ff8a 	bl	8000450 <__aeabi_uldivmod>
 800653c:	4603      	mov	r3, r0
 800653e:	460c      	mov	r4, r1
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006548:	d308      	bcc.n	800655c <UART_SetConfig+0x744>
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006550:	d204      	bcs.n	800655c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006558:	60da      	str	r2, [r3, #12]
 800655a:	e1f0      	b.n	800693e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006562:	e1ec      	b.n	800693e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656c:	f040 8100 	bne.w	8006770 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	f200 80b7 	bhi.w	80066e8 <UART_SetConfig+0x8d0>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <UART_SetConfig+0x768>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	08006685 	.word	0x08006685
 8006584:	0800668d 	.word	0x0800668d
 8006588:	080066e9 	.word	0x080066e9
 800658c:	080066e9 	.word	0x080066e9
 8006590:	08006695 	.word	0x08006695
 8006594:	080066e9 	.word	0x080066e9
 8006598:	080066e9 	.word	0x080066e9
 800659c:	080066e9 	.word	0x080066e9
 80065a0:	080066a5 	.word	0x080066a5
 80065a4:	080066e9 	.word	0x080066e9
 80065a8:	080066e9 	.word	0x080066e9
 80065ac:	080066e9 	.word	0x080066e9
 80065b0:	080066e9 	.word	0x080066e9
 80065b4:	080066e9 	.word	0x080066e9
 80065b8:	080066e9 	.word	0x080066e9
 80065bc:	080066e9 	.word	0x080066e9
 80065c0:	080066b5 	.word	0x080066b5
 80065c4:	080066e9 	.word	0x080066e9
 80065c8:	080066e9 	.word	0x080066e9
 80065cc:	080066e9 	.word	0x080066e9
 80065d0:	080066e9 	.word	0x080066e9
 80065d4:	080066e9 	.word	0x080066e9
 80065d8:	080066e9 	.word	0x080066e9
 80065dc:	080066e9 	.word	0x080066e9
 80065e0:	080066e9 	.word	0x080066e9
 80065e4:	080066e9 	.word	0x080066e9
 80065e8:	080066e9 	.word	0x080066e9
 80065ec:	080066e9 	.word	0x080066e9
 80065f0:	080066e9 	.word	0x080066e9
 80065f4:	080066e9 	.word	0x080066e9
 80065f8:	080066e9 	.word	0x080066e9
 80065fc:	080066e9 	.word	0x080066e9
 8006600:	080066db 	.word	0x080066db
 8006604:	080066e9 	.word	0x080066e9
 8006608:	080066e9 	.word	0x080066e9
 800660c:	080066e9 	.word	0x080066e9
 8006610:	080066e9 	.word	0x080066e9
 8006614:	080066e9 	.word	0x080066e9
 8006618:	080066e9 	.word	0x080066e9
 800661c:	080066e9 	.word	0x080066e9
 8006620:	080066e9 	.word	0x080066e9
 8006624:	080066e9 	.word	0x080066e9
 8006628:	080066e9 	.word	0x080066e9
 800662c:	080066e9 	.word	0x080066e9
 8006630:	080066e9 	.word	0x080066e9
 8006634:	080066e9 	.word	0x080066e9
 8006638:	080066e9 	.word	0x080066e9
 800663c:	080066e9 	.word	0x080066e9
 8006640:	080066e9 	.word	0x080066e9
 8006644:	080066e9 	.word	0x080066e9
 8006648:	080066e9 	.word	0x080066e9
 800664c:	080066e9 	.word	0x080066e9
 8006650:	080066e9 	.word	0x080066e9
 8006654:	080066e9 	.word	0x080066e9
 8006658:	080066e9 	.word	0x080066e9
 800665c:	080066e9 	.word	0x080066e9
 8006660:	080066e9 	.word	0x080066e9
 8006664:	080066e9 	.word	0x080066e9
 8006668:	080066e9 	.word	0x080066e9
 800666c:	080066e9 	.word	0x080066e9
 8006670:	080066e9 	.word	0x080066e9
 8006674:	080066e9 	.word	0x080066e9
 8006678:	080066e9 	.word	0x080066e9
 800667c:	080066e9 	.word	0x080066e9
 8006680:	080066e1 	.word	0x080066e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006684:	f7fd fa28 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8006688:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800668a:	e033      	b.n	80066f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800668c:	f7fd fa3a 	bl	8003b04 <HAL_RCC_GetPCLK2Freq>
 8006690:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006692:	e02f      	b.n	80066f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006694:	f107 0314 	add.w	r3, r7, #20
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe f94d 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066a2:	e027      	b.n	80066f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a4:	f107 0308 	add.w	r3, r7, #8
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fe fa91 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066b2:	e01f      	b.n	80066f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066b4:	4b2b      	ldr	r3, [pc, #172]	; (8006764 <UART_SetConfig+0x94c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d009      	beq.n	80066d4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066c0:	4b28      	ldr	r3, [pc, #160]	; (8006764 <UART_SetConfig+0x94c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	08db      	lsrs	r3, r3, #3
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	4a27      	ldr	r2, [pc, #156]	; (8006768 <UART_SetConfig+0x950>)
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066d2:	e00f      	b.n	80066f4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80066d4:	4b24      	ldr	r3, [pc, #144]	; (8006768 <UART_SetConfig+0x950>)
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066d8:	e00c      	b.n	80066f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066da:	4b24      	ldr	r3, [pc, #144]	; (800676c <UART_SetConfig+0x954>)
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066de:	e009      	b.n	80066f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066e6:	e005      	b.n	80066f4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80066f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8121 	beq.w	800693e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	4a17      	ldr	r2, [pc, #92]	; (8006760 <UART_SetConfig+0x948>)
 8006702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006706:	461a      	mov	r2, r3
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	fbb3 f3f2 	udiv	r3, r3, r2
 800670e:	005a      	lsls	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	441a      	add	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006720:	b29b      	uxth	r3, r3
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006726:	2b0f      	cmp	r3, #15
 8006728:	d916      	bls.n	8006758 <UART_SetConfig+0x940>
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006730:	d212      	bcs.n	8006758 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	b29b      	uxth	r3, r3
 8006736:	f023 030f 	bic.w	r3, r3, #15
 800673a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	b29b      	uxth	r3, r3
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	b29a      	uxth	r2, r3
 8006748:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800674a:	4313      	orrs	r3, r2
 800674c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006754:	60da      	str	r2, [r3, #12]
 8006756:	e0f2      	b.n	800693e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800675e:	e0ee      	b.n	800693e <UART_SetConfig+0xb26>
 8006760:	0800ad70 	.word	0x0800ad70
 8006764:	58024400 	.word	0x58024400
 8006768:	03d09000 	.word	0x03d09000
 800676c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006770:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	f200 80b7 	bhi.w	80068e8 <UART_SetConfig+0xad0>
 800677a:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <UART_SetConfig+0x968>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	08006885 	.word	0x08006885
 8006784:	0800688d 	.word	0x0800688d
 8006788:	080068e9 	.word	0x080068e9
 800678c:	080068e9 	.word	0x080068e9
 8006790:	08006895 	.word	0x08006895
 8006794:	080068e9 	.word	0x080068e9
 8006798:	080068e9 	.word	0x080068e9
 800679c:	080068e9 	.word	0x080068e9
 80067a0:	080068a5 	.word	0x080068a5
 80067a4:	080068e9 	.word	0x080068e9
 80067a8:	080068e9 	.word	0x080068e9
 80067ac:	080068e9 	.word	0x080068e9
 80067b0:	080068e9 	.word	0x080068e9
 80067b4:	080068e9 	.word	0x080068e9
 80067b8:	080068e9 	.word	0x080068e9
 80067bc:	080068e9 	.word	0x080068e9
 80067c0:	080068b5 	.word	0x080068b5
 80067c4:	080068e9 	.word	0x080068e9
 80067c8:	080068e9 	.word	0x080068e9
 80067cc:	080068e9 	.word	0x080068e9
 80067d0:	080068e9 	.word	0x080068e9
 80067d4:	080068e9 	.word	0x080068e9
 80067d8:	080068e9 	.word	0x080068e9
 80067dc:	080068e9 	.word	0x080068e9
 80067e0:	080068e9 	.word	0x080068e9
 80067e4:	080068e9 	.word	0x080068e9
 80067e8:	080068e9 	.word	0x080068e9
 80067ec:	080068e9 	.word	0x080068e9
 80067f0:	080068e9 	.word	0x080068e9
 80067f4:	080068e9 	.word	0x080068e9
 80067f8:	080068e9 	.word	0x080068e9
 80067fc:	080068e9 	.word	0x080068e9
 8006800:	080068db 	.word	0x080068db
 8006804:	080068e9 	.word	0x080068e9
 8006808:	080068e9 	.word	0x080068e9
 800680c:	080068e9 	.word	0x080068e9
 8006810:	080068e9 	.word	0x080068e9
 8006814:	080068e9 	.word	0x080068e9
 8006818:	080068e9 	.word	0x080068e9
 800681c:	080068e9 	.word	0x080068e9
 8006820:	080068e9 	.word	0x080068e9
 8006824:	080068e9 	.word	0x080068e9
 8006828:	080068e9 	.word	0x080068e9
 800682c:	080068e9 	.word	0x080068e9
 8006830:	080068e9 	.word	0x080068e9
 8006834:	080068e9 	.word	0x080068e9
 8006838:	080068e9 	.word	0x080068e9
 800683c:	080068e9 	.word	0x080068e9
 8006840:	080068e9 	.word	0x080068e9
 8006844:	080068e9 	.word	0x080068e9
 8006848:	080068e9 	.word	0x080068e9
 800684c:	080068e9 	.word	0x080068e9
 8006850:	080068e9 	.word	0x080068e9
 8006854:	080068e9 	.word	0x080068e9
 8006858:	080068e9 	.word	0x080068e9
 800685c:	080068e9 	.word	0x080068e9
 8006860:	080068e9 	.word	0x080068e9
 8006864:	080068e9 	.word	0x080068e9
 8006868:	080068e9 	.word	0x080068e9
 800686c:	080068e9 	.word	0x080068e9
 8006870:	080068e9 	.word	0x080068e9
 8006874:	080068e9 	.word	0x080068e9
 8006878:	080068e9 	.word	0x080068e9
 800687c:	080068e9 	.word	0x080068e9
 8006880:	080068e1 	.word	0x080068e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006884:	f7fd f928 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8006888:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800688a:	e033      	b.n	80068f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800688c:	f7fd f93a 	bl	8003b04 <HAL_RCC_GetPCLK2Freq>
 8006890:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006892:	e02f      	b.n	80068f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006894:	f107 0314 	add.w	r3, r7, #20
 8006898:	4618      	mov	r0, r3
 800689a:	f7fe f84d 	bl	8004938 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068a2:	e027      	b.n	80068f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a4:	f107 0308 	add.w	r3, r7, #8
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe f991 	bl	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068b2:	e01f      	b.n	80068f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068b4:	4b2c      	ldr	r3, [pc, #176]	; (8006968 <UART_SetConfig+0xb50>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d009      	beq.n	80068d4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068c0:	4b29      	ldr	r3, [pc, #164]	; (8006968 <UART_SetConfig+0xb50>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	08db      	lsrs	r3, r3, #3
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	4a28      	ldr	r2, [pc, #160]	; (800696c <UART_SetConfig+0xb54>)
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068d2:	e00f      	b.n	80068f4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80068d4:	4b25      	ldr	r3, [pc, #148]	; (800696c <UART_SetConfig+0xb54>)
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068d8:	e00c      	b.n	80068f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068da:	4b25      	ldr	r3, [pc, #148]	; (8006970 <UART_SetConfig+0xb58>)
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068de:	e009      	b.n	80068f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068e6:	e005      	b.n	80068f4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80068f2:	bf00      	nop
    }

    if (pclk != 0U)
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d021      	beq.n	800693e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <UART_SetConfig+0xb5c>)
 8006900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006904:	461a      	mov	r2, r3
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	fbb3 f2f2 	udiv	r2, r3, r2
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	441a      	add	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	fbb2 f3f3 	udiv	r3, r2, r3
 800691c:	b29b      	uxth	r3, r3
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	2b0f      	cmp	r3, #15
 8006924:	d908      	bls.n	8006938 <UART_SetConfig+0xb20>
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692c:	d204      	bcs.n	8006938 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	e002      	b.n	800693e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800695a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800695e:	4618      	mov	r0, r3
 8006960:	3738      	adds	r7, #56	; 0x38
 8006962:	46bd      	mov	sp, r7
 8006964:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006968:	58024400 	.word	0x58024400
 800696c:	03d09000 	.word	0x03d09000
 8006970:	003d0900 	.word	0x003d0900
 8006974:	0800ad70 	.word	0x0800ad70

08006978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a76:	d10a      	bne.n	8006a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006acc:	f7fb f94c 	bl	8001d68 <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d10e      	bne.n	8006afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f82c 	bl	8006b4c <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e022      	b.n	8006b44 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d10e      	bne.n	8006b2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f816 	bl	8006b4c <UART_WaitOnFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e00c      	b.n	8006b44 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b5c:	e062      	b.n	8006c24 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b64:	d05e      	beq.n	8006c24 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b66:	f7fb f8ff 	bl	8001d68 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d302      	bcc.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11d      	bne.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b8a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0201 	bic.w	r2, r2, #1
 8006b9a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e045      	b.n	8006c44 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02e      	beq.n	8006c24 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd4:	d126      	bne.n	8006c24 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bde:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0201 	bic.w	r2, r2, #1
 8006bfe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e00f      	b.n	8006c44 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69da      	ldr	r2, [r3, #28]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	bf0c      	ite	eq
 8006c34:	2301      	moveq	r3, #1
 8006c36:	2300      	movne	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d08d      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6899      	ldr	r1, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4b08      	ldr	r3, [pc, #32]	; (8006c90 <UART_EndRxTransfer+0x44>)
 8006c70:	400b      	ands	r3, r1
 8006c72:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	effffffe 	.word	0xeffffffe

08006c94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7ff f890 	bl	8005dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fa fd52 	bl	8001790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d02:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0a:	2b22      	cmp	r3, #34	; 0x22
 8006d0c:	d13b      	bne.n	8006d86 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d16:	89bb      	ldrh	r3, [r7, #12]
 8006d18:	b2d9      	uxtb	r1, r3
 8006d1a:	89fb      	ldrh	r3, [r7, #14]
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	400a      	ands	r2, r1
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d122      	bne.n	8006d96 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d5e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0201 	bic.w	r2, r2, #1
 8006d6e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fa fd16 	bl	80017b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d84:	e007      	b.n	8006d96 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699a      	ldr	r2, [r3, #24]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0208 	orr.w	r2, r2, #8
 8006d94:	619a      	str	r2, [r3, #24]
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dac:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db4:	2b22      	cmp	r3, #34	; 0x22
 8006db6:	d13b      	bne.n	8006e30 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dc6:	89ba      	ldrh	r2, [r7, #12]
 8006dc8:	89fb      	ldrh	r3, [r7, #14]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd6:	1c9a      	adds	r2, r3, #2
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d122      	bne.n	8006e40 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e08:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fa fcc1 	bl	80017b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e2e:	e007      	b.n	8006e40 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699a      	ldr	r2, [r3, #24]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0208 	orr.w	r2, r2, #8
 8006e3e:	619a      	str	r2, [r3, #24]
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e56:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e5e:	2b22      	cmp	r3, #34	; 0x22
 8006e60:	d166      	bne.n	8006f30 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e68:	81fb      	strh	r3, [r7, #14]
 8006e6a:	e03d      	b.n	8006ee8 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e74:	893b      	ldrh	r3, [r7, #8]
 8006e76:	b2d9      	uxtb	r1, r3
 8006e78:	89bb      	ldrh	r3, [r7, #12]
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e80:	400a      	ands	r2, r1
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d119      	bne.n	8006ee2 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6899      	ldr	r1, [r3, #8]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	4b1f      	ldr	r3, [pc, #124]	; (8006f48 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8006eca:	400b      	ands	r3, r1
 8006ecc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fa fc67 	bl	80017b0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006ee2:	89fb      	ldrh	r3, [r7, #14]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	81fb      	strh	r3, [r7, #14]
 8006ee8:	89fb      	ldrh	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1be      	bne.n	8006e6c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ef4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ef6:	897b      	ldrh	r3, [r7, #10]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d021      	beq.n	8006f40 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f02:	897a      	ldrh	r2, [r7, #10]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d21b      	bcs.n	8006f40 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006f16:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a0c      	ldr	r2, [pc, #48]	; (8006f4c <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006f1c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0220 	orr.w	r2, r2, #32
 8006f2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f2e:	e007      	b.n	8006f40 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0208 	orr.w	r2, r2, #8
 8006f3e:	619a      	str	r2, [r3, #24]
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	effffffe 	.word	0xeffffffe
 8006f4c:	08006cf5 	.word	0x08006cf5

08006f50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f5e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f66:	2b22      	cmp	r3, #34	; 0x22
 8006f68:	d166      	bne.n	8007038 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f70:	82fb      	strh	r3, [r7, #22]
 8006f72:	e03d      	b.n	8006ff0 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f80:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f82:	8a3a      	ldrh	r2, [r7, #16]
 8006f84:	8abb      	ldrh	r3, [r7, #20]
 8006f86:	4013      	ands	r3, r2
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f92:	1c9a      	adds	r2, r3, #2
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d119      	bne.n	8006fea <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fc4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6899      	ldr	r1, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b1f      	ldr	r3, [pc, #124]	; (8007050 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8006fd2:	400b      	ands	r3, r1
 8006fd4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7fa fbe3 	bl	80017b0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006fea:	8afb      	ldrh	r3, [r7, #22]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	82fb      	strh	r3, [r7, #22]
 8006ff0:	8afb      	ldrh	r3, [r7, #22]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1be      	bne.n	8006f74 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ffc:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ffe:	8a7b      	ldrh	r3, [r7, #18]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d021      	beq.n	8007048 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800700a:	8a7a      	ldrh	r2, [r7, #18]
 800700c:	429a      	cmp	r2, r3
 800700e:	d21b      	bcs.n	8007048 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800701e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a0c      	ldr	r2, [pc, #48]	; (8007054 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8007024:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0220 	orr.w	r2, r2, #32
 8007034:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007036:	e007      	b.n	8007048 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0208 	orr.w	r2, r2, #8
 8007046:	619a      	str	r2, [r3, #24]
}
 8007048:	bf00      	nop
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	effffffe 	.word	0xeffffffe
 8007054:	08006d9f 	.word	0x08006d9f

08007058 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_UARTEx_DisableFifoMode+0x16>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e027      	b.n	80070fa <HAL_UARTEx_DisableFifoMode+0x66>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2224      	movs	r2, #36	; 0x24
 80070b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0201 	bic.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800711a:	2302      	movs	r3, #2
 800711c:	e02d      	b.n	800717a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2224      	movs	r2, #36	; 0x24
 800712a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f850 	bl	8007200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007196:	2302      	movs	r3, #2
 8007198:	e02d      	b.n	80071f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2224      	movs	r2, #36	; 0x24
 80071a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f812 	bl	8007200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b089      	sub	sp, #36	; 0x24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007208:	4a2f      	ldr	r2, [pc, #188]	; (80072c8 <UARTEx_SetNbDataToProcess+0xc8>)
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007212:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007216:	4a2d      	ldr	r2, [pc, #180]	; (80072cc <UARTEx_SetNbDataToProcess+0xcc>)
 8007218:	f107 030c 	add.w	r3, r7, #12
 800721c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007220:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800723c:	e03d      	b.n	80072ba <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800723e:	2310      	movs	r3, #16
 8007240:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007242:	2310      	movs	r3, #16
 8007244:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	0e5b      	lsrs	r3, r3, #25
 800724e:	b2db      	uxtb	r3, r3
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	0f5b      	lsrs	r3, r3, #29
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007266:	7fbb      	ldrb	r3, [r7, #30]
 8007268:	7f3a      	ldrb	r2, [r7, #28]
 800726a:	f107 0120 	add.w	r1, r7, #32
 800726e:	440a      	add	r2, r1
 8007270:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007274:	fb02 f303 	mul.w	r3, r2, r3
 8007278:	7f3a      	ldrb	r2, [r7, #28]
 800727a:	f107 0120 	add.w	r1, r7, #32
 800727e:	440a      	add	r2, r1
 8007280:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007284:	fb93 f3f2 	sdiv	r3, r3, r2
 8007288:	b29a      	uxth	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007290:	7ffb      	ldrb	r3, [r7, #31]
 8007292:	7f7a      	ldrb	r2, [r7, #29]
 8007294:	f107 0120 	add.w	r1, r7, #32
 8007298:	440a      	add	r2, r1
 800729a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	7f7a      	ldrb	r2, [r7, #29]
 80072a4:	f107 0120 	add.w	r1, r7, #32
 80072a8:	440a      	add	r2, r1
 80072aa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80072ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072ba:	bf00      	nop
 80072bc:	3724      	adds	r7, #36	; 0x24
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	0800ad50 	.word	0x0800ad50
 80072cc:	0800ad58 	.word	0x0800ad58

080072d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072d0:	b084      	sub	sp, #16
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	f107 001c 	add.w	r0, r7, #28
 80072de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d120      	bne.n	800732a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	4b25      	ldr	r3, [pc, #148]	; (8007390 <USB_CoreInit+0xc0>)
 80072fa:	4013      	ands	r3, r2
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800730c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730e:	2b01      	cmp	r3, #1
 8007310:	d105      	bne.n	800731e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa4c 	bl	80077bc <USB_CoreReset>
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]
 8007328:	e01a      	b.n	8007360 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa40 	bl	80077bc <USB_CoreReset>
 800733c:	4603      	mov	r3, r0
 800733e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	639a      	str	r2, [r3, #56]	; 0x38
 8007352:	e005      	b.n	8007360 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	2b01      	cmp	r3, #1
 8007364:	d10b      	bne.n	800737e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f043 0206 	orr.w	r2, r3, #6
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f043 0220 	orr.w	r2, r3, #32
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800738a:	b004      	add	sp, #16
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	ffbdffbf 	.word	0xffbdffbf

08007394 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f023 0201 	bic.w	r2, r3, #1
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	460b      	mov	r3, r1
 80073c0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d106      	bne.n	80073e2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]
 80073e0:	e00b      	b.n	80073fa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]
 80073f4:	e001      	b.n	80073fa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e003      	b.n	8007402 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80073fa:	2032      	movs	r0, #50	; 0x32
 80073fc:	f7fa fcc0 	bl	8001d80 <HAL_Delay>

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800740c:	b084      	sub	sp, #16
 800740e:	b580      	push	{r7, lr}
 8007410:	b086      	sub	sp, #24
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800741a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007426:	2300      	movs	r3, #0
 8007428:	613b      	str	r3, [r7, #16]
 800742a:	e009      	b.n	8007440 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	3340      	adds	r3, #64	; 0x40
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	2200      	movs	r2, #0
 8007438:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	3301      	adds	r3, #1
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b0e      	cmp	r3, #14
 8007444:	d9f2      	bls.n	800742c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d11c      	bne.n	8007486 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800745a:	f043 0302 	orr.w	r3, r3, #2
 800745e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e005      	b.n	8007492 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007498:	461a      	mov	r2, r3
 800749a:	2300      	movs	r3, #0
 800749c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a4:	4619      	mov	r1, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ac:	461a      	mov	r2, r3
 80074ae:	680b      	ldr	r3, [r1, #0]
 80074b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d10c      	bne.n	80074d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f949 	bl	8007758 <USB_SetDevSpeed>
 80074c6:	e008      	b.n	80074da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074c8:	2101      	movs	r1, #1
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f944 	bl	8007758 <USB_SetDevSpeed>
 80074d0:	e003      	b.n	80074da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074d2:	2103      	movs	r1, #3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f93f 	bl	8007758 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074da:	2110      	movs	r1, #16
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f8f3 	bl	80076c8 <USB_FlushTxFifo>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f911 	bl	8007714 <USB_FlushRxFifo>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007502:	461a      	mov	r2, r3
 8007504:	2300      	movs	r3, #0
 8007506:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750e:	461a      	mov	r2, r3
 8007510:	2300      	movs	r3, #0
 8007512:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751a:	461a      	mov	r2, r3
 800751c:	2300      	movs	r3, #0
 800751e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	e043      	b.n	80075ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800753c:	d118      	bne.n	8007570 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007550:	461a      	mov	r2, r3
 8007552:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	e013      	b.n	8007582 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007566:	461a      	mov	r2, r3
 8007568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e008      	b.n	8007582 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757c:	461a      	mov	r2, r3
 800757e:	2300      	movs	r3, #0
 8007580:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758e:	461a      	mov	r2, r3
 8007590:	2300      	movs	r3, #0
 8007592:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a0:	461a      	mov	r2, r3
 80075a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	3301      	adds	r3, #1
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d3b7      	bcc.n	8007526 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	e043      	b.n	8007644 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d2:	d118      	bne.n	8007606 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e6:	461a      	mov	r2, r3
 80075e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e013      	b.n	8007618 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fc:	461a      	mov	r2, r3
 80075fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e008      	b.n	8007618 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007612:	461a      	mov	r2, r3
 8007614:	2300      	movs	r3, #0
 8007616:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007624:	461a      	mov	r2, r3
 8007626:	2300      	movs	r3, #0
 8007628:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	461a      	mov	r2, r3
 8007638:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800763c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	3301      	adds	r3, #1
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	429a      	cmp	r2, r3
 800764a:	d3b7      	bcc.n	80075bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800765a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800765e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800766c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	2b00      	cmp	r3, #0
 8007672:	d105      	bne.n	8007680 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f043 0210 	orr.w	r2, r3, #16
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <USB_DevInit+0x2b4>)
 8007686:	4313      	orrs	r3, r2
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800768c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	f043 0208 	orr.w	r2, r3, #8
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800769e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d105      	bne.n	80076b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <USB_DevInit+0x2b8>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076bc:	b004      	add	sp, #16
 80076be:	4770      	bx	lr
 80076c0:	803c3800 	.word	0x803c3800
 80076c4:	40000004 	.word	0x40000004

080076c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	019b      	lsls	r3, r3, #6
 80076da:	f043 0220 	orr.w	r2, r3, #32
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4a09      	ldr	r2, [pc, #36]	; (8007710 <USB_FlushTxFifo+0x48>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d901      	bls.n	80076f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e006      	b.n	8007702 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d0f0      	beq.n	80076e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	00030d40 	.word	0x00030d40

08007714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2210      	movs	r2, #16
 8007724:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <USB_FlushRxFifo+0x40>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d901      	bls.n	8007738 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e006      	b.n	8007746 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0310 	and.w	r3, r3, #16
 8007740:	2b10      	cmp	r3, #16
 8007742:	d0f0      	beq.n	8007726 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	00030d40 	.word	0x00030d40

08007758 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	68f9      	ldr	r1, [r7, #12]
 8007774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007778:	4313      	orrs	r3, r2
 800777a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077a4:	f043 0302 	orr.w	r3, r3, #2
 80077a8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80077aa:	2003      	movs	r0, #3
 80077ac:	f7fa fae8 	bl	8001d80 <HAL_Delay>

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4a13      	ldr	r2, [pc, #76]	; (8007820 <USB_CoreReset+0x64>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d901      	bls.n	80077da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e01b      	b.n	8007812 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	daf2      	bge.n	80077c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f043 0201 	orr.w	r2, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4a09      	ldr	r2, [pc, #36]	; (8007820 <USB_CoreReset+0x64>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d901      	bls.n	8007804 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e006      	b.n	8007812 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d0f0      	beq.n	80077f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	00030d40 	.word	0x00030d40

08007824 <arm_var_f32>:
 8007824:	2901      	cmp	r1, #1
 8007826:	d971      	bls.n	800790c <arm_var_f32+0xe8>
 8007828:	b4f0      	push	{r4, r5, r6, r7}
 800782a:	088d      	lsrs	r5, r1, #2
 800782c:	d071      	beq.n	8007912 <arm_var_f32+0xee>
 800782e:	f100 0310 	add.w	r3, r0, #16
 8007832:	462e      	mov	r6, r5
 8007834:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8007930 <arm_var_f32+0x10c>
 8007838:	461c      	mov	r4, r3
 800783a:	ed14 7a04 	vldr	s14, [r4, #-16]
 800783e:	3e01      	subs	r6, #1
 8007840:	ed14 6a03 	vldr	s12, [r4, #-12]
 8007844:	f104 0410 	add.w	r4, r4, #16
 8007848:	ee37 7a87 	vadd.f32	s14, s15, s14
 800784c:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8007850:	ed54 6a05 	vldr	s13, [r4, #-20]	; 0xffffffec
 8007854:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800785c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007860:	d1eb      	bne.n	800783a <arm_var_f32+0x16>
 8007862:	012f      	lsls	r7, r5, #4
 8007864:	f011 0403 	ands.w	r4, r1, #3
 8007868:	eb00 0607 	add.w	r6, r0, r7
 800786c:	d056      	beq.n	800791c <arm_var_f32+0xf8>
 800786e:	4623      	mov	r3, r4
 8007870:	ecb6 7a01 	vldmia	r6!, {s14}
 8007874:	3b01      	subs	r3, #1
 8007876:	ee77 7a87 	vadd.f32	s15, s15, s14
 800787a:	d1f9      	bne.n	8007870 <arm_var_f32+0x4c>
 800787c:	ee07 1a10 	vmov	s14, r1
 8007880:	eeb8 4a47 	vcvt.f32.u32	s8, s14
 8007884:	ee87 5a84 	vdiv.f32	s10, s15, s8
 8007888:	2d00      	cmp	r5, #0
 800788a:	d04e      	beq.n	800792a <arm_var_f32+0x106>
 800788c:	f100 0310 	add.w	r3, r0, #16
 8007890:	012f      	lsls	r7, r5, #4
 8007892:	4629      	mov	r1, r5
 8007894:	eddf 4a26 	vldr	s9, [pc, #152]	; 8007930 <arm_var_f32+0x10c>
 8007898:	ed13 6a04 	vldr	s12, [r3, #-16]
 800789c:	3901      	subs	r1, #1
 800789e:	ed13 7a02 	vldr	s14, [r3, #-8]
 80078a2:	f103 0310 	add.w	r3, r3, #16
 80078a6:	ee36 6a45 	vsub.f32	s12, s12, s10
 80078aa:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 80078ae:	ee77 7a45 	vsub.f32	s15, s14, s10
 80078b2:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 80078b6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80078ba:	ee26 6a06 	vmul.f32	s12, s12, s12
 80078be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80078c2:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80078c6:	ee76 7a24 	vadd.f32	s15, s12, s9
 80078ca:	ee35 6ac5 	vsub.f32	s12, s11, s10
 80078ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d2:	ee26 6a06 	vmul.f32	s12, s12, s12
 80078d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078da:	ee76 4a27 	vadd.f32	s9, s12, s15
 80078de:	d1db      	bne.n	8007898 <arm_var_f32+0x74>
 80078e0:	4438      	add	r0, r7
 80078e2:	b14c      	cbz	r4, 80078f8 <arm_var_f32+0xd4>
 80078e4:	ecb0 7a01 	vldmia	r0!, {s14}
 80078e8:	3c01      	subs	r4, #1
 80078ea:	ee37 7a45 	vsub.f32	s14, s14, s10
 80078ee:	ee27 7a07 	vmul.f32	s14, s14, s14
 80078f2:	ee74 4a87 	vadd.f32	s9, s9, s14
 80078f6:	d1f5      	bne.n	80078e4 <arm_var_f32+0xc0>
 80078f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80078fc:	bcf0      	pop	{r4, r5, r6, r7}
 80078fe:	ee34 4a67 	vsub.f32	s8, s8, s15
 8007902:	eec4 7a84 	vdiv.f32	s15, s9, s8
 8007906:	edc2 7a00 	vstr	s15, [r2]
 800790a:	4770      	bx	lr
 800790c:	2300      	movs	r3, #0
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	4770      	bx	lr
 8007912:	4606      	mov	r6, r0
 8007914:	460c      	mov	r4, r1
 8007916:	eddf 7a06 	vldr	s15, [pc, #24]	; 8007930 <arm_var_f32+0x10c>
 800791a:	e7a8      	b.n	800786e <arm_var_f32+0x4a>
 800791c:	ee07 1a10 	vmov	s14, r1
 8007920:	eeb8 4a47 	vcvt.f32.u32	s8, s14
 8007924:	ee87 5a84 	vdiv.f32	s10, s15, s8
 8007928:	e7b3      	b.n	8007892 <arm_var_f32+0x6e>
 800792a:	eddf 4a01 	vldr	s9, [pc, #4]	; 8007930 <arm_var_f32+0x10c>
 800792e:	e7d9      	b.n	80078e4 <arm_var_f32+0xc0>
 8007930:	00000000 	.word	0x00000000

08007934 <arm_std_f32>:
 8007934:	2901      	cmp	r1, #1
 8007936:	d065      	beq.n	8007a04 <arm_std_f32+0xd0>
 8007938:	eddf 5a39 	vldr	s11, [pc, #228]	; 8007a20 <arm_std_f32+0xec>
 800793c:	b530      	push	{r4, r5, lr}
 800793e:	088d      	lsrs	r5, r1, #2
 8007940:	b083      	sub	sp, #12
 8007942:	d062      	beq.n	8007a0a <arm_std_f32+0xd6>
 8007944:	eef0 6a65 	vmov.f32	s13, s11
 8007948:	f100 0310 	add.w	r3, r0, #16
 800794c:	462c      	mov	r4, r5
 800794e:	ed53 7a04 	vldr	s15, [r3, #-16]
 8007952:	3c01      	subs	r4, #1
 8007954:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007958:	f103 0310 	add.w	r3, r3, #16
 800795c:	ee27 4aa7 	vmul.f32	s8, s15, s15
 8007960:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8007964:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007968:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800796c:	ee27 5a07 	vmul.f32	s10, s14, s14
 8007970:	ee74 5a25 	vadd.f32	s11, s8, s11
 8007974:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007978:	ee64 6aa4 	vmul.f32	s13, s9, s9
 800797c:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007980:	ee77 7a24 	vadd.f32	s15, s14, s9
 8007984:	ee26 7a06 	vmul.f32	s14, s12, s12
 8007988:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800798c:	ee77 6a86 	vadd.f32	s13, s15, s12
 8007990:	ee77 5a25 	vadd.f32	s11, s14, s11
 8007994:	d1db      	bne.n	800794e <arm_std_f32+0x1a>
 8007996:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800799a:	f011 0303 	ands.w	r3, r1, #3
 800799e:	d009      	beq.n	80079b4 <arm_std_f32+0x80>
 80079a0:	ecf0 7a01 	vldmia	r0!, {s15}
 80079a4:	3b01      	subs	r3, #1
 80079a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80079aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80079ae:	ee75 5a87 	vadd.f32	s11, s11, s14
 80079b2:	d1f5      	bne.n	80079a0 <arm_std_f32+0x6c>
 80079b4:	ee07 1a90 	vmov	s15, r1
 80079b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80079bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c4:	ee77 6ac6 	vsub.f32	s13, s15, s12
 80079c8:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80079cc:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 80079d0:	ee27 7a07 	vmul.f32	s14, s14, s14
 80079d4:	ee27 7a00 	vmul.f32	s14, s14, s0
 80079d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80079dc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80079e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e4:	db0a      	blt.n	80079fc <arm_std_f32+0xc8>
 80079e6:	eeb1 0ac7 	vsqrt.f32	s0, s14
 80079ea:	eeb4 0a40 	vcmp.f32	s0, s0
 80079ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f2:	d10d      	bne.n	8007a10 <arm_std_f32+0xdc>
 80079f4:	ed82 0a00 	vstr	s0, [r2]
 80079f8:	b003      	add	sp, #12
 80079fa:	bd30      	pop	{r4, r5, pc}
 80079fc:	2300      	movs	r3, #0
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	b003      	add	sp, #12
 8007a02:	bd30      	pop	{r4, r5, pc}
 8007a04:	2300      	movs	r3, #0
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	4770      	bx	lr
 8007a0a:	eef0 6a65 	vmov.f32	s13, s11
 8007a0e:	e7c4      	b.n	800799a <arm_std_f32+0x66>
 8007a10:	eeb0 0a47 	vmov.f32	s0, s14
 8007a14:	9201      	str	r2, [sp, #4]
 8007a16:	f003 f8bb 	bl	800ab90 <sqrtf>
 8007a1a:	9a01      	ldr	r2, [sp, #4]
 8007a1c:	e7ea      	b.n	80079f4 <arm_std_f32+0xc0>
 8007a1e:	bf00      	nop
 8007a20:	00000000 	.word	0x00000000

08007a24 <arm_power_f32>:
 8007a24:	b430      	push	{r4, r5}
 8007a26:	088d      	lsrs	r5, r1, #2
 8007a28:	d031      	beq.n	8007a8e <arm_power_f32+0x6a>
 8007a2a:	f100 0310 	add.w	r3, r0, #16
 8007a2e:	462c      	mov	r4, r5
 8007a30:	ed9f 5a18 	vldr	s10, [pc, #96]	; 8007a94 <arm_power_f32+0x70>
 8007a34:	ed53 6a04 	vldr	s13, [r3, #-16]
 8007a38:	3c01      	subs	r4, #1
 8007a3a:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007a3e:	f103 0310 	add.w	r3, r3, #16
 8007a42:	ee26 6aa6 	vmul.f32	s12, s13, s13
 8007a46:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8007a4a:	ee67 6a07 	vmul.f32	s13, s14, s14
 8007a4e:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 8007a52:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007a56:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007a5a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8007a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a66:	ee35 5aa7 	vadd.f32	s10, s11, s15
 8007a6a:	d1e3      	bne.n	8007a34 <arm_power_f32+0x10>
 8007a6c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007a70:	f011 0103 	ands.w	r1, r1, #3
 8007a74:	d007      	beq.n	8007a86 <arm_power_f32+0x62>
 8007a76:	ecb0 6a01 	vldmia	r0!, {s12}
 8007a7a:	3901      	subs	r1, #1
 8007a7c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8007a80:	ee35 5a06 	vadd.f32	s10, s10, s12
 8007a84:	d1f7      	bne.n	8007a76 <arm_power_f32+0x52>
 8007a86:	ed82 5a00 	vstr	s10, [r2]
 8007a8a:	bc30      	pop	{r4, r5}
 8007a8c:	4770      	bx	lr
 8007a8e:	ed9f 5a01 	vldr	s10, [pc, #4]	; 8007a94 <arm_power_f32+0x70>
 8007a92:	e7ed      	b.n	8007a70 <arm_power_f32+0x4c>
 8007a94:	00000000 	.word	0x00000000

08007a98 <arm_mean_f32>:
 8007a98:	b430      	push	{r4, r5}
 8007a9a:	088d      	lsrs	r5, r1, #2
 8007a9c:	d02d      	beq.n	8007afa <arm_mean_f32+0x62>
 8007a9e:	f100 0310 	add.w	r3, r0, #16
 8007aa2:	462c      	mov	r4, r5
 8007aa4:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007b00 <arm_mean_f32+0x68>
 8007aa8:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007aac:	3c01      	subs	r4, #1
 8007aae:	ed13 6a03 	vldr	s12, [r3, #-12]
 8007ab2:	f103 0310 	add.w	r3, r3, #16
 8007ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aba:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8007abe:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8007ac2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ace:	d1eb      	bne.n	8007aa8 <arm_mean_f32+0x10>
 8007ad0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007ad4:	f011 0303 	ands.w	r3, r1, #3
 8007ad8:	d005      	beq.n	8007ae6 <arm_mean_f32+0x4e>
 8007ada:	ecb0 7a01 	vldmia	r0!, {s14}
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ae4:	d1f9      	bne.n	8007ada <arm_mean_f32+0x42>
 8007ae6:	ee07 1a10 	vmov	s14, r1
 8007aea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007aee:	bc30      	pop	{r4, r5}
 8007af0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007af4:	edc2 6a00 	vstr	s13, [r2]
 8007af8:	4770      	bx	lr
 8007afa:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007b00 <arm_mean_f32+0x68>
 8007afe:	e7e9      	b.n	8007ad4 <arm_mean_f32+0x3c>
 8007b00:	00000000 	.word	0x00000000

08007b04 <arm_max_f32>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	1e4d      	subs	r5, r1, #1
 8007b0a:	f100 0c04 	add.w	ip, r0, #4
 8007b0e:	edd0 7a00 	vldr	s15, [r0]
 8007b12:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8007b16:	d056      	beq.n	8007bc6 <arm_max_f32+0xc2>
 8007b18:	3014      	adds	r0, #20
 8007b1a:	46c8      	mov	r8, r9
 8007b1c:	2404      	movs	r4, #4
 8007b1e:	2600      	movs	r6, #0
 8007b20:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007b24:	f1a4 0a03 	sub.w	sl, r4, #3
 8007b28:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007b2c:	f1a4 0e02 	sub.w	lr, r4, #2
 8007b30:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007b34:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007b38:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007b3c:	1e67      	subs	r7, r4, #1
 8007b3e:	3010      	adds	r0, #16
 8007b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b44:	bfc8      	it	gt
 8007b46:	eef0 7a46 	vmovgt.f32	s15, s12
 8007b4a:	bfc8      	it	gt
 8007b4c:	4656      	movgt	r6, sl
 8007b4e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b56:	bf48      	it	mi
 8007b58:	eef0 7a66 	vmovmi.f32	s15, s13
 8007b5c:	bf48      	it	mi
 8007b5e:	4676      	movmi	r6, lr
 8007b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b68:	bf48      	it	mi
 8007b6a:	eef0 7a47 	vmovmi.f32	s15, s14
 8007b6e:	bf48      	it	mi
 8007b70:	463e      	movmi	r6, r7
 8007b72:	eef4 7ae5 	vcmpe.f32	s15, s11
 8007b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7a:	bf48      	it	mi
 8007b7c:	4626      	movmi	r6, r4
 8007b7e:	bf48      	it	mi
 8007b80:	eef0 7a65 	vmovmi.f32	s15, s11
 8007b84:	f1b8 0801 	subs.w	r8, r8, #1
 8007b88:	f104 0404 	add.w	r4, r4, #4
 8007b8c:	d1c8      	bne.n	8007b20 <arm_max_f32+0x1c>
 8007b8e:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 8007b92:	f015 0003 	ands.w	r0, r5, #3
 8007b96:	d018      	beq.n	8007bca <arm_max_f32+0xc6>
 8007b98:	1a08      	subs	r0, r1, r0
 8007b9a:	ecbc 7a01 	vldmia	ip!, {s14}
 8007b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba6:	bfc8      	it	gt
 8007ba8:	4606      	movgt	r6, r0
 8007baa:	f100 0001 	add.w	r0, r0, #1
 8007bae:	bfd8      	it	le
 8007bb0:	eeb0 7a67 	vmovle.f32	s14, s15
 8007bb4:	4281      	cmp	r1, r0
 8007bb6:	eef0 7a47 	vmov.f32	s15, s14
 8007bba:	d1ee      	bne.n	8007b9a <arm_max_f32+0x96>
 8007bbc:	ed82 7a00 	vstr	s14, [r2]
 8007bc0:	601e      	str	r6, [r3, #0]
 8007bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc6:	464e      	mov	r6, r9
 8007bc8:	e7e3      	b.n	8007b92 <arm_max_f32+0x8e>
 8007bca:	eeb0 7a67 	vmov.f32	s14, s15
 8007bce:	e7f5      	b.n	8007bbc <arm_max_f32+0xb8>

08007bd0 <arm_cfft_radix8by2_f32>:
 8007bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	ed2d 8b06 	vpush	{d8-d10}
 8007bdc:	f8b7 e000 	ldrh.w	lr, [r7]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8007be6:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8007bea:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8007bee:	f000 80b0 	beq.w	8007d52 <arm_cfft_radix8by2_f32+0x182>
 8007bf2:	008b      	lsls	r3, r1, #2
 8007bf4:	3210      	adds	r2, #16
 8007bf6:	f100 0610 	add.w	r6, r0, #16
 8007bfa:	f108 0510 	add.w	r5, r8, #16
 8007bfe:	3310      	adds	r3, #16
 8007c00:	18c4      	adds	r4, r0, r3
 8007c02:	4443      	add	r3, r8
 8007c04:	ed55 6a04 	vldr	s13, [r5, #-16]
 8007c08:	f1be 0e01 	subs.w	lr, lr, #1
 8007c0c:	ed56 4a04 	vldr	s9, [r6, #-16]
 8007c10:	f104 0410 	add.w	r4, r4, #16
 8007c14:	ed15 7a03 	vldr	s14, [r5, #-12]
 8007c18:	f106 0610 	add.w	r6, r6, #16
 8007c1c:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8007c20:	ed55 7a02 	vldr	s15, [r5, #-8]
 8007c24:	ed55 2a01 	vldr	s5, [r5, #-4]
 8007c28:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8007c2c:	ed53 0a04 	vldr	s1, [r3, #-16]
 8007c30:	f102 0210 	add.w	r2, r2, #16
 8007c34:	ed13 5a03 	vldr	s10, [r3, #-12]
 8007c38:	f105 0510 	add.w	r5, r5, #16
 8007c3c:	ed13 3a02 	vldr	s6, [r3, #-8]
 8007c40:	f103 0310 	add.w	r3, r3, #16
 8007c44:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8007c48:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8007c4c:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8007c50:	ee33 8a83 	vadd.f32	s16, s7, s6
 8007c54:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8007c58:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8007c5c:	ee34 0a06 	vadd.f32	s0, s8, s12
 8007c60:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8007c64:	ee76 aa87 	vadd.f32	s21, s13, s14
 8007c68:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8007c6c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007c70:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8007c74:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8007c78:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8007c7c:	ee71 8a05 	vadd.f32	s17, s2, s10
 8007c80:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8007c84:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8007c88:	ee72 9a22 	vadd.f32	s19, s4, s5
 8007c8c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007c90:	ee35 5a41 	vsub.f32	s10, s10, s2
 8007c94:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8007c98:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8007c9c:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007ca0:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8007ca4:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8007ca8:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8007cac:	ee72 7a62 	vsub.f32	s15, s4, s5
 8007cb0:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8007cb4:	ee73 2a63 	vsub.f32	s5, s6, s7
 8007cb8:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8007cbc:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8007cc0:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8007cc4:	ee24 3a84 	vmul.f32	s6, s9, s8
 8007cc8:	ee27 2a26 	vmul.f32	s4, s14, s13
 8007ccc:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8007cd0:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8007cd4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007cd8:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007cdc:	ee65 6a26 	vmul.f32	s13, s10, s13
 8007ce0:	ee25 5a04 	vmul.f32	s10, s10, s8
 8007ce4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007ce8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007cec:	ee33 4a02 	vadd.f32	s8, s6, s4
 8007cf0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007cf4:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8007cf8:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8007cfc:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8007d00:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8007d04:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8007d08:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8007d0c:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8007d10:	ee27 4a87 	vmul.f32	s8, s15, s14
 8007d14:	ee61 5a87 	vmul.f32	s11, s3, s14
 8007d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d1c:	ee22 5a87 	vmul.f32	s10, s5, s14
 8007d20:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007d24:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007d28:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8007d2c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007d30:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007d34:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007d38:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007d3c:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8007d40:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8007d44:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8007d48:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8007d4c:	f47f af5a 	bne.w	8007c04 <arm_cfft_radix8by2_f32+0x34>
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	b28c      	uxth	r4, r1
 8007d54:	2302      	movs	r3, #2
 8007d56:	4621      	mov	r1, r4
 8007d58:	f000 fc3e 	bl	80085d8 <arm_radix8_butterfly_f32>
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	4640      	mov	r0, r8
 8007d62:	2302      	movs	r3, #2
 8007d64:	ecbd 8b06 	vpop	{d8-d10}
 8007d68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6c:	f000 bc34 	b.w	80085d8 <arm_radix8_butterfly_f32>

08007d70 <arm_cfft_radix8by4_f32>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	ed2d 8b06 	vpush	{d8-d10}
 8007d78:	8804      	ldrh	r4, [r0, #0]
 8007d7a:	b08f      	sub	sp, #60	; 0x3c
 8007d7c:	ed91 6a00 	vldr	s12, [r1]
 8007d80:	460a      	mov	r2, r1
 8007d82:	0864      	lsrs	r4, r4, #1
 8007d84:	ed91 7a01 	vldr	s14, [r1, #4]
 8007d88:	9101      	str	r1, [sp, #4]
 8007d8a:	00a3      	lsls	r3, r4, #2
 8007d8c:	6841      	ldr	r1, [r0, #4]
 8007d8e:	0864      	lsrs	r4, r4, #1
 8007d90:	900c      	str	r0, [sp, #48]	; 0x30
 8007d92:	9205      	str	r2, [sp, #20]
 8007d94:	f101 0610 	add.w	r6, r1, #16
 8007d98:	4625      	mov	r5, r4
 8007d9a:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d9c:	f101 0408 	add.w	r4, r1, #8
 8007da0:	9602      	str	r6, [sp, #8]
 8007da2:	9407      	str	r4, [sp, #28]
 8007da4:	18d4      	adds	r4, r2, r3
 8007da6:	1eaa      	subs	r2, r5, #2
 8007da8:	f101 0518 	add.w	r5, r1, #24
 8007dac:	18e0      	adds	r0, r4, r3
 8007dae:	edd4 4a00 	vldr	s9, [r4]
 8007db2:	ed94 4a01 	vldr	s8, [r4, #4]
 8007db6:	46a6      	mov	lr, r4
 8007db8:	edd0 6a00 	vldr	s13, [r0]
 8007dbc:	18c7      	adds	r7, r0, r3
 8007dbe:	edd0 7a01 	vldr	s15, [r0, #4]
 8007dc2:	46a0      	mov	r8, r4
 8007dc4:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007dc8:	ed97 5a00 	vldr	s10, [r7]
 8007dcc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	9506      	str	r5, [sp, #24]
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8007dda:	900a      	str	r0, [sp, #40]	; 0x28
 8007ddc:	9801      	ldr	r0, [sp, #4]
 8007dde:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007de6:	ed97 3a01 	vldr	s6, [r7, #4]
 8007dea:	ee72 2a85 	vadd.f32	s5, s5, s10
 8007dee:	46bc      	mov	ip, r7
 8007df0:	ee76 3a84 	vadd.f32	s7, s13, s8
 8007df4:	9704      	str	r7, [sp, #16]
 8007df6:	ee36 7a44 	vsub.f32	s14, s12, s8
 8007dfa:	f8cd e00c 	str.w	lr, [sp, #12]
 8007dfe:	ee12 9a90 	vmov	r9, s5
 8007e02:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8007e06:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8007e0a:	1f3e      	subs	r6, r7, #4
 8007e0c:	f840 9b08 	str.w	r9, [r0], #8
 8007e10:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8007e14:	edde 2a01 	vldr	s5, [lr, #4]
 8007e18:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8007e1c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8007e20:	eddc 4a01 	vldr	s9, [ip, #4]
 8007e24:	ee36 6a22 	vadd.f32	s12, s12, s5
 8007e28:	9001      	str	r0, [sp, #4]
 8007e2a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007e2e:	9805      	ldr	r0, [sp, #20]
 8007e30:	ee13 9a90 	vmov	r9, s7
 8007e34:	ee37 7a43 	vsub.f32	s14, s14, s6
 8007e38:	ee36 6a24 	vadd.f32	s12, s12, s9
 8007e3c:	f1ae 0704 	sub.w	r7, lr, #4
 8007e40:	ee74 4a05 	vadd.f32	s9, s8, s10
 8007e44:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007e48:	ed80 6a01 	vstr	s12, [r0, #4]
 8007e4c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007e50:	f848 9b08 	str.w	r9, [r8], #8
 8007e54:	edce 4a01 	vstr	s9, [lr, #4]
 8007e58:	ee15 ea90 	vmov	lr, s11
 8007e5c:	f844 eb08 	str.w	lr, [r4], #8
 8007e60:	ee16 ea90 	vmov	lr, s13
 8007e64:	9408      	str	r4, [sp, #32]
 8007e66:	462c      	mov	r4, r5
 8007e68:	ed85 7a01 	vstr	s14, [r5, #4]
 8007e6c:	9d04      	ldr	r5, [sp, #16]
 8007e6e:	f84c eb08 	str.w	lr, [ip], #8
 8007e72:	edc5 7a01 	vstr	s15, [r5, #4]
 8007e76:	0855      	lsrs	r5, r2, #1
 8007e78:	9509      	str	r5, [sp, #36]	; 0x24
 8007e7a:	f000 8130 	beq.w	80080de <arm_cfft_radix8by4_f32+0x36e>
 8007e7e:	9805      	ldr	r0, [sp, #20]
 8007e80:	3b08      	subs	r3, #8
 8007e82:	46ab      	mov	fp, r5
 8007e84:	f1a4 020c 	sub.w	r2, r4, #12
 8007e88:	f100 0510 	add.w	r5, r0, #16
 8007e8c:	f101 0920 	add.w	r9, r1, #32
 8007e90:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007e94:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007e98:	4433      	add	r3, r6
 8007e9a:	3410      	adds	r4, #16
 8007e9c:	4660      	mov	r0, ip
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8007ea4:	ed54 6a02 	vldr	s13, [r4, #-8]
 8007ea8:	f1bb 0b01 	subs.w	fp, fp, #1
 8007eac:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007eb0:	f10a 0a08 	add.w	sl, sl, #8
 8007eb4:	edd1 7a00 	vldr	s15, [r1]
 8007eb8:	f105 0508 	add.w	r5, r5, #8
 8007ebc:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8007ec0:	edd0 2a00 	vldr	s5, [r0]
 8007ec4:	ed14 7a01 	vldr	s14, [r4, #-4]
 8007ec8:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8007ecc:	ed55 6a03 	vldr	s13, [r5, #-12]
 8007ed0:	f1a2 0208 	sub.w	r2, r2, #8
 8007ed4:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8007ed8:	ed90 2a01 	vldr	s4, [r0, #4]
 8007edc:	ee36 5a87 	vadd.f32	s10, s13, s14
 8007ee0:	ed91 6a01 	vldr	s12, [r1, #4]
 8007ee4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007ee8:	f109 0910 	add.w	r9, r9, #16
 8007eec:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8007ef0:	f104 0408 	add.w	r4, r4, #8
 8007ef4:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8007ef8:	f10e 0e18 	add.w	lr, lr, #24
 8007efc:	ee37 3a67 	vsub.f32	s6, s14, s15
 8007f00:	f1a3 0308 	sub.w	r3, r3, #8
 8007f04:	ed45 6a04 	vstr	s13, [r5, #-16]
 8007f08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f0c:	edd1 6a01 	vldr	s13, [r1, #4]
 8007f10:	ee75 1a86 	vadd.f32	s3, s11, s12
 8007f14:	edd0 4a01 	vldr	s9, [r0, #4]
 8007f18:	ee33 3a22 	vadd.f32	s6, s6, s5
 8007f1c:	ee75 6a26 	vadd.f32	s13, s10, s13
 8007f20:	ee35 5a46 	vsub.f32	s10, s10, s12
 8007f24:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007f28:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007f2c:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8007f30:	ee35 5a42 	vsub.f32	s10, s10, s4
 8007f34:	ed45 6a03 	vstr	s13, [r5, #-12]
 8007f38:	ee36 2a02 	vadd.f32	s4, s12, s4
 8007f3c:	edd6 7a00 	vldr	s15, [r6]
 8007f40:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007f44:	ed97 1a00 	vldr	s2, [r7]
 8007f48:	ee77 2a62 	vsub.f32	s5, s14, s5
 8007f4c:	ed92 8a04 	vldr	s16, [r2, #16]
 8007f50:	ee71 8a27 	vadd.f32	s17, s2, s15
 8007f54:	ed93 aa04 	vldr	s20, [r3, #16]
 8007f58:	ed16 7a01 	vldr	s14, [r6, #-4]
 8007f5c:	ee71 7a67 	vsub.f32	s15, s2, s15
 8007f60:	ed57 0a01 	vldr	s1, [r7, #-4]
 8007f64:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8007f68:	ee38 6a88 	vadd.f32	s12, s17, s16
 8007f6c:	edd3 9a03 	vldr	s19, [r3, #12]
 8007f70:	ee30 0a87 	vadd.f32	s0, s1, s14
 8007f74:	ed92 9a03 	vldr	s18, [r2, #12]
 8007f78:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8007f7c:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8007f80:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8007f84:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8007f88:	ee16 ca10 	vmov	ip, s12
 8007f8c:	ee30 6a49 	vsub.f32	s12, s0, s18
 8007f90:	ee77 4a01 	vadd.f32	s9, s14, s2
 8007f94:	f847 c908 	str.w	ip, [r7], #-8
 8007f98:	ee34 4a29 	vadd.f32	s8, s8, s19
 8007f9c:	edd2 8a03 	vldr	s17, [r2, #12]
 8007fa0:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8007fa4:	ed93 8a03 	vldr	s16, [r3, #12]
 8007fa8:	ee71 0a47 	vsub.f32	s1, s2, s14
 8007fac:	ee30 0a28 	vadd.f32	s0, s0, s17
 8007fb0:	ee39 1a67 	vsub.f32	s2, s18, s15
 8007fb4:	ee36 6a69 	vsub.f32	s12, s12, s19
 8007fb8:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007fbc:	ee75 5aca 	vsub.f32	s11, s11, s20
 8007fc0:	ed87 0a01 	vstr	s0, [r7, #4]
 8007fc4:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8007fc8:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8007fcc:	ee21 8a80 	vmul.f32	s16, s3, s0
 8007fd0:	ee23 7a26 	vmul.f32	s14, s6, s13
 8007fd4:	ee64 7a26 	vmul.f32	s15, s8, s13
 8007fd8:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8007fdc:	ee24 4a00 	vmul.f32	s8, s8, s0
 8007fe0:	ee23 3a00 	vmul.f32	s6, s6, s0
 8007fe4:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8007fe8:	ee24 0a80 	vmul.f32	s0, s9, s0
 8007fec:	ee38 7a07 	vadd.f32	s14, s16, s14
 8007ff0:	ee76 6a84 	vadd.f32	s13, s13, s8
 8007ff4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007ff8:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007ffc:	ee17 ca10 	vmov	ip, s14
 8008000:	f841 cb08 	str.w	ip, [r1], #8
 8008004:	ed01 3a01 	vstr	s6, [r1, #-4]
 8008008:	ed82 0a04 	vstr	s0, [r2, #16]
 800800c:	edc2 6a03 	vstr	s13, [r2, #12]
 8008010:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8008014:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8008018:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800801c:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8008020:	ee65 4a27 	vmul.f32	s9, s10, s15
 8008024:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8008028:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800802c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008030:	ee25 5a26 	vmul.f32	s10, s10, s13
 8008034:	ee66 6a26 	vmul.f32	s13, s12, s13
 8008038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800803c:	ee34 6a24 	vadd.f32	s12, s8, s9
 8008040:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8008044:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008048:	ee17 ca90 	vmov	ip, s15
 800804c:	ed04 6a04 	vstr	s12, [r4, #-16]
 8008050:	ed04 5a03 	vstr	s10, [r4, #-12]
 8008054:	f846 c908 	str.w	ip, [r6], #-8
 8008058:	edc6 6a01 	vstr	s13, [r6, #4]
 800805c:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8008060:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8008064:	ee62 5a27 	vmul.f32	s11, s4, s15
 8008068:	ee22 6a87 	vmul.f32	s12, s5, s14
 800806c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8008070:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8008074:	ee61 6a07 	vmul.f32	s13, s2, s14
 8008078:	ee20 7a87 	vmul.f32	s14, s1, s14
 800807c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8008080:	ee61 7a27 	vmul.f32	s15, s2, s15
 8008084:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008088:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800808c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8008090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008094:	ee16 ca10 	vmov	ip, s12
 8008098:	f840 cb08 	str.w	ip, [r0], #8
 800809c:	ed40 2a01 	vstr	s5, [r0, #-4]
 80080a0:	edc3 0a04 	vstr	s1, [r3, #16]
 80080a4:	edc3 7a03 	vstr	s15, [r3, #12]
 80080a8:	f47f aefc 	bne.w	8007ea4 <arm_cfft_radix8by4_f32+0x134>
 80080ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ae:	9802      	ldr	r0, [sp, #8]
 80080b0:	00cb      	lsls	r3, r1, #3
 80080b2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80080b6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80080ba:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80080be:	4498      	add	r8, r3
 80080c0:	449c      	add	ip, r3
 80080c2:	9102      	str	r1, [sp, #8]
 80080c4:	9901      	ldr	r1, [sp, #4]
 80080c6:	4419      	add	r1, r3
 80080c8:	9101      	str	r1, [sp, #4]
 80080ca:	9907      	ldr	r1, [sp, #28]
 80080cc:	4419      	add	r1, r3
 80080ce:	9107      	str	r1, [sp, #28]
 80080d0:	9908      	ldr	r1, [sp, #32]
 80080d2:	4419      	add	r1, r3
 80080d4:	9b06      	ldr	r3, [sp, #24]
 80080d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080da:	9108      	str	r1, [sp, #32]
 80080dc:	9306      	str	r3, [sp, #24]
 80080de:	9a01      	ldr	r2, [sp, #4]
 80080e0:	2304      	movs	r3, #4
 80080e2:	9e08      	ldr	r6, [sp, #32]
 80080e4:	edd2 7a00 	vldr	s15, [r2]
 80080e8:	ed96 7a00 	vldr	s14, [r6]
 80080ec:	edd8 2a00 	vldr	s5, [r8]
 80080f0:	ee77 5a87 	vadd.f32	s11, s15, s14
 80080f4:	ed9c 3a00 	vldr	s6, [ip]
 80080f8:	ed92 6a01 	vldr	s12, [r2, #4]
 80080fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008100:	edd6 6a01 	vldr	s13, [r6, #4]
 8008104:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8008108:	ed9c 2a01 	vldr	s4, [ip, #4]
 800810c:	ee36 5a26 	vadd.f32	s10, s12, s13
 8008110:	edd8 7a01 	vldr	s15, [r8, #4]
 8008114:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008118:	9d02      	ldr	r5, [sp, #8]
 800811a:	ee34 6a83 	vadd.f32	s12, s9, s6
 800811e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008122:	ee37 4a27 	vadd.f32	s8, s14, s15
 8008126:	9805      	ldr	r0, [sp, #20]
 8008128:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800812c:	4621      	mov	r1, r4
 800812e:	ed82 6a00 	vstr	s12, [r2]
 8008132:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8008136:	edd8 3a01 	vldr	s7, [r8, #4]
 800813a:	ee75 5a67 	vsub.f32	s11, s10, s15
 800813e:	eddc 1a01 	vldr	s3, [ip, #4]
 8008142:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008146:	ee75 3a23 	vadd.f32	s7, s10, s7
 800814a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800814e:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8008152:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8008156:	ee37 7a67 	vsub.f32	s14, s14, s15
 800815a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800815e:	ed82 5a01 	vstr	s10, [r2, #4]
 8008162:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008166:	9a07      	ldr	r2, [sp, #28]
 8008168:	ee77 7a02 	vadd.f32	s15, s14, s4
 800816c:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8008170:	edd2 2a00 	vldr	s5, [r2]
 8008174:	ed92 5a01 	vldr	s10, [r2, #4]
 8008178:	ee64 3a22 	vmul.f32	s7, s8, s5
 800817c:	ee24 4a05 	vmul.f32	s8, s8, s10
 8008180:	ee24 5a85 	vmul.f32	s10, s9, s10
 8008184:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8008188:	ee33 5a85 	vadd.f32	s10, s7, s10
 800818c:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8008190:	ed88 5a00 	vstr	s10, [r8]
 8008194:	edc8 4a01 	vstr	s9, [r8, #4]
 8008198:	edd5 4a01 	vldr	s9, [r5, #4]
 800819c:	edd5 6a00 	vldr	s13, [r5]
 80081a0:	9d06      	ldr	r5, [sp, #24]
 80081a2:	ee26 5a26 	vmul.f32	s10, s12, s13
 80081a6:	ee26 6a24 	vmul.f32	s12, s12, s9
 80081aa:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80081ae:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80081b2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80081b6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80081ba:	ed86 6a01 	vstr	s12, [r6, #4]
 80081be:	edc6 5a00 	vstr	s11, [r6]
 80081c2:	edd5 5a01 	vldr	s11, [r5, #4]
 80081c6:	edd5 6a00 	vldr	s13, [r5]
 80081ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80081cc:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80081d0:	ee67 6a26 	vmul.f32	s13, s14, s13
 80081d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80081d8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80081dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80081e0:	ee36 7a07 	vadd.f32	s14, s12, s14
 80081e4:	edcc 7a01 	vstr	s15, [ip, #4]
 80081e8:	ed8c 7a00 	vstr	s14, [ip]
 80081ec:	6872      	ldr	r2, [r6, #4]
 80081ee:	f000 f9f3 	bl	80085d8 <arm_radix8_butterfly_f32>
 80081f2:	9803      	ldr	r0, [sp, #12]
 80081f4:	4621      	mov	r1, r4
 80081f6:	6872      	ldr	r2, [r6, #4]
 80081f8:	2304      	movs	r3, #4
 80081fa:	f000 f9ed 	bl	80085d8 <arm_radix8_butterfly_f32>
 80081fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008200:	4621      	mov	r1, r4
 8008202:	6872      	ldr	r2, [r6, #4]
 8008204:	2304      	movs	r3, #4
 8008206:	f000 f9e7 	bl	80085d8 <arm_radix8_butterfly_f32>
 800820a:	4621      	mov	r1, r4
 800820c:	6872      	ldr	r2, [r6, #4]
 800820e:	2304      	movs	r3, #4
 8008210:	9804      	ldr	r0, [sp, #16]
 8008212:	b00f      	add	sp, #60	; 0x3c
 8008214:	ecbd 8b06 	vpop	{d8-d10}
 8008218:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	f000 b9dc 	b.w	80085d8 <arm_radix8_butterfly_f32>

08008220 <arm_cfft_f32>:
 8008220:	2a01      	cmp	r2, #1
 8008222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008226:	4606      	mov	r6, r0
 8008228:	4617      	mov	r7, r2
 800822a:	460c      	mov	r4, r1
 800822c:	4698      	mov	r8, r3
 800822e:	8805      	ldrh	r5, [r0, #0]
 8008230:	d053      	beq.n	80082da <arm_cfft_f32+0xba>
 8008232:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008236:	d04b      	beq.n	80082d0 <arm_cfft_f32+0xb0>
 8008238:	d916      	bls.n	8008268 <arm_cfft_f32+0x48>
 800823a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800823e:	d01a      	beq.n	8008276 <arm_cfft_f32+0x56>
 8008240:	d95a      	bls.n	80082f8 <arm_cfft_f32+0xd8>
 8008242:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008246:	d043      	beq.n	80082d0 <arm_cfft_f32+0xb0>
 8008248:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800824c:	d105      	bne.n	800825a <arm_cfft_f32+0x3a>
 800824e:	2301      	movs	r3, #1
 8008250:	6872      	ldr	r2, [r6, #4]
 8008252:	4629      	mov	r1, r5
 8008254:	4620      	mov	r0, r4
 8008256:	f000 f9bf 	bl	80085d8 <arm_radix8_butterfly_f32>
 800825a:	f1b8 0f00 	cmp.w	r8, #0
 800825e:	d111      	bne.n	8008284 <arm_cfft_f32+0x64>
 8008260:	2f01      	cmp	r7, #1
 8008262:	d016      	beq.n	8008292 <arm_cfft_f32+0x72>
 8008264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008268:	2d20      	cmp	r5, #32
 800826a:	d031      	beq.n	80082d0 <arm_cfft_f32+0xb0>
 800826c:	d948      	bls.n	8008300 <arm_cfft_f32+0xe0>
 800826e:	2d40      	cmp	r5, #64	; 0x40
 8008270:	d0ed      	beq.n	800824e <arm_cfft_f32+0x2e>
 8008272:	2d80      	cmp	r5, #128	; 0x80
 8008274:	d1f1      	bne.n	800825a <arm_cfft_f32+0x3a>
 8008276:	4621      	mov	r1, r4
 8008278:	4630      	mov	r0, r6
 800827a:	f7ff fca9 	bl	8007bd0 <arm_cfft_radix8by2_f32>
 800827e:	f1b8 0f00 	cmp.w	r8, #0
 8008282:	d0ed      	beq.n	8008260 <arm_cfft_f32+0x40>
 8008284:	68b2      	ldr	r2, [r6, #8]
 8008286:	4620      	mov	r0, r4
 8008288:	89b1      	ldrh	r1, [r6, #12]
 800828a:	f7f8 f829 	bl	80002e0 <arm_bitreversal_32>
 800828e:	2f01      	cmp	r7, #1
 8008290:	d1e8      	bne.n	8008264 <arm_cfft_f32+0x44>
 8008292:	ee07 5a90 	vmov	s15, r5
 8008296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	d0de      	beq.n	8008264 <arm_cfft_f32+0x44>
 80082a6:	f104 0108 	add.w	r1, r4, #8
 80082aa:	2300      	movs	r3, #0
 80082ac:	ed11 7a02 	vldr	s14, [r1, #-8]
 80082b0:	3301      	adds	r3, #1
 80082b2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80082b6:	3108      	adds	r1, #8
 80082b8:	429d      	cmp	r5, r3
 80082ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 80082be:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80082c2:	ed01 7a04 	vstr	s14, [r1, #-16]
 80082c6:	ed41 7a03 	vstr	s15, [r1, #-12]
 80082ca:	d1ef      	bne.n	80082ac <arm_cfft_f32+0x8c>
 80082cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d0:	4621      	mov	r1, r4
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7ff fd4c 	bl	8007d70 <arm_cfft_radix8by4_f32>
 80082d8:	e7bf      	b.n	800825a <arm_cfft_f32+0x3a>
 80082da:	b1a5      	cbz	r5, 8008306 <arm_cfft_f32+0xe6>
 80082dc:	f101 030c 	add.w	r3, r1, #12
 80082e0:	2200      	movs	r2, #0
 80082e2:	ed53 7a02 	vldr	s15, [r3, #-8]
 80082e6:	3201      	adds	r2, #1
 80082e8:	3308      	adds	r3, #8
 80082ea:	eef1 7a67 	vneg.f32	s15, s15
 80082ee:	4295      	cmp	r5, r2
 80082f0:	ed43 7a04 	vstr	s15, [r3, #-16]
 80082f4:	d1f5      	bne.n	80082e2 <arm_cfft_f32+0xc2>
 80082f6:	e79c      	b.n	8008232 <arm_cfft_f32+0x12>
 80082f8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80082fc:	d0a7      	beq.n	800824e <arm_cfft_f32+0x2e>
 80082fe:	e7ac      	b.n	800825a <arm_cfft_f32+0x3a>
 8008300:	2d10      	cmp	r5, #16
 8008302:	d0b8      	beq.n	8008276 <arm_cfft_f32+0x56>
 8008304:	e7a9      	b.n	800825a <arm_cfft_f32+0x3a>
 8008306:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800830a:	d896      	bhi.n	800823a <arm_cfft_f32+0x1a>
 800830c:	e7ac      	b.n	8008268 <arm_cfft_f32+0x48>
 800830e:	bf00      	nop

08008310 <arm_cmplx_mag_f32>:
 8008310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008314:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008318:	b084      	sub	sp, #16
 800831a:	d07f      	beq.n	800841c <arm_cmplx_mag_f32+0x10c>
 800831c:	f100 0420 	add.w	r4, r0, #32
 8008320:	f101 0510 	add.w	r5, r1, #16
 8008324:	4646      	mov	r6, r8
 8008326:	2700      	movs	r7, #0
 8008328:	e05a      	b.n	80083e0 <arm_cmplx_mag_f32+0xd0>
 800832a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800832e:	eeb4 0a40 	vcmp.f32	s0, s0
 8008332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008336:	f040 80a4 	bne.w	8008482 <arm_cmplx_mag_f32+0x172>
 800833a:	ed05 0a04 	vstr	s0, [r5, #-16]
 800833e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008342:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008346:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800834a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800834e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835a:	f2c0 808f 	blt.w	800847c <arm_cmplx_mag_f32+0x16c>
 800835e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008362:	eeb4 0a40 	vcmp.f32	s0, s0
 8008366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800836a:	f040 80af 	bne.w	80084cc <arm_cmplx_mag_f32+0x1bc>
 800836e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8008372:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008376:	ed14 0a03 	vldr	s0, [r4, #-12]
 800837a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800837e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008382:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800838a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800838e:	db72      	blt.n	8008476 <arm_cmplx_mag_f32+0x166>
 8008390:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008394:	eeb4 0a40 	vcmp.f32	s0, s0
 8008398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839c:	f040 808c 	bne.w	80084b8 <arm_cmplx_mag_f32+0x1a8>
 80083a0:	ed05 0a02 	vstr	s0, [r5, #-8]
 80083a4:	ed54 7a02 	vldr	s15, [r4, #-8]
 80083a8:	ed14 0a01 	vldr	s0, [r4, #-4]
 80083ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80083b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80083b4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80083b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c0:	db20      	blt.n	8008404 <arm_cmplx_mag_f32+0xf4>
 80083c2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80083c6:	eeb4 0a40 	vcmp.f32	s0, s0
 80083ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ce:	d169      	bne.n	80084a4 <arm_cmplx_mag_f32+0x194>
 80083d0:	3e01      	subs	r6, #1
 80083d2:	ed05 0a01 	vstr	s0, [r5, #-4]
 80083d6:	f104 0420 	add.w	r4, r4, #32
 80083da:	f105 0510 	add.w	r5, r5, #16
 80083de:	d019      	beq.n	8008414 <arm_cmplx_mag_f32+0x104>
 80083e0:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80083e4:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80083e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80083ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 80083f0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80083f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fc:	da95      	bge.n	800832a <arm_cmplx_mag_f32+0x1a>
 80083fe:	f845 7c10 	str.w	r7, [r5, #-16]
 8008402:	e79c      	b.n	800833e <arm_cmplx_mag_f32+0x2e>
 8008404:	3e01      	subs	r6, #1
 8008406:	f845 7c04 	str.w	r7, [r5, #-4]
 800840a:	f104 0420 	add.w	r4, r4, #32
 800840e:	f105 0510 	add.w	r5, r5, #16
 8008412:	d1e5      	bne.n	80083e0 <arm_cmplx_mag_f32+0xd0>
 8008414:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008418:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800841c:	f012 0503 	ands.w	r5, r2, #3
 8008420:	d026      	beq.n	8008470 <arm_cmplx_mag_f32+0x160>
 8008422:	f100 0408 	add.w	r4, r0, #8
 8008426:	2600      	movs	r6, #0
 8008428:	e00c      	b.n	8008444 <arm_cmplx_mag_f32+0x134>
 800842a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800842e:	eeb4 0a40 	vcmp.f32	s0, s0
 8008432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008436:	d12e      	bne.n	8008496 <arm_cmplx_mag_f32+0x186>
 8008438:	3d01      	subs	r5, #1
 800843a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800843e:	f104 0408 	add.w	r4, r4, #8
 8008442:	d015      	beq.n	8008470 <arm_cmplx_mag_f32+0x160>
 8008444:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008448:	3104      	adds	r1, #4
 800844a:	ed14 0a01 	vldr	s0, [r4, #-4]
 800844e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008452:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008456:	ee77 7a80 	vadd.f32	s15, s15, s0
 800845a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008462:	dae2      	bge.n	800842a <arm_cmplx_mag_f32+0x11a>
 8008464:	3d01      	subs	r5, #1
 8008466:	f841 6c04 	str.w	r6, [r1, #-4]
 800846a:	f104 0408 	add.w	r4, r4, #8
 800846e:	d1e9      	bne.n	8008444 <arm_cmplx_mag_f32+0x134>
 8008470:	b004      	add	sp, #16
 8008472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008476:	f845 7c08 	str.w	r7, [r5, #-8]
 800847a:	e793      	b.n	80083a4 <arm_cmplx_mag_f32+0x94>
 800847c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8008480:	e777      	b.n	8008372 <arm_cmplx_mag_f32+0x62>
 8008482:	eeb0 0a67 	vmov.f32	s0, s15
 8008486:	9203      	str	r2, [sp, #12]
 8008488:	9102      	str	r1, [sp, #8]
 800848a:	9001      	str	r0, [sp, #4]
 800848c:	f002 fb80 	bl	800ab90 <sqrtf>
 8008490:	a801      	add	r0, sp, #4
 8008492:	c807      	ldmia	r0, {r0, r1, r2}
 8008494:	e751      	b.n	800833a <arm_cmplx_mag_f32+0x2a>
 8008496:	eeb0 0a67 	vmov.f32	s0, s15
 800849a:	9101      	str	r1, [sp, #4]
 800849c:	f002 fb78 	bl	800ab90 <sqrtf>
 80084a0:	9901      	ldr	r1, [sp, #4]
 80084a2:	e7c9      	b.n	8008438 <arm_cmplx_mag_f32+0x128>
 80084a4:	eeb0 0a67 	vmov.f32	s0, s15
 80084a8:	9203      	str	r2, [sp, #12]
 80084aa:	9102      	str	r1, [sp, #8]
 80084ac:	9001      	str	r0, [sp, #4]
 80084ae:	f002 fb6f 	bl	800ab90 <sqrtf>
 80084b2:	a801      	add	r0, sp, #4
 80084b4:	c807      	ldmia	r0, {r0, r1, r2}
 80084b6:	e78b      	b.n	80083d0 <arm_cmplx_mag_f32+0xc0>
 80084b8:	eeb0 0a67 	vmov.f32	s0, s15
 80084bc:	9203      	str	r2, [sp, #12]
 80084be:	9102      	str	r1, [sp, #8]
 80084c0:	9001      	str	r0, [sp, #4]
 80084c2:	f002 fb65 	bl	800ab90 <sqrtf>
 80084c6:	a801      	add	r0, sp, #4
 80084c8:	c807      	ldmia	r0, {r0, r1, r2}
 80084ca:	e769      	b.n	80083a0 <arm_cmplx_mag_f32+0x90>
 80084cc:	eeb0 0a67 	vmov.f32	s0, s15
 80084d0:	9203      	str	r2, [sp, #12]
 80084d2:	9102      	str	r1, [sp, #8]
 80084d4:	9001      	str	r0, [sp, #4]
 80084d6:	f002 fb5b 	bl	800ab90 <sqrtf>
 80084da:	a801      	add	r0, sp, #4
 80084dc:	c807      	ldmia	r0, {r0, r1, r2}
 80084de:	e746      	b.n	800836e <arm_cmplx_mag_f32+0x5e>

080084e0 <arm_mult_f32>:
 80084e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084e2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80084e6:	d033      	beq.n	8008550 <arm_mult_f32+0x70>
 80084e8:	f100 0610 	add.w	r6, r0, #16
 80084ec:	f101 0510 	add.w	r5, r1, #16
 80084f0:	f102 0410 	add.w	r4, r2, #16
 80084f4:	4677      	mov	r7, lr
 80084f6:	ed16 7a04 	vldr	s14, [r6, #-16]
 80084fa:	3f01      	subs	r7, #1
 80084fc:	ed15 6a04 	vldr	s12, [r5, #-16]
 8008500:	f106 0610 	add.w	r6, r6, #16
 8008504:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8008508:	f105 0510 	add.w	r5, r5, #16
 800850c:	ee27 6a06 	vmul.f32	s12, s14, s12
 8008510:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8008514:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8008518:	f104 0410 	add.w	r4, r4, #16
 800851c:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8008520:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008524:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8008528:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 800852c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008530:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8008534:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8008538:	ee67 7a86 	vmul.f32	s15, s15, s12
 800853c:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 8008540:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8008544:	d1d7      	bne.n	80084f6 <arm_mult_f32+0x16>
 8008546:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800854a:	4420      	add	r0, r4
 800854c:	4421      	add	r1, r4
 800854e:	4422      	add	r2, r4
 8008550:	f013 0303 	ands.w	r3, r3, #3
 8008554:	d009      	beq.n	800856a <arm_mult_f32+0x8a>
 8008556:	ecf0 7a01 	vldmia	r0!, {s15}
 800855a:	3b01      	subs	r3, #1
 800855c:	ecb1 7a01 	vldmia	r1!, {s14}
 8008560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008564:	ece2 7a01 	vstmia	r2!, {s15}
 8008568:	d1f5      	bne.n	8008556 <arm_mult_f32+0x76>
 800856a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800856c <arm_abs_f32>:
 800856c:	b470      	push	{r4, r5, r6}
 800856e:	0896      	lsrs	r6, r2, #2
 8008570:	d025      	beq.n	80085be <arm_abs_f32+0x52>
 8008572:	f100 0410 	add.w	r4, r0, #16
 8008576:	f101 0310 	add.w	r3, r1, #16
 800857a:	4635      	mov	r5, r6
 800857c:	ed14 6a04 	vldr	s12, [r4, #-16]
 8008580:	3d01      	subs	r5, #1
 8008582:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008586:	f103 0310 	add.w	r3, r3, #16
 800858a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800858e:	eeb0 6ac6 	vabs.f32	s12, s12
 8008592:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008596:	eef0 6ae6 	vabs.f32	s13, s13
 800859a:	eeb0 7ac7 	vabs.f32	s14, s14
 800859e:	f104 0410 	add.w	r4, r4, #16
 80085a2:	eef0 7ae7 	vabs.f32	s15, s15
 80085a6:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
 80085aa:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 80085ae:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 80085b2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80085b6:	d1e1      	bne.n	800857c <arm_abs_f32+0x10>
 80085b8:	0136      	lsls	r6, r6, #4
 80085ba:	4430      	add	r0, r6
 80085bc:	4431      	add	r1, r6
 80085be:	f012 0203 	ands.w	r2, r2, #3
 80085c2:	d007      	beq.n	80085d4 <arm_abs_f32+0x68>
 80085c4:	ecf0 7a01 	vldmia	r0!, {s15}
 80085c8:	3a01      	subs	r2, #1
 80085ca:	eef0 7ae7 	vabs.f32	s15, s15
 80085ce:	ece1 7a01 	vstmia	r1!, {s15}
 80085d2:	d1f7      	bne.n	80085c4 <arm_abs_f32+0x58>
 80085d4:	bc70      	pop	{r4, r5, r6}
 80085d6:	4770      	bx	lr

080085d8 <arm_radix8_butterfly_f32>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	469e      	mov	lr, r3
 80085de:	4603      	mov	r3, r0
 80085e0:	468a      	mov	sl, r1
 80085e2:	468b      	mov	fp, r1
 80085e4:	3304      	adds	r3, #4
 80085e6:	ed2d 8b10 	vpush	{d8-d15}
 80085ea:	469c      	mov	ip, r3
 80085ec:	b09d      	sub	sp, #116	; 0x74
 80085ee:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 80088fc <arm_radix8_butterfly_f32+0x324>
 80085f2:	9019      	str	r0, [sp, #100]	; 0x64
 80085f4:	921a      	str	r2, [sp, #104]	; 0x68
 80085f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80085f8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80085fc:	f04f 0800 	mov.w	r8, #0
 8008600:	461a      	mov	r2, r3
 8008602:	9311      	str	r3, [sp, #68]	; 0x44
 8008604:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008608:	4611      	mov	r1, r2
 800860a:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	0053      	lsls	r3, r2, #1
 8008612:	18d5      	adds	r5, r2, r3
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	0113      	lsls	r3, r2, #4
 8008618:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800861a:	194c      	adds	r4, r1, r5
 800861c:	eb02 0609 	add.w	r6, r2, r9
 8008620:	9302      	str	r3, [sp, #8]
 8008622:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008626:	4613      	mov	r3, r2
 8008628:	190a      	adds	r2, r1, r4
 800862a:	eb06 0709 	add.w	r7, r6, r9
 800862e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008632:	1888      	adds	r0, r1, r2
 8008634:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008638:	4401      	add	r1, r0
 800863a:	3204      	adds	r2, #4
 800863c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008640:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008644:	9b00      	ldr	r3, [sp, #0]
 8008646:	3104      	adds	r1, #4
 8008648:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800864c:	44d8      	add	r8, fp
 800864e:	ed90 7a00 	vldr	s14, [r0]
 8008652:	ed94 5a00 	vldr	s10, [r4]
 8008656:	45c2      	cmp	sl, r8
 8008658:	edd7 3a00 	vldr	s7, [r7]
 800865c:	ed96 6a00 	vldr	s12, [r6]
 8008660:	ee37 1a85 	vadd.f32	s2, s15, s10
 8008664:	ed52 6a01 	vldr	s13, [r2, #-4]
 8008668:	ee73 4a87 	vadd.f32	s9, s7, s14
 800866c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8008670:	edd5 7a00 	vldr	s15, [r5]
 8008674:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8008678:	ed11 7a01 	vldr	s14, [r1, #-4]
 800867c:	ee36 2a26 	vadd.f32	s4, s12, s13
 8008680:	ee37 4a87 	vadd.f32	s8, s15, s14
 8008684:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008688:	ee71 5a24 	vadd.f32	s11, s2, s9
 800868c:	ee32 6a04 	vadd.f32	s12, s4, s8
 8008690:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008694:	ee31 1a64 	vsub.f32	s2, s2, s9
 8008698:	ee75 4a86 	vadd.f32	s9, s11, s12
 800869c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80086a0:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80086a4:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80086a8:	ee32 2a44 	vsub.f32	s4, s4, s8
 80086ac:	ee67 7a89 	vmul.f32	s15, s15, s18
 80086b0:	ed94 0a01 	vldr	s0, [r4, #4]
 80086b4:	edc4 5a00 	vstr	s11, [r4]
 80086b8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80086bc:	edd6 5a01 	vldr	s11, [r6, #4]
 80086c0:	edd5 2a01 	vldr	s5, [r5, #4]
 80086c4:	ee75 1a27 	vadd.f32	s3, s10, s15
 80086c8:	ed92 4a00 	vldr	s8, [r2]
 80086cc:	ee75 7a67 	vsub.f32	s15, s10, s15
 80086d0:	edd1 4a00 	vldr	s9, [r1]
 80086d4:	ee27 7a09 	vmul.f32	s14, s14, s18
 80086d8:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80086dc:	ed9c 6a00 	vldr	s12, [ip]
 80086e0:	ee72 6ae4 	vsub.f32	s13, s5, s9
 80086e4:	edd0 0a01 	vldr	s1, [r0, #4]
 80086e8:	ed97 5a01 	vldr	s10, [r7, #4]
 80086ec:	ee35 4a84 	vadd.f32	s8, s11, s8
 80086f0:	ee72 4aa4 	vadd.f32	s9, s5, s9
 80086f4:	ee73 5a26 	vadd.f32	s11, s6, s13
 80086f8:	ee76 2a00 	vadd.f32	s5, s12, s0
 80086fc:	ee73 6a66 	vsub.f32	s13, s6, s13
 8008700:	ee36 6a40 	vsub.f32	s12, s12, s0
 8008704:	ee35 0a20 	vadd.f32	s0, s10, s1
 8008708:	ee65 5a89 	vmul.f32	s11, s11, s18
 800870c:	ee35 5a60 	vsub.f32	s10, s10, s1
 8008710:	ee32 3a80 	vadd.f32	s6, s5, s0
 8008714:	ee74 0a24 	vadd.f32	s1, s8, s9
 8008718:	ee66 6a89 	vmul.f32	s13, s13, s18
 800871c:	ee74 4a64 	vsub.f32	s9, s8, s9
 8008720:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8008724:	ee75 2a25 	vadd.f32	s5, s10, s11
 8008728:	ee33 0a20 	vadd.f32	s0, s6, s1
 800872c:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008730:	ee33 3a60 	vsub.f32	s6, s6, s1
 8008734:	ee36 5a26 	vadd.f32	s10, s12, s13
 8008738:	ed8c 0a00 	vstr	s0, [ip]
 800873c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008740:	449c      	add	ip, r3
 8008742:	ee33 6a87 	vadd.f32	s12, s7, s14
 8008746:	ed84 3a01 	vstr	s6, [r4, #4]
 800874a:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800874e:	441c      	add	r4, r3
 8008750:	ee71 3a24 	vadd.f32	s7, s2, s9
 8008754:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008758:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800875c:	edc7 3a00 	vstr	s7, [r7]
 8008760:	ee34 1a42 	vsub.f32	s2, s8, s4
 8008764:	edc0 4a00 	vstr	s9, [r0]
 8008768:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800876c:	ee75 4a46 	vsub.f32	s9, s10, s12
 8008770:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008774:	ed87 1a01 	vstr	s2, [r7, #4]
 8008778:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800877c:	441f      	add	r7, r3
 800877e:	ee32 4a04 	vadd.f32	s8, s4, s8
 8008782:	ee71 1ae2 	vsub.f32	s3, s3, s5
 8008786:	ee36 6a05 	vadd.f32	s12, s12, s10
 800878a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800878e:	ed80 4a01 	vstr	s8, [r0, #4]
 8008792:	ed86 3a00 	vstr	s6, [r6]
 8008796:	4418      	add	r0, r3
 8008798:	ed41 1a01 	vstr	s3, [r1, #-4]
 800879c:	ed42 3a01 	vstr	s7, [r2, #-4]
 80087a0:	edc5 7a00 	vstr	s15, [r5]
 80087a4:	edc6 4a01 	vstr	s9, [r6, #4]
 80087a8:	441e      	add	r6, r3
 80087aa:	ed81 6a00 	vstr	s12, [r1]
 80087ae:	4419      	add	r1, r3
 80087b0:	edc2 5a00 	vstr	s11, [r2]
 80087b4:	441a      	add	r2, r3
 80087b6:	ed85 7a01 	vstr	s14, [r5, #4]
 80087ba:	441d      	add	r5, r3
 80087bc:	f63f af44 	bhi.w	8008648 <arm_radix8_butterfly_f32+0x70>
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087c4:	2b07      	cmp	r3, #7
 80087c6:	f240 81f4 	bls.w	8008bb2 <arm_radix8_butterfly_f32+0x5da>
 80087ca:	9901      	ldr	r1, [sp, #4]
 80087cc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80087d0:	9d02      	ldr	r5, [sp, #8]
 80087d2:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 80087d6:	3101      	adds	r1, #1
 80087d8:	eb04 000e 	add.w	r0, r4, lr
 80087dc:	00e4      	lsls	r4, r4, #3
 80087de:	3508      	adds	r5, #8
 80087e0:	4419      	add	r1, r3
 80087e2:	eb00 0c0e 	add.w	ip, r0, lr
 80087e6:	9413      	str	r4, [sp, #76]	; 0x4c
 80087e8:	00c0      	lsls	r0, r0, #3
 80087ea:	185e      	adds	r6, r3, r1
 80087ec:	4617      	mov	r7, r2
 80087ee:	9218      	str	r2, [sp, #96]	; 0x60
 80087f0:	f109 0908 	add.w	r9, r9, #8
 80087f4:	199c      	adds	r4, r3, r6
 80087f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80087fa:	9012      	str	r0, [sp, #72]	; 0x48
 80087fc:	195d      	adds	r5, r3, r5
 80087fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008800:	443a      	add	r2, r7
 8008802:	950c      	str	r5, [sp, #48]	; 0x30
 8008804:	4698      	mov	r8, r3
 8008806:	4420      	add	r0, r4
 8008808:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800880a:	19d7      	adds	r7, r2, r7
 800880c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008810:	4405      	add	r5, r0
 8008812:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008816:	9710      	str	r7, [sp, #64]	; 0x40
 8008818:	eb0c 070e 	add.w	r7, ip, lr
 800881c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008820:	3404      	adds	r4, #4
 8008822:	3004      	adds	r0, #4
 8008824:	44c8      	add	r8, r9
 8008826:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800882a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800882c:	940a      	str	r4, [sp, #40]	; 0x28
 800882e:	9009      	str	r0, [sp, #36]	; 0x24
 8008830:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008834:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8008836:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800883a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800883c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8008840:	eb07 080e 	add.w	r8, r7, lr
 8008844:	eb04 0900 	add.w	r9, r4, r0
 8008848:	00f8      	lsls	r0, r7, #3
 800884a:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800884e:	3504      	adds	r5, #4
 8008850:	4607      	mov	r7, r0
 8008852:	9017      	str	r0, [sp, #92]	; 0x5c
 8008854:	910b      	str	r1, [sp, #44]	; 0x2c
 8008856:	4618      	mov	r0, r3
 8008858:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800885c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800885e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8008862:	18e3      	adds	r3, r4, r3
 8008864:	9508      	str	r5, [sp, #32]
 8008866:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008868:	910e      	str	r1, [sp, #56]	; 0x38
 800886a:	4621      	mov	r1, r4
 800886c:	eb04 0805 	add.w	r8, r4, r5
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	19e5      	adds	r5, r4, r7
 8008874:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8008878:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800887a:	9316      	str	r3, [sp, #88]	; 0x58
 800887c:	190b      	adds	r3, r1, r4
 800887e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008880:	9505      	str	r5, [sp, #20]
 8008882:	9303      	str	r3, [sp, #12]
 8008884:	f100 0308 	add.w	r3, r0, #8
 8008888:	9707      	str	r7, [sp, #28]
 800888a:	4638      	mov	r0, r7
 800888c:	930f      	str	r3, [sp, #60]	; 0x3c
 800888e:	2301      	movs	r3, #1
 8008890:	9306      	str	r3, [sp, #24]
 8008892:	9b00      	ldr	r3, [sp, #0]
 8008894:	ed90 fa00 	vldr	s30, [r0]
 8008898:	edd0 ba01 	vldr	s23, [r0, #4]
 800889c:	9803      	ldr	r0, [sp, #12]
 800889e:	9903      	ldr	r1, [sp, #12]
 80088a0:	ed90 ba01 	vldr	s22, [r0, #4]
 80088a4:	9804      	ldr	r0, [sp, #16]
 80088a6:	edd1 ea00 	vldr	s29, [r1]
 80088aa:	edd0 aa01 	vldr	s21, [r0, #4]
 80088ae:	9805      	ldr	r0, [sp, #20]
 80088b0:	9905      	ldr	r1, [sp, #20]
 80088b2:	edd0 7a01 	vldr	s15, [r0, #4]
 80088b6:	ed91 da00 	vldr	s26, [r1]
 80088ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088bc:	9c04      	ldr	r4, [sp, #16]
 80088be:	edcd 7a01 	vstr	s15, [sp, #4]
 80088c2:	edd8 7a01 	vldr	s15, [r8, #4]
 80088c6:	9100      	str	r1, [sp, #0]
 80088c8:	edd2 fa00 	vldr	s31, [r2]
 80088cc:	ed94 ea00 	vldr	s28, [r4]
 80088d0:	ed92 ca01 	vldr	s24, [r2, #4]
 80088d4:	f8dd e020 	ldr.w	lr, [sp, #32]
 80088d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80088da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80088dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80088de:	edd9 da00 	vldr	s27, [r9]
 80088e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80088e4:	edd8 ca00 	vldr	s25, [r8]
 80088e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80088ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088ec:	f8dd c018 	ldr.w	ip, [sp, #24]
 80088f0:	ed99 aa01 	vldr	s20, [r9, #4]
 80088f4:	edcd 7a02 	vstr	s15, [sp, #8]
 80088f8:	9800      	ldr	r0, [sp, #0]
 80088fa:	e001      	b.n	8008900 <arm_radix8_butterfly_f32+0x328>
 80088fc:	3f3504f3 	.word	0x3f3504f3
 8008900:	edd5 3a00 	vldr	s7, [r5]
 8008904:	44dc      	add	ip, fp
 8008906:	ed91 7a00 	vldr	s14, [r1]
 800890a:	edd4 8a00 	vldr	s17, [r4]
 800890e:	45e2      	cmp	sl, ip
 8008910:	ed57 7a01 	vldr	s15, [r7, #-4]
 8008914:	ed90 5a00 	vldr	s10, [r0]
 8008918:	ed56 5a01 	vldr	s11, [r6, #-4]
 800891c:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8008920:	ed92 1a00 	vldr	s2, [r2]
 8008924:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8008928:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800892c:	ee75 9a25 	vadd.f32	s19, s10, s11
 8008930:	ee31 3a07 	vadd.f32	s6, s2, s14
 8008934:	ed92 8a01 	vldr	s16, [r2, #4]
 8008938:	ee73 6a84 	vadd.f32	s13, s7, s8
 800893c:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008940:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8008944:	ee73 1a06 	vadd.f32	s3, s6, s12
 8008948:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800894c:	ee75 7a84 	vadd.f32	s15, s11, s8
 8008950:	ee31 1a47 	vsub.f32	s2, s2, s14
 8008954:	ee31 7a85 	vadd.f32	s14, s3, s10
 8008958:	ee67 7a89 	vmul.f32	s15, s15, s18
 800895c:	ee33 3a46 	vsub.f32	s6, s6, s12
 8008960:	ed82 7a00 	vstr	s14, [r2]
 8008964:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8008968:	ed96 6a00 	vldr	s12, [r6]
 800896c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8008970:	edd5 3a01 	vldr	s7, [r5, #4]
 8008974:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8008978:	ed90 7a01 	vldr	s14, [r0, #4]
 800897c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8008980:	edde 4a00 	vldr	s9, [lr]
 8008984:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8008988:	ee77 2a46 	vsub.f32	s5, s14, s12
 800898c:	edd1 6a01 	vldr	s13, [r1, #4]
 8008990:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8008994:	edd7 0a00 	vldr	s1, [r7]
 8008998:	ee77 5a06 	vadd.f32	s11, s14, s12
 800899c:	ed94 7a01 	vldr	s14, [r4, #4]
 80089a0:	ee33 6aa4 	vadd.f32	s12, s7, s9
 80089a4:	ee32 0ae7 	vsub.f32	s0, s5, s15
 80089a8:	ee78 4a66 	vsub.f32	s9, s16, s13
 80089ac:	ee78 3a26 	vadd.f32	s7, s16, s13
 80089b0:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80089b4:	ee77 6a20 	vadd.f32	s13, s14, s1
 80089b8:	ee24 4a09 	vmul.f32	s8, s8, s18
 80089bc:	ee37 7a60 	vsub.f32	s14, s14, s1
 80089c0:	ee20 8a09 	vmul.f32	s16, s0, s18
 80089c4:	ee75 0a86 	vadd.f32	s1, s11, s12
 80089c8:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80089cc:	ee62 2a89 	vmul.f32	s5, s5, s18
 80089d0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80089d4:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80089d8:	ee77 7a62 	vsub.f32	s15, s14, s5
 80089dc:	ee74 5a88 	vadd.f32	s11, s9, s16
 80089e0:	ee34 8ac8 	vsub.f32	s16, s9, s16
 80089e4:	ee77 4a22 	vadd.f32	s9, s14, s5
 80089e8:	ee71 2a04 	vadd.f32	s5, s2, s8
 80089ec:	ee31 7a44 	vsub.f32	s14, s2, s8
 80089f0:	ee30 1a60 	vsub.f32	s2, s0, s1
 80089f4:	ee73 1a06 	vadd.f32	s3, s6, s12
 80089f8:	ee33 6a46 	vsub.f32	s12, s6, s12
 80089fc:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8008a00:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8008a04:	ee38 4a68 	vsub.f32	s8, s16, s17
 8008a08:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8008a0c:	ee72 5a25 	vadd.f32	s11, s4, s11
 8008a10:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8008a14:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8008a18:	ee77 2a27 	vadd.f32	s5, s14, s15
 8008a1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a20:	ee78 7a88 	vadd.f32	s15, s17, s16
 8008a24:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8008a28:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8008a2c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8008a30:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8008a34:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8008a38:	ee70 0a20 	vadd.f32	s1, s0, s1
 8008a3c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8008a40:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8008a44:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8008a48:	edc2 0a01 	vstr	s1, [r2, #4]
 8008a4c:	ee38 8a88 	vadd.f32	s16, s17, s16
 8008a50:	441a      	add	r2, r3
 8008a52:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8008a56:	ee31 5a45 	vsub.f32	s10, s2, s10
 8008a5a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8008a5e:	ed81 8a00 	vstr	s16, [r1]
 8008a62:	ee39 0a80 	vadd.f32	s0, s19, s0
 8008a66:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008a6a:	ed81 5a01 	vstr	s10, [r1, #4]
 8008a6e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8008a72:	edcd 3a00 	vstr	s7, [sp]
 8008a76:	ed9d 5a02 	vldr	s10, [sp, #8]
 8008a7a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8008a7e:	eddd 3a01 	vldr	s7, [sp, #4]
 8008a82:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8008a86:	ed84 0a00 	vstr	s0, [r4]
 8008a8a:	ee65 4a24 	vmul.f32	s9, s10, s9
 8008a8e:	ed84 3a01 	vstr	s6, [r4, #4]
 8008a92:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8008a96:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008a9a:	eddd 3a00 	vldr	s7, [sp]
 8008a9e:	ee25 5a25 	vmul.f32	s10, s10, s11
 8008aa2:	4419      	add	r1, r3
 8008aa4:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8008aa8:	441c      	add	r4, r3
 8008aaa:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8008aae:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8008ab2:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8008ab6:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8008aba:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8008abe:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8008ac2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8008ac6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8008aca:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8008ace:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8008ad2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8008ad6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008ada:	ee38 8a01 	vadd.f32	s16, s16, s2
 8008ade:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8008ae2:	ee39 5a85 	vadd.f32	s10, s19, s10
 8008ae6:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8008aea:	ed07 8a01 	vstr	s16, [r7, #-4]
 8008aee:	ee30 0a21 	vadd.f32	s0, s0, s3
 8008af2:	ed87 6a00 	vstr	s12, [r7]
 8008af6:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008afa:	edc0 0a00 	vstr	s1, [r0]
 8008afe:	ee33 3a28 	vadd.f32	s6, s6, s17
 8008b02:	edc0 3a01 	vstr	s7, [r0, #4]
 8008b06:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008b0a:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8008b0e:	edce 4a00 	vstr	s9, [lr]
 8008b12:	4418      	add	r0, r3
 8008b14:	ed06 0a01 	vstr	s0, [r6, #-4]
 8008b18:	441f      	add	r7, r3
 8008b1a:	edc6 2a00 	vstr	s5, [r6]
 8008b1e:	449e      	add	lr, r3
 8008b20:	ed85 3a00 	vstr	s6, [r5]
 8008b24:	441e      	add	r6, r3
 8008b26:	ed85 7a01 	vstr	s14, [r5, #4]
 8008b2a:	441d      	add	r5, r3
 8008b2c:	f63f aee8 	bhi.w	8008900 <arm_radix8_butterfly_f32+0x328>
 8008b30:	9a06      	ldr	r2, [sp, #24]
 8008b32:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008b34:	3201      	adds	r2, #1
 8008b36:	4611      	mov	r1, r2
 8008b38:	9206      	str	r2, [sp, #24]
 8008b3a:	9a07      	ldr	r2, [sp, #28]
 8008b3c:	4402      	add	r2, r0
 8008b3e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008b40:	9207      	str	r2, [sp, #28]
 8008b42:	9a03      	ldr	r2, [sp, #12]
 8008b44:	4402      	add	r2, r0
 8008b46:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b48:	9203      	str	r2, [sp, #12]
 8008b4a:	9a04      	ldr	r2, [sp, #16]
 8008b4c:	4402      	add	r2, r0
 8008b4e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b50:	9204      	str	r2, [sp, #16]
 8008b52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b54:	4491      	add	r9, r2
 8008b56:	9a05      	ldr	r2, [sp, #20]
 8008b58:	4402      	add	r2, r0
 8008b5a:	9205      	str	r2, [sp, #20]
 8008b5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b5e:	4490      	add	r8, r2
 8008b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b62:	3208      	adds	r2, #8
 8008b64:	920f      	str	r2, [sp, #60]	; 0x3c
 8008b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b68:	3208      	adds	r2, #8
 8008b6a:	920e      	str	r2, [sp, #56]	; 0x38
 8008b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b6e:	3208      	adds	r2, #8
 8008b70:	920d      	str	r2, [sp, #52]	; 0x34
 8008b72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b74:	3208      	adds	r2, #8
 8008b76:	920c      	str	r2, [sp, #48]	; 0x30
 8008b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b7a:	3208      	adds	r2, #8
 8008b7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b80:	3208      	adds	r2, #8
 8008b82:	920a      	str	r2, [sp, #40]	; 0x28
 8008b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b86:	3208      	adds	r2, #8
 8008b88:	9209      	str	r2, [sp, #36]	; 0x24
 8008b8a:	9a08      	ldr	r2, [sp, #32]
 8008b8c:	3208      	adds	r2, #8
 8008b8e:	9208      	str	r2, [sp, #32]
 8008b90:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008b92:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008b94:	4622      	mov	r2, r4
 8008b96:	4288      	cmp	r0, r1
 8008b98:	d005      	beq.n	8008ba6 <arm_radix8_butterfly_f32+0x5ce>
 8008b9a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4401      	add	r1, r0
 8008ba0:	9807      	ldr	r0, [sp, #28]
 8008ba2:	9110      	str	r1, [sp, #64]	; 0x40
 8008ba4:	e676      	b.n	8008894 <arm_radix8_butterfly_f32+0x2bc>
 8008ba6:	4683      	mov	fp, r0
 8008ba8:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8008bac:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8008bb0:	e522      	b.n	80085f8 <arm_radix8_butterfly_f32+0x20>
 8008bb2:	b01d      	add	sp, #116	; 0x74
 8008bb4:	ecbd 8b10 	vpop	{d8-d15}
 8008bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bbc <__errno>:
 8008bbc:	4b01      	ldr	r3, [pc, #4]	; (8008bc4 <__errno+0x8>)
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	20000014 	.word	0x20000014

08008bc8 <__libc_init_array>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	4e0d      	ldr	r6, [pc, #52]	; (8008c00 <__libc_init_array+0x38>)
 8008bcc:	4c0d      	ldr	r4, [pc, #52]	; (8008c04 <__libc_init_array+0x3c>)
 8008bce:	1ba4      	subs	r4, r4, r6
 8008bd0:	10a4      	asrs	r4, r4, #2
 8008bd2:	2500      	movs	r5, #0
 8008bd4:	42a5      	cmp	r5, r4
 8008bd6:	d109      	bne.n	8008bec <__libc_init_array+0x24>
 8008bd8:	4e0b      	ldr	r6, [pc, #44]	; (8008c08 <__libc_init_array+0x40>)
 8008bda:	4c0c      	ldr	r4, [pc, #48]	; (8008c0c <__libc_init_array+0x44>)
 8008bdc:	f002 f82e 	bl	800ac3c <_init>
 8008be0:	1ba4      	subs	r4, r4, r6
 8008be2:	10a4      	asrs	r4, r4, #2
 8008be4:	2500      	movs	r5, #0
 8008be6:	42a5      	cmp	r5, r4
 8008be8:	d105      	bne.n	8008bf6 <__libc_init_array+0x2e>
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bf0:	4798      	blx	r3
 8008bf2:	3501      	adds	r5, #1
 8008bf4:	e7ee      	b.n	8008bd4 <__libc_init_array+0xc>
 8008bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bfa:	4798      	blx	r3
 8008bfc:	3501      	adds	r5, #1
 8008bfe:	e7f2      	b.n	8008be6 <__libc_init_array+0x1e>
 8008c00:	0800de18 	.word	0x0800de18
 8008c04:	0800de18 	.word	0x0800de18
 8008c08:	0800de18 	.word	0x0800de18
 8008c0c:	0800de1c 	.word	0x0800de1c

08008c10 <malloc>:
 8008c10:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <malloc+0xc>)
 8008c12:	4601      	mov	r1, r0
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	f000 b861 	b.w	8008cdc <_malloc_r>
 8008c1a:	bf00      	nop
 8008c1c:	20000014 	.word	0x20000014

08008c20 <free>:
 8008c20:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <free+0xc>)
 8008c22:	4601      	mov	r1, r0
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	f000 b80b 	b.w	8008c40 <_free_r>
 8008c2a:	bf00      	nop
 8008c2c:	20000014 	.word	0x20000014

08008c30 <memset>:
 8008c30:	4402      	add	r2, r0
 8008c32:	4603      	mov	r3, r0
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d100      	bne.n	8008c3a <memset+0xa>
 8008c38:	4770      	bx	lr
 8008c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c3e:	e7f9      	b.n	8008c34 <memset+0x4>

08008c40 <_free_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4605      	mov	r5, r0
 8008c44:	2900      	cmp	r1, #0
 8008c46:	d045      	beq.n	8008cd4 <_free_r+0x94>
 8008c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c4c:	1f0c      	subs	r4, r1, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bfb8      	it	lt
 8008c52:	18e4      	addlt	r4, r4, r3
 8008c54:	f001 faf9 	bl	800a24a <__malloc_lock>
 8008c58:	4a1f      	ldr	r2, [pc, #124]	; (8008cd8 <_free_r+0x98>)
 8008c5a:	6813      	ldr	r3, [r2, #0]
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	b933      	cbnz	r3, 8008c6e <_free_r+0x2e>
 8008c60:	6063      	str	r3, [r4, #4]
 8008c62:	6014      	str	r4, [r2, #0]
 8008c64:	4628      	mov	r0, r5
 8008c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c6a:	f001 baef 	b.w	800a24c <__malloc_unlock>
 8008c6e:	42a3      	cmp	r3, r4
 8008c70:	d90c      	bls.n	8008c8c <_free_r+0x4c>
 8008c72:	6821      	ldr	r1, [r4, #0]
 8008c74:	1862      	adds	r2, r4, r1
 8008c76:	4293      	cmp	r3, r2
 8008c78:	bf04      	itt	eq
 8008c7a:	681a      	ldreq	r2, [r3, #0]
 8008c7c:	685b      	ldreq	r3, [r3, #4]
 8008c7e:	6063      	str	r3, [r4, #4]
 8008c80:	bf04      	itt	eq
 8008c82:	1852      	addeq	r2, r2, r1
 8008c84:	6022      	streq	r2, [r4, #0]
 8008c86:	6004      	str	r4, [r0, #0]
 8008c88:	e7ec      	b.n	8008c64 <_free_r+0x24>
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	b10a      	cbz	r2, 8008c94 <_free_r+0x54>
 8008c90:	42a2      	cmp	r2, r4
 8008c92:	d9fa      	bls.n	8008c8a <_free_r+0x4a>
 8008c94:	6819      	ldr	r1, [r3, #0]
 8008c96:	1858      	adds	r0, r3, r1
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d10b      	bne.n	8008cb4 <_free_r+0x74>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	4401      	add	r1, r0
 8008ca0:	1858      	adds	r0, r3, r1
 8008ca2:	4282      	cmp	r2, r0
 8008ca4:	6019      	str	r1, [r3, #0]
 8008ca6:	d1dd      	bne.n	8008c64 <_free_r+0x24>
 8008ca8:	6810      	ldr	r0, [r2, #0]
 8008caa:	6852      	ldr	r2, [r2, #4]
 8008cac:	605a      	str	r2, [r3, #4]
 8008cae:	4401      	add	r1, r0
 8008cb0:	6019      	str	r1, [r3, #0]
 8008cb2:	e7d7      	b.n	8008c64 <_free_r+0x24>
 8008cb4:	d902      	bls.n	8008cbc <_free_r+0x7c>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	e7d3      	b.n	8008c64 <_free_r+0x24>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	1821      	adds	r1, r4, r0
 8008cc0:	428a      	cmp	r2, r1
 8008cc2:	bf04      	itt	eq
 8008cc4:	6811      	ldreq	r1, [r2, #0]
 8008cc6:	6852      	ldreq	r2, [r2, #4]
 8008cc8:	6062      	str	r2, [r4, #4]
 8008cca:	bf04      	itt	eq
 8008ccc:	1809      	addeq	r1, r1, r0
 8008cce:	6021      	streq	r1, [r4, #0]
 8008cd0:	605c      	str	r4, [r3, #4]
 8008cd2:	e7c7      	b.n	8008c64 <_free_r+0x24>
 8008cd4:	bd38      	pop	{r3, r4, r5, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000240 	.word	0x20000240

08008cdc <_malloc_r>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	1ccd      	adds	r5, r1, #3
 8008ce0:	f025 0503 	bic.w	r5, r5, #3
 8008ce4:	3508      	adds	r5, #8
 8008ce6:	2d0c      	cmp	r5, #12
 8008ce8:	bf38      	it	cc
 8008cea:	250c      	movcc	r5, #12
 8008cec:	2d00      	cmp	r5, #0
 8008cee:	4606      	mov	r6, r0
 8008cf0:	db01      	blt.n	8008cf6 <_malloc_r+0x1a>
 8008cf2:	42a9      	cmp	r1, r5
 8008cf4:	d903      	bls.n	8008cfe <_malloc_r+0x22>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	6033      	str	r3, [r6, #0]
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	bd70      	pop	{r4, r5, r6, pc}
 8008cfe:	f001 faa4 	bl	800a24a <__malloc_lock>
 8008d02:	4a21      	ldr	r2, [pc, #132]	; (8008d88 <_malloc_r+0xac>)
 8008d04:	6814      	ldr	r4, [r2, #0]
 8008d06:	4621      	mov	r1, r4
 8008d08:	b991      	cbnz	r1, 8008d30 <_malloc_r+0x54>
 8008d0a:	4c20      	ldr	r4, [pc, #128]	; (8008d8c <_malloc_r+0xb0>)
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	b91b      	cbnz	r3, 8008d18 <_malloc_r+0x3c>
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 fc79 	bl	8009608 <_sbrk_r>
 8008d16:	6020      	str	r0, [r4, #0]
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f000 fc74 	bl	8009608 <_sbrk_r>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d124      	bne.n	8008d6e <_malloc_r+0x92>
 8008d24:	230c      	movs	r3, #12
 8008d26:	6033      	str	r3, [r6, #0]
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f001 fa8f 	bl	800a24c <__malloc_unlock>
 8008d2e:	e7e4      	b.n	8008cfa <_malloc_r+0x1e>
 8008d30:	680b      	ldr	r3, [r1, #0]
 8008d32:	1b5b      	subs	r3, r3, r5
 8008d34:	d418      	bmi.n	8008d68 <_malloc_r+0x8c>
 8008d36:	2b0b      	cmp	r3, #11
 8008d38:	d90f      	bls.n	8008d5a <_malloc_r+0x7e>
 8008d3a:	600b      	str	r3, [r1, #0]
 8008d3c:	50cd      	str	r5, [r1, r3]
 8008d3e:	18cc      	adds	r4, r1, r3
 8008d40:	4630      	mov	r0, r6
 8008d42:	f001 fa83 	bl	800a24c <__malloc_unlock>
 8008d46:	f104 000b 	add.w	r0, r4, #11
 8008d4a:	1d23      	adds	r3, r4, #4
 8008d4c:	f020 0007 	bic.w	r0, r0, #7
 8008d50:	1ac3      	subs	r3, r0, r3
 8008d52:	d0d3      	beq.n	8008cfc <_malloc_r+0x20>
 8008d54:	425a      	negs	r2, r3
 8008d56:	50e2      	str	r2, [r4, r3]
 8008d58:	e7d0      	b.n	8008cfc <_malloc_r+0x20>
 8008d5a:	428c      	cmp	r4, r1
 8008d5c:	684b      	ldr	r3, [r1, #4]
 8008d5e:	bf16      	itet	ne
 8008d60:	6063      	strne	r3, [r4, #4]
 8008d62:	6013      	streq	r3, [r2, #0]
 8008d64:	460c      	movne	r4, r1
 8008d66:	e7eb      	b.n	8008d40 <_malloc_r+0x64>
 8008d68:	460c      	mov	r4, r1
 8008d6a:	6849      	ldr	r1, [r1, #4]
 8008d6c:	e7cc      	b.n	8008d08 <_malloc_r+0x2c>
 8008d6e:	1cc4      	adds	r4, r0, #3
 8008d70:	f024 0403 	bic.w	r4, r4, #3
 8008d74:	42a0      	cmp	r0, r4
 8008d76:	d005      	beq.n	8008d84 <_malloc_r+0xa8>
 8008d78:	1a21      	subs	r1, r4, r0
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f000 fc44 	bl	8009608 <_sbrk_r>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d0cf      	beq.n	8008d24 <_malloc_r+0x48>
 8008d84:	6025      	str	r5, [r4, #0]
 8008d86:	e7db      	b.n	8008d40 <_malloc_r+0x64>
 8008d88:	20000240 	.word	0x20000240
 8008d8c:	20000244 	.word	0x20000244

08008d90 <__cvt>:
 8008d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d92:	ed2d 8b02 	vpush	{d8}
 8008d96:	eeb0 8b40 	vmov.f64	d8, d0
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	4617      	mov	r7, r2
 8008d9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008da0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008da2:	ee18 2a90 	vmov	r2, s17
 8008da6:	f025 0520 	bic.w	r5, r5, #32
 8008daa:	2a00      	cmp	r2, #0
 8008dac:	bfb6      	itet	lt
 8008dae:	222d      	movlt	r2, #45	; 0x2d
 8008db0:	2200      	movge	r2, #0
 8008db2:	eeb1 8b40 	vneglt.f64	d8, d0
 8008db6:	2d46      	cmp	r5, #70	; 0x46
 8008db8:	460c      	mov	r4, r1
 8008dba:	701a      	strb	r2, [r3, #0]
 8008dbc:	d004      	beq.n	8008dc8 <__cvt+0x38>
 8008dbe:	2d45      	cmp	r5, #69	; 0x45
 8008dc0:	d100      	bne.n	8008dc4 <__cvt+0x34>
 8008dc2:	3401      	adds	r4, #1
 8008dc4:	2102      	movs	r1, #2
 8008dc6:	e000      	b.n	8008dca <__cvt+0x3a>
 8008dc8:	2103      	movs	r1, #3
 8008dca:	ab03      	add	r3, sp, #12
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	ab02      	add	r3, sp, #8
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	4633      	mov	r3, r6
 8008dd6:	eeb0 0b48 	vmov.f64	d0, d8
 8008dda:	f000 fcd1 	bl	8009780 <_dtoa_r>
 8008dde:	2d47      	cmp	r5, #71	; 0x47
 8008de0:	d101      	bne.n	8008de6 <__cvt+0x56>
 8008de2:	07fb      	lsls	r3, r7, #31
 8008de4:	d51e      	bpl.n	8008e24 <__cvt+0x94>
 8008de6:	2d46      	cmp	r5, #70	; 0x46
 8008de8:	eb00 0304 	add.w	r3, r0, r4
 8008dec:	d10c      	bne.n	8008e08 <__cvt+0x78>
 8008dee:	7802      	ldrb	r2, [r0, #0]
 8008df0:	2a30      	cmp	r2, #48	; 0x30
 8008df2:	d107      	bne.n	8008e04 <__cvt+0x74>
 8008df4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfc:	bf1c      	itt	ne
 8008dfe:	f1c4 0401 	rsbne	r4, r4, #1
 8008e02:	6034      	strne	r4, [r6, #0]
 8008e04:	6832      	ldr	r2, [r6, #0]
 8008e06:	4413      	add	r3, r2
 8008e08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e10:	d007      	beq.n	8008e22 <__cvt+0x92>
 8008e12:	2130      	movs	r1, #48	; 0x30
 8008e14:	9a03      	ldr	r2, [sp, #12]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d204      	bcs.n	8008e24 <__cvt+0x94>
 8008e1a:	1c54      	adds	r4, r2, #1
 8008e1c:	9403      	str	r4, [sp, #12]
 8008e1e:	7011      	strb	r1, [r2, #0]
 8008e20:	e7f8      	b.n	8008e14 <__cvt+0x84>
 8008e22:	9303      	str	r3, [sp, #12]
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e28:	1a1b      	subs	r3, r3, r0
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	b005      	add	sp, #20
 8008e2e:	ecbd 8b02 	vpop	{d8}
 8008e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e34 <__exponent>:
 8008e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e36:	2900      	cmp	r1, #0
 8008e38:	4604      	mov	r4, r0
 8008e3a:	bfba      	itte	lt
 8008e3c:	4249      	neglt	r1, r1
 8008e3e:	232d      	movlt	r3, #45	; 0x2d
 8008e40:	232b      	movge	r3, #43	; 0x2b
 8008e42:	2909      	cmp	r1, #9
 8008e44:	f804 2b02 	strb.w	r2, [r4], #2
 8008e48:	7043      	strb	r3, [r0, #1]
 8008e4a:	dd20      	ble.n	8008e8e <__exponent+0x5a>
 8008e4c:	f10d 0307 	add.w	r3, sp, #7
 8008e50:	461f      	mov	r7, r3
 8008e52:	260a      	movs	r6, #10
 8008e54:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e58:	fb06 1115 	mls	r1, r6, r5, r1
 8008e5c:	3130      	adds	r1, #48	; 0x30
 8008e5e:	2d09      	cmp	r5, #9
 8008e60:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e64:	f103 32ff 	add.w	r2, r3, #4294967295
 8008e68:	4629      	mov	r1, r5
 8008e6a:	dc09      	bgt.n	8008e80 <__exponent+0x4c>
 8008e6c:	3130      	adds	r1, #48	; 0x30
 8008e6e:	3b02      	subs	r3, #2
 8008e70:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e74:	42bb      	cmp	r3, r7
 8008e76:	4622      	mov	r2, r4
 8008e78:	d304      	bcc.n	8008e84 <__exponent+0x50>
 8008e7a:	1a10      	subs	r0, r2, r0
 8008e7c:	b003      	add	sp, #12
 8008e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e80:	4613      	mov	r3, r2
 8008e82:	e7e7      	b.n	8008e54 <__exponent+0x20>
 8008e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e88:	f804 2b01 	strb.w	r2, [r4], #1
 8008e8c:	e7f2      	b.n	8008e74 <__exponent+0x40>
 8008e8e:	2330      	movs	r3, #48	; 0x30
 8008e90:	4419      	add	r1, r3
 8008e92:	7083      	strb	r3, [r0, #2]
 8008e94:	1d02      	adds	r2, r0, #4
 8008e96:	70c1      	strb	r1, [r0, #3]
 8008e98:	e7ef      	b.n	8008e7a <__exponent+0x46>
 8008e9a:	0000      	movs	r0, r0
 8008e9c:	0000      	movs	r0, r0
	...

08008ea0 <_printf_float>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	b08d      	sub	sp, #52	; 0x34
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	4616      	mov	r6, r2
 8008eaa:	461f      	mov	r7, r3
 8008eac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	f001 f9b1 	bl	800a218 <_localeconv_r>
 8008eb6:	f8d0 b000 	ldr.w	fp, [r0]
 8008eba:	4658      	mov	r0, fp
 8008ebc:	f7f7 fa70 	bl	80003a0 <strlen>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ec8:	9005      	str	r0, [sp, #20]
 8008eca:	3307      	adds	r3, #7
 8008ecc:	f023 0307 	bic.w	r3, r3, #7
 8008ed0:	f103 0108 	add.w	r1, r3, #8
 8008ed4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008ed8:	6822      	ldr	r2, [r4, #0]
 8008eda:	f8c8 1000 	str.w	r1, [r8]
 8008ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ee2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008ee6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8009170 <_printf_float+0x2d0>
 8008eea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008eee:	eeb0 6bc0 	vabs.f64	d6, d0
 8008ef2:	eeb4 6b47 	vcmp.f64	d6, d7
 8008ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efa:	dd24      	ble.n	8008f46 <_printf_float+0xa6>
 8008efc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f04:	d502      	bpl.n	8008f0c <_printf_float+0x6c>
 8008f06:	232d      	movs	r3, #45	; 0x2d
 8008f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f0c:	499a      	ldr	r1, [pc, #616]	; (8009178 <_printf_float+0x2d8>)
 8008f0e:	4b9b      	ldr	r3, [pc, #620]	; (800917c <_printf_float+0x2dc>)
 8008f10:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f14:	bf8c      	ite	hi
 8008f16:	4688      	movhi	r8, r1
 8008f18:	4698      	movls	r8, r3
 8008f1a:	f022 0204 	bic.w	r2, r2, #4
 8008f1e:	2303      	movs	r3, #3
 8008f20:	6123      	str	r3, [r4, #16]
 8008f22:	6022      	str	r2, [r4, #0]
 8008f24:	f04f 0a00 	mov.w	sl, #0
 8008f28:	9700      	str	r7, [sp, #0]
 8008f2a:	4633      	mov	r3, r6
 8008f2c:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	f000 f9e1 	bl	80092f8 <_printf_common>
 8008f36:	3001      	adds	r0, #1
 8008f38:	f040 8089 	bne.w	800904e <_printf_float+0x1ae>
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	b00d      	add	sp, #52	; 0x34
 8008f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f46:	eeb4 0b40 	vcmp.f64	d0, d0
 8008f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4e:	d702      	bvc.n	8008f56 <_printf_float+0xb6>
 8008f50:	498b      	ldr	r1, [pc, #556]	; (8009180 <_printf_float+0x2e0>)
 8008f52:	4b8c      	ldr	r3, [pc, #560]	; (8009184 <_printf_float+0x2e4>)
 8008f54:	e7dc      	b.n	8008f10 <_printf_float+0x70>
 8008f56:	6861      	ldr	r1, [r4, #4]
 8008f58:	1c4b      	adds	r3, r1, #1
 8008f5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f5e:	ab0a      	add	r3, sp, #40	; 0x28
 8008f60:	a809      	add	r0, sp, #36	; 0x24
 8008f62:	d13b      	bne.n	8008fdc <_printf_float+0x13c>
 8008f64:	2106      	movs	r1, #6
 8008f66:	6061      	str	r1, [r4, #4]
 8008f68:	f04f 0c00 	mov.w	ip, #0
 8008f6c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8008f70:	e9cd 0900 	strd	r0, r9, [sp]
 8008f74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f78:	6022      	str	r2, [r4, #0]
 8008f7a:	6861      	ldr	r1, [r4, #4]
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f7ff ff07 	bl	8008d90 <__cvt>
 8008f82:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8008f86:	2b47      	cmp	r3, #71	; 0x47
 8008f88:	4680      	mov	r8, r0
 8008f8a:	d109      	bne.n	8008fa0 <_printf_float+0x100>
 8008f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8e:	1cd8      	adds	r0, r3, #3
 8008f90:	db02      	blt.n	8008f98 <_printf_float+0xf8>
 8008f92:	6862      	ldr	r2, [r4, #4]
 8008f94:	4293      	cmp	r3, r2
 8008f96:	dd47      	ble.n	8009028 <_printf_float+0x188>
 8008f98:	f1a9 0902 	sub.w	r9, r9, #2
 8008f9c:	fa5f f989 	uxtb.w	r9, r9
 8008fa0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa6:	d824      	bhi.n	8008ff2 <_printf_float+0x152>
 8008fa8:	3901      	subs	r1, #1
 8008faa:	464a      	mov	r2, r9
 8008fac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fb0:	9109      	str	r1, [sp, #36]	; 0x24
 8008fb2:	f7ff ff3f 	bl	8008e34 <__exponent>
 8008fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb8:	1813      	adds	r3, r2, r0
 8008fba:	2a01      	cmp	r2, #1
 8008fbc:	4682      	mov	sl, r0
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	dc02      	bgt.n	8008fc8 <_printf_float+0x128>
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	07d1      	lsls	r1, r2, #31
 8008fc6:	d501      	bpl.n	8008fcc <_printf_float+0x12c>
 8008fc8:	3301      	adds	r3, #1
 8008fca:	6123      	str	r3, [r4, #16]
 8008fcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0a9      	beq.n	8008f28 <_printf_float+0x88>
 8008fd4:	232d      	movs	r3, #45	; 0x2d
 8008fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fda:	e7a5      	b.n	8008f28 <_printf_float+0x88>
 8008fdc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8008fe0:	f000 8178 	beq.w	80092d4 <_printf_float+0x434>
 8008fe4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008fe8:	d1be      	bne.n	8008f68 <_printf_float+0xc8>
 8008fea:	2900      	cmp	r1, #0
 8008fec:	d1bc      	bne.n	8008f68 <_printf_float+0xc8>
 8008fee:	2101      	movs	r1, #1
 8008ff0:	e7b9      	b.n	8008f66 <_printf_float+0xc6>
 8008ff2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008ff6:	d119      	bne.n	800902c <_printf_float+0x18c>
 8008ff8:	2900      	cmp	r1, #0
 8008ffa:	6863      	ldr	r3, [r4, #4]
 8008ffc:	dd0c      	ble.n	8009018 <_printf_float+0x178>
 8008ffe:	6121      	str	r1, [r4, #16]
 8009000:	b913      	cbnz	r3, 8009008 <_printf_float+0x168>
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	07d2      	lsls	r2, r2, #31
 8009006:	d502      	bpl.n	800900e <_printf_float+0x16e>
 8009008:	3301      	adds	r3, #1
 800900a:	440b      	add	r3, r1
 800900c:	6123      	str	r3, [r4, #16]
 800900e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009010:	65a3      	str	r3, [r4, #88]	; 0x58
 8009012:	f04f 0a00 	mov.w	sl, #0
 8009016:	e7d9      	b.n	8008fcc <_printf_float+0x12c>
 8009018:	b913      	cbnz	r3, 8009020 <_printf_float+0x180>
 800901a:	6822      	ldr	r2, [r4, #0]
 800901c:	07d0      	lsls	r0, r2, #31
 800901e:	d501      	bpl.n	8009024 <_printf_float+0x184>
 8009020:	3302      	adds	r3, #2
 8009022:	e7f3      	b.n	800900c <_printf_float+0x16c>
 8009024:	2301      	movs	r3, #1
 8009026:	e7f1      	b.n	800900c <_printf_float+0x16c>
 8009028:	f04f 0967 	mov.w	r9, #103	; 0x67
 800902c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009030:	4293      	cmp	r3, r2
 8009032:	db05      	blt.n	8009040 <_printf_float+0x1a0>
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	6123      	str	r3, [r4, #16]
 8009038:	07d1      	lsls	r1, r2, #31
 800903a:	d5e8      	bpl.n	800900e <_printf_float+0x16e>
 800903c:	3301      	adds	r3, #1
 800903e:	e7e5      	b.n	800900c <_printf_float+0x16c>
 8009040:	2b00      	cmp	r3, #0
 8009042:	bfd4      	ite	le
 8009044:	f1c3 0302 	rsble	r3, r3, #2
 8009048:	2301      	movgt	r3, #1
 800904a:	4413      	add	r3, r2
 800904c:	e7de      	b.n	800900c <_printf_float+0x16c>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	055a      	lsls	r2, r3, #21
 8009052:	d407      	bmi.n	8009064 <_printf_float+0x1c4>
 8009054:	6923      	ldr	r3, [r4, #16]
 8009056:	4642      	mov	r2, r8
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	d12a      	bne.n	80090b8 <_printf_float+0x218>
 8009062:	e76b      	b.n	8008f3c <_printf_float+0x9c>
 8009064:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009068:	f240 80de 	bls.w	8009228 <_printf_float+0x388>
 800906c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009070:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009078:	d133      	bne.n	80090e2 <_printf_float+0x242>
 800907a:	2301      	movs	r3, #1
 800907c:	4a42      	ldr	r2, [pc, #264]	; (8009188 <_printf_float+0x2e8>)
 800907e:	4631      	mov	r1, r6
 8009080:	4628      	mov	r0, r5
 8009082:	47b8      	blx	r7
 8009084:	3001      	adds	r0, #1
 8009086:	f43f af59 	beq.w	8008f3c <_printf_float+0x9c>
 800908a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800908e:	429a      	cmp	r2, r3
 8009090:	db02      	blt.n	8009098 <_printf_float+0x1f8>
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	07d8      	lsls	r0, r3, #31
 8009096:	d50f      	bpl.n	80090b8 <_printf_float+0x218>
 8009098:	9b05      	ldr	r3, [sp, #20]
 800909a:	465a      	mov	r2, fp
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	f43f af4a 	beq.w	8008f3c <_printf_float+0x9c>
 80090a8:	f04f 0800 	mov.w	r8, #0
 80090ac:	f104 091a 	add.w	r9, r4, #26
 80090b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b2:	3b01      	subs	r3, #1
 80090b4:	4543      	cmp	r3, r8
 80090b6:	dc09      	bgt.n	80090cc <_printf_float+0x22c>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	079b      	lsls	r3, r3, #30
 80090bc:	f100 8105 	bmi.w	80092ca <_printf_float+0x42a>
 80090c0:	68e0      	ldr	r0, [r4, #12]
 80090c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c4:	4298      	cmp	r0, r3
 80090c6:	bfb8      	it	lt
 80090c8:	4618      	movlt	r0, r3
 80090ca:	e739      	b.n	8008f40 <_printf_float+0xa0>
 80090cc:	2301      	movs	r3, #1
 80090ce:	464a      	mov	r2, r9
 80090d0:	4631      	mov	r1, r6
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	f43f af30 	beq.w	8008f3c <_printf_float+0x9c>
 80090dc:	f108 0801 	add.w	r8, r8, #1
 80090e0:	e7e6      	b.n	80090b0 <_printf_float+0x210>
 80090e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	dc2b      	bgt.n	8009140 <_printf_float+0x2a0>
 80090e8:	2301      	movs	r3, #1
 80090ea:	4a27      	ldr	r2, [pc, #156]	; (8009188 <_printf_float+0x2e8>)
 80090ec:	4631      	mov	r1, r6
 80090ee:	4628      	mov	r0, r5
 80090f0:	47b8      	blx	r7
 80090f2:	3001      	adds	r0, #1
 80090f4:	f43f af22 	beq.w	8008f3c <_printf_float+0x9c>
 80090f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fa:	b923      	cbnz	r3, 8009106 <_printf_float+0x266>
 80090fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fe:	b913      	cbnz	r3, 8009106 <_printf_float+0x266>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	07d9      	lsls	r1, r3, #31
 8009104:	d5d8      	bpl.n	80090b8 <_printf_float+0x218>
 8009106:	9b05      	ldr	r3, [sp, #20]
 8009108:	465a      	mov	r2, fp
 800910a:	4631      	mov	r1, r6
 800910c:	4628      	mov	r0, r5
 800910e:	47b8      	blx	r7
 8009110:	3001      	adds	r0, #1
 8009112:	f43f af13 	beq.w	8008f3c <_printf_float+0x9c>
 8009116:	f04f 0900 	mov.w	r9, #0
 800911a:	f104 0a1a 	add.w	sl, r4, #26
 800911e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009120:	425b      	negs	r3, r3
 8009122:	454b      	cmp	r3, r9
 8009124:	dc01      	bgt.n	800912a <_printf_float+0x28a>
 8009126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009128:	e795      	b.n	8009056 <_printf_float+0x1b6>
 800912a:	2301      	movs	r3, #1
 800912c:	4652      	mov	r2, sl
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	47b8      	blx	r7
 8009134:	3001      	adds	r0, #1
 8009136:	f43f af01 	beq.w	8008f3c <_printf_float+0x9c>
 800913a:	f109 0901 	add.w	r9, r9, #1
 800913e:	e7ee      	b.n	800911e <_printf_float+0x27e>
 8009140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009144:	429a      	cmp	r2, r3
 8009146:	bfa8      	it	ge
 8009148:	461a      	movge	r2, r3
 800914a:	2a00      	cmp	r2, #0
 800914c:	4691      	mov	r9, r2
 800914e:	dd07      	ble.n	8009160 <_printf_float+0x2c0>
 8009150:	4613      	mov	r3, r2
 8009152:	4631      	mov	r1, r6
 8009154:	4642      	mov	r2, r8
 8009156:	4628      	mov	r0, r5
 8009158:	47b8      	blx	r7
 800915a:	3001      	adds	r0, #1
 800915c:	f43f aeee 	beq.w	8008f3c <_printf_float+0x9c>
 8009160:	f104 031a 	add.w	r3, r4, #26
 8009164:	f04f 0a00 	mov.w	sl, #0
 8009168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800916c:	9307      	str	r3, [sp, #28]
 800916e:	e017      	b.n	80091a0 <_printf_float+0x300>
 8009170:	ffffffff 	.word	0xffffffff
 8009174:	7fefffff 	.word	0x7fefffff
 8009178:	0800dbac 	.word	0x0800dbac
 800917c:	0800dba8 	.word	0x0800dba8
 8009180:	0800dbb4 	.word	0x0800dbb4
 8009184:	0800dbb0 	.word	0x0800dbb0
 8009188:	0800dbb8 	.word	0x0800dbb8
 800918c:	2301      	movs	r3, #1
 800918e:	9a07      	ldr	r2, [sp, #28]
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	47b8      	blx	r7
 8009196:	3001      	adds	r0, #1
 8009198:	f43f aed0 	beq.w	8008f3c <_printf_float+0x9c>
 800919c:	f10a 0a01 	add.w	sl, sl, #1
 80091a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091a2:	9306      	str	r3, [sp, #24]
 80091a4:	eba3 0309 	sub.w	r3, r3, r9
 80091a8:	4553      	cmp	r3, sl
 80091aa:	dcef      	bgt.n	800918c <_printf_float+0x2ec>
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	4498      	add	r8, r3
 80091b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091b4:	429a      	cmp	r2, r3
 80091b6:	db15      	blt.n	80091e4 <_printf_float+0x344>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	07da      	lsls	r2, r3, #31
 80091bc:	d412      	bmi.n	80091e4 <_printf_float+0x344>
 80091be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c0:	9a06      	ldr	r2, [sp, #24]
 80091c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c4:	1a9a      	subs	r2, r3, r2
 80091c6:	eba3 0a01 	sub.w	sl, r3, r1
 80091ca:	4592      	cmp	sl, r2
 80091cc:	bfa8      	it	ge
 80091ce:	4692      	movge	sl, r2
 80091d0:	f1ba 0f00 	cmp.w	sl, #0
 80091d4:	dc0e      	bgt.n	80091f4 <_printf_float+0x354>
 80091d6:	f04f 0800 	mov.w	r8, #0
 80091da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091de:	f104 091a 	add.w	r9, r4, #26
 80091e2:	e019      	b.n	8009218 <_printf_float+0x378>
 80091e4:	9b05      	ldr	r3, [sp, #20]
 80091e6:	465a      	mov	r2, fp
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	d1e5      	bne.n	80091be <_printf_float+0x31e>
 80091f2:	e6a3      	b.n	8008f3c <_printf_float+0x9c>
 80091f4:	4653      	mov	r3, sl
 80091f6:	4642      	mov	r2, r8
 80091f8:	4631      	mov	r1, r6
 80091fa:	4628      	mov	r0, r5
 80091fc:	47b8      	blx	r7
 80091fe:	3001      	adds	r0, #1
 8009200:	d1e9      	bne.n	80091d6 <_printf_float+0x336>
 8009202:	e69b      	b.n	8008f3c <_printf_float+0x9c>
 8009204:	2301      	movs	r3, #1
 8009206:	464a      	mov	r2, r9
 8009208:	4631      	mov	r1, r6
 800920a:	4628      	mov	r0, r5
 800920c:	47b8      	blx	r7
 800920e:	3001      	adds	r0, #1
 8009210:	f43f ae94 	beq.w	8008f3c <_printf_float+0x9c>
 8009214:	f108 0801 	add.w	r8, r8, #1
 8009218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	eba3 030a 	sub.w	r3, r3, sl
 8009222:	4543      	cmp	r3, r8
 8009224:	dcee      	bgt.n	8009204 <_printf_float+0x364>
 8009226:	e747      	b.n	80090b8 <_printf_float+0x218>
 8009228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800922a:	2a01      	cmp	r2, #1
 800922c:	dc01      	bgt.n	8009232 <_printf_float+0x392>
 800922e:	07db      	lsls	r3, r3, #31
 8009230:	d539      	bpl.n	80092a6 <_printf_float+0x406>
 8009232:	2301      	movs	r3, #1
 8009234:	4642      	mov	r2, r8
 8009236:	4631      	mov	r1, r6
 8009238:	4628      	mov	r0, r5
 800923a:	47b8      	blx	r7
 800923c:	3001      	adds	r0, #1
 800923e:	f43f ae7d 	beq.w	8008f3c <_printf_float+0x9c>
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	465a      	mov	r2, fp
 8009246:	4631      	mov	r1, r6
 8009248:	4628      	mov	r0, r5
 800924a:	47b8      	blx	r7
 800924c:	3001      	adds	r0, #1
 800924e:	f108 0801 	add.w	r8, r8, #1
 8009252:	f43f ae73 	beq.w	8008f3c <_printf_float+0x9c>
 8009256:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800925a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009264:	f103 33ff 	add.w	r3, r3, #4294967295
 8009268:	d018      	beq.n	800929c <_printf_float+0x3fc>
 800926a:	4642      	mov	r2, r8
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	d10e      	bne.n	8009294 <_printf_float+0x3f4>
 8009276:	e661      	b.n	8008f3c <_printf_float+0x9c>
 8009278:	2301      	movs	r3, #1
 800927a:	464a      	mov	r2, r9
 800927c:	4631      	mov	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	47b8      	blx	r7
 8009282:	3001      	adds	r0, #1
 8009284:	f43f ae5a 	beq.w	8008f3c <_printf_float+0x9c>
 8009288:	f108 0801 	add.w	r8, r8, #1
 800928c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928e:	3b01      	subs	r3, #1
 8009290:	4543      	cmp	r3, r8
 8009292:	dcf1      	bgt.n	8009278 <_printf_float+0x3d8>
 8009294:	4653      	mov	r3, sl
 8009296:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800929a:	e6dd      	b.n	8009058 <_printf_float+0x1b8>
 800929c:	f04f 0800 	mov.w	r8, #0
 80092a0:	f104 091a 	add.w	r9, r4, #26
 80092a4:	e7f2      	b.n	800928c <_printf_float+0x3ec>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e7df      	b.n	800926a <_printf_float+0x3ca>
 80092aa:	2301      	movs	r3, #1
 80092ac:	464a      	mov	r2, r9
 80092ae:	4631      	mov	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b8      	blx	r7
 80092b4:	3001      	adds	r0, #1
 80092b6:	f43f ae41 	beq.w	8008f3c <_printf_float+0x9c>
 80092ba:	f108 0801 	add.w	r8, r8, #1
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	4543      	cmp	r3, r8
 80092c6:	dcf0      	bgt.n	80092aa <_printf_float+0x40a>
 80092c8:	e6fa      	b.n	80090c0 <_printf_float+0x220>
 80092ca:	f04f 0800 	mov.w	r8, #0
 80092ce:	f104 0919 	add.w	r9, r4, #25
 80092d2:	e7f4      	b.n	80092be <_printf_float+0x41e>
 80092d4:	2900      	cmp	r1, #0
 80092d6:	f43f ae8a 	beq.w	8008fee <_printf_float+0x14e>
 80092da:	f04f 0c00 	mov.w	ip, #0
 80092de:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80092e2:	e9cd 0900 	strd	r0, r9, [sp]
 80092e6:	6022      	str	r2, [r4, #0]
 80092e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092ec:	4628      	mov	r0, r5
 80092ee:	f7ff fd4f 	bl	8008d90 <__cvt>
 80092f2:	4680      	mov	r8, r0
 80092f4:	e64a      	b.n	8008f8c <_printf_float+0xec>
 80092f6:	bf00      	nop

080092f8 <_printf_common>:
 80092f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092fc:	4691      	mov	r9, r2
 80092fe:	461f      	mov	r7, r3
 8009300:	688a      	ldr	r2, [r1, #8]
 8009302:	690b      	ldr	r3, [r1, #16]
 8009304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009308:	4293      	cmp	r3, r2
 800930a:	bfb8      	it	lt
 800930c:	4613      	movlt	r3, r2
 800930e:	f8c9 3000 	str.w	r3, [r9]
 8009312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009316:	4606      	mov	r6, r0
 8009318:	460c      	mov	r4, r1
 800931a:	b112      	cbz	r2, 8009322 <_printf_common+0x2a>
 800931c:	3301      	adds	r3, #1
 800931e:	f8c9 3000 	str.w	r3, [r9]
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	0699      	lsls	r1, r3, #26
 8009326:	bf42      	ittt	mi
 8009328:	f8d9 3000 	ldrmi.w	r3, [r9]
 800932c:	3302      	addmi	r3, #2
 800932e:	f8c9 3000 	strmi.w	r3, [r9]
 8009332:	6825      	ldr	r5, [r4, #0]
 8009334:	f015 0506 	ands.w	r5, r5, #6
 8009338:	d107      	bne.n	800934a <_printf_common+0x52>
 800933a:	f104 0a19 	add.w	sl, r4, #25
 800933e:	68e3      	ldr	r3, [r4, #12]
 8009340:	f8d9 2000 	ldr.w	r2, [r9]
 8009344:	1a9b      	subs	r3, r3, r2
 8009346:	42ab      	cmp	r3, r5
 8009348:	dc28      	bgt.n	800939c <_printf_common+0xa4>
 800934a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800934e:	6822      	ldr	r2, [r4, #0]
 8009350:	3300      	adds	r3, #0
 8009352:	bf18      	it	ne
 8009354:	2301      	movne	r3, #1
 8009356:	0692      	lsls	r2, r2, #26
 8009358:	d42d      	bmi.n	80093b6 <_printf_common+0xbe>
 800935a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800935e:	4639      	mov	r1, r7
 8009360:	4630      	mov	r0, r6
 8009362:	47c0      	blx	r8
 8009364:	3001      	adds	r0, #1
 8009366:	d020      	beq.n	80093aa <_printf_common+0xb2>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	68e5      	ldr	r5, [r4, #12]
 800936c:	f8d9 2000 	ldr.w	r2, [r9]
 8009370:	f003 0306 	and.w	r3, r3, #6
 8009374:	2b04      	cmp	r3, #4
 8009376:	bf08      	it	eq
 8009378:	1aad      	subeq	r5, r5, r2
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	6922      	ldr	r2, [r4, #16]
 800937e:	bf0c      	ite	eq
 8009380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009384:	2500      	movne	r5, #0
 8009386:	4293      	cmp	r3, r2
 8009388:	bfc4      	itt	gt
 800938a:	1a9b      	subgt	r3, r3, r2
 800938c:	18ed      	addgt	r5, r5, r3
 800938e:	f04f 0900 	mov.w	r9, #0
 8009392:	341a      	adds	r4, #26
 8009394:	454d      	cmp	r5, r9
 8009396:	d11a      	bne.n	80093ce <_printf_common+0xd6>
 8009398:	2000      	movs	r0, #0
 800939a:	e008      	b.n	80093ae <_printf_common+0xb6>
 800939c:	2301      	movs	r3, #1
 800939e:	4652      	mov	r2, sl
 80093a0:	4639      	mov	r1, r7
 80093a2:	4630      	mov	r0, r6
 80093a4:	47c0      	blx	r8
 80093a6:	3001      	adds	r0, #1
 80093a8:	d103      	bne.n	80093b2 <_printf_common+0xba>
 80093aa:	f04f 30ff 	mov.w	r0, #4294967295
 80093ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b2:	3501      	adds	r5, #1
 80093b4:	e7c3      	b.n	800933e <_printf_common+0x46>
 80093b6:	18e1      	adds	r1, r4, r3
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	2030      	movs	r0, #48	; 0x30
 80093bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093c0:	4422      	add	r2, r4
 80093c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093ca:	3302      	adds	r3, #2
 80093cc:	e7c5      	b.n	800935a <_printf_common+0x62>
 80093ce:	2301      	movs	r3, #1
 80093d0:	4622      	mov	r2, r4
 80093d2:	4639      	mov	r1, r7
 80093d4:	4630      	mov	r0, r6
 80093d6:	47c0      	blx	r8
 80093d8:	3001      	adds	r0, #1
 80093da:	d0e6      	beq.n	80093aa <_printf_common+0xb2>
 80093dc:	f109 0901 	add.w	r9, r9, #1
 80093e0:	e7d8      	b.n	8009394 <_printf_common+0x9c>
	...

080093e4 <_printf_i>:
 80093e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80093ec:	460c      	mov	r4, r1
 80093ee:	7e09      	ldrb	r1, [r1, #24]
 80093f0:	b085      	sub	sp, #20
 80093f2:	296e      	cmp	r1, #110	; 0x6e
 80093f4:	4617      	mov	r7, r2
 80093f6:	4606      	mov	r6, r0
 80093f8:	4698      	mov	r8, r3
 80093fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093fc:	f000 80b3 	beq.w	8009566 <_printf_i+0x182>
 8009400:	d822      	bhi.n	8009448 <_printf_i+0x64>
 8009402:	2963      	cmp	r1, #99	; 0x63
 8009404:	d036      	beq.n	8009474 <_printf_i+0x90>
 8009406:	d80a      	bhi.n	800941e <_printf_i+0x3a>
 8009408:	2900      	cmp	r1, #0
 800940a:	f000 80b9 	beq.w	8009580 <_printf_i+0x19c>
 800940e:	2958      	cmp	r1, #88	; 0x58
 8009410:	f000 8083 	beq.w	800951a <_printf_i+0x136>
 8009414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009418:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800941c:	e032      	b.n	8009484 <_printf_i+0xa0>
 800941e:	2964      	cmp	r1, #100	; 0x64
 8009420:	d001      	beq.n	8009426 <_printf_i+0x42>
 8009422:	2969      	cmp	r1, #105	; 0x69
 8009424:	d1f6      	bne.n	8009414 <_printf_i+0x30>
 8009426:	6820      	ldr	r0, [r4, #0]
 8009428:	6813      	ldr	r3, [r2, #0]
 800942a:	0605      	lsls	r5, r0, #24
 800942c:	f103 0104 	add.w	r1, r3, #4
 8009430:	d52a      	bpl.n	8009488 <_printf_i+0xa4>
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	da03      	bge.n	8009442 <_printf_i+0x5e>
 800943a:	222d      	movs	r2, #45	; 0x2d
 800943c:	425b      	negs	r3, r3
 800943e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009442:	486f      	ldr	r0, [pc, #444]	; (8009600 <_printf_i+0x21c>)
 8009444:	220a      	movs	r2, #10
 8009446:	e039      	b.n	80094bc <_printf_i+0xd8>
 8009448:	2973      	cmp	r1, #115	; 0x73
 800944a:	f000 809d 	beq.w	8009588 <_printf_i+0x1a4>
 800944e:	d808      	bhi.n	8009462 <_printf_i+0x7e>
 8009450:	296f      	cmp	r1, #111	; 0x6f
 8009452:	d020      	beq.n	8009496 <_printf_i+0xb2>
 8009454:	2970      	cmp	r1, #112	; 0x70
 8009456:	d1dd      	bne.n	8009414 <_printf_i+0x30>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	f043 0320 	orr.w	r3, r3, #32
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	e003      	b.n	800946a <_printf_i+0x86>
 8009462:	2975      	cmp	r1, #117	; 0x75
 8009464:	d017      	beq.n	8009496 <_printf_i+0xb2>
 8009466:	2978      	cmp	r1, #120	; 0x78
 8009468:	d1d4      	bne.n	8009414 <_printf_i+0x30>
 800946a:	2378      	movs	r3, #120	; 0x78
 800946c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009470:	4864      	ldr	r0, [pc, #400]	; (8009604 <_printf_i+0x220>)
 8009472:	e055      	b.n	8009520 <_printf_i+0x13c>
 8009474:	6813      	ldr	r3, [r2, #0]
 8009476:	1d19      	adds	r1, r3, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6011      	str	r1, [r2, #0]
 800947c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009484:	2301      	movs	r3, #1
 8009486:	e08c      	b.n	80095a2 <_printf_i+0x1be>
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6011      	str	r1, [r2, #0]
 800948c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009490:	bf18      	it	ne
 8009492:	b21b      	sxthne	r3, r3
 8009494:	e7cf      	b.n	8009436 <_printf_i+0x52>
 8009496:	6813      	ldr	r3, [r2, #0]
 8009498:	6825      	ldr	r5, [r4, #0]
 800949a:	1d18      	adds	r0, r3, #4
 800949c:	6010      	str	r0, [r2, #0]
 800949e:	0628      	lsls	r0, r5, #24
 80094a0:	d501      	bpl.n	80094a6 <_printf_i+0xc2>
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	e002      	b.n	80094ac <_printf_i+0xc8>
 80094a6:	0668      	lsls	r0, r5, #25
 80094a8:	d5fb      	bpl.n	80094a2 <_printf_i+0xbe>
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	4854      	ldr	r0, [pc, #336]	; (8009600 <_printf_i+0x21c>)
 80094ae:	296f      	cmp	r1, #111	; 0x6f
 80094b0:	bf14      	ite	ne
 80094b2:	220a      	movne	r2, #10
 80094b4:	2208      	moveq	r2, #8
 80094b6:	2100      	movs	r1, #0
 80094b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094bc:	6865      	ldr	r5, [r4, #4]
 80094be:	60a5      	str	r5, [r4, #8]
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	f2c0 8095 	blt.w	80095f0 <_printf_i+0x20c>
 80094c6:	6821      	ldr	r1, [r4, #0]
 80094c8:	f021 0104 	bic.w	r1, r1, #4
 80094cc:	6021      	str	r1, [r4, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d13d      	bne.n	800954e <_printf_i+0x16a>
 80094d2:	2d00      	cmp	r5, #0
 80094d4:	f040 808e 	bne.w	80095f4 <_printf_i+0x210>
 80094d8:	4665      	mov	r5, ip
 80094da:	2a08      	cmp	r2, #8
 80094dc:	d10b      	bne.n	80094f6 <_printf_i+0x112>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	07db      	lsls	r3, r3, #31
 80094e2:	d508      	bpl.n	80094f6 <_printf_i+0x112>
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	6862      	ldr	r2, [r4, #4]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	bfde      	ittt	le
 80094ec:	2330      	movle	r3, #48	; 0x30
 80094ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094f6:	ebac 0305 	sub.w	r3, ip, r5
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	f8cd 8000 	str.w	r8, [sp]
 8009500:	463b      	mov	r3, r7
 8009502:	aa03      	add	r2, sp, #12
 8009504:	4621      	mov	r1, r4
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff fef6 	bl	80092f8 <_printf_common>
 800950c:	3001      	adds	r0, #1
 800950e:	d14d      	bne.n	80095ac <_printf_i+0x1c8>
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	b005      	add	sp, #20
 8009516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800951a:	4839      	ldr	r0, [pc, #228]	; (8009600 <_printf_i+0x21c>)
 800951c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009520:	6813      	ldr	r3, [r2, #0]
 8009522:	6821      	ldr	r1, [r4, #0]
 8009524:	1d1d      	adds	r5, r3, #4
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6015      	str	r5, [r2, #0]
 800952a:	060a      	lsls	r2, r1, #24
 800952c:	d50b      	bpl.n	8009546 <_printf_i+0x162>
 800952e:	07ca      	lsls	r2, r1, #31
 8009530:	bf44      	itt	mi
 8009532:	f041 0120 	orrmi.w	r1, r1, #32
 8009536:	6021      	strmi	r1, [r4, #0]
 8009538:	b91b      	cbnz	r3, 8009542 <_printf_i+0x15e>
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	f022 0220 	bic.w	r2, r2, #32
 8009540:	6022      	str	r2, [r4, #0]
 8009542:	2210      	movs	r2, #16
 8009544:	e7b7      	b.n	80094b6 <_printf_i+0xd2>
 8009546:	064d      	lsls	r5, r1, #25
 8009548:	bf48      	it	mi
 800954a:	b29b      	uxthmi	r3, r3
 800954c:	e7ef      	b.n	800952e <_printf_i+0x14a>
 800954e:	4665      	mov	r5, ip
 8009550:	fbb3 f1f2 	udiv	r1, r3, r2
 8009554:	fb02 3311 	mls	r3, r2, r1, r3
 8009558:	5cc3      	ldrb	r3, [r0, r3]
 800955a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800955e:	460b      	mov	r3, r1
 8009560:	2900      	cmp	r1, #0
 8009562:	d1f5      	bne.n	8009550 <_printf_i+0x16c>
 8009564:	e7b9      	b.n	80094da <_printf_i+0xf6>
 8009566:	6813      	ldr	r3, [r2, #0]
 8009568:	6825      	ldr	r5, [r4, #0]
 800956a:	6961      	ldr	r1, [r4, #20]
 800956c:	1d18      	adds	r0, r3, #4
 800956e:	6010      	str	r0, [r2, #0]
 8009570:	0628      	lsls	r0, r5, #24
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	d501      	bpl.n	800957a <_printf_i+0x196>
 8009576:	6019      	str	r1, [r3, #0]
 8009578:	e002      	b.n	8009580 <_printf_i+0x19c>
 800957a:	066a      	lsls	r2, r5, #25
 800957c:	d5fb      	bpl.n	8009576 <_printf_i+0x192>
 800957e:	8019      	strh	r1, [r3, #0]
 8009580:	2300      	movs	r3, #0
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	4665      	mov	r5, ip
 8009586:	e7b9      	b.n	80094fc <_printf_i+0x118>
 8009588:	6813      	ldr	r3, [r2, #0]
 800958a:	1d19      	adds	r1, r3, #4
 800958c:	6011      	str	r1, [r2, #0]
 800958e:	681d      	ldr	r5, [r3, #0]
 8009590:	6862      	ldr	r2, [r4, #4]
 8009592:	2100      	movs	r1, #0
 8009594:	4628      	mov	r0, r5
 8009596:	f7f6 ff0b 	bl	80003b0 <memchr>
 800959a:	b108      	cbz	r0, 80095a0 <_printf_i+0x1bc>
 800959c:	1b40      	subs	r0, r0, r5
 800959e:	6060      	str	r0, [r4, #4]
 80095a0:	6863      	ldr	r3, [r4, #4]
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	2300      	movs	r3, #0
 80095a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095aa:	e7a7      	b.n	80094fc <_printf_i+0x118>
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	462a      	mov	r2, r5
 80095b0:	4639      	mov	r1, r7
 80095b2:	4630      	mov	r0, r6
 80095b4:	47c0      	blx	r8
 80095b6:	3001      	adds	r0, #1
 80095b8:	d0aa      	beq.n	8009510 <_printf_i+0x12c>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	079b      	lsls	r3, r3, #30
 80095be:	d413      	bmi.n	80095e8 <_printf_i+0x204>
 80095c0:	68e0      	ldr	r0, [r4, #12]
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	4298      	cmp	r0, r3
 80095c6:	bfb8      	it	lt
 80095c8:	4618      	movlt	r0, r3
 80095ca:	e7a3      	b.n	8009514 <_printf_i+0x130>
 80095cc:	2301      	movs	r3, #1
 80095ce:	464a      	mov	r2, r9
 80095d0:	4639      	mov	r1, r7
 80095d2:	4630      	mov	r0, r6
 80095d4:	47c0      	blx	r8
 80095d6:	3001      	adds	r0, #1
 80095d8:	d09a      	beq.n	8009510 <_printf_i+0x12c>
 80095da:	3501      	adds	r5, #1
 80095dc:	68e3      	ldr	r3, [r4, #12]
 80095de:	9a03      	ldr	r2, [sp, #12]
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	42ab      	cmp	r3, r5
 80095e4:	dcf2      	bgt.n	80095cc <_printf_i+0x1e8>
 80095e6:	e7eb      	b.n	80095c0 <_printf_i+0x1dc>
 80095e8:	2500      	movs	r5, #0
 80095ea:	f104 0919 	add.w	r9, r4, #25
 80095ee:	e7f5      	b.n	80095dc <_printf_i+0x1f8>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1ac      	bne.n	800954e <_printf_i+0x16a>
 80095f4:	7803      	ldrb	r3, [r0, #0]
 80095f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095fe:	e76c      	b.n	80094da <_printf_i+0xf6>
 8009600:	0800dbba 	.word	0x0800dbba
 8009604:	0800dbcb 	.word	0x0800dbcb

08009608 <_sbrk_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4c06      	ldr	r4, [pc, #24]	; (8009624 <_sbrk_r+0x1c>)
 800960c:	2300      	movs	r3, #0
 800960e:	4605      	mov	r5, r0
 8009610:	4608      	mov	r0, r1
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	f7f8 f936 	bl	8001884 <_sbrk>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_sbrk_r+0x1a>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	b103      	cbz	r3, 8009622 <_sbrk_r+0x1a>
 8009620:	602b      	str	r3, [r5, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	2000472c 	.word	0x2000472c

08009628 <siprintf>:
 8009628:	b40e      	push	{r1, r2, r3}
 800962a:	b500      	push	{lr}
 800962c:	b09c      	sub	sp, #112	; 0x70
 800962e:	ab1d      	add	r3, sp, #116	; 0x74
 8009630:	9002      	str	r0, [sp, #8]
 8009632:	9006      	str	r0, [sp, #24]
 8009634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009638:	4809      	ldr	r0, [pc, #36]	; (8009660 <siprintf+0x38>)
 800963a:	9107      	str	r1, [sp, #28]
 800963c:	9104      	str	r1, [sp, #16]
 800963e:	4909      	ldr	r1, [pc, #36]	; (8009664 <siprintf+0x3c>)
 8009640:	f853 2b04 	ldr.w	r2, [r3], #4
 8009644:	9105      	str	r1, [sp, #20]
 8009646:	6800      	ldr	r0, [r0, #0]
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	a902      	add	r1, sp, #8
 800964c:	f001 f942 	bl	800a8d4 <_svfiprintf_r>
 8009650:	9b02      	ldr	r3, [sp, #8]
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
 8009656:	b01c      	add	sp, #112	; 0x70
 8009658:	f85d eb04 	ldr.w	lr, [sp], #4
 800965c:	b003      	add	sp, #12
 800965e:	4770      	bx	lr
 8009660:	20000014 	.word	0x20000014
 8009664:	ffff0208 	.word	0xffff0208

08009668 <quorem>:
 8009668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	6903      	ldr	r3, [r0, #16]
 800966e:	690c      	ldr	r4, [r1, #16]
 8009670:	42a3      	cmp	r3, r4
 8009672:	4680      	mov	r8, r0
 8009674:	f2c0 8082 	blt.w	800977c <quorem+0x114>
 8009678:	3c01      	subs	r4, #1
 800967a:	f101 0714 	add.w	r7, r1, #20
 800967e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009682:	f100 0614 	add.w	r6, r0, #20
 8009686:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800968a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800968e:	eb06 030c 	add.w	r3, r6, ip
 8009692:	3501      	adds	r5, #1
 8009694:	eb07 090c 	add.w	r9, r7, ip
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	fbb0 f5f5 	udiv	r5, r0, r5
 800969e:	b395      	cbz	r5, 8009706 <quorem+0x9e>
 80096a0:	f04f 0a00 	mov.w	sl, #0
 80096a4:	4638      	mov	r0, r7
 80096a6:	46b6      	mov	lr, r6
 80096a8:	46d3      	mov	fp, sl
 80096aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80096ae:	b293      	uxth	r3, r2
 80096b0:	fb05 a303 	mla	r3, r5, r3, sl
 80096b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	ebab 0303 	sub.w	r3, fp, r3
 80096be:	0c12      	lsrs	r2, r2, #16
 80096c0:	f8de b000 	ldr.w	fp, [lr]
 80096c4:	fb05 a202 	mla	r2, r5, r2, sl
 80096c8:	fa13 f38b 	uxtah	r3, r3, fp
 80096cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80096d0:	fa1f fb82 	uxth.w	fp, r2
 80096d4:	f8de 2000 	ldr.w	r2, [lr]
 80096d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80096dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096e6:	4581      	cmp	r9, r0
 80096e8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80096ec:	f84e 3b04 	str.w	r3, [lr], #4
 80096f0:	d2db      	bcs.n	80096aa <quorem+0x42>
 80096f2:	f856 300c 	ldr.w	r3, [r6, ip]
 80096f6:	b933      	cbnz	r3, 8009706 <quorem+0x9e>
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	3b04      	subs	r3, #4
 80096fc:	429e      	cmp	r6, r3
 80096fe:	461a      	mov	r2, r3
 8009700:	d330      	bcc.n	8009764 <quorem+0xfc>
 8009702:	f8c8 4010 	str.w	r4, [r8, #16]
 8009706:	4640      	mov	r0, r8
 8009708:	f000 ffb6 	bl	800a678 <__mcmp>
 800970c:	2800      	cmp	r0, #0
 800970e:	db25      	blt.n	800975c <quorem+0xf4>
 8009710:	3501      	adds	r5, #1
 8009712:	4630      	mov	r0, r6
 8009714:	f04f 0c00 	mov.w	ip, #0
 8009718:	f857 2b04 	ldr.w	r2, [r7], #4
 800971c:	f8d0 e000 	ldr.w	lr, [r0]
 8009720:	b293      	uxth	r3, r2
 8009722:	ebac 0303 	sub.w	r3, ip, r3
 8009726:	0c12      	lsrs	r2, r2, #16
 8009728:	fa13 f38e 	uxtah	r3, r3, lr
 800972c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009734:	b29b      	uxth	r3, r3
 8009736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800973a:	45b9      	cmp	r9, r7
 800973c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009740:	f840 3b04 	str.w	r3, [r0], #4
 8009744:	d2e8      	bcs.n	8009718 <quorem+0xb0>
 8009746:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800974a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800974e:	b92a      	cbnz	r2, 800975c <quorem+0xf4>
 8009750:	3b04      	subs	r3, #4
 8009752:	429e      	cmp	r6, r3
 8009754:	461a      	mov	r2, r3
 8009756:	d30b      	bcc.n	8009770 <quorem+0x108>
 8009758:	f8c8 4010 	str.w	r4, [r8, #16]
 800975c:	4628      	mov	r0, r5
 800975e:	b003      	add	sp, #12
 8009760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009764:	6812      	ldr	r2, [r2, #0]
 8009766:	3b04      	subs	r3, #4
 8009768:	2a00      	cmp	r2, #0
 800976a:	d1ca      	bne.n	8009702 <quorem+0x9a>
 800976c:	3c01      	subs	r4, #1
 800976e:	e7c5      	b.n	80096fc <quorem+0x94>
 8009770:	6812      	ldr	r2, [r2, #0]
 8009772:	3b04      	subs	r3, #4
 8009774:	2a00      	cmp	r2, #0
 8009776:	d1ef      	bne.n	8009758 <quorem+0xf0>
 8009778:	3c01      	subs	r4, #1
 800977a:	e7ea      	b.n	8009752 <quorem+0xea>
 800977c:	2000      	movs	r0, #0
 800977e:	e7ee      	b.n	800975e <quorem+0xf6>

08009780 <_dtoa_r>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	ec57 6b10 	vmov	r6, r7, d0
 8009788:	b095      	sub	sp, #84	; 0x54
 800978a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800978c:	9108      	str	r1, [sp, #32]
 800978e:	4604      	mov	r4, r0
 8009790:	920a      	str	r2, [sp, #40]	; 0x28
 8009792:	9311      	str	r3, [sp, #68]	; 0x44
 8009794:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8009798:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800979c:	b93d      	cbnz	r5, 80097ae <_dtoa_r+0x2e>
 800979e:	2010      	movs	r0, #16
 80097a0:	f7ff fa36 	bl	8008c10 <malloc>
 80097a4:	6260      	str	r0, [r4, #36]	; 0x24
 80097a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097aa:	6005      	str	r5, [r0, #0]
 80097ac:	60c5      	str	r5, [r0, #12]
 80097ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097b0:	6819      	ldr	r1, [r3, #0]
 80097b2:	b151      	cbz	r1, 80097ca <_dtoa_r+0x4a>
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	604a      	str	r2, [r1, #4]
 80097b8:	2301      	movs	r3, #1
 80097ba:	4093      	lsls	r3, r2
 80097bc:	608b      	str	r3, [r1, #8]
 80097be:	4620      	mov	r0, r4
 80097c0:	f000 fd79 	bl	800a2b6 <_Bfree>
 80097c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c6:	2200      	movs	r2, #0
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	1e3b      	subs	r3, r7, #0
 80097cc:	bfb9      	ittee	lt
 80097ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097d2:	9303      	strlt	r3, [sp, #12]
 80097d4:	2300      	movge	r3, #0
 80097d6:	f8c8 3000 	strge.w	r3, [r8]
 80097da:	9d03      	ldr	r5, [sp, #12]
 80097dc:	4bac      	ldr	r3, [pc, #688]	; (8009a90 <_dtoa_r+0x310>)
 80097de:	bfbc      	itt	lt
 80097e0:	2201      	movlt	r2, #1
 80097e2:	f8c8 2000 	strlt.w	r2, [r8]
 80097e6:	43ab      	bics	r3, r5
 80097e8:	d11b      	bne.n	8009822 <_dtoa_r+0xa2>
 80097ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097ec:	f242 730f 	movw	r3, #9999	; 0x270f
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	9b02      	ldr	r3, [sp, #8]
 80097f4:	b923      	cbnz	r3, 8009800 <_dtoa_r+0x80>
 80097f6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80097fa:	2d00      	cmp	r5, #0
 80097fc:	f000 84dd 	beq.w	800a1ba <_dtoa_r+0xa3a>
 8009800:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009802:	b953      	cbnz	r3, 800981a <_dtoa_r+0x9a>
 8009804:	4ba3      	ldr	r3, [pc, #652]	; (8009a94 <_dtoa_r+0x314>)
 8009806:	e020      	b.n	800984a <_dtoa_r+0xca>
 8009808:	4ba3      	ldr	r3, [pc, #652]	; (8009a98 <_dtoa_r+0x318>)
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	3308      	adds	r3, #8
 800980e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	9804      	ldr	r0, [sp, #16]
 8009814:	b015      	add	sp, #84	; 0x54
 8009816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981a:	4b9e      	ldr	r3, [pc, #632]	; (8009a94 <_dtoa_r+0x314>)
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	3303      	adds	r3, #3
 8009820:	e7f5      	b.n	800980e <_dtoa_r+0x8e>
 8009822:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009826:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800982a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009832:	d10c      	bne.n	800984e <_dtoa_r+0xce>
 8009834:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009836:	2301      	movs	r3, #1
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 84b9 	beq.w	800a1b4 <_dtoa_r+0xa34>
 8009842:	4b96      	ldr	r3, [pc, #600]	; (8009a9c <_dtoa_r+0x31c>)
 8009844:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	3b01      	subs	r3, #1
 800984a:	9304      	str	r3, [sp, #16]
 800984c:	e7e1      	b.n	8009812 <_dtoa_r+0x92>
 800984e:	a913      	add	r1, sp, #76	; 0x4c
 8009850:	aa12      	add	r2, sp, #72	; 0x48
 8009852:	ed9d 0b04 	vldr	d0, [sp, #16]
 8009856:	4620      	mov	r0, r4
 8009858:	f000 ff85 	bl	800a766 <__d2b>
 800985c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8009860:	9001      	str	r0, [sp, #4]
 8009862:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009864:	2e00      	cmp	r6, #0
 8009866:	d046      	beq.n	80098f6 <_dtoa_r+0x176>
 8009868:	9805      	ldr	r0, [sp, #20]
 800986a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800986e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009872:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8009876:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800987a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800987e:	2700      	movs	r7, #0
 8009880:	ee07 aa90 	vmov	s15, sl
 8009884:	ec43 2b16 	vmov	d6, r2, r3
 8009888:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800988c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8009a78 <_dtoa_r+0x2f8>
 8009890:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009894:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009898:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8009a80 <_dtoa_r+0x300>
 800989c:	eea7 6b04 	vfma.f64	d6, d7, d4
 80098a0:	eeb0 7b46 	vmov.f64	d7, d6
 80098a4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8009a88 <_dtoa_r+0x308>
 80098a8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80098ac:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80098b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80098b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b8:	ee16 ba90 	vmov	fp, s13
 80098bc:	d508      	bpl.n	80098d0 <_dtoa_r+0x150>
 80098be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80098c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80098c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ca:	bf18      	it	ne
 80098cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80098d0:	f1bb 0f16 	cmp.w	fp, #22
 80098d4:	d834      	bhi.n	8009940 <_dtoa_r+0x1c0>
 80098d6:	4b72      	ldr	r3, [pc, #456]	; (8009aa0 <_dtoa_r+0x320>)
 80098d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098dc:	ed93 7b00 	vldr	d7, [r3]
 80098e0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80098e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80098e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ec:	dd01      	ble.n	80098f2 <_dtoa_r+0x172>
 80098ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098f2:	2300      	movs	r3, #0
 80098f4:	e025      	b.n	8009942 <_dtoa_r+0x1c2>
 80098f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098f8:	eb01 0a03 	add.w	sl, r1, r3
 80098fc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8009900:	2b20      	cmp	r3, #32
 8009902:	dd17      	ble.n	8009934 <_dtoa_r+0x1b4>
 8009904:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009908:	9a02      	ldr	r2, [sp, #8]
 800990a:	409d      	lsls	r5, r3
 800990c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8009910:	fa22 f303 	lsr.w	r3, r2, r3
 8009914:	432b      	orrs	r3, r5
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800991e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009922:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009926:	9805      	ldr	r0, [sp, #20]
 8009928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800992c:	2701      	movs	r7, #1
 800992e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8009932:	e7a5      	b.n	8009880 <_dtoa_r+0x100>
 8009934:	9a02      	ldr	r2, [sp, #8]
 8009936:	f1c3 0320 	rsb	r3, r3, #32
 800993a:	fa02 f303 	lsl.w	r3, r2, r3
 800993e:	e7ea      	b.n	8009916 <_dtoa_r+0x196>
 8009940:	2301      	movs	r3, #1
 8009942:	eba1 0a0a 	sub.w	sl, r1, sl
 8009946:	9310      	str	r3, [sp, #64]	; 0x40
 8009948:	f1ba 0301 	subs.w	r3, sl, #1
 800994c:	9307      	str	r3, [sp, #28]
 800994e:	bf43      	ittte	mi
 8009950:	2300      	movmi	r3, #0
 8009952:	f1ca 0a01 	rsbmi	sl, sl, #1
 8009956:	9307      	strmi	r3, [sp, #28]
 8009958:	f04f 0a00 	movpl.w	sl, #0
 800995c:	f1bb 0f00 	cmp.w	fp, #0
 8009960:	db19      	blt.n	8009996 <_dtoa_r+0x216>
 8009962:	9b07      	ldr	r3, [sp, #28]
 8009964:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009968:	445b      	add	r3, fp
 800996a:	9307      	str	r3, [sp, #28]
 800996c:	f04f 0800 	mov.w	r8, #0
 8009970:	9b08      	ldr	r3, [sp, #32]
 8009972:	2b09      	cmp	r3, #9
 8009974:	d866      	bhi.n	8009a44 <_dtoa_r+0x2c4>
 8009976:	2b05      	cmp	r3, #5
 8009978:	bfc4      	itt	gt
 800997a:	3b04      	subgt	r3, #4
 800997c:	9308      	strgt	r3, [sp, #32]
 800997e:	9b08      	ldr	r3, [sp, #32]
 8009980:	f1a3 0302 	sub.w	r3, r3, #2
 8009984:	bfcc      	ite	gt
 8009986:	2500      	movgt	r5, #0
 8009988:	2501      	movle	r5, #1
 800998a:	2b03      	cmp	r3, #3
 800998c:	d866      	bhi.n	8009a5c <_dtoa_r+0x2dc>
 800998e:	e8df f003 	tbb	[pc, r3]
 8009992:	5755      	.short	0x5755
 8009994:	4909      	.short	0x4909
 8009996:	2300      	movs	r3, #0
 8009998:	ebaa 0a0b 	sub.w	sl, sl, fp
 800999c:	f1cb 0800 	rsb	r8, fp, #0
 80099a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099a2:	e7e5      	b.n	8009970 <_dtoa_r+0x1f0>
 80099a4:	2301      	movs	r3, #1
 80099a6:	9309      	str	r3, [sp, #36]	; 0x24
 80099a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dd59      	ble.n	8009a62 <_dtoa_r+0x2e2>
 80099ae:	9306      	str	r3, [sp, #24]
 80099b0:	4699      	mov	r9, r3
 80099b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099b4:	2200      	movs	r2, #0
 80099b6:	6072      	str	r2, [r6, #4]
 80099b8:	2204      	movs	r2, #4
 80099ba:	f102 0014 	add.w	r0, r2, #20
 80099be:	4298      	cmp	r0, r3
 80099c0:	6871      	ldr	r1, [r6, #4]
 80099c2:	d953      	bls.n	8009a6c <_dtoa_r+0x2ec>
 80099c4:	4620      	mov	r0, r4
 80099c6:	f000 fc42 	bl	800a24e <_Balloc>
 80099ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099cc:	6030      	str	r0, [r6, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	9304      	str	r3, [sp, #16]
 80099d2:	f1b9 0f0e 	cmp.w	r9, #14
 80099d6:	f200 80c2 	bhi.w	8009b5e <_dtoa_r+0x3de>
 80099da:	2d00      	cmp	r5, #0
 80099dc:	f000 80bf 	beq.w	8009b5e <_dtoa_r+0x3de>
 80099e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099e4:	f1bb 0f00 	cmp.w	fp, #0
 80099e8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80099ec:	f340 80e6 	ble.w	8009bbc <_dtoa_r+0x43c>
 80099f0:	4a2b      	ldr	r2, [pc, #172]	; (8009aa0 <_dtoa_r+0x320>)
 80099f2:	f00b 030f 	and.w	r3, fp, #15
 80099f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099fa:	ed93 7b00 	vldr	d7, [r3]
 80099fe:	ea4f 132b 	mov.w	r3, fp, asr #4
 8009a02:	06da      	lsls	r2, r3, #27
 8009a04:	f140 80d8 	bpl.w	8009bb8 <_dtoa_r+0x438>
 8009a08:	4a26      	ldr	r2, [pc, #152]	; (8009aa4 <_dtoa_r+0x324>)
 8009a0a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8009a0e:	ed92 6b08 	vldr	d6, [r2, #32]
 8009a12:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009a16:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a1a:	f003 030f 	and.w	r3, r3, #15
 8009a1e:	2203      	movs	r2, #3
 8009a20:	4920      	ldr	r1, [pc, #128]	; (8009aa4 <_dtoa_r+0x324>)
 8009a22:	e04a      	b.n	8009aba <_dtoa_r+0x33a>
 8009a24:	2301      	movs	r3, #1
 8009a26:	9309      	str	r3, [sp, #36]	; 0x24
 8009a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2a:	445b      	add	r3, fp
 8009a2c:	f103 0901 	add.w	r9, r3, #1
 8009a30:	9306      	str	r3, [sp, #24]
 8009a32:	464b      	mov	r3, r9
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	bfb8      	it	lt
 8009a38:	2301      	movlt	r3, #1
 8009a3a:	e7ba      	b.n	80099b2 <_dtoa_r+0x232>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	e7b2      	b.n	80099a6 <_dtoa_r+0x226>
 8009a40:	2300      	movs	r3, #0
 8009a42:	e7f0      	b.n	8009a26 <_dtoa_r+0x2a6>
 8009a44:	2501      	movs	r5, #1
 8009a46:	2300      	movs	r3, #0
 8009a48:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a50:	9306      	str	r3, [sp, #24]
 8009a52:	4699      	mov	r9, r3
 8009a54:	2200      	movs	r2, #0
 8009a56:	2312      	movs	r3, #18
 8009a58:	920a      	str	r2, [sp, #40]	; 0x28
 8009a5a:	e7aa      	b.n	80099b2 <_dtoa_r+0x232>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a60:	e7f4      	b.n	8009a4c <_dtoa_r+0x2cc>
 8009a62:	2301      	movs	r3, #1
 8009a64:	9306      	str	r3, [sp, #24]
 8009a66:	4699      	mov	r9, r3
 8009a68:	461a      	mov	r2, r3
 8009a6a:	e7f5      	b.n	8009a58 <_dtoa_r+0x2d8>
 8009a6c:	3101      	adds	r1, #1
 8009a6e:	6071      	str	r1, [r6, #4]
 8009a70:	0052      	lsls	r2, r2, #1
 8009a72:	e7a2      	b.n	80099ba <_dtoa_r+0x23a>
 8009a74:	f3af 8000 	nop.w
 8009a78:	636f4361 	.word	0x636f4361
 8009a7c:	3fd287a7 	.word	0x3fd287a7
 8009a80:	8b60c8b3 	.word	0x8b60c8b3
 8009a84:	3fc68a28 	.word	0x3fc68a28
 8009a88:	509f79fb 	.word	0x509f79fb
 8009a8c:	3fd34413 	.word	0x3fd34413
 8009a90:	7ff00000 	.word	0x7ff00000
 8009a94:	0800dbe5 	.word	0x0800dbe5
 8009a98:	0800dbdc 	.word	0x0800dbdc
 8009a9c:	0800dbb9 	.word	0x0800dbb9
 8009aa0:	0800dc18 	.word	0x0800dc18
 8009aa4:	0800dbf0 	.word	0x0800dbf0
 8009aa8:	07de      	lsls	r6, r3, #31
 8009aaa:	d504      	bpl.n	8009ab6 <_dtoa_r+0x336>
 8009aac:	ed91 6b00 	vldr	d6, [r1]
 8009ab0:	3201      	adds	r2, #1
 8009ab2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ab6:	105b      	asrs	r3, r3, #1
 8009ab8:	3108      	adds	r1, #8
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f4      	bne.n	8009aa8 <_dtoa_r+0x328>
 8009abe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ac2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009ac6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009aca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 80a7 	beq.w	8009c20 <_dtoa_r+0x4a0>
 8009ad2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009ad6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ada:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae2:	f140 809d 	bpl.w	8009c20 <_dtoa_r+0x4a0>
 8009ae6:	f1b9 0f00 	cmp.w	r9, #0
 8009aea:	f000 8099 	beq.w	8009c20 <_dtoa_r+0x4a0>
 8009aee:	9b06      	ldr	r3, [sp, #24]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dd30      	ble.n	8009b56 <_dtoa_r+0x3d6>
 8009af4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009af8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009afc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b00:	9d06      	ldr	r5, [sp, #24]
 8009b02:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009b06:	3201      	adds	r2, #1
 8009b08:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b0c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009b10:	ee07 2a90 	vmov	s15, r2
 8009b14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009b18:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009b1c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009b20:	9a03      	ldr	r2, [sp, #12]
 8009b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b26:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8009b2a:	2d00      	cmp	r5, #0
 8009b2c:	d17b      	bne.n	8009c26 <_dtoa_r+0x4a6>
 8009b2e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009b32:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009b36:	ec41 0b17 	vmov	d7, r0, r1
 8009b3a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b42:	f300 8253 	bgt.w	8009fec <_dtoa_r+0x86c>
 8009b46:	eeb1 7b47 	vneg.f64	d7, d7
 8009b4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b52:	f100 8249 	bmi.w	8009fe8 <_dtoa_r+0x868>
 8009b56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009b5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f2c0 8119 	blt.w	8009d98 <_dtoa_r+0x618>
 8009b66:	f1bb 0f0e 	cmp.w	fp, #14
 8009b6a:	f300 8115 	bgt.w	8009d98 <_dtoa_r+0x618>
 8009b6e:	4bc3      	ldr	r3, [pc, #780]	; (8009e7c <_dtoa_r+0x6fc>)
 8009b70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b74:	ed93 6b00 	vldr	d6, [r3]
 8009b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f280 80ba 	bge.w	8009cf4 <_dtoa_r+0x574>
 8009b80:	f1b9 0f00 	cmp.w	r9, #0
 8009b84:	f300 80b6 	bgt.w	8009cf4 <_dtoa_r+0x574>
 8009b88:	f040 822d 	bne.w	8009fe6 <_dtoa_r+0x866>
 8009b8c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009b90:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba0:	464d      	mov	r5, r9
 8009ba2:	464f      	mov	r7, r9
 8009ba4:	f280 8204 	bge.w	8009fb0 <_dtoa_r+0x830>
 8009ba8:	9b04      	ldr	r3, [sp, #16]
 8009baa:	9a04      	ldr	r2, [sp, #16]
 8009bac:	1c5e      	adds	r6, r3, #1
 8009bae:	2331      	movs	r3, #49	; 0x31
 8009bb0:	7013      	strb	r3, [r2, #0]
 8009bb2:	f10b 0b01 	add.w	fp, fp, #1
 8009bb6:	e1ff      	b.n	8009fb8 <_dtoa_r+0x838>
 8009bb8:	2202      	movs	r2, #2
 8009bba:	e731      	b.n	8009a20 <_dtoa_r+0x2a0>
 8009bbc:	d02e      	beq.n	8009c1c <_dtoa_r+0x49c>
 8009bbe:	f1cb 0300 	rsb	r3, fp, #0
 8009bc2:	4aae      	ldr	r2, [pc, #696]	; (8009e7c <_dtoa_r+0x6fc>)
 8009bc4:	f003 010f 	and.w	r1, r3, #15
 8009bc8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009bcc:	ed92 7b00 	vldr	d7, [r2]
 8009bd0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8009bd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009bd8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009bdc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8009be0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009be4:	49a6      	ldr	r1, [pc, #664]	; (8009e80 <_dtoa_r+0x700>)
 8009be6:	111b      	asrs	r3, r3, #4
 8009be8:	2000      	movs	r0, #0
 8009bea:	2202      	movs	r2, #2
 8009bec:	b93b      	cbnz	r3, 8009bfe <_dtoa_r+0x47e>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f43f af6b 	beq.w	8009aca <_dtoa_r+0x34a>
 8009bf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bfc:	e765      	b.n	8009aca <_dtoa_r+0x34a>
 8009bfe:	07dd      	lsls	r5, r3, #31
 8009c00:	d509      	bpl.n	8009c16 <_dtoa_r+0x496>
 8009c02:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009c06:	ed91 7b00 	vldr	d7, [r1]
 8009c0a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009c0e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009c12:	3201      	adds	r2, #1
 8009c14:	2001      	movs	r0, #1
 8009c16:	105b      	asrs	r3, r3, #1
 8009c18:	3108      	adds	r1, #8
 8009c1a:	e7e7      	b.n	8009bec <_dtoa_r+0x46c>
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	e754      	b.n	8009aca <_dtoa_r+0x34a>
 8009c20:	465b      	mov	r3, fp
 8009c22:	464d      	mov	r5, r9
 8009c24:	e770      	b.n	8009b08 <_dtoa_r+0x388>
 8009c26:	4a95      	ldr	r2, [pc, #596]	; (8009e7c <_dtoa_r+0x6fc>)
 8009c28:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8009c2c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009c30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c32:	ec41 0b17 	vmov	d7, r0, r1
 8009c36:	b35a      	cbz	r2, 8009c90 <_dtoa_r+0x510>
 8009c38:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009c3c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009c40:	9e04      	ldr	r6, [sp, #16]
 8009c42:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c46:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c4a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c4e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c52:	ee14 2a90 	vmov	r2, s9
 8009c56:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c5a:	3230      	adds	r2, #48	; 0x30
 8009c5c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c68:	f806 2b01 	strb.w	r2, [r6], #1
 8009c6c:	d43b      	bmi.n	8009ce6 <_dtoa_r+0x566>
 8009c6e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009c72:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7a:	d472      	bmi.n	8009d62 <_dtoa_r+0x5e2>
 8009c7c:	9a04      	ldr	r2, [sp, #16]
 8009c7e:	1ab2      	subs	r2, r6, r2
 8009c80:	4295      	cmp	r5, r2
 8009c82:	f77f af68 	ble.w	8009b56 <_dtoa_r+0x3d6>
 8009c86:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009c8a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c8e:	e7de      	b.n	8009c4e <_dtoa_r+0x4ce>
 8009c90:	9a04      	ldr	r2, [sp, #16]
 8009c92:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009c96:	1956      	adds	r6, r2, r5
 8009c98:	4611      	mov	r1, r2
 8009c9a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c9e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ca2:	ee14 2a90 	vmov	r2, s9
 8009ca6:	3230      	adds	r2, #48	; 0x30
 8009ca8:	f801 2b01 	strb.w	r2, [r1], #1
 8009cac:	42b1      	cmp	r1, r6
 8009cae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009cb2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009cb6:	d11a      	bne.n	8009cee <_dtoa_r+0x56e>
 8009cb8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009cbc:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009cc0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc8:	dc4b      	bgt.n	8009d62 <_dtoa_r+0x5e2>
 8009cca:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009cce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd6:	f57f af3e 	bpl.w	8009b56 <_dtoa_r+0x3d6>
 8009cda:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009cde:	2a30      	cmp	r2, #48	; 0x30
 8009ce0:	f106 31ff 	add.w	r1, r6, #4294967295
 8009ce4:	d001      	beq.n	8009cea <_dtoa_r+0x56a>
 8009ce6:	469b      	mov	fp, r3
 8009ce8:	e02a      	b.n	8009d40 <_dtoa_r+0x5c0>
 8009cea:	460e      	mov	r6, r1
 8009cec:	e7f5      	b.n	8009cda <_dtoa_r+0x55a>
 8009cee:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009cf2:	e7d4      	b.n	8009c9e <_dtoa_r+0x51e>
 8009cf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cf8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009cfc:	9e04      	ldr	r6, [sp, #16]
 8009cfe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009d02:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009d06:	ee15 3a10 	vmov	r3, s10
 8009d0a:	3330      	adds	r3, #48	; 0x30
 8009d0c:	f806 3b01 	strb.w	r3, [r6], #1
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	1af3      	subs	r3, r6, r3
 8009d14:	4599      	cmp	r9, r3
 8009d16:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009d1a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009d1e:	d133      	bne.n	8009d88 <_dtoa_r+0x608>
 8009d20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009d24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d2c:	dc18      	bgt.n	8009d60 <_dtoa_r+0x5e0>
 8009d2e:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d36:	d103      	bne.n	8009d40 <_dtoa_r+0x5c0>
 8009d38:	ee15 3a10 	vmov	r3, s10
 8009d3c:	07db      	lsls	r3, r3, #31
 8009d3e:	d40f      	bmi.n	8009d60 <_dtoa_r+0x5e0>
 8009d40:	9901      	ldr	r1, [sp, #4]
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 fab7 	bl	800a2b6 <_Bfree>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d4c:	7033      	strb	r3, [r6, #0]
 8009d4e:	f10b 0301 	add.w	r3, fp, #1
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f43f ad5b 	beq.w	8009812 <_dtoa_r+0x92>
 8009d5c:	601e      	str	r6, [r3, #0]
 8009d5e:	e558      	b.n	8009812 <_dtoa_r+0x92>
 8009d60:	465b      	mov	r3, fp
 8009d62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009d66:	2939      	cmp	r1, #57	; 0x39
 8009d68:	f106 32ff 	add.w	r2, r6, #4294967295
 8009d6c:	d106      	bne.n	8009d7c <_dtoa_r+0x5fc>
 8009d6e:	9904      	ldr	r1, [sp, #16]
 8009d70:	4291      	cmp	r1, r2
 8009d72:	d107      	bne.n	8009d84 <_dtoa_r+0x604>
 8009d74:	2230      	movs	r2, #48	; 0x30
 8009d76:	700a      	strb	r2, [r1, #0]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	460a      	mov	r2, r1
 8009d7c:	7811      	ldrb	r1, [r2, #0]
 8009d7e:	3101      	adds	r1, #1
 8009d80:	7011      	strb	r1, [r2, #0]
 8009d82:	e7b0      	b.n	8009ce6 <_dtoa_r+0x566>
 8009d84:	4616      	mov	r6, r2
 8009d86:	e7ec      	b.n	8009d62 <_dtoa_r+0x5e2>
 8009d88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d94:	d1b3      	bne.n	8009cfe <_dtoa_r+0x57e>
 8009d96:	e7d3      	b.n	8009d40 <_dtoa_r+0x5c0>
 8009d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	f000 808d 	beq.w	8009eba <_dtoa_r+0x73a>
 8009da0:	9a08      	ldr	r2, [sp, #32]
 8009da2:	2a01      	cmp	r2, #1
 8009da4:	dc72      	bgt.n	8009e8c <_dtoa_r+0x70c>
 8009da6:	2f00      	cmp	r7, #0
 8009da8:	d06c      	beq.n	8009e84 <_dtoa_r+0x704>
 8009daa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009dae:	4645      	mov	r5, r8
 8009db0:	4656      	mov	r6, sl
 8009db2:	9a07      	ldr	r2, [sp, #28]
 8009db4:	2101      	movs	r1, #1
 8009db6:	441a      	add	r2, r3
 8009db8:	4620      	mov	r0, r4
 8009dba:	449a      	add	sl, r3
 8009dbc:	9207      	str	r2, [sp, #28]
 8009dbe:	f000 fb1a 	bl	800a3f6 <__i2b>
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	2e00      	cmp	r6, #0
 8009dc6:	dd0b      	ble.n	8009de0 <_dtoa_r+0x660>
 8009dc8:	9b07      	ldr	r3, [sp, #28]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	dd08      	ble.n	8009de0 <_dtoa_r+0x660>
 8009dce:	42b3      	cmp	r3, r6
 8009dd0:	9a07      	ldr	r2, [sp, #28]
 8009dd2:	bfa8      	it	ge
 8009dd4:	4633      	movge	r3, r6
 8009dd6:	ebaa 0a03 	sub.w	sl, sl, r3
 8009dda:	1af6      	subs	r6, r6, r3
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	9307      	str	r3, [sp, #28]
 8009de0:	f1b8 0f00 	cmp.w	r8, #0
 8009de4:	d01d      	beq.n	8009e22 <_dtoa_r+0x6a2>
 8009de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d06a      	beq.n	8009ec2 <_dtoa_r+0x742>
 8009dec:	b18d      	cbz	r5, 8009e12 <_dtoa_r+0x692>
 8009dee:	4639      	mov	r1, r7
 8009df0:	462a      	mov	r2, r5
 8009df2:	4620      	mov	r0, r4
 8009df4:	f000 fb9e 	bl	800a534 <__pow5mult>
 8009df8:	9a01      	ldr	r2, [sp, #4]
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 fb02 	bl	800a408 <__multiply>
 8009e04:	9901      	ldr	r1, [sp, #4]
 8009e06:	900c      	str	r0, [sp, #48]	; 0x30
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f000 fa54 	bl	800a2b6 <_Bfree>
 8009e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	ebb8 0205 	subs.w	r2, r8, r5
 8009e16:	d004      	beq.n	8009e22 <_dtoa_r+0x6a2>
 8009e18:	9901      	ldr	r1, [sp, #4]
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f000 fb8a 	bl	800a534 <__pow5mult>
 8009e20:	9001      	str	r0, [sp, #4]
 8009e22:	2101      	movs	r1, #1
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 fae6 	bl	800a3f6 <__i2b>
 8009e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 81ca 	beq.w	800a1c8 <_dtoa_r+0xa48>
 8009e34:	461a      	mov	r2, r3
 8009e36:	4601      	mov	r1, r0
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 fb7b 	bl	800a534 <__pow5mult>
 8009e3e:	9b08      	ldr	r3, [sp, #32]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	4605      	mov	r5, r0
 8009e44:	dc44      	bgt.n	8009ed0 <_dtoa_r+0x750>
 8009e46:	9b02      	ldr	r3, [sp, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d13c      	bne.n	8009ec6 <_dtoa_r+0x746>
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d137      	bne.n	8009ec6 <_dtoa_r+0x746>
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e5c:	0d1b      	lsrs	r3, r3, #20
 8009e5e:	051b      	lsls	r3, r3, #20
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d033      	beq.n	8009ecc <_dtoa_r+0x74c>
 8009e64:	9b07      	ldr	r3, [sp, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	f10a 0a01 	add.w	sl, sl, #1
 8009e6c:	9307      	str	r3, [sp, #28]
 8009e6e:	f04f 0801 	mov.w	r8, #1
 8009e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e74:	bb73      	cbnz	r3, 8009ed4 <_dtoa_r+0x754>
 8009e76:	2001      	movs	r0, #1
 8009e78:	e034      	b.n	8009ee4 <_dtoa_r+0x764>
 8009e7a:	bf00      	nop
 8009e7c:	0800dc18 	.word	0x0800dc18
 8009e80:	0800dbf0 	.word	0x0800dbf0
 8009e84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e8a:	e790      	b.n	8009dae <_dtoa_r+0x62e>
 8009e8c:	f109 35ff 	add.w	r5, r9, #4294967295
 8009e90:	45a8      	cmp	r8, r5
 8009e92:	bfbf      	itttt	lt
 8009e94:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8009e96:	eba5 0808 	sublt.w	r8, r5, r8
 8009e9a:	4443      	addlt	r3, r8
 8009e9c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009e9e:	bfb6      	itet	lt
 8009ea0:	46a8      	movlt	r8, r5
 8009ea2:	eba8 0505 	subge.w	r5, r8, r5
 8009ea6:	2500      	movlt	r5, #0
 8009ea8:	f1b9 0f00 	cmp.w	r9, #0
 8009eac:	bfb9      	ittee	lt
 8009eae:	ebaa 0609 	sublt.w	r6, sl, r9
 8009eb2:	2300      	movlt	r3, #0
 8009eb4:	4656      	movge	r6, sl
 8009eb6:	464b      	movge	r3, r9
 8009eb8:	e77b      	b.n	8009db2 <_dtoa_r+0x632>
 8009eba:	4645      	mov	r5, r8
 8009ebc:	4656      	mov	r6, sl
 8009ebe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ec0:	e780      	b.n	8009dc4 <_dtoa_r+0x644>
 8009ec2:	4642      	mov	r2, r8
 8009ec4:	e7a8      	b.n	8009e18 <_dtoa_r+0x698>
 8009ec6:	f04f 0800 	mov.w	r8, #0
 8009eca:	e7d2      	b.n	8009e72 <_dtoa_r+0x6f2>
 8009ecc:	4698      	mov	r8, r3
 8009ece:	e7d0      	b.n	8009e72 <_dtoa_r+0x6f2>
 8009ed0:	f04f 0800 	mov.w	r8, #0
 8009ed4:	692b      	ldr	r3, [r5, #16]
 8009ed6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009eda:	6918      	ldr	r0, [r3, #16]
 8009edc:	f000 fa3d 	bl	800a35a <__hi0bits>
 8009ee0:	f1c0 0020 	rsb	r0, r0, #32
 8009ee4:	9b07      	ldr	r3, [sp, #28]
 8009ee6:	4418      	add	r0, r3
 8009ee8:	f010 001f 	ands.w	r0, r0, #31
 8009eec:	d047      	beq.n	8009f7e <_dtoa_r+0x7fe>
 8009eee:	f1c0 0320 	rsb	r3, r0, #32
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	dd3b      	ble.n	8009f6e <_dtoa_r+0x7ee>
 8009ef6:	9b07      	ldr	r3, [sp, #28]
 8009ef8:	f1c0 001c 	rsb	r0, r0, #28
 8009efc:	4482      	add	sl, r0
 8009efe:	4406      	add	r6, r0
 8009f00:	4403      	add	r3, r0
 8009f02:	9307      	str	r3, [sp, #28]
 8009f04:	f1ba 0f00 	cmp.w	sl, #0
 8009f08:	dd05      	ble.n	8009f16 <_dtoa_r+0x796>
 8009f0a:	4652      	mov	r2, sl
 8009f0c:	9901      	ldr	r1, [sp, #4]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 fb5e 	bl	800a5d0 <__lshift>
 8009f14:	9001      	str	r0, [sp, #4]
 8009f16:	9b07      	ldr	r3, [sp, #28]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	dd05      	ble.n	8009f28 <_dtoa_r+0x7a8>
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	461a      	mov	r2, r3
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 fb55 	bl	800a5d0 <__lshift>
 8009f26:	4605      	mov	r5, r0
 8009f28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f2a:	b353      	cbz	r3, 8009f82 <_dtoa_r+0x802>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	9801      	ldr	r0, [sp, #4]
 8009f30:	f000 fba2 	bl	800a678 <__mcmp>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	da24      	bge.n	8009f82 <_dtoa_r+0x802>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	220a      	movs	r2, #10
 8009f3c:	9901      	ldr	r1, [sp, #4]
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 f9d0 	bl	800a2e4 <__multadd>
 8009f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f46:	9001      	str	r0, [sp, #4]
 8009f48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 8142 	beq.w	800a1d6 <_dtoa_r+0xa56>
 8009f52:	2300      	movs	r3, #0
 8009f54:	4639      	mov	r1, r7
 8009f56:	220a      	movs	r2, #10
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 f9c3 	bl	800a2e4 <__multadd>
 8009f5e:	9b06      	ldr	r3, [sp, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	4607      	mov	r7, r0
 8009f64:	dc4b      	bgt.n	8009ffe <_dtoa_r+0x87e>
 8009f66:	9b08      	ldr	r3, [sp, #32]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	dd48      	ble.n	8009ffe <_dtoa_r+0x87e>
 8009f6c:	e011      	b.n	8009f92 <_dtoa_r+0x812>
 8009f6e:	d0c9      	beq.n	8009f04 <_dtoa_r+0x784>
 8009f70:	9a07      	ldr	r2, [sp, #28]
 8009f72:	331c      	adds	r3, #28
 8009f74:	441a      	add	r2, r3
 8009f76:	449a      	add	sl, r3
 8009f78:	441e      	add	r6, r3
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	e7c1      	b.n	8009f02 <_dtoa_r+0x782>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	e7f6      	b.n	8009f70 <_dtoa_r+0x7f0>
 8009f82:	f1b9 0f00 	cmp.w	r9, #0
 8009f86:	dc34      	bgt.n	8009ff2 <_dtoa_r+0x872>
 8009f88:	9b08      	ldr	r3, [sp, #32]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	dd31      	ble.n	8009ff2 <_dtoa_r+0x872>
 8009f8e:	f8cd 9018 	str.w	r9, [sp, #24]
 8009f92:	9b06      	ldr	r3, [sp, #24]
 8009f94:	b963      	cbnz	r3, 8009fb0 <_dtoa_r+0x830>
 8009f96:	4629      	mov	r1, r5
 8009f98:	2205      	movs	r2, #5
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f000 f9a2 	bl	800a2e4 <__multadd>
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	9801      	ldr	r0, [sp, #4]
 8009fa6:	f000 fb67 	bl	800a678 <__mcmp>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	f73f adfc 	bgt.w	8009ba8 <_dtoa_r+0x428>
 8009fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb2:	9e04      	ldr	r6, [sp, #16]
 8009fb4:	ea6f 0b03 	mvn.w	fp, r3
 8009fb8:	f04f 0900 	mov.w	r9, #0
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 f979 	bl	800a2b6 <_Bfree>
 8009fc4:	2f00      	cmp	r7, #0
 8009fc6:	f43f aebb 	beq.w	8009d40 <_dtoa_r+0x5c0>
 8009fca:	f1b9 0f00 	cmp.w	r9, #0
 8009fce:	d005      	beq.n	8009fdc <_dtoa_r+0x85c>
 8009fd0:	45b9      	cmp	r9, r7
 8009fd2:	d003      	beq.n	8009fdc <_dtoa_r+0x85c>
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 f96d 	bl	800a2b6 <_Bfree>
 8009fdc:	4639      	mov	r1, r7
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 f969 	bl	800a2b6 <_Bfree>
 8009fe4:	e6ac      	b.n	8009d40 <_dtoa_r+0x5c0>
 8009fe6:	2500      	movs	r5, #0
 8009fe8:	462f      	mov	r7, r5
 8009fea:	e7e1      	b.n	8009fb0 <_dtoa_r+0x830>
 8009fec:	469b      	mov	fp, r3
 8009fee:	462f      	mov	r7, r5
 8009ff0:	e5da      	b.n	8009ba8 <_dtoa_r+0x428>
 8009ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff4:	f8cd 9018 	str.w	r9, [sp, #24]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 80f3 	beq.w	800a1e4 <_dtoa_r+0xa64>
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	dd05      	ble.n	800a00e <_dtoa_r+0x88e>
 800a002:	4639      	mov	r1, r7
 800a004:	4632      	mov	r2, r6
 800a006:	4620      	mov	r0, r4
 800a008:	f000 fae2 	bl	800a5d0 <__lshift>
 800a00c:	4607      	mov	r7, r0
 800a00e:	f1b8 0f00 	cmp.w	r8, #0
 800a012:	d04c      	beq.n	800a0ae <_dtoa_r+0x92e>
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	4620      	mov	r0, r4
 800a018:	f000 f919 	bl	800a24e <_Balloc>
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	3202      	adds	r2, #2
 800a020:	4606      	mov	r6, r0
 800a022:	0092      	lsls	r2, r2, #2
 800a024:	f107 010c 	add.w	r1, r7, #12
 800a028:	300c      	adds	r0, #12
 800a02a:	f000 f903 	bl	800a234 <memcpy>
 800a02e:	2201      	movs	r2, #1
 800a030:	4631      	mov	r1, r6
 800a032:	4620      	mov	r0, r4
 800a034:	f000 facc 	bl	800a5d0 <__lshift>
 800a038:	9b02      	ldr	r3, [sp, #8]
 800a03a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	46b9      	mov	r9, r7
 800a044:	9307      	str	r3, [sp, #28]
 800a046:	4607      	mov	r7, r0
 800a048:	4629      	mov	r1, r5
 800a04a:	9801      	ldr	r0, [sp, #4]
 800a04c:	f7ff fb0c 	bl	8009668 <quorem>
 800a050:	4649      	mov	r1, r9
 800a052:	4606      	mov	r6, r0
 800a054:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a058:	9801      	ldr	r0, [sp, #4]
 800a05a:	f000 fb0d 	bl	800a678 <__mcmp>
 800a05e:	463a      	mov	r2, r7
 800a060:	9002      	str	r0, [sp, #8]
 800a062:	4629      	mov	r1, r5
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fb21 	bl	800a6ac <__mdiff>
 800a06a:	68c3      	ldr	r3, [r0, #12]
 800a06c:	4602      	mov	r2, r0
 800a06e:	bb03      	cbnz	r3, 800a0b2 <_dtoa_r+0x932>
 800a070:	4601      	mov	r1, r0
 800a072:	9009      	str	r0, [sp, #36]	; 0x24
 800a074:	9801      	ldr	r0, [sp, #4]
 800a076:	f000 faff 	bl	800a678 <__mcmp>
 800a07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a07c:	4603      	mov	r3, r0
 800a07e:	4611      	mov	r1, r2
 800a080:	4620      	mov	r0, r4
 800a082:	9309      	str	r3, [sp, #36]	; 0x24
 800a084:	f000 f917 	bl	800a2b6 <_Bfree>
 800a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08a:	b9a3      	cbnz	r3, 800a0b6 <_dtoa_r+0x936>
 800a08c:	9a08      	ldr	r2, [sp, #32]
 800a08e:	b992      	cbnz	r2, 800a0b6 <_dtoa_r+0x936>
 800a090:	9a07      	ldr	r2, [sp, #28]
 800a092:	b982      	cbnz	r2, 800a0b6 <_dtoa_r+0x936>
 800a094:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a098:	d029      	beq.n	800a0ee <_dtoa_r+0x96e>
 800a09a:	9b02      	ldr	r3, [sp, #8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dd01      	ble.n	800a0a4 <_dtoa_r+0x924>
 800a0a0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800a0a4:	f10a 0601 	add.w	r6, sl, #1
 800a0a8:	f88a 8000 	strb.w	r8, [sl]
 800a0ac:	e786      	b.n	8009fbc <_dtoa_r+0x83c>
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	e7c2      	b.n	800a038 <_dtoa_r+0x8b8>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e7e3      	b.n	800a07e <_dtoa_r+0x8fe>
 800a0b6:	9a02      	ldr	r2, [sp, #8]
 800a0b8:	2a00      	cmp	r2, #0
 800a0ba:	db04      	blt.n	800a0c6 <_dtoa_r+0x946>
 800a0bc:	d124      	bne.n	800a108 <_dtoa_r+0x988>
 800a0be:	9a08      	ldr	r2, [sp, #32]
 800a0c0:	bb12      	cbnz	r2, 800a108 <_dtoa_r+0x988>
 800a0c2:	9a07      	ldr	r2, [sp, #28]
 800a0c4:	bb02      	cbnz	r2, 800a108 <_dtoa_r+0x988>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	ddec      	ble.n	800a0a4 <_dtoa_r+0x924>
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	9901      	ldr	r1, [sp, #4]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fa7e 	bl	800a5d0 <__lshift>
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	9001      	str	r0, [sp, #4]
 800a0d8:	f000 face 	bl	800a678 <__mcmp>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	dc03      	bgt.n	800a0e8 <_dtoa_r+0x968>
 800a0e0:	d1e0      	bne.n	800a0a4 <_dtoa_r+0x924>
 800a0e2:	f018 0f01 	tst.w	r8, #1
 800a0e6:	d0dd      	beq.n	800a0a4 <_dtoa_r+0x924>
 800a0e8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a0ec:	d1d8      	bne.n	800a0a0 <_dtoa_r+0x920>
 800a0ee:	2339      	movs	r3, #57	; 0x39
 800a0f0:	f10a 0601 	add.w	r6, sl, #1
 800a0f4:	f88a 3000 	strb.w	r3, [sl]
 800a0f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a0fc:	2b39      	cmp	r3, #57	; 0x39
 800a0fe:	f106 32ff 	add.w	r2, r6, #4294967295
 800a102:	d04c      	beq.n	800a19e <_dtoa_r+0xa1e>
 800a104:	3301      	adds	r3, #1
 800a106:	e051      	b.n	800a1ac <_dtoa_r+0xa2c>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f10a 0601 	add.w	r6, sl, #1
 800a10e:	dd05      	ble.n	800a11c <_dtoa_r+0x99c>
 800a110:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a114:	d0eb      	beq.n	800a0ee <_dtoa_r+0x96e>
 800a116:	f108 0801 	add.w	r8, r8, #1
 800a11a:	e7c5      	b.n	800a0a8 <_dtoa_r+0x928>
 800a11c:	9b04      	ldr	r3, [sp, #16]
 800a11e:	9a06      	ldr	r2, [sp, #24]
 800a120:	f806 8c01 	strb.w	r8, [r6, #-1]
 800a124:	1af3      	subs	r3, r6, r3
 800a126:	4293      	cmp	r3, r2
 800a128:	d021      	beq.n	800a16e <_dtoa_r+0x9ee>
 800a12a:	2300      	movs	r3, #0
 800a12c:	220a      	movs	r2, #10
 800a12e:	9901      	ldr	r1, [sp, #4]
 800a130:	4620      	mov	r0, r4
 800a132:	f000 f8d7 	bl	800a2e4 <__multadd>
 800a136:	45b9      	cmp	r9, r7
 800a138:	9001      	str	r0, [sp, #4]
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	f04f 020a 	mov.w	r2, #10
 800a142:	4649      	mov	r1, r9
 800a144:	4620      	mov	r0, r4
 800a146:	d105      	bne.n	800a154 <_dtoa_r+0x9d4>
 800a148:	f000 f8cc 	bl	800a2e4 <__multadd>
 800a14c:	4681      	mov	r9, r0
 800a14e:	4607      	mov	r7, r0
 800a150:	46b2      	mov	sl, r6
 800a152:	e779      	b.n	800a048 <_dtoa_r+0x8c8>
 800a154:	f000 f8c6 	bl	800a2e4 <__multadd>
 800a158:	4639      	mov	r1, r7
 800a15a:	4681      	mov	r9, r0
 800a15c:	2300      	movs	r3, #0
 800a15e:	220a      	movs	r2, #10
 800a160:	4620      	mov	r0, r4
 800a162:	f000 f8bf 	bl	800a2e4 <__multadd>
 800a166:	4607      	mov	r7, r0
 800a168:	e7f2      	b.n	800a150 <_dtoa_r+0x9d0>
 800a16a:	f04f 0900 	mov.w	r9, #0
 800a16e:	2201      	movs	r2, #1
 800a170:	9901      	ldr	r1, [sp, #4]
 800a172:	4620      	mov	r0, r4
 800a174:	f000 fa2c 	bl	800a5d0 <__lshift>
 800a178:	4629      	mov	r1, r5
 800a17a:	9001      	str	r0, [sp, #4]
 800a17c:	f000 fa7c 	bl	800a678 <__mcmp>
 800a180:	2800      	cmp	r0, #0
 800a182:	dcb9      	bgt.n	800a0f8 <_dtoa_r+0x978>
 800a184:	d102      	bne.n	800a18c <_dtoa_r+0xa0c>
 800a186:	f018 0f01 	tst.w	r8, #1
 800a18a:	d1b5      	bne.n	800a0f8 <_dtoa_r+0x978>
 800a18c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a190:	2b30      	cmp	r3, #48	; 0x30
 800a192:	f106 32ff 	add.w	r2, r6, #4294967295
 800a196:	f47f af11 	bne.w	8009fbc <_dtoa_r+0x83c>
 800a19a:	4616      	mov	r6, r2
 800a19c:	e7f6      	b.n	800a18c <_dtoa_r+0xa0c>
 800a19e:	9b04      	ldr	r3, [sp, #16]
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d105      	bne.n	800a1b0 <_dtoa_r+0xa30>
 800a1a4:	9a04      	ldr	r2, [sp, #16]
 800a1a6:	f10b 0b01 	add.w	fp, fp, #1
 800a1aa:	2331      	movs	r3, #49	; 0x31
 800a1ac:	7013      	strb	r3, [r2, #0]
 800a1ae:	e705      	b.n	8009fbc <_dtoa_r+0x83c>
 800a1b0:	4616      	mov	r6, r2
 800a1b2:	e7a1      	b.n	800a0f8 <_dtoa_r+0x978>
 800a1b4:	4b16      	ldr	r3, [pc, #88]	; (800a210 <_dtoa_r+0xa90>)
 800a1b6:	f7ff bb48 	b.w	800984a <_dtoa_r+0xca>
 800a1ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f47f ab23 	bne.w	8009808 <_dtoa_r+0x88>
 800a1c2:	4b14      	ldr	r3, [pc, #80]	; (800a214 <_dtoa_r+0xa94>)
 800a1c4:	f7ff bb41 	b.w	800984a <_dtoa_r+0xca>
 800a1c8:	9b08      	ldr	r3, [sp, #32]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	f77f ae3b 	ble.w	8009e46 <_dtoa_r+0x6c6>
 800a1d0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a1d4:	e64f      	b.n	8009e76 <_dtoa_r+0x6f6>
 800a1d6:	9b06      	ldr	r3, [sp, #24]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	dc03      	bgt.n	800a1e4 <_dtoa_r+0xa64>
 800a1dc:	9b08      	ldr	r3, [sp, #32]
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	f73f aed7 	bgt.w	8009f92 <_dtoa_r+0x812>
 800a1e4:	9e04      	ldr	r6, [sp, #16]
 800a1e6:	9801      	ldr	r0, [sp, #4]
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7ff fa3d 	bl	8009668 <quorem>
 800a1ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a1f2:	f806 8b01 	strb.w	r8, [r6], #1
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	9a06      	ldr	r2, [sp, #24]
 800a1fa:	1af3      	subs	r3, r6, r3
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	ddb4      	ble.n	800a16a <_dtoa_r+0x9ea>
 800a200:	2300      	movs	r3, #0
 800a202:	220a      	movs	r2, #10
 800a204:	9901      	ldr	r1, [sp, #4]
 800a206:	4620      	mov	r0, r4
 800a208:	f000 f86c 	bl	800a2e4 <__multadd>
 800a20c:	9001      	str	r0, [sp, #4]
 800a20e:	e7ea      	b.n	800a1e6 <_dtoa_r+0xa66>
 800a210:	0800dbb8 	.word	0x0800dbb8
 800a214:	0800dbdc 	.word	0x0800dbdc

0800a218 <_localeconv_r>:
 800a218:	4b04      	ldr	r3, [pc, #16]	; (800a22c <_localeconv_r+0x14>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6a18      	ldr	r0, [r3, #32]
 800a21e:	4b04      	ldr	r3, [pc, #16]	; (800a230 <_localeconv_r+0x18>)
 800a220:	2800      	cmp	r0, #0
 800a222:	bf08      	it	eq
 800a224:	4618      	moveq	r0, r3
 800a226:	30f0      	adds	r0, #240	; 0xf0
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	20000014 	.word	0x20000014
 800a230:	20000078 	.word	0x20000078

0800a234 <memcpy>:
 800a234:	b510      	push	{r4, lr}
 800a236:	1e43      	subs	r3, r0, #1
 800a238:	440a      	add	r2, r1
 800a23a:	4291      	cmp	r1, r2
 800a23c:	d100      	bne.n	800a240 <memcpy+0xc>
 800a23e:	bd10      	pop	{r4, pc}
 800a240:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a244:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a248:	e7f7      	b.n	800a23a <memcpy+0x6>

0800a24a <__malloc_lock>:
 800a24a:	4770      	bx	lr

0800a24c <__malloc_unlock>:
 800a24c:	4770      	bx	lr

0800a24e <_Balloc>:
 800a24e:	b570      	push	{r4, r5, r6, lr}
 800a250:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a252:	4604      	mov	r4, r0
 800a254:	460e      	mov	r6, r1
 800a256:	b93d      	cbnz	r5, 800a268 <_Balloc+0x1a>
 800a258:	2010      	movs	r0, #16
 800a25a:	f7fe fcd9 	bl	8008c10 <malloc>
 800a25e:	6260      	str	r0, [r4, #36]	; 0x24
 800a260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a264:	6005      	str	r5, [r0, #0]
 800a266:	60c5      	str	r5, [r0, #12]
 800a268:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a26a:	68eb      	ldr	r3, [r5, #12]
 800a26c:	b183      	cbz	r3, 800a290 <_Balloc+0x42>
 800a26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a276:	b9b8      	cbnz	r0, 800a2a8 <_Balloc+0x5a>
 800a278:	2101      	movs	r1, #1
 800a27a:	fa01 f506 	lsl.w	r5, r1, r6
 800a27e:	1d6a      	adds	r2, r5, #5
 800a280:	0092      	lsls	r2, r2, #2
 800a282:	4620      	mov	r0, r4
 800a284:	f000 fabe 	bl	800a804 <_calloc_r>
 800a288:	b160      	cbz	r0, 800a2a4 <_Balloc+0x56>
 800a28a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a28e:	e00e      	b.n	800a2ae <_Balloc+0x60>
 800a290:	2221      	movs	r2, #33	; 0x21
 800a292:	2104      	movs	r1, #4
 800a294:	4620      	mov	r0, r4
 800a296:	f000 fab5 	bl	800a804 <_calloc_r>
 800a29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29c:	60e8      	str	r0, [r5, #12]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e4      	bne.n	800a26e <_Balloc+0x20>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	6802      	ldr	r2, [r0, #0]
 800a2aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2b4:	e7f7      	b.n	800a2a6 <_Balloc+0x58>

0800a2b6 <_Bfree>:
 800a2b6:	b570      	push	{r4, r5, r6, lr}
 800a2b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460d      	mov	r5, r1
 800a2be:	b93c      	cbnz	r4, 800a2d0 <_Bfree+0x1a>
 800a2c0:	2010      	movs	r0, #16
 800a2c2:	f7fe fca5 	bl	8008c10 <malloc>
 800a2c6:	6270      	str	r0, [r6, #36]	; 0x24
 800a2c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2cc:	6004      	str	r4, [r0, #0]
 800a2ce:	60c4      	str	r4, [r0, #12]
 800a2d0:	b13d      	cbz	r5, 800a2e2 <_Bfree+0x2c>
 800a2d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2d4:	686a      	ldr	r2, [r5, #4]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2dc:	6029      	str	r1, [r5, #0]
 800a2de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}

0800a2e4 <__multadd>:
 800a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e8:	690d      	ldr	r5, [r1, #16]
 800a2ea:	461f      	mov	r7, r3
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	f101 0c14 	add.w	ip, r1, #20
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f8dc 0000 	ldr.w	r0, [ip]
 800a2fa:	b281      	uxth	r1, r0
 800a2fc:	fb02 7101 	mla	r1, r2, r1, r7
 800a300:	0c0f      	lsrs	r7, r1, #16
 800a302:	0c00      	lsrs	r0, r0, #16
 800a304:	fb02 7000 	mla	r0, r2, r0, r7
 800a308:	b289      	uxth	r1, r1
 800a30a:	3301      	adds	r3, #1
 800a30c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a310:	429d      	cmp	r5, r3
 800a312:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a316:	f84c 1b04 	str.w	r1, [ip], #4
 800a31a:	dcec      	bgt.n	800a2f6 <__multadd+0x12>
 800a31c:	b1d7      	cbz	r7, 800a354 <__multadd+0x70>
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	42ab      	cmp	r3, r5
 800a322:	dc12      	bgt.n	800a34a <__multadd+0x66>
 800a324:	6861      	ldr	r1, [r4, #4]
 800a326:	4630      	mov	r0, r6
 800a328:	3101      	adds	r1, #1
 800a32a:	f7ff ff90 	bl	800a24e <_Balloc>
 800a32e:	6922      	ldr	r2, [r4, #16]
 800a330:	3202      	adds	r2, #2
 800a332:	f104 010c 	add.w	r1, r4, #12
 800a336:	4680      	mov	r8, r0
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	300c      	adds	r0, #12
 800a33c:	f7ff ff7a 	bl	800a234 <memcpy>
 800a340:	4621      	mov	r1, r4
 800a342:	4630      	mov	r0, r6
 800a344:	f7ff ffb7 	bl	800a2b6 <_Bfree>
 800a348:	4644      	mov	r4, r8
 800a34a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a34e:	3501      	adds	r5, #1
 800a350:	615f      	str	r7, [r3, #20]
 800a352:	6125      	str	r5, [r4, #16]
 800a354:	4620      	mov	r0, r4
 800a356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a35a <__hi0bits>:
 800a35a:	0c02      	lsrs	r2, r0, #16
 800a35c:	0412      	lsls	r2, r2, #16
 800a35e:	4603      	mov	r3, r0
 800a360:	b9b2      	cbnz	r2, 800a390 <__hi0bits+0x36>
 800a362:	0403      	lsls	r3, r0, #16
 800a364:	2010      	movs	r0, #16
 800a366:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a36a:	bf04      	itt	eq
 800a36c:	021b      	lsleq	r3, r3, #8
 800a36e:	3008      	addeq	r0, #8
 800a370:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a374:	bf04      	itt	eq
 800a376:	011b      	lsleq	r3, r3, #4
 800a378:	3004      	addeq	r0, #4
 800a37a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a37e:	bf04      	itt	eq
 800a380:	009b      	lsleq	r3, r3, #2
 800a382:	3002      	addeq	r0, #2
 800a384:	2b00      	cmp	r3, #0
 800a386:	db06      	blt.n	800a396 <__hi0bits+0x3c>
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	d503      	bpl.n	800a394 <__hi0bits+0x3a>
 800a38c:	3001      	adds	r0, #1
 800a38e:	4770      	bx	lr
 800a390:	2000      	movs	r0, #0
 800a392:	e7e8      	b.n	800a366 <__hi0bits+0xc>
 800a394:	2020      	movs	r0, #32
 800a396:	4770      	bx	lr

0800a398 <__lo0bits>:
 800a398:	6803      	ldr	r3, [r0, #0]
 800a39a:	f013 0207 	ands.w	r2, r3, #7
 800a39e:	4601      	mov	r1, r0
 800a3a0:	d00b      	beq.n	800a3ba <__lo0bits+0x22>
 800a3a2:	07da      	lsls	r2, r3, #31
 800a3a4:	d423      	bmi.n	800a3ee <__lo0bits+0x56>
 800a3a6:	0798      	lsls	r0, r3, #30
 800a3a8:	bf49      	itett	mi
 800a3aa:	085b      	lsrmi	r3, r3, #1
 800a3ac:	089b      	lsrpl	r3, r3, #2
 800a3ae:	2001      	movmi	r0, #1
 800a3b0:	600b      	strmi	r3, [r1, #0]
 800a3b2:	bf5c      	itt	pl
 800a3b4:	600b      	strpl	r3, [r1, #0]
 800a3b6:	2002      	movpl	r0, #2
 800a3b8:	4770      	bx	lr
 800a3ba:	b298      	uxth	r0, r3
 800a3bc:	b9a8      	cbnz	r0, 800a3ea <__lo0bits+0x52>
 800a3be:	0c1b      	lsrs	r3, r3, #16
 800a3c0:	2010      	movs	r0, #16
 800a3c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a3c6:	bf04      	itt	eq
 800a3c8:	0a1b      	lsreq	r3, r3, #8
 800a3ca:	3008      	addeq	r0, #8
 800a3cc:	071a      	lsls	r2, r3, #28
 800a3ce:	bf04      	itt	eq
 800a3d0:	091b      	lsreq	r3, r3, #4
 800a3d2:	3004      	addeq	r0, #4
 800a3d4:	079a      	lsls	r2, r3, #30
 800a3d6:	bf04      	itt	eq
 800a3d8:	089b      	lsreq	r3, r3, #2
 800a3da:	3002      	addeq	r0, #2
 800a3dc:	07da      	lsls	r2, r3, #31
 800a3de:	d402      	bmi.n	800a3e6 <__lo0bits+0x4e>
 800a3e0:	085b      	lsrs	r3, r3, #1
 800a3e2:	d006      	beq.n	800a3f2 <__lo0bits+0x5a>
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	600b      	str	r3, [r1, #0]
 800a3e8:	4770      	bx	lr
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	e7e9      	b.n	800a3c2 <__lo0bits+0x2a>
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	4770      	bx	lr
 800a3f2:	2020      	movs	r0, #32
 800a3f4:	4770      	bx	lr

0800a3f6 <__i2b>:
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	f7ff ff27 	bl	800a24e <_Balloc>
 800a400:	2201      	movs	r2, #1
 800a402:	6144      	str	r4, [r0, #20]
 800a404:	6102      	str	r2, [r0, #16]
 800a406:	bd10      	pop	{r4, pc}

0800a408 <__multiply>:
 800a408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	4614      	mov	r4, r2
 800a40e:	690a      	ldr	r2, [r1, #16]
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	429a      	cmp	r2, r3
 800a414:	bfb8      	it	lt
 800a416:	460b      	movlt	r3, r1
 800a418:	4688      	mov	r8, r1
 800a41a:	bfbc      	itt	lt
 800a41c:	46a0      	movlt	r8, r4
 800a41e:	461c      	movlt	r4, r3
 800a420:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a424:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a428:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a42c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a430:	eb07 0609 	add.w	r6, r7, r9
 800a434:	42b3      	cmp	r3, r6
 800a436:	bfb8      	it	lt
 800a438:	3101      	addlt	r1, #1
 800a43a:	f7ff ff08 	bl	800a24e <_Balloc>
 800a43e:	f100 0514 	add.w	r5, r0, #20
 800a442:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a446:	462b      	mov	r3, r5
 800a448:	2200      	movs	r2, #0
 800a44a:	4573      	cmp	r3, lr
 800a44c:	d316      	bcc.n	800a47c <__multiply+0x74>
 800a44e:	f104 0214 	add.w	r2, r4, #20
 800a452:	f108 0114 	add.w	r1, r8, #20
 800a456:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a45a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	9b00      	ldr	r3, [sp, #0]
 800a462:	9201      	str	r2, [sp, #4]
 800a464:	4293      	cmp	r3, r2
 800a466:	d80c      	bhi.n	800a482 <__multiply+0x7a>
 800a468:	2e00      	cmp	r6, #0
 800a46a:	dd03      	ble.n	800a474 <__multiply+0x6c>
 800a46c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a470:	2b00      	cmp	r3, #0
 800a472:	d05d      	beq.n	800a530 <__multiply+0x128>
 800a474:	6106      	str	r6, [r0, #16]
 800a476:	b003      	add	sp, #12
 800a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47c:	f843 2b04 	str.w	r2, [r3], #4
 800a480:	e7e3      	b.n	800a44a <__multiply+0x42>
 800a482:	f8b2 b000 	ldrh.w	fp, [r2]
 800a486:	f1bb 0f00 	cmp.w	fp, #0
 800a48a:	d023      	beq.n	800a4d4 <__multiply+0xcc>
 800a48c:	4689      	mov	r9, r1
 800a48e:	46ac      	mov	ip, r5
 800a490:	f04f 0800 	mov.w	r8, #0
 800a494:	f859 4b04 	ldr.w	r4, [r9], #4
 800a498:	f8dc a000 	ldr.w	sl, [ip]
 800a49c:	b2a3      	uxth	r3, r4
 800a49e:	fa1f fa8a 	uxth.w	sl, sl
 800a4a2:	fb0b a303 	mla	r3, fp, r3, sl
 800a4a6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a4aa:	f8dc 4000 	ldr.w	r4, [ip]
 800a4ae:	4443      	add	r3, r8
 800a4b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a4b4:	fb0b 840a 	mla	r4, fp, sl, r8
 800a4b8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a4bc:	46e2      	mov	sl, ip
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4c4:	454f      	cmp	r7, r9
 800a4c6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a4ca:	f84a 3b04 	str.w	r3, [sl], #4
 800a4ce:	d82b      	bhi.n	800a528 <__multiply+0x120>
 800a4d0:	f8cc 8004 	str.w	r8, [ip, #4]
 800a4d4:	9b01      	ldr	r3, [sp, #4]
 800a4d6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a4da:	3204      	adds	r2, #4
 800a4dc:	f1ba 0f00 	cmp.w	sl, #0
 800a4e0:	d020      	beq.n	800a524 <__multiply+0x11c>
 800a4e2:	682b      	ldr	r3, [r5, #0]
 800a4e4:	4689      	mov	r9, r1
 800a4e6:	46a8      	mov	r8, r5
 800a4e8:	f04f 0b00 	mov.w	fp, #0
 800a4ec:	f8b9 c000 	ldrh.w	ip, [r9]
 800a4f0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a4f4:	fb0a 440c 	mla	r4, sl, ip, r4
 800a4f8:	445c      	add	r4, fp
 800a4fa:	46c4      	mov	ip, r8
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a502:	f84c 3b04 	str.w	r3, [ip], #4
 800a506:	f859 3b04 	ldr.w	r3, [r9], #4
 800a50a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a50e:	0c1b      	lsrs	r3, r3, #16
 800a510:	fb0a b303 	mla	r3, sl, r3, fp
 800a514:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a518:	454f      	cmp	r7, r9
 800a51a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a51e:	d805      	bhi.n	800a52c <__multiply+0x124>
 800a520:	f8c8 3004 	str.w	r3, [r8, #4]
 800a524:	3504      	adds	r5, #4
 800a526:	e79b      	b.n	800a460 <__multiply+0x58>
 800a528:	46d4      	mov	ip, sl
 800a52a:	e7b3      	b.n	800a494 <__multiply+0x8c>
 800a52c:	46e0      	mov	r8, ip
 800a52e:	e7dd      	b.n	800a4ec <__multiply+0xe4>
 800a530:	3e01      	subs	r6, #1
 800a532:	e799      	b.n	800a468 <__multiply+0x60>

0800a534 <__pow5mult>:
 800a534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a538:	4615      	mov	r5, r2
 800a53a:	f012 0203 	ands.w	r2, r2, #3
 800a53e:	4606      	mov	r6, r0
 800a540:	460f      	mov	r7, r1
 800a542:	d007      	beq.n	800a554 <__pow5mult+0x20>
 800a544:	3a01      	subs	r2, #1
 800a546:	4c21      	ldr	r4, [pc, #132]	; (800a5cc <__pow5mult+0x98>)
 800a548:	2300      	movs	r3, #0
 800a54a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a54e:	f7ff fec9 	bl	800a2e4 <__multadd>
 800a552:	4607      	mov	r7, r0
 800a554:	10ad      	asrs	r5, r5, #2
 800a556:	d035      	beq.n	800a5c4 <__pow5mult+0x90>
 800a558:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a55a:	b93c      	cbnz	r4, 800a56c <__pow5mult+0x38>
 800a55c:	2010      	movs	r0, #16
 800a55e:	f7fe fb57 	bl	8008c10 <malloc>
 800a562:	6270      	str	r0, [r6, #36]	; 0x24
 800a564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a568:	6004      	str	r4, [r0, #0]
 800a56a:	60c4      	str	r4, [r0, #12]
 800a56c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a574:	b94c      	cbnz	r4, 800a58a <__pow5mult+0x56>
 800a576:	f240 2171 	movw	r1, #625	; 0x271
 800a57a:	4630      	mov	r0, r6
 800a57c:	f7ff ff3b 	bl	800a3f6 <__i2b>
 800a580:	2300      	movs	r3, #0
 800a582:	f8c8 0008 	str.w	r0, [r8, #8]
 800a586:	4604      	mov	r4, r0
 800a588:	6003      	str	r3, [r0, #0]
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	07eb      	lsls	r3, r5, #31
 800a590:	d50a      	bpl.n	800a5a8 <__pow5mult+0x74>
 800a592:	4639      	mov	r1, r7
 800a594:	4622      	mov	r2, r4
 800a596:	4630      	mov	r0, r6
 800a598:	f7ff ff36 	bl	800a408 <__multiply>
 800a59c:	4639      	mov	r1, r7
 800a59e:	4681      	mov	r9, r0
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f7ff fe88 	bl	800a2b6 <_Bfree>
 800a5a6:	464f      	mov	r7, r9
 800a5a8:	106d      	asrs	r5, r5, #1
 800a5aa:	d00b      	beq.n	800a5c4 <__pow5mult+0x90>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	b938      	cbnz	r0, 800a5c0 <__pow5mult+0x8c>
 800a5b0:	4622      	mov	r2, r4
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f7ff ff27 	bl	800a408 <__multiply>
 800a5ba:	6020      	str	r0, [r4, #0]
 800a5bc:	f8c0 8000 	str.w	r8, [r0]
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	e7e4      	b.n	800a58e <__pow5mult+0x5a>
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ca:	bf00      	nop
 800a5cc:	0800dce0 	.word	0x0800dce0

0800a5d0 <__lshift>:
 800a5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5da:	6923      	ldr	r3, [r4, #16]
 800a5dc:	6849      	ldr	r1, [r1, #4]
 800a5de:	eb0a 0903 	add.w	r9, sl, r3
 800a5e2:	68a3      	ldr	r3, [r4, #8]
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	4616      	mov	r6, r2
 800a5e8:	f109 0501 	add.w	r5, r9, #1
 800a5ec:	42ab      	cmp	r3, r5
 800a5ee:	db32      	blt.n	800a656 <__lshift+0x86>
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7ff fe2c 	bl	800a24e <_Balloc>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	f100 0114 	add.w	r1, r0, #20
 800a5fe:	461a      	mov	r2, r3
 800a600:	4553      	cmp	r3, sl
 800a602:	db2b      	blt.n	800a65c <__lshift+0x8c>
 800a604:	6920      	ldr	r0, [r4, #16]
 800a606:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a60a:	f104 0314 	add.w	r3, r4, #20
 800a60e:	f016 021f 	ands.w	r2, r6, #31
 800a612:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a616:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a61a:	d025      	beq.n	800a668 <__lshift+0x98>
 800a61c:	f1c2 0e20 	rsb	lr, r2, #32
 800a620:	2000      	movs	r0, #0
 800a622:	681e      	ldr	r6, [r3, #0]
 800a624:	468a      	mov	sl, r1
 800a626:	4096      	lsls	r6, r2
 800a628:	4330      	orrs	r0, r6
 800a62a:	f84a 0b04 	str.w	r0, [sl], #4
 800a62e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a632:	459c      	cmp	ip, r3
 800a634:	fa20 f00e 	lsr.w	r0, r0, lr
 800a638:	d814      	bhi.n	800a664 <__lshift+0x94>
 800a63a:	6048      	str	r0, [r1, #4]
 800a63c:	b108      	cbz	r0, 800a642 <__lshift+0x72>
 800a63e:	f109 0502 	add.w	r5, r9, #2
 800a642:	3d01      	subs	r5, #1
 800a644:	4638      	mov	r0, r7
 800a646:	f8c8 5010 	str.w	r5, [r8, #16]
 800a64a:	4621      	mov	r1, r4
 800a64c:	f7ff fe33 	bl	800a2b6 <_Bfree>
 800a650:	4640      	mov	r0, r8
 800a652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a656:	3101      	adds	r1, #1
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	e7c7      	b.n	800a5ec <__lshift+0x1c>
 800a65c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a660:	3301      	adds	r3, #1
 800a662:	e7cd      	b.n	800a600 <__lshift+0x30>
 800a664:	4651      	mov	r1, sl
 800a666:	e7dc      	b.n	800a622 <__lshift+0x52>
 800a668:	3904      	subs	r1, #4
 800a66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a672:	459c      	cmp	ip, r3
 800a674:	d8f9      	bhi.n	800a66a <__lshift+0x9a>
 800a676:	e7e4      	b.n	800a642 <__lshift+0x72>

0800a678 <__mcmp>:
 800a678:	6903      	ldr	r3, [r0, #16]
 800a67a:	690a      	ldr	r2, [r1, #16]
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	b530      	push	{r4, r5, lr}
 800a680:	d10c      	bne.n	800a69c <__mcmp+0x24>
 800a682:	0092      	lsls	r2, r2, #2
 800a684:	3014      	adds	r0, #20
 800a686:	3114      	adds	r1, #20
 800a688:	1884      	adds	r4, r0, r2
 800a68a:	4411      	add	r1, r2
 800a68c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a690:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a694:	4295      	cmp	r5, r2
 800a696:	d003      	beq.n	800a6a0 <__mcmp+0x28>
 800a698:	d305      	bcc.n	800a6a6 <__mcmp+0x2e>
 800a69a:	2301      	movs	r3, #1
 800a69c:	4618      	mov	r0, r3
 800a69e:	bd30      	pop	{r4, r5, pc}
 800a6a0:	42a0      	cmp	r0, r4
 800a6a2:	d3f3      	bcc.n	800a68c <__mcmp+0x14>
 800a6a4:	e7fa      	b.n	800a69c <__mcmp+0x24>
 800a6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6aa:	e7f7      	b.n	800a69c <__mcmp+0x24>

0800a6ac <__mdiff>:
 800a6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	4607      	mov	r7, r0
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	4614      	mov	r4, r2
 800a6ba:	f7ff ffdd 	bl	800a678 <__mcmp>
 800a6be:	1e06      	subs	r6, r0, #0
 800a6c0:	d108      	bne.n	800a6d4 <__mdiff+0x28>
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4638      	mov	r0, r7
 800a6c6:	f7ff fdc2 	bl	800a24e <_Balloc>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d4:	bfa4      	itt	ge
 800a6d6:	4623      	movge	r3, r4
 800a6d8:	462c      	movge	r4, r5
 800a6da:	4638      	mov	r0, r7
 800a6dc:	6861      	ldr	r1, [r4, #4]
 800a6de:	bfa6      	itte	ge
 800a6e0:	461d      	movge	r5, r3
 800a6e2:	2600      	movge	r6, #0
 800a6e4:	2601      	movlt	r6, #1
 800a6e6:	f7ff fdb2 	bl	800a24e <_Balloc>
 800a6ea:	692b      	ldr	r3, [r5, #16]
 800a6ec:	60c6      	str	r6, [r0, #12]
 800a6ee:	6926      	ldr	r6, [r4, #16]
 800a6f0:	f105 0914 	add.w	r9, r5, #20
 800a6f4:	f104 0214 	add.w	r2, r4, #20
 800a6f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a6fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a700:	f100 0514 	add.w	r5, r0, #20
 800a704:	f04f 0e00 	mov.w	lr, #0
 800a708:	f852 ab04 	ldr.w	sl, [r2], #4
 800a70c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a710:	fa1e f18a 	uxtah	r1, lr, sl
 800a714:	b2a3      	uxth	r3, r4
 800a716:	1ac9      	subs	r1, r1, r3
 800a718:	0c23      	lsrs	r3, r4, #16
 800a71a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a71e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a722:	b289      	uxth	r1, r1
 800a724:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a728:	45c8      	cmp	r8, r9
 800a72a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a72e:	4694      	mov	ip, r2
 800a730:	f845 3b04 	str.w	r3, [r5], #4
 800a734:	d8e8      	bhi.n	800a708 <__mdiff+0x5c>
 800a736:	45bc      	cmp	ip, r7
 800a738:	d304      	bcc.n	800a744 <__mdiff+0x98>
 800a73a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a73e:	b183      	cbz	r3, 800a762 <__mdiff+0xb6>
 800a740:	6106      	str	r6, [r0, #16]
 800a742:	e7c5      	b.n	800a6d0 <__mdiff+0x24>
 800a744:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a748:	fa1e f381 	uxtah	r3, lr, r1
 800a74c:	141a      	asrs	r2, r3, #16
 800a74e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a752:	b29b      	uxth	r3, r3
 800a754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a758:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a75c:	f845 3b04 	str.w	r3, [r5], #4
 800a760:	e7e9      	b.n	800a736 <__mdiff+0x8a>
 800a762:	3e01      	subs	r6, #1
 800a764:	e7e9      	b.n	800a73a <__mdiff+0x8e>

0800a766 <__d2b>:
 800a766:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a76a:	460e      	mov	r6, r1
 800a76c:	2101      	movs	r1, #1
 800a76e:	ec59 8b10 	vmov	r8, r9, d0
 800a772:	4615      	mov	r5, r2
 800a774:	f7ff fd6b 	bl	800a24e <_Balloc>
 800a778:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a77c:	4607      	mov	r7, r0
 800a77e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a782:	bb34      	cbnz	r4, 800a7d2 <__d2b+0x6c>
 800a784:	9301      	str	r3, [sp, #4]
 800a786:	f1b8 0300 	subs.w	r3, r8, #0
 800a78a:	d027      	beq.n	800a7dc <__d2b+0x76>
 800a78c:	a802      	add	r0, sp, #8
 800a78e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a792:	f7ff fe01 	bl	800a398 <__lo0bits>
 800a796:	9900      	ldr	r1, [sp, #0]
 800a798:	b1f0      	cbz	r0, 800a7d8 <__d2b+0x72>
 800a79a:	9a01      	ldr	r2, [sp, #4]
 800a79c:	f1c0 0320 	rsb	r3, r0, #32
 800a7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a4:	430b      	orrs	r3, r1
 800a7a6:	40c2      	lsrs	r2, r0
 800a7a8:	617b      	str	r3, [r7, #20]
 800a7aa:	9201      	str	r2, [sp, #4]
 800a7ac:	9b01      	ldr	r3, [sp, #4]
 800a7ae:	61bb      	str	r3, [r7, #24]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bf14      	ite	ne
 800a7b4:	2102      	movne	r1, #2
 800a7b6:	2101      	moveq	r1, #1
 800a7b8:	6139      	str	r1, [r7, #16]
 800a7ba:	b1c4      	cbz	r4, 800a7ee <__d2b+0x88>
 800a7bc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a7c0:	4404      	add	r4, r0
 800a7c2:	6034      	str	r4, [r6, #0]
 800a7c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7c8:	6028      	str	r0, [r5, #0]
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	b003      	add	sp, #12
 800a7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7d6:	e7d5      	b.n	800a784 <__d2b+0x1e>
 800a7d8:	6179      	str	r1, [r7, #20]
 800a7da:	e7e7      	b.n	800a7ac <__d2b+0x46>
 800a7dc:	a801      	add	r0, sp, #4
 800a7de:	f7ff fddb 	bl	800a398 <__lo0bits>
 800a7e2:	9b01      	ldr	r3, [sp, #4]
 800a7e4:	617b      	str	r3, [r7, #20]
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	6139      	str	r1, [r7, #16]
 800a7ea:	3020      	adds	r0, #32
 800a7ec:	e7e5      	b.n	800a7ba <__d2b+0x54>
 800a7ee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a7f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7f6:	6030      	str	r0, [r6, #0]
 800a7f8:	6918      	ldr	r0, [r3, #16]
 800a7fa:	f7ff fdae 	bl	800a35a <__hi0bits>
 800a7fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a802:	e7e1      	b.n	800a7c8 <__d2b+0x62>

0800a804 <_calloc_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	fb02 f401 	mul.w	r4, r2, r1
 800a80a:	4621      	mov	r1, r4
 800a80c:	f7fe fa66 	bl	8008cdc <_malloc_r>
 800a810:	4605      	mov	r5, r0
 800a812:	b118      	cbz	r0, 800a81c <_calloc_r+0x18>
 800a814:	4622      	mov	r2, r4
 800a816:	2100      	movs	r1, #0
 800a818:	f7fe fa0a 	bl	8008c30 <memset>
 800a81c:	4628      	mov	r0, r5
 800a81e:	bd38      	pop	{r3, r4, r5, pc}

0800a820 <__ssputs_r>:
 800a820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a824:	688e      	ldr	r6, [r1, #8]
 800a826:	429e      	cmp	r6, r3
 800a828:	4682      	mov	sl, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	4690      	mov	r8, r2
 800a82e:	4699      	mov	r9, r3
 800a830:	d837      	bhi.n	800a8a2 <__ssputs_r+0x82>
 800a832:	898a      	ldrh	r2, [r1, #12]
 800a834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a838:	d031      	beq.n	800a89e <__ssputs_r+0x7e>
 800a83a:	6825      	ldr	r5, [r4, #0]
 800a83c:	6909      	ldr	r1, [r1, #16]
 800a83e:	1a6f      	subs	r7, r5, r1
 800a840:	6965      	ldr	r5, [r4, #20]
 800a842:	2302      	movs	r3, #2
 800a844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a848:	fb95 f5f3 	sdiv	r5, r5, r3
 800a84c:	f109 0301 	add.w	r3, r9, #1
 800a850:	443b      	add	r3, r7
 800a852:	429d      	cmp	r5, r3
 800a854:	bf38      	it	cc
 800a856:	461d      	movcc	r5, r3
 800a858:	0553      	lsls	r3, r2, #21
 800a85a:	d530      	bpl.n	800a8be <__ssputs_r+0x9e>
 800a85c:	4629      	mov	r1, r5
 800a85e:	f7fe fa3d 	bl	8008cdc <_malloc_r>
 800a862:	4606      	mov	r6, r0
 800a864:	b950      	cbnz	r0, 800a87c <__ssputs_r+0x5c>
 800a866:	230c      	movs	r3, #12
 800a868:	f8ca 3000 	str.w	r3, [sl]
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a872:	81a3      	strh	r3, [r4, #12]
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87c:	463a      	mov	r2, r7
 800a87e:	6921      	ldr	r1, [r4, #16]
 800a880:	f7ff fcd8 	bl	800a234 <memcpy>
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88e:	81a3      	strh	r3, [r4, #12]
 800a890:	6126      	str	r6, [r4, #16]
 800a892:	6165      	str	r5, [r4, #20]
 800a894:	443e      	add	r6, r7
 800a896:	1bed      	subs	r5, r5, r7
 800a898:	6026      	str	r6, [r4, #0]
 800a89a:	60a5      	str	r5, [r4, #8]
 800a89c:	464e      	mov	r6, r9
 800a89e:	454e      	cmp	r6, r9
 800a8a0:	d900      	bls.n	800a8a4 <__ssputs_r+0x84>
 800a8a2:	464e      	mov	r6, r9
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	6820      	ldr	r0, [r4, #0]
 800a8aa:	f000 f91d 	bl	800aae8 <memmove>
 800a8ae:	68a3      	ldr	r3, [r4, #8]
 800a8b0:	1b9b      	subs	r3, r3, r6
 800a8b2:	60a3      	str	r3, [r4, #8]
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	441e      	add	r6, r3
 800a8b8:	6026      	str	r6, [r4, #0]
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	e7dc      	b.n	800a878 <__ssputs_r+0x58>
 800a8be:	462a      	mov	r2, r5
 800a8c0:	f000 f92b 	bl	800ab1a <_realloc_r>
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d1e2      	bne.n	800a890 <__ssputs_r+0x70>
 800a8ca:	6921      	ldr	r1, [r4, #16]
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	f7fe f9b7 	bl	8008c40 <_free_r>
 800a8d2:	e7c8      	b.n	800a866 <__ssputs_r+0x46>

0800a8d4 <_svfiprintf_r>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	461d      	mov	r5, r3
 800a8da:	898b      	ldrh	r3, [r1, #12]
 800a8dc:	061f      	lsls	r7, r3, #24
 800a8de:	b09d      	sub	sp, #116	; 0x74
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	4616      	mov	r6, r2
 800a8e6:	d50f      	bpl.n	800a908 <_svfiprintf_r+0x34>
 800a8e8:	690b      	ldr	r3, [r1, #16]
 800a8ea:	b96b      	cbnz	r3, 800a908 <_svfiprintf_r+0x34>
 800a8ec:	2140      	movs	r1, #64	; 0x40
 800a8ee:	f7fe f9f5 	bl	8008cdc <_malloc_r>
 800a8f2:	6020      	str	r0, [r4, #0]
 800a8f4:	6120      	str	r0, [r4, #16]
 800a8f6:	b928      	cbnz	r0, 800a904 <_svfiprintf_r+0x30>
 800a8f8:	230c      	movs	r3, #12
 800a8fa:	f8c8 3000 	str.w	r3, [r8]
 800a8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a902:	e0c8      	b.n	800aa96 <_svfiprintf_r+0x1c2>
 800a904:	2340      	movs	r3, #64	; 0x40
 800a906:	6163      	str	r3, [r4, #20]
 800a908:	2300      	movs	r3, #0
 800a90a:	9309      	str	r3, [sp, #36]	; 0x24
 800a90c:	2320      	movs	r3, #32
 800a90e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a912:	2330      	movs	r3, #48	; 0x30
 800a914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a918:	9503      	str	r5, [sp, #12]
 800a91a:	f04f 0b01 	mov.w	fp, #1
 800a91e:	4637      	mov	r7, r6
 800a920:	463d      	mov	r5, r7
 800a922:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a926:	b10b      	cbz	r3, 800a92c <_svfiprintf_r+0x58>
 800a928:	2b25      	cmp	r3, #37	; 0x25
 800a92a:	d13e      	bne.n	800a9aa <_svfiprintf_r+0xd6>
 800a92c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a930:	d00b      	beq.n	800a94a <_svfiprintf_r+0x76>
 800a932:	4653      	mov	r3, sl
 800a934:	4632      	mov	r2, r6
 800a936:	4621      	mov	r1, r4
 800a938:	4640      	mov	r0, r8
 800a93a:	f7ff ff71 	bl	800a820 <__ssputs_r>
 800a93e:	3001      	adds	r0, #1
 800a940:	f000 80a4 	beq.w	800aa8c <_svfiprintf_r+0x1b8>
 800a944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a946:	4453      	add	r3, sl
 800a948:	9309      	str	r3, [sp, #36]	; 0x24
 800a94a:	783b      	ldrb	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f000 809d 	beq.w	800aa8c <_svfiprintf_r+0x1b8>
 800a952:	2300      	movs	r3, #0
 800a954:	f04f 32ff 	mov.w	r2, #4294967295
 800a958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a95c:	9304      	str	r3, [sp, #16]
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a964:	931a      	str	r3, [sp, #104]	; 0x68
 800a966:	462f      	mov	r7, r5
 800a968:	2205      	movs	r2, #5
 800a96a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a96e:	4850      	ldr	r0, [pc, #320]	; (800aab0 <_svfiprintf_r+0x1dc>)
 800a970:	f7f5 fd1e 	bl	80003b0 <memchr>
 800a974:	9b04      	ldr	r3, [sp, #16]
 800a976:	b9d0      	cbnz	r0, 800a9ae <_svfiprintf_r+0xda>
 800a978:	06d9      	lsls	r1, r3, #27
 800a97a:	bf44      	itt	mi
 800a97c:	2220      	movmi	r2, #32
 800a97e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a982:	071a      	lsls	r2, r3, #28
 800a984:	bf44      	itt	mi
 800a986:	222b      	movmi	r2, #43	; 0x2b
 800a988:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a98c:	782a      	ldrb	r2, [r5, #0]
 800a98e:	2a2a      	cmp	r2, #42	; 0x2a
 800a990:	d015      	beq.n	800a9be <_svfiprintf_r+0xea>
 800a992:	9a07      	ldr	r2, [sp, #28]
 800a994:	462f      	mov	r7, r5
 800a996:	2000      	movs	r0, #0
 800a998:	250a      	movs	r5, #10
 800a99a:	4639      	mov	r1, r7
 800a99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9a0:	3b30      	subs	r3, #48	; 0x30
 800a9a2:	2b09      	cmp	r3, #9
 800a9a4:	d94d      	bls.n	800aa42 <_svfiprintf_r+0x16e>
 800a9a6:	b1b8      	cbz	r0, 800a9d8 <_svfiprintf_r+0x104>
 800a9a8:	e00f      	b.n	800a9ca <_svfiprintf_r+0xf6>
 800a9aa:	462f      	mov	r7, r5
 800a9ac:	e7b8      	b.n	800a920 <_svfiprintf_r+0x4c>
 800a9ae:	4a40      	ldr	r2, [pc, #256]	; (800aab0 <_svfiprintf_r+0x1dc>)
 800a9b0:	1a80      	subs	r0, r0, r2
 800a9b2:	fa0b f000 	lsl.w	r0, fp, r0
 800a9b6:	4318      	orrs	r0, r3
 800a9b8:	9004      	str	r0, [sp, #16]
 800a9ba:	463d      	mov	r5, r7
 800a9bc:	e7d3      	b.n	800a966 <_svfiprintf_r+0x92>
 800a9be:	9a03      	ldr	r2, [sp, #12]
 800a9c0:	1d11      	adds	r1, r2, #4
 800a9c2:	6812      	ldr	r2, [r2, #0]
 800a9c4:	9103      	str	r1, [sp, #12]
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	db01      	blt.n	800a9ce <_svfiprintf_r+0xfa>
 800a9ca:	9207      	str	r2, [sp, #28]
 800a9cc:	e004      	b.n	800a9d8 <_svfiprintf_r+0x104>
 800a9ce:	4252      	negs	r2, r2
 800a9d0:	f043 0302 	orr.w	r3, r3, #2
 800a9d4:	9207      	str	r2, [sp, #28]
 800a9d6:	9304      	str	r3, [sp, #16]
 800a9d8:	783b      	ldrb	r3, [r7, #0]
 800a9da:	2b2e      	cmp	r3, #46	; 0x2e
 800a9dc:	d10c      	bne.n	800a9f8 <_svfiprintf_r+0x124>
 800a9de:	787b      	ldrb	r3, [r7, #1]
 800a9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e2:	d133      	bne.n	800aa4c <_svfiprintf_r+0x178>
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	1d1a      	adds	r2, r3, #4
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	9203      	str	r2, [sp, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfb8      	it	lt
 800a9f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9f4:	3702      	adds	r7, #2
 800a9f6:	9305      	str	r3, [sp, #20]
 800a9f8:	4d2e      	ldr	r5, [pc, #184]	; (800aab4 <_svfiprintf_r+0x1e0>)
 800a9fa:	7839      	ldrb	r1, [r7, #0]
 800a9fc:	2203      	movs	r2, #3
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f7f5 fcd6 	bl	80003b0 <memchr>
 800aa04:	b138      	cbz	r0, 800aa16 <_svfiprintf_r+0x142>
 800aa06:	2340      	movs	r3, #64	; 0x40
 800aa08:	1b40      	subs	r0, r0, r5
 800aa0a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa0e:	9b04      	ldr	r3, [sp, #16]
 800aa10:	4303      	orrs	r3, r0
 800aa12:	3701      	adds	r7, #1
 800aa14:	9304      	str	r3, [sp, #16]
 800aa16:	7839      	ldrb	r1, [r7, #0]
 800aa18:	4827      	ldr	r0, [pc, #156]	; (800aab8 <_svfiprintf_r+0x1e4>)
 800aa1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa1e:	2206      	movs	r2, #6
 800aa20:	1c7e      	adds	r6, r7, #1
 800aa22:	f7f5 fcc5 	bl	80003b0 <memchr>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d038      	beq.n	800aa9c <_svfiprintf_r+0x1c8>
 800aa2a:	4b24      	ldr	r3, [pc, #144]	; (800aabc <_svfiprintf_r+0x1e8>)
 800aa2c:	bb13      	cbnz	r3, 800aa74 <_svfiprintf_r+0x1a0>
 800aa2e:	9b03      	ldr	r3, [sp, #12]
 800aa30:	3307      	adds	r3, #7
 800aa32:	f023 0307 	bic.w	r3, r3, #7
 800aa36:	3308      	adds	r3, #8
 800aa38:	9303      	str	r3, [sp, #12]
 800aa3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3c:	444b      	add	r3, r9
 800aa3e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa40:	e76d      	b.n	800a91e <_svfiprintf_r+0x4a>
 800aa42:	fb05 3202 	mla	r2, r5, r2, r3
 800aa46:	2001      	movs	r0, #1
 800aa48:	460f      	mov	r7, r1
 800aa4a:	e7a6      	b.n	800a99a <_svfiprintf_r+0xc6>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	3701      	adds	r7, #1
 800aa50:	9305      	str	r3, [sp, #20]
 800aa52:	4619      	mov	r1, r3
 800aa54:	250a      	movs	r5, #10
 800aa56:	4638      	mov	r0, r7
 800aa58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5c:	3a30      	subs	r2, #48	; 0x30
 800aa5e:	2a09      	cmp	r2, #9
 800aa60:	d903      	bls.n	800aa6a <_svfiprintf_r+0x196>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0c8      	beq.n	800a9f8 <_svfiprintf_r+0x124>
 800aa66:	9105      	str	r1, [sp, #20]
 800aa68:	e7c6      	b.n	800a9f8 <_svfiprintf_r+0x124>
 800aa6a:	fb05 2101 	mla	r1, r5, r1, r2
 800aa6e:	2301      	movs	r3, #1
 800aa70:	4607      	mov	r7, r0
 800aa72:	e7f0      	b.n	800aa56 <_svfiprintf_r+0x182>
 800aa74:	ab03      	add	r3, sp, #12
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	4622      	mov	r2, r4
 800aa7a:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <_svfiprintf_r+0x1ec>)
 800aa7c:	a904      	add	r1, sp, #16
 800aa7e:	4640      	mov	r0, r8
 800aa80:	f7fe fa0e 	bl	8008ea0 <_printf_float>
 800aa84:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aa88:	4681      	mov	r9, r0
 800aa8a:	d1d6      	bne.n	800aa3a <_svfiprintf_r+0x166>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	065b      	lsls	r3, r3, #25
 800aa90:	f53f af35 	bmi.w	800a8fe <_svfiprintf_r+0x2a>
 800aa94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa96:	b01d      	add	sp, #116	; 0x74
 800aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9c:	ab03      	add	r3, sp, #12
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <_svfiprintf_r+0x1ec>)
 800aaa4:	a904      	add	r1, sp, #16
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	f7fe fc9c 	bl	80093e4 <_printf_i>
 800aaac:	e7ea      	b.n	800aa84 <_svfiprintf_r+0x1b0>
 800aaae:	bf00      	nop
 800aab0:	0800dcec 	.word	0x0800dcec
 800aab4:	0800dcf2 	.word	0x0800dcf2
 800aab8:	0800dcf6 	.word	0x0800dcf6
 800aabc:	08008ea1 	.word	0x08008ea1
 800aac0:	0800a821 	.word	0x0800a821

0800aac4 <__ascii_mbtowc>:
 800aac4:	b082      	sub	sp, #8
 800aac6:	b901      	cbnz	r1, 800aaca <__ascii_mbtowc+0x6>
 800aac8:	a901      	add	r1, sp, #4
 800aaca:	b142      	cbz	r2, 800aade <__ascii_mbtowc+0x1a>
 800aacc:	b14b      	cbz	r3, 800aae2 <__ascii_mbtowc+0x1e>
 800aace:	7813      	ldrb	r3, [r2, #0]
 800aad0:	600b      	str	r3, [r1, #0]
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	1c10      	adds	r0, r2, #0
 800aad6:	bf18      	it	ne
 800aad8:	2001      	movne	r0, #1
 800aada:	b002      	add	sp, #8
 800aadc:	4770      	bx	lr
 800aade:	4610      	mov	r0, r2
 800aae0:	e7fb      	b.n	800aada <__ascii_mbtowc+0x16>
 800aae2:	f06f 0001 	mvn.w	r0, #1
 800aae6:	e7f8      	b.n	800aada <__ascii_mbtowc+0x16>

0800aae8 <memmove>:
 800aae8:	4288      	cmp	r0, r1
 800aaea:	b510      	push	{r4, lr}
 800aaec:	eb01 0302 	add.w	r3, r1, r2
 800aaf0:	d807      	bhi.n	800ab02 <memmove+0x1a>
 800aaf2:	1e42      	subs	r2, r0, #1
 800aaf4:	4299      	cmp	r1, r3
 800aaf6:	d00a      	beq.n	800ab0e <memmove+0x26>
 800aaf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aafc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ab00:	e7f8      	b.n	800aaf4 <memmove+0xc>
 800ab02:	4283      	cmp	r3, r0
 800ab04:	d9f5      	bls.n	800aaf2 <memmove+0xa>
 800ab06:	1881      	adds	r1, r0, r2
 800ab08:	1ad2      	subs	r2, r2, r3
 800ab0a:	42d3      	cmn	r3, r2
 800ab0c:	d100      	bne.n	800ab10 <memmove+0x28>
 800ab0e:	bd10      	pop	{r4, pc}
 800ab10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab18:	e7f7      	b.n	800ab0a <memmove+0x22>

0800ab1a <_realloc_r>:
 800ab1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	4614      	mov	r4, r2
 800ab20:	460e      	mov	r6, r1
 800ab22:	b921      	cbnz	r1, 800ab2e <_realloc_r+0x14>
 800ab24:	4611      	mov	r1, r2
 800ab26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab2a:	f7fe b8d7 	b.w	8008cdc <_malloc_r>
 800ab2e:	b922      	cbnz	r2, 800ab3a <_realloc_r+0x20>
 800ab30:	f7fe f886 	bl	8008c40 <_free_r>
 800ab34:	4625      	mov	r5, r4
 800ab36:	4628      	mov	r0, r5
 800ab38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab3a:	f000 f821 	bl	800ab80 <_malloc_usable_size_r>
 800ab3e:	42a0      	cmp	r0, r4
 800ab40:	d20f      	bcs.n	800ab62 <_realloc_r+0x48>
 800ab42:	4621      	mov	r1, r4
 800ab44:	4638      	mov	r0, r7
 800ab46:	f7fe f8c9 	bl	8008cdc <_malloc_r>
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d0f2      	beq.n	800ab36 <_realloc_r+0x1c>
 800ab50:	4631      	mov	r1, r6
 800ab52:	4622      	mov	r2, r4
 800ab54:	f7ff fb6e 	bl	800a234 <memcpy>
 800ab58:	4631      	mov	r1, r6
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	f7fe f870 	bl	8008c40 <_free_r>
 800ab60:	e7e9      	b.n	800ab36 <_realloc_r+0x1c>
 800ab62:	4635      	mov	r5, r6
 800ab64:	e7e7      	b.n	800ab36 <_realloc_r+0x1c>

0800ab66 <__ascii_wctomb>:
 800ab66:	b149      	cbz	r1, 800ab7c <__ascii_wctomb+0x16>
 800ab68:	2aff      	cmp	r2, #255	; 0xff
 800ab6a:	bf85      	ittet	hi
 800ab6c:	238a      	movhi	r3, #138	; 0x8a
 800ab6e:	6003      	strhi	r3, [r0, #0]
 800ab70:	700a      	strbls	r2, [r1, #0]
 800ab72:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab76:	bf98      	it	ls
 800ab78:	2001      	movls	r0, #1
 800ab7a:	4770      	bx	lr
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	4770      	bx	lr

0800ab80 <_malloc_usable_size_r>:
 800ab80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab84:	1f18      	subs	r0, r3, #4
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	bfbc      	itt	lt
 800ab8a:	580b      	ldrlt	r3, [r1, r0]
 800ab8c:	18c0      	addlt	r0, r0, r3
 800ab8e:	4770      	bx	lr

0800ab90 <sqrtf>:
 800ab90:	b500      	push	{lr}
 800ab92:	ed2d 8b02 	vpush	{d8}
 800ab96:	b08b      	sub	sp, #44	; 0x2c
 800ab98:	eeb0 8a40 	vmov.f32	s16, s0
 800ab9c:	f000 f848 	bl	800ac30 <__ieee754_sqrtf>
 800aba0:	4b21      	ldr	r3, [pc, #132]	; (800ac28 <sqrtf+0x98>)
 800aba2:	f993 3000 	ldrsb.w	r3, [r3]
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	d028      	beq.n	800abfc <sqrtf+0x6c>
 800abaa:	eeb4 8a48 	vcmp.f32	s16, s16
 800abae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb2:	d623      	bvs.n	800abfc <sqrtf+0x6c>
 800abb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800abb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abbc:	d51e      	bpl.n	800abfc <sqrtf+0x6c>
 800abbe:	2201      	movs	r2, #1
 800abc0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800abc4:	9200      	str	r2, [sp, #0]
 800abc6:	4a19      	ldr	r2, [pc, #100]	; (800ac2c <sqrtf+0x9c>)
 800abc8:	9201      	str	r2, [sp, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	9208      	str	r2, [sp, #32]
 800abce:	ed8d 8b04 	vstr	d8, [sp, #16]
 800abd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abd6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800ac20 <sqrtf+0x90>
 800abda:	b9a3      	cbnz	r3, 800ac06 <sqrtf+0x76>
 800abdc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800abe0:	4668      	mov	r0, sp
 800abe2:	f000 f828 	bl	800ac36 <matherr>
 800abe6:	b1a0      	cbz	r0, 800ac12 <sqrtf+0x82>
 800abe8:	9b08      	ldr	r3, [sp, #32]
 800abea:	b11b      	cbz	r3, 800abf4 <sqrtf+0x64>
 800abec:	f7fd ffe6 	bl	8008bbc <__errno>
 800abf0:	9b08      	ldr	r3, [sp, #32]
 800abf2:	6003      	str	r3, [r0, #0]
 800abf4:	ed9d 0b06 	vldr	d0, [sp, #24]
 800abf8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800abfc:	b00b      	add	sp, #44	; 0x2c
 800abfe:	ecbd 8b02 	vpop	{d8}
 800ac02:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800ac0c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800ac10:	d1e6      	bne.n	800abe0 <sqrtf+0x50>
 800ac12:	f7fd ffd3 	bl	8008bbc <__errno>
 800ac16:	2321      	movs	r3, #33	; 0x21
 800ac18:	6003      	str	r3, [r0, #0]
 800ac1a:	e7e5      	b.n	800abe8 <sqrtf+0x58>
 800ac1c:	f3af 8000 	nop.w
	...
 800ac28:	200001e4 	.word	0x200001e4
 800ac2c:	0800de08 	.word	0x0800de08

0800ac30 <__ieee754_sqrtf>:
 800ac30:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ac34:	4770      	bx	lr

0800ac36 <matherr>:
 800ac36:	2000      	movs	r0, #0
 800ac38:	4770      	bx	lr
	...

0800ac3c <_init>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	bf00      	nop
 800ac40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac42:	bc08      	pop	{r3}
 800ac44:	469e      	mov	lr, r3
 800ac46:	4770      	bx	lr

0800ac48 <_fini>:
 800ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4a:	bf00      	nop
 800ac4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4e:	bc08      	pop	{r3}
 800ac50:	469e      	mov	lr, r3
 800ac52:	4770      	bx	lr
