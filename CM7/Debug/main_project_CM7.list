
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08008860  08008860  00018860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b40  08008b40  00018b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008b4c  08008b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08008b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003140  200001e4  08008d34  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20003324  08008d34  00023324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002174d  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003542  00000000  00000000  0004195f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001258  00000000  00000000  00044ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001100  00000000  00000000  00046100  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b055  00000000  00000000  00047200  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001239d  00000000  00000000  00082255  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00183e2a  00000000  00000000  000945f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0021841c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000054e0  00000000  00000000  00218498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e4 	.word	0x200001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008844 	.word	0x08008844

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001e8 	.word	0x200001e8
 80002dc:	08008844 	.word	0x08008844

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <inst_absolute>:
static float32_t pi = 3.141592654f;
extern uint16_t frameSize;

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	int j = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	e031      	b.n	80007e8 <inst_absolute+0x78>
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	ed93 7a00 	vldr	s14, [r3]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3301      	adds	r3, #1
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	edd3 6a00 	vldr	s13, [r3]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	edd3 7a00 	vldr	s15, [r3]
 80007bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	18d4      	adds	r4, r2, r3
 80007cc:	eeb0 0a67 	vmov.f32	s0, s15
 80007d0:	f007 ffe2 	bl	8008798 <sqrtf>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
 80007d8:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3302      	adds	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <inst_absolute+0x8c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbc7      	blt.n	8000784 <inst_absolute+0x14>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	080088b8 	.word	0x080088b8

08000800 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <MX_GPIO_Init+0x144>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	4a49      	ldr	r2, [pc, #292]	; (8000944 <MX_GPIO_Init+0x144>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000826:	4b47      	ldr	r3, [pc, #284]	; (8000944 <MX_GPIO_Init+0x144>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000834:	4b43      	ldr	r3, [pc, #268]	; (8000944 <MX_GPIO_Init+0x144>)
 8000836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083a:	4a42      	ldr	r2, [pc, #264]	; (8000944 <MX_GPIO_Init+0x144>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000844:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <MX_GPIO_Init+0x144>)
 8000846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <MX_GPIO_Init+0x144>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	4a3a      	ldr	r2, [pc, #232]	; (8000944 <MX_GPIO_Init+0x144>)
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000862:	4b38      	ldr	r3, [pc, #224]	; (8000944 <MX_GPIO_Init+0x144>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <MX_GPIO_Init+0x144>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	4a33      	ldr	r2, [pc, #204]	; (8000944 <MX_GPIO_Init+0x144>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <MX_GPIO_Init+0x144>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_GPIO_Init+0x144>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	4a2b      	ldr	r2, [pc, #172]	; (8000944 <MX_GPIO_Init+0x144>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_GPIO_Init+0x144>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <MX_GPIO_Init+0x144>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	4a24      	ldr	r2, [pc, #144]	; (8000944 <MX_GPIO_Init+0x144>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_GPIO_Init+0x144>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f244 0101 	movw	r1, #16385	; 0x4001
 80008d0:	481d      	ldr	r0, [pc, #116]	; (8000948 <MX_GPIO_Init+0x148>)
 80008d2:	f001 fa89 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2102      	movs	r1, #2
 80008da:	481c      	ldr	r0, [pc, #112]	; (800094c <MX_GPIO_Init+0x14c>)
 80008dc:	f001 fa84 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008e0:	f244 0301 	movw	r3, #16385	; 0x4001
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x148>)
 80008fa:	f001 f8c5 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80008fe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000910:	230a      	movs	r3, #10
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_GPIO_Init+0x150>)
 800091c:	f001 f8b4 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000920:	2302      	movs	r3, #2
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_GPIO_Init+0x14c>)
 8000938:	f001 f8a6 	bl	8001a88 <HAL_GPIO_Init>

}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	58024400 	.word	0x58024400
 8000948:	58020400 	.word	0x58020400
 800094c:	58021000 	.word	0x58021000
 8000950:	58020000 	.word	0x58020000

08000954 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000958:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800095c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <SCB_EnableICache+0x3c>)
 8000962:	2200      	movs	r2, #0
 8000964:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000968:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800096c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <SCB_EnableICache+0x3c>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <SCB_EnableICache+0x3c>)
 8000976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800097c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000980:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <SCB_EnableDCache+0x7c>)
 800099c:	2200      	movs	r2, #0
 800099e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009a2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <SCB_EnableDCache+0x7c>)
 80009a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009ac:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	0b5b      	lsrs	r3, r3, #13
 80009b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009b6:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009c0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	015a      	lsls	r2, r3, #5
 80009c6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009ca:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009d0:	490f      	ldr	r1, [pc, #60]	; (8000a10 <SCB_EnableDCache+0x7c>)
 80009d2:	4313      	orrs	r3, r2
 80009d4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1ef      	bne.n	80009c2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	1e5a      	subs	r2, r3, #1
 80009e6:	60fa      	str	r2, [r7, #12]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1e5      	bne.n	80009b8 <SCB_EnableDCache+0x24>
 80009ec:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <SCB_EnableDCache+0x7c>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <SCB_EnableDCache+0x7c>)
 80009f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009fa:	6153      	str	r3, [r2, #20]
 80009fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a00:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	// char hello_world[50] = {"\r\nHello World!\r\n"};
	uint32_t counter = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000a1e:	f7ff ff99 	bl	8000954 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000a22:	f7ff ffb7 	bl	8000994 <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a2a:	60fb      	str	r3, [r7, #12]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a2c:	bf00      	nop
 8000a2e:	4b7d      	ldr	r3, [pc, #500]	; (8000c24 <main+0x210>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d004      	beq.n	8000a44 <main+0x30>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	60fa      	str	r2, [r7, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dcf4      	bgt.n	8000a2e <main+0x1a>
	if ( timeout < 0 )
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	da01      	bge.n	8000a4e <main+0x3a>
	{
		Error_Handler();
 8000a4a:	f000 fa4d 	bl	8000ee8 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a4e:	f000 fc07 	bl	8001260 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a52:	f000 f901 	bl	8000c58 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000a56:	4b73      	ldr	r3, [pc, #460]	; (8000c24 <main+0x210>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a71      	ldr	r2, [pc, #452]	; (8000c24 <main+0x210>)
 8000a5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b6f      	ldr	r3, [pc, #444]	; (8000c24 <main+0x210>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f001 f9d1 	bl	8001e1c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f001 f9e7 	bl	8001e50 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a86:	60fb      	str	r3, [r7, #12]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a88:	bf00      	nop
 8000a8a:	4b66      	ldr	r3, [pc, #408]	; (8000c24 <main+0x210>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d104      	bne.n	8000aa0 <main+0x8c>
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	60fa      	str	r2, [r7, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	dcf4      	bgt.n	8000a8a <main+0x76>
	if ( timeout < 0 )
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da01      	bge.n	8000aaa <main+0x96>
	{
		Error_Handler();
 8000aa6:	f000 fa1f 	bl	8000ee8 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aaa:	f7ff fea9 	bl	8000800 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000aae:	f000 fb0f 	bl	80010d0 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000ab2:	f000 fa9f 	bl	8000ff4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], bufferSize) != HAL_OK)
 8000ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aba:	461a      	mov	r2, r3
 8000abc:	495a      	ldr	r1, [pc, #360]	; (8000c28 <main+0x214>)
 8000abe:	485b      	ldr	r0, [pc, #364]	; (8000c2c <main+0x218>)
 8000ac0:	f004 f8b2 	bl	8004c28 <HAL_UART_Receive_IT>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00a      	beq.n	8000ae0 <main+0xcc>
	{
		Error_Handler();
 8000aca:	f000 fa0d 	bl	8000ee8 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 8000ace:	e007      	b.n	8000ae0 <main+0xcc>
	{
		HAL_Delay(500);
 8000ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad4:	f000 fc56 	bl	8001384 <HAL_Delay>
		blink_green();
 8000ad8:	f000 f9b8 	bl	8000e4c <blink_green>
		blink_green();
 8000adc:	f000 f9b6 	bl	8000e4c <blink_green>
	while (UartReady != SET)
 8000ae0:	4b53      	ldr	r3, [pc, #332]	; (8000c30 <main+0x21c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d1f2      	bne.n	8000ad0 <main+0xbc>
	}
	UartReady = RESET;
 8000aea:	4b51      	ldr	r3, [pc, #324]	; (8000c30 <main+0x21c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2101      	movs	r1, #1
 8000af4:	484f      	ldr	r0, [pc, #316]	; (8000c34 <main+0x220>)
 8000af6:	f001 f977 	bl	8001de8 <HAL_GPIO_WritePin>

	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 8000afa:	4a4b      	ldr	r2, [pc, #300]	; (8000c28 <main+0x214>)
 8000afc:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d008      	beq.n	8000b1a <main+0x106>
 8000b08:	4b4b      	ldr	r3, [pc, #300]	; (8000c38 <main+0x224>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d104      	bne.n	8000b1a <main+0x106>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2102      	movs	r1, #2
 8000b14:	4849      	ldr	r0, [pc, #292]	; (8000c3c <main+0x228>)
 8000b16:	f001 f967 	bl	8001de8 <HAL_GPIO_WritePin>
	}

	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 8000b1a:	4b49      	ldr	r3, [pc, #292]	; (8000c40 <main+0x22c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <main+0x22c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f042 0201 	orr.w	r2, r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000b2a:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <main+0x22c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <main+0x22c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b38:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8000b3a:	4841      	ldr	r0, [pc, #260]	; (8000c40 <main+0x22c>)
 8000b3c:	f003 fce2 	bl	8004504 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000b40:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <main+0x22c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24

	/*****************************************************************************************************/
	// Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000b48:	4b3d      	ldr	r3, [pc, #244]	; (8000c40 <main+0x22c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8000b50:	493c      	ldr	r1, [pc, #240]	; (8000c44 <main+0x230>)
 8000b52:	4835      	ldr	r0, [pc, #212]	; (8000c28 <main+0x214>)
 8000b54:	f7ff fe0c 	bl	8000770 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <main+0x22c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5e:	60bb      	str	r3, [r7, #8]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8000b60:	4839      	ldr	r0, [pc, #228]	; (8000c48 <main+0x234>)
 8000b62:	f000 f989 	bl	8000e78 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter);
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	4938      	ldr	r1, [pc, #224]	; (8000c4c <main+0x238>)
 8000b6a:	4837      	ldr	r0, [pc, #220]	; (8000c48 <main+0x234>)
 8000b6c:	f006 fb60 	bl	8007230 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000b70:	482e      	ldr	r0, [pc, #184]	; (8000c2c <main+0x218>)
 8000b72:	f005 f90d 	bl	8005d90 <UART_CheckIdleState>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10f      	bne.n	8000b9c <main+0x188>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8000b7c:	2232      	movs	r2, #50	; 0x32
 8000b7e:	4932      	ldr	r1, [pc, #200]	; (8000c48 <main+0x234>)
 8000b80:	482a      	ldr	r0, [pc, #168]	; (8000c2c <main+0x218>)
 8000b82:	f003 ffcd 	bl	8004b20 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8000b86:	e001      	b.n	8000b8c <main+0x178>
			blink_red_fast();
 8000b88:	f000 f930 	bl	8000dec <blink_red_fast>
		while(UartReady != SET){
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <main+0x21c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d1f8      	bne.n	8000b88 <main+0x174>
		}
		UartReady = RESET;
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <main+0x21c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8000b9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba0:	f000 fbf0 	bl	8001384 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000ba4:	4821      	ldr	r0, [pc, #132]	; (8000c2c <main+0x218>)
 8000ba6:	f005 f8f3 	bl	8005d90 <UART_CheckIdleState>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d130      	bne.n	8000c12 <main+0x1fe>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4927      	ldr	r1, [pc, #156]	; (8000c50 <main+0x23c>)
 8000bb4:	481d      	ldr	r0, [pc, #116]	; (8000c2c <main+0x218>)
 8000bb6:	f003 ffb3 	bl	8004b20 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8000bba:	e001      	b.n	8000bc0 <main+0x1ac>
			blink_red_fast();
 8000bbc:	f000 f916 	bl	8000dec <blink_red_fast>
		while(UartReady != SET){
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <main+0x21c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d1f8      	bne.n	8000bbc <main+0x1a8>
		}
		UartReady = RESET;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <main+0x21c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instAbs.bytes[0], 4096);
 8000bd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd4:	491b      	ldr	r1, [pc, #108]	; (8000c44 <main+0x230>)
 8000bd6:	4815      	ldr	r0, [pc, #84]	; (8000c2c <main+0x218>)
 8000bd8:	f003 ffa2 	bl	8004b20 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8000bdc:	e001      	b.n	8000be2 <main+0x1ce>
			blink_red_fast();
 8000bde:	f000 f905 	bl	8000dec <blink_red_fast>
		while(UartReady != SET){
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <main+0x21c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d1f8      	bne.n	8000bde <main+0x1ca>
		}
		UartReady = RESET;
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <main+0x21c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	4917      	ldr	r1, [pc, #92]	; (8000c54 <main+0x240>)
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <main+0x218>)
 8000bf8:	f003 ff92 	bl	8004b20 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8000bfc:	e001      	b.n	8000c02 <main+0x1ee>
			blink_red_fast();
 8000bfe:	f000 f8f5 	bl	8000dec <blink_red_fast>
		while(UartReady != SET){
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <main+0x21c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d1f8      	bne.n	8000bfe <main+0x1ea>
		}
		UartReady = RESET;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <main+0x21c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
#endif
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <main+0x22c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
	clear_leds();
 8000c1a:	f000 f8cf 	bl	8000dbc <clear_leds>
	while (1)
	{
		blink_orange_slow();
 8000c1e:	f000 f8fd 	bl	8000e1c <blink_orange_slow>
 8000c22:	e7fc      	b.n	8000c1e <main+0x20a>
 8000c24:	58024400 	.word	0x58024400
 8000c28:	20001244 	.word	0x20001244
 8000c2c:	20003290 	.word	0x20003290
 8000c30:	20000236 	.word	0x20000236
 8000c34:	58020400 	.word	0x58020400
 8000c38:	20000200 	.word	0x20000200
 8000c3c:	58021000 	.word	0x58021000
 8000c40:	20003244 	.word	0x20003244
 8000c44:	20000244 	.word	0x20000244
 8000c48:	20000204 	.word	0x20000204
 8000c4c:	08008860 	.word	0x08008860
 8000c50:	080088bc 	.word	0x080088bc
 8000c54:	080088c0 	.word	0x080088c0

08000c58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0cc      	sub	sp, #304	; 0x130
 8000c5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c62:	224c      	movs	r2, #76	; 0x4c
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 fde6 	bl	8006838 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c70:	2220      	movs	r2, #32
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f005 fddf 	bl	8006838 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4618      	mov	r0, r3
 8000c80:	23bc      	movs	r3, #188	; 0xbc
 8000c82:	461a      	mov	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	f005 fdd7 	bl	8006838 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	f001 f8f4 	bl	8001e78 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <SystemClock_Config+0x15c>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a46      	ldr	r2, [pc, #280]	; (8000db4 <SystemClock_Config+0x15c>)
 8000c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <SystemClock_Config+0x15c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <SystemClock_Config+0x160>)
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	4a41      	ldr	r2, [pc, #260]	; (8000db8 <SystemClock_Config+0x160>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cba:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <SystemClock_Config+0x160>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	f003 0201 	and.w	r2, r3, #1
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cca:	bf00      	nop
 8000ccc:	4b39      	ldr	r3, [pc, #228]	; (8000db4 <SystemClock_Config+0x15c>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd8:	d1f8      	bne.n	8000ccc <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce6:	2340      	movs	r3, #64	; 0x40
 8000ce8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cec:	2302      	movs	r3, #2
 8000cee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 60;
 8000cfe:	233c      	movs	r3, #60	; 0x3c
 8000d00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d16:	230c      	movs	r3, #12
 8000d18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 f8fd 	bl	8001f2c <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8000d38:	f000 f8d6 	bl	8000ee8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	233f      	movs	r3, #63	; 0x3f
 8000d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2303      	movs	r3, #3
 8000d44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d68:	2340      	movs	r3, #64	; 0x40
 8000d6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d6e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d72:	2104      	movs	r1, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 fce9 	bl	800274c <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x12c>
	{
		Error_Handler();
 8000d80:	f000 f8b2 	bl	8000ee8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2202      	movs	r2, #2
 8000d8a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2203      	movs	r2, #3
 8000d92:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 f85b 	bl	8002e54 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x150>
	{
		Error_Handler();
 8000da4:	f000 f8a0 	bl	8000ee8 <Error_Handler>
	}
}
 8000da8:	bf00      	nop
 8000daa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58024800 	.word	0x58024800
 8000db8:	58000400 	.word	0x58000400

08000dbc <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <clear_leds+0x28>)
 8000dc6:	f001 f80f 	bl	8001de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <clear_leds+0x2c>)
 8000dd0:	f001 f80a 	bl	8001de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dda:	4802      	ldr	r0, [pc, #8]	; (8000de4 <clear_leds+0x28>)
 8000ddc:	f001 f804 	bl	8001de8 <HAL_GPIO_WritePin>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	58020400 	.word	0x58020400
 8000de8:	58021000 	.word	0x58021000

08000dec <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df6:	4808      	ldr	r0, [pc, #32]	; (8000e18 <blink_red_fast+0x2c>)
 8000df8:	f000 fff6 	bl	8001de8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000dfc:	2032      	movs	r0, #50	; 0x32
 8000dfe:	f000 fac1 	bl	8001384 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <blink_red_fast+0x2c>)
 8000e0a:	f000 ffed 	bl	8001de8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e0e:	2032      	movs	r0, #50	; 0x32
 8000e10:	f000 fab8 	bl	8001384 <HAL_Delay>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	58020400 	.word	0x58020400

08000e1c <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2102      	movs	r1, #2
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <blink_orange_slow+0x2c>)
 8000e26:	f000 ffdf 	bl	8001de8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e2e:	f000 faa9 	bl	8001384 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2102      	movs	r1, #2
 8000e36:	4804      	ldr	r0, [pc, #16]	; (8000e48 <blink_orange_slow+0x2c>)
 8000e38:	f000 ffd6 	bl	8001de8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e40:	f000 faa0 	bl	8001384 <HAL_Delay>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58021000 	.word	0x58021000

08000e4c <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	4807      	ldr	r0, [pc, #28]	; (8000e74 <blink_green+0x28>)
 8000e56:	f000 ffc7 	bl	8001de8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000e5a:	20c8      	movs	r0, #200	; 0xc8
 8000e5c:	f000 fa92 	bl	8001384 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2101      	movs	r1, #1
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <blink_green+0x28>)
 8000e66:	f000 ffbf 	bl	8001de8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000e6a:	20c8      	movs	r0, #200	; 0xc8
 8000e6c:	f000 fa8a 	bl	8001384 <HAL_Delay>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58020400 	.word	0x58020400

08000e78 <reset_buffer>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void reset_buffer(char *stringBuffer){
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 50; i++){
 8000e80:	2301      	movs	r3, #1
 8000e82:	81fb      	strh	r3, [r7, #14]
 8000e84:	e007      	b.n	8000e96 <reset_buffer+0x1e>
		stringBuffer[i] = '\0';
 8000e86:	89fb      	ldrh	r3, [r7, #14]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 50; i++){
 8000e90:	89fb      	ldrh	r3, [r7, #14]
 8000e92:	3301      	adds	r3, #1
 8000e94:	81fb      	strh	r3, [r7, #14]
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	2b31      	cmp	r3, #49	; 0x31
 8000e9a:	d9f4      	bls.n	8000e86 <reset_buffer+0xe>
	}
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_UART_TxCpltCallback>:
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100);
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <HAL_UART_TxCpltCallback+0x1c>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000236 	.word	0x20000236

08000ec8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <HAL_UART_RxCpltCallback+0x1c>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000236 	.word	0x20000236

08000ee8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_MspInit+0x30>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_MspInit+0x30>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_MspInit+0x30>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	58024400 	.word	0x58024400

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f9e0 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <USART3_IRQHandler+0x10>)
 8000f8e:	f003 ff23 	bl	8004dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20003290 	.word	0x20003290

08000f9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x50>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x16>
		heap_end = &end;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <_sbrk+0x50>)
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <_sbrk+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <_sbrk+0x50>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <_sbrk+0x50>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	466a      	mov	r2, sp
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d907      	bls.n	8000fd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fc6:	f005 fc05 	bl	80067d4 <__errno>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	230c      	movs	r3, #12
 8000fce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <_sbrk+0x50>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a03      	ldr	r2, [pc, #12]	; (8000fec <_sbrk+0x50>)
 8000fe0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000238 	.word	0x20000238
 8000ff0:	20003328 	.word	0x20003328

08000ff4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <MX_TIM2_Init+0x98>)
 8001014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001018:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_TIM2_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_TIM2_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_TIM2_Init+0x98>)
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_TIM2_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_TIM2_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800103a:	4814      	ldr	r0, [pc, #80]	; (800108c <MX_TIM2_Init+0x98>)
 800103c:	f003 fa0a 	bl	8004454 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001046:	f7ff ff4f 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_TIM2_Init+0x98>)
 8001058:	f003 fa82 	bl	8004560 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001062:	f7ff ff41 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <MX_TIM2_Init+0x98>)
 8001074:	f003 fc7c 	bl	8004970 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800107e:	f7ff ff33 	bl	8000ee8 <Error_Handler>
  }

}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20003244 	.word	0x20003244

08001090 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a0:	d10e      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_TIM_Base_MspInit+0x3c>)
 80010a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a8:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_TIM_Base_MspInit+0x3c>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_TIM_Base_MspInit+0x3c>)
 80010b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	58024400 	.word	0x58024400

080010d0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <MX_USART3_UART_Init+0x94>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_USART3_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_USART3_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_USART3_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <MX_USART3_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001118:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800111a:	f003 fcb1 	bl	8004a80 <HAL_UART_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001124:	f7ff fee0 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800112c:	f005 fa6d 	bl	800660a <HAL_UARTEx_SetTxFifoThreshold>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001136:	f7ff fed7 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800113e:	f005 faa2 	bl	8006686 <HAL_UARTEx_SetRxFifoThreshold>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001148:	f7ff fece 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_USART3_UART_Init+0x90>)
 800114e:	f005 fa23 	bl	8006598 <HAL_UARTEx_DisableFifoMode>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001158:	f7ff fec6 	bl	8000ee8 <Error_Handler>
  }

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20003290 	.word	0x20003290
 8001164:	40004800 	.word	0x40004800

08001168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_UART_MspInit+0x98>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d136      	bne.n	80011f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_UART_MspInit+0x9c>)
 800118c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001190:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <HAL_UART_MspInit+0x9c>)
 8001192:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001196:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_UART_MspInit+0x9c>)
 800119c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d8:	2307      	movs	r3, #7
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_UART_MspInit+0xa0>)
 80011e4:	f000 fc50 	bl	8001a88 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2027      	movs	r0, #39	; 0x27
 80011ee:	f000 f9d2 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011f2:	2027      	movs	r0, #39	; 0x27
 80011f4:	f000 f9e9 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40004800 	.word	0x40004800
 8001204:	58024400 	.word	0x58024400
 8001208:	58020c00 	.word	0x58020c00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001212:	e003      	b.n	800121c <LoopCopyDataInit>

08001214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800121a:	3104      	adds	r1, #4

0800121c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001224:	d3f6      	bcc.n	8001214 <CopyDataInit>
  ldr  r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001228:	e002      	b.n	8001230 <LoopFillZerobss>

0800122a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800122a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800122c:	f842 3b04 	str.w	r3, [r2], #4

08001230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001234:	d3f9      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001236:	f7ff fa2b 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f005 fad1 	bl	80067e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fbe9 	bl	8000a14 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001248:	08008b50 	.word	0x08008b50
  ldr  r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001250:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001254:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001258:	20003324 	.word	0x20003324

0800125c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC3_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001266:	2003      	movs	r0, #3
 8001268:	f000 f98a 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800126c:	f001 fc24 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8001270:	4601      	mov	r1, r0
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_Init+0x68>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_Init+0x6c>)
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	fa21 f303 	lsr.w	r3, r1, r3
 8001288:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_Init+0x68>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_Init+0x6c>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_Init+0x70>)
 80012a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012a4:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <HAL_Init+0x74>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f814 	bl	80012d8 <HAL_InitTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e002      	b.n	80012c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012ba:	f7ff fe1d 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	58024400 	.word	0x58024400
 80012cc:	080088a8 	.word	0x080088a8
 80012d0:	20000004 	.word	0x20000004
 80012d4:	20000000 	.word	0x20000000

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_InitTick+0x60>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e021      	b.n	8001330 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_InitTick+0x64>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_InitTick+0x60>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f96f 	bl	80015e6 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 f939 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x68>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000000c 	.word	0x2000000c
 800133c:	20000000 	.word	0x20000000
 8001340:	20000008 	.word	0x20000008

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c
 8001368:	2000331c 	.word	0x2000331c

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	2000331c 	.word	0x2000331c

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_Delay+0x40>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_GetREVID+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0c1b      	lsrs	r3, r3, #16
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	5c001000 	.word	0x5c001000

080013e0 <__NVIC_SetPriorityGrouping>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	4313      	orrs	r3, r2
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x40>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00
 8001424:	05fa0000 	.word	0x05fa0000

08001428 <__NVIC_GetPriorityGrouping>:
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff40 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff90 	bl	80014d4 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5f 	bl	8001480 <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff33 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa4 	bl	800153c <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e205      	b.n	8001a1e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e1fa      	b.n	8001a1e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a8c      	ldr	r2, [pc, #560]	; (8001860 <HAL_DMA_Abort_IT+0x260>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d04a      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a8b      	ldr	r2, [pc, #556]	; (8001864 <HAL_DMA_Abort_IT+0x264>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d045      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a89      	ldr	r2, [pc, #548]	; (8001868 <HAL_DMA_Abort_IT+0x268>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d040      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a88      	ldr	r2, [pc, #544]	; (800186c <HAL_DMA_Abort_IT+0x26c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d03b      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a86      	ldr	r2, [pc, #536]	; (8001870 <HAL_DMA_Abort_IT+0x270>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d036      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a85      	ldr	r2, [pc, #532]	; (8001874 <HAL_DMA_Abort_IT+0x274>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d031      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a83      	ldr	r2, [pc, #524]	; (8001878 <HAL_DMA_Abort_IT+0x278>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d02c      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a82      	ldr	r2, [pc, #520]	; (800187c <HAL_DMA_Abort_IT+0x27c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d027      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a80      	ldr	r2, [pc, #512]	; (8001880 <HAL_DMA_Abort_IT+0x280>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d022      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a7f      	ldr	r2, [pc, #508]	; (8001884 <HAL_DMA_Abort_IT+0x284>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d01d      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a7d      	ldr	r2, [pc, #500]	; (8001888 <HAL_DMA_Abort_IT+0x288>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d018      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7c      	ldr	r2, [pc, #496]	; (800188c <HAL_DMA_Abort_IT+0x28c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d013      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a7a      	ldr	r2, [pc, #488]	; (8001890 <HAL_DMA_Abort_IT+0x290>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00e      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a79      	ldr	r2, [pc, #484]	; (8001894 <HAL_DMA_Abort_IT+0x294>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d009      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a77      	ldr	r2, [pc, #476]	; (8001898 <HAL_DMA_Abort_IT+0x298>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d004      	beq.n	80016c8 <HAL_DMA_Abort_IT+0xc8>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a76      	ldr	r2, [pc, #472]	; (800189c <HAL_DMA_Abort_IT+0x29c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_DMA_Abort_IT+0xcc>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_DMA_Abort_IT+0xce>
 80016cc:	2300      	movs	r3, #0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d065      	beq.n	800179e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2204      	movs	r2, #4
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a60      	ldr	r2, [pc, #384]	; (8001860 <HAL_DMA_Abort_IT+0x260>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d04a      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5e      	ldr	r2, [pc, #376]	; (8001864 <HAL_DMA_Abort_IT+0x264>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d045      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a5d      	ldr	r2, [pc, #372]	; (8001868 <HAL_DMA_Abort_IT+0x268>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d040      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a5b      	ldr	r2, [pc, #364]	; (800186c <HAL_DMA_Abort_IT+0x26c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d03b      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a5a      	ldr	r2, [pc, #360]	; (8001870 <HAL_DMA_Abort_IT+0x270>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d036      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a58      	ldr	r2, [pc, #352]	; (8001874 <HAL_DMA_Abort_IT+0x274>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d031      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a57      	ldr	r2, [pc, #348]	; (8001878 <HAL_DMA_Abort_IT+0x278>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d02c      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a55      	ldr	r2, [pc, #340]	; (800187c <HAL_DMA_Abort_IT+0x27c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d027      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a54      	ldr	r2, [pc, #336]	; (8001880 <HAL_DMA_Abort_IT+0x280>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d022      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_DMA_Abort_IT+0x284>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d01d      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a51      	ldr	r2, [pc, #324]	; (8001888 <HAL_DMA_Abort_IT+0x288>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d018      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a4f      	ldr	r2, [pc, #316]	; (800188c <HAL_DMA_Abort_IT+0x28c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a4e      	ldr	r2, [pc, #312]	; (8001890 <HAL_DMA_Abort_IT+0x290>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00e      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_DMA_Abort_IT+0x294>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d009      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a4b      	ldr	r2, [pc, #300]	; (8001898 <HAL_DMA_Abort_IT+0x298>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d004      	beq.n	800177a <HAL_DMA_Abort_IT+0x17a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a49      	ldr	r2, [pc, #292]	; (800189c <HAL_DMA_Abort_IT+0x29c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d108      	bne.n	800178c <HAL_DMA_Abort_IT+0x18c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e147      	b.n	8001a1c <HAL_DMA_Abort_IT+0x41c>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0201 	bic.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e13e      	b.n	8001a1c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 020e 	bic.w	r2, r2, #14
 80017ac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a2b      	ldr	r2, [pc, #172]	; (8001860 <HAL_DMA_Abort_IT+0x260>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d04a      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <HAL_DMA_Abort_IT+0x264>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d045      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_DMA_Abort_IT+0x268>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d040      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_DMA_Abort_IT+0x26c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d03b      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a25      	ldr	r2, [pc, #148]	; (8001870 <HAL_DMA_Abort_IT+0x270>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d036      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a23      	ldr	r2, [pc, #140]	; (8001874 <HAL_DMA_Abort_IT+0x274>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d031      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_DMA_Abort_IT+0x278>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d02c      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_DMA_Abort_IT+0x27c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d027      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <HAL_DMA_Abort_IT+0x280>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d022      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_DMA_Abort_IT+0x284>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01d      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_DMA_Abort_IT+0x288>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d018      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1a      	ldr	r2, [pc, #104]	; (800188c <HAL_DMA_Abort_IT+0x28c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a19      	ldr	r2, [pc, #100]	; (8001890 <HAL_DMA_Abort_IT+0x290>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00e      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_DMA_Abort_IT+0x294>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d009      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a16      	ldr	r2, [pc, #88]	; (8001898 <HAL_DMA_Abort_IT+0x298>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d004      	beq.n	800184e <HAL_DMA_Abort_IT+0x24e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <HAL_DMA_Abort_IT+0x29c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d128      	bne.n	80018a0 <HAL_DMA_Abort_IT+0x2a0>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0201 	bic.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e027      	b.n	80018b0 <HAL_DMA_Abort_IT+0x2b0>
 8001860:	40020010 	.word	0x40020010
 8001864:	40020028 	.word	0x40020028
 8001868:	40020040 	.word	0x40020040
 800186c:	40020058 	.word	0x40020058
 8001870:	40020070 	.word	0x40020070
 8001874:	40020088 	.word	0x40020088
 8001878:	400200a0 	.word	0x400200a0
 800187c:	400200b8 	.word	0x400200b8
 8001880:	40020410 	.word	0x40020410
 8001884:	40020428 	.word	0x40020428
 8001888:	40020440 	.word	0x40020440
 800188c:	40020458 	.word	0x40020458
 8001890:	40020470 	.word	0x40020470
 8001894:	40020488 	.word	0x40020488
 8001898:	400204a0 	.word	0x400204a0
 800189c:	400204b8 	.word	0x400204b8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a5c      	ldr	r2, [pc, #368]	; (8001a28 <HAL_DMA_Abort_IT+0x428>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d072      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5b      	ldr	r2, [pc, #364]	; (8001a2c <HAL_DMA_Abort_IT+0x42c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d06d      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a59      	ldr	r2, [pc, #356]	; (8001a30 <HAL_DMA_Abort_IT+0x430>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d068      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <HAL_DMA_Abort_IT+0x434>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d063      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a56      	ldr	r2, [pc, #344]	; (8001a38 <HAL_DMA_Abort_IT+0x438>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d05e      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a55      	ldr	r2, [pc, #340]	; (8001a3c <HAL_DMA_Abort_IT+0x43c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d059      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a53      	ldr	r2, [pc, #332]	; (8001a40 <HAL_DMA_Abort_IT+0x440>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d054      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_DMA_Abort_IT+0x444>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d04f      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <HAL_DMA_Abort_IT+0x448>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d04a      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <HAL_DMA_Abort_IT+0x44c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d045      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <HAL_DMA_Abort_IT+0x450>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d040      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a4c      	ldr	r2, [pc, #304]	; (8001a54 <HAL_DMA_Abort_IT+0x454>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d03b      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a4a      	ldr	r2, [pc, #296]	; (8001a58 <HAL_DMA_Abort_IT+0x458>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d036      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a49      	ldr	r2, [pc, #292]	; (8001a5c <HAL_DMA_Abort_IT+0x45c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d031      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a47      	ldr	r2, [pc, #284]	; (8001a60 <HAL_DMA_Abort_IT+0x460>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d02c      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a46      	ldr	r2, [pc, #280]	; (8001a64 <HAL_DMA_Abort_IT+0x464>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d027      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <HAL_DMA_Abort_IT+0x468>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d022      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a43      	ldr	r2, [pc, #268]	; (8001a6c <HAL_DMA_Abort_IT+0x46c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d01d      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a41      	ldr	r2, [pc, #260]	; (8001a70 <HAL_DMA_Abort_IT+0x470>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d018      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a40      	ldr	r2, [pc, #256]	; (8001a74 <HAL_DMA_Abort_IT+0x474>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d013      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a3e      	ldr	r2, [pc, #248]	; (8001a78 <HAL_DMA_Abort_IT+0x478>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00e      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a3d      	ldr	r2, [pc, #244]	; (8001a7c <HAL_DMA_Abort_IT+0x47c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d009      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <HAL_DMA_Abort_IT+0x480>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d004      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x3a0>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a3a      	ldr	r2, [pc, #232]	; (8001a84 <HAL_DMA_Abort_IT+0x484>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_DMA_Abort_IT+0x3a4>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_DMA_Abort_IT+0x3a6>
 80019a4:	2300      	movs	r3, #0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d028      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	2201      	movs	r2, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00c      	beq.n	80019fc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40020010 	.word	0x40020010
 8001a2c:	40020028 	.word	0x40020028
 8001a30:	40020040 	.word	0x40020040
 8001a34:	40020058 	.word	0x40020058
 8001a38:	40020070 	.word	0x40020070
 8001a3c:	40020088 	.word	0x40020088
 8001a40:	400200a0 	.word	0x400200a0
 8001a44:	400200b8 	.word	0x400200b8
 8001a48:	40020410 	.word	0x40020410
 8001a4c:	40020428 	.word	0x40020428
 8001a50:	40020440 	.word	0x40020440
 8001a54:	40020458 	.word	0x40020458
 8001a58:	40020470 	.word	0x40020470
 8001a5c:	40020488 	.word	0x40020488
 8001a60:	400204a0 	.word	0x400204a0
 8001a64:	400204b8 	.word	0x400204b8
 8001a68:	58025408 	.word	0x58025408
 8001a6c:	5802541c 	.word	0x5802541c
 8001a70:	58025430 	.word	0x58025430
 8001a74:	58025444 	.word	0x58025444
 8001a78:	58025458 	.word	0x58025458
 8001a7c:	5802546c 	.word	0x5802546c
 8001a80:	58025480 	.word	0x58025480
 8001a84:	58025494 	.word	0x58025494

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_GPIO_Init+0x234>)
 8001a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a9a:	e194      	b.n	8001dc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8186 	beq.w	8001dc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d00b      	beq.n	8001ad4 <HAL_GPIO_Init+0x4c>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac8:	2b11      	cmp	r3, #17
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b12      	cmp	r3, #18
 8001ad2:	d130      	bne.n	8001b36 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 0201 	and.w	r2, r3, #1
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0xee>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d123      	bne.n	8001bbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	08da      	lsrs	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3208      	adds	r2, #8
 8001b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	08da      	lsrs	r2, r3, #3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3208      	adds	r2, #8
 8001bb8:	69b9      	ldr	r1, [r7, #24]
 8001bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0203 	and.w	r2, r3, #3
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80e0 	beq.w	8001dc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_GPIO_Init+0x238>)
 8001c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <HAL_GPIO_Init+0x238>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_GPIO_Init+0x238>)
 8001c12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <HAL_GPIO_Init+0x23c>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_GPIO_Init+0x240>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d052      	beq.n	8001cf0 <HAL_GPIO_Init+0x268>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_GPIO_Init+0x244>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d031      	beq.n	8001cb6 <HAL_GPIO_Init+0x22e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <HAL_GPIO_Init+0x248>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x22a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_GPIO_Init+0x24c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x226>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_GPIO_Init+0x250>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_GPIO_Init+0x254>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x21e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <HAL_GPIO_Init+0x258>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x21a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <HAL_GPIO_Init+0x25c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x216>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <HAL_GPIO_Init+0x260>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x212>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_GPIO_Init+0x264>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x20e>
 8001c92:	2309      	movs	r3, #9
 8001c94:	e02d      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001c96:	230a      	movs	r3, #10
 8001c98:	e02b      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	e029      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e027      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e025      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	e023      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001caa:	2304      	movs	r3, #4
 8001cac:	e021      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e01f      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e01d      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e01b      	b.n	8001cf2 <HAL_GPIO_Init+0x26a>
 8001cba:	bf00      	nop
 8001cbc:	58000080 	.word	0x58000080
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58000400 	.word	0x58000400
 8001cc8:	58020000 	.word	0x58020000
 8001ccc:	58020400 	.word	0x58020400
 8001cd0:	58020800 	.word	0x58020800
 8001cd4:	58020c00 	.word	0x58020c00
 8001cd8:	58021000 	.word	0x58021000
 8001cdc:	58021400 	.word	0x58021400
 8001ce0:	58021800 	.word	0x58021800
 8001ce4:	58021c00 	.word	0x58021c00
 8001ce8:	58022000 	.word	0x58022000
 8001cec:	58022400 	.word	0x58022400
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	f002 0203 	and.w	r2, r2, #3
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	4093      	lsls	r3, r2
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d02:	4938      	ldr	r1, [pc, #224]	; (8001de4 <HAL_GPIO_Init+0x35c>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f47f ae63 	bne.w	8001a9c <HAL_GPIO_Init+0x14>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	58000400 	.word	0x58000400

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e24:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_HSEM_FastTake+0x2c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3320      	adds	r3, #32
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_HSEM_FastTake+0x30>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e000      	b.n	8001e3a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	58026400 	.word	0x58026400
 8001e4c:	80000300 	.word	0x80000300

08001e50 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e5a:	4906      	ldr	r1, [pc, #24]	; (8001e74 <HAL_HSEM_Release+0x24>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	58026400 	.word	0x58026400

08001e78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e040      	b.n	8001f20 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e03e      	b.n	8001f20 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001eaa:	491f      	ldr	r1, [pc, #124]	; (8001f28 <HAL_PWREx_ConfigSupply+0xb0>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001eb2:	f7ff fa5b 	bl	800136c <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001eb8:	e009      	b.n	8001ece <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001eba:	f7ff fa57 	bl	800136c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec8:	d901      	bls.n	8001ece <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e028      	b.n	8001f20 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eda:	d1ee      	bne.n	8001eba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b1e      	cmp	r3, #30
 8001ee0:	d008      	beq.n	8001ef4 <HAL_PWREx_ConfigSupply+0x7c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ee6:	d005      	beq.n	8001ef4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b1d      	cmp	r3, #29
 8001eec:	d002      	beq.n	8001ef4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ef2:	d114      	bne.n	8001f1e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ef4:	f7ff fa3a 	bl	800136c <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001efa:	e009      	b.n	8001f10 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001efc:	f7ff fa36 	bl	800136c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f0a:	d901      	bls.n	8001f10 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e007      	b.n	8001f20 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d1ee      	bne.n	8001efc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	58024800 	.word	0x58024800

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e3ff      	b.n	800273e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4c:	4b99      	ldr	r3, [pc, #612]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f56:	4b97      	ldr	r3, [pc, #604]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d007      	beq.n	8001f72 <HAL_RCC_OscConfig+0x46>
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	2b18      	cmp	r3, #24
 8001f66:	d110      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d10b      	bne.n	8001f8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f72:	4b90      	ldr	r3, [pc, #576]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d06c      	beq.n	8002058 <HAL_RCC_OscConfig+0x12c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d168      	bne.n	8002058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e3d9      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x76>
 8001f94:	4b87      	ldr	r3, [pc, #540]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a86      	ldr	r2, [pc, #536]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e02e      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a81      	ldr	r2, [pc, #516]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7e      	ldr	r2, [pc, #504]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e01d      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xbc>
 8001fce:	4b79      	ldr	r3, [pc, #484]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a78      	ldr	r2, [pc, #480]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a71      	ldr	r2, [pc, #452]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a6e      	ldr	r2, [pc, #440]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8001ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff f9b0 	bl	800136c <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff f9ac 	bl	800136c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e38d      	b.n	800273e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002022:	4b64      	ldr	r3, [pc, #400]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0xe4>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff f99c 	bl	800136c <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff f998 	bl	800136c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e379      	b.n	800273e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800204a:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x10c>
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80ae 	beq.w	80021c4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002068:	4b52      	ldr	r3, [pc, #328]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002070:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002072:	4b50      	ldr	r3, [pc, #320]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_RCC_OscConfig+0x162>
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b18      	cmp	r3, #24
 8002082:	d13a      	bne.n	80020fa <HAL_RCC_OscConfig+0x1ce>
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d135      	bne.n	80020fa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800208e:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x17a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e34b      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	f7ff f98f 	bl	80013c8 <HAL_GetREVID>
 80020aa:	4602      	mov	r2, r0
 80020ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d817      	bhi.n	80020e4 <HAL_RCC_OscConfig+0x1b8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d108      	bne.n	80020ce <HAL_RCC_OscConfig+0x1a2>
 80020bc:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80020c4:	4a3b      	ldr	r2, [pc, #236]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 80020c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020cc:	e07a      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	031b      	lsls	r3, r3, #12
 80020dc:	4935      	ldr	r1, [pc, #212]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e2:	e06f      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	4930      	ldr	r1, [pc, #192]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f8:	e064      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d045      	beq.n	800218e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 0219 	bic.w	r2, r3, #25
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4929      	ldr	r1, [pc, #164]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f92a 	bl	800136c <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211c:	f7ff f926 	bl	800136c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e307      	b.n	800273e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	f7ff f945 	bl	80013c8 <HAL_GetREVID>
 800213e:	4602      	mov	r2, r0
 8002140:	f241 0303 	movw	r3, #4099	; 0x1003
 8002144:	429a      	cmp	r2, r3
 8002146:	d817      	bhi.n	8002178 <HAL_RCC_OscConfig+0x24c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b40      	cmp	r3, #64	; 0x40
 800214e:	d108      	bne.n	8002162 <HAL_RCC_OscConfig+0x236>
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002158:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 800215a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215e:	6053      	str	r3, [r2, #4]
 8002160:	e030      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	031b      	lsls	r3, r3, #12
 8002170:	4910      	ldr	r1, [pc, #64]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
 8002176:	e025      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	490b      	ldr	r1, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e01a      	b.n	80021c4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_RCC_OscConfig+0x288>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff f8e7 	bl	800136c <HAL_GetTick>
 800219e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a2:	f7ff f8e3 	bl	800136c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d903      	bls.n	80021b8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e2c4      	b.n	800273e <HAL_RCC_OscConfig+0x812>
 80021b4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021b8:	4ba4      	ldr	r3, [pc, #656]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a9 	beq.w	8002324 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d2:	4b9e      	ldr	r3, [pc, #632]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021dc:	4b9b      	ldr	r3, [pc, #620]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d007      	beq.n	80021f8 <HAL_RCC_OscConfig+0x2cc>
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b18      	cmp	r3, #24
 80021ec:	d13a      	bne.n	8002264 <HAL_RCC_OscConfig+0x338>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d135      	bne.n	8002264 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021f8:	4b94      	ldr	r3, [pc, #592]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_OscConfig+0x2e4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b80      	cmp	r3, #128	; 0x80
 800220a:	d001      	beq.n	8002210 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e296      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002210:	f7ff f8da 	bl	80013c8 <HAL_GetREVID>
 8002214:	4602      	mov	r2, r0
 8002216:	f241 0303 	movw	r3, #4099	; 0x1003
 800221a:	429a      	cmp	r2, r3
 800221c:	d817      	bhi.n	800224e <HAL_RCC_OscConfig+0x322>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	2b20      	cmp	r3, #32
 8002224:	d108      	bne.n	8002238 <HAL_RCC_OscConfig+0x30c>
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <HAL_RCC_OscConfig+0x520>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800222e:	4a87      	ldr	r2, [pc, #540]	; (800244c <HAL_RCC_OscConfig+0x520>)
 8002230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002234:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002236:	e075      	b.n	8002324 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002238:	4b84      	ldr	r3, [pc, #528]	; (800244c <HAL_RCC_OscConfig+0x520>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	069b      	lsls	r3, r3, #26
 8002246:	4981      	ldr	r1, [pc, #516]	; (800244c <HAL_RCC_OscConfig+0x520>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800224c:	e06a      	b.n	8002324 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800224e:	4b7f      	ldr	r3, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x520>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	497b      	ldr	r1, [pc, #492]	; (800244c <HAL_RCC_OscConfig+0x520>)
 800225e:	4313      	orrs	r3, r2
 8002260:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002262:	e05f      	b.n	8002324 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d042      	beq.n	80022f2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800226c:	4b77      	ldr	r3, [pc, #476]	; (800244c <HAL_RCC_OscConfig+0x520>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a76      	ldr	r2, [pc, #472]	; (800244c <HAL_RCC_OscConfig+0x520>)
 8002272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff f878 	bl	800136c <HAL_GetTick>
 800227c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002280:	f7ff f874 	bl	800136c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e255      	b.n	800273e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002292:	4b6e      	ldr	r3, [pc, #440]	; (800244c <HAL_RCC_OscConfig+0x520>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800229e:	f7ff f893 	bl	80013c8 <HAL_GetREVID>
 80022a2:	4602      	mov	r2, r0
 80022a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d817      	bhi.n	80022dc <HAL_RCC_OscConfig+0x3b0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d108      	bne.n	80022c6 <HAL_RCC_OscConfig+0x39a>
 80022b4:	4b65      	ldr	r3, [pc, #404]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022bc:	4a63      	ldr	r2, [pc, #396]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80022be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022c2:	6053      	str	r3, [r2, #4]
 80022c4:	e02e      	b.n	8002324 <HAL_RCC_OscConfig+0x3f8>
 80022c6:	4b61      	ldr	r3, [pc, #388]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	069b      	lsls	r3, r3, #26
 80022d4:	495d      	ldr	r1, [pc, #372]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
 80022da:	e023      	b.n	8002324 <HAL_RCC_OscConfig+0x3f8>
 80022dc:	4b5b      	ldr	r3, [pc, #364]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	4958      	ldr	r1, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
 80022f0:	e018      	b.n	8002324 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022f2:	4b56      	ldr	r3, [pc, #344]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a55      	ldr	r2, [pc, #340]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80022f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7ff f835 	bl	800136c <HAL_GetTick>
 8002302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002306:	f7ff f831 	bl	800136c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e212      	b.n	800273e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002318:	4b4c      	ldr	r3, [pc, #304]	; (800244c <HAL_RCC_OscConfig+0x520>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d036      	beq.n	800239e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d019      	beq.n	800236c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002338:	4b44      	ldr	r3, [pc, #272]	; (800244c <HAL_RCC_OscConfig+0x520>)
 800233a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233c:	4a43      	ldr	r2, [pc, #268]	; (800244c <HAL_RCC_OscConfig+0x520>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7ff f812 	bl	800136c <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234c:	f7ff f80e 	bl	800136c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1ef      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_RCC_OscConfig+0x520>)
 8002360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x420>
 800236a:	e018      	b.n	800239e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236c:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_OscConfig+0x520>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	4a36      	ldr	r2, [pc, #216]	; (800244c <HAL_RCC_OscConfig+0x520>)
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fff8 	bl	800136c <HAL_GetTick>
 800237c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fff4 	bl	800136c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1d5      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_RCC_OscConfig+0x520>)
 8002394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d036      	beq.n	8002418 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d019      	beq.n	80023e6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80023b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023be:	f7fe ffd5 	bl	800136c <HAL_GetTick>
 80023c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023c6:	f7fe ffd1 	bl	800136c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e1b2      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x49a>
 80023e4:	e018      	b.n	8002418 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a18      	ldr	r2, [pc, #96]	; (800244c <HAL_RCC_OscConfig+0x520>)
 80023ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023f2:	f7fe ffbb 	bl	800136c <HAL_GetTick>
 80023f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023fa:	f7fe ffb7 	bl	800136c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e198      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_RCC_OscConfig+0x520>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8085 	beq.w	8002530 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_RCC_OscConfig+0x524>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <HAL_RCC_OscConfig+0x524>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002432:	f7fe ff9b 	bl	800136c <HAL_GetTick>
 8002436:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002438:	e00c      	b.n	8002454 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe ff97 	bl	800136c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d905      	bls.n	8002454 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e178      	b.n	800273e <HAL_RCC_OscConfig+0x812>
 800244c:	58024400 	.word	0x58024400
 8002450:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002454:	4b96      	ldr	r3, [pc, #600]	; (80026b0 <HAL_RCC_OscConfig+0x784>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ec      	beq.n	800243a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x54a>
 8002468:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a91      	ldr	r2, [pc, #580]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e02d      	b.n	80024d2 <HAL_RCC_OscConfig+0x5a6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x56c>
 800247e:	4b8d      	ldr	r3, [pc, #564]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a8c      	ldr	r2, [pc, #560]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
 800248a:	4b8a      	ldr	r3, [pc, #552]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a89      	ldr	r2, [pc, #548]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
 8002496:	e01c      	b.n	80024d2 <HAL_RCC_OscConfig+0x5a6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d10c      	bne.n	80024ba <HAL_RCC_OscConfig+0x58e>
 80024a0:	4b84      	ldr	r3, [pc, #528]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a83      	ldr	r2, [pc, #524]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
 80024ac:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a80      	ldr	r2, [pc, #512]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0x5a6>
 80024ba:	4b7e      	ldr	r3, [pc, #504]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a7d      	ldr	r2, [pc, #500]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
 80024c6:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a7a      	ldr	r2, [pc, #488]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d015      	beq.n	8002506 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7fe ff47 	bl	800136c <HAL_GetTick>
 80024de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe ff43 	bl	800136c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e122      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024f8:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ee      	beq.n	80024e2 <HAL_RCC_OscConfig+0x5b6>
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7fe ff31 	bl	800136c <HAL_GetTick>
 800250a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe ff2d 	bl	800136c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e10c      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002524:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8101 	beq.w	800273c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800253a:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002542:	2b18      	cmp	r3, #24
 8002544:	f000 80bc 	beq.w	80026c0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2b02      	cmp	r3, #2
 800254e:	f040 8095 	bne.w	800267c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7fe ff05 	bl	800136c <HAL_GetTick>
 8002562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002566:	f7fe ff01 	bl	800136c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0e2      	b.n	800273e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002578:	4b4e      	ldr	r3, [pc, #312]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002584:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002588:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <HAL_RCC_OscConfig+0x78c>)
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	430a      	orrs	r2, r1
 8002598:	4946      	ldr	r1, [pc, #280]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800259a:	4313      	orrs	r3, r2
 800259c:	628b      	str	r3, [r1, #40]	; 0x28
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	3b01      	subs	r3, #1
 80025ae:	025b      	lsls	r3, r3, #9
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	3b01      	subs	r3, #1
 80025ba:	041b      	lsls	r3, r3, #16
 80025bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	3b01      	subs	r3, #1
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80025ce:	4939      	ldr	r1, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80025d4:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	4a36      	ldr	r2, [pc, #216]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80025e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <HAL_RCC_OscConfig+0x790>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025ec:	00d2      	lsls	r2, r2, #3
 80025ee:	4931      	ldr	r1, [pc, #196]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025f4:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	f023 020c 	bic.w	r2, r3, #12
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	492c      	ldr	r1, [pc, #176]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002602:	4313      	orrs	r3, r2
 8002604:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	f023 0202 	bic.w	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4928      	ldr	r1, [pc, #160]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002614:	4313      	orrs	r3, r2
 8002616:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002618:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	4a22      	ldr	r2, [pc, #136]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800262a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002630:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fe8a 	bl	800136c <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe fe86 	bl	800136c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e067      	b.n	800273e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x730>
 800267a:	e05f      	b.n	800273c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 8002682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fe70 	bl	800136c <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fe6c 	bl	800136c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e04d      	b.n	800273e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <HAL_RCC_OscConfig+0x788>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x764>
 80026ae:	e045      	b.n	800273c <HAL_RCC_OscConfig+0x810>
 80026b0:	58024800 	.word	0x58024800
 80026b4:	58024400 	.word	0x58024400
 80026b8:	fffffc0c 	.word	0xfffffc0c
 80026bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_RCC_OscConfig+0x81c>)
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_RCC_OscConfig+0x81c>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d031      	beq.n	8002738 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f003 0203 	and.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d12a      	bne.n	8002738 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d122      	bne.n	8002738 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d11a      	bne.n	8002738 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	0a5b      	lsrs	r3, r3, #9
 8002706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d111      	bne.n	8002738 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d108      	bne.n	8002738 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	0e1b      	lsrs	r3, r3, #24
 800272a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3730      	adds	r7, #48	; 0x30
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	58024400 	.word	0x58024400

0800274c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e19c      	b.n	8002a9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b8a      	ldr	r3, [pc, #552]	; (800298c <HAL_RCC_ClockConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b87      	ldr	r3, [pc, #540]	; (800298c <HAL_RCC_ClockConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 020f 	bic.w	r2, r3, #15
 8002776:	4985      	ldr	r1, [pc, #532]	; (800298c <HAL_RCC_ClockConfig+0x240>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b83      	ldr	r3, [pc, #524]	; (800298c <HAL_RCC_ClockConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e184      	b.n	8002a9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	4b7b      	ldr	r3, [pc, #492]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d908      	bls.n	80027be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027ac:	4b78      	ldr	r3, [pc, #480]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4975      	ldr	r1, [pc, #468]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d010      	beq.n	80027ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	4b70      	ldr	r3, [pc, #448]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d908      	bls.n	80027ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027da:	4b6d      	ldr	r3, [pc, #436]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	496a      	ldr	r1, [pc, #424]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	4b64      	ldr	r3, [pc, #400]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002804:	429a      	cmp	r2, r3
 8002806:	d908      	bls.n	800281a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002808:	4b61      	ldr	r3, [pc, #388]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	495e      	ldr	r1, [pc, #376]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002816:	4313      	orrs	r3, r2
 8002818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d010      	beq.n	8002848 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002832:	429a      	cmp	r2, r3
 8002834:	d908      	bls.n	8002848 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002836:	4b56      	ldr	r3, [pc, #344]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4953      	ldr	r1, [pc, #332]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002844:	4313      	orrs	r3, r2
 8002846:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d010      	beq.n	8002876 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	429a      	cmp	r2, r3
 8002862:	d908      	bls.n	8002876 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f023 020f 	bic.w	r2, r3, #15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4947      	ldr	r1, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002872:	4313      	orrs	r3, r2
 8002874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d055      	beq.n	800292e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002882:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4940      	ldr	r1, [pc, #256]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002890:	4313      	orrs	r3, r2
 8002892:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d107      	bne.n	80028ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800289c:	4b3c      	ldr	r3, [pc, #240]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d121      	bne.n	80028ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0f6      	b.n	8002a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d115      	bne.n	80028ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0ea      	b.n	8002a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028cc:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0de      	b.n	8002a9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028dc:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0d6      	b.n	8002a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f023 0207 	bic.w	r2, r3, #7
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4925      	ldr	r1, [pc, #148]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7fe fd35 	bl	800136c <HAL_GetTick>
 8002902:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002904:	e00a      	b.n	800291c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002906:	f7fe fd31 	bl	800136c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e0be      	b.n	8002a9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	429a      	cmp	r2, r3
 800292c:	d1eb      	bne.n	8002906 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d010      	beq.n	800295c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	429a      	cmp	r2, r3
 8002948:	d208      	bcs.n	800295c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f023 020f 	bic.w	r2, r3, #15
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_RCC_ClockConfig+0x244>)
 8002958:	4313      	orrs	r3, r2
 800295a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d214      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_RCC_ClockConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 020f 	bic.w	r2, r3, #15
 8002972:	4906      	ldr	r1, [pc, #24]	; (800298c <HAL_RCC_ClockConfig+0x240>)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_RCC_ClockConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e086      	b.n	8002a9a <HAL_RCC_ClockConfig+0x34e>
 800298c:	52002000 	.word	0x52002000
 8002990:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d208      	bcs.n	80029c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029b0:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	4939      	ldr	r1, [pc, #228]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029da:	429a      	cmp	r2, r3
 80029dc:	d208      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	492e      	ldr	r1, [pc, #184]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d208      	bcs.n	8002a1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4922      	ldr	r1, [pc, #136]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d010      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d208      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4917      	ldr	r1, [pc, #92]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a4c:	f000 f834 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a50:	4601      	mov	r1, r0
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_RCC_ClockConfig+0x35c>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	fa21 f303 	lsr.w	r3, r1, r3
 8002a68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HAL_RCC_ClockConfig+0x358>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <HAL_RCC_ClockConfig+0x35c>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <HAL_RCC_ClockConfig+0x360>)
 8002a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a84:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <HAL_RCC_ClockConfig+0x364>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x368>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fc22 	bl	80012d8 <HAL_InitTick>
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	080088a8 	.word	0x080088a8
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002abe:	4baf      	ldr	r3, [pc, #700]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ac6:	2b18      	cmp	r3, #24
 8002ac8:	f200 814e 	bhi.w	8002d68 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002acc:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002b39 	.word	0x08002b39
 8002ad8:	08002d69 	.word	0x08002d69
 8002adc:	08002d69 	.word	0x08002d69
 8002ae0:	08002d69 	.word	0x08002d69
 8002ae4:	08002d69 	.word	0x08002d69
 8002ae8:	08002d69 	.word	0x08002d69
 8002aec:	08002d69 	.word	0x08002d69
 8002af0:	08002d69 	.word	0x08002d69
 8002af4:	08002b5f 	.word	0x08002b5f
 8002af8:	08002d69 	.word	0x08002d69
 8002afc:	08002d69 	.word	0x08002d69
 8002b00:	08002d69 	.word	0x08002d69
 8002b04:	08002d69 	.word	0x08002d69
 8002b08:	08002d69 	.word	0x08002d69
 8002b0c:	08002d69 	.word	0x08002d69
 8002b10:	08002d69 	.word	0x08002d69
 8002b14:	08002b65 	.word	0x08002b65
 8002b18:	08002d69 	.word	0x08002d69
 8002b1c:	08002d69 	.word	0x08002d69
 8002b20:	08002d69 	.word	0x08002d69
 8002b24:	08002d69 	.word	0x08002d69
 8002b28:	08002d69 	.word	0x08002d69
 8002b2c:	08002d69 	.word	0x08002d69
 8002b30:	08002d69 	.word	0x08002d69
 8002b34:	08002b6b 	.word	0x08002b6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b38:	4b90      	ldr	r3, [pc, #576]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b44:	4b8d      	ldr	r3, [pc, #564]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	4a8c      	ldr	r2, [pc, #560]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002b56:	e10a      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b58:	4b89      	ldr	r3, [pc, #548]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b5a:	61bb      	str	r3, [r7, #24]
    break;
 8002b5c:	e107      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b5e:	4b89      	ldr	r3, [pc, #548]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002b60:	61bb      	str	r3, [r7, #24]
    break;
 8002b62:	e104      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002b64:	4b88      	ldr	r3, [pc, #544]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002b66:	61bb      	str	r3, [r7, #24]
    break;
 8002b68:	e101      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b6a:	4b84      	ldr	r3, [pc, #528]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b74:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b80:	4b7e      	ldr	r3, [pc, #504]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b8a:	4b7c      	ldr	r3, [pc, #496]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	08db      	lsrs	r3, r3, #3
 8002b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80da 	beq.w	8002d62 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d05a      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x1b2>
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d302      	bcc.n	8002bbe <HAL_RCC_GetSysClockFreq+0x106>
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d078      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f6>
 8002bbc:	e099      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bbe:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d02d      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bca:	4b6c      	ldr	r3, [pc, #432]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	08db      	lsrs	r3, r3, #3
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	4a6a      	ldr	r2, [pc, #424]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bf4:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c04:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c08:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c20:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002c24:	e087      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c30:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002d90 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c48:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c4c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c68:	e065      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c74:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002d94 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c7c:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c90:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cac:	e043      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002d98 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cd4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002cd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ce0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cf0:	e021      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002d94 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002d00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d14:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d18:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002d1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d34:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	0a5b      	lsrs	r3, r3, #9
 8002d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d40:	3301      	adds	r3, #1
 8002d42:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d5a:	ee17 3a90 	vmov	r3, s15
 8002d5e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002d60:	e005      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
    break;
 8002d66:	e002      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002d6a:	61bb      	str	r3, [r7, #24]
    break;
 8002d6c:	bf00      	nop
  }

  return sysclockfreq;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3724      	adds	r7, #36	; 0x24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	03d09000 	.word	0x03d09000
 8002d84:	003d0900 	.word	0x003d0900
 8002d88:	02625a00 	.word	0x02625a00
 8002d8c:	46000000 	.word	0x46000000
 8002d90:	4c742400 	.word	0x4c742400
 8002d94:	4a742400 	.word	0x4a742400
 8002d98:	4c189680 	.word	0x4c189680

08002d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002da2:	f7ff fe89 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002da6:	4601      	mov	r1, r0
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCC_GetHCLKFreq+0x50>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	fa21 f303 	lsr.w	r3, r1, r3
 8002dbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_GetHCLKFreq+0x50>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002dd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dda:	4a07      	ldr	r2, [pc, #28]	; (8002df8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58024400 	.word	0x58024400
 8002df0:	080088a8 	.word	0x080088a8
 8002df4:	20000004 	.word	0x20000004
 8002df8:	20000000 	.word	0x20000000

08002dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e00:	f7ff ffcc 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002e04:	4601      	mov	r1, r0
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	58024400 	.word	0x58024400
 8002e24:	080088a8 	.word	0x080088a8

08002e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e2c:	f7ff ffb6 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002e30:	4601      	mov	r1, r0
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	080088a8 	.word	0x080088a8

08002e54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e60:	2300      	movs	r3, #0
 8002e62:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d03d      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e78:	d013      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7e:	d802      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e84:	e01f      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e8a:	d013      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e90:	d01c      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002e92:	e018      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e94:	4baf      	ldr	r3, [pc, #700]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	4aae      	ldr	r2, [pc, #696]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ea0:	e015      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 f96f 	bl	800418c <RCCEx_PLL2_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002eb2:	e00c      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3324      	adds	r3, #36	; 0x24
 8002eb8:	2102      	movs	r1, #2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 fa18 	bl	80042f0 <RCCEx_PLL3_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ec4:	e003      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8002eca:	e000      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002ed4:	4b9f      	ldr	r3, [pc, #636]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ee0:	499c      	ldr	r1, [pc, #624]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ee6:	e001      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d03d      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d826      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f1d 	.word	0x08002f1d
 8002f0c:	08002f2b 	.word	0x08002f2b
 8002f10:	08002f3d 	.word	0x08002f3d
 8002f14:	08002f55 	.word	0x08002f55
 8002f18:	08002f55 	.word	0x08002f55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f1c:	4b8d      	ldr	r3, [pc, #564]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	4a8c      	ldr	r2, [pc, #560]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f28:	e015      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 f92b 	bl	800418c <RCCEx_PLL2_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3324      	adds	r3, #36	; 0x24
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 f9d4 	bl	80042f0 <RCCEx_PLL3_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
      break;
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f5c:	4b7d      	ldr	r3, [pc, #500]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f60:	f023 0207 	bic.w	r2, r3, #7
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	497a      	ldr	r1, [pc, #488]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	650b      	str	r3, [r1, #80]	; 0x50
 8002f6e:	e001      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03e      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	2b80      	cmp	r3, #128	; 0x80
 8002f86:	d01c      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002f88:	2b80      	cmp	r3, #128	; 0x80
 8002f8a:	d804      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d00d      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002f94:	e01e      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002f96:	2bc0      	cmp	r3, #192	; 0xc0
 8002f98:	d01f      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9e:	d01e      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002fa0:	e018      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	4a6b      	ldr	r2, [pc, #428]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002fae:	e017      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 f8e8 	bl	800418c <RCCEx_PLL2_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002fc0:	e00e      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3324      	adds	r3, #36	; 0x24
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 f991 	bl	80042f0 <RCCEx_PLL3_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002fd2:	e005      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd8:	e002      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	4958      	ldr	r1, [pc, #352]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	650b      	str	r3, [r1, #80]	; 0x50
 8002ff8:	e001      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003006:	2b00      	cmp	r3, #0
 8003008:	d044      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003014:	d01f      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301a:	d805      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003024:	d00e      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003026:	e01f      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003028:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800302c:	d01f      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800302e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003032:	d01e      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003034:	e018      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	4a46      	ldr	r2, [pc, #280]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800303c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003042:	e017      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f001 f89e 	bl	800418c <RCCEx_PLL2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003054:	e00e      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3324      	adds	r3, #36	; 0x24
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f001 f947 	bl	80042f0 <RCCEx_PLL3_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003066:	e005      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	75fb      	strb	r3, [r7, #23]
      break;
 800306c:	e002      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003088:	4932      	ldr	r1, [pc, #200]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800308a:	4313      	orrs	r3, r2
 800308c:	658b      	str	r3, [r1, #88]	; 0x58
 800308e:	e001      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309c:	2b00      	cmp	r3, #0
 800309e:	d044      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030aa:	d01f      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80030ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030b0:	d805      	bhi.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80030b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ba:	d00e      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x286>
 80030bc:	e01f      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80030be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030c2:	d01f      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80030c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030c8:	d01e      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80030ca:	e018      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030d8:	e017      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f001 f853 	bl	800418c <RCCEx_PLL2_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80030ea:	e00e      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3324      	adds	r3, #36	; 0x24
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 f8fc 	bl	80042f0 <RCCEx_PLL3_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030fc:	e005      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
      break;
 8003102:	e002      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003104:	bf00      	nop
 8003106:	e000      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800311e:	490d      	ldr	r1, [pc, #52]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003120:	4313      	orrs	r3, r2
 8003122:	658b      	str	r3, [r1, #88]	; 0x58
 8003124:	e001      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d035      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313a:	2b10      	cmp	r3, #16
 800313c:	d00c      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800313e:	2b10      	cmp	r3, #16
 8003140:	d802      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01b      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003146:	e017      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d00c      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d018      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003150:	e012      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003152:	bf00      	nop
 8003154:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003158:	4baf      	ldr	r3, [pc, #700]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	4aae      	ldr	r2, [pc, #696]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800315e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003164:	e00e      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	2102      	movs	r1, #2
 800316c:	4618      	mov	r0, r3
 800316e:	f001 f80d 	bl	800418c <RCCEx_PLL2_Config>
 8003172:	4603      	mov	r3, r0
 8003174:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003176:	e005      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	75fb      	strb	r3, [r7, #23]
      break;
 800317c:	e002      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800318a:	4ba3      	ldr	r3, [pc, #652]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	49a0      	ldr	r1, [pc, #640]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800319c:	e001      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d042      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b6:	d01f      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031bc:	d805      	bhi.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c6:	d00e      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80031c8:	e01f      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80031ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031ce:	d01f      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80031d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031d4:	d01e      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80031d6:	e018      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d8:	4b8f      	ldr	r3, [pc, #572]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	4a8e      	ldr	r2, [pc, #568]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80031de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80031e4:	e017      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 ffcd 	bl	800418c <RCCEx_PLL2_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80031f6:	e00e      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3324      	adds	r3, #36	; 0x24
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 f876 	bl	80042f0 <RCCEx_PLL3_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003208:	e005      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	75fb      	strb	r3, [r7, #23]
      break;
 800320e:	e002      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003210:	bf00      	nop
 8003212:	e000      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003216:	7dfb      	ldrb	r3, [r7, #23]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800321c:	4b7e      	ldr	r3, [pc, #504]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800321e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003220:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	497b      	ldr	r1, [pc, #492]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	650b      	str	r3, [r1, #80]	; 0x50
 800322e:	e001      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d042      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003248:	d01b      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800324a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800324e:	d805      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d022      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800325a:	e01b      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800325c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003260:	d01d      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003266:	d01c      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003268:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800326c:	d01b      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800326e:	e011      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	2101      	movs	r1, #1
 8003276:	4618      	mov	r0, r3
 8003278:	f000 ff88 	bl	800418c <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003280:	e012      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3324      	adds	r3, #36	; 0x24
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f831 	bl	80042f0 <RCCEx_PLL3_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003292:	e009      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	75fb      	strb	r3, [r7, #23]
      break;
 8003298:	e006      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800329a:	bf00      	nop
 800329c:	e004      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800329e:	bf00      	nop
 80032a0:	e002      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80032a2:	bf00      	nop
 80032a4:	e000      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80032a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032ae:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80032b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	4957      	ldr	r1, [pc, #348]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	650b      	str	r3, [r1, #80]	; 0x50
 80032c0:	e001      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d044      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032dc:	d01b      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80032de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e2:	d805      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d022      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80032e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80032ee:	e01b      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d01d      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80032f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032fa:	d01c      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80032fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003300:	d01b      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003302:	e011      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f000 ff3e 	bl	800418c <RCCEx_PLL2_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003314:	e012      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3324      	adds	r3, #36	; 0x24
 800331a:	2101      	movs	r1, #1
 800331c:	4618      	mov	r0, r3
 800331e:	f000 ffe7 	bl	80042f0 <RCCEx_PLL3_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003326:	e009      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
      break;
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800332e:	bf00      	nop
 8003330:	e004      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800333a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003342:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003350:	4931      	ldr	r1, [pc, #196]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	658b      	str	r3, [r1, #88]	; 0x58
 8003356:	e001      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d02d      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800336c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003370:	d005      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003376:	d009      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800337c:	e00f      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	4a25      	ldr	r2, [pc, #148]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003388:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800338a:	e00c      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	2101      	movs	r1, #1
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fefa 	bl	800418c <RCCEx_PLL2_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
      break;
 80033a2:	e000      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80033a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80033ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b8:	4917      	ldr	r1, [pc, #92]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	650b      	str	r3, [r1, #80]	; 0x50
 80033be:	e001      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d035      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d81b      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	0800341d 	.word	0x0800341d
 80033e4:	080033f1 	.word	0x080033f1
 80033e8:	080033ff 	.word	0x080033ff
 80033ec:	0800341d 	.word	0x0800341d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	4a08      	ldr	r2, [pc, #32]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80033fc:	e00f      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fec1 	bl	800418c <RCCEx_PLL2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800340e:	e006      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
      break;
 8003414:	e003      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003416:	bf00      	nop
 8003418:	58024400 	.word	0x58024400
      break;
 800341c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003424:	4bba      	ldr	r3, [pc, #744]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003428:	f023 0203 	bic.w	r2, r3, #3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	49b7      	ldr	r1, [pc, #732]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003436:	e001      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8086 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344a:	4bb2      	ldr	r3, [pc, #712]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4ab1      	ldr	r2, [pc, #708]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003456:	f7fd ff89 	bl	800136c <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800345c:	e009      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345e:	f7fd ff85 	bl	800136c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d902      	bls.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	75fb      	strb	r3, [r7, #23]
        break;
 8003470:	e005      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003472:	4ba8      	ldr	r3, [pc, #672]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ef      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d166      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003484:	4ba2      	ldr	r3, [pc, #648]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800348e:	4053      	eors	r3, r2
 8003490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003494:	2b00      	cmp	r3, #0
 8003496:	d013      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003498:	4b9d      	ldr	r3, [pc, #628]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034a2:	4b9b      	ldr	r3, [pc, #620]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a9a      	ldr	r2, [pc, #616]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ae:	4b98      	ldr	r3, [pc, #608]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a97      	ldr	r2, [pc, #604]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80034ba:	4a95      	ldr	r2, [pc, #596]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d115      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fd ff4e 	bl	800136c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034d2:	e00b      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fd ff4a 	bl	800136c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d902      	bls.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	75fb      	strb	r3, [r7, #23]
            break;
 80034ea:	e005      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ec:	4b88      	ldr	r3, [pc, #544]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ed      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d126      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800350c:	d10d      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800350e:	4b80      	ldr	r3, [pc, #512]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800351c:	0919      	lsrs	r1, r3, #4
 800351e:	4b7e      	ldr	r3, [pc, #504]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003520:	400b      	ands	r3, r1
 8003522:	497b      	ldr	r1, [pc, #492]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003524:	4313      	orrs	r3, r2
 8003526:	610b      	str	r3, [r1, #16]
 8003528:	e005      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800352a:	4b79      	ldr	r3, [pc, #484]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	4a78      	ldr	r2, [pc, #480]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003530:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003534:	6113      	str	r3, [r2, #16]
 8003536:	4b76      	ldr	r3, [pc, #472]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003538:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	4972      	ldr	r1, [pc, #456]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	670b      	str	r3, [r1, #112]	; 0x70
 800354a:	e004      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	75bb      	strb	r3, [r7, #22]
 8003550:	e001      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d07d      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003566:	2b28      	cmp	r3, #40	; 0x28
 8003568:	d866      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800356a:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	0800363f 	.word	0x0800363f
 8003574:	08003639 	.word	0x08003639
 8003578:	08003639 	.word	0x08003639
 800357c:	08003639 	.word	0x08003639
 8003580:	08003639 	.word	0x08003639
 8003584:	08003639 	.word	0x08003639
 8003588:	08003639 	.word	0x08003639
 800358c:	08003639 	.word	0x08003639
 8003590:	08003615 	.word	0x08003615
 8003594:	08003639 	.word	0x08003639
 8003598:	08003639 	.word	0x08003639
 800359c:	08003639 	.word	0x08003639
 80035a0:	08003639 	.word	0x08003639
 80035a4:	08003639 	.word	0x08003639
 80035a8:	08003639 	.word	0x08003639
 80035ac:	08003639 	.word	0x08003639
 80035b0:	08003627 	.word	0x08003627
 80035b4:	08003639 	.word	0x08003639
 80035b8:	08003639 	.word	0x08003639
 80035bc:	08003639 	.word	0x08003639
 80035c0:	08003639 	.word	0x08003639
 80035c4:	08003639 	.word	0x08003639
 80035c8:	08003639 	.word	0x08003639
 80035cc:	08003639 	.word	0x08003639
 80035d0:	0800363f 	.word	0x0800363f
 80035d4:	08003639 	.word	0x08003639
 80035d8:	08003639 	.word	0x08003639
 80035dc:	08003639 	.word	0x08003639
 80035e0:	08003639 	.word	0x08003639
 80035e4:	08003639 	.word	0x08003639
 80035e8:	08003639 	.word	0x08003639
 80035ec:	08003639 	.word	0x08003639
 80035f0:	0800363f 	.word	0x0800363f
 80035f4:	08003639 	.word	0x08003639
 80035f8:	08003639 	.word	0x08003639
 80035fc:	08003639 	.word	0x08003639
 8003600:	08003639 	.word	0x08003639
 8003604:	08003639 	.word	0x08003639
 8003608:	08003639 	.word	0x08003639
 800360c:	08003639 	.word	0x08003639
 8003610:	0800363f 	.word	0x0800363f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fdb6 	bl	800418c <RCCEx_PLL2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003624:	e00c      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3324      	adds	r3, #36	; 0x24
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fe5f 	bl	80042f0 <RCCEx_PLL3_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003636:	e003      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	75fb      	strb	r3, [r7, #23]
      break;
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800363e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003646:	4b32      	ldr	r3, [pc, #200]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003652:	492f      	ldr	r1, [pc, #188]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003654:	4313      	orrs	r3, r2
 8003656:	654b      	str	r3, [r1, #84]	; 0x54
 8003658:	e001      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d037      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366e:	2b05      	cmp	r3, #5
 8003670:	d820      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003672:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036bb 	.word	0x080036bb
 800367c:	08003691 	.word	0x08003691
 8003680:	080036a3 	.word	0x080036a3
 8003684:	080036bb 	.word	0x080036bb
 8003688:	080036bb 	.word	0x080036bb
 800368c:	080036bb 	.word	0x080036bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	2101      	movs	r1, #1
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fd78 	bl	800418c <RCCEx_PLL2_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80036a0:	e00c      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3324      	adds	r3, #36	; 0x24
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fe21 	bl	80042f0 <RCCEx_PLL3_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80036b2:	e003      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]
      break;
 80036b8:	e000      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80036ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036c2:	4b13      	ldr	r3, [pc, #76]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f023 0207 	bic.w	r2, r3, #7
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	4910      	ldr	r1, [pc, #64]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	654b      	str	r3, [r1, #84]	; 0x54
 80036d4:	e001      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d040      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d827      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80036f0:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	08003747 	.word	0x08003747
 80036fc:	0800371d 	.word	0x0800371d
 8003700:	0800372f 	.word	0x0800372f
 8003704:	08003747 	.word	0x08003747
 8003708:	08003747 	.word	0x08003747
 800370c:	08003747 	.word	0x08003747
 8003710:	58024400 	.word	0x58024400
 8003714:	58024800 	.word	0x58024800
 8003718:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2101      	movs	r1, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fd32 	bl	800418c <RCCEx_PLL2_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800372c:	e00c      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3324      	adds	r3, #36	; 0x24
 8003732:	2101      	movs	r1, #1
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fddb 	bl	80042f0 <RCCEx_PLL3_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800373e:	e003      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	75fb      	strb	r3, [r7, #23]
      break;
 8003744:	e000      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800374e:	4bb2      	ldr	r3, [pc, #712]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	f023 0207 	bic.w	r2, r3, #7
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	49ae      	ldr	r1, [pc, #696]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	658b      	str	r3, [r1, #88]	; 0x58
 8003762:	e001      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d044      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800377a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377e:	d01b      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003784:	d805      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d022      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800378a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003790:	e01b      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d01d      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800379c:	d01c      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800379e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037a2:	d01b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x988>
 80037a4:	e011      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fced 	bl	800418c <RCCEx_PLL2_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80037b6:	e012      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3324      	adds	r3, #36	; 0x24
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fd96 	bl	80042f0 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80037c8:	e009      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
      break;
 80037ce:	e006      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80037d0:	bf00      	nop
 80037d2:	e004      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80037d4:	bf00      	nop
 80037d6:	e002      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80037dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037e4:	4b8c      	ldr	r3, [pc, #560]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f2:	4989      	ldr	r1, [pc, #548]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	654b      	str	r3, [r1, #84]	; 0x54
 80037f8:	e001      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d044      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003814:	d01b      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381a:	d805      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d022      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003826:	e01b      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	d01d      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800382e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003832:	d01c      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003838:	d01b      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800383a:	e011      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fca2 	bl	800418c <RCCEx_PLL2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800384c:	e012      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3324      	adds	r3, #36	; 0x24
 8003852:	2102      	movs	r1, #2
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fd4b 	bl	80042f0 <RCCEx_PLL3_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800385e:	e009      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	75fb      	strb	r3, [r7, #23]
      break;
 8003864:	e006      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003866:	bf00      	nop
 8003868:	e004      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800387a:	4b67      	ldr	r3, [pc, #412]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003888:	4963      	ldr	r1, [pc, #396]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	658b      	str	r3, [r1, #88]	; 0x58
 800388e:	e001      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b00      	cmp	r3, #0
 800389e:	d044      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038aa:	d01b      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80038ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b0:	d805      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d022      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80038b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80038bc:	e01b      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80038be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c2:	d01d      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80038c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038c8:	d01c      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80038ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80038ce:	d01b      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80038d0:	e011      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fc57 	bl	800418c <RCCEx_PLL2_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80038e2:	e012      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3324      	adds	r3, #36	; 0x24
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fd00 	bl	80042f0 <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80038f4:	e009      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
      break;
 80038fa:	e006      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80038fc:	bf00      	nop
 80038fe:	e004      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003900:	bf00      	nop
 8003902:	e002      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003904:	bf00      	nop
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800391e:	493e      	ldr	r1, [pc, #248]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	658b      	str	r3, [r1, #88]	; 0x58
 8003924:	e001      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800393c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003940:	d10a      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3324      	adds	r3, #36	; 0x24
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fcd1 	bl	80042f0 <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003958:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003966:	492c      	ldr	r1, [pc, #176]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003982:	d10a      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3324      	adds	r3, #36	; 0x24
 8003988:	2102      	movs	r1, #2
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fcb0 	bl	80042f0 <RCCEx_PLL3_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800399a:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a8:	491b      	ldr	r1, [pc, #108]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d032      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d00d      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80039c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ca:	d016      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d111      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fbd8 	bl	800418c <RCCEx_PLL2_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80039e0:	e00c      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3324      	adds	r3, #36	; 0x24
 80039e6:	2102      	movs	r1, #2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fc81 	bl	80042f0 <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80039f2:	e003      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
      break;
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80039fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a10:	4901      	ldr	r1, [pc, #4]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	658b      	str	r3, [r1, #88]	; 0x58
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02f      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a36:	d00c      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003a38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a3c:	d015      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a42:	d10f      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b79      	ldr	r3, [pc, #484]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a78      	ldr	r2, [pc, #480]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003a50:	e00c      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3324      	adds	r3, #36	; 0x24
 8003a56:	2101      	movs	r1, #1
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fc49 	bl	80042f0 <RCCEx_PLL3_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003a62:	e003      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
      break;
 8003a68:	e000      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8003a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a72:	4b6e      	ldr	r3, [pc, #440]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a80:	496a      	ldr	r1, [pc, #424]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	654b      	str	r3, [r1, #84]	; 0x54
 8003a86:	e001      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d029      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa4:	d007      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003aa6:	e00f      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa8:	4b60      	ldr	r3, [pc, #384]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	4a5f      	ldr	r2, [pc, #380]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ab4:	e00b      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2102      	movs	r1, #2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fb65 	bl	800418c <RCCEx_PLL2_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
      break;
 8003acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae0:	4952      	ldr	r1, [pc, #328]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ae6:	e001      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3324      	adds	r3, #36	; 0x24
 8003afc:	2102      	movs	r1, #2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fbf6 	bl	80042f0 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d02f      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b22:	d00c      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b28:	d802      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d011      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003b2e:	e00d      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d00f      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b3a:	d00e      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	4a3a      	ldr	r2, [pc, #232]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003b4a:	e007      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b50:	e004      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003b52:	bf00      	nop
 8003b54:	e002      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b62:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b6e:	492f      	ldr	r1, [pc, #188]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	654b      	str	r3, [r1, #84]	; 0x54
 8003b74:	e001      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b86:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	4926      	ldr	r1, [pc, #152]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ba4:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bb2:	491e      	ldr	r1, [pc, #120]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd0:	4916      	ldr	r1, [pc, #88]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	4a11      	ldr	r2, [pc, #68]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003be8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bec:	6113      	str	r3, [r2, #16]
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003bf8:	490c      	ldr	r1, [pc, #48]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	da08      	bge.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	4906      	ldr	r1, [pc, #24]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003c18:	7dbb      	ldrb	r3, [r7, #22]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	58024400 	.word	0x58024400

08003c30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003c34:	f7ff f8b2 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8003c38:	4601      	mov	r1, r0
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	58024400 	.word	0x58024400
 8003c58:	080088a8 	.word	0x080088a8

08003c5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c64:	4b9d      	ldr	r3, [pc, #628]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003c6e:	4b9b      	ldr	r3, [pc, #620]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	0b1b      	lsrs	r3, r3, #12
 8003c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c7a:	4b98      	ldr	r3, [pc, #608]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c86:	4b95      	ldr	r3, [pc, #596]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	08db      	lsrs	r3, r3, #3
 8003c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 810a 	beq.w	8003ebe <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d05a      	beq.n	8003d66 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d302      	bcc.n	8003cba <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d078      	beq.n	8003daa <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003cb8:	e099      	b.n	8003dee <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cba:	4b88      	ldr	r3, [pc, #544]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d02d      	beq.n	8003d22 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cc6:	4b85      	ldr	r3, [pc, #532]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	08db      	lsrs	r3, r3, #3
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	4a83      	ldr	r2, [pc, #524]	; (8003ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf0:	4b7a      	ldr	r3, [pc, #488]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf8:	ee07 3a90 	vmov	s15, r3
 8003cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d00:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d04:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003d20:	e087      	b.n	8003e32 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d34:	4b69      	ldr	r3, [pc, #420]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3c:	ee07 3a90 	vmov	s15, r3
 8003d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d44:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d48:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d64:	e065      	b.n	8003e32 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	ee07 3a90 	vmov	s15, r3
 8003d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d70:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d78:	4b58      	ldr	r3, [pc, #352]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d88:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d8c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003da8:	e043      	b.n	8003e32 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dbc:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dd0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dec:	e021      	b.n	8003e32 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	ee07 3a90 	vmov	s15, r3
 8003e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e10:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e14:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e30:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003e32:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	0a5b      	lsrs	r3, r3, #9
 8003e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e58:	ee17 2a90 	vmov	r2, s15
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003e60:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e86:	ee17 2a90 	vmov	r2, s15
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	0e1b      	lsrs	r3, r3, #24
 8003e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb4:	ee17 2a90 	vmov	r2, s15
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	3724      	adds	r7, #36	; 0x24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	03d09000 	.word	0x03d09000
 8003ee4:	46000000 	.word	0x46000000
 8003ee8:	4c742400 	.word	0x4c742400
 8003eec:	4a742400 	.word	0x4a742400
 8003ef0:	4c189680 	.word	0x4c189680

08003ef4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b089      	sub	sp, #36	; 0x24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003efc:	4b9d      	ldr	r3, [pc, #628]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003f06:	4b9b      	ldr	r3, [pc, #620]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	0d1b      	lsrs	r3, r3, #20
 8003f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f12:	4b98      	ldr	r3, [pc, #608]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003f1e:	4b95      	ldr	r3, [pc, #596]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	08db      	lsrs	r3, r3, #3
 8003f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 810a 	beq.w	8004156 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d05a      	beq.n	8003ffe <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d302      	bcc.n	8003f52 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d078      	beq.n	8004042 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003f50:	e099      	b.n	8004086 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f52:	4b88      	ldr	r3, [pc, #544]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02d      	beq.n	8003fba <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f5e:	4b85      	ldr	r3, [pc, #532]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	08db      	lsrs	r3, r3, #3
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	4a83      	ldr	r2, [pc, #524]	; (8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f88:	4b7a      	ldr	r3, [pc, #488]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f98:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003fb8:	e087      	b.n	80040ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	ee07 3a90 	vmov	s15, r3
 8003fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fcc:	4b69      	ldr	r3, [pc, #420]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd4:	ee07 3a90 	vmov	s15, r3
 8003fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fe0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ffc:	e065      	b.n	80040ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	ee07 3a90 	vmov	s15, r3
 8004004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004008:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800400c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004010:	4b58      	ldr	r3, [pc, #352]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004020:	ed97 6a03 	vldr	s12, [r7, #12]
 8004024:	eddf 5a55 	vldr	s11, [pc, #340]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004040:	e043      	b.n	80040ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004188 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004054:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405c:	ee07 3a90 	vmov	s15, r3
 8004060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004064:	ed97 6a03 	vldr	s12, [r7, #12]
 8004068:	eddf 5a44 	vldr	s11, [pc, #272]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800406c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004080:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004084:	e021      	b.n	80040ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004090:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004184 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004098:	4b36      	ldr	r3, [pc, #216]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80040b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040c8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	0a5b      	lsrs	r3, r3, #9
 80040d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d4:	ee07 3a90 	vmov	s15, r3
 80040d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80040e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f0:	ee17 2a90 	vmov	r2, s15
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80040f8:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800410e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004112:	edd7 6a07 	vldr	s13, [r7, #28]
 8004116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800411a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411e:	ee17 2a90 	vmov	r2, s15
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004126:	4b13      	ldr	r3, [pc, #76]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	0e1b      	lsrs	r3, r3, #24
 800412c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800413c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004140:	edd7 6a07 	vldr	s13, [r7, #28]
 8004144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414c:	ee17 2a90 	vmov	r2, s15
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004154:	e008      	b.n	8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	3724      	adds	r7, #36	; 0x24
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	58024400 	.word	0x58024400
 8004178:	03d09000 	.word	0x03d09000
 800417c:	46000000 	.word	0x46000000
 8004180:	4c742400 	.word	0x4c742400
 8004184:	4a742400 	.word	0x4a742400
 8004188:	4c189680 	.word	0x4c189680

0800418c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800419a:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d101      	bne.n	80041aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e099      	b.n	80042de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041aa:	4b4f      	ldr	r3, [pc, #316]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a4e      	ldr	r2, [pc, #312]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80041b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b6:	f7fd f8d9 	bl	800136c <HAL_GetTick>
 80041ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041be:	f7fd f8d5 	bl	800136c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e086      	b.n	80042de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041d0:	4b45      	ldr	r3, [pc, #276]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041dc:	4b42      	ldr	r3, [pc, #264]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	031b      	lsls	r3, r3, #12
 80041ea:	493f      	ldr	r1, [pc, #252]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	628b      	str	r3, [r1, #40]	; 0x28
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	3b01      	subs	r3, #1
 8004200:	025b      	lsls	r3, r3, #9
 8004202:	b29b      	uxth	r3, r3
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	3b01      	subs	r3, #1
 800420c:	041b      	lsls	r3, r3, #16
 800420e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	3b01      	subs	r3, #1
 800421a:	061b      	lsls	r3, r3, #24
 800421c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004220:	4931      	ldr	r1, [pc, #196]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004226:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	492d      	ldr	r1, [pc, #180]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004238:	4b2b      	ldr	r3, [pc, #172]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	f023 0220 	bic.w	r2, r3, #32
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	4928      	ldr	r1, [pc, #160]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004250:	f023 0310 	bic.w	r3, r3, #16
 8004254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800425a:	4b24      	ldr	r3, [pc, #144]	; (80042ec <RCCEx_PLL2_Config+0x160>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	69d2      	ldr	r2, [r2, #28]
 8004262:	00d2      	lsls	r2, r2, #3
 8004264:	4920      	ldr	r1, [pc, #128]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004266:	4313      	orrs	r3, r2
 8004268:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800426a:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004270:	f043 0310 	orr.w	r3, r3, #16
 8004274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004282:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004286:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004288:	e00f      	b.n	80042aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004290:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	4a14      	ldr	r2, [pc, #80]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 8004296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800429a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800429c:	e005      	b.n	80042aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	4a11      	ldr	r2, [pc, #68]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80042a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042aa:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80042b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b6:	f7fd f859 	bl	800136c <HAL_GetTick>
 80042ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042be:	f7fd f855 	bl	800136c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e006      	b.n	80042de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <RCCEx_PLL2_Config+0x15c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	58024400 	.word	0x58024400
 80042ec:	ffff0007 	.word	0xffff0007

080042f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042fe:	4b53      	ldr	r3, [pc, #332]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b03      	cmp	r3, #3
 8004308:	d101      	bne.n	800430e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e099      	b.n	8004442 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800430e:	4b4f      	ldr	r3, [pc, #316]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a4e      	ldr	r2, [pc, #312]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431a:	f7fd f827 	bl	800136c <HAL_GetTick>
 800431e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004320:	e008      	b.n	8004334 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004322:	f7fd f823 	bl	800136c <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e086      	b.n	8004442 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004334:	4b45      	ldr	r3, [pc, #276]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004340:	4b42      	ldr	r3, [pc, #264]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	051b      	lsls	r3, r3, #20
 800434e:	493f      	ldr	r1, [pc, #252]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004350:	4313      	orrs	r3, r2
 8004352:	628b      	str	r3, [r1, #40]	; 0x28
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	3b01      	subs	r3, #1
 800435a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	3b01      	subs	r3, #1
 8004364:	025b      	lsls	r3, r3, #9
 8004366:	b29b      	uxth	r3, r3
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	3b01      	subs	r3, #1
 8004370:	041b      	lsls	r3, r3, #16
 8004372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	3b01      	subs	r3, #1
 800437e:	061b      	lsls	r3, r3, #24
 8004380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004384:	4931      	ldr	r1, [pc, #196]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800438a:	4b30      	ldr	r3, [pc, #192]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	492d      	ldr	r1, [pc, #180]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800439c:	4b2b      	ldr	r3, [pc, #172]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	4928      	ldr	r1, [pc, #160]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043ae:	4b27      	ldr	r3, [pc, #156]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	4a26      	ldr	r2, [pc, #152]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <RCCEx_PLL3_Config+0x160>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	69d2      	ldr	r2, [r2, #28]
 80043c6:	00d2      	lsls	r2, r2, #3
 80043c8:	4920      	ldr	r1, [pc, #128]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043ce:	4b1f      	ldr	r3, [pc, #124]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	4a1e      	ldr	r2, [pc, #120]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043e0:	4b1a      	ldr	r3, [pc, #104]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043ec:	e00f      	b.n	800440e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043f4:	4b15      	ldr	r3, [pc, #84]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 80043fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004400:	e005      	b.n	800440e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4a11      	ldr	r2, [pc, #68]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800440c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a0e      	ldr	r2, [pc, #56]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441a:	f7fc ffa7 	bl	800136c <HAL_GetTick>
 800441e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004420:	e008      	b.n	8004434 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004422:	f7fc ffa3 	bl	800136c <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e006      	b.n	8004442 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <RCCEx_PLL3_Config+0x15c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	58024400 	.word	0x58024400
 8004450:	ffff0007 	.word	0xffff0007

08004454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e049      	b.n	80044fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc fe08 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 f934 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e019      	b.n	8004550 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	4b0c      	ldr	r3, [pc, #48]	; (800455c <HAL_TIM_Base_Start+0x58>)
 800452c:	4013      	ands	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b06      	cmp	r3, #6
 8004534:	d00b      	beq.n	800454e <HAL_TIM_Base_Start+0x4a>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d007      	beq.n	800454e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0201 	orr.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	00010007 	.word	0x00010007

08004560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIM_ConfigClockSource+0x18>
 8004574:	2302      	movs	r3, #2
 8004576:	e0b7      	b.n	80046e8 <HAL_TIM_ConfigClockSource+0x188>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4b57      	ldr	r3, [pc, #348]	; (80046f0 <HAL_TIM_ConfigClockSource+0x190>)
 8004594:	4013      	ands	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800459e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d02e      	beq.n	800460e <HAL_TIM_ConfigClockSource+0xae>
 80045b0:	2b70      	cmp	r3, #112	; 0x70
 80045b2:	d812      	bhi.n	80045da <HAL_TIM_ConfigClockSource+0x7a>
 80045b4:	2b30      	cmp	r3, #48	; 0x30
 80045b6:	f000 8084 	beq.w	80046c2 <HAL_TIM_ConfigClockSource+0x162>
 80045ba:	2b30      	cmp	r3, #48	; 0x30
 80045bc:	d806      	bhi.n	80045cc <HAL_TIM_ConfigClockSource+0x6c>
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d07f      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x162>
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d07d      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x162>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d07b      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80045ca:	e084      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80045cc:	2b50      	cmp	r3, #80	; 0x50
 80045ce:	d048      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x102>
 80045d0:	2b60      	cmp	r3, #96	; 0x60
 80045d2:	d056      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x122>
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d064      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 80045d8:	e07d      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80045da:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045de:	d070      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x162>
 80045e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045e4:	d809      	bhi.n	80045fa <HAL_TIM_ConfigClockSource+0x9a>
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ea:	d027      	beq.n	800463c <HAL_TIM_ConfigClockSource+0xdc>
 80045ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f0:	d067      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x162>
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f6:	d06d      	beq.n	80046d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045f8:	e06d      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80045fa:	4a3e      	ldr	r2, [pc, #248]	; (80046f4 <HAL_TIM_ConfigClockSource+0x194>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d060      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x162>
 8004600:	4a3d      	ldr	r2, [pc, #244]	; (80046f8 <HAL_TIM_ConfigClockSource+0x198>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d05d      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x162>
 8004606:	4a3d      	ldr	r2, [pc, #244]	; (80046fc <HAL_TIM_ConfigClockSource+0x19c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d05a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800460c:	e063      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f000 f987 	bl	8004930 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004630:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	609a      	str	r2, [r3, #8]
      break;
 800463a:	e04c      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f000 f970 	bl	8004930 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800465e:	609a      	str	r2, [r3, #8]
      break;
 8004660:	e039      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	461a      	mov	r2, r3
 8004670:	f000 f8e0 	bl	8004834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2150      	movs	r1, #80	; 0x50
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f93a 	bl	80048f4 <TIM_ITRx_SetConfig>
      break;
 8004680:	e029      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	461a      	mov	r2, r3
 8004690:	f000 f8ff 	bl	8004892 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2160      	movs	r1, #96	; 0x60
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f92a 	bl	80048f4 <TIM_ITRx_SetConfig>
      break;
 80046a0:	e019      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 f8c0 	bl	8004834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2140      	movs	r1, #64	; 0x40
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f91a 	bl	80048f4 <TIM_ITRx_SetConfig>
      break;
 80046c0:	e009      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f000 f911 	bl	80048f4 <TIM_ITRx_SetConfig>
      break;
 80046d2:	e000      	b.n	80046d6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80046d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	ffceff88 	.word	0xffceff88
 80046f4:	00100030 	.word	0x00100030
 80046f8:	00100040 	.word	0x00100040
 80046fc:	00100020 	.word	0x00100020

08004700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a40      	ldr	r2, [pc, #256]	; (8004814 <TIM_Base_SetConfig+0x114>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d013      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d00f      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3d      	ldr	r2, [pc, #244]	; (8004818 <TIM_Base_SetConfig+0x118>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3c      	ldr	r2, [pc, #240]	; (800481c <TIM_Base_SetConfig+0x11c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3b      	ldr	r2, [pc, #236]	; (8004820 <TIM_Base_SetConfig+0x120>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a3a      	ldr	r2, [pc, #232]	; (8004824 <TIM_Base_SetConfig+0x124>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2f      	ldr	r2, [pc, #188]	; (8004814 <TIM_Base_SetConfig+0x114>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d01f      	beq.n	800479a <TIM_Base_SetConfig+0x9a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d01b      	beq.n	800479a <TIM_Base_SetConfig+0x9a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <TIM_Base_SetConfig+0x118>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d017      	beq.n	800479a <TIM_Base_SetConfig+0x9a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2b      	ldr	r2, [pc, #172]	; (800481c <TIM_Base_SetConfig+0x11c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <TIM_Base_SetConfig+0x9a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2a      	ldr	r2, [pc, #168]	; (8004820 <TIM_Base_SetConfig+0x120>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00f      	beq.n	800479a <TIM_Base_SetConfig+0x9a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a29      	ldr	r2, [pc, #164]	; (8004824 <TIM_Base_SetConfig+0x124>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00b      	beq.n	800479a <TIM_Base_SetConfig+0x9a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a28      	ldr	r2, [pc, #160]	; (8004828 <TIM_Base_SetConfig+0x128>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <TIM_Base_SetConfig+0x9a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a27      	ldr	r2, [pc, #156]	; (800482c <TIM_Base_SetConfig+0x12c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_Base_SetConfig+0x9a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a26      	ldr	r2, [pc, #152]	; (8004830 <TIM_Base_SetConfig+0x130>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d108      	bne.n	80047ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a10      	ldr	r2, [pc, #64]	; (8004814 <TIM_Base_SetConfig+0x114>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00f      	beq.n	80047f8 <TIM_Base_SetConfig+0xf8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a12      	ldr	r2, [pc, #72]	; (8004824 <TIM_Base_SetConfig+0x124>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_Base_SetConfig+0xf8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a11      	ldr	r2, [pc, #68]	; (8004828 <TIM_Base_SetConfig+0x128>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_Base_SetConfig+0xf8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a10      	ldr	r2, [pc, #64]	; (800482c <TIM_Base_SetConfig+0x12c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_Base_SetConfig+0xf8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <TIM_Base_SetConfig+0x130>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d103      	bne.n	8004800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	615a      	str	r2, [r3, #20]
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40010000 	.word	0x40010000
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	40000c00 	.word	0x40000c00
 8004824:	40010400 	.word	0x40010400
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400
 8004830:	40014800 	.word	0x40014800

08004834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f023 0201 	bic.w	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 030a 	bic.w	r3, r3, #10
 8004870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004892:	b480      	push	{r7}
 8004894:	b087      	sub	sp, #28
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 0210 	bic.w	r2, r3, #16
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	031b      	lsls	r3, r3, #12
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <TIM_ITRx_SetConfig+0x38>)
 8004908:	4013      	ands	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	f043 0307 	orr.w	r3, r3, #7
 8004916:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	609a      	str	r2, [r3, #8]
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	ffcfff8f 	.word	0xffcfff8f

08004930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800494a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	021a      	lsls	r2, r3, #8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	431a      	orrs	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4313      	orrs	r3, r2
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	609a      	str	r2, [r3, #8]
}
 8004964:	bf00      	nop
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004984:	2302      	movs	r3, #2
 8004986:	e068      	b.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2e      	ldr	r2, [pc, #184]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a2d      	ldr	r2, [pc, #180]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d108      	bne.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1e      	ldr	r2, [pc, #120]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01d      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fa:	d018      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1a      	ldr	r2, [pc, #104]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d10c      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40001800 	.word	0x40001800

08004a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e042      	b.n	8004b18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fc fb5f 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2224      	movs	r2, #36	; 0x24
 8004aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fb12 	bl	80050ec <UART_SetConfig>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e022      	b.n	8004b18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f001 f8b6 	bl	8005c4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f001 f93d 	bl	8005d90 <UART_CheckIdleState>
 8004b16:	4603      	mov	r3, r0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d168      	bne.n	8004c0a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_UART_Transmit_IT+0x24>
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e061      	b.n	8004c0c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Transmit_IT+0x36>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e05a      	b.n	8004c0c <HAL_UART_Transmit_IT+0xec>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	88fa      	ldrh	r2, [r7, #6]
 8004b68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2221      	movs	r2, #33	; 0x21
 8004b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b92:	d11c      	bne.n	8004bce <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d107      	bne.n	8004bae <HAL_UART_Transmit_IT+0x8e>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a1b      	ldr	r2, [pc, #108]	; (8004c18 <HAL_UART_Transmit_IT+0xf8>)
 8004baa:	671a      	str	r2, [r3, #112]	; 0x70
 8004bac:	e002      	b.n	8004bb4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a1a      	ldr	r2, [pc, #104]	; (8004c1c <HAL_UART_Transmit_IT+0xfc>)
 8004bb2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	e01b      	b.n	8004c06 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	d107      	bne.n	8004be8 <HAL_UART_Transmit_IT+0xc8>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d103      	bne.n	8004be8 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a0f      	ldr	r2, [pc, #60]	; (8004c20 <HAL_UART_Transmit_IT+0x100>)
 8004be4:	671a      	str	r2, [r3, #112]	; 0x70
 8004be6:	e002      	b.n	8004bee <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a0e      	ldr	r2, [pc, #56]	; (8004c24 <HAL_UART_Transmit_IT+0x104>)
 8004bec:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c04:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e000      	b.n	8004c0c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
  }
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	08006121 	.word	0x08006121
 8004c1c:	08006087 	.word	0x08006087
 8004c20:	08006009 	.word	0x08006009
 8004c24:	08005f95 	.word	0x08005f95

08004c28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	f040 80bc 	bne.w	8004dba <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_UART_Receive_IT+0x26>
 8004c48:	88fb      	ldrh	r3, [r7, #6]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e0b4      	b.n	8004dbc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_UART_Receive_IT+0x38>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e0ad      	b.n	8004dbc <HAL_UART_Receive_IT+0x194>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	88fa      	ldrh	r2, [r7, #6]
 8004c7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8c:	d10e      	bne.n	8004cac <HAL_UART_Receive_IT+0x84>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d105      	bne.n	8004ca2 <HAL_UART_Receive_IT+0x7a>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ca0:	e02d      	b.n	8004cfe <HAL_UART_Receive_IT+0xd6>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	22ff      	movs	r2, #255	; 0xff
 8004ca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004caa:	e028      	b.n	8004cfe <HAL_UART_Receive_IT+0xd6>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_UART_Receive_IT+0xa8>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d104      	bne.n	8004cc6 <HAL_UART_Receive_IT+0x9e>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	22ff      	movs	r2, #255	; 0xff
 8004cc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cc4:	e01b      	b.n	8004cfe <HAL_UART_Receive_IT+0xd6>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	227f      	movs	r2, #127	; 0x7f
 8004cca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cce:	e016      	b.n	8004cfe <HAL_UART_Receive_IT+0xd6>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cd8:	d10d      	bne.n	8004cf6 <HAL_UART_Receive_IT+0xce>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d104      	bne.n	8004cec <HAL_UART_Receive_IT+0xc4>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	227f      	movs	r2, #127	; 0x7f
 8004ce6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cea:	e008      	b.n	8004cfe <HAL_UART_Receive_IT+0xd6>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	223f      	movs	r2, #63	; 0x3f
 8004cf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cf4:	e003      	b.n	8004cfe <HAL_UART_Receive_IT+0xd6>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2222      	movs	r2, #34	; 0x22
 8004d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d26:	d12a      	bne.n	8004d7e <HAL_UART_Receive_IT+0x156>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d324      	bcc.n	8004d7e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3c:	d107      	bne.n	8004d4e <HAL_UART_Receive_IT+0x126>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a1f      	ldr	r2, [pc, #124]	; (8004dc8 <HAL_UART_Receive_IT+0x1a0>)
 8004d4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004d4c:	e002      	b.n	8004d54 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <HAL_UART_Receive_IT+0x1a4>)
 8004d52:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	e01b      	b.n	8004db6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d86:	d107      	bne.n	8004d98 <HAL_UART_Receive_IT+0x170>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a0f      	ldr	r2, [pc, #60]	; (8004dd0 <HAL_UART_Receive_IT+0x1a8>)
 8004d94:	66da      	str	r2, [r3, #108]	; 0x6c
 8004d96:	e002      	b.n	8004d9e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a0e      	ldr	r2, [pc, #56]	; (8004dd4 <HAL_UART_Receive_IT+0x1ac>)
 8004d9c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004db4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
  }
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	08006455 	.word	0x08006455
 8004dcc:	0800634d 	.word	0x0800634d
 8004dd0:	080062a3 	.word	0x080062a3
 8004dd4:	080061f9 	.word	0x080061f9

08004dd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dfe:	4013      	ands	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d118      	bne.n	8004e3a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d013      	beq.n	8004e3a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8145 	beq.w	80050ba <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
      }
      return;
 8004e38:	e13f      	b.n	80050ba <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80e8 	beq.w	8005012 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4ba1      	ldr	r3, [pc, #644]	; (80050cc <HAL_UART_IRQHandler+0x2f4>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4ba0      	ldr	r3, [pc, #640]	; (80050d0 <HAL_UART_IRQHandler+0x2f8>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80dd 	beq.w	8005012 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d010      	beq.n	8004e84 <HAL_UART_IRQHandler+0xac>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2201      	movs	r2, #1
 8004e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_UART_IRQHandler+0xd8>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00b      	beq.n	8004eb0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f043 0204 	orr.w	r2, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d010      	beq.n	8004edc <HAL_UART_IRQHandler+0x104>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f043 0202 	orr.w	r2, r3, #2
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d015      	beq.n	8004f12 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d104      	bne.n	8004efa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4b76      	ldr	r3, [pc, #472]	; (80050cc <HAL_UART_IRQHandler+0x2f4>)
 8004ef4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2208      	movs	r2, #8
 8004f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f043 0208 	orr.w	r2, r3, #8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d011      	beq.n	8004f40 <HAL_UART_IRQHandler+0x168>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 80b9 	beq.w	80050be <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d011      	beq.n	8004f7a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d004      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d031      	beq.n	8004ffe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 ffc0 	bl	8005f20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	d123      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fbc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d013      	beq.n	8004fee <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fca:	4a42      	ldr	r2, [pc, #264]	; (80050d4 <HAL_UART_IRQHandler+0x2fc>)
 8004fcc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fc fb14 	bl	8001600 <HAL_DMA_Abort_IT>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d017      	beq.n	800500e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fec:	e00f      	b.n	800500e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f872 	bl	80050d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff4:	e00b      	b.n	800500e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f86e 	bl	80050d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ffc:	e007      	b.n	800500e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f86a 	bl	80050d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800500c:	e057      	b.n	80050be <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500e:	bf00      	nop
    return;
 8005010:	e055      	b.n	80050be <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00d      	beq.n	8005038 <HAL_UART_IRQHandler+0x260>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800502e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 fa93 	bl	800655c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005036:	e045      	b.n	80050c4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b00      	cmp	r3, #0
 8005040:	d012      	beq.n	8005068 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d008      	beq.n	8005068 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	2b00      	cmp	r3, #0
 800505c:	d031      	beq.n	80050c2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
    }
    return;
 8005066:	e02c      	b.n	80050c2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <HAL_UART_IRQHandler+0x2ac>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 f8a1 	bl	80061c4 <UART_EndTransmit_IT>
    return;
 8005082:	e01f      	b.n	80050c4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_UART_IRQHandler+0x2c8>
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 fa73 	bl	8006584 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800509e:	e011      	b.n	80050c4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00c      	beq.n	80050c4 <HAL_UART_IRQHandler+0x2ec>
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da09      	bge.n	80050c4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 fa5d 	bl	8006570 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050b6:	bf00      	nop
 80050b8:	e004      	b.n	80050c4 <HAL_UART_IRQHandler+0x2ec>
      return;
 80050ba:	bf00      	nop
 80050bc:	e002      	b.n	80050c4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80050c2:	bf00      	nop
  }
}
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	10000001 	.word	0x10000001
 80050d0:	04000120 	.word	0x04000120
 80050d4:	08005f69 	.word	0x08005f69

080050d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80050f0:	b08e      	sub	sp, #56	; 0x38
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	4313      	orrs	r3, r2
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800511a:	4313      	orrs	r3, r2
 800511c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4bc1      	ldr	r3, [pc, #772]	; (800542c <UART_SetConfig+0x340>)
 8005126:	4013      	ands	r3, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800512e:	430b      	orrs	r3, r1
 8005130:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4ab7      	ldr	r2, [pc, #732]	; (8005430 <UART_SetConfig+0x344>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800515e:	4313      	orrs	r3, r2
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	4bb2      	ldr	r3, [pc, #712]	; (8005434 <UART_SetConfig+0x348>)
 800516a:	4013      	ands	r3, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005172:	430b      	orrs	r3, r1
 8005174:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f023 010f 	bic.w	r1, r3, #15
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4aa9      	ldr	r2, [pc, #676]	; (8005438 <UART_SetConfig+0x34c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d177      	bne.n	8005286 <UART_SetConfig+0x19a>
 8005196:	4ba9      	ldr	r3, [pc, #676]	; (800543c <UART_SetConfig+0x350>)
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800519e:	2b28      	cmp	r3, #40	; 0x28
 80051a0:	d86c      	bhi.n	800527c <UART_SetConfig+0x190>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0xbc>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	0800524d 	.word	0x0800524d
 80051ac:	0800527d 	.word	0x0800527d
 80051b0:	0800527d 	.word	0x0800527d
 80051b4:	0800527d 	.word	0x0800527d
 80051b8:	0800527d 	.word	0x0800527d
 80051bc:	0800527d 	.word	0x0800527d
 80051c0:	0800527d 	.word	0x0800527d
 80051c4:	0800527d 	.word	0x0800527d
 80051c8:	08005255 	.word	0x08005255
 80051cc:	0800527d 	.word	0x0800527d
 80051d0:	0800527d 	.word	0x0800527d
 80051d4:	0800527d 	.word	0x0800527d
 80051d8:	0800527d 	.word	0x0800527d
 80051dc:	0800527d 	.word	0x0800527d
 80051e0:	0800527d 	.word	0x0800527d
 80051e4:	0800527d 	.word	0x0800527d
 80051e8:	0800525d 	.word	0x0800525d
 80051ec:	0800527d 	.word	0x0800527d
 80051f0:	0800527d 	.word	0x0800527d
 80051f4:	0800527d 	.word	0x0800527d
 80051f8:	0800527d 	.word	0x0800527d
 80051fc:	0800527d 	.word	0x0800527d
 8005200:	0800527d 	.word	0x0800527d
 8005204:	0800527d 	.word	0x0800527d
 8005208:	08005265 	.word	0x08005265
 800520c:	0800527d 	.word	0x0800527d
 8005210:	0800527d 	.word	0x0800527d
 8005214:	0800527d 	.word	0x0800527d
 8005218:	0800527d 	.word	0x0800527d
 800521c:	0800527d 	.word	0x0800527d
 8005220:	0800527d 	.word	0x0800527d
 8005224:	0800527d 	.word	0x0800527d
 8005228:	0800526d 	.word	0x0800526d
 800522c:	0800527d 	.word	0x0800527d
 8005230:	0800527d 	.word	0x0800527d
 8005234:	0800527d 	.word	0x0800527d
 8005238:	0800527d 	.word	0x0800527d
 800523c:	0800527d 	.word	0x0800527d
 8005240:	0800527d 	.word	0x0800527d
 8005244:	0800527d 	.word	0x0800527d
 8005248:	08005275 	.word	0x08005275
 800524c:	2301      	movs	r3, #1
 800524e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005252:	e233      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005254:	2304      	movs	r3, #4
 8005256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525a:	e22f      	b.n	80056bc <UART_SetConfig+0x5d0>
 800525c:	2308      	movs	r3, #8
 800525e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005262:	e22b      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005264:	2310      	movs	r3, #16
 8005266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526a:	e227      	b.n	80056bc <UART_SetConfig+0x5d0>
 800526c:	2320      	movs	r3, #32
 800526e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005272:	e223      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005274:	2340      	movs	r3, #64	; 0x40
 8005276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527a:	e21f      	b.n	80056bc <UART_SetConfig+0x5d0>
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005282:	bf00      	nop
 8005284:	e21a      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a6d      	ldr	r2, [pc, #436]	; (8005440 <UART_SetConfig+0x354>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d132      	bne.n	80052f6 <UART_SetConfig+0x20a>
 8005290:	4b6a      	ldr	r3, [pc, #424]	; (800543c <UART_SetConfig+0x350>)
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	2b05      	cmp	r3, #5
 800529a:	d827      	bhi.n	80052ec <UART_SetConfig+0x200>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x1b8>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052bd 	.word	0x080052bd
 80052a8:	080052c5 	.word	0x080052c5
 80052ac:	080052cd 	.word	0x080052cd
 80052b0:	080052d5 	.word	0x080052d5
 80052b4:	080052dd 	.word	0x080052dd
 80052b8:	080052e5 	.word	0x080052e5
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c2:	e1fb      	b.n	80056bc <UART_SetConfig+0x5d0>
 80052c4:	2304      	movs	r3, #4
 80052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ca:	e1f7      	b.n	80056bc <UART_SetConfig+0x5d0>
 80052cc:	2308      	movs	r3, #8
 80052ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d2:	e1f3      	b.n	80056bc <UART_SetConfig+0x5d0>
 80052d4:	2310      	movs	r3, #16
 80052d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052da:	e1ef      	b.n	80056bc <UART_SetConfig+0x5d0>
 80052dc:	2320      	movs	r3, #32
 80052de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052e2:	e1eb      	b.n	80056bc <UART_SetConfig+0x5d0>
 80052e4:	2340      	movs	r3, #64	; 0x40
 80052e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ea:	e1e7      	b.n	80056bc <UART_SetConfig+0x5d0>
 80052ec:	2380      	movs	r3, #128	; 0x80
 80052ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052f2:	bf00      	nop
 80052f4:	e1e2      	b.n	80056bc <UART_SetConfig+0x5d0>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a52      	ldr	r2, [pc, #328]	; (8005444 <UART_SetConfig+0x358>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d132      	bne.n	8005366 <UART_SetConfig+0x27a>
 8005300:	4b4e      	ldr	r3, [pc, #312]	; (800543c <UART_SetConfig+0x350>)
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	2b05      	cmp	r3, #5
 800530a:	d827      	bhi.n	800535c <UART_SetConfig+0x270>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <UART_SetConfig+0x228>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	0800532d 	.word	0x0800532d
 8005318:	08005335 	.word	0x08005335
 800531c:	0800533d 	.word	0x0800533d
 8005320:	08005345 	.word	0x08005345
 8005324:	0800534d 	.word	0x0800534d
 8005328:	08005355 	.word	0x08005355
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005332:	e1c3      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005334:	2304      	movs	r3, #4
 8005336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800533a:	e1bf      	b.n	80056bc <UART_SetConfig+0x5d0>
 800533c:	2308      	movs	r3, #8
 800533e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005342:	e1bb      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005344:	2310      	movs	r3, #16
 8005346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534a:	e1b7      	b.n	80056bc <UART_SetConfig+0x5d0>
 800534c:	2320      	movs	r3, #32
 800534e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005352:	e1b3      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005354:	2340      	movs	r3, #64	; 0x40
 8005356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535a:	e1af      	b.n	80056bc <UART_SetConfig+0x5d0>
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005362:	bf00      	nop
 8005364:	e1aa      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a37      	ldr	r2, [pc, #220]	; (8005448 <UART_SetConfig+0x35c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d132      	bne.n	80053d6 <UART_SetConfig+0x2ea>
 8005370:	4b32      	ldr	r3, [pc, #200]	; (800543c <UART_SetConfig+0x350>)
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	2b05      	cmp	r3, #5
 800537a:	d827      	bhi.n	80053cc <UART_SetConfig+0x2e0>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0x298>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	0800539d 	.word	0x0800539d
 8005388:	080053a5 	.word	0x080053a5
 800538c:	080053ad 	.word	0x080053ad
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e18b      	b.n	80056bc <UART_SetConfig+0x5d0>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053aa:	e187      	b.n	80056bc <UART_SetConfig+0x5d0>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b2:	e183      	b.n	80056bc <UART_SetConfig+0x5d0>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ba:	e17f      	b.n	80056bc <UART_SetConfig+0x5d0>
 80053bc:	2320      	movs	r3, #32
 80053be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c2:	e17b      	b.n	80056bc <UART_SetConfig+0x5d0>
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ca:	e177      	b.n	80056bc <UART_SetConfig+0x5d0>
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d2:	bf00      	nop
 80053d4:	e172      	b.n	80056bc <UART_SetConfig+0x5d0>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1c      	ldr	r2, [pc, #112]	; (800544c <UART_SetConfig+0x360>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d144      	bne.n	800546a <UART_SetConfig+0x37e>
 80053e0:	4b16      	ldr	r3, [pc, #88]	; (800543c <UART_SetConfig+0x350>)
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	2b05      	cmp	r3, #5
 80053ea:	d839      	bhi.n	8005460 <UART_SetConfig+0x374>
 80053ec:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <UART_SetConfig+0x308>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	0800540d 	.word	0x0800540d
 80053f8:	08005415 	.word	0x08005415
 80053fc:	0800541d 	.word	0x0800541d
 8005400:	08005425 	.word	0x08005425
 8005404:	08005451 	.word	0x08005451
 8005408:	08005459 	.word	0x08005459
 800540c:	2300      	movs	r3, #0
 800540e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005412:	e153      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005414:	2304      	movs	r3, #4
 8005416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541a:	e14f      	b.n	80056bc <UART_SetConfig+0x5d0>
 800541c:	2308      	movs	r3, #8
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e14b      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005424:	2310      	movs	r3, #16
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e147      	b.n	80056bc <UART_SetConfig+0x5d0>
 800542c:	cfff69f3 	.word	0xcfff69f3
 8005430:	58000c00 	.word	0x58000c00
 8005434:	11fff4ff 	.word	0x11fff4ff
 8005438:	40011000 	.word	0x40011000
 800543c:	58024400 	.word	0x58024400
 8005440:	40004400 	.word	0x40004400
 8005444:	40004800 	.word	0x40004800
 8005448:	40004c00 	.word	0x40004c00
 800544c:	40005000 	.word	0x40005000
 8005450:	2320      	movs	r3, #32
 8005452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005456:	e131      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800545e:	e12d      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005466:	bf00      	nop
 8005468:	e128      	b.n	80056bc <UART_SetConfig+0x5d0>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4ab6      	ldr	r2, [pc, #728]	; (8005748 <UART_SetConfig+0x65c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d178      	bne.n	8005566 <UART_SetConfig+0x47a>
 8005474:	4bb5      	ldr	r3, [pc, #724]	; (800574c <UART_SetConfig+0x660>)
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800547c:	2b28      	cmp	r3, #40	; 0x28
 800547e:	d86d      	bhi.n	800555c <UART_SetConfig+0x470>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0x39c>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	0800552d 	.word	0x0800552d
 800548c:	0800555d 	.word	0x0800555d
 8005490:	0800555d 	.word	0x0800555d
 8005494:	0800555d 	.word	0x0800555d
 8005498:	0800555d 	.word	0x0800555d
 800549c:	0800555d 	.word	0x0800555d
 80054a0:	0800555d 	.word	0x0800555d
 80054a4:	0800555d 	.word	0x0800555d
 80054a8:	08005535 	.word	0x08005535
 80054ac:	0800555d 	.word	0x0800555d
 80054b0:	0800555d 	.word	0x0800555d
 80054b4:	0800555d 	.word	0x0800555d
 80054b8:	0800555d 	.word	0x0800555d
 80054bc:	0800555d 	.word	0x0800555d
 80054c0:	0800555d 	.word	0x0800555d
 80054c4:	0800555d 	.word	0x0800555d
 80054c8:	0800553d 	.word	0x0800553d
 80054cc:	0800555d 	.word	0x0800555d
 80054d0:	0800555d 	.word	0x0800555d
 80054d4:	0800555d 	.word	0x0800555d
 80054d8:	0800555d 	.word	0x0800555d
 80054dc:	0800555d 	.word	0x0800555d
 80054e0:	0800555d 	.word	0x0800555d
 80054e4:	0800555d 	.word	0x0800555d
 80054e8:	08005545 	.word	0x08005545
 80054ec:	0800555d 	.word	0x0800555d
 80054f0:	0800555d 	.word	0x0800555d
 80054f4:	0800555d 	.word	0x0800555d
 80054f8:	0800555d 	.word	0x0800555d
 80054fc:	0800555d 	.word	0x0800555d
 8005500:	0800555d 	.word	0x0800555d
 8005504:	0800555d 	.word	0x0800555d
 8005508:	0800554d 	.word	0x0800554d
 800550c:	0800555d 	.word	0x0800555d
 8005510:	0800555d 	.word	0x0800555d
 8005514:	0800555d 	.word	0x0800555d
 8005518:	0800555d 	.word	0x0800555d
 800551c:	0800555d 	.word	0x0800555d
 8005520:	0800555d 	.word	0x0800555d
 8005524:	0800555d 	.word	0x0800555d
 8005528:	08005555 	.word	0x08005555
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005532:	e0c3      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005534:	2304      	movs	r3, #4
 8005536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553a:	e0bf      	b.n	80056bc <UART_SetConfig+0x5d0>
 800553c:	2308      	movs	r3, #8
 800553e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005542:	e0bb      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005544:	2310      	movs	r3, #16
 8005546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554a:	e0b7      	b.n	80056bc <UART_SetConfig+0x5d0>
 800554c:	2320      	movs	r3, #32
 800554e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005552:	e0b3      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005554:	2340      	movs	r3, #64	; 0x40
 8005556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555a:	e0af      	b.n	80056bc <UART_SetConfig+0x5d0>
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005562:	bf00      	nop
 8005564:	e0aa      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a79      	ldr	r2, [pc, #484]	; (8005750 <UART_SetConfig+0x664>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d132      	bne.n	80055d6 <UART_SetConfig+0x4ea>
 8005570:	4b76      	ldr	r3, [pc, #472]	; (800574c <UART_SetConfig+0x660>)
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	2b05      	cmp	r3, #5
 800557a:	d827      	bhi.n	80055cc <UART_SetConfig+0x4e0>
 800557c:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <UART_SetConfig+0x498>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	0800559d 	.word	0x0800559d
 8005588:	080055a5 	.word	0x080055a5
 800558c:	080055ad 	.word	0x080055ad
 8005590:	080055b5 	.word	0x080055b5
 8005594:	080055bd 	.word	0x080055bd
 8005598:	080055c5 	.word	0x080055c5
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a2:	e08b      	b.n	80056bc <UART_SetConfig+0x5d0>
 80055a4:	2304      	movs	r3, #4
 80055a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055aa:	e087      	b.n	80056bc <UART_SetConfig+0x5d0>
 80055ac:	2308      	movs	r3, #8
 80055ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b2:	e083      	b.n	80056bc <UART_SetConfig+0x5d0>
 80055b4:	2310      	movs	r3, #16
 80055b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ba:	e07f      	b.n	80056bc <UART_SetConfig+0x5d0>
 80055bc:	2320      	movs	r3, #32
 80055be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c2:	e07b      	b.n	80056bc <UART_SetConfig+0x5d0>
 80055c4:	2340      	movs	r3, #64	; 0x40
 80055c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ca:	e077      	b.n	80056bc <UART_SetConfig+0x5d0>
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d2:	bf00      	nop
 80055d4:	e072      	b.n	80056bc <UART_SetConfig+0x5d0>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a5e      	ldr	r2, [pc, #376]	; (8005754 <UART_SetConfig+0x668>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d132      	bne.n	8005646 <UART_SetConfig+0x55a>
 80055e0:	4b5a      	ldr	r3, [pc, #360]	; (800574c <UART_SetConfig+0x660>)
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	2b05      	cmp	r3, #5
 80055ea:	d827      	bhi.n	800563c <UART_SetConfig+0x550>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x508>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	0800560d 	.word	0x0800560d
 80055f8:	08005615 	.word	0x08005615
 80055fc:	0800561d 	.word	0x0800561d
 8005600:	08005625 	.word	0x08005625
 8005604:	0800562d 	.word	0x0800562d
 8005608:	08005635 	.word	0x08005635
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e053      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e04f      	b.n	80056bc <UART_SetConfig+0x5d0>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e04b      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e047      	b.n	80056bc <UART_SetConfig+0x5d0>
 800562c:	2320      	movs	r3, #32
 800562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005632:	e043      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563a:	e03f      	b.n	80056bc <UART_SetConfig+0x5d0>
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005642:	bf00      	nop
 8005644:	e03a      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a43      	ldr	r2, [pc, #268]	; (8005758 <UART_SetConfig+0x66c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d132      	bne.n	80056b6 <UART_SetConfig+0x5ca>
 8005650:	4b3e      	ldr	r3, [pc, #248]	; (800574c <UART_SetConfig+0x660>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	2b05      	cmp	r3, #5
 800565a:	d827      	bhi.n	80056ac <UART_SetConfig+0x5c0>
 800565c:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <UART_SetConfig+0x578>)
 800565e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005662:	bf00      	nop
 8005664:	0800567d 	.word	0x0800567d
 8005668:	08005685 	.word	0x08005685
 800566c:	0800568d 	.word	0x0800568d
 8005670:	08005695 	.word	0x08005695
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a5 	.word	0x080056a5
 800567c:	2302      	movs	r3, #2
 800567e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005682:	e01b      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568a:	e017      	b.n	80056bc <UART_SetConfig+0x5d0>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005692:	e013      	b.n	80056bc <UART_SetConfig+0x5d0>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800569a:	e00f      	b.n	80056bc <UART_SetConfig+0x5d0>
 800569c:	2320      	movs	r3, #32
 800569e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056a2:	e00b      	b.n	80056bc <UART_SetConfig+0x5d0>
 80056a4:	2340      	movs	r3, #64	; 0x40
 80056a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056aa:	e007      	b.n	80056bc <UART_SetConfig+0x5d0>
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b2:	bf00      	nop
 80056b4:	e002      	b.n	80056bc <UART_SetConfig+0x5d0>
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a25      	ldr	r2, [pc, #148]	; (8005758 <UART_SetConfig+0x66c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	f040 80b8 	bne.w	8005838 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d019      	beq.n	8005704 <UART_SetConfig+0x618>
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	dc04      	bgt.n	80056de <UART_SetConfig+0x5f2>
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d009      	beq.n	80056ec <UART_SetConfig+0x600>
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d00b      	beq.n	80056f4 <UART_SetConfig+0x608>
 80056dc:	e042      	b.n	8005764 <UART_SetConfig+0x678>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d02b      	beq.n	800573a <UART_SetConfig+0x64e>
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d02c      	beq.n	8005740 <UART_SetConfig+0x654>
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d014      	beq.n	8005714 <UART_SetConfig+0x628>
 80056ea:	e03b      	b.n	8005764 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056ec:	f7fe faa0 	bl	8003c30 <HAL_RCCEx_GetD3PCLK1Freq>
 80056f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80056f2:	e03d      	b.n	8005770 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056f4:	f107 0314 	add.w	r3, r7, #20
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe faaf 	bl	8003c5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005702:	e035      	b.n	8005770 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005704:	f107 0308 	add.w	r3, r7, #8
 8005708:	4618      	mov	r0, r3
 800570a:	f7fe fbf3 	bl	8003ef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005712:	e02d      	b.n	8005770 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005714:	4b0d      	ldr	r3, [pc, #52]	; (800574c <UART_SetConfig+0x660>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <UART_SetConfig+0x660>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	08db      	lsrs	r3, r3, #3
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	4a0c      	ldr	r2, [pc, #48]	; (800575c <UART_SetConfig+0x670>)
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005732:	e01d      	b.n	8005770 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <UART_SetConfig+0x670>)
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005738:	e01a      	b.n	8005770 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800573a:	4b09      	ldr	r3, [pc, #36]	; (8005760 <UART_SetConfig+0x674>)
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800573e:	e017      	b.n	8005770 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005746:	e013      	b.n	8005770 <UART_SetConfig+0x684>
 8005748:	40011400 	.word	0x40011400
 800574c:	58024400 	.word	0x58024400
 8005750:	40007800 	.word	0x40007800
 8005754:	40007c00 	.word	0x40007c00
 8005758:	58000c00 	.word	0x58000c00
 800575c:	03d09000 	.word	0x03d09000
 8005760:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800576e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 824d 	beq.w	8005c12 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	4aad      	ldr	r2, [pc, #692]	; (8005a34 <UART_SetConfig+0x948>)
 800577e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005782:	461a      	mov	r2, r3
 8005784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005786:	fbb3 f3f2 	udiv	r3, r3, r2
 800578a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	4413      	add	r3, r2
 8005796:	6a3a      	ldr	r2, [r7, #32]
 8005798:	429a      	cmp	r2, r3
 800579a:	d305      	bcc.n	80057a8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057a2:	6a3a      	ldr	r2, [r7, #32]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d903      	bls.n	80057b0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057ae:	e230      	b.n	8005c12 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	4618      	mov	r0, r3
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	4a9d      	ldr	r2, [pc, #628]	; (8005a34 <UART_SetConfig+0x948>)
 80057be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f04f 0400 	mov.w	r4, #0
 80057c8:	461a      	mov	r2, r3
 80057ca:	4623      	mov	r3, r4
 80057cc:	f7fa fde0 	bl	8000390 <__aeabi_uldivmod>
 80057d0:	4603      	mov	r3, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4619      	mov	r1, r3
 80057d6:	4622      	mov	r2, r4
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	f04f 0400 	mov.w	r4, #0
 80057e0:	0214      	lsls	r4, r2, #8
 80057e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80057e6:	020b      	lsls	r3, r1, #8
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6852      	ldr	r2, [r2, #4]
 80057ec:	0852      	lsrs	r2, r2, #1
 80057ee:	4611      	mov	r1, r2
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	eb13 0b01 	adds.w	fp, r3, r1
 80057f8:	eb44 0c02 	adc.w	ip, r4, r2
 80057fc:	4658      	mov	r0, fp
 80057fe:	4661      	mov	r1, ip
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f04f 0400 	mov.w	r4, #0
 8005808:	461a      	mov	r2, r3
 800580a:	4623      	mov	r3, r4
 800580c:	f7fa fdc0 	bl	8000390 <__aeabi_uldivmod>
 8005810:	4603      	mov	r3, r0
 8005812:	460c      	mov	r4, r1
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800581c:	d308      	bcc.n	8005830 <UART_SetConfig+0x744>
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005824:	d204      	bcs.n	8005830 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	e1f0      	b.n	8005c12 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005836:	e1ec      	b.n	8005c12 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005840:	f040 8100 	bne.w	8005a44 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	f200 80b7 	bhi.w	80059bc <UART_SetConfig+0x8d0>
 800584e:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0x768>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	08005959 	.word	0x08005959
 8005858:	08005961 	.word	0x08005961
 800585c:	080059bd 	.word	0x080059bd
 8005860:	080059bd 	.word	0x080059bd
 8005864:	08005969 	.word	0x08005969
 8005868:	080059bd 	.word	0x080059bd
 800586c:	080059bd 	.word	0x080059bd
 8005870:	080059bd 	.word	0x080059bd
 8005874:	08005979 	.word	0x08005979
 8005878:	080059bd 	.word	0x080059bd
 800587c:	080059bd 	.word	0x080059bd
 8005880:	080059bd 	.word	0x080059bd
 8005884:	080059bd 	.word	0x080059bd
 8005888:	080059bd 	.word	0x080059bd
 800588c:	080059bd 	.word	0x080059bd
 8005890:	080059bd 	.word	0x080059bd
 8005894:	08005989 	.word	0x08005989
 8005898:	080059bd 	.word	0x080059bd
 800589c:	080059bd 	.word	0x080059bd
 80058a0:	080059bd 	.word	0x080059bd
 80058a4:	080059bd 	.word	0x080059bd
 80058a8:	080059bd 	.word	0x080059bd
 80058ac:	080059bd 	.word	0x080059bd
 80058b0:	080059bd 	.word	0x080059bd
 80058b4:	080059bd 	.word	0x080059bd
 80058b8:	080059bd 	.word	0x080059bd
 80058bc:	080059bd 	.word	0x080059bd
 80058c0:	080059bd 	.word	0x080059bd
 80058c4:	080059bd 	.word	0x080059bd
 80058c8:	080059bd 	.word	0x080059bd
 80058cc:	080059bd 	.word	0x080059bd
 80058d0:	080059bd 	.word	0x080059bd
 80058d4:	080059af 	.word	0x080059af
 80058d8:	080059bd 	.word	0x080059bd
 80058dc:	080059bd 	.word	0x080059bd
 80058e0:	080059bd 	.word	0x080059bd
 80058e4:	080059bd 	.word	0x080059bd
 80058e8:	080059bd 	.word	0x080059bd
 80058ec:	080059bd 	.word	0x080059bd
 80058f0:	080059bd 	.word	0x080059bd
 80058f4:	080059bd 	.word	0x080059bd
 80058f8:	080059bd 	.word	0x080059bd
 80058fc:	080059bd 	.word	0x080059bd
 8005900:	080059bd 	.word	0x080059bd
 8005904:	080059bd 	.word	0x080059bd
 8005908:	080059bd 	.word	0x080059bd
 800590c:	080059bd 	.word	0x080059bd
 8005910:	080059bd 	.word	0x080059bd
 8005914:	080059bd 	.word	0x080059bd
 8005918:	080059bd 	.word	0x080059bd
 800591c:	080059bd 	.word	0x080059bd
 8005920:	080059bd 	.word	0x080059bd
 8005924:	080059bd 	.word	0x080059bd
 8005928:	080059bd 	.word	0x080059bd
 800592c:	080059bd 	.word	0x080059bd
 8005930:	080059bd 	.word	0x080059bd
 8005934:	080059bd 	.word	0x080059bd
 8005938:	080059bd 	.word	0x080059bd
 800593c:	080059bd 	.word	0x080059bd
 8005940:	080059bd 	.word	0x080059bd
 8005944:	080059bd 	.word	0x080059bd
 8005948:	080059bd 	.word	0x080059bd
 800594c:	080059bd 	.word	0x080059bd
 8005950:	080059bd 	.word	0x080059bd
 8005954:	080059b5 	.word	0x080059b5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005958:	f7fd fa50 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 800595c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800595e:	e033      	b.n	80059c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005960:	f7fd fa62 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 8005964:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005966:	e02f      	b.n	80059c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005968:	f107 0314 	add.w	r3, r7, #20
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe f975 	bl	8003c5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005976:	e027      	b.n	80059c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005978:	f107 0308 	add.w	r3, r7, #8
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe fab9 	bl	8003ef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005986:	e01f      	b.n	80059c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005988:	4b2b      	ldr	r3, [pc, #172]	; (8005a38 <UART_SetConfig+0x94c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005994:	4b28      	ldr	r3, [pc, #160]	; (8005a38 <UART_SetConfig+0x94c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <UART_SetConfig+0x950>)
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059a6:	e00f      	b.n	80059c8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80059a8:	4b24      	ldr	r3, [pc, #144]	; (8005a3c <UART_SetConfig+0x950>)
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059ac:	e00c      	b.n	80059c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059ae:	4b24      	ldr	r3, [pc, #144]	; (8005a40 <UART_SetConfig+0x954>)
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059b2:	e009      	b.n	80059c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059ba:	e005      	b.n	80059c8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8121 	beq.w	8005c12 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <UART_SetConfig+0x948>)
 80059d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059da:	461a      	mov	r2, r3
 80059dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059de:	fbb3 f3f2 	udiv	r3, r3, r2
 80059e2:	005a      	lsls	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	441a      	add	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	2b0f      	cmp	r3, #15
 80059fc:	d916      	bls.n	8005a2c <UART_SetConfig+0x940>
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a04:	d212      	bcs.n	8005a2c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f023 030f 	bic.w	r3, r3, #15
 8005a0e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a28:	60da      	str	r2, [r3, #12]
 8005a2a:	e0f2      	b.n	8005c12 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a32:	e0ee      	b.n	8005c12 <UART_SetConfig+0xb26>
 8005a34:	080088c4 	.word	0x080088c4
 8005a38:	58024400 	.word	0x58024400
 8005a3c:	03d09000 	.word	0x03d09000
 8005a40:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	f200 80b7 	bhi.w	8005bbc <UART_SetConfig+0xad0>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x968>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005b59 	.word	0x08005b59
 8005a58:	08005b61 	.word	0x08005b61
 8005a5c:	08005bbd 	.word	0x08005bbd
 8005a60:	08005bbd 	.word	0x08005bbd
 8005a64:	08005b69 	.word	0x08005b69
 8005a68:	08005bbd 	.word	0x08005bbd
 8005a6c:	08005bbd 	.word	0x08005bbd
 8005a70:	08005bbd 	.word	0x08005bbd
 8005a74:	08005b79 	.word	0x08005b79
 8005a78:	08005bbd 	.word	0x08005bbd
 8005a7c:	08005bbd 	.word	0x08005bbd
 8005a80:	08005bbd 	.word	0x08005bbd
 8005a84:	08005bbd 	.word	0x08005bbd
 8005a88:	08005bbd 	.word	0x08005bbd
 8005a8c:	08005bbd 	.word	0x08005bbd
 8005a90:	08005bbd 	.word	0x08005bbd
 8005a94:	08005b89 	.word	0x08005b89
 8005a98:	08005bbd 	.word	0x08005bbd
 8005a9c:	08005bbd 	.word	0x08005bbd
 8005aa0:	08005bbd 	.word	0x08005bbd
 8005aa4:	08005bbd 	.word	0x08005bbd
 8005aa8:	08005bbd 	.word	0x08005bbd
 8005aac:	08005bbd 	.word	0x08005bbd
 8005ab0:	08005bbd 	.word	0x08005bbd
 8005ab4:	08005bbd 	.word	0x08005bbd
 8005ab8:	08005bbd 	.word	0x08005bbd
 8005abc:	08005bbd 	.word	0x08005bbd
 8005ac0:	08005bbd 	.word	0x08005bbd
 8005ac4:	08005bbd 	.word	0x08005bbd
 8005ac8:	08005bbd 	.word	0x08005bbd
 8005acc:	08005bbd 	.word	0x08005bbd
 8005ad0:	08005bbd 	.word	0x08005bbd
 8005ad4:	08005baf 	.word	0x08005baf
 8005ad8:	08005bbd 	.word	0x08005bbd
 8005adc:	08005bbd 	.word	0x08005bbd
 8005ae0:	08005bbd 	.word	0x08005bbd
 8005ae4:	08005bbd 	.word	0x08005bbd
 8005ae8:	08005bbd 	.word	0x08005bbd
 8005aec:	08005bbd 	.word	0x08005bbd
 8005af0:	08005bbd 	.word	0x08005bbd
 8005af4:	08005bbd 	.word	0x08005bbd
 8005af8:	08005bbd 	.word	0x08005bbd
 8005afc:	08005bbd 	.word	0x08005bbd
 8005b00:	08005bbd 	.word	0x08005bbd
 8005b04:	08005bbd 	.word	0x08005bbd
 8005b08:	08005bbd 	.word	0x08005bbd
 8005b0c:	08005bbd 	.word	0x08005bbd
 8005b10:	08005bbd 	.word	0x08005bbd
 8005b14:	08005bbd 	.word	0x08005bbd
 8005b18:	08005bbd 	.word	0x08005bbd
 8005b1c:	08005bbd 	.word	0x08005bbd
 8005b20:	08005bbd 	.word	0x08005bbd
 8005b24:	08005bbd 	.word	0x08005bbd
 8005b28:	08005bbd 	.word	0x08005bbd
 8005b2c:	08005bbd 	.word	0x08005bbd
 8005b30:	08005bbd 	.word	0x08005bbd
 8005b34:	08005bbd 	.word	0x08005bbd
 8005b38:	08005bbd 	.word	0x08005bbd
 8005b3c:	08005bbd 	.word	0x08005bbd
 8005b40:	08005bbd 	.word	0x08005bbd
 8005b44:	08005bbd 	.word	0x08005bbd
 8005b48:	08005bbd 	.word	0x08005bbd
 8005b4c:	08005bbd 	.word	0x08005bbd
 8005b50:	08005bbd 	.word	0x08005bbd
 8005b54:	08005bb5 	.word	0x08005bb5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b58:	f7fd f950 	bl	8002dfc <HAL_RCC_GetPCLK1Freq>
 8005b5c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b5e:	e033      	b.n	8005bc8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b60:	f7fd f962 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 8005b64:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b66:	e02f      	b.n	8005bc8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b68:	f107 0314 	add.w	r3, r7, #20
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe f875 	bl	8003c5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b76:	e027      	b.n	8005bc8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b78:	f107 0308 	add.w	r3, r7, #8
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe f9b9 	bl	8003ef4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b86:	e01f      	b.n	8005bc8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b88:	4b2c      	ldr	r3, [pc, #176]	; (8005c3c <UART_SetConfig+0xb50>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b94:	4b29      	ldr	r3, [pc, #164]	; (8005c3c <UART_SetConfig+0xb50>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	08db      	lsrs	r3, r3, #3
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	4a28      	ldr	r2, [pc, #160]	; (8005c40 <UART_SetConfig+0xb54>)
 8005ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ba6:	e00f      	b.n	8005bc8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005ba8:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <UART_SetConfig+0xb54>)
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bac:	e00c      	b.n	8005bc8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bae:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <UART_SetConfig+0xb58>)
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bb2:	e009      	b.n	8005bc8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bba:	e005      	b.n	8005bc8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005bc6:	bf00      	nop
    }

    if (pclk != 0U)
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d021      	beq.n	8005c12 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <UART_SetConfig+0xb5c>)
 8005bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	441a      	add	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d908      	bls.n	8005c0c <UART_SetConfig+0xb20>
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c00:	d204      	bcs.n	8005c0c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	e002      	b.n	8005c12 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005c2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3738      	adds	r7, #56	; 0x38
 8005c36:	46bd      	mov	sp, r7
 8005c38:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	03d09000 	.word	0x03d09000
 8005c44:	003d0900 	.word	0x003d0900
 8005c48:	080088c4 	.word	0x080088c4

08005c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01a      	beq.n	8005d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d4a:	d10a      	bne.n	8005d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]
  }
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005da0:	f7fb fae4 	bl	800136c <HAL_GetTick>
 8005da4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d10e      	bne.n	8005dd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f82c 	bl	8005e20 <UART_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e022      	b.n	8005e18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d10e      	bne.n	8005dfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f816 	bl	8005e20 <UART_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e00c      	b.n	8005e18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e30:	e062      	b.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d05e      	beq.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3a:	f7fb fa97 	bl	800136c <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d302      	bcc.n	8005e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d11d      	bne.n	8005e8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e045      	b.n	8005f18 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d02e      	beq.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea8:	d126      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ec2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e00f      	b.n	8005f18 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	4013      	ands	r3, r2
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	bf0c      	ite	eq
 8005f08:	2301      	moveq	r3, #1
 8005f0a:	2300      	movne	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	461a      	mov	r2, r3
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d08d      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6899      	ldr	r1, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <UART_EndRxTransfer+0x44>)
 8005f44:	400b      	ands	r3, r1
 8005f46:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	effffffe 	.word	0xeffffffe

08005f68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff f8a6 	bl	80050d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa2:	2b21      	cmp	r3, #33	; 0x21
 8005fa4:	d12a      	bne.n	8005ffc <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d110      	bne.n	8005fd4 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fd0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005fd2:	e013      	b.n	8005ffc <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006016:	2b21      	cmp	r3, #33	; 0x21
 8006018:	d12f      	bne.n	800607a <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d110      	bne.n	8006048 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006034:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006044:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006046:	e018      	b.n	800607a <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800605c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006062:	1c9a      	adds	r2, r3, #2
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006094:	2b21      	cmp	r3, #33	; 0x21
 8006096:	d13d      	bne.n	8006114 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800609e:	81fb      	strh	r3, [r7, #14]
 80060a0:	e035      	b.n	800610e <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d111      	bne.n	80060d2 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80060bc:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060cc:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80060ce:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80060d0:	e020      	b.n	8006114 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d013      	beq.n	8006108 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e4:	781a      	ldrb	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006108:	89fb      	ldrh	r3, [r7, #14]
 800610a:	3b01      	subs	r3, #1
 800610c:	81fb      	strh	r3, [r7, #14]
 800610e:	89fb      	ldrh	r3, [r7, #14]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1c6      	bne.n	80060a2 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800612e:	2b21      	cmp	r3, #33	; 0x21
 8006130:	d142      	bne.n	80061b8 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006138:	81fb      	strh	r3, [r7, #14]
 800613a:	e03a      	b.n	80061b2 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d111      	bne.n	800616c <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689a      	ldr	r2, [r3, #8]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006156:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006166:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006168:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800616a:	e025      	b.n	80061b8 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617e:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006194:	1c9a      	adds	r2, r3, #2
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80061ac:	89fb      	ldrh	r3, [r7, #14]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	81fb      	strh	r3, [r7, #14]
 80061b2:	89fb      	ldrh	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1c1      	bne.n	800613c <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061da:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fa fe5c 	bl	8000ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006206:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620e:	2b22      	cmp	r3, #34	; 0x22
 8006210:	d13b      	bne.n	800628a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800621a:	89bb      	ldrh	r3, [r7, #12]
 800621c:	b2d9      	uxtb	r1, r3
 800621e:	89fb      	ldrh	r3, [r7, #14]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006226:	400a      	ands	r2, r1
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d122      	bne.n	800629a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006262:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0201 	bic.w	r2, r2, #1
 8006272:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fa fe20 	bl	8000ec8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006288:	e007      	b.n	800629a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0208 	orr.w	r2, r2, #8
 8006298:	619a      	str	r2, [r3, #24]
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80062b0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b8:	2b22      	cmp	r3, #34	; 0x22
 80062ba:	d13b      	bne.n	8006334 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80062ca:	89ba      	ldrh	r2, [r7, #12]
 80062cc:	89fb      	ldrh	r3, [r7, #14]
 80062ce:	4013      	ands	r3, r2
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062da:	1c9a      	adds	r2, r3, #2
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d122      	bne.n	8006344 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800630c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fa fdcb 	bl	8000ec8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006332:	e007      	b.n	8006344 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0208 	orr.w	r2, r2, #8
 8006342:	619a      	str	r2, [r3, #24]
}
 8006344:	bf00      	nop
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800635a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006362:	2b22      	cmp	r3, #34	; 0x22
 8006364:	d166      	bne.n	8006434 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800636c:	81fb      	strh	r3, [r7, #14]
 800636e:	e03d      	b.n	80063ec <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006378:	893b      	ldrh	r3, [r7, #8]
 800637a:	b2d9      	uxtb	r1, r3
 800637c:	89bb      	ldrh	r3, [r7, #12]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006384:	400a      	ands	r2, r1
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d119      	bne.n	80063e6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063c0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6899      	ldr	r1, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b1f      	ldr	r3, [pc, #124]	; (800644c <UART_RxISR_8BIT_FIFOEN+0x100>)
 80063ce:	400b      	ands	r3, r1
 80063d0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fa fd71 	bl	8000ec8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80063e6:	89fb      	ldrh	r3, [r7, #14]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	81fb      	strh	r3, [r7, #14]
 80063ec:	89fb      	ldrh	r3, [r7, #14]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1be      	bne.n	8006370 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063f8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80063fa:	897b      	ldrh	r3, [r7, #10]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d021      	beq.n	8006444 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006406:	897a      	ldrh	r2, [r7, #10]
 8006408:	429a      	cmp	r2, r3
 800640a:	d21b      	bcs.n	8006444 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800641a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a0c      	ldr	r2, [pc, #48]	; (8006450 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006420:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f042 0220 	orr.w	r2, r2, #32
 8006430:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006432:	e007      	b.n	8006444 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0208 	orr.w	r2, r2, #8
 8006442:	619a      	str	r2, [r3, #24]
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	effffffe 	.word	0xeffffffe
 8006450:	080061f9 	.word	0x080061f9

08006454 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006462:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646a:	2b22      	cmp	r3, #34	; 0x22
 800646c:	d166      	bne.n	800653c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006474:	82fb      	strh	r3, [r7, #22]
 8006476:	e03d      	b.n	80064f4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006484:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006486:	8a3a      	ldrh	r2, [r7, #16]
 8006488:	8abb      	ldrh	r3, [r7, #20]
 800648a:	4013      	ands	r3, r2
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006496:	1c9a      	adds	r2, r3, #2
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d119      	bne.n	80064ee <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064c8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6899      	ldr	r1, [r3, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b1f      	ldr	r3, [pc, #124]	; (8006554 <UART_RxISR_16BIT_FIFOEN+0x100>)
 80064d6:	400b      	ands	r3, r1
 80064d8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fa fced 	bl	8000ec8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80064ee:	8afb      	ldrh	r3, [r7, #22]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	82fb      	strh	r3, [r7, #22]
 80064f4:	8afb      	ldrh	r3, [r7, #22]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1be      	bne.n	8006478 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006500:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006502:	8a7b      	ldrh	r3, [r7, #18]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d021      	beq.n	800654c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800650e:	8a7a      	ldrh	r2, [r7, #18]
 8006510:	429a      	cmp	r2, r3
 8006512:	d21b      	bcs.n	800654c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006522:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006528:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0220 	orr.w	r2, r2, #32
 8006538:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800653a:	e007      	b.n	800654c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0208 	orr.w	r2, r2, #8
 800654a:	619a      	str	r2, [r3, #24]
}
 800654c:	bf00      	nop
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	effffffe 	.word	0xeffffffe
 8006558:	080062a3 	.word	0x080062a3

0800655c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_UARTEx_DisableFifoMode+0x16>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e027      	b.n	80065fe <HAL_UARTEx_DisableFifoMode+0x66>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2224      	movs	r2, #36	; 0x24
 80065ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800661e:	2302      	movs	r3, #2
 8006620:	e02d      	b.n	800667e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2224      	movs	r2, #36	; 0x24
 800662e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0201 	bic.w	r2, r2, #1
 8006648:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f850 	bl	8006704 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800669a:	2302      	movs	r3, #2
 800669c:	e02d      	b.n	80066fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2224      	movs	r2, #36	; 0x24
 80066aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0201 	bic.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f812 	bl	8006704 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b089      	sub	sp, #36	; 0x24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800670c:	4a2f      	ldr	r2, [pc, #188]	; (80067cc <UARTEx_SetNbDataToProcess+0xc8>)
 800670e:	f107 0314 	add.w	r3, r7, #20
 8006712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006716:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800671a:	4a2d      	ldr	r2, [pc, #180]	; (80067d0 <UARTEx_SetNbDataToProcess+0xcc>)
 800671c:	f107 030c 	add.w	r3, r7, #12
 8006720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006724:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800672c:	2b00      	cmp	r3, #0
 800672e:	d108      	bne.n	8006742 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006740:	e03d      	b.n	80067be <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006742:	2310      	movs	r3, #16
 8006744:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006746:	2310      	movs	r3, #16
 8006748:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	0e5b      	lsrs	r3, r3, #25
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f003 0307 	and.w	r3, r3, #7
 8006758:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	0f5b      	lsrs	r3, r3, #29
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800676a:	7fbb      	ldrb	r3, [r7, #30]
 800676c:	7f3a      	ldrb	r2, [r7, #28]
 800676e:	f107 0120 	add.w	r1, r7, #32
 8006772:	440a      	add	r2, r1
 8006774:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006778:	fb02 f303 	mul.w	r3, r2, r3
 800677c:	7f3a      	ldrb	r2, [r7, #28]
 800677e:	f107 0120 	add.w	r1, r7, #32
 8006782:	440a      	add	r2, r1
 8006784:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006788:	fb93 f3f2 	sdiv	r3, r3, r2
 800678c:	b29a      	uxth	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006794:	7ffb      	ldrb	r3, [r7, #31]
 8006796:	7f7a      	ldrb	r2, [r7, #29]
 8006798:	f107 0120 	add.w	r1, r7, #32
 800679c:	440a      	add	r2, r1
 800679e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80067a2:	fb02 f303 	mul.w	r3, r2, r3
 80067a6:	7f7a      	ldrb	r2, [r7, #29]
 80067a8:	f107 0120 	add.w	r1, r7, #32
 80067ac:	440a      	add	r2, r1
 80067ae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80067b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067be:	bf00      	nop
 80067c0:	3724      	adds	r7, #36	; 0x24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	08008898 	.word	0x08008898
 80067d0:	080088a0 	.word	0x080088a0

080067d4 <__errno>:
 80067d4:	4b01      	ldr	r3, [pc, #4]	; (80067dc <__errno+0x8>)
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20000010 	.word	0x20000010

080067e0 <__libc_init_array>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4e0d      	ldr	r6, [pc, #52]	; (8006818 <__libc_init_array+0x38>)
 80067e4:	4c0d      	ldr	r4, [pc, #52]	; (800681c <__libc_init_array+0x3c>)
 80067e6:	1ba4      	subs	r4, r4, r6
 80067e8:	10a4      	asrs	r4, r4, #2
 80067ea:	2500      	movs	r5, #0
 80067ec:	42a5      	cmp	r5, r4
 80067ee:	d109      	bne.n	8006804 <__libc_init_array+0x24>
 80067f0:	4e0b      	ldr	r6, [pc, #44]	; (8006820 <__libc_init_array+0x40>)
 80067f2:	4c0c      	ldr	r4, [pc, #48]	; (8006824 <__libc_init_array+0x44>)
 80067f4:	f002 f826 	bl	8008844 <_init>
 80067f8:	1ba4      	subs	r4, r4, r6
 80067fa:	10a4      	asrs	r4, r4, #2
 80067fc:	2500      	movs	r5, #0
 80067fe:	42a5      	cmp	r5, r4
 8006800:	d105      	bne.n	800680e <__libc_init_array+0x2e>
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006808:	4798      	blx	r3
 800680a:	3501      	adds	r5, #1
 800680c:	e7ee      	b.n	80067ec <__libc_init_array+0xc>
 800680e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006812:	4798      	blx	r3
 8006814:	3501      	adds	r5, #1
 8006816:	e7f2      	b.n	80067fe <__libc_init_array+0x1e>
 8006818:	08008b48 	.word	0x08008b48
 800681c:	08008b48 	.word	0x08008b48
 8006820:	08008b48 	.word	0x08008b48
 8006824:	08008b4c 	.word	0x08008b4c

08006828 <malloc>:
 8006828:	4b02      	ldr	r3, [pc, #8]	; (8006834 <malloc+0xc>)
 800682a:	4601      	mov	r1, r0
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	f000 b859 	b.w	80068e4 <_malloc_r>
 8006832:	bf00      	nop
 8006834:	20000010 	.word	0x20000010

08006838 <memset>:
 8006838:	4402      	add	r2, r0
 800683a:	4603      	mov	r3, r0
 800683c:	4293      	cmp	r3, r2
 800683e:	d100      	bne.n	8006842 <memset+0xa>
 8006840:	4770      	bx	lr
 8006842:	f803 1b01 	strb.w	r1, [r3], #1
 8006846:	e7f9      	b.n	800683c <memset+0x4>

08006848 <_free_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4605      	mov	r5, r0
 800684c:	2900      	cmp	r1, #0
 800684e:	d045      	beq.n	80068dc <_free_r+0x94>
 8006850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006854:	1f0c      	subs	r4, r1, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	bfb8      	it	lt
 800685a:	18e4      	addlt	r4, r4, r3
 800685c:	f001 faf9 	bl	8007e52 <__malloc_lock>
 8006860:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <_free_r+0x98>)
 8006862:	6813      	ldr	r3, [r2, #0]
 8006864:	4610      	mov	r0, r2
 8006866:	b933      	cbnz	r3, 8006876 <_free_r+0x2e>
 8006868:	6063      	str	r3, [r4, #4]
 800686a:	6014      	str	r4, [r2, #0]
 800686c:	4628      	mov	r0, r5
 800686e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006872:	f001 baef 	b.w	8007e54 <__malloc_unlock>
 8006876:	42a3      	cmp	r3, r4
 8006878:	d90c      	bls.n	8006894 <_free_r+0x4c>
 800687a:	6821      	ldr	r1, [r4, #0]
 800687c:	1862      	adds	r2, r4, r1
 800687e:	4293      	cmp	r3, r2
 8006880:	bf04      	itt	eq
 8006882:	681a      	ldreq	r2, [r3, #0]
 8006884:	685b      	ldreq	r3, [r3, #4]
 8006886:	6063      	str	r3, [r4, #4]
 8006888:	bf04      	itt	eq
 800688a:	1852      	addeq	r2, r2, r1
 800688c:	6022      	streq	r2, [r4, #0]
 800688e:	6004      	str	r4, [r0, #0]
 8006890:	e7ec      	b.n	800686c <_free_r+0x24>
 8006892:	4613      	mov	r3, r2
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	b10a      	cbz	r2, 800689c <_free_r+0x54>
 8006898:	42a2      	cmp	r2, r4
 800689a:	d9fa      	bls.n	8006892 <_free_r+0x4a>
 800689c:	6819      	ldr	r1, [r3, #0]
 800689e:	1858      	adds	r0, r3, r1
 80068a0:	42a0      	cmp	r0, r4
 80068a2:	d10b      	bne.n	80068bc <_free_r+0x74>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	4401      	add	r1, r0
 80068a8:	1858      	adds	r0, r3, r1
 80068aa:	4282      	cmp	r2, r0
 80068ac:	6019      	str	r1, [r3, #0]
 80068ae:	d1dd      	bne.n	800686c <_free_r+0x24>
 80068b0:	6810      	ldr	r0, [r2, #0]
 80068b2:	6852      	ldr	r2, [r2, #4]
 80068b4:	605a      	str	r2, [r3, #4]
 80068b6:	4401      	add	r1, r0
 80068b8:	6019      	str	r1, [r3, #0]
 80068ba:	e7d7      	b.n	800686c <_free_r+0x24>
 80068bc:	d902      	bls.n	80068c4 <_free_r+0x7c>
 80068be:	230c      	movs	r3, #12
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	e7d3      	b.n	800686c <_free_r+0x24>
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	1821      	adds	r1, r4, r0
 80068c8:	428a      	cmp	r2, r1
 80068ca:	bf04      	itt	eq
 80068cc:	6811      	ldreq	r1, [r2, #0]
 80068ce:	6852      	ldreq	r2, [r2, #4]
 80068d0:	6062      	str	r2, [r4, #4]
 80068d2:	bf04      	itt	eq
 80068d4:	1809      	addeq	r1, r1, r0
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	605c      	str	r4, [r3, #4]
 80068da:	e7c7      	b.n	800686c <_free_r+0x24>
 80068dc:	bd38      	pop	{r3, r4, r5, pc}
 80068de:	bf00      	nop
 80068e0:	2000023c 	.word	0x2000023c

080068e4 <_malloc_r>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	1ccd      	adds	r5, r1, #3
 80068e8:	f025 0503 	bic.w	r5, r5, #3
 80068ec:	3508      	adds	r5, #8
 80068ee:	2d0c      	cmp	r5, #12
 80068f0:	bf38      	it	cc
 80068f2:	250c      	movcc	r5, #12
 80068f4:	2d00      	cmp	r5, #0
 80068f6:	4606      	mov	r6, r0
 80068f8:	db01      	blt.n	80068fe <_malloc_r+0x1a>
 80068fa:	42a9      	cmp	r1, r5
 80068fc:	d903      	bls.n	8006906 <_malloc_r+0x22>
 80068fe:	230c      	movs	r3, #12
 8006900:	6033      	str	r3, [r6, #0]
 8006902:	2000      	movs	r0, #0
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	f001 faa4 	bl	8007e52 <__malloc_lock>
 800690a:	4a21      	ldr	r2, [pc, #132]	; (8006990 <_malloc_r+0xac>)
 800690c:	6814      	ldr	r4, [r2, #0]
 800690e:	4621      	mov	r1, r4
 8006910:	b991      	cbnz	r1, 8006938 <_malloc_r+0x54>
 8006912:	4c20      	ldr	r4, [pc, #128]	; (8006994 <_malloc_r+0xb0>)
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	b91b      	cbnz	r3, 8006920 <_malloc_r+0x3c>
 8006918:	4630      	mov	r0, r6
 800691a:	f000 fc79 	bl	8007210 <_sbrk_r>
 800691e:	6020      	str	r0, [r4, #0]
 8006920:	4629      	mov	r1, r5
 8006922:	4630      	mov	r0, r6
 8006924:	f000 fc74 	bl	8007210 <_sbrk_r>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d124      	bne.n	8006976 <_malloc_r+0x92>
 800692c:	230c      	movs	r3, #12
 800692e:	6033      	str	r3, [r6, #0]
 8006930:	4630      	mov	r0, r6
 8006932:	f001 fa8f 	bl	8007e54 <__malloc_unlock>
 8006936:	e7e4      	b.n	8006902 <_malloc_r+0x1e>
 8006938:	680b      	ldr	r3, [r1, #0]
 800693a:	1b5b      	subs	r3, r3, r5
 800693c:	d418      	bmi.n	8006970 <_malloc_r+0x8c>
 800693e:	2b0b      	cmp	r3, #11
 8006940:	d90f      	bls.n	8006962 <_malloc_r+0x7e>
 8006942:	600b      	str	r3, [r1, #0]
 8006944:	50cd      	str	r5, [r1, r3]
 8006946:	18cc      	adds	r4, r1, r3
 8006948:	4630      	mov	r0, r6
 800694a:	f001 fa83 	bl	8007e54 <__malloc_unlock>
 800694e:	f104 000b 	add.w	r0, r4, #11
 8006952:	1d23      	adds	r3, r4, #4
 8006954:	f020 0007 	bic.w	r0, r0, #7
 8006958:	1ac3      	subs	r3, r0, r3
 800695a:	d0d3      	beq.n	8006904 <_malloc_r+0x20>
 800695c:	425a      	negs	r2, r3
 800695e:	50e2      	str	r2, [r4, r3]
 8006960:	e7d0      	b.n	8006904 <_malloc_r+0x20>
 8006962:	428c      	cmp	r4, r1
 8006964:	684b      	ldr	r3, [r1, #4]
 8006966:	bf16      	itet	ne
 8006968:	6063      	strne	r3, [r4, #4]
 800696a:	6013      	streq	r3, [r2, #0]
 800696c:	460c      	movne	r4, r1
 800696e:	e7eb      	b.n	8006948 <_malloc_r+0x64>
 8006970:	460c      	mov	r4, r1
 8006972:	6849      	ldr	r1, [r1, #4]
 8006974:	e7cc      	b.n	8006910 <_malloc_r+0x2c>
 8006976:	1cc4      	adds	r4, r0, #3
 8006978:	f024 0403 	bic.w	r4, r4, #3
 800697c:	42a0      	cmp	r0, r4
 800697e:	d005      	beq.n	800698c <_malloc_r+0xa8>
 8006980:	1a21      	subs	r1, r4, r0
 8006982:	4630      	mov	r0, r6
 8006984:	f000 fc44 	bl	8007210 <_sbrk_r>
 8006988:	3001      	adds	r0, #1
 800698a:	d0cf      	beq.n	800692c <_malloc_r+0x48>
 800698c:	6025      	str	r5, [r4, #0]
 800698e:	e7db      	b.n	8006948 <_malloc_r+0x64>
 8006990:	2000023c 	.word	0x2000023c
 8006994:	20000240 	.word	0x20000240

08006998 <__cvt>:
 8006998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800699a:	ed2d 8b02 	vpush	{d8}
 800699e:	eeb0 8b40 	vmov.f64	d8, d0
 80069a2:	b085      	sub	sp, #20
 80069a4:	4617      	mov	r7, r2
 80069a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80069a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80069aa:	ee18 2a90 	vmov	r2, s17
 80069ae:	f025 0520 	bic.w	r5, r5, #32
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	bfb6      	itet	lt
 80069b6:	222d      	movlt	r2, #45	; 0x2d
 80069b8:	2200      	movge	r2, #0
 80069ba:	eeb1 8b40 	vneglt.f64	d8, d0
 80069be:	2d46      	cmp	r5, #70	; 0x46
 80069c0:	460c      	mov	r4, r1
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	d004      	beq.n	80069d0 <__cvt+0x38>
 80069c6:	2d45      	cmp	r5, #69	; 0x45
 80069c8:	d100      	bne.n	80069cc <__cvt+0x34>
 80069ca:	3401      	adds	r4, #1
 80069cc:	2102      	movs	r1, #2
 80069ce:	e000      	b.n	80069d2 <__cvt+0x3a>
 80069d0:	2103      	movs	r1, #3
 80069d2:	ab03      	add	r3, sp, #12
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	ab02      	add	r3, sp, #8
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	4622      	mov	r2, r4
 80069dc:	4633      	mov	r3, r6
 80069de:	eeb0 0b48 	vmov.f64	d0, d8
 80069e2:	f000 fcd1 	bl	8007388 <_dtoa_r>
 80069e6:	2d47      	cmp	r5, #71	; 0x47
 80069e8:	d101      	bne.n	80069ee <__cvt+0x56>
 80069ea:	07fb      	lsls	r3, r7, #31
 80069ec:	d51e      	bpl.n	8006a2c <__cvt+0x94>
 80069ee:	2d46      	cmp	r5, #70	; 0x46
 80069f0:	eb00 0304 	add.w	r3, r0, r4
 80069f4:	d10c      	bne.n	8006a10 <__cvt+0x78>
 80069f6:	7802      	ldrb	r2, [r0, #0]
 80069f8:	2a30      	cmp	r2, #48	; 0x30
 80069fa:	d107      	bne.n	8006a0c <__cvt+0x74>
 80069fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a04:	bf1c      	itt	ne
 8006a06:	f1c4 0401 	rsbne	r4, r4, #1
 8006a0a:	6034      	strne	r4, [r6, #0]
 8006a0c:	6832      	ldr	r2, [r6, #0]
 8006a0e:	4413      	add	r3, r2
 8006a10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a18:	d007      	beq.n	8006a2a <__cvt+0x92>
 8006a1a:	2130      	movs	r1, #48	; 0x30
 8006a1c:	9a03      	ldr	r2, [sp, #12]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d204      	bcs.n	8006a2c <__cvt+0x94>
 8006a22:	1c54      	adds	r4, r2, #1
 8006a24:	9403      	str	r4, [sp, #12]
 8006a26:	7011      	strb	r1, [r2, #0]
 8006a28:	e7f8      	b.n	8006a1c <__cvt+0x84>
 8006a2a:	9303      	str	r3, [sp, #12]
 8006a2c:	9b03      	ldr	r3, [sp, #12]
 8006a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a30:	1a1b      	subs	r3, r3, r0
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	b005      	add	sp, #20
 8006a36:	ecbd 8b02 	vpop	{d8}
 8006a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a3c <__exponent>:
 8006a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a3e:	2900      	cmp	r1, #0
 8006a40:	4604      	mov	r4, r0
 8006a42:	bfba      	itte	lt
 8006a44:	4249      	neglt	r1, r1
 8006a46:	232d      	movlt	r3, #45	; 0x2d
 8006a48:	232b      	movge	r3, #43	; 0x2b
 8006a4a:	2909      	cmp	r1, #9
 8006a4c:	f804 2b02 	strb.w	r2, [r4], #2
 8006a50:	7043      	strb	r3, [r0, #1]
 8006a52:	dd20      	ble.n	8006a96 <__exponent+0x5a>
 8006a54:	f10d 0307 	add.w	r3, sp, #7
 8006a58:	461f      	mov	r7, r3
 8006a5a:	260a      	movs	r6, #10
 8006a5c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a60:	fb06 1115 	mls	r1, r6, r5, r1
 8006a64:	3130      	adds	r1, #48	; 0x30
 8006a66:	2d09      	cmp	r5, #9
 8006a68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a6c:	f103 32ff 	add.w	r2, r3, #4294967295
 8006a70:	4629      	mov	r1, r5
 8006a72:	dc09      	bgt.n	8006a88 <__exponent+0x4c>
 8006a74:	3130      	adds	r1, #48	; 0x30
 8006a76:	3b02      	subs	r3, #2
 8006a78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a7c:	42bb      	cmp	r3, r7
 8006a7e:	4622      	mov	r2, r4
 8006a80:	d304      	bcc.n	8006a8c <__exponent+0x50>
 8006a82:	1a10      	subs	r0, r2, r0
 8006a84:	b003      	add	sp, #12
 8006a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a88:	4613      	mov	r3, r2
 8006a8a:	e7e7      	b.n	8006a5c <__exponent+0x20>
 8006a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a90:	f804 2b01 	strb.w	r2, [r4], #1
 8006a94:	e7f2      	b.n	8006a7c <__exponent+0x40>
 8006a96:	2330      	movs	r3, #48	; 0x30
 8006a98:	4419      	add	r1, r3
 8006a9a:	7083      	strb	r3, [r0, #2]
 8006a9c:	1d02      	adds	r2, r0, #4
 8006a9e:	70c1      	strb	r1, [r0, #3]
 8006aa0:	e7ef      	b.n	8006a82 <__exponent+0x46>
 8006aa2:	0000      	movs	r0, r0
 8006aa4:	0000      	movs	r0, r0
	...

08006aa8 <_printf_float>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	b08d      	sub	sp, #52	; 0x34
 8006aae:	460c      	mov	r4, r1
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	461f      	mov	r7, r3
 8006ab4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006ab8:	4605      	mov	r5, r0
 8006aba:	f001 f9b1 	bl	8007e20 <_localeconv_r>
 8006abe:	f8d0 b000 	ldr.w	fp, [r0]
 8006ac2:	4658      	mov	r0, fp
 8006ac4:	f7f9 fc0c 	bl	80002e0 <strlen>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	930a      	str	r3, [sp, #40]	; 0x28
 8006acc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad0:	9005      	str	r0, [sp, #20]
 8006ad2:	3307      	adds	r3, #7
 8006ad4:	f023 0307 	bic.w	r3, r3, #7
 8006ad8:	f103 0108 	add.w	r1, r3, #8
 8006adc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	f8c8 1000 	str.w	r1, [r8]
 8006ae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006aea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006aee:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8006d78 <_printf_float+0x2d0>
 8006af2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006af6:	eeb0 6bc0 	vabs.f64	d6, d0
 8006afa:	eeb4 6b47 	vcmp.f64	d6, d7
 8006afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b02:	dd24      	ble.n	8006b4e <_printf_float+0xa6>
 8006b04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b0c:	d502      	bpl.n	8006b14 <_printf_float+0x6c>
 8006b0e:	232d      	movs	r3, #45	; 0x2d
 8006b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b14:	499a      	ldr	r1, [pc, #616]	; (8006d80 <_printf_float+0x2d8>)
 8006b16:	4b9b      	ldr	r3, [pc, #620]	; (8006d84 <_printf_float+0x2dc>)
 8006b18:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b1c:	bf8c      	ite	hi
 8006b1e:	4688      	movhi	r8, r1
 8006b20:	4698      	movls	r8, r3
 8006b22:	f022 0204 	bic.w	r2, r2, #4
 8006b26:	2303      	movs	r3, #3
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	6022      	str	r2, [r4, #0]
 8006b2c:	f04f 0a00 	mov.w	sl, #0
 8006b30:	9700      	str	r7, [sp, #0]
 8006b32:	4633      	mov	r3, r6
 8006b34:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b36:	4621      	mov	r1, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f9e1 	bl	8006f00 <_printf_common>
 8006b3e:	3001      	adds	r0, #1
 8006b40:	f040 8089 	bne.w	8006c56 <_printf_float+0x1ae>
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295
 8006b48:	b00d      	add	sp, #52	; 0x34
 8006b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b56:	d702      	bvc.n	8006b5e <_printf_float+0xb6>
 8006b58:	498b      	ldr	r1, [pc, #556]	; (8006d88 <_printf_float+0x2e0>)
 8006b5a:	4b8c      	ldr	r3, [pc, #560]	; (8006d8c <_printf_float+0x2e4>)
 8006b5c:	e7dc      	b.n	8006b18 <_printf_float+0x70>
 8006b5e:	6861      	ldr	r1, [r4, #4]
 8006b60:	1c4b      	adds	r3, r1, #1
 8006b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b66:	ab0a      	add	r3, sp, #40	; 0x28
 8006b68:	a809      	add	r0, sp, #36	; 0x24
 8006b6a:	d13b      	bne.n	8006be4 <_printf_float+0x13c>
 8006b6c:	2106      	movs	r1, #6
 8006b6e:	6061      	str	r1, [r4, #4]
 8006b70:	f04f 0c00 	mov.w	ip, #0
 8006b74:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006b78:	e9cd 0900 	strd	r0, r9, [sp]
 8006b7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b80:	6022      	str	r2, [r4, #0]
 8006b82:	6861      	ldr	r1, [r4, #4]
 8006b84:	4628      	mov	r0, r5
 8006b86:	f7ff ff07 	bl	8006998 <__cvt>
 8006b8a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8006b8e:	2b47      	cmp	r3, #71	; 0x47
 8006b90:	4680      	mov	r8, r0
 8006b92:	d109      	bne.n	8006ba8 <_printf_float+0x100>
 8006b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b96:	1cd8      	adds	r0, r3, #3
 8006b98:	db02      	blt.n	8006ba0 <_printf_float+0xf8>
 8006b9a:	6862      	ldr	r2, [r4, #4]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	dd47      	ble.n	8006c30 <_printf_float+0x188>
 8006ba0:	f1a9 0902 	sub.w	r9, r9, #2
 8006ba4:	fa5f f989 	uxtb.w	r9, r9
 8006ba8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bae:	d824      	bhi.n	8006bfa <_printf_float+0x152>
 8006bb0:	3901      	subs	r1, #1
 8006bb2:	464a      	mov	r2, r9
 8006bb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bb8:	9109      	str	r1, [sp, #36]	; 0x24
 8006bba:	f7ff ff3f 	bl	8006a3c <__exponent>
 8006bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bc0:	1813      	adds	r3, r2, r0
 8006bc2:	2a01      	cmp	r2, #1
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	dc02      	bgt.n	8006bd0 <_printf_float+0x128>
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	07d1      	lsls	r1, r2, #31
 8006bce:	d501      	bpl.n	8006bd4 <_printf_float+0x12c>
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0a9      	beq.n	8006b30 <_printf_float+0x88>
 8006bdc:	232d      	movs	r3, #45	; 0x2d
 8006bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be2:	e7a5      	b.n	8006b30 <_printf_float+0x88>
 8006be4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8006be8:	f000 8178 	beq.w	8006edc <_printf_float+0x434>
 8006bec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006bf0:	d1be      	bne.n	8006b70 <_printf_float+0xc8>
 8006bf2:	2900      	cmp	r1, #0
 8006bf4:	d1bc      	bne.n	8006b70 <_printf_float+0xc8>
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	e7b9      	b.n	8006b6e <_printf_float+0xc6>
 8006bfa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006bfe:	d119      	bne.n	8006c34 <_printf_float+0x18c>
 8006c00:	2900      	cmp	r1, #0
 8006c02:	6863      	ldr	r3, [r4, #4]
 8006c04:	dd0c      	ble.n	8006c20 <_printf_float+0x178>
 8006c06:	6121      	str	r1, [r4, #16]
 8006c08:	b913      	cbnz	r3, 8006c10 <_printf_float+0x168>
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	07d2      	lsls	r2, r2, #31
 8006c0e:	d502      	bpl.n	8006c16 <_printf_float+0x16e>
 8006c10:	3301      	adds	r3, #1
 8006c12:	440b      	add	r3, r1
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c18:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c1a:	f04f 0a00 	mov.w	sl, #0
 8006c1e:	e7d9      	b.n	8006bd4 <_printf_float+0x12c>
 8006c20:	b913      	cbnz	r3, 8006c28 <_printf_float+0x180>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	07d0      	lsls	r0, r2, #31
 8006c26:	d501      	bpl.n	8006c2c <_printf_float+0x184>
 8006c28:	3302      	adds	r3, #2
 8006c2a:	e7f3      	b.n	8006c14 <_printf_float+0x16c>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e7f1      	b.n	8006c14 <_printf_float+0x16c>
 8006c30:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006c34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	db05      	blt.n	8006c48 <_printf_float+0x1a0>
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	6123      	str	r3, [r4, #16]
 8006c40:	07d1      	lsls	r1, r2, #31
 8006c42:	d5e8      	bpl.n	8006c16 <_printf_float+0x16e>
 8006c44:	3301      	adds	r3, #1
 8006c46:	e7e5      	b.n	8006c14 <_printf_float+0x16c>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	bfd4      	ite	le
 8006c4c:	f1c3 0302 	rsble	r3, r3, #2
 8006c50:	2301      	movgt	r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	e7de      	b.n	8006c14 <_printf_float+0x16c>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	055a      	lsls	r2, r3, #21
 8006c5a:	d407      	bmi.n	8006c6c <_printf_float+0x1c4>
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	4642      	mov	r2, r8
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	d12a      	bne.n	8006cc0 <_printf_float+0x218>
 8006c6a:	e76b      	b.n	8006b44 <_printf_float+0x9c>
 8006c6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c70:	f240 80de 	bls.w	8006e30 <_printf_float+0x388>
 8006c74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c80:	d133      	bne.n	8006cea <_printf_float+0x242>
 8006c82:	2301      	movs	r3, #1
 8006c84:	4a42      	ldr	r2, [pc, #264]	; (8006d90 <_printf_float+0x2e8>)
 8006c86:	4631      	mov	r1, r6
 8006c88:	4628      	mov	r0, r5
 8006c8a:	47b8      	blx	r7
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	f43f af59 	beq.w	8006b44 <_printf_float+0x9c>
 8006c92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c96:	429a      	cmp	r2, r3
 8006c98:	db02      	blt.n	8006ca0 <_printf_float+0x1f8>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	07d8      	lsls	r0, r3, #31
 8006c9e:	d50f      	bpl.n	8006cc0 <_printf_float+0x218>
 8006ca0:	9b05      	ldr	r3, [sp, #20]
 8006ca2:	465a      	mov	r2, fp
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f af4a 	beq.w	8006b44 <_printf_float+0x9c>
 8006cb0:	f04f 0800 	mov.w	r8, #0
 8006cb4:	f104 091a 	add.w	r9, r4, #26
 8006cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	4543      	cmp	r3, r8
 8006cbe:	dc09      	bgt.n	8006cd4 <_printf_float+0x22c>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	079b      	lsls	r3, r3, #30
 8006cc4:	f100 8105 	bmi.w	8006ed2 <_printf_float+0x42a>
 8006cc8:	68e0      	ldr	r0, [r4, #12]
 8006cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ccc:	4298      	cmp	r0, r3
 8006cce:	bfb8      	it	lt
 8006cd0:	4618      	movlt	r0, r3
 8006cd2:	e739      	b.n	8006b48 <_printf_float+0xa0>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	464a      	mov	r2, r9
 8006cd8:	4631      	mov	r1, r6
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b8      	blx	r7
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f43f af30 	beq.w	8006b44 <_printf_float+0x9c>
 8006ce4:	f108 0801 	add.w	r8, r8, #1
 8006ce8:	e7e6      	b.n	8006cb8 <_printf_float+0x210>
 8006cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dc2b      	bgt.n	8006d48 <_printf_float+0x2a0>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <_printf_float+0x2e8>)
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	47b8      	blx	r7
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	f43f af22 	beq.w	8006b44 <_printf_float+0x9c>
 8006d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d02:	b923      	cbnz	r3, 8006d0e <_printf_float+0x266>
 8006d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d06:	b913      	cbnz	r3, 8006d0e <_printf_float+0x266>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	07d9      	lsls	r1, r3, #31
 8006d0c:	d5d8      	bpl.n	8006cc0 <_printf_float+0x218>
 8006d0e:	9b05      	ldr	r3, [sp, #20]
 8006d10:	465a      	mov	r2, fp
 8006d12:	4631      	mov	r1, r6
 8006d14:	4628      	mov	r0, r5
 8006d16:	47b8      	blx	r7
 8006d18:	3001      	adds	r0, #1
 8006d1a:	f43f af13 	beq.w	8006b44 <_printf_float+0x9c>
 8006d1e:	f04f 0900 	mov.w	r9, #0
 8006d22:	f104 0a1a 	add.w	sl, r4, #26
 8006d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d28:	425b      	negs	r3, r3
 8006d2a:	454b      	cmp	r3, r9
 8006d2c:	dc01      	bgt.n	8006d32 <_printf_float+0x28a>
 8006d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d30:	e795      	b.n	8006c5e <_printf_float+0x1b6>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4652      	mov	r2, sl
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	47b8      	blx	r7
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	f43f af01 	beq.w	8006b44 <_printf_float+0x9c>
 8006d42:	f109 0901 	add.w	r9, r9, #1
 8006d46:	e7ee      	b.n	8006d26 <_printf_float+0x27e>
 8006d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	bfa8      	it	ge
 8006d50:	461a      	movge	r2, r3
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	4691      	mov	r9, r2
 8006d56:	dd07      	ble.n	8006d68 <_printf_float+0x2c0>
 8006d58:	4613      	mov	r3, r2
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	f43f aeee 	beq.w	8006b44 <_printf_float+0x9c>
 8006d68:	f104 031a 	add.w	r3, r4, #26
 8006d6c:	f04f 0a00 	mov.w	sl, #0
 8006d70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d74:	9307      	str	r3, [sp, #28]
 8006d76:	e017      	b.n	8006da8 <_printf_float+0x300>
 8006d78:	ffffffff 	.word	0xffffffff
 8006d7c:	7fefffff 	.word	0x7fefffff
 8006d80:	080088e0 	.word	0x080088e0
 8006d84:	080088dc 	.word	0x080088dc
 8006d88:	080088e8 	.word	0x080088e8
 8006d8c:	080088e4 	.word	0x080088e4
 8006d90:	080088ec 	.word	0x080088ec
 8006d94:	2301      	movs	r3, #1
 8006d96:	9a07      	ldr	r2, [sp, #28]
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	47b8      	blx	r7
 8006d9e:	3001      	adds	r0, #1
 8006da0:	f43f aed0 	beq.w	8006b44 <_printf_float+0x9c>
 8006da4:	f10a 0a01 	add.w	sl, sl, #1
 8006da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006daa:	9306      	str	r3, [sp, #24]
 8006dac:	eba3 0309 	sub.w	r3, r3, r9
 8006db0:	4553      	cmp	r3, sl
 8006db2:	dcef      	bgt.n	8006d94 <_printf_float+0x2ec>
 8006db4:	9b06      	ldr	r3, [sp, #24]
 8006db6:	4498      	add	r8, r3
 8006db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	db15      	blt.n	8006dec <_printf_float+0x344>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	07da      	lsls	r2, r3, #31
 8006dc4:	d412      	bmi.n	8006dec <_printf_float+0x344>
 8006dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc8:	9a06      	ldr	r2, [sp, #24]
 8006dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dcc:	1a9a      	subs	r2, r3, r2
 8006dce:	eba3 0a01 	sub.w	sl, r3, r1
 8006dd2:	4592      	cmp	sl, r2
 8006dd4:	bfa8      	it	ge
 8006dd6:	4692      	movge	sl, r2
 8006dd8:	f1ba 0f00 	cmp.w	sl, #0
 8006ddc:	dc0e      	bgt.n	8006dfc <_printf_float+0x354>
 8006dde:	f04f 0800 	mov.w	r8, #0
 8006de2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006de6:	f104 091a 	add.w	r9, r4, #26
 8006dea:	e019      	b.n	8006e20 <_printf_float+0x378>
 8006dec:	9b05      	ldr	r3, [sp, #20]
 8006dee:	465a      	mov	r2, fp
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	d1e5      	bne.n	8006dc6 <_printf_float+0x31e>
 8006dfa:	e6a3      	b.n	8006b44 <_printf_float+0x9c>
 8006dfc:	4653      	mov	r3, sl
 8006dfe:	4642      	mov	r2, r8
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	d1e9      	bne.n	8006dde <_printf_float+0x336>
 8006e0a:	e69b      	b.n	8006b44 <_printf_float+0x9c>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	464a      	mov	r2, r9
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	f43f ae94 	beq.w	8006b44 <_printf_float+0x9c>
 8006e1c:	f108 0801 	add.w	r8, r8, #1
 8006e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e24:	1a9b      	subs	r3, r3, r2
 8006e26:	eba3 030a 	sub.w	r3, r3, sl
 8006e2a:	4543      	cmp	r3, r8
 8006e2c:	dcee      	bgt.n	8006e0c <_printf_float+0x364>
 8006e2e:	e747      	b.n	8006cc0 <_printf_float+0x218>
 8006e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e32:	2a01      	cmp	r2, #1
 8006e34:	dc01      	bgt.n	8006e3a <_printf_float+0x392>
 8006e36:	07db      	lsls	r3, r3, #31
 8006e38:	d539      	bpl.n	8006eae <_printf_float+0x406>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	f43f ae7d 	beq.w	8006b44 <_printf_float+0x9c>
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	465a      	mov	r2, fp
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f108 0801 	add.w	r8, r8, #1
 8006e5a:	f43f ae73 	beq.w	8006b44 <_printf_float+0x9c>
 8006e5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e70:	d018      	beq.n	8006ea4 <_printf_float+0x3fc>
 8006e72:	4642      	mov	r2, r8
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	d10e      	bne.n	8006e9c <_printf_float+0x3f4>
 8006e7e:	e661      	b.n	8006b44 <_printf_float+0x9c>
 8006e80:	2301      	movs	r3, #1
 8006e82:	464a      	mov	r2, r9
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b8      	blx	r7
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f43f ae5a 	beq.w	8006b44 <_printf_float+0x9c>
 8006e90:	f108 0801 	add.w	r8, r8, #1
 8006e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e96:	3b01      	subs	r3, #1
 8006e98:	4543      	cmp	r3, r8
 8006e9a:	dcf1      	bgt.n	8006e80 <_printf_float+0x3d8>
 8006e9c:	4653      	mov	r3, sl
 8006e9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ea2:	e6dd      	b.n	8006c60 <_printf_float+0x1b8>
 8006ea4:	f04f 0800 	mov.w	r8, #0
 8006ea8:	f104 091a 	add.w	r9, r4, #26
 8006eac:	e7f2      	b.n	8006e94 <_printf_float+0x3ec>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e7df      	b.n	8006e72 <_printf_float+0x3ca>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	464a      	mov	r2, r9
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b8      	blx	r7
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f43f ae41 	beq.w	8006b44 <_printf_float+0x9c>
 8006ec2:	f108 0801 	add.w	r8, r8, #1
 8006ec6:	68e3      	ldr	r3, [r4, #12]
 8006ec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eca:	1a9b      	subs	r3, r3, r2
 8006ecc:	4543      	cmp	r3, r8
 8006ece:	dcf0      	bgt.n	8006eb2 <_printf_float+0x40a>
 8006ed0:	e6fa      	b.n	8006cc8 <_printf_float+0x220>
 8006ed2:	f04f 0800 	mov.w	r8, #0
 8006ed6:	f104 0919 	add.w	r9, r4, #25
 8006eda:	e7f4      	b.n	8006ec6 <_printf_float+0x41e>
 8006edc:	2900      	cmp	r1, #0
 8006ede:	f43f ae8a 	beq.w	8006bf6 <_printf_float+0x14e>
 8006ee2:	f04f 0c00 	mov.w	ip, #0
 8006ee6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006eea:	e9cd 0900 	strd	r0, r9, [sp]
 8006eee:	6022      	str	r2, [r4, #0]
 8006ef0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f7ff fd4f 	bl	8006998 <__cvt>
 8006efa:	4680      	mov	r8, r0
 8006efc:	e64a      	b.n	8006b94 <_printf_float+0xec>
 8006efe:	bf00      	nop

08006f00 <_printf_common>:
 8006f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	4691      	mov	r9, r2
 8006f06:	461f      	mov	r7, r3
 8006f08:	688a      	ldr	r2, [r1, #8]
 8006f0a:	690b      	ldr	r3, [r1, #16]
 8006f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	bfb8      	it	lt
 8006f14:	4613      	movlt	r3, r2
 8006f16:	f8c9 3000 	str.w	r3, [r9]
 8006f1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f1e:	4606      	mov	r6, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	b112      	cbz	r2, 8006f2a <_printf_common+0x2a>
 8006f24:	3301      	adds	r3, #1
 8006f26:	f8c9 3000 	str.w	r3, [r9]
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	0699      	lsls	r1, r3, #26
 8006f2e:	bf42      	ittt	mi
 8006f30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f34:	3302      	addmi	r3, #2
 8006f36:	f8c9 3000 	strmi.w	r3, [r9]
 8006f3a:	6825      	ldr	r5, [r4, #0]
 8006f3c:	f015 0506 	ands.w	r5, r5, #6
 8006f40:	d107      	bne.n	8006f52 <_printf_common+0x52>
 8006f42:	f104 0a19 	add.w	sl, r4, #25
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	f8d9 2000 	ldr.w	r2, [r9]
 8006f4c:	1a9b      	subs	r3, r3, r2
 8006f4e:	42ab      	cmp	r3, r5
 8006f50:	dc28      	bgt.n	8006fa4 <_printf_common+0xa4>
 8006f52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	3300      	adds	r3, #0
 8006f5a:	bf18      	it	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	0692      	lsls	r2, r2, #26
 8006f60:	d42d      	bmi.n	8006fbe <_printf_common+0xbe>
 8006f62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f66:	4639      	mov	r1, r7
 8006f68:	4630      	mov	r0, r6
 8006f6a:	47c0      	blx	r8
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d020      	beq.n	8006fb2 <_printf_common+0xb2>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	68e5      	ldr	r5, [r4, #12]
 8006f74:	f8d9 2000 	ldr.w	r2, [r9]
 8006f78:	f003 0306 	and.w	r3, r3, #6
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	bf08      	it	eq
 8006f80:	1aad      	subeq	r5, r5, r2
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	6922      	ldr	r2, [r4, #16]
 8006f86:	bf0c      	ite	eq
 8006f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f8c:	2500      	movne	r5, #0
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	bfc4      	itt	gt
 8006f92:	1a9b      	subgt	r3, r3, r2
 8006f94:	18ed      	addgt	r5, r5, r3
 8006f96:	f04f 0900 	mov.w	r9, #0
 8006f9a:	341a      	adds	r4, #26
 8006f9c:	454d      	cmp	r5, r9
 8006f9e:	d11a      	bne.n	8006fd6 <_printf_common+0xd6>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	e008      	b.n	8006fb6 <_printf_common+0xb6>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	4652      	mov	r2, sl
 8006fa8:	4639      	mov	r1, r7
 8006faa:	4630      	mov	r0, r6
 8006fac:	47c0      	blx	r8
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d103      	bne.n	8006fba <_printf_common+0xba>
 8006fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fba:	3501      	adds	r5, #1
 8006fbc:	e7c3      	b.n	8006f46 <_printf_common+0x46>
 8006fbe:	18e1      	adds	r1, r4, r3
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	2030      	movs	r0, #48	; 0x30
 8006fc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fc8:	4422      	add	r2, r4
 8006fca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fd2:	3302      	adds	r3, #2
 8006fd4:	e7c5      	b.n	8006f62 <_printf_common+0x62>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4622      	mov	r2, r4
 8006fda:	4639      	mov	r1, r7
 8006fdc:	4630      	mov	r0, r6
 8006fde:	47c0      	blx	r8
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d0e6      	beq.n	8006fb2 <_printf_common+0xb2>
 8006fe4:	f109 0901 	add.w	r9, r9, #1
 8006fe8:	e7d8      	b.n	8006f9c <_printf_common+0x9c>
	...

08006fec <_printf_i>:
 8006fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ff0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	7e09      	ldrb	r1, [r1, #24]
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	296e      	cmp	r1, #110	; 0x6e
 8006ffc:	4617      	mov	r7, r2
 8006ffe:	4606      	mov	r6, r0
 8007000:	4698      	mov	r8, r3
 8007002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007004:	f000 80b3 	beq.w	800716e <_printf_i+0x182>
 8007008:	d822      	bhi.n	8007050 <_printf_i+0x64>
 800700a:	2963      	cmp	r1, #99	; 0x63
 800700c:	d036      	beq.n	800707c <_printf_i+0x90>
 800700e:	d80a      	bhi.n	8007026 <_printf_i+0x3a>
 8007010:	2900      	cmp	r1, #0
 8007012:	f000 80b9 	beq.w	8007188 <_printf_i+0x19c>
 8007016:	2958      	cmp	r1, #88	; 0x58
 8007018:	f000 8083 	beq.w	8007122 <_printf_i+0x136>
 800701c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007020:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007024:	e032      	b.n	800708c <_printf_i+0xa0>
 8007026:	2964      	cmp	r1, #100	; 0x64
 8007028:	d001      	beq.n	800702e <_printf_i+0x42>
 800702a:	2969      	cmp	r1, #105	; 0x69
 800702c:	d1f6      	bne.n	800701c <_printf_i+0x30>
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	6813      	ldr	r3, [r2, #0]
 8007032:	0605      	lsls	r5, r0, #24
 8007034:	f103 0104 	add.w	r1, r3, #4
 8007038:	d52a      	bpl.n	8007090 <_printf_i+0xa4>
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6011      	str	r1, [r2, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	da03      	bge.n	800704a <_printf_i+0x5e>
 8007042:	222d      	movs	r2, #45	; 0x2d
 8007044:	425b      	negs	r3, r3
 8007046:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800704a:	486f      	ldr	r0, [pc, #444]	; (8007208 <_printf_i+0x21c>)
 800704c:	220a      	movs	r2, #10
 800704e:	e039      	b.n	80070c4 <_printf_i+0xd8>
 8007050:	2973      	cmp	r1, #115	; 0x73
 8007052:	f000 809d 	beq.w	8007190 <_printf_i+0x1a4>
 8007056:	d808      	bhi.n	800706a <_printf_i+0x7e>
 8007058:	296f      	cmp	r1, #111	; 0x6f
 800705a:	d020      	beq.n	800709e <_printf_i+0xb2>
 800705c:	2970      	cmp	r1, #112	; 0x70
 800705e:	d1dd      	bne.n	800701c <_printf_i+0x30>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	f043 0320 	orr.w	r3, r3, #32
 8007066:	6023      	str	r3, [r4, #0]
 8007068:	e003      	b.n	8007072 <_printf_i+0x86>
 800706a:	2975      	cmp	r1, #117	; 0x75
 800706c:	d017      	beq.n	800709e <_printf_i+0xb2>
 800706e:	2978      	cmp	r1, #120	; 0x78
 8007070:	d1d4      	bne.n	800701c <_printf_i+0x30>
 8007072:	2378      	movs	r3, #120	; 0x78
 8007074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007078:	4864      	ldr	r0, [pc, #400]	; (800720c <_printf_i+0x220>)
 800707a:	e055      	b.n	8007128 <_printf_i+0x13c>
 800707c:	6813      	ldr	r3, [r2, #0]
 800707e:	1d19      	adds	r1, r3, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6011      	str	r1, [r2, #0]
 8007084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800708c:	2301      	movs	r3, #1
 800708e:	e08c      	b.n	80071aa <_printf_i+0x1be>
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6011      	str	r1, [r2, #0]
 8007094:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007098:	bf18      	it	ne
 800709a:	b21b      	sxthne	r3, r3
 800709c:	e7cf      	b.n	800703e <_printf_i+0x52>
 800709e:	6813      	ldr	r3, [r2, #0]
 80070a0:	6825      	ldr	r5, [r4, #0]
 80070a2:	1d18      	adds	r0, r3, #4
 80070a4:	6010      	str	r0, [r2, #0]
 80070a6:	0628      	lsls	r0, r5, #24
 80070a8:	d501      	bpl.n	80070ae <_printf_i+0xc2>
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	e002      	b.n	80070b4 <_printf_i+0xc8>
 80070ae:	0668      	lsls	r0, r5, #25
 80070b0:	d5fb      	bpl.n	80070aa <_printf_i+0xbe>
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	4854      	ldr	r0, [pc, #336]	; (8007208 <_printf_i+0x21c>)
 80070b6:	296f      	cmp	r1, #111	; 0x6f
 80070b8:	bf14      	ite	ne
 80070ba:	220a      	movne	r2, #10
 80070bc:	2208      	moveq	r2, #8
 80070be:	2100      	movs	r1, #0
 80070c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070c4:	6865      	ldr	r5, [r4, #4]
 80070c6:	60a5      	str	r5, [r4, #8]
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	f2c0 8095 	blt.w	80071f8 <_printf_i+0x20c>
 80070ce:	6821      	ldr	r1, [r4, #0]
 80070d0:	f021 0104 	bic.w	r1, r1, #4
 80070d4:	6021      	str	r1, [r4, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d13d      	bne.n	8007156 <_printf_i+0x16a>
 80070da:	2d00      	cmp	r5, #0
 80070dc:	f040 808e 	bne.w	80071fc <_printf_i+0x210>
 80070e0:	4665      	mov	r5, ip
 80070e2:	2a08      	cmp	r2, #8
 80070e4:	d10b      	bne.n	80070fe <_printf_i+0x112>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	07db      	lsls	r3, r3, #31
 80070ea:	d508      	bpl.n	80070fe <_printf_i+0x112>
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	6862      	ldr	r2, [r4, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	bfde      	ittt	le
 80070f4:	2330      	movle	r3, #48	; 0x30
 80070f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070fe:	ebac 0305 	sub.w	r3, ip, r5
 8007102:	6123      	str	r3, [r4, #16]
 8007104:	f8cd 8000 	str.w	r8, [sp]
 8007108:	463b      	mov	r3, r7
 800710a:	aa03      	add	r2, sp, #12
 800710c:	4621      	mov	r1, r4
 800710e:	4630      	mov	r0, r6
 8007110:	f7ff fef6 	bl	8006f00 <_printf_common>
 8007114:	3001      	adds	r0, #1
 8007116:	d14d      	bne.n	80071b4 <_printf_i+0x1c8>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	b005      	add	sp, #20
 800711e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007122:	4839      	ldr	r0, [pc, #228]	; (8007208 <_printf_i+0x21c>)
 8007124:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007128:	6813      	ldr	r3, [r2, #0]
 800712a:	6821      	ldr	r1, [r4, #0]
 800712c:	1d1d      	adds	r5, r3, #4
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6015      	str	r5, [r2, #0]
 8007132:	060a      	lsls	r2, r1, #24
 8007134:	d50b      	bpl.n	800714e <_printf_i+0x162>
 8007136:	07ca      	lsls	r2, r1, #31
 8007138:	bf44      	itt	mi
 800713a:	f041 0120 	orrmi.w	r1, r1, #32
 800713e:	6021      	strmi	r1, [r4, #0]
 8007140:	b91b      	cbnz	r3, 800714a <_printf_i+0x15e>
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	f022 0220 	bic.w	r2, r2, #32
 8007148:	6022      	str	r2, [r4, #0]
 800714a:	2210      	movs	r2, #16
 800714c:	e7b7      	b.n	80070be <_printf_i+0xd2>
 800714e:	064d      	lsls	r5, r1, #25
 8007150:	bf48      	it	mi
 8007152:	b29b      	uxthmi	r3, r3
 8007154:	e7ef      	b.n	8007136 <_printf_i+0x14a>
 8007156:	4665      	mov	r5, ip
 8007158:	fbb3 f1f2 	udiv	r1, r3, r2
 800715c:	fb02 3311 	mls	r3, r2, r1, r3
 8007160:	5cc3      	ldrb	r3, [r0, r3]
 8007162:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007166:	460b      	mov	r3, r1
 8007168:	2900      	cmp	r1, #0
 800716a:	d1f5      	bne.n	8007158 <_printf_i+0x16c>
 800716c:	e7b9      	b.n	80070e2 <_printf_i+0xf6>
 800716e:	6813      	ldr	r3, [r2, #0]
 8007170:	6825      	ldr	r5, [r4, #0]
 8007172:	6961      	ldr	r1, [r4, #20]
 8007174:	1d18      	adds	r0, r3, #4
 8007176:	6010      	str	r0, [r2, #0]
 8007178:	0628      	lsls	r0, r5, #24
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	d501      	bpl.n	8007182 <_printf_i+0x196>
 800717e:	6019      	str	r1, [r3, #0]
 8007180:	e002      	b.n	8007188 <_printf_i+0x19c>
 8007182:	066a      	lsls	r2, r5, #25
 8007184:	d5fb      	bpl.n	800717e <_printf_i+0x192>
 8007186:	8019      	strh	r1, [r3, #0]
 8007188:	2300      	movs	r3, #0
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	4665      	mov	r5, ip
 800718e:	e7b9      	b.n	8007104 <_printf_i+0x118>
 8007190:	6813      	ldr	r3, [r2, #0]
 8007192:	1d19      	adds	r1, r3, #4
 8007194:	6011      	str	r1, [r2, #0]
 8007196:	681d      	ldr	r5, [r3, #0]
 8007198:	6862      	ldr	r2, [r4, #4]
 800719a:	2100      	movs	r1, #0
 800719c:	4628      	mov	r0, r5
 800719e:	f7f9 f8a7 	bl	80002f0 <memchr>
 80071a2:	b108      	cbz	r0, 80071a8 <_printf_i+0x1bc>
 80071a4:	1b40      	subs	r0, r0, r5
 80071a6:	6060      	str	r0, [r4, #4]
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	6123      	str	r3, [r4, #16]
 80071ac:	2300      	movs	r3, #0
 80071ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b2:	e7a7      	b.n	8007104 <_printf_i+0x118>
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	462a      	mov	r2, r5
 80071b8:	4639      	mov	r1, r7
 80071ba:	4630      	mov	r0, r6
 80071bc:	47c0      	blx	r8
 80071be:	3001      	adds	r0, #1
 80071c0:	d0aa      	beq.n	8007118 <_printf_i+0x12c>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	079b      	lsls	r3, r3, #30
 80071c6:	d413      	bmi.n	80071f0 <_printf_i+0x204>
 80071c8:	68e0      	ldr	r0, [r4, #12]
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	4298      	cmp	r0, r3
 80071ce:	bfb8      	it	lt
 80071d0:	4618      	movlt	r0, r3
 80071d2:	e7a3      	b.n	800711c <_printf_i+0x130>
 80071d4:	2301      	movs	r3, #1
 80071d6:	464a      	mov	r2, r9
 80071d8:	4639      	mov	r1, r7
 80071da:	4630      	mov	r0, r6
 80071dc:	47c0      	blx	r8
 80071de:	3001      	adds	r0, #1
 80071e0:	d09a      	beq.n	8007118 <_printf_i+0x12c>
 80071e2:	3501      	adds	r5, #1
 80071e4:	68e3      	ldr	r3, [r4, #12]
 80071e6:	9a03      	ldr	r2, [sp, #12]
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	42ab      	cmp	r3, r5
 80071ec:	dcf2      	bgt.n	80071d4 <_printf_i+0x1e8>
 80071ee:	e7eb      	b.n	80071c8 <_printf_i+0x1dc>
 80071f0:	2500      	movs	r5, #0
 80071f2:	f104 0919 	add.w	r9, r4, #25
 80071f6:	e7f5      	b.n	80071e4 <_printf_i+0x1f8>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1ac      	bne.n	8007156 <_printf_i+0x16a>
 80071fc:	7803      	ldrb	r3, [r0, #0]
 80071fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007202:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007206:	e76c      	b.n	80070e2 <_printf_i+0xf6>
 8007208:	080088ee 	.word	0x080088ee
 800720c:	080088ff 	.word	0x080088ff

08007210 <_sbrk_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4c06      	ldr	r4, [pc, #24]	; (800722c <_sbrk_r+0x1c>)
 8007214:	2300      	movs	r3, #0
 8007216:	4605      	mov	r5, r0
 8007218:	4608      	mov	r0, r1
 800721a:	6023      	str	r3, [r4, #0]
 800721c:	f7f9 febe 	bl	8000f9c <_sbrk>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d102      	bne.n	800722a <_sbrk_r+0x1a>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	b103      	cbz	r3, 800722a <_sbrk_r+0x1a>
 8007228:	602b      	str	r3, [r5, #0]
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	20003320 	.word	0x20003320

08007230 <siprintf>:
 8007230:	b40e      	push	{r1, r2, r3}
 8007232:	b500      	push	{lr}
 8007234:	b09c      	sub	sp, #112	; 0x70
 8007236:	ab1d      	add	r3, sp, #116	; 0x74
 8007238:	9002      	str	r0, [sp, #8]
 800723a:	9006      	str	r0, [sp, #24]
 800723c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007240:	4809      	ldr	r0, [pc, #36]	; (8007268 <siprintf+0x38>)
 8007242:	9107      	str	r1, [sp, #28]
 8007244:	9104      	str	r1, [sp, #16]
 8007246:	4909      	ldr	r1, [pc, #36]	; (800726c <siprintf+0x3c>)
 8007248:	f853 2b04 	ldr.w	r2, [r3], #4
 800724c:	9105      	str	r1, [sp, #20]
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	a902      	add	r1, sp, #8
 8007254:	f001 f942 	bl	80084dc <_svfiprintf_r>
 8007258:	9b02      	ldr	r3, [sp, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	b01c      	add	sp, #112	; 0x70
 8007260:	f85d eb04 	ldr.w	lr, [sp], #4
 8007264:	b003      	add	sp, #12
 8007266:	4770      	bx	lr
 8007268:	20000010 	.word	0x20000010
 800726c:	ffff0208 	.word	0xffff0208

08007270 <quorem>:
 8007270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	6903      	ldr	r3, [r0, #16]
 8007276:	690c      	ldr	r4, [r1, #16]
 8007278:	42a3      	cmp	r3, r4
 800727a:	4680      	mov	r8, r0
 800727c:	f2c0 8082 	blt.w	8007384 <quorem+0x114>
 8007280:	3c01      	subs	r4, #1
 8007282:	f101 0714 	add.w	r7, r1, #20
 8007286:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800728a:	f100 0614 	add.w	r6, r0, #20
 800728e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007292:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007296:	eb06 030c 	add.w	r3, r6, ip
 800729a:	3501      	adds	r5, #1
 800729c:	eb07 090c 	add.w	r9, r7, ip
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80072a6:	b395      	cbz	r5, 800730e <quorem+0x9e>
 80072a8:	f04f 0a00 	mov.w	sl, #0
 80072ac:	4638      	mov	r0, r7
 80072ae:	46b6      	mov	lr, r6
 80072b0:	46d3      	mov	fp, sl
 80072b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80072b6:	b293      	uxth	r3, r2
 80072b8:	fb05 a303 	mla	r3, r5, r3, sl
 80072bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	ebab 0303 	sub.w	r3, fp, r3
 80072c6:	0c12      	lsrs	r2, r2, #16
 80072c8:	f8de b000 	ldr.w	fp, [lr]
 80072cc:	fb05 a202 	mla	r2, r5, r2, sl
 80072d0:	fa13 f38b 	uxtah	r3, r3, fp
 80072d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80072d8:	fa1f fb82 	uxth.w	fp, r2
 80072dc:	f8de 2000 	ldr.w	r2, [lr]
 80072e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80072e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ee:	4581      	cmp	r9, r0
 80072f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80072f4:	f84e 3b04 	str.w	r3, [lr], #4
 80072f8:	d2db      	bcs.n	80072b2 <quorem+0x42>
 80072fa:	f856 300c 	ldr.w	r3, [r6, ip]
 80072fe:	b933      	cbnz	r3, 800730e <quorem+0x9e>
 8007300:	9b01      	ldr	r3, [sp, #4]
 8007302:	3b04      	subs	r3, #4
 8007304:	429e      	cmp	r6, r3
 8007306:	461a      	mov	r2, r3
 8007308:	d330      	bcc.n	800736c <quorem+0xfc>
 800730a:	f8c8 4010 	str.w	r4, [r8, #16]
 800730e:	4640      	mov	r0, r8
 8007310:	f000 ffb6 	bl	8008280 <__mcmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	db25      	blt.n	8007364 <quorem+0xf4>
 8007318:	3501      	adds	r5, #1
 800731a:	4630      	mov	r0, r6
 800731c:	f04f 0c00 	mov.w	ip, #0
 8007320:	f857 2b04 	ldr.w	r2, [r7], #4
 8007324:	f8d0 e000 	ldr.w	lr, [r0]
 8007328:	b293      	uxth	r3, r2
 800732a:	ebac 0303 	sub.w	r3, ip, r3
 800732e:	0c12      	lsrs	r2, r2, #16
 8007330:	fa13 f38e 	uxtah	r3, r3, lr
 8007334:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800733c:	b29b      	uxth	r3, r3
 800733e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007342:	45b9      	cmp	r9, r7
 8007344:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007348:	f840 3b04 	str.w	r3, [r0], #4
 800734c:	d2e8      	bcs.n	8007320 <quorem+0xb0>
 800734e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007352:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007356:	b92a      	cbnz	r2, 8007364 <quorem+0xf4>
 8007358:	3b04      	subs	r3, #4
 800735a:	429e      	cmp	r6, r3
 800735c:	461a      	mov	r2, r3
 800735e:	d30b      	bcc.n	8007378 <quorem+0x108>
 8007360:	f8c8 4010 	str.w	r4, [r8, #16]
 8007364:	4628      	mov	r0, r5
 8007366:	b003      	add	sp, #12
 8007368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	3b04      	subs	r3, #4
 8007370:	2a00      	cmp	r2, #0
 8007372:	d1ca      	bne.n	800730a <quorem+0x9a>
 8007374:	3c01      	subs	r4, #1
 8007376:	e7c5      	b.n	8007304 <quorem+0x94>
 8007378:	6812      	ldr	r2, [r2, #0]
 800737a:	3b04      	subs	r3, #4
 800737c:	2a00      	cmp	r2, #0
 800737e:	d1ef      	bne.n	8007360 <quorem+0xf0>
 8007380:	3c01      	subs	r4, #1
 8007382:	e7ea      	b.n	800735a <quorem+0xea>
 8007384:	2000      	movs	r0, #0
 8007386:	e7ee      	b.n	8007366 <quorem+0xf6>

08007388 <_dtoa_r>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	ec57 6b10 	vmov	r6, r7, d0
 8007390:	b095      	sub	sp, #84	; 0x54
 8007392:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007394:	9108      	str	r1, [sp, #32]
 8007396:	4604      	mov	r4, r0
 8007398:	920a      	str	r2, [sp, #40]	; 0x28
 800739a:	9311      	str	r3, [sp, #68]	; 0x44
 800739c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80073a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80073a4:	b93d      	cbnz	r5, 80073b6 <_dtoa_r+0x2e>
 80073a6:	2010      	movs	r0, #16
 80073a8:	f7ff fa3e 	bl	8006828 <malloc>
 80073ac:	6260      	str	r0, [r4, #36]	; 0x24
 80073ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073b2:	6005      	str	r5, [r0, #0]
 80073b4:	60c5      	str	r5, [r0, #12]
 80073b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b8:	6819      	ldr	r1, [r3, #0]
 80073ba:	b151      	cbz	r1, 80073d2 <_dtoa_r+0x4a>
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	604a      	str	r2, [r1, #4]
 80073c0:	2301      	movs	r3, #1
 80073c2:	4093      	lsls	r3, r2
 80073c4:	608b      	str	r3, [r1, #8]
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 fd79 	bl	8007ebe <_Bfree>
 80073cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	1e3b      	subs	r3, r7, #0
 80073d4:	bfb9      	ittee	lt
 80073d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073da:	9303      	strlt	r3, [sp, #12]
 80073dc:	2300      	movge	r3, #0
 80073de:	f8c8 3000 	strge.w	r3, [r8]
 80073e2:	9d03      	ldr	r5, [sp, #12]
 80073e4:	4bac      	ldr	r3, [pc, #688]	; (8007698 <_dtoa_r+0x310>)
 80073e6:	bfbc      	itt	lt
 80073e8:	2201      	movlt	r2, #1
 80073ea:	f8c8 2000 	strlt.w	r2, [r8]
 80073ee:	43ab      	bics	r3, r5
 80073f0:	d11b      	bne.n	800742a <_dtoa_r+0xa2>
 80073f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80073f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	9b02      	ldr	r3, [sp, #8]
 80073fc:	b923      	cbnz	r3, 8007408 <_dtoa_r+0x80>
 80073fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007402:	2d00      	cmp	r5, #0
 8007404:	f000 84dd 	beq.w	8007dc2 <_dtoa_r+0xa3a>
 8007408:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800740a:	b953      	cbnz	r3, 8007422 <_dtoa_r+0x9a>
 800740c:	4ba3      	ldr	r3, [pc, #652]	; (800769c <_dtoa_r+0x314>)
 800740e:	e020      	b.n	8007452 <_dtoa_r+0xca>
 8007410:	4ba3      	ldr	r3, [pc, #652]	; (80076a0 <_dtoa_r+0x318>)
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	3308      	adds	r3, #8
 8007416:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	9804      	ldr	r0, [sp, #16]
 800741c:	b015      	add	sp, #84	; 0x54
 800741e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007422:	4b9e      	ldr	r3, [pc, #632]	; (800769c <_dtoa_r+0x314>)
 8007424:	9304      	str	r3, [sp, #16]
 8007426:	3303      	adds	r3, #3
 8007428:	e7f5      	b.n	8007416 <_dtoa_r+0x8e>
 800742a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800742e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007436:	ed8d 7b04 	vstr	d7, [sp, #16]
 800743a:	d10c      	bne.n	8007456 <_dtoa_r+0xce>
 800743c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800743e:	2301      	movs	r3, #1
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 84b9 	beq.w	8007dbc <_dtoa_r+0xa34>
 800744a:	4b96      	ldr	r3, [pc, #600]	; (80076a4 <_dtoa_r+0x31c>)
 800744c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	3b01      	subs	r3, #1
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	e7e1      	b.n	800741a <_dtoa_r+0x92>
 8007456:	a913      	add	r1, sp, #76	; 0x4c
 8007458:	aa12      	add	r2, sp, #72	; 0x48
 800745a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800745e:	4620      	mov	r0, r4
 8007460:	f000 ff85 	bl	800836e <__d2b>
 8007464:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8007468:	9001      	str	r0, [sp, #4]
 800746a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800746c:	2e00      	cmp	r6, #0
 800746e:	d046      	beq.n	80074fe <_dtoa_r+0x176>
 8007470:	9805      	ldr	r0, [sp, #20]
 8007472:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8007476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800747a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800747e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007482:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8007486:	2700      	movs	r7, #0
 8007488:	ee07 aa90 	vmov	s15, sl
 800748c:	ec43 2b16 	vmov	d6, r2, r3
 8007490:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007494:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8007680 <_dtoa_r+0x2f8>
 8007498:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800749c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80074a0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8007688 <_dtoa_r+0x300>
 80074a4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80074a8:	eeb0 7b46 	vmov.f64	d7, d6
 80074ac:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8007690 <_dtoa_r+0x308>
 80074b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80074b4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80074b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80074bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c0:	ee16 ba90 	vmov	fp, s13
 80074c4:	d508      	bpl.n	80074d8 <_dtoa_r+0x150>
 80074c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80074ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80074ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d2:	bf18      	it	ne
 80074d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80074d8:	f1bb 0f16 	cmp.w	fp, #22
 80074dc:	d834      	bhi.n	8007548 <_dtoa_r+0x1c0>
 80074de:	4b72      	ldr	r3, [pc, #456]	; (80076a8 <_dtoa_r+0x320>)
 80074e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074e4:	ed93 7b00 	vldr	d7, [r3]
 80074e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80074ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80074f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f4:	dd01      	ble.n	80074fa <_dtoa_r+0x172>
 80074f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074fa:	2300      	movs	r3, #0
 80074fc:	e025      	b.n	800754a <_dtoa_r+0x1c2>
 80074fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007500:	eb01 0a03 	add.w	sl, r1, r3
 8007504:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8007508:	2b20      	cmp	r3, #32
 800750a:	dd17      	ble.n	800753c <_dtoa_r+0x1b4>
 800750c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007510:	9a02      	ldr	r2, [sp, #8]
 8007512:	409d      	lsls	r5, r3
 8007514:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8007518:	fa22 f303 	lsr.w	r3, r2, r3
 800751c:	432b      	orrs	r3, r5
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800752a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800752e:	9805      	ldr	r0, [sp, #20]
 8007530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007534:	2701      	movs	r7, #1
 8007536:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800753a:	e7a5      	b.n	8007488 <_dtoa_r+0x100>
 800753c:	9a02      	ldr	r2, [sp, #8]
 800753e:	f1c3 0320 	rsb	r3, r3, #32
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	e7ea      	b.n	800751e <_dtoa_r+0x196>
 8007548:	2301      	movs	r3, #1
 800754a:	eba1 0a0a 	sub.w	sl, r1, sl
 800754e:	9310      	str	r3, [sp, #64]	; 0x40
 8007550:	f1ba 0301 	subs.w	r3, sl, #1
 8007554:	9307      	str	r3, [sp, #28]
 8007556:	bf43      	ittte	mi
 8007558:	2300      	movmi	r3, #0
 800755a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800755e:	9307      	strmi	r3, [sp, #28]
 8007560:	f04f 0a00 	movpl.w	sl, #0
 8007564:	f1bb 0f00 	cmp.w	fp, #0
 8007568:	db19      	blt.n	800759e <_dtoa_r+0x216>
 800756a:	9b07      	ldr	r3, [sp, #28]
 800756c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007570:	445b      	add	r3, fp
 8007572:	9307      	str	r3, [sp, #28]
 8007574:	f04f 0800 	mov.w	r8, #0
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	2b09      	cmp	r3, #9
 800757c:	d866      	bhi.n	800764c <_dtoa_r+0x2c4>
 800757e:	2b05      	cmp	r3, #5
 8007580:	bfc4      	itt	gt
 8007582:	3b04      	subgt	r3, #4
 8007584:	9308      	strgt	r3, [sp, #32]
 8007586:	9b08      	ldr	r3, [sp, #32]
 8007588:	f1a3 0302 	sub.w	r3, r3, #2
 800758c:	bfcc      	ite	gt
 800758e:	2500      	movgt	r5, #0
 8007590:	2501      	movle	r5, #1
 8007592:	2b03      	cmp	r3, #3
 8007594:	d866      	bhi.n	8007664 <_dtoa_r+0x2dc>
 8007596:	e8df f003 	tbb	[pc, r3]
 800759a:	5755      	.short	0x5755
 800759c:	4909      	.short	0x4909
 800759e:	2300      	movs	r3, #0
 80075a0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80075a4:	f1cb 0800 	rsb	r8, fp, #0
 80075a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075aa:	e7e5      	b.n	8007578 <_dtoa_r+0x1f0>
 80075ac:	2301      	movs	r3, #1
 80075ae:	9309      	str	r3, [sp, #36]	; 0x24
 80075b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dd59      	ble.n	800766a <_dtoa_r+0x2e2>
 80075b6:	9306      	str	r3, [sp, #24]
 80075b8:	4699      	mov	r9, r3
 80075ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075bc:	2200      	movs	r2, #0
 80075be:	6072      	str	r2, [r6, #4]
 80075c0:	2204      	movs	r2, #4
 80075c2:	f102 0014 	add.w	r0, r2, #20
 80075c6:	4298      	cmp	r0, r3
 80075c8:	6871      	ldr	r1, [r6, #4]
 80075ca:	d953      	bls.n	8007674 <_dtoa_r+0x2ec>
 80075cc:	4620      	mov	r0, r4
 80075ce:	f000 fc42 	bl	8007e56 <_Balloc>
 80075d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d4:	6030      	str	r0, [r6, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	f1b9 0f0e 	cmp.w	r9, #14
 80075de:	f200 80c2 	bhi.w	8007766 <_dtoa_r+0x3de>
 80075e2:	2d00      	cmp	r5, #0
 80075e4:	f000 80bf 	beq.w	8007766 <_dtoa_r+0x3de>
 80075e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075ec:	f1bb 0f00 	cmp.w	fp, #0
 80075f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80075f4:	f340 80e6 	ble.w	80077c4 <_dtoa_r+0x43c>
 80075f8:	4a2b      	ldr	r2, [pc, #172]	; (80076a8 <_dtoa_r+0x320>)
 80075fa:	f00b 030f 	and.w	r3, fp, #15
 80075fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007602:	ed93 7b00 	vldr	d7, [r3]
 8007606:	ea4f 132b 	mov.w	r3, fp, asr #4
 800760a:	06da      	lsls	r2, r3, #27
 800760c:	f140 80d8 	bpl.w	80077c0 <_dtoa_r+0x438>
 8007610:	4a26      	ldr	r2, [pc, #152]	; (80076ac <_dtoa_r+0x324>)
 8007612:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8007616:	ed92 6b08 	vldr	d6, [r2, #32]
 800761a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800761e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	2203      	movs	r2, #3
 8007628:	4920      	ldr	r1, [pc, #128]	; (80076ac <_dtoa_r+0x324>)
 800762a:	e04a      	b.n	80076c2 <_dtoa_r+0x33a>
 800762c:	2301      	movs	r3, #1
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007632:	445b      	add	r3, fp
 8007634:	f103 0901 	add.w	r9, r3, #1
 8007638:	9306      	str	r3, [sp, #24]
 800763a:	464b      	mov	r3, r9
 800763c:	2b01      	cmp	r3, #1
 800763e:	bfb8      	it	lt
 8007640:	2301      	movlt	r3, #1
 8007642:	e7ba      	b.n	80075ba <_dtoa_r+0x232>
 8007644:	2300      	movs	r3, #0
 8007646:	e7b2      	b.n	80075ae <_dtoa_r+0x226>
 8007648:	2300      	movs	r3, #0
 800764a:	e7f0      	b.n	800762e <_dtoa_r+0x2a6>
 800764c:	2501      	movs	r5, #1
 800764e:	2300      	movs	r3, #0
 8007650:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8007654:	f04f 33ff 	mov.w	r3, #4294967295
 8007658:	9306      	str	r3, [sp, #24]
 800765a:	4699      	mov	r9, r3
 800765c:	2200      	movs	r2, #0
 800765e:	2312      	movs	r3, #18
 8007660:	920a      	str	r2, [sp, #40]	; 0x28
 8007662:	e7aa      	b.n	80075ba <_dtoa_r+0x232>
 8007664:	2301      	movs	r3, #1
 8007666:	9309      	str	r3, [sp, #36]	; 0x24
 8007668:	e7f4      	b.n	8007654 <_dtoa_r+0x2cc>
 800766a:	2301      	movs	r3, #1
 800766c:	9306      	str	r3, [sp, #24]
 800766e:	4699      	mov	r9, r3
 8007670:	461a      	mov	r2, r3
 8007672:	e7f5      	b.n	8007660 <_dtoa_r+0x2d8>
 8007674:	3101      	adds	r1, #1
 8007676:	6071      	str	r1, [r6, #4]
 8007678:	0052      	lsls	r2, r2, #1
 800767a:	e7a2      	b.n	80075c2 <_dtoa_r+0x23a>
 800767c:	f3af 8000 	nop.w
 8007680:	636f4361 	.word	0x636f4361
 8007684:	3fd287a7 	.word	0x3fd287a7
 8007688:	8b60c8b3 	.word	0x8b60c8b3
 800768c:	3fc68a28 	.word	0x3fc68a28
 8007690:	509f79fb 	.word	0x509f79fb
 8007694:	3fd34413 	.word	0x3fd34413
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	08008919 	.word	0x08008919
 80076a0:	08008910 	.word	0x08008910
 80076a4:	080088ed 	.word	0x080088ed
 80076a8:	08008948 	.word	0x08008948
 80076ac:	08008920 	.word	0x08008920
 80076b0:	07de      	lsls	r6, r3, #31
 80076b2:	d504      	bpl.n	80076be <_dtoa_r+0x336>
 80076b4:	ed91 6b00 	vldr	d6, [r1]
 80076b8:	3201      	adds	r2, #1
 80076ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076be:	105b      	asrs	r3, r3, #1
 80076c0:	3108      	adds	r1, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1f4      	bne.n	80076b0 <_dtoa_r+0x328>
 80076c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80076ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80076ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80076d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 80a7 	beq.w	8007828 <_dtoa_r+0x4a0>
 80076da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80076de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80076e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ea:	f140 809d 	bpl.w	8007828 <_dtoa_r+0x4a0>
 80076ee:	f1b9 0f00 	cmp.w	r9, #0
 80076f2:	f000 8099 	beq.w	8007828 <_dtoa_r+0x4a0>
 80076f6:	9b06      	ldr	r3, [sp, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dd30      	ble.n	800775e <_dtoa_r+0x3d6>
 80076fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007700:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007704:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007708:	9d06      	ldr	r5, [sp, #24]
 800770a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800770e:	3201      	adds	r2, #1
 8007710:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007714:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007718:	ee07 2a90 	vmov	s15, r2
 800771c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007720:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007724:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007728:	9a03      	ldr	r2, [sp, #12]
 800772a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800772e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8007732:	2d00      	cmp	r5, #0
 8007734:	d17b      	bne.n	800782e <_dtoa_r+0x4a6>
 8007736:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800773a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800773e:	ec41 0b17 	vmov	d7, r0, r1
 8007742:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774a:	f300 8253 	bgt.w	8007bf4 <_dtoa_r+0x86c>
 800774e:	eeb1 7b47 	vneg.f64	d7, d7
 8007752:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775a:	f100 8249 	bmi.w	8007bf0 <_dtoa_r+0x868>
 800775e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007762:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007766:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007768:	2b00      	cmp	r3, #0
 800776a:	f2c0 8119 	blt.w	80079a0 <_dtoa_r+0x618>
 800776e:	f1bb 0f0e 	cmp.w	fp, #14
 8007772:	f300 8115 	bgt.w	80079a0 <_dtoa_r+0x618>
 8007776:	4bc3      	ldr	r3, [pc, #780]	; (8007a84 <_dtoa_r+0x6fc>)
 8007778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800777c:	ed93 6b00 	vldr	d6, [r3]
 8007780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	f280 80ba 	bge.w	80078fc <_dtoa_r+0x574>
 8007788:	f1b9 0f00 	cmp.w	r9, #0
 800778c:	f300 80b6 	bgt.w	80078fc <_dtoa_r+0x574>
 8007790:	f040 822d 	bne.w	8007bee <_dtoa_r+0x866>
 8007794:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007798:	ee26 6b07 	vmul.f64	d6, d6, d7
 800779c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a8:	464d      	mov	r5, r9
 80077aa:	464f      	mov	r7, r9
 80077ac:	f280 8204 	bge.w	8007bb8 <_dtoa_r+0x830>
 80077b0:	9b04      	ldr	r3, [sp, #16]
 80077b2:	9a04      	ldr	r2, [sp, #16]
 80077b4:	1c5e      	adds	r6, r3, #1
 80077b6:	2331      	movs	r3, #49	; 0x31
 80077b8:	7013      	strb	r3, [r2, #0]
 80077ba:	f10b 0b01 	add.w	fp, fp, #1
 80077be:	e1ff      	b.n	8007bc0 <_dtoa_r+0x838>
 80077c0:	2202      	movs	r2, #2
 80077c2:	e731      	b.n	8007628 <_dtoa_r+0x2a0>
 80077c4:	d02e      	beq.n	8007824 <_dtoa_r+0x49c>
 80077c6:	f1cb 0300 	rsb	r3, fp, #0
 80077ca:	4aae      	ldr	r2, [pc, #696]	; (8007a84 <_dtoa_r+0x6fc>)
 80077cc:	f003 010f 	and.w	r1, r3, #15
 80077d0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80077d4:	ed92 7b00 	vldr	d7, [r2]
 80077d8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80077dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80077e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80077e4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80077e8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80077ec:	49a6      	ldr	r1, [pc, #664]	; (8007a88 <_dtoa_r+0x700>)
 80077ee:	111b      	asrs	r3, r3, #4
 80077f0:	2000      	movs	r0, #0
 80077f2:	2202      	movs	r2, #2
 80077f4:	b93b      	cbnz	r3, 8007806 <_dtoa_r+0x47e>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f43f af6b 	beq.w	80076d2 <_dtoa_r+0x34a>
 80077fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007804:	e765      	b.n	80076d2 <_dtoa_r+0x34a>
 8007806:	07dd      	lsls	r5, r3, #31
 8007808:	d509      	bpl.n	800781e <_dtoa_r+0x496>
 800780a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800780e:	ed91 7b00 	vldr	d7, [r1]
 8007812:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007816:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800781a:	3201      	adds	r2, #1
 800781c:	2001      	movs	r0, #1
 800781e:	105b      	asrs	r3, r3, #1
 8007820:	3108      	adds	r1, #8
 8007822:	e7e7      	b.n	80077f4 <_dtoa_r+0x46c>
 8007824:	2202      	movs	r2, #2
 8007826:	e754      	b.n	80076d2 <_dtoa_r+0x34a>
 8007828:	465b      	mov	r3, fp
 800782a:	464d      	mov	r5, r9
 800782c:	e770      	b.n	8007710 <_dtoa_r+0x388>
 800782e:	4a95      	ldr	r2, [pc, #596]	; (8007a84 <_dtoa_r+0x6fc>)
 8007830:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8007834:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800783a:	ec41 0b17 	vmov	d7, r0, r1
 800783e:	b35a      	cbz	r2, 8007898 <_dtoa_r+0x510>
 8007840:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007844:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007848:	9e04      	ldr	r6, [sp, #16]
 800784a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800784e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007852:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007856:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800785a:	ee14 2a90 	vmov	r2, s9
 800785e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007862:	3230      	adds	r2, #48	; 0x30
 8007864:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007868:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800786c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007870:	f806 2b01 	strb.w	r2, [r6], #1
 8007874:	d43b      	bmi.n	80078ee <_dtoa_r+0x566>
 8007876:	ee32 5b46 	vsub.f64	d5, d2, d6
 800787a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800787e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007882:	d472      	bmi.n	800796a <_dtoa_r+0x5e2>
 8007884:	9a04      	ldr	r2, [sp, #16]
 8007886:	1ab2      	subs	r2, r6, r2
 8007888:	4295      	cmp	r5, r2
 800788a:	f77f af68 	ble.w	800775e <_dtoa_r+0x3d6>
 800788e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007892:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007896:	e7de      	b.n	8007856 <_dtoa_r+0x4ce>
 8007898:	9a04      	ldr	r2, [sp, #16]
 800789a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800789e:	1956      	adds	r6, r2, r5
 80078a0:	4611      	mov	r1, r2
 80078a2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80078a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80078aa:	ee14 2a90 	vmov	r2, s9
 80078ae:	3230      	adds	r2, #48	; 0x30
 80078b0:	f801 2b01 	strb.w	r2, [r1], #1
 80078b4:	42b1      	cmp	r1, r6
 80078b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80078ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 80078be:	d11a      	bne.n	80078f6 <_dtoa_r+0x56e>
 80078c0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80078c4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80078c8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80078cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d0:	dc4b      	bgt.n	800796a <_dtoa_r+0x5e2>
 80078d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80078d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078de:	f57f af3e 	bpl.w	800775e <_dtoa_r+0x3d6>
 80078e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078e6:	2a30      	cmp	r2, #48	; 0x30
 80078e8:	f106 31ff 	add.w	r1, r6, #4294967295
 80078ec:	d001      	beq.n	80078f2 <_dtoa_r+0x56a>
 80078ee:	469b      	mov	fp, r3
 80078f0:	e02a      	b.n	8007948 <_dtoa_r+0x5c0>
 80078f2:	460e      	mov	r6, r1
 80078f4:	e7f5      	b.n	80078e2 <_dtoa_r+0x55a>
 80078f6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80078fa:	e7d4      	b.n	80078a6 <_dtoa_r+0x51e>
 80078fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007900:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007904:	9e04      	ldr	r6, [sp, #16]
 8007906:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800790a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800790e:	ee15 3a10 	vmov	r3, s10
 8007912:	3330      	adds	r3, #48	; 0x30
 8007914:	f806 3b01 	strb.w	r3, [r6], #1
 8007918:	9b04      	ldr	r3, [sp, #16]
 800791a:	1af3      	subs	r3, r6, r3
 800791c:	4599      	cmp	r9, r3
 800791e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007922:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007926:	d133      	bne.n	8007990 <_dtoa_r+0x608>
 8007928:	ee37 7b07 	vadd.f64	d7, d7, d7
 800792c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007934:	dc18      	bgt.n	8007968 <_dtoa_r+0x5e0>
 8007936:	eeb4 7b46 	vcmp.f64	d7, d6
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	d103      	bne.n	8007948 <_dtoa_r+0x5c0>
 8007940:	ee15 3a10 	vmov	r3, s10
 8007944:	07db      	lsls	r3, r3, #31
 8007946:	d40f      	bmi.n	8007968 <_dtoa_r+0x5e0>
 8007948:	9901      	ldr	r1, [sp, #4]
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fab7 	bl	8007ebe <_Bfree>
 8007950:	2300      	movs	r3, #0
 8007952:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007954:	7033      	strb	r3, [r6, #0]
 8007956:	f10b 0301 	add.w	r3, fp, #1
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800795e:	2b00      	cmp	r3, #0
 8007960:	f43f ad5b 	beq.w	800741a <_dtoa_r+0x92>
 8007964:	601e      	str	r6, [r3, #0]
 8007966:	e558      	b.n	800741a <_dtoa_r+0x92>
 8007968:	465b      	mov	r3, fp
 800796a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800796e:	2939      	cmp	r1, #57	; 0x39
 8007970:	f106 32ff 	add.w	r2, r6, #4294967295
 8007974:	d106      	bne.n	8007984 <_dtoa_r+0x5fc>
 8007976:	9904      	ldr	r1, [sp, #16]
 8007978:	4291      	cmp	r1, r2
 800797a:	d107      	bne.n	800798c <_dtoa_r+0x604>
 800797c:	2230      	movs	r2, #48	; 0x30
 800797e:	700a      	strb	r2, [r1, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	460a      	mov	r2, r1
 8007984:	7811      	ldrb	r1, [r2, #0]
 8007986:	3101      	adds	r1, #1
 8007988:	7011      	strb	r1, [r2, #0]
 800798a:	e7b0      	b.n	80078ee <_dtoa_r+0x566>
 800798c:	4616      	mov	r6, r2
 800798e:	e7ec      	b.n	800796a <_dtoa_r+0x5e2>
 8007990:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007994:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799c:	d1b3      	bne.n	8007906 <_dtoa_r+0x57e>
 800799e:	e7d3      	b.n	8007948 <_dtoa_r+0x5c0>
 80079a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	f000 808d 	beq.w	8007ac2 <_dtoa_r+0x73a>
 80079a8:	9a08      	ldr	r2, [sp, #32]
 80079aa:	2a01      	cmp	r2, #1
 80079ac:	dc72      	bgt.n	8007a94 <_dtoa_r+0x70c>
 80079ae:	2f00      	cmp	r7, #0
 80079b0:	d06c      	beq.n	8007a8c <_dtoa_r+0x704>
 80079b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079b6:	4645      	mov	r5, r8
 80079b8:	4656      	mov	r6, sl
 80079ba:	9a07      	ldr	r2, [sp, #28]
 80079bc:	2101      	movs	r1, #1
 80079be:	441a      	add	r2, r3
 80079c0:	4620      	mov	r0, r4
 80079c2:	449a      	add	sl, r3
 80079c4:	9207      	str	r2, [sp, #28]
 80079c6:	f000 fb1a 	bl	8007ffe <__i2b>
 80079ca:	4607      	mov	r7, r0
 80079cc:	2e00      	cmp	r6, #0
 80079ce:	dd0b      	ble.n	80079e8 <_dtoa_r+0x660>
 80079d0:	9b07      	ldr	r3, [sp, #28]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dd08      	ble.n	80079e8 <_dtoa_r+0x660>
 80079d6:	42b3      	cmp	r3, r6
 80079d8:	9a07      	ldr	r2, [sp, #28]
 80079da:	bfa8      	it	ge
 80079dc:	4633      	movge	r3, r6
 80079de:	ebaa 0a03 	sub.w	sl, sl, r3
 80079e2:	1af6      	subs	r6, r6, r3
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	9307      	str	r3, [sp, #28]
 80079e8:	f1b8 0f00 	cmp.w	r8, #0
 80079ec:	d01d      	beq.n	8007a2a <_dtoa_r+0x6a2>
 80079ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d06a      	beq.n	8007aca <_dtoa_r+0x742>
 80079f4:	b18d      	cbz	r5, 8007a1a <_dtoa_r+0x692>
 80079f6:	4639      	mov	r1, r7
 80079f8:	462a      	mov	r2, r5
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 fb9e 	bl	800813c <__pow5mult>
 8007a00:	9a01      	ldr	r2, [sp, #4]
 8007a02:	4601      	mov	r1, r0
 8007a04:	4607      	mov	r7, r0
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 fb02 	bl	8008010 <__multiply>
 8007a0c:	9901      	ldr	r1, [sp, #4]
 8007a0e:	900c      	str	r0, [sp, #48]	; 0x30
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 fa54 	bl	8007ebe <_Bfree>
 8007a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	ebb8 0205 	subs.w	r2, r8, r5
 8007a1e:	d004      	beq.n	8007a2a <_dtoa_r+0x6a2>
 8007a20:	9901      	ldr	r1, [sp, #4]
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 fb8a 	bl	800813c <__pow5mult>
 8007a28:	9001      	str	r0, [sp, #4]
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fae6 	bl	8007ffe <__i2b>
 8007a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a34:	4605      	mov	r5, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 81ca 	beq.w	8007dd0 <_dtoa_r+0xa48>
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4601      	mov	r1, r0
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 fb7b 	bl	800813c <__pow5mult>
 8007a46:	9b08      	ldr	r3, [sp, #32]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	4605      	mov	r5, r0
 8007a4c:	dc44      	bgt.n	8007ad8 <_dtoa_r+0x750>
 8007a4e:	9b02      	ldr	r3, [sp, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d13c      	bne.n	8007ace <_dtoa_r+0x746>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d137      	bne.n	8007ace <_dtoa_r+0x746>
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a64:	0d1b      	lsrs	r3, r3, #20
 8007a66:	051b      	lsls	r3, r3, #20
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d033      	beq.n	8007ad4 <_dtoa_r+0x74c>
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	f10a 0a01 	add.w	sl, sl, #1
 8007a74:	9307      	str	r3, [sp, #28]
 8007a76:	f04f 0801 	mov.w	r8, #1
 8007a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a7c:	bb73      	cbnz	r3, 8007adc <_dtoa_r+0x754>
 8007a7e:	2001      	movs	r0, #1
 8007a80:	e034      	b.n	8007aec <_dtoa_r+0x764>
 8007a82:	bf00      	nop
 8007a84:	08008948 	.word	0x08008948
 8007a88:	08008920 	.word	0x08008920
 8007a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a92:	e790      	b.n	80079b6 <_dtoa_r+0x62e>
 8007a94:	f109 35ff 	add.w	r5, r9, #4294967295
 8007a98:	45a8      	cmp	r8, r5
 8007a9a:	bfbf      	itttt	lt
 8007a9c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8007a9e:	eba5 0808 	sublt.w	r8, r5, r8
 8007aa2:	4443      	addlt	r3, r8
 8007aa4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007aa6:	bfb6      	itet	lt
 8007aa8:	46a8      	movlt	r8, r5
 8007aaa:	eba8 0505 	subge.w	r5, r8, r5
 8007aae:	2500      	movlt	r5, #0
 8007ab0:	f1b9 0f00 	cmp.w	r9, #0
 8007ab4:	bfb9      	ittee	lt
 8007ab6:	ebaa 0609 	sublt.w	r6, sl, r9
 8007aba:	2300      	movlt	r3, #0
 8007abc:	4656      	movge	r6, sl
 8007abe:	464b      	movge	r3, r9
 8007ac0:	e77b      	b.n	80079ba <_dtoa_r+0x632>
 8007ac2:	4645      	mov	r5, r8
 8007ac4:	4656      	mov	r6, sl
 8007ac6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ac8:	e780      	b.n	80079cc <_dtoa_r+0x644>
 8007aca:	4642      	mov	r2, r8
 8007acc:	e7a8      	b.n	8007a20 <_dtoa_r+0x698>
 8007ace:	f04f 0800 	mov.w	r8, #0
 8007ad2:	e7d2      	b.n	8007a7a <_dtoa_r+0x6f2>
 8007ad4:	4698      	mov	r8, r3
 8007ad6:	e7d0      	b.n	8007a7a <_dtoa_r+0x6f2>
 8007ad8:	f04f 0800 	mov.w	r8, #0
 8007adc:	692b      	ldr	r3, [r5, #16]
 8007ade:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007ae2:	6918      	ldr	r0, [r3, #16]
 8007ae4:	f000 fa3d 	bl	8007f62 <__hi0bits>
 8007ae8:	f1c0 0020 	rsb	r0, r0, #32
 8007aec:	9b07      	ldr	r3, [sp, #28]
 8007aee:	4418      	add	r0, r3
 8007af0:	f010 001f 	ands.w	r0, r0, #31
 8007af4:	d047      	beq.n	8007b86 <_dtoa_r+0x7fe>
 8007af6:	f1c0 0320 	rsb	r3, r0, #32
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	dd3b      	ble.n	8007b76 <_dtoa_r+0x7ee>
 8007afe:	9b07      	ldr	r3, [sp, #28]
 8007b00:	f1c0 001c 	rsb	r0, r0, #28
 8007b04:	4482      	add	sl, r0
 8007b06:	4406      	add	r6, r0
 8007b08:	4403      	add	r3, r0
 8007b0a:	9307      	str	r3, [sp, #28]
 8007b0c:	f1ba 0f00 	cmp.w	sl, #0
 8007b10:	dd05      	ble.n	8007b1e <_dtoa_r+0x796>
 8007b12:	4652      	mov	r2, sl
 8007b14:	9901      	ldr	r1, [sp, #4]
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fb5e 	bl	80081d8 <__lshift>
 8007b1c:	9001      	str	r0, [sp, #4]
 8007b1e:	9b07      	ldr	r3, [sp, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dd05      	ble.n	8007b30 <_dtoa_r+0x7a8>
 8007b24:	4629      	mov	r1, r5
 8007b26:	461a      	mov	r2, r3
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fb55 	bl	80081d8 <__lshift>
 8007b2e:	4605      	mov	r5, r0
 8007b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b32:	b353      	cbz	r3, 8007b8a <_dtoa_r+0x802>
 8007b34:	4629      	mov	r1, r5
 8007b36:	9801      	ldr	r0, [sp, #4]
 8007b38:	f000 fba2 	bl	8008280 <__mcmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	da24      	bge.n	8007b8a <_dtoa_r+0x802>
 8007b40:	2300      	movs	r3, #0
 8007b42:	220a      	movs	r2, #10
 8007b44:	9901      	ldr	r1, [sp, #4]
 8007b46:	4620      	mov	r0, r4
 8007b48:	f000 f9d0 	bl	8007eec <__multadd>
 8007b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4e:	9001      	str	r0, [sp, #4]
 8007b50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8142 	beq.w	8007dde <_dtoa_r+0xa56>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	220a      	movs	r2, #10
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 f9c3 	bl	8007eec <__multadd>
 8007b66:	9b06      	ldr	r3, [sp, #24]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	dc4b      	bgt.n	8007c06 <_dtoa_r+0x87e>
 8007b6e:	9b08      	ldr	r3, [sp, #32]
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	dd48      	ble.n	8007c06 <_dtoa_r+0x87e>
 8007b74:	e011      	b.n	8007b9a <_dtoa_r+0x812>
 8007b76:	d0c9      	beq.n	8007b0c <_dtoa_r+0x784>
 8007b78:	9a07      	ldr	r2, [sp, #28]
 8007b7a:	331c      	adds	r3, #28
 8007b7c:	441a      	add	r2, r3
 8007b7e:	449a      	add	sl, r3
 8007b80:	441e      	add	r6, r3
 8007b82:	4613      	mov	r3, r2
 8007b84:	e7c1      	b.n	8007b0a <_dtoa_r+0x782>
 8007b86:	4603      	mov	r3, r0
 8007b88:	e7f6      	b.n	8007b78 <_dtoa_r+0x7f0>
 8007b8a:	f1b9 0f00 	cmp.w	r9, #0
 8007b8e:	dc34      	bgt.n	8007bfa <_dtoa_r+0x872>
 8007b90:	9b08      	ldr	r3, [sp, #32]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	dd31      	ble.n	8007bfa <_dtoa_r+0x872>
 8007b96:	f8cd 9018 	str.w	r9, [sp, #24]
 8007b9a:	9b06      	ldr	r3, [sp, #24]
 8007b9c:	b963      	cbnz	r3, 8007bb8 <_dtoa_r+0x830>
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	2205      	movs	r2, #5
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 f9a2 	bl	8007eec <__multadd>
 8007ba8:	4601      	mov	r1, r0
 8007baa:	4605      	mov	r5, r0
 8007bac:	9801      	ldr	r0, [sp, #4]
 8007bae:	f000 fb67 	bl	8008280 <__mcmp>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f73f adfc 	bgt.w	80077b0 <_dtoa_r+0x428>
 8007bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bba:	9e04      	ldr	r6, [sp, #16]
 8007bbc:	ea6f 0b03 	mvn.w	fp, r3
 8007bc0:	f04f 0900 	mov.w	r9, #0
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f000 f979 	bl	8007ebe <_Bfree>
 8007bcc:	2f00      	cmp	r7, #0
 8007bce:	f43f aebb 	beq.w	8007948 <_dtoa_r+0x5c0>
 8007bd2:	f1b9 0f00 	cmp.w	r9, #0
 8007bd6:	d005      	beq.n	8007be4 <_dtoa_r+0x85c>
 8007bd8:	45b9      	cmp	r9, r7
 8007bda:	d003      	beq.n	8007be4 <_dtoa_r+0x85c>
 8007bdc:	4649      	mov	r1, r9
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 f96d 	bl	8007ebe <_Bfree>
 8007be4:	4639      	mov	r1, r7
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 f969 	bl	8007ebe <_Bfree>
 8007bec:	e6ac      	b.n	8007948 <_dtoa_r+0x5c0>
 8007bee:	2500      	movs	r5, #0
 8007bf0:	462f      	mov	r7, r5
 8007bf2:	e7e1      	b.n	8007bb8 <_dtoa_r+0x830>
 8007bf4:	469b      	mov	fp, r3
 8007bf6:	462f      	mov	r7, r5
 8007bf8:	e5da      	b.n	80077b0 <_dtoa_r+0x428>
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	f8cd 9018 	str.w	r9, [sp, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 80f3 	beq.w	8007dec <_dtoa_r+0xa64>
 8007c06:	2e00      	cmp	r6, #0
 8007c08:	dd05      	ble.n	8007c16 <_dtoa_r+0x88e>
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 fae2 	bl	80081d8 <__lshift>
 8007c14:	4607      	mov	r7, r0
 8007c16:	f1b8 0f00 	cmp.w	r8, #0
 8007c1a:	d04c      	beq.n	8007cb6 <_dtoa_r+0x92e>
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f919 	bl	8007e56 <_Balloc>
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	3202      	adds	r2, #2
 8007c28:	4606      	mov	r6, r0
 8007c2a:	0092      	lsls	r2, r2, #2
 8007c2c:	f107 010c 	add.w	r1, r7, #12
 8007c30:	300c      	adds	r0, #12
 8007c32:	f000 f903 	bl	8007e3c <memcpy>
 8007c36:	2201      	movs	r2, #1
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 facc 	bl	80081d8 <__lshift>
 8007c40:	9b02      	ldr	r3, [sp, #8]
 8007c42:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	46b9      	mov	r9, r7
 8007c4c:	9307      	str	r3, [sp, #28]
 8007c4e:	4607      	mov	r7, r0
 8007c50:	4629      	mov	r1, r5
 8007c52:	9801      	ldr	r0, [sp, #4]
 8007c54:	f7ff fb0c 	bl	8007270 <quorem>
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007c60:	9801      	ldr	r0, [sp, #4]
 8007c62:	f000 fb0d 	bl	8008280 <__mcmp>
 8007c66:	463a      	mov	r2, r7
 8007c68:	9002      	str	r0, [sp, #8]
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f000 fb21 	bl	80082b4 <__mdiff>
 8007c72:	68c3      	ldr	r3, [r0, #12]
 8007c74:	4602      	mov	r2, r0
 8007c76:	bb03      	cbnz	r3, 8007cba <_dtoa_r+0x932>
 8007c78:	4601      	mov	r1, r0
 8007c7a:	9009      	str	r0, [sp, #36]	; 0x24
 8007c7c:	9801      	ldr	r0, [sp, #4]
 8007c7e:	f000 faff 	bl	8008280 <__mcmp>
 8007c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c84:	4603      	mov	r3, r0
 8007c86:	4611      	mov	r1, r2
 8007c88:	4620      	mov	r0, r4
 8007c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8c:	f000 f917 	bl	8007ebe <_Bfree>
 8007c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c92:	b9a3      	cbnz	r3, 8007cbe <_dtoa_r+0x936>
 8007c94:	9a08      	ldr	r2, [sp, #32]
 8007c96:	b992      	cbnz	r2, 8007cbe <_dtoa_r+0x936>
 8007c98:	9a07      	ldr	r2, [sp, #28]
 8007c9a:	b982      	cbnz	r2, 8007cbe <_dtoa_r+0x936>
 8007c9c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007ca0:	d029      	beq.n	8007cf6 <_dtoa_r+0x96e>
 8007ca2:	9b02      	ldr	r3, [sp, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dd01      	ble.n	8007cac <_dtoa_r+0x924>
 8007ca8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8007cac:	f10a 0601 	add.w	r6, sl, #1
 8007cb0:	f88a 8000 	strb.w	r8, [sl]
 8007cb4:	e786      	b.n	8007bc4 <_dtoa_r+0x83c>
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	e7c2      	b.n	8007c40 <_dtoa_r+0x8b8>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e7e3      	b.n	8007c86 <_dtoa_r+0x8fe>
 8007cbe:	9a02      	ldr	r2, [sp, #8]
 8007cc0:	2a00      	cmp	r2, #0
 8007cc2:	db04      	blt.n	8007cce <_dtoa_r+0x946>
 8007cc4:	d124      	bne.n	8007d10 <_dtoa_r+0x988>
 8007cc6:	9a08      	ldr	r2, [sp, #32]
 8007cc8:	bb12      	cbnz	r2, 8007d10 <_dtoa_r+0x988>
 8007cca:	9a07      	ldr	r2, [sp, #28]
 8007ccc:	bb02      	cbnz	r2, 8007d10 <_dtoa_r+0x988>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	ddec      	ble.n	8007cac <_dtoa_r+0x924>
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	9901      	ldr	r1, [sp, #4]
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f000 fa7e 	bl	80081d8 <__lshift>
 8007cdc:	4629      	mov	r1, r5
 8007cde:	9001      	str	r0, [sp, #4]
 8007ce0:	f000 face 	bl	8008280 <__mcmp>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	dc03      	bgt.n	8007cf0 <_dtoa_r+0x968>
 8007ce8:	d1e0      	bne.n	8007cac <_dtoa_r+0x924>
 8007cea:	f018 0f01 	tst.w	r8, #1
 8007cee:	d0dd      	beq.n	8007cac <_dtoa_r+0x924>
 8007cf0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007cf4:	d1d8      	bne.n	8007ca8 <_dtoa_r+0x920>
 8007cf6:	2339      	movs	r3, #57	; 0x39
 8007cf8:	f10a 0601 	add.w	r6, sl, #1
 8007cfc:	f88a 3000 	strb.w	r3, [sl]
 8007d00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d04:	2b39      	cmp	r3, #57	; 0x39
 8007d06:	f106 32ff 	add.w	r2, r6, #4294967295
 8007d0a:	d04c      	beq.n	8007da6 <_dtoa_r+0xa1e>
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	e051      	b.n	8007db4 <_dtoa_r+0xa2c>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f10a 0601 	add.w	r6, sl, #1
 8007d16:	dd05      	ble.n	8007d24 <_dtoa_r+0x99c>
 8007d18:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d1c:	d0eb      	beq.n	8007cf6 <_dtoa_r+0x96e>
 8007d1e:	f108 0801 	add.w	r8, r8, #1
 8007d22:	e7c5      	b.n	8007cb0 <_dtoa_r+0x928>
 8007d24:	9b04      	ldr	r3, [sp, #16]
 8007d26:	9a06      	ldr	r2, [sp, #24]
 8007d28:	f806 8c01 	strb.w	r8, [r6, #-1]
 8007d2c:	1af3      	subs	r3, r6, r3
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d021      	beq.n	8007d76 <_dtoa_r+0x9ee>
 8007d32:	2300      	movs	r3, #0
 8007d34:	220a      	movs	r2, #10
 8007d36:	9901      	ldr	r1, [sp, #4]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 f8d7 	bl	8007eec <__multadd>
 8007d3e:	45b9      	cmp	r9, r7
 8007d40:	9001      	str	r0, [sp, #4]
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	f04f 020a 	mov.w	r2, #10
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	d105      	bne.n	8007d5c <_dtoa_r+0x9d4>
 8007d50:	f000 f8cc 	bl	8007eec <__multadd>
 8007d54:	4681      	mov	r9, r0
 8007d56:	4607      	mov	r7, r0
 8007d58:	46b2      	mov	sl, r6
 8007d5a:	e779      	b.n	8007c50 <_dtoa_r+0x8c8>
 8007d5c:	f000 f8c6 	bl	8007eec <__multadd>
 8007d60:	4639      	mov	r1, r7
 8007d62:	4681      	mov	r9, r0
 8007d64:	2300      	movs	r3, #0
 8007d66:	220a      	movs	r2, #10
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 f8bf 	bl	8007eec <__multadd>
 8007d6e:	4607      	mov	r7, r0
 8007d70:	e7f2      	b.n	8007d58 <_dtoa_r+0x9d0>
 8007d72:	f04f 0900 	mov.w	r9, #0
 8007d76:	2201      	movs	r2, #1
 8007d78:	9901      	ldr	r1, [sp, #4]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 fa2c 	bl	80081d8 <__lshift>
 8007d80:	4629      	mov	r1, r5
 8007d82:	9001      	str	r0, [sp, #4]
 8007d84:	f000 fa7c 	bl	8008280 <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dcb9      	bgt.n	8007d00 <_dtoa_r+0x978>
 8007d8c:	d102      	bne.n	8007d94 <_dtoa_r+0xa0c>
 8007d8e:	f018 0f01 	tst.w	r8, #1
 8007d92:	d1b5      	bne.n	8007d00 <_dtoa_r+0x978>
 8007d94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d98:	2b30      	cmp	r3, #48	; 0x30
 8007d9a:	f106 32ff 	add.w	r2, r6, #4294967295
 8007d9e:	f47f af11 	bne.w	8007bc4 <_dtoa_r+0x83c>
 8007da2:	4616      	mov	r6, r2
 8007da4:	e7f6      	b.n	8007d94 <_dtoa_r+0xa0c>
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d105      	bne.n	8007db8 <_dtoa_r+0xa30>
 8007dac:	9a04      	ldr	r2, [sp, #16]
 8007dae:	f10b 0b01 	add.w	fp, fp, #1
 8007db2:	2331      	movs	r3, #49	; 0x31
 8007db4:	7013      	strb	r3, [r2, #0]
 8007db6:	e705      	b.n	8007bc4 <_dtoa_r+0x83c>
 8007db8:	4616      	mov	r6, r2
 8007dba:	e7a1      	b.n	8007d00 <_dtoa_r+0x978>
 8007dbc:	4b16      	ldr	r3, [pc, #88]	; (8007e18 <_dtoa_r+0xa90>)
 8007dbe:	f7ff bb48 	b.w	8007452 <_dtoa_r+0xca>
 8007dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f47f ab23 	bne.w	8007410 <_dtoa_r+0x88>
 8007dca:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <_dtoa_r+0xa94>)
 8007dcc:	f7ff bb41 	b.w	8007452 <_dtoa_r+0xca>
 8007dd0:	9b08      	ldr	r3, [sp, #32]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	f77f ae3b 	ble.w	8007a4e <_dtoa_r+0x6c6>
 8007dd8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007ddc:	e64f      	b.n	8007a7e <_dtoa_r+0x6f6>
 8007dde:	9b06      	ldr	r3, [sp, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dc03      	bgt.n	8007dec <_dtoa_r+0xa64>
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	f73f aed7 	bgt.w	8007b9a <_dtoa_r+0x812>
 8007dec:	9e04      	ldr	r6, [sp, #16]
 8007dee:	9801      	ldr	r0, [sp, #4]
 8007df0:	4629      	mov	r1, r5
 8007df2:	f7ff fa3d 	bl	8007270 <quorem>
 8007df6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007dfa:	f806 8b01 	strb.w	r8, [r6], #1
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	9a06      	ldr	r2, [sp, #24]
 8007e02:	1af3      	subs	r3, r6, r3
 8007e04:	429a      	cmp	r2, r3
 8007e06:	ddb4      	ble.n	8007d72 <_dtoa_r+0x9ea>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	220a      	movs	r2, #10
 8007e0c:	9901      	ldr	r1, [sp, #4]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 f86c 	bl	8007eec <__multadd>
 8007e14:	9001      	str	r0, [sp, #4]
 8007e16:	e7ea      	b.n	8007dee <_dtoa_r+0xa66>
 8007e18:	080088ec 	.word	0x080088ec
 8007e1c:	08008910 	.word	0x08008910

08007e20 <_localeconv_r>:
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <_localeconv_r+0x14>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6a18      	ldr	r0, [r3, #32]
 8007e26:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <_localeconv_r+0x18>)
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	bf08      	it	eq
 8007e2c:	4618      	moveq	r0, r3
 8007e2e:	30f0      	adds	r0, #240	; 0xf0
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000010 	.word	0x20000010
 8007e38:	20000074 	.word	0x20000074

08007e3c <memcpy>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	1e43      	subs	r3, r0, #1
 8007e40:	440a      	add	r2, r1
 8007e42:	4291      	cmp	r1, r2
 8007e44:	d100      	bne.n	8007e48 <memcpy+0xc>
 8007e46:	bd10      	pop	{r4, pc}
 8007e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e50:	e7f7      	b.n	8007e42 <memcpy+0x6>

08007e52 <__malloc_lock>:
 8007e52:	4770      	bx	lr

08007e54 <__malloc_unlock>:
 8007e54:	4770      	bx	lr

08007e56 <_Balloc>:
 8007e56:	b570      	push	{r4, r5, r6, lr}
 8007e58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	460e      	mov	r6, r1
 8007e5e:	b93d      	cbnz	r5, 8007e70 <_Balloc+0x1a>
 8007e60:	2010      	movs	r0, #16
 8007e62:	f7fe fce1 	bl	8006828 <malloc>
 8007e66:	6260      	str	r0, [r4, #36]	; 0x24
 8007e68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e6c:	6005      	str	r5, [r0, #0]
 8007e6e:	60c5      	str	r5, [r0, #12]
 8007e70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007e72:	68eb      	ldr	r3, [r5, #12]
 8007e74:	b183      	cbz	r3, 8007e98 <_Balloc+0x42>
 8007e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007e7e:	b9b8      	cbnz	r0, 8007eb0 <_Balloc+0x5a>
 8007e80:	2101      	movs	r1, #1
 8007e82:	fa01 f506 	lsl.w	r5, r1, r6
 8007e86:	1d6a      	adds	r2, r5, #5
 8007e88:	0092      	lsls	r2, r2, #2
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 fabe 	bl	800840c <_calloc_r>
 8007e90:	b160      	cbz	r0, 8007eac <_Balloc+0x56>
 8007e92:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007e96:	e00e      	b.n	8007eb6 <_Balloc+0x60>
 8007e98:	2221      	movs	r2, #33	; 0x21
 8007e9a:	2104      	movs	r1, #4
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f000 fab5 	bl	800840c <_calloc_r>
 8007ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ea4:	60e8      	str	r0, [r5, #12]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e4      	bne.n	8007e76 <_Balloc+0x20>
 8007eac:	2000      	movs	r0, #0
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	6802      	ldr	r2, [r0, #0]
 8007eb2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ebc:	e7f7      	b.n	8007eae <_Balloc+0x58>

08007ebe <_Bfree>:
 8007ebe:	b570      	push	{r4, r5, r6, lr}
 8007ec0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	b93c      	cbnz	r4, 8007ed8 <_Bfree+0x1a>
 8007ec8:	2010      	movs	r0, #16
 8007eca:	f7fe fcad 	bl	8006828 <malloc>
 8007ece:	6270      	str	r0, [r6, #36]	; 0x24
 8007ed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ed4:	6004      	str	r4, [r0, #0]
 8007ed6:	60c4      	str	r4, [r0, #12]
 8007ed8:	b13d      	cbz	r5, 8007eea <_Bfree+0x2c>
 8007eda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007edc:	686a      	ldr	r2, [r5, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ee4:	6029      	str	r1, [r5, #0]
 8007ee6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007eea:	bd70      	pop	{r4, r5, r6, pc}

08007eec <__multadd>:
 8007eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef0:	690d      	ldr	r5, [r1, #16]
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	f101 0c14 	add.w	ip, r1, #20
 8007efc:	2300      	movs	r3, #0
 8007efe:	f8dc 0000 	ldr.w	r0, [ip]
 8007f02:	b281      	uxth	r1, r0
 8007f04:	fb02 7101 	mla	r1, r2, r1, r7
 8007f08:	0c0f      	lsrs	r7, r1, #16
 8007f0a:	0c00      	lsrs	r0, r0, #16
 8007f0c:	fb02 7000 	mla	r0, r2, r0, r7
 8007f10:	b289      	uxth	r1, r1
 8007f12:	3301      	adds	r3, #1
 8007f14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007f18:	429d      	cmp	r5, r3
 8007f1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007f1e:	f84c 1b04 	str.w	r1, [ip], #4
 8007f22:	dcec      	bgt.n	8007efe <__multadd+0x12>
 8007f24:	b1d7      	cbz	r7, 8007f5c <__multadd+0x70>
 8007f26:	68a3      	ldr	r3, [r4, #8]
 8007f28:	42ab      	cmp	r3, r5
 8007f2a:	dc12      	bgt.n	8007f52 <__multadd+0x66>
 8007f2c:	6861      	ldr	r1, [r4, #4]
 8007f2e:	4630      	mov	r0, r6
 8007f30:	3101      	adds	r1, #1
 8007f32:	f7ff ff90 	bl	8007e56 <_Balloc>
 8007f36:	6922      	ldr	r2, [r4, #16]
 8007f38:	3202      	adds	r2, #2
 8007f3a:	f104 010c 	add.w	r1, r4, #12
 8007f3e:	4680      	mov	r8, r0
 8007f40:	0092      	lsls	r2, r2, #2
 8007f42:	300c      	adds	r0, #12
 8007f44:	f7ff ff7a 	bl	8007e3c <memcpy>
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f7ff ffb7 	bl	8007ebe <_Bfree>
 8007f50:	4644      	mov	r4, r8
 8007f52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f56:	3501      	adds	r5, #1
 8007f58:	615f      	str	r7, [r3, #20]
 8007f5a:	6125      	str	r5, [r4, #16]
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f62 <__hi0bits>:
 8007f62:	0c02      	lsrs	r2, r0, #16
 8007f64:	0412      	lsls	r2, r2, #16
 8007f66:	4603      	mov	r3, r0
 8007f68:	b9b2      	cbnz	r2, 8007f98 <__hi0bits+0x36>
 8007f6a:	0403      	lsls	r3, r0, #16
 8007f6c:	2010      	movs	r0, #16
 8007f6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007f72:	bf04      	itt	eq
 8007f74:	021b      	lsleq	r3, r3, #8
 8007f76:	3008      	addeq	r0, #8
 8007f78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007f7c:	bf04      	itt	eq
 8007f7e:	011b      	lsleq	r3, r3, #4
 8007f80:	3004      	addeq	r0, #4
 8007f82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007f86:	bf04      	itt	eq
 8007f88:	009b      	lsleq	r3, r3, #2
 8007f8a:	3002      	addeq	r0, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	db06      	blt.n	8007f9e <__hi0bits+0x3c>
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	d503      	bpl.n	8007f9c <__hi0bits+0x3a>
 8007f94:	3001      	adds	r0, #1
 8007f96:	4770      	bx	lr
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e7e8      	b.n	8007f6e <__hi0bits+0xc>
 8007f9c:	2020      	movs	r0, #32
 8007f9e:	4770      	bx	lr

08007fa0 <__lo0bits>:
 8007fa0:	6803      	ldr	r3, [r0, #0]
 8007fa2:	f013 0207 	ands.w	r2, r3, #7
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	d00b      	beq.n	8007fc2 <__lo0bits+0x22>
 8007faa:	07da      	lsls	r2, r3, #31
 8007fac:	d423      	bmi.n	8007ff6 <__lo0bits+0x56>
 8007fae:	0798      	lsls	r0, r3, #30
 8007fb0:	bf49      	itett	mi
 8007fb2:	085b      	lsrmi	r3, r3, #1
 8007fb4:	089b      	lsrpl	r3, r3, #2
 8007fb6:	2001      	movmi	r0, #1
 8007fb8:	600b      	strmi	r3, [r1, #0]
 8007fba:	bf5c      	itt	pl
 8007fbc:	600b      	strpl	r3, [r1, #0]
 8007fbe:	2002      	movpl	r0, #2
 8007fc0:	4770      	bx	lr
 8007fc2:	b298      	uxth	r0, r3
 8007fc4:	b9a8      	cbnz	r0, 8007ff2 <__lo0bits+0x52>
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	2010      	movs	r0, #16
 8007fca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007fce:	bf04      	itt	eq
 8007fd0:	0a1b      	lsreq	r3, r3, #8
 8007fd2:	3008      	addeq	r0, #8
 8007fd4:	071a      	lsls	r2, r3, #28
 8007fd6:	bf04      	itt	eq
 8007fd8:	091b      	lsreq	r3, r3, #4
 8007fda:	3004      	addeq	r0, #4
 8007fdc:	079a      	lsls	r2, r3, #30
 8007fde:	bf04      	itt	eq
 8007fe0:	089b      	lsreq	r3, r3, #2
 8007fe2:	3002      	addeq	r0, #2
 8007fe4:	07da      	lsls	r2, r3, #31
 8007fe6:	d402      	bmi.n	8007fee <__lo0bits+0x4e>
 8007fe8:	085b      	lsrs	r3, r3, #1
 8007fea:	d006      	beq.n	8007ffa <__lo0bits+0x5a>
 8007fec:	3001      	adds	r0, #1
 8007fee:	600b      	str	r3, [r1, #0]
 8007ff0:	4770      	bx	lr
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	e7e9      	b.n	8007fca <__lo0bits+0x2a>
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	4770      	bx	lr
 8007ffa:	2020      	movs	r0, #32
 8007ffc:	4770      	bx	lr

08007ffe <__i2b>:
 8007ffe:	b510      	push	{r4, lr}
 8008000:	460c      	mov	r4, r1
 8008002:	2101      	movs	r1, #1
 8008004:	f7ff ff27 	bl	8007e56 <_Balloc>
 8008008:	2201      	movs	r2, #1
 800800a:	6144      	str	r4, [r0, #20]
 800800c:	6102      	str	r2, [r0, #16]
 800800e:	bd10      	pop	{r4, pc}

08008010 <__multiply>:
 8008010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	4614      	mov	r4, r2
 8008016:	690a      	ldr	r2, [r1, #16]
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	429a      	cmp	r2, r3
 800801c:	bfb8      	it	lt
 800801e:	460b      	movlt	r3, r1
 8008020:	4688      	mov	r8, r1
 8008022:	bfbc      	itt	lt
 8008024:	46a0      	movlt	r8, r4
 8008026:	461c      	movlt	r4, r3
 8008028:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800802c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008030:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008034:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008038:	eb07 0609 	add.w	r6, r7, r9
 800803c:	42b3      	cmp	r3, r6
 800803e:	bfb8      	it	lt
 8008040:	3101      	addlt	r1, #1
 8008042:	f7ff ff08 	bl	8007e56 <_Balloc>
 8008046:	f100 0514 	add.w	r5, r0, #20
 800804a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800804e:	462b      	mov	r3, r5
 8008050:	2200      	movs	r2, #0
 8008052:	4573      	cmp	r3, lr
 8008054:	d316      	bcc.n	8008084 <__multiply+0x74>
 8008056:	f104 0214 	add.w	r2, r4, #20
 800805a:	f108 0114 	add.w	r1, r8, #20
 800805e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008062:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	9b00      	ldr	r3, [sp, #0]
 800806a:	9201      	str	r2, [sp, #4]
 800806c:	4293      	cmp	r3, r2
 800806e:	d80c      	bhi.n	800808a <__multiply+0x7a>
 8008070:	2e00      	cmp	r6, #0
 8008072:	dd03      	ble.n	800807c <__multiply+0x6c>
 8008074:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008078:	2b00      	cmp	r3, #0
 800807a:	d05d      	beq.n	8008138 <__multiply+0x128>
 800807c:	6106      	str	r6, [r0, #16]
 800807e:	b003      	add	sp, #12
 8008080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008084:	f843 2b04 	str.w	r2, [r3], #4
 8008088:	e7e3      	b.n	8008052 <__multiply+0x42>
 800808a:	f8b2 b000 	ldrh.w	fp, [r2]
 800808e:	f1bb 0f00 	cmp.w	fp, #0
 8008092:	d023      	beq.n	80080dc <__multiply+0xcc>
 8008094:	4689      	mov	r9, r1
 8008096:	46ac      	mov	ip, r5
 8008098:	f04f 0800 	mov.w	r8, #0
 800809c:	f859 4b04 	ldr.w	r4, [r9], #4
 80080a0:	f8dc a000 	ldr.w	sl, [ip]
 80080a4:	b2a3      	uxth	r3, r4
 80080a6:	fa1f fa8a 	uxth.w	sl, sl
 80080aa:	fb0b a303 	mla	r3, fp, r3, sl
 80080ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80080b2:	f8dc 4000 	ldr.w	r4, [ip]
 80080b6:	4443      	add	r3, r8
 80080b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80080bc:	fb0b 840a 	mla	r4, fp, sl, r8
 80080c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80080c4:	46e2      	mov	sl, ip
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80080cc:	454f      	cmp	r7, r9
 80080ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80080d2:	f84a 3b04 	str.w	r3, [sl], #4
 80080d6:	d82b      	bhi.n	8008130 <__multiply+0x120>
 80080d8:	f8cc 8004 	str.w	r8, [ip, #4]
 80080dc:	9b01      	ldr	r3, [sp, #4]
 80080de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80080e2:	3204      	adds	r2, #4
 80080e4:	f1ba 0f00 	cmp.w	sl, #0
 80080e8:	d020      	beq.n	800812c <__multiply+0x11c>
 80080ea:	682b      	ldr	r3, [r5, #0]
 80080ec:	4689      	mov	r9, r1
 80080ee:	46a8      	mov	r8, r5
 80080f0:	f04f 0b00 	mov.w	fp, #0
 80080f4:	f8b9 c000 	ldrh.w	ip, [r9]
 80080f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80080fc:	fb0a 440c 	mla	r4, sl, ip, r4
 8008100:	445c      	add	r4, fp
 8008102:	46c4      	mov	ip, r8
 8008104:	b29b      	uxth	r3, r3
 8008106:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800810a:	f84c 3b04 	str.w	r3, [ip], #4
 800810e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008112:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008116:	0c1b      	lsrs	r3, r3, #16
 8008118:	fb0a b303 	mla	r3, sl, r3, fp
 800811c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008120:	454f      	cmp	r7, r9
 8008122:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008126:	d805      	bhi.n	8008134 <__multiply+0x124>
 8008128:	f8c8 3004 	str.w	r3, [r8, #4]
 800812c:	3504      	adds	r5, #4
 800812e:	e79b      	b.n	8008068 <__multiply+0x58>
 8008130:	46d4      	mov	ip, sl
 8008132:	e7b3      	b.n	800809c <__multiply+0x8c>
 8008134:	46e0      	mov	r8, ip
 8008136:	e7dd      	b.n	80080f4 <__multiply+0xe4>
 8008138:	3e01      	subs	r6, #1
 800813a:	e799      	b.n	8008070 <__multiply+0x60>

0800813c <__pow5mult>:
 800813c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008140:	4615      	mov	r5, r2
 8008142:	f012 0203 	ands.w	r2, r2, #3
 8008146:	4606      	mov	r6, r0
 8008148:	460f      	mov	r7, r1
 800814a:	d007      	beq.n	800815c <__pow5mult+0x20>
 800814c:	3a01      	subs	r2, #1
 800814e:	4c21      	ldr	r4, [pc, #132]	; (80081d4 <__pow5mult+0x98>)
 8008150:	2300      	movs	r3, #0
 8008152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008156:	f7ff fec9 	bl	8007eec <__multadd>
 800815a:	4607      	mov	r7, r0
 800815c:	10ad      	asrs	r5, r5, #2
 800815e:	d035      	beq.n	80081cc <__pow5mult+0x90>
 8008160:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008162:	b93c      	cbnz	r4, 8008174 <__pow5mult+0x38>
 8008164:	2010      	movs	r0, #16
 8008166:	f7fe fb5f 	bl	8006828 <malloc>
 800816a:	6270      	str	r0, [r6, #36]	; 0x24
 800816c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008170:	6004      	str	r4, [r0, #0]
 8008172:	60c4      	str	r4, [r0, #12]
 8008174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800817c:	b94c      	cbnz	r4, 8008192 <__pow5mult+0x56>
 800817e:	f240 2171 	movw	r1, #625	; 0x271
 8008182:	4630      	mov	r0, r6
 8008184:	f7ff ff3b 	bl	8007ffe <__i2b>
 8008188:	2300      	movs	r3, #0
 800818a:	f8c8 0008 	str.w	r0, [r8, #8]
 800818e:	4604      	mov	r4, r0
 8008190:	6003      	str	r3, [r0, #0]
 8008192:	f04f 0800 	mov.w	r8, #0
 8008196:	07eb      	lsls	r3, r5, #31
 8008198:	d50a      	bpl.n	80081b0 <__pow5mult+0x74>
 800819a:	4639      	mov	r1, r7
 800819c:	4622      	mov	r2, r4
 800819e:	4630      	mov	r0, r6
 80081a0:	f7ff ff36 	bl	8008010 <__multiply>
 80081a4:	4639      	mov	r1, r7
 80081a6:	4681      	mov	r9, r0
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7ff fe88 	bl	8007ebe <_Bfree>
 80081ae:	464f      	mov	r7, r9
 80081b0:	106d      	asrs	r5, r5, #1
 80081b2:	d00b      	beq.n	80081cc <__pow5mult+0x90>
 80081b4:	6820      	ldr	r0, [r4, #0]
 80081b6:	b938      	cbnz	r0, 80081c8 <__pow5mult+0x8c>
 80081b8:	4622      	mov	r2, r4
 80081ba:	4621      	mov	r1, r4
 80081bc:	4630      	mov	r0, r6
 80081be:	f7ff ff27 	bl	8008010 <__multiply>
 80081c2:	6020      	str	r0, [r4, #0]
 80081c4:	f8c0 8000 	str.w	r8, [r0]
 80081c8:	4604      	mov	r4, r0
 80081ca:	e7e4      	b.n	8008196 <__pow5mult+0x5a>
 80081cc:	4638      	mov	r0, r7
 80081ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d2:	bf00      	nop
 80081d4:	08008a10 	.word	0x08008a10

080081d8 <__lshift>:
 80081d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	460c      	mov	r4, r1
 80081de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	6849      	ldr	r1, [r1, #4]
 80081e6:	eb0a 0903 	add.w	r9, sl, r3
 80081ea:	68a3      	ldr	r3, [r4, #8]
 80081ec:	4607      	mov	r7, r0
 80081ee:	4616      	mov	r6, r2
 80081f0:	f109 0501 	add.w	r5, r9, #1
 80081f4:	42ab      	cmp	r3, r5
 80081f6:	db32      	blt.n	800825e <__lshift+0x86>
 80081f8:	4638      	mov	r0, r7
 80081fa:	f7ff fe2c 	bl	8007e56 <_Balloc>
 80081fe:	2300      	movs	r3, #0
 8008200:	4680      	mov	r8, r0
 8008202:	f100 0114 	add.w	r1, r0, #20
 8008206:	461a      	mov	r2, r3
 8008208:	4553      	cmp	r3, sl
 800820a:	db2b      	blt.n	8008264 <__lshift+0x8c>
 800820c:	6920      	ldr	r0, [r4, #16]
 800820e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008212:	f104 0314 	add.w	r3, r4, #20
 8008216:	f016 021f 	ands.w	r2, r6, #31
 800821a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800821e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008222:	d025      	beq.n	8008270 <__lshift+0x98>
 8008224:	f1c2 0e20 	rsb	lr, r2, #32
 8008228:	2000      	movs	r0, #0
 800822a:	681e      	ldr	r6, [r3, #0]
 800822c:	468a      	mov	sl, r1
 800822e:	4096      	lsls	r6, r2
 8008230:	4330      	orrs	r0, r6
 8008232:	f84a 0b04 	str.w	r0, [sl], #4
 8008236:	f853 0b04 	ldr.w	r0, [r3], #4
 800823a:	459c      	cmp	ip, r3
 800823c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008240:	d814      	bhi.n	800826c <__lshift+0x94>
 8008242:	6048      	str	r0, [r1, #4]
 8008244:	b108      	cbz	r0, 800824a <__lshift+0x72>
 8008246:	f109 0502 	add.w	r5, r9, #2
 800824a:	3d01      	subs	r5, #1
 800824c:	4638      	mov	r0, r7
 800824e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008252:	4621      	mov	r1, r4
 8008254:	f7ff fe33 	bl	8007ebe <_Bfree>
 8008258:	4640      	mov	r0, r8
 800825a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825e:	3101      	adds	r1, #1
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	e7c7      	b.n	80081f4 <__lshift+0x1c>
 8008264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008268:	3301      	adds	r3, #1
 800826a:	e7cd      	b.n	8008208 <__lshift+0x30>
 800826c:	4651      	mov	r1, sl
 800826e:	e7dc      	b.n	800822a <__lshift+0x52>
 8008270:	3904      	subs	r1, #4
 8008272:	f853 2b04 	ldr.w	r2, [r3], #4
 8008276:	f841 2f04 	str.w	r2, [r1, #4]!
 800827a:	459c      	cmp	ip, r3
 800827c:	d8f9      	bhi.n	8008272 <__lshift+0x9a>
 800827e:	e7e4      	b.n	800824a <__lshift+0x72>

08008280 <__mcmp>:
 8008280:	6903      	ldr	r3, [r0, #16]
 8008282:	690a      	ldr	r2, [r1, #16]
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	b530      	push	{r4, r5, lr}
 8008288:	d10c      	bne.n	80082a4 <__mcmp+0x24>
 800828a:	0092      	lsls	r2, r2, #2
 800828c:	3014      	adds	r0, #20
 800828e:	3114      	adds	r1, #20
 8008290:	1884      	adds	r4, r0, r2
 8008292:	4411      	add	r1, r2
 8008294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800829c:	4295      	cmp	r5, r2
 800829e:	d003      	beq.n	80082a8 <__mcmp+0x28>
 80082a0:	d305      	bcc.n	80082ae <__mcmp+0x2e>
 80082a2:	2301      	movs	r3, #1
 80082a4:	4618      	mov	r0, r3
 80082a6:	bd30      	pop	{r4, r5, pc}
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	d3f3      	bcc.n	8008294 <__mcmp+0x14>
 80082ac:	e7fa      	b.n	80082a4 <__mcmp+0x24>
 80082ae:	f04f 33ff 	mov.w	r3, #4294967295
 80082b2:	e7f7      	b.n	80082a4 <__mcmp+0x24>

080082b4 <__mdiff>:
 80082b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	460d      	mov	r5, r1
 80082ba:	4607      	mov	r7, r0
 80082bc:	4611      	mov	r1, r2
 80082be:	4628      	mov	r0, r5
 80082c0:	4614      	mov	r4, r2
 80082c2:	f7ff ffdd 	bl	8008280 <__mcmp>
 80082c6:	1e06      	subs	r6, r0, #0
 80082c8:	d108      	bne.n	80082dc <__mdiff+0x28>
 80082ca:	4631      	mov	r1, r6
 80082cc:	4638      	mov	r0, r7
 80082ce:	f7ff fdc2 	bl	8007e56 <_Balloc>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80082d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082dc:	bfa4      	itt	ge
 80082de:	4623      	movge	r3, r4
 80082e0:	462c      	movge	r4, r5
 80082e2:	4638      	mov	r0, r7
 80082e4:	6861      	ldr	r1, [r4, #4]
 80082e6:	bfa6      	itte	ge
 80082e8:	461d      	movge	r5, r3
 80082ea:	2600      	movge	r6, #0
 80082ec:	2601      	movlt	r6, #1
 80082ee:	f7ff fdb2 	bl	8007e56 <_Balloc>
 80082f2:	692b      	ldr	r3, [r5, #16]
 80082f4:	60c6      	str	r6, [r0, #12]
 80082f6:	6926      	ldr	r6, [r4, #16]
 80082f8:	f105 0914 	add.w	r9, r5, #20
 80082fc:	f104 0214 	add.w	r2, r4, #20
 8008300:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008304:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008308:	f100 0514 	add.w	r5, r0, #20
 800830c:	f04f 0e00 	mov.w	lr, #0
 8008310:	f852 ab04 	ldr.w	sl, [r2], #4
 8008314:	f859 4b04 	ldr.w	r4, [r9], #4
 8008318:	fa1e f18a 	uxtah	r1, lr, sl
 800831c:	b2a3      	uxth	r3, r4
 800831e:	1ac9      	subs	r1, r1, r3
 8008320:	0c23      	lsrs	r3, r4, #16
 8008322:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008326:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800832a:	b289      	uxth	r1, r1
 800832c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008330:	45c8      	cmp	r8, r9
 8008332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008336:	4694      	mov	ip, r2
 8008338:	f845 3b04 	str.w	r3, [r5], #4
 800833c:	d8e8      	bhi.n	8008310 <__mdiff+0x5c>
 800833e:	45bc      	cmp	ip, r7
 8008340:	d304      	bcc.n	800834c <__mdiff+0x98>
 8008342:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008346:	b183      	cbz	r3, 800836a <__mdiff+0xb6>
 8008348:	6106      	str	r6, [r0, #16]
 800834a:	e7c5      	b.n	80082d8 <__mdiff+0x24>
 800834c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008350:	fa1e f381 	uxtah	r3, lr, r1
 8008354:	141a      	asrs	r2, r3, #16
 8008356:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800835a:	b29b      	uxth	r3, r3
 800835c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008360:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008364:	f845 3b04 	str.w	r3, [r5], #4
 8008368:	e7e9      	b.n	800833e <__mdiff+0x8a>
 800836a:	3e01      	subs	r6, #1
 800836c:	e7e9      	b.n	8008342 <__mdiff+0x8e>

0800836e <__d2b>:
 800836e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008372:	460e      	mov	r6, r1
 8008374:	2101      	movs	r1, #1
 8008376:	ec59 8b10 	vmov	r8, r9, d0
 800837a:	4615      	mov	r5, r2
 800837c:	f7ff fd6b 	bl	8007e56 <_Balloc>
 8008380:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008384:	4607      	mov	r7, r0
 8008386:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800838a:	bb34      	cbnz	r4, 80083da <__d2b+0x6c>
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	f1b8 0300 	subs.w	r3, r8, #0
 8008392:	d027      	beq.n	80083e4 <__d2b+0x76>
 8008394:	a802      	add	r0, sp, #8
 8008396:	f840 3d08 	str.w	r3, [r0, #-8]!
 800839a:	f7ff fe01 	bl	8007fa0 <__lo0bits>
 800839e:	9900      	ldr	r1, [sp, #0]
 80083a0:	b1f0      	cbz	r0, 80083e0 <__d2b+0x72>
 80083a2:	9a01      	ldr	r2, [sp, #4]
 80083a4:	f1c0 0320 	rsb	r3, r0, #32
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	430b      	orrs	r3, r1
 80083ae:	40c2      	lsrs	r2, r0
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	9201      	str	r2, [sp, #4]
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	61bb      	str	r3, [r7, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bf14      	ite	ne
 80083bc:	2102      	movne	r1, #2
 80083be:	2101      	moveq	r1, #1
 80083c0:	6139      	str	r1, [r7, #16]
 80083c2:	b1c4      	cbz	r4, 80083f6 <__d2b+0x88>
 80083c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80083c8:	4404      	add	r4, r0
 80083ca:	6034      	str	r4, [r6, #0]
 80083cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083d0:	6028      	str	r0, [r5, #0]
 80083d2:	4638      	mov	r0, r7
 80083d4:	b003      	add	sp, #12
 80083d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083de:	e7d5      	b.n	800838c <__d2b+0x1e>
 80083e0:	6179      	str	r1, [r7, #20]
 80083e2:	e7e7      	b.n	80083b4 <__d2b+0x46>
 80083e4:	a801      	add	r0, sp, #4
 80083e6:	f7ff fddb 	bl	8007fa0 <__lo0bits>
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	2101      	movs	r1, #1
 80083f0:	6139      	str	r1, [r7, #16]
 80083f2:	3020      	adds	r0, #32
 80083f4:	e7e5      	b.n	80083c2 <__d2b+0x54>
 80083f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80083fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083fe:	6030      	str	r0, [r6, #0]
 8008400:	6918      	ldr	r0, [r3, #16]
 8008402:	f7ff fdae 	bl	8007f62 <__hi0bits>
 8008406:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800840a:	e7e1      	b.n	80083d0 <__d2b+0x62>

0800840c <_calloc_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	fb02 f401 	mul.w	r4, r2, r1
 8008412:	4621      	mov	r1, r4
 8008414:	f7fe fa66 	bl	80068e4 <_malloc_r>
 8008418:	4605      	mov	r5, r0
 800841a:	b118      	cbz	r0, 8008424 <_calloc_r+0x18>
 800841c:	4622      	mov	r2, r4
 800841e:	2100      	movs	r1, #0
 8008420:	f7fe fa0a 	bl	8006838 <memset>
 8008424:	4628      	mov	r0, r5
 8008426:	bd38      	pop	{r3, r4, r5, pc}

08008428 <__ssputs_r>:
 8008428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	688e      	ldr	r6, [r1, #8]
 800842e:	429e      	cmp	r6, r3
 8008430:	4682      	mov	sl, r0
 8008432:	460c      	mov	r4, r1
 8008434:	4690      	mov	r8, r2
 8008436:	4699      	mov	r9, r3
 8008438:	d837      	bhi.n	80084aa <__ssputs_r+0x82>
 800843a:	898a      	ldrh	r2, [r1, #12]
 800843c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008440:	d031      	beq.n	80084a6 <__ssputs_r+0x7e>
 8008442:	6825      	ldr	r5, [r4, #0]
 8008444:	6909      	ldr	r1, [r1, #16]
 8008446:	1a6f      	subs	r7, r5, r1
 8008448:	6965      	ldr	r5, [r4, #20]
 800844a:	2302      	movs	r3, #2
 800844c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008450:	fb95 f5f3 	sdiv	r5, r5, r3
 8008454:	f109 0301 	add.w	r3, r9, #1
 8008458:	443b      	add	r3, r7
 800845a:	429d      	cmp	r5, r3
 800845c:	bf38      	it	cc
 800845e:	461d      	movcc	r5, r3
 8008460:	0553      	lsls	r3, r2, #21
 8008462:	d530      	bpl.n	80084c6 <__ssputs_r+0x9e>
 8008464:	4629      	mov	r1, r5
 8008466:	f7fe fa3d 	bl	80068e4 <_malloc_r>
 800846a:	4606      	mov	r6, r0
 800846c:	b950      	cbnz	r0, 8008484 <__ssputs_r+0x5c>
 800846e:	230c      	movs	r3, #12
 8008470:	f8ca 3000 	str.w	r3, [sl]
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	f04f 30ff 	mov.w	r0, #4294967295
 8008480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008484:	463a      	mov	r2, r7
 8008486:	6921      	ldr	r1, [r4, #16]
 8008488:	f7ff fcd8 	bl	8007e3c <memcpy>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	6126      	str	r6, [r4, #16]
 800849a:	6165      	str	r5, [r4, #20]
 800849c:	443e      	add	r6, r7
 800849e:	1bed      	subs	r5, r5, r7
 80084a0:	6026      	str	r6, [r4, #0]
 80084a2:	60a5      	str	r5, [r4, #8]
 80084a4:	464e      	mov	r6, r9
 80084a6:	454e      	cmp	r6, r9
 80084a8:	d900      	bls.n	80084ac <__ssputs_r+0x84>
 80084aa:	464e      	mov	r6, r9
 80084ac:	4632      	mov	r2, r6
 80084ae:	4641      	mov	r1, r8
 80084b0:	6820      	ldr	r0, [r4, #0]
 80084b2:	f000 f91d 	bl	80086f0 <memmove>
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	1b9b      	subs	r3, r3, r6
 80084ba:	60a3      	str	r3, [r4, #8]
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	441e      	add	r6, r3
 80084c0:	6026      	str	r6, [r4, #0]
 80084c2:	2000      	movs	r0, #0
 80084c4:	e7dc      	b.n	8008480 <__ssputs_r+0x58>
 80084c6:	462a      	mov	r2, r5
 80084c8:	f000 f92b 	bl	8008722 <_realloc_r>
 80084cc:	4606      	mov	r6, r0
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d1e2      	bne.n	8008498 <__ssputs_r+0x70>
 80084d2:	6921      	ldr	r1, [r4, #16]
 80084d4:	4650      	mov	r0, sl
 80084d6:	f7fe f9b7 	bl	8006848 <_free_r>
 80084da:	e7c8      	b.n	800846e <__ssputs_r+0x46>

080084dc <_svfiprintf_r>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	461d      	mov	r5, r3
 80084e2:	898b      	ldrh	r3, [r1, #12]
 80084e4:	061f      	lsls	r7, r3, #24
 80084e6:	b09d      	sub	sp, #116	; 0x74
 80084e8:	4680      	mov	r8, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	4616      	mov	r6, r2
 80084ee:	d50f      	bpl.n	8008510 <_svfiprintf_r+0x34>
 80084f0:	690b      	ldr	r3, [r1, #16]
 80084f2:	b96b      	cbnz	r3, 8008510 <_svfiprintf_r+0x34>
 80084f4:	2140      	movs	r1, #64	; 0x40
 80084f6:	f7fe f9f5 	bl	80068e4 <_malloc_r>
 80084fa:	6020      	str	r0, [r4, #0]
 80084fc:	6120      	str	r0, [r4, #16]
 80084fe:	b928      	cbnz	r0, 800850c <_svfiprintf_r+0x30>
 8008500:	230c      	movs	r3, #12
 8008502:	f8c8 3000 	str.w	r3, [r8]
 8008506:	f04f 30ff 	mov.w	r0, #4294967295
 800850a:	e0c8      	b.n	800869e <_svfiprintf_r+0x1c2>
 800850c:	2340      	movs	r3, #64	; 0x40
 800850e:	6163      	str	r3, [r4, #20]
 8008510:	2300      	movs	r3, #0
 8008512:	9309      	str	r3, [sp, #36]	; 0x24
 8008514:	2320      	movs	r3, #32
 8008516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800851a:	2330      	movs	r3, #48	; 0x30
 800851c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008520:	9503      	str	r5, [sp, #12]
 8008522:	f04f 0b01 	mov.w	fp, #1
 8008526:	4637      	mov	r7, r6
 8008528:	463d      	mov	r5, r7
 800852a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800852e:	b10b      	cbz	r3, 8008534 <_svfiprintf_r+0x58>
 8008530:	2b25      	cmp	r3, #37	; 0x25
 8008532:	d13e      	bne.n	80085b2 <_svfiprintf_r+0xd6>
 8008534:	ebb7 0a06 	subs.w	sl, r7, r6
 8008538:	d00b      	beq.n	8008552 <_svfiprintf_r+0x76>
 800853a:	4653      	mov	r3, sl
 800853c:	4632      	mov	r2, r6
 800853e:	4621      	mov	r1, r4
 8008540:	4640      	mov	r0, r8
 8008542:	f7ff ff71 	bl	8008428 <__ssputs_r>
 8008546:	3001      	adds	r0, #1
 8008548:	f000 80a4 	beq.w	8008694 <_svfiprintf_r+0x1b8>
 800854c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854e:	4453      	add	r3, sl
 8008550:	9309      	str	r3, [sp, #36]	; 0x24
 8008552:	783b      	ldrb	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 809d 	beq.w	8008694 <_svfiprintf_r+0x1b8>
 800855a:	2300      	movs	r3, #0
 800855c:	f04f 32ff 	mov.w	r2, #4294967295
 8008560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	9307      	str	r3, [sp, #28]
 8008568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800856c:	931a      	str	r3, [sp, #104]	; 0x68
 800856e:	462f      	mov	r7, r5
 8008570:	2205      	movs	r2, #5
 8008572:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008576:	4850      	ldr	r0, [pc, #320]	; (80086b8 <_svfiprintf_r+0x1dc>)
 8008578:	f7f7 feba 	bl	80002f0 <memchr>
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	b9d0      	cbnz	r0, 80085b6 <_svfiprintf_r+0xda>
 8008580:	06d9      	lsls	r1, r3, #27
 8008582:	bf44      	itt	mi
 8008584:	2220      	movmi	r2, #32
 8008586:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800858a:	071a      	lsls	r2, r3, #28
 800858c:	bf44      	itt	mi
 800858e:	222b      	movmi	r2, #43	; 0x2b
 8008590:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008594:	782a      	ldrb	r2, [r5, #0]
 8008596:	2a2a      	cmp	r2, #42	; 0x2a
 8008598:	d015      	beq.n	80085c6 <_svfiprintf_r+0xea>
 800859a:	9a07      	ldr	r2, [sp, #28]
 800859c:	462f      	mov	r7, r5
 800859e:	2000      	movs	r0, #0
 80085a0:	250a      	movs	r5, #10
 80085a2:	4639      	mov	r1, r7
 80085a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085a8:	3b30      	subs	r3, #48	; 0x30
 80085aa:	2b09      	cmp	r3, #9
 80085ac:	d94d      	bls.n	800864a <_svfiprintf_r+0x16e>
 80085ae:	b1b8      	cbz	r0, 80085e0 <_svfiprintf_r+0x104>
 80085b0:	e00f      	b.n	80085d2 <_svfiprintf_r+0xf6>
 80085b2:	462f      	mov	r7, r5
 80085b4:	e7b8      	b.n	8008528 <_svfiprintf_r+0x4c>
 80085b6:	4a40      	ldr	r2, [pc, #256]	; (80086b8 <_svfiprintf_r+0x1dc>)
 80085b8:	1a80      	subs	r0, r0, r2
 80085ba:	fa0b f000 	lsl.w	r0, fp, r0
 80085be:	4318      	orrs	r0, r3
 80085c0:	9004      	str	r0, [sp, #16]
 80085c2:	463d      	mov	r5, r7
 80085c4:	e7d3      	b.n	800856e <_svfiprintf_r+0x92>
 80085c6:	9a03      	ldr	r2, [sp, #12]
 80085c8:	1d11      	adds	r1, r2, #4
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	9103      	str	r1, [sp, #12]
 80085ce:	2a00      	cmp	r2, #0
 80085d0:	db01      	blt.n	80085d6 <_svfiprintf_r+0xfa>
 80085d2:	9207      	str	r2, [sp, #28]
 80085d4:	e004      	b.n	80085e0 <_svfiprintf_r+0x104>
 80085d6:	4252      	negs	r2, r2
 80085d8:	f043 0302 	orr.w	r3, r3, #2
 80085dc:	9207      	str	r2, [sp, #28]
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	783b      	ldrb	r3, [r7, #0]
 80085e2:	2b2e      	cmp	r3, #46	; 0x2e
 80085e4:	d10c      	bne.n	8008600 <_svfiprintf_r+0x124>
 80085e6:	787b      	ldrb	r3, [r7, #1]
 80085e8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ea:	d133      	bne.n	8008654 <_svfiprintf_r+0x178>
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	1d1a      	adds	r2, r3, #4
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	9203      	str	r2, [sp, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	bfb8      	it	lt
 80085f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085fc:	3702      	adds	r7, #2
 80085fe:	9305      	str	r3, [sp, #20]
 8008600:	4d2e      	ldr	r5, [pc, #184]	; (80086bc <_svfiprintf_r+0x1e0>)
 8008602:	7839      	ldrb	r1, [r7, #0]
 8008604:	2203      	movs	r2, #3
 8008606:	4628      	mov	r0, r5
 8008608:	f7f7 fe72 	bl	80002f0 <memchr>
 800860c:	b138      	cbz	r0, 800861e <_svfiprintf_r+0x142>
 800860e:	2340      	movs	r3, #64	; 0x40
 8008610:	1b40      	subs	r0, r0, r5
 8008612:	fa03 f000 	lsl.w	r0, r3, r0
 8008616:	9b04      	ldr	r3, [sp, #16]
 8008618:	4303      	orrs	r3, r0
 800861a:	3701      	adds	r7, #1
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	7839      	ldrb	r1, [r7, #0]
 8008620:	4827      	ldr	r0, [pc, #156]	; (80086c0 <_svfiprintf_r+0x1e4>)
 8008622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008626:	2206      	movs	r2, #6
 8008628:	1c7e      	adds	r6, r7, #1
 800862a:	f7f7 fe61 	bl	80002f0 <memchr>
 800862e:	2800      	cmp	r0, #0
 8008630:	d038      	beq.n	80086a4 <_svfiprintf_r+0x1c8>
 8008632:	4b24      	ldr	r3, [pc, #144]	; (80086c4 <_svfiprintf_r+0x1e8>)
 8008634:	bb13      	cbnz	r3, 800867c <_svfiprintf_r+0x1a0>
 8008636:	9b03      	ldr	r3, [sp, #12]
 8008638:	3307      	adds	r3, #7
 800863a:	f023 0307 	bic.w	r3, r3, #7
 800863e:	3308      	adds	r3, #8
 8008640:	9303      	str	r3, [sp, #12]
 8008642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008644:	444b      	add	r3, r9
 8008646:	9309      	str	r3, [sp, #36]	; 0x24
 8008648:	e76d      	b.n	8008526 <_svfiprintf_r+0x4a>
 800864a:	fb05 3202 	mla	r2, r5, r2, r3
 800864e:	2001      	movs	r0, #1
 8008650:	460f      	mov	r7, r1
 8008652:	e7a6      	b.n	80085a2 <_svfiprintf_r+0xc6>
 8008654:	2300      	movs	r3, #0
 8008656:	3701      	adds	r7, #1
 8008658:	9305      	str	r3, [sp, #20]
 800865a:	4619      	mov	r1, r3
 800865c:	250a      	movs	r5, #10
 800865e:	4638      	mov	r0, r7
 8008660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008664:	3a30      	subs	r2, #48	; 0x30
 8008666:	2a09      	cmp	r2, #9
 8008668:	d903      	bls.n	8008672 <_svfiprintf_r+0x196>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0c8      	beq.n	8008600 <_svfiprintf_r+0x124>
 800866e:	9105      	str	r1, [sp, #20]
 8008670:	e7c6      	b.n	8008600 <_svfiprintf_r+0x124>
 8008672:	fb05 2101 	mla	r1, r5, r1, r2
 8008676:	2301      	movs	r3, #1
 8008678:	4607      	mov	r7, r0
 800867a:	e7f0      	b.n	800865e <_svfiprintf_r+0x182>
 800867c:	ab03      	add	r3, sp, #12
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	4622      	mov	r2, r4
 8008682:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <_svfiprintf_r+0x1ec>)
 8008684:	a904      	add	r1, sp, #16
 8008686:	4640      	mov	r0, r8
 8008688:	f7fe fa0e 	bl	8006aa8 <_printf_float>
 800868c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008690:	4681      	mov	r9, r0
 8008692:	d1d6      	bne.n	8008642 <_svfiprintf_r+0x166>
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	065b      	lsls	r3, r3, #25
 8008698:	f53f af35 	bmi.w	8008506 <_svfiprintf_r+0x2a>
 800869c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800869e:	b01d      	add	sp, #116	; 0x74
 80086a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a4:	ab03      	add	r3, sp, #12
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	4622      	mov	r2, r4
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <_svfiprintf_r+0x1ec>)
 80086ac:	a904      	add	r1, sp, #16
 80086ae:	4640      	mov	r0, r8
 80086b0:	f7fe fc9c 	bl	8006fec <_printf_i>
 80086b4:	e7ea      	b.n	800868c <_svfiprintf_r+0x1b0>
 80086b6:	bf00      	nop
 80086b8:	08008a1c 	.word	0x08008a1c
 80086bc:	08008a22 	.word	0x08008a22
 80086c0:	08008a26 	.word	0x08008a26
 80086c4:	08006aa9 	.word	0x08006aa9
 80086c8:	08008429 	.word	0x08008429

080086cc <__ascii_mbtowc>:
 80086cc:	b082      	sub	sp, #8
 80086ce:	b901      	cbnz	r1, 80086d2 <__ascii_mbtowc+0x6>
 80086d0:	a901      	add	r1, sp, #4
 80086d2:	b142      	cbz	r2, 80086e6 <__ascii_mbtowc+0x1a>
 80086d4:	b14b      	cbz	r3, 80086ea <__ascii_mbtowc+0x1e>
 80086d6:	7813      	ldrb	r3, [r2, #0]
 80086d8:	600b      	str	r3, [r1, #0]
 80086da:	7812      	ldrb	r2, [r2, #0]
 80086dc:	1c10      	adds	r0, r2, #0
 80086de:	bf18      	it	ne
 80086e0:	2001      	movne	r0, #1
 80086e2:	b002      	add	sp, #8
 80086e4:	4770      	bx	lr
 80086e6:	4610      	mov	r0, r2
 80086e8:	e7fb      	b.n	80086e2 <__ascii_mbtowc+0x16>
 80086ea:	f06f 0001 	mvn.w	r0, #1
 80086ee:	e7f8      	b.n	80086e2 <__ascii_mbtowc+0x16>

080086f0 <memmove>:
 80086f0:	4288      	cmp	r0, r1
 80086f2:	b510      	push	{r4, lr}
 80086f4:	eb01 0302 	add.w	r3, r1, r2
 80086f8:	d807      	bhi.n	800870a <memmove+0x1a>
 80086fa:	1e42      	subs	r2, r0, #1
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d00a      	beq.n	8008716 <memmove+0x26>
 8008700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008704:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008708:	e7f8      	b.n	80086fc <memmove+0xc>
 800870a:	4283      	cmp	r3, r0
 800870c:	d9f5      	bls.n	80086fa <memmove+0xa>
 800870e:	1881      	adds	r1, r0, r2
 8008710:	1ad2      	subs	r2, r2, r3
 8008712:	42d3      	cmn	r3, r2
 8008714:	d100      	bne.n	8008718 <memmove+0x28>
 8008716:	bd10      	pop	{r4, pc}
 8008718:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800871c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008720:	e7f7      	b.n	8008712 <memmove+0x22>

08008722 <_realloc_r>:
 8008722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008724:	4607      	mov	r7, r0
 8008726:	4614      	mov	r4, r2
 8008728:	460e      	mov	r6, r1
 800872a:	b921      	cbnz	r1, 8008736 <_realloc_r+0x14>
 800872c:	4611      	mov	r1, r2
 800872e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008732:	f7fe b8d7 	b.w	80068e4 <_malloc_r>
 8008736:	b922      	cbnz	r2, 8008742 <_realloc_r+0x20>
 8008738:	f7fe f886 	bl	8006848 <_free_r>
 800873c:	4625      	mov	r5, r4
 800873e:	4628      	mov	r0, r5
 8008740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008742:	f000 f821 	bl	8008788 <_malloc_usable_size_r>
 8008746:	42a0      	cmp	r0, r4
 8008748:	d20f      	bcs.n	800876a <_realloc_r+0x48>
 800874a:	4621      	mov	r1, r4
 800874c:	4638      	mov	r0, r7
 800874e:	f7fe f8c9 	bl	80068e4 <_malloc_r>
 8008752:	4605      	mov	r5, r0
 8008754:	2800      	cmp	r0, #0
 8008756:	d0f2      	beq.n	800873e <_realloc_r+0x1c>
 8008758:	4631      	mov	r1, r6
 800875a:	4622      	mov	r2, r4
 800875c:	f7ff fb6e 	bl	8007e3c <memcpy>
 8008760:	4631      	mov	r1, r6
 8008762:	4638      	mov	r0, r7
 8008764:	f7fe f870 	bl	8006848 <_free_r>
 8008768:	e7e9      	b.n	800873e <_realloc_r+0x1c>
 800876a:	4635      	mov	r5, r6
 800876c:	e7e7      	b.n	800873e <_realloc_r+0x1c>

0800876e <__ascii_wctomb>:
 800876e:	b149      	cbz	r1, 8008784 <__ascii_wctomb+0x16>
 8008770:	2aff      	cmp	r2, #255	; 0xff
 8008772:	bf85      	ittet	hi
 8008774:	238a      	movhi	r3, #138	; 0x8a
 8008776:	6003      	strhi	r3, [r0, #0]
 8008778:	700a      	strbls	r2, [r1, #0]
 800877a:	f04f 30ff 	movhi.w	r0, #4294967295
 800877e:	bf98      	it	ls
 8008780:	2001      	movls	r0, #1
 8008782:	4770      	bx	lr
 8008784:	4608      	mov	r0, r1
 8008786:	4770      	bx	lr

08008788 <_malloc_usable_size_r>:
 8008788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878c:	1f18      	subs	r0, r3, #4
 800878e:	2b00      	cmp	r3, #0
 8008790:	bfbc      	itt	lt
 8008792:	580b      	ldrlt	r3, [r1, r0]
 8008794:	18c0      	addlt	r0, r0, r3
 8008796:	4770      	bx	lr

08008798 <sqrtf>:
 8008798:	b500      	push	{lr}
 800879a:	ed2d 8b02 	vpush	{d8}
 800879e:	b08b      	sub	sp, #44	; 0x2c
 80087a0:	eeb0 8a40 	vmov.f32	s16, s0
 80087a4:	f000 f848 	bl	8008838 <__ieee754_sqrtf>
 80087a8:	4b21      	ldr	r3, [pc, #132]	; (8008830 <sqrtf+0x98>)
 80087aa:	f993 3000 	ldrsb.w	r3, [r3]
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	d028      	beq.n	8008804 <sqrtf+0x6c>
 80087b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80087b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ba:	d623      	bvs.n	8008804 <sqrtf+0x6c>
 80087bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80087c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c4:	d51e      	bpl.n	8008804 <sqrtf+0x6c>
 80087c6:	2201      	movs	r2, #1
 80087c8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80087cc:	9200      	str	r2, [sp, #0]
 80087ce:	4a19      	ldr	r2, [pc, #100]	; (8008834 <sqrtf+0x9c>)
 80087d0:	9201      	str	r2, [sp, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	9208      	str	r2, [sp, #32]
 80087d6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80087da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80087de:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8008828 <sqrtf+0x90>
 80087e2:	b9a3      	cbnz	r3, 800880e <sqrtf+0x76>
 80087e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80087e8:	4668      	mov	r0, sp
 80087ea:	f000 f828 	bl	800883e <matherr>
 80087ee:	b1a0      	cbz	r0, 800881a <sqrtf+0x82>
 80087f0:	9b08      	ldr	r3, [sp, #32]
 80087f2:	b11b      	cbz	r3, 80087fc <sqrtf+0x64>
 80087f4:	f7fd ffee 	bl	80067d4 <__errno>
 80087f8:	9b08      	ldr	r3, [sp, #32]
 80087fa:	6003      	str	r3, [r0, #0]
 80087fc:	ed9d 0b06 	vldr	d0, [sp, #24]
 8008800:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008804:	b00b      	add	sp, #44	; 0x2c
 8008806:	ecbd 8b02 	vpop	{d8}
 800880a:	f85d fb04 	ldr.w	pc, [sp], #4
 800880e:	2b02      	cmp	r3, #2
 8008810:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8008814:	ed8d 6b06 	vstr	d6, [sp, #24]
 8008818:	d1e6      	bne.n	80087e8 <sqrtf+0x50>
 800881a:	f7fd ffdb 	bl	80067d4 <__errno>
 800881e:	2321      	movs	r3, #33	; 0x21
 8008820:	6003      	str	r3, [r0, #0]
 8008822:	e7e5      	b.n	80087f0 <sqrtf+0x58>
 8008824:	f3af 8000 	nop.w
	...
 8008830:	200001e0 	.word	0x200001e0
 8008834:	08008b38 	.word	0x08008b38

08008838 <__ieee754_sqrtf>:
 8008838:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800883c:	4770      	bx	lr

0800883e <matherr>:
 800883e:	2000      	movs	r0, #0
 8008840:	4770      	bx	lr
	...

08008844 <_init>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr

08008850 <_fini>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr
