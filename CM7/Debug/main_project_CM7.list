
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08009a48  08009a48  00019a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e18  08009e18  00019e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e20  08009e20  00019e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  08009e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009140  240001e4  0800a00c  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24009324  0800a00c  00029324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021d8a  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003856  00000000  00000000  00041f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012d8  00000000  00000000  000457f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001158  00000000  00000000  00046ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b055  00000000  00000000  00047c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00012a5f  00000000  00000000  00082c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001841d2  00000000  00000000  000956dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  002198ae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005664  00000000  00000000  00219998  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000008d6  00000000  00000000  0021effc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009a2c 	.word	0x08009a2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	08009a2c 	.word	0x08009a2c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xc4>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <SystemInit+0xc4>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemInit+0xc4>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemInit+0xc4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <SystemInit+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <SystemInit+0xc8>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemInit+0xc8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemInit+0xc8>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4924      	ldr	r1, [pc, #144]	; (8000758 <SystemInit+0xc8>)
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <SystemInit+0xcc>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemInit+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <SystemInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <SystemInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <SystemInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <SystemInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemInit+0xc8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <SystemInit+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <SystemInit+0xc8>)
 8000706:	2200      	movs	r2, #0
 8000708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <SystemInit+0xc8>)
 800070c:	2200      	movs	r2, #0
 800070e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <SystemInit+0xc8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a10      	ldr	r2, [pc, #64]	; (8000758 <SystemInit+0xc8>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <SystemInit+0xc8>)
 800071e:	2200      	movs	r2, #0
 8000720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0xd0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0xd0>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <SystemInit+0xd4>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <SystemInit+0xd8>)
 8000734:	4013      	ands	r3, r2
 8000736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800073a:	d202      	bcs.n	8000742 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <SystemInit+0xdc>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SystemInit+0xc4>)
 8000744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000748:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00
 8000758:	58024400 	.word	0x58024400
 800075c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000760:	580000c0 	.word	0x580000c0
 8000764:	5c001000 	.word	0x5c001000
 8000768:	ffff0000 	.word	0xffff0000
 800076c:	51008108 	.word	0x51008108

08000770 <inst_absolute>:

extern uint16_t frameSize;

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	int j = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	e031      	b.n	80007e8 <inst_absolute+0x78>
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	ed93 7a00 	vldr	s14, [r3]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3301      	adds	r3, #1
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	edd3 6a00 	vldr	s13, [r3]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3301      	adds	r3, #1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	edd3 7a00 	vldr	s15, [r3]
 80007bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	18d4      	adds	r4, r2, r3
 80007cc:	eeb0 0a67 	vmov.f32	s0, s15
 80007d0:	f008 ff52 	bl	8009678 <sqrtf>
 80007d4:	eef0 7a40 	vmov.f32	s15, s0
 80007d8:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	3302      	adds	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <inst_absolute+0x8c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbc7      	blt.n	8000784 <inst_absolute+0x14>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	08009b6c 	.word	0x08009b6c

08000800 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	int j = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	e020      	b.n	8000856 <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3301      	adds	r3, #1
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	ed93 7a00 	vldr	s14, [r3]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	18d4      	adds	r4, r2, r3
 8000836:	eef0 0a47 	vmov.f32	s1, s14
 800083a:	eeb0 0a67 	vmov.f32	s0, s15
 800083e:	f008 ff17 	bl	8009670 <atan2f>
 8000842:	eef0 7a40 	vmov.f32	s15, s0
 8000846:	edc4 7a00 	vstr	s15, [r4]
		j++;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3302      	adds	r3, #2
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <inst_phase+0x6c>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	dbd8      	blt.n	8000814 <inst_phase+0x14>
	}
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	bf00      	nop
 800086c:	08009b6c 	.word	0x08009b6c

08000870 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	        end
	    end
	end
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = M_PI;
 800087e:	4b48      	ldr	r3, [pc, #288]	; (80009a0 <unwrap+0x130>)
 8000880:	60fb      	str	r3, [r7, #12]
	float32_t diff = 0.0f;
 8000882:	f04f 0300 	mov.w	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < (frameSize - 1); i++){
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	e052      	b.n	8000934 <unwrap+0xc4>
		out[i] = in[i] + 2*M_PI*k;
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800089e:	8afb      	ldrh	r3, [r7, #22]
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008a8:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000998 <unwrap+0x128>
 80008ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80008b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008c0:	edc3 7a00 	vstr	s15, [r3]
		diff = fabsf(in[i+1] - in[i]);
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	3301      	adds	r3, #1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	ed93 7a00 	vldr	s14, [r3]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	edd3 7a00 	vldr	s15, [r3]
 80008de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e2:	eef0 7ae7 	vabs.f32	s15, s15
 80008e6:	edc7 7a02 	vstr	s15, [r7, #8]
		if(diff > alpha){
 80008ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80008ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80008f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fa:	dd18      	ble.n	800092e <unwrap+0xbe>
			if(in[i+1] < in[i]){
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	3301      	adds	r3, #1
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	ed93 7a00 	vldr	s14, [r3]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	edd3 7a00 	vldr	s15, [r3]
 8000916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800091a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091e:	d503      	bpl.n	8000928 <unwrap+0xb8>
				k++;
 8000920:	8afb      	ldrh	r3, [r7, #22]
 8000922:	3301      	adds	r3, #1
 8000924:	82fb      	strh	r3, [r7, #22]
 8000926:	e002      	b.n	800092e <unwrap+0xbe>
			} else {
				k--;
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	3b01      	subs	r3, #1
 800092c:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	3301      	adds	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <unwrap+0x134>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	dba6      	blt.n	800088e <unwrap+0x1e>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <unwrap+0x134>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800094a:	4413      	add	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800095a:	8afb      	ldrh	r3, [r7, #22]
 800095c:	ee07 3a90 	vmov	s15, r3
 8000960:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000964:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000998 <unwrap+0x128>
 8000968:	ee27 7b05 	vmul.f64	d7, d7, d5
 800096c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <unwrap+0x134>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800097a:	4413      	add	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000986:	edc3 7a00 	vstr	s15, [r3]
}
 800098a:	bf00      	nop
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	54442d18 	.word	0x54442d18
 800099c:	401921fb 	.word	0x401921fb
 80009a0:	40490fdb 	.word	0x40490fdb
 80009a4:	08009b6c 	.word	0x08009b6c

080009a8 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <inst_frequency+0x158>)
 80009b4:	f242 0210 	movw	r2, #8208	; 0x2010
 80009b8:	443a      	add	r2, r7
 80009ba:	4413      	add	r3, r2
 80009bc:	6018      	str	r0, [r3, #0]
 80009be:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <inst_frequency+0x15c>)
 80009c0:	f242 0210 	movw	r2, #8208	; 0x2010
 80009c4:	443a      	add	r2, r7
 80009c6:	4413      	add	r3, r2
 80009c8:	6019      	str	r1, [r3, #0]
	float32_t phase[1024] = {0};
 80009ca:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <inst_frequency+0x160>)
 80009cc:	f242 0210 	movw	r2, #8208	; 0x2010
 80009d0:	443a      	add	r2, r7
 80009d2:	4413      	add	r3, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	461a      	mov	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f006 fe97 	bl	8007710 <memset>
	float32_t unwrapped_phase[1024] = {0};
 80009e2:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <inst_frequency+0x164>)
 80009e4:	f242 0210 	movw	r2, #8208	; 0x2010
 80009e8:	443a      	add	r2, r7
 80009ea:	4413      	add	r3, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f2:	461a      	mov	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f006 fe8b 	bl	8007710 <memset>
	float32_t C = 1 / M_TWOPI;
 80009fa:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <inst_frequency+0x168>)
 80009fc:	f242 0208 	movw	r2, #8200	; 0x2008
 8000a00:	443a      	add	r2, r7
 8000a02:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 8000a04:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <inst_frequency+0x160>)
 8000a06:	f242 0310 	movw	r3, #8208	; 0x2010
 8000a0a:	443b      	add	r3, r7
 8000a0c:	441a      	add	r2, r3
 8000a0e:	4b3c      	ldr	r3, [pc, #240]	; (8000b00 <inst_frequency+0x158>)
 8000a10:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a14:	4439      	add	r1, r7
 8000a16:	440b      	add	r3, r1
 8000a18:	4611      	mov	r1, r2
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	f7ff fef0 	bl	8000800 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8000a20:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <inst_frequency+0x164>)
 8000a22:	f242 0310 	movw	r3, #8208	; 0x2010
 8000a26:	443b      	add	r3, r7
 8000a28:	441a      	add	r2, r3
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <inst_frequency+0x160>)
 8000a2c:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a30:	4439      	add	r1, r7
 8000a32:	440b      	add	r3, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff1a 	bl	8000870 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000a42:	443a      	add	r2, r7
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e03a      	b.n	8000abe <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 8000a48:	f242 030c 	movw	r3, #8204	; 0x200c
 8000a4c:	443b      	add	r3, r7
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <inst_frequency+0x164>)
 8000a54:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a58:	4439      	add	r1, r7
 8000a5a:	440b      	add	r3, r1
 8000a5c:	0092      	lsls	r2, r2, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	ed93 7a00 	vldr	s14, [r3]
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <inst_frequency+0x164>)
 8000a66:	f242 0210 	movw	r2, #8208	; 0x2010
 8000a6a:	443a      	add	r2, r7
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000a72:	443a      	add	r2, r7
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	edd3 7a00 	vldr	s15, [r3]
 8000a7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a82:	f242 030c 	movw	r3, #8204	; 0x200c
 8000a86:	443b      	add	r3, r7
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	009a      	lsls	r2, r3, #2
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <inst_frequency+0x15c>)
 8000a8e:	f242 0110 	movw	r1, #8208	; 0x2010
 8000a92:	4439      	add	r1, r7
 8000a94:	440b      	add	r3, r1
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	f242 0208 	movw	r2, #8200	; 0x2008
 8000a9e:	443a      	add	r2, r7
 8000aa0:	edd2 7a00 	vldr	s15, [r2]
 8000aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8000aac:	f242 030c 	movw	r3, #8204	; 0x200c
 8000ab0:	443b      	add	r3, r7
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f242 020c 	movw	r2, #8204	; 0x200c
 8000aba:	443a      	add	r2, r7
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <inst_frequency+0x16c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ac8:	443a      	add	r2, r7
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbbb      	blt.n	8000a48 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <inst_frequency+0x16c>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000ada:	4413      	add	r3, r2
 8000adc:	009a      	lsls	r2, r3, #2
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <inst_frequency+0x15c>)
 8000ae0:	f242 0110 	movw	r1, #8208	; 0x2010
 8000ae4:	4439      	add	r1, r7
 8000ae6:	440b      	add	r3, r1
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	ffffdff4 	.word	0xffffdff4
 8000b04:	ffffdff0 	.word	0xffffdff0
 8000b08:	ffffeff8 	.word	0xffffeff8
 8000b0c:	ffffdff8 	.word	0xffffdff8
 8000b10:	3e22f983 	.word	0x3e22f983
 8000b14:	08009b6c 	.word	0x08009b6c

08000b18 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 fdd9 	bl	80076f0 <malloc>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 fdd1 	bl	80076f0 <malloc>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	61bb      	str	r3, [r7, #24]
	inst_absolute(in, &absolute[0]);
 8000b52:	69f9      	ldr	r1, [r7, #28]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fe0b 	bl	8000770 <inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	f107 0210 	add.w	r2, r7, #16
 8000b68:	69f8      	ldr	r0, [r7, #28]
 8000b6a:	f006 fd31 	bl	80075d0 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
 8000b72:	e012      	b.n	8000b9a <inst_centralized_normalized_absolute+0x82>
		normalized[a] = absolute[a] / max;
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	edd3 6a00 	vldr	s13, [r3]
 8000b80:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b90:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	3301      	adds	r3, #1
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	dbe6      	blt.n	8000b74 <inst_centralized_normalized_absolute+0x5c>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	69b8      	ldr	r0, [r7, #24]
 8000bb4:	f006 fcd6 	bl	8007564 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
 8000bbc:	e016      	b.n	8000bec <inst_centralized_normalized_absolute+0xd4>
		out[i] = normalized[i] / mean - 1;
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	edd3 6a00 	vldr	s13, [r3]
 8000bca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000be2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	3301      	adds	r3, #1
 8000bea:	623b      	str	r3, [r7, #32]
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <inst_centralized_normalized_absolute+0xf4>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	dbe2      	blt.n	8000bbe <inst_centralized_normalized_absolute+0xa6>
	}
	free(absolute);
 8000bf8:	69f8      	ldr	r0, [r7, #28]
 8000bfa:	f006 fd81 	bl	8007700 <free>
	free(normalized);
 8000bfe:	69b8      	ldr	r0, [r7, #24]
 8000c00:	f006 fd7e 	bl	8007700 <free>
}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	08009b6c 	.word	0x08009b6c

08000c10 <mean_of_squared>:

void mean(float32_t in[], float32_t *out) {
	arm_mean_f32(&in[0], frameSize, out);
}

void mean_of_squared(float32_t in[], float32_t *out) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	float32_t result;
	arm_power_f32(&in[0], frameSize, &result);
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <mean_of_squared+0x40>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	461a      	mov	r2, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f006 fc62 	bl	80074f0 <arm_power_f32>
	*out = result / (float32_t) frameSize;
 8000c2c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <mean_of_squared+0x40>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	edc3 7a00 	vstr	s15, [r3]
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08009b6c 	.word	0x08009b6c

08000c54 <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <std_dev+0x20>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f006 fbca 	bl	8007400 <arm_std_f32>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08009b6c 	.word	0x08009b6c

08000c78 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a49      	ldr	r2, [pc, #292]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a42      	ldr	r2, [pc, #264]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a3a      	ldr	r2, [pc, #232]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	4a24      	ldr	r2, [pc, #144]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_GPIO_Init+0x144>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <MX_GPIO_Init+0x148>)
 8000d4a:	f001 fe63 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <MX_GPIO_Init+0x14c>)
 8000d54:	f001 fe5e 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d58:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <MX_GPIO_Init+0x148>)
 8000d72:	f001 fc9f 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d76:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_GPIO_Init+0x150>)
 8000d94:	f001 fc8e 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_GPIO_Init+0x14c>)
 8000db0:	f001 fc80 	bl	80026b4 <HAL_GPIO_Init>

}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58020400 	.word	0x58020400
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	58020000 	.word	0x58020000

08000dcc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd4:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <SCB_EnableICache+0x3c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000de0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000de4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <SCB_EnableICache+0x3c>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <SCB_EnableICache+0x3c>)
 8000dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000df8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e24:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	0b5b      	lsrs	r3, r3, #13
 8000e2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e2e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	08db      	lsrs	r3, r3, #3
 8000e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e38:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	015a      	lsls	r2, r3, #5
 8000e3e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e42:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e48:	490f      	ldr	r1, [pc, #60]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1ef      	bne.n	8000e3a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	60fa      	str	r2, [r7, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e5      	bne.n	8000e30 <SCB_EnableDCache+0x24>
 8000e64:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <SCB_EnableDCache+0x7c>)
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6153      	str	r3, [r2, #20]
 8000e74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e78:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	// char hello_world[50] = {"\r\nHello World!\r\n"};
	uint32_t counter = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
	float32_t mean_of_squared_value = 0.0f, std_dev_value = 0.0f;
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000ea2:	f7ff ff93 	bl	8000dcc <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000ea6:	f7ff ffb1 	bl	8000e0c <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eae:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000eb0:	bf00      	nop
 8000eb2:	4ba8      	ldr	r3, [pc, #672]	; (8001154 <main+0x2c8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d004      	beq.n	8000ec8 <main+0x3c>
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	617a      	str	r2, [r7, #20]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dcf4      	bgt.n	8000eb2 <main+0x26>
	if ( timeout < 0 )
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	da01      	bge.n	8000ed2 <main+0x46>
	{
		Error_Handler();
 8000ece:	f000 fe21 	bl	8001b14 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ed2:	f000 ffdb 	bl	8001e8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ed6:	f000 fcd5 	bl	8001884 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	4b9e      	ldr	r3, [pc, #632]	; (8001154 <main+0x2c8>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	4a9c      	ldr	r2, [pc, #624]	; (8001154 <main+0x2c8>)
 8000ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eea:	4b9a      	ldr	r3, [pc, #616]	; (8001154 <main+0x2c8>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f001 fda5 	bl	8002a48 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	f001 fdbb 	bl	8002a7c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f0a:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f0c:	bf00      	nop
 8000f0e:	4b91      	ldr	r3, [pc, #580]	; (8001154 <main+0x2c8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d104      	bne.n	8000f24 <main+0x98>
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	617a      	str	r2, [r7, #20]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	dcf4      	bgt.n	8000f0e <main+0x82>
	if ( timeout < 0 )
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	da01      	bge.n	8000f2e <main+0xa2>
	{
		Error_Handler();
 8000f2a:	f000 fdf3 	bl	8001b14 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f2e:	f7ff fea3 	bl	8000c78 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000f32:	f000 fee3 	bl	8001cfc <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000f36:	f000 fe73 	bl	8001c20 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], bufferSize) != HAL_OK)
 8000f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4985      	ldr	r1, [pc, #532]	; (8001158 <main+0x2cc>)
 8000f42:	4886      	ldr	r0, [pc, #536]	; (800115c <main+0x2d0>)
 8000f44:	f004 fc86 	bl	8005854 <HAL_UART_Receive_IT>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00a      	beq.n	8000f64 <main+0xd8>
	{
		Error_Handler();
 8000f4e:	f000 fde1 	bl	8001b14 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 8000f52:	e007      	b.n	8000f64 <main+0xd8>
	{
		HAL_Delay(500);
 8000f54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f58:	f001 f82a 	bl	8001fb0 <HAL_Delay>
		blink_green();
 8000f5c:	f000 fd8c 	bl	8001a78 <blink_green>
		blink_green();
 8000f60:	f000 fd8a 	bl	8001a78 <blink_green>
	while (UartReady != SET)
 8000f64:	4b7e      	ldr	r3, [pc, #504]	; (8001160 <main+0x2d4>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d1f2      	bne.n	8000f54 <main+0xc8>
	}
	UartReady = RESET;
 8000f6e:	4b7c      	ldr	r3, [pc, #496]	; (8001160 <main+0x2d4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2101      	movs	r1, #1
 8000f78:	487a      	ldr	r0, [pc, #488]	; (8001164 <main+0x2d8>)
 8000f7a:	f001 fd4b 	bl	8002a14 <HAL_GPIO_WritePin>

	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 8000f7e:	4a76      	ldr	r2, [pc, #472]	; (8001158 <main+0x2cc>)
 8000f80:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d008      	beq.n	8000f9e <main+0x112>
 8000f8c:	4b76      	ldr	r3, [pc, #472]	; (8001168 <main+0x2dc>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d104      	bne.n	8000f9e <main+0x112>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2102      	movs	r1, #2
 8000f98:	4874      	ldr	r0, [pc, #464]	; (800116c <main+0x2e0>)
 8000f9a:	f001 fd3b 	bl	8002a14 <HAL_GPIO_WritePin>
	}

	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 8000f9e:	4b74      	ldr	r3, [pc, #464]	; (8001170 <main+0x2e4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b72      	ldr	r3, [pc, #456]	; (8001170 <main+0x2e4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0201 	orr.w	r2, r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000fae:	4b70      	ldr	r3, [pc, #448]	; (8001170 <main+0x2e4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b6e      	ldr	r3, [pc, #440]	; (8001170 <main+0x2e4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fbc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8000fbe:	486c      	ldr	r0, [pc, #432]	; (8001170 <main+0x2e4>)
 8000fc0:	f004 f8b6 	bl	8005130 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	; (8001170 <main+0x2e4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24

	/*****************************************************************************************************/
	// Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fcc:	4b68      	ldr	r3, [pc, #416]	; (8001170 <main+0x2e4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8000fd4:	4967      	ldr	r1, [pc, #412]	; (8001174 <main+0x2e8>)
 8000fd6:	4860      	ldr	r0, [pc, #384]	; (8001158 <main+0x2cc>)
 8000fd8:	f7ff fbca 	bl	8000770 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000fdc:	4b64      	ldr	r3, [pc, #400]	; (8001170 <main+0x2e4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8000fe4:	4864      	ldr	r0, [pc, #400]	; (8001178 <main+0x2ec>)
 8000fe6:	f000 fd5d 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter);
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4963      	ldr	r1, [pc, #396]	; (800117c <main+0x2f0>)
 8000fee:	4862      	ldr	r0, [pc, #392]	; (8001178 <main+0x2ec>)
 8000ff0:	f007 f88a 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000ff4:	4859      	ldr	r0, [pc, #356]	; (800115c <main+0x2d0>)
 8000ff6:	f005 fce1 	bl	80069bc <UART_CheckIdleState>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10f      	bne.n	8001020 <main+0x194>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001000:	2232      	movs	r2, #50	; 0x32
 8001002:	495d      	ldr	r1, [pc, #372]	; (8001178 <main+0x2ec>)
 8001004:	4855      	ldr	r0, [pc, #340]	; (800115c <main+0x2d0>)
 8001006:	f004 fba1 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800100a:	e001      	b.n	8001010 <main+0x184>
			blink_red_fast();
 800100c:	f000 fd04 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <main+0x2d4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d1f8      	bne.n	800100c <main+0x180>
		}
		UartReady = RESET;
 800101a:	4b51      	ldr	r3, [pc, #324]	; (8001160 <main+0x2d4>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8001020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001024:	f000 ffc4 	bl	8001fb0 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001028:	484c      	ldr	r0, [pc, #304]	; (800115c <main+0x2d0>)
 800102a:	f005 fcc7 	bl	80069bc <UART_CheckIdleState>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d130      	bne.n	8001096 <main+0x20a>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8001034:	2204      	movs	r2, #4
 8001036:	4952      	ldr	r1, [pc, #328]	; (8001180 <main+0x2f4>)
 8001038:	4848      	ldr	r0, [pc, #288]	; (800115c <main+0x2d0>)
 800103a:	f004 fb87 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800103e:	e001      	b.n	8001044 <main+0x1b8>
			blink_red_fast();
 8001040:	f000 fcea 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001044:	4b46      	ldr	r3, [pc, #280]	; (8001160 <main+0x2d4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d1f8      	bne.n	8001040 <main+0x1b4>
		}
		UartReady = RESET;
 800104e:	4b44      	ldr	r3, [pc, #272]	; (8001160 <main+0x2d4>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instAbs.bytes[0], 4096);
 8001054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001058:	4946      	ldr	r1, [pc, #280]	; (8001174 <main+0x2e8>)
 800105a:	4840      	ldr	r0, [pc, #256]	; (800115c <main+0x2d0>)
 800105c:	f004 fb76 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001060:	e001      	b.n	8001066 <main+0x1da>
			blink_red_fast();
 8001062:	f000 fcd9 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <main+0x2d4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d1f8      	bne.n	8001062 <main+0x1d6>
		}
		UartReady = RESET;
 8001070:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <main+0x2d4>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001076:	2204      	movs	r2, #4
 8001078:	4942      	ldr	r1, [pc, #264]	; (8001184 <main+0x2f8>)
 800107a:	4838      	ldr	r0, [pc, #224]	; (800115c <main+0x2d0>)
 800107c:	f004 fb66 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001080:	e001      	b.n	8001086 <main+0x1fa>
			blink_red_fast();
 8001082:	f000 fcc9 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <main+0x2d4>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d1f8      	bne.n	8001082 <main+0x1f6>
		}
		UartReady = RESET;
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <main+0x2d4>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 8001096:	f000 fcd7 	bl	8001a48 <blink_orange_slow>
	blink_orange_slow();
 800109a:	f000 fcd5 	bl	8001a48 <blink_orange_slow>

	// Instantaneous phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <main+0x2e4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 80010a6:	4938      	ldr	r1, [pc, #224]	; (8001188 <main+0x2fc>)
 80010a8:	482b      	ldr	r0, [pc, #172]	; (8001158 <main+0x2cc>)
 80010aa:	f7ff fba9 	bl	8000800 <inst_phase>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <main+0x2e4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80010b6:	4830      	ldr	r0, [pc, #192]	; (8001178 <main+0x2ec>)
 80010b8:	f000 fcf4 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst phase counter = %ld\r\n&", counter);
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4933      	ldr	r1, [pc, #204]	; (800118c <main+0x300>)
 80010c0:	482d      	ldr	r0, [pc, #180]	; (8001178 <main+0x2ec>)
 80010c2:	f007 f821 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80010c6:	4825      	ldr	r0, [pc, #148]	; (800115c <main+0x2d0>)
 80010c8:	f005 fc78 	bl	80069bc <UART_CheckIdleState>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10f      	bne.n	80010f2 <main+0x266>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80010d2:	2232      	movs	r2, #50	; 0x32
 80010d4:	4928      	ldr	r1, [pc, #160]	; (8001178 <main+0x2ec>)
 80010d6:	4821      	ldr	r0, [pc, #132]	; (800115c <main+0x2d0>)
 80010d8:	f004 fb38 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80010dc:	e001      	b.n	80010e2 <main+0x256>
			blink_red_fast();
 80010de:	f000 fc9b 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <main+0x2d4>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d1f8      	bne.n	80010de <main+0x252>
		}
		UartReady = RESET;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <main+0x2d4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 80010f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f6:	f000 ff5b 	bl	8001fb0 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <main+0x2d0>)
 80010fc:	f005 fc5e 	bl	80069bc <UART_CheckIdleState>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d14e      	bne.n	80011a4 <main+0x318>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8001106:	2204      	movs	r2, #4
 8001108:	491d      	ldr	r1, [pc, #116]	; (8001180 <main+0x2f4>)
 800110a:	4814      	ldr	r0, [pc, #80]	; (800115c <main+0x2d0>)
 800110c:	f004 fb1e 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001110:	e001      	b.n	8001116 <main+0x28a>
			blink_red_fast();
 8001112:	f000 fc81 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <main+0x2d4>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d1f8      	bne.n	8001112 <main+0x286>
		}
		UartReady = RESET;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <main+0x2d4>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instPhase.bytes[0], 4096);
 8001126:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112a:	4917      	ldr	r1, [pc, #92]	; (8001188 <main+0x2fc>)
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <main+0x2d0>)
 800112e:	f004 fb0d 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001132:	e001      	b.n	8001138 <main+0x2ac>
			blink_red_fast();
 8001134:	f000 fc70 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <main+0x2d4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d1f8      	bne.n	8001134 <main+0x2a8>
		}
		UartReady = RESET;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <main+0x2d4>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001148:	2204      	movs	r2, #4
 800114a:	490e      	ldr	r1, [pc, #56]	; (8001184 <main+0x2f8>)
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <main+0x2d0>)
 800114e:	f004 fafd 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001152:	e01f      	b.n	8001194 <main+0x308>
 8001154:	58024400 	.word	0x58024400
 8001158:	24006244 	.word	0x24006244
 800115c:	24009290 	.word	0x24009290
 8001160:	24000236 	.word	0x24000236
 8001164:	58020400 	.word	0x58020400
 8001168:	24000200 	.word	0x24000200
 800116c:	58021000 	.word	0x58021000
 8001170:	24009244 	.word	0x24009244
 8001174:	24004244 	.word	0x24004244
 8001178:	24000204 	.word	0x24000204
 800117c:	08009a48 	.word	0x08009a48
 8001180:	08009b70 	.word	0x08009b70
 8001184:	08009b74 	.word	0x08009b74
 8001188:	24003244 	.word	0x24003244
 800118c:	08009a64 	.word	0x08009a64
			blink_red_fast();
 8001190:	f000 fc42 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <main+0x584>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d1f8      	bne.n	8001190 <main+0x304>
		}
		UartReady = RESET;
 800119e:	4b9c      	ldr	r3, [pc, #624]	; (8001410 <main+0x584>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 80011a4:	f000 fc50 	bl	8001a48 <blink_orange_slow>
	blink_orange_slow();
 80011a8:	f000 fc4e 	bl	8001a48 <blink_orange_slow>

	// Instantaneous unwrapped phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80011ac:	4b99      	ldr	r3, [pc, #612]	; (8001414 <main+0x588>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 80011b4:	4998      	ldr	r1, [pc, #608]	; (8001418 <main+0x58c>)
 80011b6:	4899      	ldr	r0, [pc, #612]	; (800141c <main+0x590>)
 80011b8:	f7ff fb22 	bl	8000800 <inst_phase>
	unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 80011bc:	4998      	ldr	r1, [pc, #608]	; (8001420 <main+0x594>)
 80011be:	4896      	ldr	r0, [pc, #600]	; (8001418 <main+0x58c>)
 80011c0:	f7ff fb56 	bl	8000870 <unwrap>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80011c4:	4b93      	ldr	r3, [pc, #588]	; (8001414 <main+0x588>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80011cc:	4895      	ldr	r0, [pc, #596]	; (8001424 <main+0x598>)
 80011ce:	f000 fc69 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst unwrapped phase counter = %ld\r\n&", counter);
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4994      	ldr	r1, [pc, #592]	; (8001428 <main+0x59c>)
 80011d6:	4893      	ldr	r0, [pc, #588]	; (8001424 <main+0x598>)
 80011d8:	f006 ff96 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80011dc:	4893      	ldr	r0, [pc, #588]	; (800142c <main+0x5a0>)
 80011de:	f005 fbed 	bl	80069bc <UART_CheckIdleState>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10f      	bne.n	8001208 <main+0x37c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80011e8:	2232      	movs	r2, #50	; 0x32
 80011ea:	498e      	ldr	r1, [pc, #568]	; (8001424 <main+0x598>)
 80011ec:	488f      	ldr	r0, [pc, #572]	; (800142c <main+0x5a0>)
 80011ee:	f004 faad 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80011f2:	e001      	b.n	80011f8 <main+0x36c>
			blink_red_fast();
 80011f4:	f000 fc10 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80011f8:	4b85      	ldr	r3, [pc, #532]	; (8001410 <main+0x584>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d1f8      	bne.n	80011f4 <main+0x368>
		}
		UartReady = RESET;
 8001202:	4b83      	ldr	r3, [pc, #524]	; (8001410 <main+0x584>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8001208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120c:	f000 fed0 	bl	8001fb0 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001210:	4886      	ldr	r0, [pc, #536]	; (800142c <main+0x5a0>)
 8001212:	f005 fbd3 	bl	80069bc <UART_CheckIdleState>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d130      	bne.n	800127e <main+0x3f2>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 800121c:	2204      	movs	r2, #4
 800121e:	4984      	ldr	r1, [pc, #528]	; (8001430 <main+0x5a4>)
 8001220:	4882      	ldr	r0, [pc, #520]	; (800142c <main+0x5a0>)
 8001222:	f004 fa93 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001226:	e001      	b.n	800122c <main+0x3a0>
			blink_red_fast();
 8001228:	f000 fbf6 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 800122c:	4b78      	ldr	r3, [pc, #480]	; (8001410 <main+0x584>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d1f8      	bne.n	8001228 <main+0x39c>
		}
		UartReady = RESET;
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <main+0x584>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instUnwrappedPhase.bytes[0], 4096);
 800123c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001240:	4977      	ldr	r1, [pc, #476]	; (8001420 <main+0x594>)
 8001242:	487a      	ldr	r0, [pc, #488]	; (800142c <main+0x5a0>)
 8001244:	f004 fa82 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001248:	e001      	b.n	800124e <main+0x3c2>
			blink_red_fast();
 800124a:	f000 fbe5 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 800124e:	4b70      	ldr	r3, [pc, #448]	; (8001410 <main+0x584>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d1f8      	bne.n	800124a <main+0x3be>
		}
		UartReady = RESET;
 8001258:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <main+0x584>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 800125e:	2204      	movs	r2, #4
 8001260:	4974      	ldr	r1, [pc, #464]	; (8001434 <main+0x5a8>)
 8001262:	4872      	ldr	r0, [pc, #456]	; (800142c <main+0x5a0>)
 8001264:	f004 fa72 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001268:	e001      	b.n	800126e <main+0x3e2>
			blink_red_fast();
 800126a:	f000 fbd5 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 800126e:	4b68      	ldr	r3, [pc, #416]	; (8001410 <main+0x584>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d1f8      	bne.n	800126a <main+0x3de>
		}
		UartReady = RESET;
 8001278:	4b65      	ldr	r3, [pc, #404]	; (8001410 <main+0x584>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 800127e:	f000 fbe3 	bl	8001a48 <blink_orange_slow>
	blink_orange_slow();
 8001282:	f000 fbe1 	bl	8001a48 <blink_orange_slow>

	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <main+0x588>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 800128e:	496a      	ldr	r1, [pc, #424]	; (8001438 <main+0x5ac>)
 8001290:	4862      	ldr	r0, [pc, #392]	; (800141c <main+0x590>)
 8001292:	f7ff fb89 	bl	80009a8 <inst_frequency>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <main+0x588>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800129e:	4861      	ldr	r0, [pc, #388]	; (8001424 <main+0x598>)
 80012a0:	f000 fc00 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n&", counter);
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4965      	ldr	r1, [pc, #404]	; (800143c <main+0x5b0>)
 80012a8:	485e      	ldr	r0, [pc, #376]	; (8001424 <main+0x598>)
 80012aa:	f006 ff2d 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80012ae:	485f      	ldr	r0, [pc, #380]	; (800142c <main+0x5a0>)
 80012b0:	f005 fb84 	bl	80069bc <UART_CheckIdleState>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <main+0x44e>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80012ba:	2232      	movs	r2, #50	; 0x32
 80012bc:	4959      	ldr	r1, [pc, #356]	; (8001424 <main+0x598>)
 80012be:	485b      	ldr	r0, [pc, #364]	; (800142c <main+0x5a0>)
 80012c0:	f004 fa44 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80012c4:	e001      	b.n	80012ca <main+0x43e>
			blink_red_fast();
 80012c6:	f000 fba7 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <main+0x584>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d1f8      	bne.n	80012c6 <main+0x43a>
		}
		UartReady = RESET;
 80012d4:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <main+0x584>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 80012da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012de:	f000 fe67 	bl	8001fb0 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80012e2:	4852      	ldr	r0, [pc, #328]	; (800142c <main+0x5a0>)
 80012e4:	f005 fb6a 	bl	80069bc <UART_CheckIdleState>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d130      	bne.n	8001350 <main+0x4c4>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80012ee:	2204      	movs	r2, #4
 80012f0:	494f      	ldr	r1, [pc, #316]	; (8001430 <main+0x5a4>)
 80012f2:	484e      	ldr	r0, [pc, #312]	; (800142c <main+0x5a0>)
 80012f4:	f004 fa2a 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80012f8:	e001      	b.n	80012fe <main+0x472>
			blink_red_fast();
 80012fa:	f000 fb8d 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <main+0x584>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d1f8      	bne.n	80012fa <main+0x46e>
		}
		UartReady = RESET;
 8001308:	4b41      	ldr	r3, [pc, #260]	; (8001410 <main+0x584>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instFreq.bytes[0], 4096);
 800130e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001312:	4949      	ldr	r1, [pc, #292]	; (8001438 <main+0x5ac>)
 8001314:	4845      	ldr	r0, [pc, #276]	; (800142c <main+0x5a0>)
 8001316:	f004 fa19 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800131a:	e001      	b.n	8001320 <main+0x494>
			blink_red_fast();
 800131c:	f000 fb7c 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001320:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <main+0x584>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d1f8      	bne.n	800131c <main+0x490>
		}
		UartReady = RESET;
 800132a:	4b39      	ldr	r3, [pc, #228]	; (8001410 <main+0x584>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001330:	2204      	movs	r2, #4
 8001332:	4940      	ldr	r1, [pc, #256]	; (8001434 <main+0x5a8>)
 8001334:	483d      	ldr	r0, [pc, #244]	; (800142c <main+0x5a0>)
 8001336:	f004 fa09 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800133a:	e001      	b.n	8001340 <main+0x4b4>
			blink_red_fast();
 800133c:	f000 fb6c 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <main+0x584>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d1f8      	bne.n	800133c <main+0x4b0>
		}
		UartReady = RESET;
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <main+0x584>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
	}

	blink_orange_slow();
 8001350:	f000 fb7a 	bl	8001a48 <blink_orange_slow>
	blink_orange_slow();
 8001354:	f000 fb78 	bl	8001a48 <blink_orange_slow>

	// Instantaneous centered normalized absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <main+0x588>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 8001360:	4937      	ldr	r1, [pc, #220]	; (8001440 <main+0x5b4>)
 8001362:	482e      	ldr	r0, [pc, #184]	; (800141c <main+0x590>)
 8001364:	f7ff fbd8 	bl	8000b18 <inst_centralized_normalized_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <main+0x588>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001370:	482c      	ldr	r0, [pc, #176]	; (8001424 <main+0x598>)
 8001372:	f000 fb97 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Inst CN abs counter = %ld\r\n&", counter);
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4932      	ldr	r1, [pc, #200]	; (8001444 <main+0x5b8>)
 800137a:	482a      	ldr	r0, [pc, #168]	; (8001424 <main+0x598>)
 800137c:	f006 fec4 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001380:	482a      	ldr	r0, [pc, #168]	; (800142c <main+0x5a0>)
 8001382:	f005 fb1b 	bl	80069bc <UART_CheckIdleState>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10f      	bne.n	80013ac <main+0x520>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800138c:	2232      	movs	r2, #50	; 0x32
 800138e:	4925      	ldr	r1, [pc, #148]	; (8001424 <main+0x598>)
 8001390:	4826      	ldr	r0, [pc, #152]	; (800142c <main+0x5a0>)
 8001392:	f004 f9db 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001396:	e001      	b.n	800139c <main+0x510>
			blink_red_fast();
 8001398:	f000 fb3e 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 800139c:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <main+0x584>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d1f8      	bne.n	8001398 <main+0x50c>
		}
		UartReady = RESET;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <main+0x584>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 80013ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b0:	f000 fdfe 	bl	8001fb0 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <main+0x5a0>)
 80013b6:	f005 fb01 	bl	80069bc <UART_CheckIdleState>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d14d      	bne.n	800145c <main+0x5d0>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80013c0:	2204      	movs	r2, #4
 80013c2:	491b      	ldr	r1, [pc, #108]	; (8001430 <main+0x5a4>)
 80013c4:	4819      	ldr	r0, [pc, #100]	; (800142c <main+0x5a0>)
 80013c6:	f004 f9c1 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80013ca:	e001      	b.n	80013d0 <main+0x544>
			blink_red_fast();
 80013cc:	f000 fb24 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <main+0x584>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d1f8      	bne.n	80013cc <main+0x540>
		}
		UartReady = RESET;
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <main+0x584>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instCNAbs.bytes[0], 4096);
 80013e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e4:	4916      	ldr	r1, [pc, #88]	; (8001440 <main+0x5b4>)
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <main+0x5a0>)
 80013e8:	f004 f9b0 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80013ec:	e001      	b.n	80013f2 <main+0x566>
			blink_red_fast();
 80013ee:	f000 fb13 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <main+0x584>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d1f8      	bne.n	80013ee <main+0x562>
		}
		UartReady = RESET;
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <main+0x584>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001402:	2204      	movs	r2, #4
 8001404:	490b      	ldr	r1, [pc, #44]	; (8001434 <main+0x5a8>)
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <main+0x5a0>)
 8001408:	f004 f9a0 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800140c:	e01e      	b.n	800144c <main+0x5c0>
 800140e:	bf00      	nop
 8001410:	24000236 	.word	0x24000236
 8001414:	24009244 	.word	0x24009244
 8001418:	24003244 	.word	0x24003244
 800141c:	24006244 	.word	0x24006244
 8001420:	24008244 	.word	0x24008244
 8001424:	24000204 	.word	0x24000204
 8001428:	08009a80 	.word	0x08009a80
 800142c:	24009290 	.word	0x24009290
 8001430:	08009b70 	.word	0x08009b70
 8001434:	08009b74 	.word	0x08009b74
 8001438:	24002244 	.word	0x24002244
 800143c:	08009aa8 	.word	0x08009aa8
 8001440:	24005244 	.word	0x24005244
 8001444:	08009ac4 	.word	0x08009ac4
			blink_red_fast();
 8001448:	f000 fae6 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 800144c:	4ba0      	ldr	r3, [pc, #640]	; (80016d0 <main+0x844>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d1f8      	bne.n	8001448 <main+0x5bc>
		}
		UartReady = RESET;
 8001456:	4b9e      	ldr	r3, [pc, #632]	; (80016d0 <main+0x844>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
	}

	/*****************************************************************************************************/
	// Mean of squared
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800145c:	4b9d      	ldr	r3, [pc, #628]	; (80016d4 <main+0x848>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	mean_of_squared(&rxBuffer.number[0], &mean_of_squared_value);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	489b      	ldr	r0, [pc, #620]	; (80016d8 <main+0x84c>)
 800146c:	f7ff fbd0 	bl	8000c10 <mean_of_squared>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001470:	4b98      	ldr	r3, [pc, #608]	; (80016d4 <main+0x848>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001478:	4898      	ldr	r0, [pc, #608]	; (80016dc <main+0x850>)
 800147a:	f000 fb13 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Mean of squared = %f\r\n", mean_of_squared_value);
 800147e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001482:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001486:	ec53 2b17 	vmov	r2, r3, d7
 800148a:	4995      	ldr	r1, [pc, #596]	; (80016e0 <main+0x854>)
 800148c:	4893      	ldr	r0, [pc, #588]	; (80016dc <main+0x850>)
 800148e:	f006 fe3b 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001492:	4894      	ldr	r0, [pc, #592]	; (80016e4 <main+0x858>)
 8001494:	f005 fa92 	bl	80069bc <UART_CheckIdleState>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <main+0x632>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800149e:	2232      	movs	r2, #50	; 0x32
 80014a0:	498e      	ldr	r1, [pc, #568]	; (80016dc <main+0x850>)
 80014a2:	4890      	ldr	r0, [pc, #576]	; (80016e4 <main+0x858>)
 80014a4:	f004 f952 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80014a8:	e001      	b.n	80014ae <main+0x622>
			blink_red_fast();
 80014aa:	f000 fab5 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80014ae:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <main+0x844>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1f8      	bne.n	80014aa <main+0x61e>
		}
		UartReady = RESET;
 80014b8:	4b85      	ldr	r3, [pc, #532]	; (80016d0 <main+0x844>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80014be:	4887      	ldr	r0, [pc, #540]	; (80016dc <main+0x850>)
 80014c0:	f000 faf0 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4988      	ldr	r1, [pc, #544]	; (80016e8 <main+0x85c>)
 80014c8:	4884      	ldr	r0, [pc, #528]	; (80016dc <main+0x850>)
 80014ca:	f006 fe1d 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80014ce:	4885      	ldr	r0, [pc, #532]	; (80016e4 <main+0x858>)
 80014d0:	f005 fa74 	bl	80069bc <UART_CheckIdleState>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <main+0x66e>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80014da:	2232      	movs	r2, #50	; 0x32
 80014dc:	497f      	ldr	r1, [pc, #508]	; (80016dc <main+0x850>)
 80014de:	4881      	ldr	r0, [pc, #516]	; (80016e4 <main+0x858>)
 80014e0:	f004 f934 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80014e4:	e001      	b.n	80014ea <main+0x65e>
			blink_red_fast();
 80014e6:	f000 fa97 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80014ea:	4b79      	ldr	r3, [pc, #484]	; (80016d0 <main+0x844>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d1f8      	bne.n	80014e6 <main+0x65a>
		}
		UartReady = RESET;
 80014f4:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <main+0x844>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the absolute instantaneous phase
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80014fa:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <main+0x848>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	// Absolute instantaneous phase
	inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 8001502:	497a      	ldr	r1, [pc, #488]	; (80016ec <main+0x860>)
 8001504:	487a      	ldr	r0, [pc, #488]	; (80016f0 <main+0x864>)
 8001506:	f7ff f933 	bl	8000770 <inst_absolute>
	std_dev(&instAbsPhase.number[0], &std_dev_value);
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	4876      	ldr	r0, [pc, #472]	; (80016ec <main+0x860>)
 8001512:	f7ff fb9f 	bl	8000c54 <std_dev>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <main+0x848>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 800151e:	486f      	ldr	r0, [pc, #444]	; (80016dc <main+0x850>)
 8001520:	f000 fac0 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 8001524:	edd7 7a02 	vldr	s15, [r7, #8]
 8001528:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800152c:	ec53 2b17 	vmov	r2, r3, d7
 8001530:	4970      	ldr	r1, [pc, #448]	; (80016f4 <main+0x868>)
 8001532:	486a      	ldr	r0, [pc, #424]	; (80016dc <main+0x850>)
 8001534:	f006 fde8 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001538:	486a      	ldr	r0, [pc, #424]	; (80016e4 <main+0x858>)
 800153a:	f005 fa3f 	bl	80069bc <UART_CheckIdleState>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10f      	bne.n	8001564 <main+0x6d8>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001544:	2232      	movs	r2, #50	; 0x32
 8001546:	4965      	ldr	r1, [pc, #404]	; (80016dc <main+0x850>)
 8001548:	4866      	ldr	r0, [pc, #408]	; (80016e4 <main+0x858>)
 800154a:	f004 f8ff 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800154e:	e001      	b.n	8001554 <main+0x6c8>
			blink_red_fast();
 8001550:	f000 fa62 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001554:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <main+0x844>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d1f8      	bne.n	8001550 <main+0x6c4>
		}
		UartReady = RESET;
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <main+0x844>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001564:	485d      	ldr	r0, [pc, #372]	; (80016dc <main+0x850>)
 8001566:	f000 fa9d 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	495e      	ldr	r1, [pc, #376]	; (80016e8 <main+0x85c>)
 800156e:	485b      	ldr	r0, [pc, #364]	; (80016dc <main+0x850>)
 8001570:	f006 fdca 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001574:	485b      	ldr	r0, [pc, #364]	; (80016e4 <main+0x858>)
 8001576:	f005 fa21 	bl	80069bc <UART_CheckIdleState>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10f      	bne.n	80015a0 <main+0x714>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001580:	2232      	movs	r2, #50	; 0x32
 8001582:	4956      	ldr	r1, [pc, #344]	; (80016dc <main+0x850>)
 8001584:	4857      	ldr	r0, [pc, #348]	; (80016e4 <main+0x858>)
 8001586:	f004 f8e1 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800158a:	e001      	b.n	8001590 <main+0x704>
			blink_red_fast();
 800158c:	f000 fa44 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001590:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <main+0x844>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d1f8      	bne.n	800158c <main+0x700>
		}
		UartReady = RESET;
 800159a:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <main+0x844>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the instantaneous phase
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80015a0:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <main+0x848>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	std_dev(&instPhase.number[0], &std_dev_value);
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	4850      	ldr	r0, [pc, #320]	; (80016f0 <main+0x864>)
 80015b0:	f7ff fb50 	bl	8000c54 <std_dev>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80015b4:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <main+0x848>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80015bc:	4847      	ldr	r0, [pc, #284]	; (80016dc <main+0x850>)
 80015be:	f000 fa71 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 80015c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ca:	ec53 2b17 	vmov	r2, r3, d7
 80015ce:	4949      	ldr	r1, [pc, #292]	; (80016f4 <main+0x868>)
 80015d0:	4842      	ldr	r0, [pc, #264]	; (80016dc <main+0x850>)
 80015d2:	f006 fd99 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80015d6:	4843      	ldr	r0, [pc, #268]	; (80016e4 <main+0x858>)
 80015d8:	f005 f9f0 	bl	80069bc <UART_CheckIdleState>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <main+0x776>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80015e2:	2232      	movs	r2, #50	; 0x32
 80015e4:	493d      	ldr	r1, [pc, #244]	; (80016dc <main+0x850>)
 80015e6:	483f      	ldr	r0, [pc, #252]	; (80016e4 <main+0x858>)
 80015e8:	f004 f8b0 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80015ec:	e001      	b.n	80015f2 <main+0x766>
			blink_red_fast();
 80015ee:	f000 fa13 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <main+0x844>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d1f8      	bne.n	80015ee <main+0x762>
		}
		UartReady = RESET;
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <main+0x844>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001602:	4836      	ldr	r0, [pc, #216]	; (80016dc <main+0x850>)
 8001604:	f000 fa4e 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4937      	ldr	r1, [pc, #220]	; (80016e8 <main+0x85c>)
 800160c:	4833      	ldr	r0, [pc, #204]	; (80016dc <main+0x850>)
 800160e:	f006 fd7b 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001612:	4834      	ldr	r0, [pc, #208]	; (80016e4 <main+0x858>)
 8001614:	f005 f9d2 	bl	80069bc <UART_CheckIdleState>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <main+0x7b2>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800161e:	2232      	movs	r2, #50	; 0x32
 8001620:	492e      	ldr	r1, [pc, #184]	; (80016dc <main+0x850>)
 8001622:	4830      	ldr	r0, [pc, #192]	; (80016e4 <main+0x858>)
 8001624:	f004 f892 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001628:	e001      	b.n	800162e <main+0x7a2>
			blink_red_fast();
 800162a:	f000 f9f5 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <main+0x844>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d1f8      	bne.n	800162a <main+0x79e>
		}
		UartReady = RESET;
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <main+0x844>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the absolute instantaneous frequency
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <main+0x848>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 8001646:	492c      	ldr	r1, [pc, #176]	; (80016f8 <main+0x86c>)
 8001648:	482c      	ldr	r0, [pc, #176]	; (80016fc <main+0x870>)
 800164a:	f7ff f891 	bl	8000770 <inst_absolute>
	std_dev(&instAbsFreq.number[0], &std_dev_value);
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4619      	mov	r1, r3
 8001654:	4828      	ldr	r0, [pc, #160]	; (80016f8 <main+0x86c>)
 8001656:	f7ff fafd 	bl	8000c54 <std_dev>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <main+0x848>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001662:	481e      	ldr	r0, [pc, #120]	; (80016dc <main+0x850>)
 8001664:	f000 fa1e 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 8001668:	edd7 7a02 	vldr	s15, [r7, #8]
 800166c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001670:	ec53 2b17 	vmov	r2, r3, d7
 8001674:	491f      	ldr	r1, [pc, #124]	; (80016f4 <main+0x868>)
 8001676:	4819      	ldr	r0, [pc, #100]	; (80016dc <main+0x850>)
 8001678:	f006 fd46 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800167c:	4819      	ldr	r0, [pc, #100]	; (80016e4 <main+0x858>)
 800167e:	f005 f99d 	bl	80069bc <UART_CheckIdleState>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10f      	bne.n	80016a8 <main+0x81c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001688:	2232      	movs	r2, #50	; 0x32
 800168a:	4914      	ldr	r1, [pc, #80]	; (80016dc <main+0x850>)
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <main+0x858>)
 800168e:	f004 f85d 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001692:	e001      	b.n	8001698 <main+0x80c>
			blink_red_fast();
 8001694:	f000 f9c0 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <main+0x844>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d1f8      	bne.n	8001694 <main+0x808>
		}
		UartReady = RESET;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <main+0x844>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <main+0x850>)
 80016aa:	f000 f9fb 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	490d      	ldr	r1, [pc, #52]	; (80016e8 <main+0x85c>)
 80016b2:	480a      	ldr	r0, [pc, #40]	; (80016dc <main+0x850>)
 80016b4:	f006 fd28 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80016b8:	480a      	ldr	r0, [pc, #40]	; (80016e4 <main+0x858>)
 80016ba:	f005 f97f 	bl	80069bc <UART_CheckIdleState>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d127      	bne.n	8001714 <main+0x888>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80016c4:	2232      	movs	r2, #50	; 0x32
 80016c6:	4905      	ldr	r1, [pc, #20]	; (80016dc <main+0x850>)
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <main+0x858>)
 80016ca:	f004 f83f 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80016ce:	e019      	b.n	8001704 <main+0x878>
 80016d0:	24000236 	.word	0x24000236
 80016d4:	24009244 	.word	0x24009244
 80016d8:	24006244 	.word	0x24006244
 80016dc:	24000204 	.word	0x24000204
 80016e0:	08009ae4 	.word	0x08009ae4
 80016e4:	24009290 	.word	0x24009290
 80016e8:	08009afc 	.word	0x08009afc
 80016ec:	24000244 	.word	0x24000244
 80016f0:	24003244 	.word	0x24003244
 80016f4:	08009b14 	.word	0x08009b14
 80016f8:	24001244 	.word	0x24001244
 80016fc:	24002244 	.word	0x24002244
			blink_red_fast();
 8001700:	f000 f98a 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001704:	4b57      	ldr	r3, [pc, #348]	; (8001864 <main+0x9d8>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d1f8      	bne.n	8001700 <main+0x874>
		}
		UartReady = RESET;
 800170e:	4b55      	ldr	r3, [pc, #340]	; (8001864 <main+0x9d8>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the instantaneous frequency
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001714:	4b54      	ldr	r3, [pc, #336]	; (8001868 <main+0x9dc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	std_dev(&instFreq.number[0], &std_dev_value);
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	4852      	ldr	r0, [pc, #328]	; (800186c <main+0x9e0>)
 8001724:	f7ff fa96 	bl	8000c54 <std_dev>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001728:	4b4f      	ldr	r3, [pc, #316]	; (8001868 <main+0x9dc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001730:	484f      	ldr	r0, [pc, #316]	; (8001870 <main+0x9e4>)
 8001732:	f000 f9b7 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 8001736:	edd7 7a02 	vldr	s15, [r7, #8]
 800173a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800173e:	ec53 2b17 	vmov	r2, r3, d7
 8001742:	494c      	ldr	r1, [pc, #304]	; (8001874 <main+0x9e8>)
 8001744:	484a      	ldr	r0, [pc, #296]	; (8001870 <main+0x9e4>)
 8001746:	f006 fcdf 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800174a:	484b      	ldr	r0, [pc, #300]	; (8001878 <main+0x9ec>)
 800174c:	f005 f936 	bl	80069bc <UART_CheckIdleState>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <main+0x8ea>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001756:	2232      	movs	r2, #50	; 0x32
 8001758:	4945      	ldr	r1, [pc, #276]	; (8001870 <main+0x9e4>)
 800175a:	4847      	ldr	r0, [pc, #284]	; (8001878 <main+0x9ec>)
 800175c:	f003 fff6 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001760:	e001      	b.n	8001766 <main+0x8da>
			blink_red_fast();
 8001762:	f000 f959 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <main+0x9d8>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d1f8      	bne.n	8001762 <main+0x8d6>
		}
		UartReady = RESET;
 8001770:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <main+0x9d8>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001776:	483e      	ldr	r0, [pc, #248]	; (8001870 <main+0x9e4>)
 8001778:	f000 f994 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	493f      	ldr	r1, [pc, #252]	; (800187c <main+0x9f0>)
 8001780:	483b      	ldr	r0, [pc, #236]	; (8001870 <main+0x9e4>)
 8001782:	f006 fcc1 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001786:	483c      	ldr	r0, [pc, #240]	; (8001878 <main+0x9ec>)
 8001788:	f005 f918 	bl	80069bc <UART_CheckIdleState>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <main+0x926>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001792:	2232      	movs	r2, #50	; 0x32
 8001794:	4936      	ldr	r1, [pc, #216]	; (8001870 <main+0x9e4>)
 8001796:	4838      	ldr	r0, [pc, #224]	; (8001878 <main+0x9ec>)
 8001798:	f003 ffd8 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800179c:	e001      	b.n	80017a2 <main+0x916>
			blink_red_fast();
 800179e:	f000 f93b 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 80017a2:	4b30      	ldr	r3, [pc, #192]	; (8001864 <main+0x9d8>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d1f8      	bne.n	800179e <main+0x912>
		}
		UartReady = RESET;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <main+0x9d8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
	}

	// Standard deviation of the centralized normalized absolute amplitude
	// Reset counter
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <main+0x9dc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
	// Processing
	std_dev(&instCNAbs.number[0], &std_dev_value);
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4619      	mov	r1, r3
 80017c0:	482f      	ldr	r0, [pc, #188]	; (8001880 <main+0x9f4>)
 80017c2:	f7ff fa47 	bl	8000c54 <std_dev>
	// Get counter
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <main+0x9dc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	613b      	str	r3, [r7, #16]
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 80017ce:	4828      	ldr	r0, [pc, #160]	; (8001870 <main+0x9e4>)
 80017d0:	f000 f968 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 80017d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017dc:	ec53 2b17 	vmov	r2, r3, d7
 80017e0:	4924      	ldr	r1, [pc, #144]	; (8001874 <main+0x9e8>)
 80017e2:	4823      	ldr	r0, [pc, #140]	; (8001870 <main+0x9e4>)
 80017e4:	f006 fc90 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80017e8:	4823      	ldr	r0, [pc, #140]	; (8001878 <main+0x9ec>)
 80017ea:	f005 f8e7 	bl	80069bc <UART_CheckIdleState>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10f      	bne.n	8001814 <main+0x988>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80017f4:	2232      	movs	r2, #50	; 0x32
 80017f6:	491e      	ldr	r1, [pc, #120]	; (8001870 <main+0x9e4>)
 80017f8:	481f      	ldr	r0, [pc, #124]	; (8001878 <main+0x9ec>)
 80017fa:	f003 ffa7 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80017fe:	e001      	b.n	8001804 <main+0x978>
			blink_red_fast();
 8001800:	f000 f90a 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <main+0x9d8>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d1f8      	bne.n	8001800 <main+0x974>
		}
		UartReady = RESET;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <main+0x9d8>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
	}
	// Transmission routine
	reset_buffer(&txStringBuffer[0]);
 8001814:	4816      	ldr	r0, [pc, #88]	; (8001870 <main+0x9e4>)
 8001816:	f000 f945 	bl	8001aa4 <reset_buffer>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4917      	ldr	r1, [pc, #92]	; (800187c <main+0x9f0>)
 800181e:	4814      	ldr	r0, [pc, #80]	; (8001870 <main+0x9e4>)
 8001820:	f006 fc72 	bl	8008108 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001824:	4814      	ldr	r0, [pc, #80]	; (8001878 <main+0x9ec>)
 8001826:	f005 f8c9 	bl	80069bc <UART_CheckIdleState>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10f      	bne.n	8001850 <main+0x9c4>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001830:	2232      	movs	r2, #50	; 0x32
 8001832:	490f      	ldr	r1, [pc, #60]	; (8001870 <main+0x9e4>)
 8001834:	4810      	ldr	r0, [pc, #64]	; (8001878 <main+0x9ec>)
 8001836:	f003 ff89 	bl	800574c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800183a:	e001      	b.n	8001840 <main+0x9b4>
			blink_red_fast();
 800183c:	f000 f8ec 	bl	8001a18 <blink_red_fast>
		while(UartReady != SET){
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <main+0x9d8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d1f8      	bne.n	800183c <main+0x9b0>
		}
		UartReady = RESET;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <main+0x9d8>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
#endif
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <main+0x9dc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
	clear_leds();
 8001858:	f000 f8c6 	bl	80019e8 <clear_leds>
	while (1)
	{
		blink_orange_slow();
 800185c:	f000 f8f4 	bl	8001a48 <blink_orange_slow>
 8001860:	e7fc      	b.n	800185c <main+0x9d0>
 8001862:	bf00      	nop
 8001864:	24000236 	.word	0x24000236
 8001868:	24009244 	.word	0x24009244
 800186c:	24002244 	.word	0x24002244
 8001870:	24000204 	.word	0x24000204
 8001874:	08009b14 	.word	0x08009b14
 8001878:	24009290 	.word	0x24009290
 800187c:	08009afc 	.word	0x08009afc
 8001880:	24005244 	.word	0x24005244

08001884 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0cc      	sub	sp, #304	; 0x130
 8001888:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800188e:	224c      	movs	r2, #76	; 0x4c
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f005 ff3c 	bl	8007710 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800189c:	2220      	movs	r2, #32
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f005 ff35 	bl	8007710 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4618      	mov	r0, r3
 80018ac:	23bc      	movs	r3, #188	; 0xbc
 80018ae:	461a      	mov	r2, r3
 80018b0:	2100      	movs	r1, #0
 80018b2:	f005 ff2d 	bl	8007710 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80018b6:	2004      	movs	r0, #4
 80018b8:	f001 f8f4 	bl	8002aa4 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <SystemClock_Config+0x15c>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	4a46      	ldr	r2, [pc, #280]	; (80019e0 <SystemClock_Config+0x15c>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80018ce:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <SystemClock_Config+0x15c>)
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	f003 0201 	and.w	r2, r3, #1
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <SystemClock_Config+0x160>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a41      	ldr	r2, [pc, #260]	; (80019e4 <SystemClock_Config+0x160>)
 80018e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <SystemClock_Config+0x160>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018f6:	bf00      	nop
 80018f8:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <SystemClock_Config+0x160>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001904:	d1f8      	bne.n	80018f8 <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800190c:	2301      	movs	r3, #1
 800190e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001912:	2340      	movs	r3, #64	; 0x40
 8001914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001918:	2302      	movs	r3, #2
 800191a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001924:	2304      	movs	r3, #4
 8001926:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 800192a:	2332      	movs	r3, #50	; 0x32
 800192c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001942:	230c      	movs	r3, #12
 8001944:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001954:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001958:	4618      	mov	r0, r3
 800195a:	f001 f8fd 	bl	8002b58 <HAL_RCC_OscConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8001964:	f000 f8d6 	bl	8001b14 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001968:	233f      	movs	r3, #63	; 0x3f
 800196a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196e:	2303      	movs	r3, #3
 8001970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800197a:	2308      	movs	r3, #8
 800197c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001980:	2340      	movs	r3, #64	; 0x40
 8001982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001986:	2340      	movs	r3, #64	; 0x40
 8001988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800198c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001990:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001994:	2340      	movs	r3, #64	; 0x40
 8001996:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800199a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800199e:	2102      	movs	r1, #2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 fce9 	bl	8003378 <HAL_RCC_ClockConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x12c>
	{
		Error_Handler();
 80019ac:	f000 f8b2 	bl	8001b14 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	2202      	movs	r2, #2
 80019b6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	2203      	movs	r2, #3
 80019be:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 f85b 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0x150>
	{
		Error_Handler();
 80019d0:	f000 f8a0 	bl	8001b14 <Error_Handler>
	}
}
 80019d4:	bf00      	nop
 80019d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	58000400 	.word	0x58000400
 80019e4:	58024800 	.word	0x58024800

080019e8 <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2101      	movs	r1, #1
 80019f0:	4807      	ldr	r0, [pc, #28]	; (8001a10 <clear_leds+0x28>)
 80019f2:	f001 f80f 	bl	8002a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2102      	movs	r1, #2
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <clear_leds+0x2c>)
 80019fc:	f001 f80a 	bl	8002a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a06:	4802      	ldr	r0, [pc, #8]	; (8001a10 <clear_leds+0x28>)
 8001a08:	f001 f804 	bl	8002a14 <HAL_GPIO_WritePin>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	58020400 	.word	0x58020400
 8001a14:	58021000 	.word	0x58021000

08001a18 <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a22:	4808      	ldr	r0, [pc, #32]	; (8001a44 <blink_red_fast+0x2c>)
 8001a24:	f000 fff6 	bl	8002a14 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001a28:	2032      	movs	r0, #50	; 0x32
 8001a2a:	f000 fac1 	bl	8001fb0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <blink_red_fast+0x2c>)
 8001a36:	f000 ffed 	bl	8002a14 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001a3a:	2032      	movs	r0, #50	; 0x32
 8001a3c:	f000 fab8 	bl	8001fb0 <HAL_Delay>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	58020400 	.word	0x58020400

08001a48 <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2102      	movs	r1, #2
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <blink_orange_slow+0x2c>)
 8001a52:	f000 ffdf 	bl	8002a14 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001a56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a5a:	f000 faa9 	bl	8001fb0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2102      	movs	r1, #2
 8001a62:	4804      	ldr	r0, [pc, #16]	; (8001a74 <blink_orange_slow+0x2c>)
 8001a64:	f000 ffd6 	bl	8002a14 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001a68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a6c:	f000 faa0 	bl	8001fb0 <HAL_Delay>
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	58021000 	.word	0x58021000

08001a78 <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <blink_green+0x28>)
 8001a82:	f000 ffc7 	bl	8002a14 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001a86:	20c8      	movs	r0, #200	; 0xc8
 8001a88:	f000 fa92 	bl	8001fb0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <blink_green+0x28>)
 8001a92:	f000 ffbf 	bl	8002a14 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001a96:	20c8      	movs	r0, #200	; 0xc8
 8001a98:	f000 fa8a 	bl	8001fb0 <HAL_Delay>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58020400 	.word	0x58020400

08001aa4 <reset_buffer>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}
void reset_buffer(char *stringBuffer){
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 1; i < 50; i++){
 8001aac:	2301      	movs	r3, #1
 8001aae:	81fb      	strh	r3, [r7, #14]
 8001ab0:	e007      	b.n	8001ac2 <reset_buffer+0x1e>
		stringBuffer[i] = '\0';
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 1; i < 50; i++){
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	81fb      	strh	r3, [r7, #14]
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
 8001ac4:	2b31      	cmp	r3, #49	; 0x31
 8001ac6:	d9f4      	bls.n	8001ab2 <reset_buffer+0xe>
	}
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_UART_TxCpltCallback>:
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100);
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <HAL_UART_TxCpltCallback+0x1c>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	24000236 	.word	0x24000236

08001af4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <HAL_UART_RxCpltCallback+0x1c>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	24000236 	.word	0x24000236

08001b14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_MspInit+0x30>)
 8001b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_MspInit+0x30>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_MspInit+0x30>)
 8001b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	58024400 	.word	0x58024400

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 f9e0 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <USART3_IRQHandler+0x10>)
 8001bba:	f003 ff23 	bl	8005a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	24009290 	.word	0x24009290

08001bc8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_sbrk+0x50>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_sbrk+0x16>
		heap_end = &end;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <_sbrk+0x50>)
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <_sbrk+0x54>)
 8001bdc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <_sbrk+0x50>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <_sbrk+0x50>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	466a      	mov	r2, sp
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d907      	bls.n	8001c02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bf2:	f005 fd53 	bl	800769c <__errno>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	230c      	movs	r3, #12
 8001bfa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001c00:	e006      	b.n	8001c10 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <_sbrk+0x50>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a03      	ldr	r2, [pc, #12]	; (8001c18 <_sbrk+0x50>)
 8001c0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	24000238 	.word	0x24000238
 8001c1c:	24009328 	.word	0x24009328

08001c20 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_TIM2_Init+0x98>)
 8001c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <MX_TIM2_Init+0x98>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_TIM2_Init+0x98>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <MX_TIM2_Init+0x98>)
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_TIM2_Init+0x98>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_TIM2_Init+0x98>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c66:	4814      	ldr	r0, [pc, #80]	; (8001cb8 <MX_TIM2_Init+0x98>)
 8001c68:	f003 fa0a 	bl	8005080 <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c72:	f7ff ff4f 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_TIM2_Init+0x98>)
 8001c84:	f003 fa82 	bl	800518c <HAL_TIM_ConfigClockSource>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c8e:	f7ff ff41 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_TIM2_Init+0x98>)
 8001ca0:	f003 fc7c 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001caa:	f7ff ff33 	bl	8001b14 <Error_Handler>
  }

}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	24009244 	.word	0x24009244

08001cbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ccc:	d10e      	bne.n	8001cec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cd4:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	58024400 	.word	0x58024400

08001cfc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d02:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <MX_USART3_UART_Init+0x94>)
 8001d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d44:	4811      	ldr	r0, [pc, #68]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d46:	f003 fcb1 	bl	80056ac <HAL_UART_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d50:	f7ff fee0 	bl	8001b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d54:	2100      	movs	r1, #0
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d58:	f005 fa6d 	bl	8007236 <HAL_UARTEx_SetTxFifoThreshold>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d62:	f7ff fed7 	bl	8001b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d66:	2100      	movs	r1, #0
 8001d68:	4808      	ldr	r0, [pc, #32]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d6a:	f005 faa2 	bl	80072b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d74:	f7ff fece 	bl	8001b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_USART3_UART_Init+0x90>)
 8001d7a:	f005 fa23 	bl	80071c4 <HAL_UARTEx_DisableFifoMode>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d84:	f7ff fec6 	bl	8001b14 <Error_Handler>
  }

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	24009290 	.word	0x24009290
 8001d90:	40004800 	.word	0x40004800

08001d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <HAL_UART_MspInit+0x98>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d136      	bne.n	8001e24 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_UART_MspInit+0x9c>)
 8001db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_UART_MspInit+0x9c>)
 8001dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_UART_MspInit+0x9c>)
 8001dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_UART_MspInit+0x9c>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <HAL_UART_MspInit+0x9c>)
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_UART_MspInit+0x9c>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e04:	2307      	movs	r3, #7
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_UART_MspInit+0xa0>)
 8001e10:	f000 fc50 	bl	80026b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	2027      	movs	r0, #39	; 0x27
 8001e1a:	f000 f9d2 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e1e:	2027      	movs	r0, #39	; 0x27
 8001e20:	f000 f9e9 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40004800 	.word	0x40004800
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58020c00 	.word	0x58020c00

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e3e:	e003      	b.n	8001e48 <LoopCopyDataInit>

08001e40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e46:	3104      	adds	r1, #4

08001e48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e48:	480b      	ldr	r0, [pc, #44]	; (8001e78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e50:	d3f6      	bcc.n	8001e40 <CopyDataInit>
  ldr  r2, =_sbss
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e54:	e002      	b.n	8001e5c <LoopFillZerobss>

08001e56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e58:	f842 3b04 	str.w	r3, [r2], #4

08001e5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e60:	d3f9      	bcc.n	8001e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e62:	f7fe fc15 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f005 fc1f 	bl	80076a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7ff f80f 	bl	8000e8c <main>
  bx  lr    
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e74:	08009e28 	.word	0x08009e28
  ldr  r0, =_sdata
 8001e78:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001e7c:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 8001e80:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 8001e84:	24009324 	.word	0x24009324

08001e88 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC3_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e92:	2003      	movs	r0, #3
 8001e94:	f000 f98a 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e98:	f001 fc24 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_Init+0x68>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <HAL_Init+0x6c>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_Init+0x68>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_Init+0x6c>)
 8001ec0:	5cd3      	ldrb	r3, [r2, r3]
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <HAL_Init+0x70>)
 8001ece:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_Init+0x74>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 f814 	bl	8001f04 <HAL_InitTick>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e002      	b.n	8001eec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee6:	f7ff fe1d 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	08009b5c 	.word	0x08009b5c
 8001efc:	24000004 	.word	0x24000004
 8001f00:	24000000 	.word	0x24000000

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_InitTick+0x60>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e021      	b.n	8001f5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_InitTick+0x64>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_InitTick+0x60>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f96f 	bl	8002212 <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 f939 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <HAL_InitTick+0x68>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2400000c 	.word	0x2400000c
 8001f68:	24000000 	.word	0x24000000
 8001f6c:	24000008 	.word	0x24000008

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2400000c 	.word	0x2400000c
 8001f94:	2400931c 	.word	0x2400931c

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	2400931c 	.word	0x2400931c

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_Delay+0x40>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2400000c 	.word	0x2400000c

08001ff4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_GetREVID+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	5c001000 	.word	0x5c001000

0800200c <__NVIC_SetPriorityGrouping>:
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <__NVIC_SetPriorityGrouping+0x40>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	4313      	orrs	r3, r2
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x40>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	05fa0000 	.word	0x05fa0000

08002054 <__NVIC_GetPriorityGrouping>:
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff29 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff40 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff90 	bl	8002100 <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5f 	bl	80020ac <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff33 	bl	8002070 <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa4 	bl	8002168 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e205      	b.n	800264a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d004      	beq.n	8002254 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e1fa      	b.n	800264a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a8c      	ldr	r2, [pc, #560]	; (800248c <HAL_DMA_Abort_IT+0x260>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d04a      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a8b      	ldr	r2, [pc, #556]	; (8002490 <HAL_DMA_Abort_IT+0x264>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d045      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a89      	ldr	r2, [pc, #548]	; (8002494 <HAL_DMA_Abort_IT+0x268>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d040      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a88      	ldr	r2, [pc, #544]	; (8002498 <HAL_DMA_Abort_IT+0x26c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d03b      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a86      	ldr	r2, [pc, #536]	; (800249c <HAL_DMA_Abort_IT+0x270>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d036      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a85      	ldr	r2, [pc, #532]	; (80024a0 <HAL_DMA_Abort_IT+0x274>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d031      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a83      	ldr	r2, [pc, #524]	; (80024a4 <HAL_DMA_Abort_IT+0x278>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02c      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a82      	ldr	r2, [pc, #520]	; (80024a8 <HAL_DMA_Abort_IT+0x27c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d027      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a80      	ldr	r2, [pc, #512]	; (80024ac <HAL_DMA_Abort_IT+0x280>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d022      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7f      	ldr	r2, [pc, #508]	; (80024b0 <HAL_DMA_Abort_IT+0x284>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d01d      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a7d      	ldr	r2, [pc, #500]	; (80024b4 <HAL_DMA_Abort_IT+0x288>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d018      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7c      	ldr	r2, [pc, #496]	; (80024b8 <HAL_DMA_Abort_IT+0x28c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7a      	ldr	r2, [pc, #488]	; (80024bc <HAL_DMA_Abort_IT+0x290>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00e      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a79      	ldr	r2, [pc, #484]	; (80024c0 <HAL_DMA_Abort_IT+0x294>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d009      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a77      	ldr	r2, [pc, #476]	; (80024c4 <HAL_DMA_Abort_IT+0x298>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xc8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a76      	ldr	r2, [pc, #472]	; (80024c8 <HAL_DMA_Abort_IT+0x29c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_DMA_Abort_IT+0xcc>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_DMA_Abort_IT+0xce>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d065      	beq.n	80023ca <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2204      	movs	r2, #4
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a60      	ldr	r2, [pc, #384]	; (800248c <HAL_DMA_Abort_IT+0x260>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04a      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a5e      	ldr	r2, [pc, #376]	; (8002490 <HAL_DMA_Abort_IT+0x264>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d045      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a5d      	ldr	r2, [pc, #372]	; (8002494 <HAL_DMA_Abort_IT+0x268>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d040      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5b      	ldr	r2, [pc, #364]	; (8002498 <HAL_DMA_Abort_IT+0x26c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d03b      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a5a      	ldr	r2, [pc, #360]	; (800249c <HAL_DMA_Abort_IT+0x270>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d036      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <HAL_DMA_Abort_IT+0x274>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a57      	ldr	r2, [pc, #348]	; (80024a4 <HAL_DMA_Abort_IT+0x278>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d02c      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a55      	ldr	r2, [pc, #340]	; (80024a8 <HAL_DMA_Abort_IT+0x27c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d027      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a54      	ldr	r2, [pc, #336]	; (80024ac <HAL_DMA_Abort_IT+0x280>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_DMA_Abort_IT+0x284>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a51      	ldr	r2, [pc, #324]	; (80024b4 <HAL_DMA_Abort_IT+0x288>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <HAL_DMA_Abort_IT+0x28c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a4e      	ldr	r2, [pc, #312]	; (80024bc <HAL_DMA_Abort_IT+0x290>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00e      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a4c      	ldr	r2, [pc, #304]	; (80024c0 <HAL_DMA_Abort_IT+0x294>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_DMA_Abort_IT+0x298>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x17a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a49      	ldr	r2, [pc, #292]	; (80024c8 <HAL_DMA_Abort_IT+0x29c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d108      	bne.n	80023b8 <HAL_DMA_Abort_IT+0x18c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e147      	b.n	8002648 <HAL_DMA_Abort_IT+0x41c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e13e      	b.n	8002648 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 020e 	bic.w	r2, r2, #14
 80023d8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2b      	ldr	r2, [pc, #172]	; (800248c <HAL_DMA_Abort_IT+0x260>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04a      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a29      	ldr	r2, [pc, #164]	; (8002490 <HAL_DMA_Abort_IT+0x264>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d045      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a28      	ldr	r2, [pc, #160]	; (8002494 <HAL_DMA_Abort_IT+0x268>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d040      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <HAL_DMA_Abort_IT+0x26c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03b      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a25      	ldr	r2, [pc, #148]	; (800249c <HAL_DMA_Abort_IT+0x270>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d036      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <HAL_DMA_Abort_IT+0x274>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d031      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_DMA_Abort_IT+0x278>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <HAL_DMA_Abort_IT+0x27c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d027      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_DMA_Abort_IT+0x280>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_DMA_Abort_IT+0x284>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1c      	ldr	r2, [pc, #112]	; (80024b4 <HAL_DMA_Abort_IT+0x288>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_DMA_Abort_IT+0x28c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_DMA_Abort_IT+0x290>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_DMA_Abort_IT+0x294>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <HAL_DMA_Abort_IT+0x298>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Abort_IT+0x24e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <HAL_DMA_Abort_IT+0x29c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d128      	bne.n	80024cc <HAL_DMA_Abort_IT+0x2a0>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e027      	b.n	80024dc <HAL_DMA_Abort_IT+0x2b0>
 800248c:	40020010 	.word	0x40020010
 8002490:	40020028 	.word	0x40020028
 8002494:	40020040 	.word	0x40020040
 8002498:	40020058 	.word	0x40020058
 800249c:	40020070 	.word	0x40020070
 80024a0:	40020088 	.word	0x40020088
 80024a4:	400200a0 	.word	0x400200a0
 80024a8:	400200b8 	.word	0x400200b8
 80024ac:	40020410 	.word	0x40020410
 80024b0:	40020428 	.word	0x40020428
 80024b4:	40020440 	.word	0x40020440
 80024b8:	40020458 	.word	0x40020458
 80024bc:	40020470 	.word	0x40020470
 80024c0:	40020488 	.word	0x40020488
 80024c4:	400204a0 	.word	0x400204a0
 80024c8:	400204b8 	.word	0x400204b8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <HAL_DMA_Abort_IT+0x428>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d072      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a5b      	ldr	r2, [pc, #364]	; (8002658 <HAL_DMA_Abort_IT+0x42c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d06d      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a59      	ldr	r2, [pc, #356]	; (800265c <HAL_DMA_Abort_IT+0x430>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d068      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_DMA_Abort_IT+0x434>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d063      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a56      	ldr	r2, [pc, #344]	; (8002664 <HAL_DMA_Abort_IT+0x438>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d05e      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a55      	ldr	r2, [pc, #340]	; (8002668 <HAL_DMA_Abort_IT+0x43c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d059      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a53      	ldr	r2, [pc, #332]	; (800266c <HAL_DMA_Abort_IT+0x440>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d054      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_DMA_Abort_IT+0x444>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d04f      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <HAL_DMA_Abort_IT+0x448>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d04a      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a4f      	ldr	r2, [pc, #316]	; (8002678 <HAL_DMA_Abort_IT+0x44c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d045      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4d      	ldr	r2, [pc, #308]	; (800267c <HAL_DMA_Abort_IT+0x450>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d040      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a4c      	ldr	r2, [pc, #304]	; (8002680 <HAL_DMA_Abort_IT+0x454>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d03b      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a4a      	ldr	r2, [pc, #296]	; (8002684 <HAL_DMA_Abort_IT+0x458>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d036      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a49      	ldr	r2, [pc, #292]	; (8002688 <HAL_DMA_Abort_IT+0x45c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d031      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a47      	ldr	r2, [pc, #284]	; (800268c <HAL_DMA_Abort_IT+0x460>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d02c      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a46      	ldr	r2, [pc, #280]	; (8002690 <HAL_DMA_Abort_IT+0x464>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d027      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a44      	ldr	r2, [pc, #272]	; (8002694 <HAL_DMA_Abort_IT+0x468>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d022      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a43      	ldr	r2, [pc, #268]	; (8002698 <HAL_DMA_Abort_IT+0x46c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d01d      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a41      	ldr	r2, [pc, #260]	; (800269c <HAL_DMA_Abort_IT+0x470>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d018      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a40      	ldr	r2, [pc, #256]	; (80026a0 <HAL_DMA_Abort_IT+0x474>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3e      	ldr	r2, [pc, #248]	; (80026a4 <HAL_DMA_Abort_IT+0x478>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00e      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a3d      	ldr	r2, [pc, #244]	; (80026a8 <HAL_DMA_Abort_IT+0x47c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a3b      	ldr	r2, [pc, #236]	; (80026ac <HAL_DMA_Abort_IT+0x480>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_DMA_Abort_IT+0x3a0>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3a      	ldr	r2, [pc, #232]	; (80026b0 <HAL_DMA_Abort_IT+0x484>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_DMA_Abort_IT+0x3a4>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_DMA_Abort_IT+0x3a6>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d028      	beq.n	8002628 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2201      	movs	r2, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002604:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00c      	beq.n	8002628 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800261c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002626:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40020010 	.word	0x40020010
 8002658:	40020028 	.word	0x40020028
 800265c:	40020040 	.word	0x40020040
 8002660:	40020058 	.word	0x40020058
 8002664:	40020070 	.word	0x40020070
 8002668:	40020088 	.word	0x40020088
 800266c:	400200a0 	.word	0x400200a0
 8002670:	400200b8 	.word	0x400200b8
 8002674:	40020410 	.word	0x40020410
 8002678:	40020428 	.word	0x40020428
 800267c:	40020440 	.word	0x40020440
 8002680:	40020458 	.word	0x40020458
 8002684:	40020470 	.word	0x40020470
 8002688:	40020488 	.word	0x40020488
 800268c:	400204a0 	.word	0x400204a0
 8002690:	400204b8 	.word	0x400204b8
 8002694:	58025408 	.word	0x58025408
 8002698:	5802541c 	.word	0x5802541c
 800269c:	58025430 	.word	0x58025430
 80026a0:	58025444 	.word	0x58025444
 80026a4:	58025458 	.word	0x58025458
 80026a8:	5802546c 	.word	0x5802546c
 80026ac:	58025480 	.word	0x58025480
 80026b0:	58025494 	.word	0x58025494

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_GPIO_Init+0x234>)
 80026c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026c6:	e194      	b.n	80029f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8186 	beq.w	80029ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d00b      	beq.n	8002700 <HAL_GPIO_Init+0x4c>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d007      	beq.n	8002700 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026f4:	2b11      	cmp	r3, #17
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b12      	cmp	r3, #18
 80026fe:	d130      	bne.n	8002762 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002736:	2201      	movs	r2, #1
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f003 0201 	and.w	r2, r3, #1
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0xee>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d123      	bne.n	80027ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	69b9      	ldr	r1, [r7, #24]
 80027e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0203 	and.w	r2, r3, #3
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80e0 	beq.w	80029ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282c:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <HAL_GPIO_Init+0x238>)
 800282e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002832:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_GPIO_Init+0x238>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_GPIO_Init+0x238>)
 800283e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	4a29      	ldr	r2, [pc, #164]	; (80028f0 <HAL_GPIO_Init+0x23c>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a20      	ldr	r2, [pc, #128]	; (80028f4 <HAL_GPIO_Init+0x240>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d052      	beq.n	800291c <HAL_GPIO_Init+0x268>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <HAL_GPIO_Init+0x244>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_GPIO_Init+0x22e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_GPIO_Init+0x248>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02b      	beq.n	80028de <HAL_GPIO_Init+0x22a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_GPIO_Init+0x24c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d025      	beq.n	80028da <HAL_GPIO_Init+0x226>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <HAL_GPIO_Init+0x250>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01f      	beq.n	80028d6 <HAL_GPIO_Init+0x222>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_GPIO_Init+0x254>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x21e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_GPIO_Init+0x258>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x21a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_GPIO_Init+0x25c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x216>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_GPIO_Init+0x260>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x212>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_GPIO_Init+0x264>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x20e>
 80028be:	2309      	movs	r3, #9
 80028c0:	e02d      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028c2:	230a      	movs	r3, #10
 80028c4:	e02b      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028c6:	2308      	movs	r3, #8
 80028c8:	e029      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028ca:	2307      	movs	r3, #7
 80028cc:	e027      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e025      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e023      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e021      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028da:	2303      	movs	r3, #3
 80028dc:	e01f      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028de:	2302      	movs	r3, #2
 80028e0:	e01d      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e01b      	b.n	800291e <HAL_GPIO_Init+0x26a>
 80028e6:	bf00      	nop
 80028e8:	58000080 	.word	0x58000080
 80028ec:	58024400 	.word	0x58024400
 80028f0:	58000400 	.word	0x58000400
 80028f4:	58020000 	.word	0x58020000
 80028f8:	58020400 	.word	0x58020400
 80028fc:	58020800 	.word	0x58020800
 8002900:	58020c00 	.word	0x58020c00
 8002904:	58021000 	.word	0x58021000
 8002908:	58021400 	.word	0x58021400
 800290c:	58021800 	.word	0x58021800
 8002910:	58021c00 	.word	0x58021c00
 8002914:	58022000 	.word	0x58022000
 8002918:	58022400 	.word	0x58022400
 800291c:	2300      	movs	r3, #0
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	f002 0203 	and.w	r2, r2, #3
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	4093      	lsls	r3, r2
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800292e:	4938      	ldr	r1, [pc, #224]	; (8002a10 <HAL_GPIO_Init+0x35c>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3301      	adds	r3, #1
 80029f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f47f ae63 	bne.w	80026c8 <HAL_GPIO_Init+0x14>
  }
}
 8002a02:	bf00      	nop
 8002a04:	3724      	adds	r7, #36	; 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	58000400 	.word	0x58000400

08002a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
 8002a20:	4613      	mov	r3, r2
 8002a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a30:	e003      	b.n	8002a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	041a      	lsls	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	619a      	str	r2, [r3, #24]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002a50:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_HSEM_FastTake+0x2c>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3320      	adds	r3, #32
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_HSEM_FastTake+0x30>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	58026400 	.word	0x58026400
 8002a78:	80000300 	.word	0x80000300

08002a7c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002a86:	4906      	ldr	r1, [pc, #24]	; (8002aa0 <HAL_HSEM_Release+0x24>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	58026400 	.word	0x58026400

08002aa4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002aac:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d00a      	beq.n	8002ace <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d001      	beq.n	8002aca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e040      	b.n	8002b4c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e03e      	b.n	8002b4c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002ad6:	491f      	ldr	r1, [pc, #124]	; (8002b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ade:	f7ff fa5b 	bl	8001f98 <HAL_GetTick>
 8002ae2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ae4:	e009      	b.n	8002afa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ae6:	f7ff fa57 	bl	8001f98 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af4:	d901      	bls.n	8002afa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e028      	b.n	8002b4c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b1e      	cmp	r3, #30
 8002b0c:	d008      	beq.n	8002b20 <HAL_PWREx_ConfigSupply+0x7c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b2e      	cmp	r3, #46	; 0x2e
 8002b12:	d005      	beq.n	8002b20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b1d      	cmp	r3, #29
 8002b18:	d002      	beq.n	8002b20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b2d      	cmp	r3, #45	; 0x2d
 8002b1e:	d114      	bne.n	8002b4a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002b20:	f7ff fa3a 	bl	8001f98 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b26:	e009      	b.n	8002b3c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b28:	f7ff fa36 	bl	8001f98 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b36:	d901      	bls.n	8002b3c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e007      	b.n	8002b4c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d1ee      	bne.n	8002b28 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	58024800 	.word	0x58024800

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	; 0x30
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e3ff      	b.n	800336a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8087 	beq.w	8002c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b78:	4b99      	ldr	r3, [pc, #612]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b82:	4b97      	ldr	r3, [pc, #604]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d007      	beq.n	8002b9e <HAL_RCC_OscConfig+0x46>
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	2b18      	cmp	r3, #24
 8002b92:	d110      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x5e>
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9e:	4b90      	ldr	r3, [pc, #576]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d06c      	beq.n	8002c84 <HAL_RCC_OscConfig+0x12c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d168      	bne.n	8002c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e3d9      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x76>
 8002bc0:	4b87      	ldr	r3, [pc, #540]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a86      	ldr	r2, [pc, #536]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e02e      	b.n	8002c2c <HAL_RCC_OscConfig+0xd4>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x98>
 8002bd6:	4b82      	ldr	r3, [pc, #520]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a81      	ldr	r2, [pc, #516]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b7f      	ldr	r3, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7e      	ldr	r2, [pc, #504]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e01d      	b.n	8002c2c <HAL_RCC_OscConfig+0xd4>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0xbc>
 8002bfa:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a78      	ldr	r2, [pc, #480]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a75      	ldr	r2, [pc, #468]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0xd4>
 8002c14:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a71      	ldr	r2, [pc, #452]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7ff f9b0 	bl	8001f98 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7ff f9ac 	bl	8001f98 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e38d      	b.n	800336a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c4e:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe4>
 8002c5a:	e014      	b.n	8002c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7ff f99c 	bl	8001f98 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c64:	f7ff f998 	bl	8001f98 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e379      	b.n	800336a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c76:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x10c>
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80ae 	beq.w	8002df0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c94:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c9e:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_RCC_OscConfig+0x162>
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2b18      	cmp	r3, #24
 8002cae:	d13a      	bne.n	8002d26 <HAL_RCC_OscConfig+0x1ce>
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d135      	bne.n	8002d26 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cba:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x17a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e34b      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	f7ff f98f 	bl	8001ff4 <HAL_GetREVID>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d817      	bhi.n	8002d10 <HAL_RCC_OscConfig+0x1b8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d108      	bne.n	8002cfa <HAL_RCC_OscConfig+0x1a2>
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002cf0:	4a3b      	ldr	r2, [pc, #236]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf8:	e07a      	b.n	8002df0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	031b      	lsls	r3, r3, #12
 8002d08:	4935      	ldr	r1, [pc, #212]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d0e:	e06f      	b.n	8002df0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	4930      	ldr	r1, [pc, #192]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d24:	e064      	b.n	8002df0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d045      	beq.n	8002dba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d2e:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0219 	bic.w	r2, r3, #25
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	4929      	ldr	r1, [pc, #164]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff f92a 	bl	8001f98 <HAL_GetTick>
 8002d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d48:	f7ff f926 	bl	8001f98 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e307      	b.n	800336a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d5a:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	f7ff f945 	bl	8001ff4 <HAL_GetREVID>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d817      	bhi.n	8002da4 <HAL_RCC_OscConfig+0x24c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d108      	bne.n	8002d8e <HAL_RCC_OscConfig+0x236>
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d84:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8a:	6053      	str	r3, [r2, #4]
 8002d8c:	e030      	b.n	8002df0 <HAL_RCC_OscConfig+0x298>
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	031b      	lsls	r3, r3, #12
 8002d9c:	4910      	ldr	r1, [pc, #64]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
 8002da2:	e025      	b.n	8002df0 <HAL_RCC_OscConfig+0x298>
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	490b      	ldr	r1, [pc, #44]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
 8002db8:	e01a      	b.n	8002df0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <HAL_RCC_OscConfig+0x288>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7ff f8e7 	bl	8001f98 <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dce:	f7ff f8e3 	bl	8001f98 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d903      	bls.n	8002de4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e2c4      	b.n	800336a <HAL_RCC_OscConfig+0x812>
 8002de0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002de4:	4ba4      	ldr	r3, [pc, #656]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a9 	beq.w	8002f50 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfe:	4b9e      	ldr	r3, [pc, #632]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e08:	4b9b      	ldr	r3, [pc, #620]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d007      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2cc>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b18      	cmp	r3, #24
 8002e18:	d13a      	bne.n	8002e90 <HAL_RCC_OscConfig+0x338>
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d135      	bne.n	8002e90 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e24:	4b94      	ldr	r3, [pc, #592]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2e4>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e296      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e3c:	f7ff f8da 	bl	8001ff4 <HAL_GetREVID>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d817      	bhi.n	8002e7a <HAL_RCC_OscConfig+0x322>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d108      	bne.n	8002e64 <HAL_RCC_OscConfig+0x30c>
 8002e52:	4b89      	ldr	r3, [pc, #548]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e5a:	4a87      	ldr	r2, [pc, #540]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e62:	e075      	b.n	8002f50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e64:	4b84      	ldr	r3, [pc, #528]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	069b      	lsls	r3, r3, #26
 8002e72:	4981      	ldr	r1, [pc, #516]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e78:	e06a      	b.n	8002f50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e7a:	4b7f      	ldr	r3, [pc, #508]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	061b      	lsls	r3, r3, #24
 8002e88:	497b      	ldr	r1, [pc, #492]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e8e:	e05f      	b.n	8002f50 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d042      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e98:	4b77      	ldr	r3, [pc, #476]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a76      	ldr	r2, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f878 	bl	8001f98 <HAL_GetTick>
 8002ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002eac:	f7ff f874 	bl	8001f98 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e255      	b.n	800336a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ebe:	4b6e      	ldr	r3, [pc, #440]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002eca:	f7ff f893 	bl	8001ff4 <HAL_GetREVID>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d817      	bhi.n	8002f08 <HAL_RCC_OscConfig+0x3b0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d108      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x39a>
 8002ee0:	4b65      	ldr	r3, [pc, #404]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ee8:	4a63      	ldr	r2, [pc, #396]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eee:	6053      	str	r3, [r2, #4]
 8002ef0:	e02e      	b.n	8002f50 <HAL_RCC_OscConfig+0x3f8>
 8002ef2:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	069b      	lsls	r3, r3, #26
 8002f00:	495d      	ldr	r1, [pc, #372]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e023      	b.n	8002f50 <HAL_RCC_OscConfig+0x3f8>
 8002f08:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	4958      	ldr	r1, [pc, #352]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60cb      	str	r3, [r1, #12]
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f1e:	4b56      	ldr	r3, [pc, #344]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a55      	ldr	r2, [pc, #340]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7ff f835 	bl	8001f98 <HAL_GetTick>
 8002f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f32:	f7ff f831 	bl	8001f98 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e212      	b.n	800336a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d036      	beq.n	8002fca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d019      	beq.n	8002f98 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f64:	4b44      	ldr	r3, [pc, #272]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f68:	4a43      	ldr	r2, [pc, #268]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7ff f812 	bl	8001f98 <HAL_GetTick>
 8002f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f78:	f7ff f80e 	bl	8001f98 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1ef      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x420>
 8002f96:	e018      	b.n	8002fca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	4a36      	ldr	r2, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe fff8 	bl	8001f98 <HAL_GetTick>
 8002fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fe fff4 	bl	8001f98 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e1d5      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d036      	beq.n	8003044 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d019      	beq.n	8003012 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a25      	ldr	r2, [pc, #148]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8002fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fea:	f7fe ffd5 	bl	8001f98 <HAL_GetTick>
 8002fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ff2:	f7fe ffd1 	bl	8001f98 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e1b2      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003004:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x49a>
 8003010:	e018      	b.n	8003044 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003012:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a18      	ldr	r2, [pc, #96]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 8003018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800301c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800301e:	f7fe ffbb 	bl	8001f98 <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003026:	f7fe ffb7 	bl	8001f98 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e198      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <HAL_RCC_OscConfig+0x520>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8085 	beq.w	800315c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_OscConfig+0x524>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_RCC_OscConfig+0x524>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800305e:	f7fe ff9b 	bl	8001f98 <HAL_GetTick>
 8003062:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003064:	e00c      	b.n	8003080 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fe ff97 	bl	8001f98 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b64      	cmp	r3, #100	; 0x64
 8003072:	d905      	bls.n	8003080 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e178      	b.n	800336a <HAL_RCC_OscConfig+0x812>
 8003078:	58024400 	.word	0x58024400
 800307c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003080:	4b96      	ldr	r3, [pc, #600]	; (80032dc <HAL_RCC_OscConfig+0x784>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ec      	beq.n	8003066 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x54a>
 8003094:	4b92      	ldr	r3, [pc, #584]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a91      	ldr	r2, [pc, #580]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	e02d      	b.n	80030fe <HAL_RCC_OscConfig+0x5a6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x56c>
 80030aa:	4b8d      	ldr	r3, [pc, #564]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a8c      	ldr	r2, [pc, #560]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	4b8a      	ldr	r3, [pc, #552]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a89      	ldr	r2, [pc, #548]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
 80030c2:	e01c      	b.n	80030fe <HAL_RCC_OscConfig+0x5a6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d10c      	bne.n	80030e6 <HAL_RCC_OscConfig+0x58e>
 80030cc:	4b84      	ldr	r3, [pc, #528]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	4a83      	ldr	r2, [pc, #524]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030d2:	f043 0304 	orr.w	r3, r3, #4
 80030d6:	6713      	str	r3, [r2, #112]	; 0x70
 80030d8:	4b81      	ldr	r3, [pc, #516]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	4a80      	ldr	r2, [pc, #512]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6713      	str	r3, [r2, #112]	; 0x70
 80030e4:	e00b      	b.n	80030fe <HAL_RCC_OscConfig+0x5a6>
 80030e6:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a7d      	ldr	r2, [pc, #500]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
 80030f2:	4b7b      	ldr	r3, [pc, #492]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a7a      	ldr	r2, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d015      	beq.n	8003132 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fe ff47 	bl	8001f98 <HAL_GetTick>
 800310a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fe ff43 	bl	8001f98 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	; 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e122      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003124:	4b6e      	ldr	r3, [pc, #440]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ee      	beq.n	800310e <HAL_RCC_OscConfig+0x5b6>
 8003130:	e014      	b.n	800315c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003132:	f7fe ff31 	bl	8001f98 <HAL_GetTick>
 8003136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003138:	e00a      	b.n	8003150 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313a:	f7fe ff2d 	bl	8001f98 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	; 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e10c      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003150:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ee      	bne.n	800313a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8101 	beq.w	8003368 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003166:	4b5e      	ldr	r3, [pc, #376]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800316e:	2b18      	cmp	r3, #24
 8003170:	f000 80bc 	beq.w	80032ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2b02      	cmp	r3, #2
 800317a:	f040 8095 	bne.w	80032a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	4b58      	ldr	r3, [pc, #352]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a57      	ldr	r2, [pc, #348]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7fe ff05 	bl	8001f98 <HAL_GetTick>
 800318e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003192:	f7fe ff01 	bl	8001f98 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e0e2      	b.n	800336a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031a4:	4b4e      	ldr	r3, [pc, #312]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031b0:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80031b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031b4:	4b4b      	ldr	r3, [pc, #300]	; (80032e4 <HAL_RCC_OscConfig+0x78c>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	430a      	orrs	r2, r1
 80031c4:	4946      	ldr	r1, [pc, #280]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	628b      	str	r3, [r1, #40]	; 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	3b01      	subs	r3, #1
 80031d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	3b01      	subs	r3, #1
 80031da:	025b      	lsls	r3, r3, #9
 80031dc:	b29b      	uxth	r3, r3
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	3b01      	subs	r3, #1
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	3b01      	subs	r3, #1
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80031fa:	4939      	ldr	r1, [pc, #228]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003200:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4a36      	ldr	r2, [pc, #216]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003206:	f023 0301 	bic.w	r3, r3, #1
 800320a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800320e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCC_OscConfig+0x790>)
 8003212:	4013      	ands	r3, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003218:	00d2      	lsls	r2, r2, #3
 800321a:	4931      	ldr	r1, [pc, #196]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800321c:	4313      	orrs	r3, r2
 800321e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003220:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	f023 020c 	bic.w	r2, r3, #12
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	492c      	ldr	r1, [pc, #176]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800322e:	4313      	orrs	r3, r2
 8003230:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003232:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	f023 0202 	bic.w	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	4928      	ldr	r1, [pc, #160]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003240:	4313      	orrs	r3, r2
 8003242:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003244:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	4a1c      	ldr	r2, [pc, #112]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fe8a 	bl	8001f98 <HAL_GetTick>
 8003284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe fe86 	bl	8001f98 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e067      	b.n	800336a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x730>
 80032a6:	e05f      	b.n	8003368 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80032ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fe70 	bl	8001f98 <HAL_GetTick>
 80032b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fe fe6c 	bl	8001f98 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e04d      	b.n	800336a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <HAL_RCC_OscConfig+0x788>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x764>
 80032da:	e045      	b.n	8003368 <HAL_RCC_OscConfig+0x810>
 80032dc:	58024800 	.word	0x58024800
 80032e0:	58024400 	.word	0x58024400
 80032e4:	fffffc0c 	.word	0xfffffc0c
 80032e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032ec:	4b21      	ldr	r3, [pc, #132]	; (8003374 <HAL_RCC_OscConfig+0x81c>)
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_RCC_OscConfig+0x81c>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d031      	beq.n	8003364 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f003 0203 	and.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d12a      	bne.n	8003364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d122      	bne.n	8003364 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d11a      	bne.n	8003364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0a5b      	lsrs	r3, r3, #9
 8003332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d111      	bne.n	8003364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d108      	bne.n	8003364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	0e1b      	lsrs	r3, r3, #24
 8003356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3730      	adds	r7, #48	; 0x30
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	58024400 	.word	0x58024400

08003378 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e19c      	b.n	80036c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800338c:	4b8a      	ldr	r3, [pc, #552]	; (80035b8 <HAL_RCC_ClockConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d910      	bls.n	80033bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b87      	ldr	r3, [pc, #540]	; (80035b8 <HAL_RCC_ClockConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 020f 	bic.w	r2, r3, #15
 80033a2:	4985      	ldr	r1, [pc, #532]	; (80035b8 <HAL_RCC_ClockConfig+0x240>)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b83      	ldr	r3, [pc, #524]	; (80035b8 <HAL_RCC_ClockConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e184      	b.n	80036c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d010      	beq.n	80033ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	4b7b      	ldr	r3, [pc, #492]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d908      	bls.n	80033ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033d8:	4b78      	ldr	r3, [pc, #480]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	4975      	ldr	r1, [pc, #468]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	4b70      	ldr	r3, [pc, #448]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003402:	429a      	cmp	r2, r3
 8003404:	d908      	bls.n	8003418 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003406:	4b6d      	ldr	r3, [pc, #436]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	496a      	ldr	r1, [pc, #424]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003414:	4313      	orrs	r3, r2
 8003416:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	d010      	beq.n	8003446 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	4b64      	ldr	r3, [pc, #400]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003430:	429a      	cmp	r2, r3
 8003432:	d908      	bls.n	8003446 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003434:	4b61      	ldr	r3, [pc, #388]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	495e      	ldr	r1, [pc, #376]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003442:	4313      	orrs	r3, r2
 8003444:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d010      	beq.n	8003474 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800345e:	429a      	cmp	r2, r3
 8003460:	d908      	bls.n	8003474 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	4953      	ldr	r1, [pc, #332]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003470:	4313      	orrs	r3, r2
 8003472:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d010      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	4b4d      	ldr	r3, [pc, #308]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	429a      	cmp	r2, r3
 800348e:	d908      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f023 020f 	bic.w	r2, r3, #15
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4947      	ldr	r1, [pc, #284]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d055      	beq.n	800355a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4940      	ldr	r1, [pc, #256]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034c8:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d121      	bne.n	8003518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0f6      	b.n	80036c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d107      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034e0:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d115      	bne.n	8003518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0ea      	b.n	80036c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0de      	b.n	80036c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003508:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0d6      	b.n	80036c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f023 0207 	bic.w	r2, r3, #7
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4925      	ldr	r1, [pc, #148]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352a:	f7fe fd35 	bl	8001f98 <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003530:	e00a      	b.n	8003548 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003532:	f7fe fd31 	bl	8001f98 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0be      	b.n	80036c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003548:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	429a      	cmp	r2, r3
 8003558:	d1eb      	bne.n	8003532 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d010      	beq.n	8003588 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	429a      	cmp	r2, r3
 8003574:	d208      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f023 020f 	bic.w	r2, r3, #15
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	490e      	ldr	r1, [pc, #56]	; (80035bc <HAL_RCC_ClockConfig+0x244>)
 8003584:	4313      	orrs	r3, r2
 8003586:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_ClockConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d214      	bcs.n	80035c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCC_ClockConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 020f 	bic.w	r2, r3, #15
 800359e:	4906      	ldr	r1, [pc, #24]	; (80035b8 <HAL_RCC_ClockConfig+0x240>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <HAL_RCC_ClockConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e086      	b.n	80036c6 <HAL_RCC_ClockConfig+0x34e>
 80035b8:	52002000 	.word	0x52002000
 80035bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d010      	beq.n	80035ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035d8:	429a      	cmp	r2, r3
 80035da:	d208      	bcs.n	80035ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035dc:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	4939      	ldr	r1, [pc, #228]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d010      	beq.n	800361c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003606:	429a      	cmp	r2, r3
 8003608:	d208      	bcs.n	800361c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	492e      	ldr	r1, [pc, #184]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 8003618:	4313      	orrs	r3, r2
 800361a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d010      	beq.n	800364a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003634:	429a      	cmp	r2, r3
 8003636:	d208      	bcs.n	800364a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	4922      	ldr	r1, [pc, #136]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 8003646:	4313      	orrs	r3, r2
 8003648:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d010      	beq.n	8003678 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003662:	429a      	cmp	r2, r3
 8003664:	d208      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003666:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4917      	ldr	r1, [pc, #92]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 8003674:	4313      	orrs	r3, r2
 8003676:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003678:	f000 f834 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800367c:	4601      	mov	r1, r0
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x35c>)
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	fa21 f303 	lsr.w	r3, r1, r3
 8003694:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <HAL_RCC_ClockConfig+0x358>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <HAL_RCC_ClockConfig+0x35c>)
 80036a0:	5cd3      	ldrb	r3, [r2, r3]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x360>)
 80036ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036b0:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x364>)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_RCC_ClockConfig+0x368>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fc22 	bl	8001f04 <HAL_InitTick>
 80036c0:	4603      	mov	r3, r0
 80036c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	58024400 	.word	0x58024400
 80036d4:	08009b5c 	.word	0x08009b5c
 80036d8:	24000004 	.word	0x24000004
 80036dc:	24000000 	.word	0x24000000
 80036e0:	24000008 	.word	0x24000008

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ea:	4baf      	ldr	r3, [pc, #700]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f2:	2b18      	cmp	r3, #24
 80036f4:	f200 814e 	bhi.w	8003994 <HAL_RCC_GetSysClockFreq+0x2b0>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <HAL_RCC_GetSysClockFreq+0x1c>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003765 	.word	0x08003765
 8003704:	08003995 	.word	0x08003995
 8003708:	08003995 	.word	0x08003995
 800370c:	08003995 	.word	0x08003995
 8003710:	08003995 	.word	0x08003995
 8003714:	08003995 	.word	0x08003995
 8003718:	08003995 	.word	0x08003995
 800371c:	08003995 	.word	0x08003995
 8003720:	0800378b 	.word	0x0800378b
 8003724:	08003995 	.word	0x08003995
 8003728:	08003995 	.word	0x08003995
 800372c:	08003995 	.word	0x08003995
 8003730:	08003995 	.word	0x08003995
 8003734:	08003995 	.word	0x08003995
 8003738:	08003995 	.word	0x08003995
 800373c:	08003995 	.word	0x08003995
 8003740:	08003791 	.word	0x08003791
 8003744:	08003995 	.word	0x08003995
 8003748:	08003995 	.word	0x08003995
 800374c:	08003995 	.word	0x08003995
 8003750:	08003995 	.word	0x08003995
 8003754:	08003995 	.word	0x08003995
 8003758:	08003995 	.word	0x08003995
 800375c:	08003995 	.word	0x08003995
 8003760:	08003797 	.word	0x08003797
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003764:	4b90      	ldr	r3, [pc, #576]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003770:	4b8d      	ldr	r3, [pc, #564]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	08db      	lsrs	r3, r3, #3
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	4a8c      	ldr	r2, [pc, #560]	; (80039ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
 8003780:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003782:	e10a      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003784:	4b89      	ldr	r3, [pc, #548]	; (80039ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003786:	61bb      	str	r3, [r7, #24]
    break;
 8003788:	e107      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800378a:	4b89      	ldr	r3, [pc, #548]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800378c:	61bb      	str	r3, [r7, #24]
    break;
 800378e:	e104      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003790:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003792:	61bb      	str	r3, [r7, #24]
    break;
 8003794:	e101      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003796:	4b84      	ldr	r3, [pc, #528]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80037a0:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037ac:	4b7e      	ldr	r3, [pc, #504]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80037b6:	4b7c      	ldr	r3, [pc, #496]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	08db      	lsrs	r3, r3, #3
 80037bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80da 	beq.w	800398e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d05a      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x1b2>
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d302      	bcc.n	80037ea <HAL_RCC_GetSysClockFreq+0x106>
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d078      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0x1f6>
 80037e8:	e099      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037ea:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d02d      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037f6:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	08db      	lsrs	r3, r3, #3
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	4a6a      	ldr	r2, [pc, #424]	; (80039ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003802:	fa22 f303 	lsr.w	r3, r2, r3
 8003806:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003820:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003830:	ed97 6a02 	vldr	s12, [r7, #8]
 8003834:	eddf 5a60 	vldr	s11, [pc, #384]	; 80039b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003850:	e087      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80039bc <HAL_RCC_GetSysClockFreq+0x2d8>
 8003860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003874:	ed97 6a02 	vldr	s12, [r7, #8]
 8003878:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80039b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800387c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800388c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003894:	e065      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	ee07 3a90 	vmov	s15, r3
 800389c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80039c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80038a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a8:	4b3f      	ldr	r3, [pc, #252]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80038bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80039b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80038c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038d8:	e043      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	ee07 3a90 	vmov	s15, r3
 80038e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80039c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80038e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ec:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003900:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80039b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003918:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800391c:	e021      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	ee07 3a90 	vmov	s15, r3
 8003924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003928:	eddf 6a25 	vldr	s13, [pc, #148]	; 80039c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800392c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003940:	ed97 6a02 	vldr	s12, [r7, #8]
 8003944:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80039b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800394c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003960:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	0a5b      	lsrs	r3, r3, #9
 8003968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800396c:	3301      	adds	r3, #1
 800396e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800397a:	edd7 6a07 	vldr	s13, [r7, #28]
 800397e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003986:	ee17 3a90 	vmov	r3, s15
 800398a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800398c:	e005      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
    break;
 8003992:	e002      	b.n	800399a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003996:	61bb      	str	r3, [r7, #24]
    break;
 8003998:	bf00      	nop
  }

  return sysclockfreq;
 800399a:	69bb      	ldr	r3, [r7, #24]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3724      	adds	r7, #36	; 0x24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	58024400 	.word	0x58024400
 80039ac:	03d09000 	.word	0x03d09000
 80039b0:	003d0900 	.word	0x003d0900
 80039b4:	02625a00 	.word	0x02625a00
 80039b8:	46000000 	.word	0x46000000
 80039bc:	4c742400 	.word	0x4c742400
 80039c0:	4a742400 	.word	0x4a742400
 80039c4:	4c189680 	.word	0x4c189680

080039c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039ce:	f7ff fe89 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80039d2:	4601      	mov	r1, r0
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80039e0:	5cd3      	ldrb	r3, [r2, r3]
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	fa21 f303 	lsr.w	r3, r1, r3
 80039ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	08009b5c 	.word	0x08009b5c
 8003a20:	24000004 	.word	0x24000004
 8003a24:	24000000 	.word	0x24000000

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a2c:	f7ff ffcc 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a30:	4601      	mov	r1, r0
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4a04      	ldr	r2, [pc, #16]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	08009b5c 	.word	0x08009b5c

08003a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a58:	f7ff ffb6 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4601      	mov	r1, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	08009b5c 	.word	0x08009b5c

08003a80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d03d      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa4:	d013      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aaa:	d802      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003ab0:	e01f      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ab6:	d013      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003ab8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003abc:	d01c      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003abe:	e018      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac0:	4baf      	ldr	r3, [pc, #700]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	4aae      	ldr	r2, [pc, #696]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003acc:	e015      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 f96f 	bl	8004db8 <RCCEx_PLL2_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ade:	e00c      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3324      	adds	r3, #36	; 0x24
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fa18 	bl	8004f1c <RCCEx_PLL3_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003af0:	e003      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
      break;
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b00:	4b9f      	ldr	r3, [pc, #636]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b0c:	499c      	ldr	r1, [pc, #624]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	650b      	str	r3, [r1, #80]	; 0x50
 8003b12:	e001      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d03d      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d826      	bhi.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b49 	.word	0x08003b49
 8003b38:	08003b57 	.word	0x08003b57
 8003b3c:	08003b69 	.word	0x08003b69
 8003b40:	08003b81 	.word	0x08003b81
 8003b44:	08003b81 	.word	0x08003b81
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b48:	4b8d      	ldr	r3, [pc, #564]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	4a8c      	ldr	r2, [pc, #560]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b54:	e015      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f92b 	bl	8004db8 <RCCEx_PLL2_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b66:	e00c      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f9d4 	bl	8004f1c <RCCEx_PLL3_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b78:	e003      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7e:	e000      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b88:	4b7d      	ldr	r3, [pc, #500]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	f023 0207 	bic.w	r2, r3, #7
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	497a      	ldr	r1, [pc, #488]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	650b      	str	r3, [r1, #80]	; 0x50
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
 8003b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d03e      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d01c      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003bb4:	2b80      	cmp	r3, #128	; 0x80
 8003bb6:	d804      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d00d      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003bc0:	e01e      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003bc4:	d01f      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bca:	d01e      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003bcc:	e018      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bce:	4b6c      	ldr	r3, [pc, #432]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	4a6b      	ldr	r2, [pc, #428]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bda:	e017      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 f8e8 	bl	8004db8 <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bec:	e00e      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3324      	adds	r3, #36	; 0x24
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f001 f991 	bl	8004f1c <RCCEx_PLL3_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bfe:	e005      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
      break;
 8003c04:	e002      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c12:	4b5b      	ldr	r3, [pc, #364]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c16:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	4958      	ldr	r1, [pc, #352]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	650b      	str	r3, [r1, #80]	; 0x50
 8003c24:	e001      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d044      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c40:	d01f      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c46:	d805      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c50:	d00e      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003c52:	e01f      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003c54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c58:	d01f      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c5e:	d01e      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003c60:	e018      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	4a46      	ldr	r2, [pc, #280]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c6e:	e017      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 f89e 	bl	8004db8 <RCCEx_PLL2_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c80:	e00e      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3324      	adds	r3, #36	; 0x24
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f001 f947 	bl	8004f1c <RCCEx_PLL3_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c92:	e005      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
      break;
 8003c98:	e002      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ca6:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cb4:	4932      	ldr	r1, [pc, #200]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	658b      	str	r3, [r1, #88]	; 0x58
 8003cba:	e001      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d044      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cd6:	d01f      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cdc:	d805      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003ce2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce6:	d00e      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003ce8:	e01f      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003cea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cee:	d01f      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003cf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf4:	d01e      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cf6:	e018      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf8:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d04:	e017      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 f853 	bl	8004db8 <RCCEx_PLL2_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d16:	e00e      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3324      	adds	r3, #36	; 0x24
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 f8fc 	bl	8004f1c <RCCEx_PLL3_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d28:	e005      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003d30:	bf00      	nop
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d4a:	490d      	ldr	r1, [pc, #52]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	658b      	str	r3, [r1, #88]	; 0x58
 8003d50:	e001      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d035      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d00c      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d802      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d01b      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003d72:	e017      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d00c      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003d78:	2b30      	cmp	r3, #48	; 0x30
 8003d7a:	d018      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003d7c:	e012      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d84:	4baf      	ldr	r3, [pc, #700]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4aae      	ldr	r2, [pc, #696]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d90:	e00e      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2102      	movs	r1, #2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 f80d 	bl	8004db8 <RCCEx_PLL2_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003da2:	e005      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	75fb      	strb	r3, [r7, #23]
      break;
 8003da8:	e002      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003db6:	4ba3      	ldr	r3, [pc, #652]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc2:	49a0      	ldr	r1, [pc, #640]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dc8:	e001      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d042      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de2:	d01f      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de8:	d805      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df2:	d00e      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003df4:	e01f      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003df6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dfa:	d01f      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e00:	d01e      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003e02:	e018      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e04:	4b8f      	ldr	r3, [pc, #572]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4a8e      	ldr	r2, [pc, #568]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e10:	e017      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3304      	adds	r3, #4
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 ffcd 	bl	8004db8 <RCCEx_PLL2_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e22:	e00e      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3324      	adds	r3, #36	; 0x24
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 f876 	bl	8004f1c <RCCEx_PLL3_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e34:	e005      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
      break;
 8003e3a:	e002      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003e3c:	bf00      	nop
 8003e3e:	e000      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e48:	4b7e      	ldr	r3, [pc, #504]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	497b      	ldr	r1, [pc, #492]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	650b      	str	r3, [r1, #80]	; 0x50
 8003e5a:	e001      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d042      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e74:	d01b      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e7a:	d805      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d022      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e86:	e01b      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003e88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e8c:	d01d      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e92:	d01c      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003e94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e98:	d01b      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003e9a:	e011      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 ff88 	bl	8004db8 <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003eac:	e012      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3324      	adds	r3, #36	; 0x24
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 f831 	bl	8004f1c <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ebe:	e009      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003eda:	4b5a      	ldr	r3, [pc, #360]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee6:	4957      	ldr	r1, [pc, #348]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	650b      	str	r3, [r1, #80]	; 0x50
 8003eec:	e001      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d044      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f08:	d01b      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f0e:	d805      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d022      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f1a:	e01b      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d01d      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f26:	d01c      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003f28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f2c:	d01b      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003f2e:	e011      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 ff3e 	bl	8004db8 <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f40:	e012      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3324      	adds	r3, #36	; 0x24
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 ffe7 	bl	8004f1c <RCCEx_PLL3_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f52:	e009      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
      break;
 8003f58:	e006      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e004      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f6e:	4b35      	ldr	r3, [pc, #212]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f7c:	4931      	ldr	r1, [pc, #196]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	658b      	str	r3, [r1, #88]	; 0x58
 8003f82:	e001      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d02d      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f9c:	d005      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fa2:	d009      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003fa8:	e00f      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003faa:	4b26      	ldr	r3, [pc, #152]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	4a25      	ldr	r2, [pc, #148]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fb6:	e00c      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fefa 	bl	8004db8 <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fc8:	e003      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe4:	4917      	ldr	r1, [pc, #92]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8003fea:	e001      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d035      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	2b03      	cmp	r3, #3
 8004002:	d81b      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004004:	a201      	add	r2, pc, #4	; (adr r2, 800400c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	08004049 	.word	0x08004049
 8004010:	0800401d 	.word	0x0800401d
 8004014:	0800402b 	.word	0x0800402b
 8004018:	08004049 	.word	0x08004049
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a08      	ldr	r2, [pc, #32]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004028:	e00f      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2102      	movs	r1, #2
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fec1 	bl	8004db8 <RCCEx_PLL2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800403a:	e006      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75fb      	strb	r3, [r7, #23]
      break;
 8004040:	e003      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004042:	bf00      	nop
 8004044:	58024400 	.word	0x58024400
      break;
 8004048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004050:	4bba      	ldr	r3, [pc, #744]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004054:	f023 0203 	bic.w	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	49b7      	ldr	r1, [pc, #732]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004062:	e001      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8086 	beq.w	8004182 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004076:	4bb2      	ldr	r3, [pc, #712]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4ab1      	ldr	r2, [pc, #708]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004082:	f7fd ff89 	bl	8001f98 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004088:	e009      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408a:	f7fd ff85 	bl	8001f98 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b64      	cmp	r3, #100	; 0x64
 8004096:	d902      	bls.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	75fb      	strb	r3, [r7, #23]
        break;
 800409c:	e005      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800409e:	4ba8      	ldr	r3, [pc, #672]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ef      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d166      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040b0:	4ba2      	ldr	r3, [pc, #648]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040ba:	4053      	eors	r3, r2
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040c4:	4b9d      	ldr	r3, [pc, #628]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040cc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ce:	4b9b      	ldr	r3, [pc, #620]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a9a      	ldr	r2, [pc, #616]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040da:	4b98      	ldr	r3, [pc, #608]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a97      	ldr	r2, [pc, #604]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040e6:	4a95      	ldr	r2, [pc, #596]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	d115      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd ff4e 	bl	8001f98 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040fe:	e00b      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004100:	f7fd ff4a 	bl	8001f98 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d902      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	75fb      	strb	r3, [r7, #23]
            break;
 8004116:	e005      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004118:	4b88      	ldr	r3, [pc, #544]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ed      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d126      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004138:	d10d      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800413a:	4b80      	ldr	r3, [pc, #512]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004148:	0919      	lsrs	r1, r3, #4
 800414a:	4b7e      	ldr	r3, [pc, #504]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800414c:	400b      	ands	r3, r1
 800414e:	497b      	ldr	r1, [pc, #492]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	610b      	str	r3, [r1, #16]
 8004154:	e005      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004156:	4b79      	ldr	r3, [pc, #484]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	4a78      	ldr	r2, [pc, #480]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800415c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004160:	6113      	str	r3, [r2, #16]
 8004162:	4b76      	ldr	r3, [pc, #472]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004164:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800416c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004170:	4972      	ldr	r1, [pc, #456]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	670b      	str	r3, [r1, #112]	; 0x70
 8004176:	e004      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	75bb      	strb	r3, [r7, #22]
 800417c:	e001      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d07d      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004192:	2b28      	cmp	r3, #40	; 0x28
 8004194:	d866      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	0800426b 	.word	0x0800426b
 80041a0:	08004265 	.word	0x08004265
 80041a4:	08004265 	.word	0x08004265
 80041a8:	08004265 	.word	0x08004265
 80041ac:	08004265 	.word	0x08004265
 80041b0:	08004265 	.word	0x08004265
 80041b4:	08004265 	.word	0x08004265
 80041b8:	08004265 	.word	0x08004265
 80041bc:	08004241 	.word	0x08004241
 80041c0:	08004265 	.word	0x08004265
 80041c4:	08004265 	.word	0x08004265
 80041c8:	08004265 	.word	0x08004265
 80041cc:	08004265 	.word	0x08004265
 80041d0:	08004265 	.word	0x08004265
 80041d4:	08004265 	.word	0x08004265
 80041d8:	08004265 	.word	0x08004265
 80041dc:	08004253 	.word	0x08004253
 80041e0:	08004265 	.word	0x08004265
 80041e4:	08004265 	.word	0x08004265
 80041e8:	08004265 	.word	0x08004265
 80041ec:	08004265 	.word	0x08004265
 80041f0:	08004265 	.word	0x08004265
 80041f4:	08004265 	.word	0x08004265
 80041f8:	08004265 	.word	0x08004265
 80041fc:	0800426b 	.word	0x0800426b
 8004200:	08004265 	.word	0x08004265
 8004204:	08004265 	.word	0x08004265
 8004208:	08004265 	.word	0x08004265
 800420c:	08004265 	.word	0x08004265
 8004210:	08004265 	.word	0x08004265
 8004214:	08004265 	.word	0x08004265
 8004218:	08004265 	.word	0x08004265
 800421c:	0800426b 	.word	0x0800426b
 8004220:	08004265 	.word	0x08004265
 8004224:	08004265 	.word	0x08004265
 8004228:	08004265 	.word	0x08004265
 800422c:	08004265 	.word	0x08004265
 8004230:	08004265 	.word	0x08004265
 8004234:	08004265 	.word	0x08004265
 8004238:	08004265 	.word	0x08004265
 800423c:	0800426b 	.word	0x0800426b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	2101      	movs	r1, #1
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fdb6 	bl	8004db8 <RCCEx_PLL2_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004250:	e00c      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3324      	adds	r3, #36	; 0x24
 8004256:	2101      	movs	r1, #1
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fe5f 	bl	8004f1c <RCCEx_PLL3_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004262:	e003      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
      break;
 8004268:	e000      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800426a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004272:	4b32      	ldr	r3, [pc, #200]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800427e:	492f      	ldr	r1, [pc, #188]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004280:	4313      	orrs	r3, r2
 8004282:	654b      	str	r3, [r1, #84]	; 0x54
 8004284:	e001      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d037      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429a:	2b05      	cmp	r3, #5
 800429c:	d820      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042e7 	.word	0x080042e7
 80042a8:	080042bd 	.word	0x080042bd
 80042ac:	080042cf 	.word	0x080042cf
 80042b0:	080042e7 	.word	0x080042e7
 80042b4:	080042e7 	.word	0x080042e7
 80042b8:	080042e7 	.word	0x080042e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fd78 	bl	8004db8 <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042cc:	e00c      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3324      	adds	r3, #36	; 0x24
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fe21 	bl	8004f1c <RCCEx_PLL3_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042de:	e003      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
      break;
 80042e4:	e000      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80042e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f023 0207 	bic.w	r2, r3, #7
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fa:	4910      	ldr	r1, [pc, #64]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004300:	e001      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d040      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	2b05      	cmp	r3, #5
 800431a:	d827      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004373 	.word	0x08004373
 8004328:	08004349 	.word	0x08004349
 800432c:	0800435b 	.word	0x0800435b
 8004330:	08004373 	.word	0x08004373
 8004334:	08004373 	.word	0x08004373
 8004338:	08004373 	.word	0x08004373
 800433c:	58024400 	.word	0x58024400
 8004340:	58024800 	.word	0x58024800
 8004344:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2101      	movs	r1, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fd32 	bl	8004db8 <RCCEx_PLL2_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004358:	e00c      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3324      	adds	r3, #36	; 0x24
 800435e:	2101      	movs	r1, #1
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fddb 	bl	8004f1c <RCCEx_PLL3_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800436a:	e003      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
      break;
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800437a:	4bb2      	ldr	r3, [pc, #712]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	f023 0207 	bic.w	r2, r3, #7
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	49ae      	ldr	r1, [pc, #696]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	658b      	str	r3, [r1, #88]	; 0x58
 800438e:	e001      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d044      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043aa:	d01b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80043ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b0:	d805      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d022      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80043b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80043bc:	e01b      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80043be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c2:	d01d      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80043c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043c8:	d01c      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80043ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043ce:	d01b      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80043d0:	e011      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fced 	bl	8004db8 <RCCEx_PLL2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043e2:	e012      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3324      	adds	r3, #36	; 0x24
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fd96 	bl	8004f1c <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043f4:	e009      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
      break;
 80043fa:	e006      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043fc:	bf00      	nop
 80043fe:	e004      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004400:	bf00      	nop
 8004402:	e002      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004410:	4b8c      	ldr	r3, [pc, #560]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441e:	4989      	ldr	r1, [pc, #548]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	654b      	str	r3, [r1, #84]	; 0x54
 8004424:	e001      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d044      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800443c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004440:	d01b      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004446:	d805      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d022      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004452:	e01b      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004458:	d01d      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800445a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800445e:	d01c      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004464:	d01b      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004466:	e011      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fca2 	bl	8004db8 <RCCEx_PLL2_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004478:	e012      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3324      	adds	r3, #36	; 0x24
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fd4b 	bl	8004f1c <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800448a:	e009      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
      break;
 8004490:	e006      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004492:	bf00      	nop
 8004494:	e004      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004496:	bf00      	nop
 8004498:	e002      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800449e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044a6:	4b67      	ldr	r3, [pc, #412]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b4:	4963      	ldr	r1, [pc, #396]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	658b      	str	r3, [r1, #88]	; 0x58
 80044ba:	e001      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d044      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d6:	d01b      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80044d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044dc:	d805      	bhi.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d022      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80044e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80044e8:	e01b      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80044ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ee:	d01d      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80044f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044f4:	d01c      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80044f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80044fa:	d01b      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80044fc:	e011      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fc57 	bl	8004db8 <RCCEx_PLL2_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800450e:	e012      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3324      	adds	r3, #36	; 0x24
 8004514:	2102      	movs	r1, #2
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fd00 	bl	8004f1c <RCCEx_PLL3_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004520:	e009      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
      break;
 8004526:	e006      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004528:	bf00      	nop
 800452a:	e004      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800452c:	bf00      	nop
 800452e:	e002      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004530:	bf00      	nop
 8004532:	e000      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800453c:	4b41      	ldr	r3, [pc, #260]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800454a:	493e      	ldr	r1, [pc, #248]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800454c:	4313      	orrs	r3, r2
 800454e:	658b      	str	r3, [r1, #88]	; 0x58
 8004550:	e001      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d10a      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3324      	adds	r3, #36	; 0x24
 8004572:	2102      	movs	r1, #2
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fcd1 	bl	8004f1c <RCCEx_PLL3_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004584:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004592:	492c      	ldr	r1, [pc, #176]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004594:	4313      	orrs	r3, r2
 8004596:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ae:	d10a      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3324      	adds	r3, #36	; 0x24
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fcb0 	bl	8004f1c <RCCEx_PLL3_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045c6:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d4:	491b      	ldr	r1, [pc, #108]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d032      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f0:	d00d      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80045f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045f6:	d016      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d111      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fbd8 	bl	8004db8 <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800460c:	e00c      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3324      	adds	r3, #36	; 0x24
 8004612:	2102      	movs	r1, #2
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fc81 	bl	8004f1c <RCCEx_PLL3_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800461e:	e003      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	75fb      	strb	r3, [r7, #23]
      break;
 8004624:	e000      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10c      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800463c:	4901      	ldr	r1, [pc, #4]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	658b      	str	r3, [r1, #88]	; 0x58
 8004642:	e003      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d02f      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004662:	d00c      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004668:	d015      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800466a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466e:	d10f      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004670:	4b79      	ldr	r3, [pc, #484]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	4a78      	ldr	r2, [pc, #480]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800467c:	e00c      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3324      	adds	r3, #36	; 0x24
 8004682:	2101      	movs	r1, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fc49 	bl	8004f1c <RCCEx_PLL3_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800468e:	e003      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	75fb      	strb	r3, [r7, #23]
      break;
 8004694:	e000      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800469e:	4b6e      	ldr	r3, [pc, #440]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ac:	496a      	ldr	r1, [pc, #424]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	654b      	str	r3, [r1, #84]	; 0x54
 80046b2:	e001      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d029      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d007      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80046d2:	e00f      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d4:	4b60      	ldr	r3, [pc, #384]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	4a5f      	ldr	r2, [pc, #380]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80046e0:	e00b      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2102      	movs	r1, #2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fb65 	bl	8004db8 <RCCEx_PLL2_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80046f2:	e002      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
      break;
 80046f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004700:	4b55      	ldr	r3, [pc, #340]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470c:	4952      	ldr	r1, [pc, #328]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800470e:	4313      	orrs	r3, r2
 8004710:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004712:	e001      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	7dfb      	ldrb	r3, [r7, #23]
 8004716:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3324      	adds	r3, #36	; 0x24
 8004728:	2102      	movs	r1, #2
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fbf6 	bl	8004f1c <RCCEx_PLL3_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d02f      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800474e:	d00c      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004754:	d802      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d011      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800475a:	e00d      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800475c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004760:	d00f      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004766:	d00e      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004768:	e006      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476a:	4b3b      	ldr	r3, [pc, #236]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	4a3a      	ldr	r2, [pc, #232]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004776:	e007      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
      break;
 800477c:	e004      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800477e:	bf00      	nop
 8004780:	e002      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004782:	bf00      	nop
 8004784:	e000      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800478e:	4b32      	ldr	r3, [pc, #200]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479a:	492f      	ldr	r1, [pc, #188]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	654b      	str	r3, [r1, #84]	; 0x54
 80047a0:	e001      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
 80047a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047b2:	4b29      	ldr	r3, [pc, #164]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	4926      	ldr	r1, [pc, #152]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047d0:	4b21      	ldr	r3, [pc, #132]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047de:	491e      	ldr	r1, [pc, #120]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047fc:	4916      	ldr	r1, [pc, #88]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	4a11      	ldr	r2, [pc, #68]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004814:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004818:	6113      	str	r3, [r2, #16]
 800481a:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004824:	490c      	ldr	r1, [pc, #48]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	da08      	bge.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483e:	4906      	ldr	r1, [pc, #24]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004840:	4313      	orrs	r3, r2
 8004842:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004844:	7dbb      	ldrb	r3, [r7, #22]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	58024400 	.word	0x58024400

0800485c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004860:	f7ff f8b2 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8004864:	4601      	mov	r1, r0
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4a04      	ldr	r2, [pc, #16]	; (8004884 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004872:	5cd3      	ldrb	r3, [r2, r3]
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	58024400 	.word	0x58024400
 8004884:	08009b5c 	.word	0x08009b5c

08004888 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004890:	4b9d      	ldr	r3, [pc, #628]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800489a:	4b9b      	ldr	r3, [pc, #620]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	0b1b      	lsrs	r3, r3, #12
 80048a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80048a6:	4b98      	ldr	r3, [pc, #608]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80048b2:	4b95      	ldr	r3, [pc, #596]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	08db      	lsrs	r3, r3, #3
 80048b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 810a 	beq.w	8004aea <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d05a      	beq.n	8004992 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d302      	bcc.n	80048e6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d078      	beq.n	80049d6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80048e4:	e099      	b.n	8004a1a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048e6:	4b88      	ldr	r3, [pc, #544]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02d      	beq.n	800494e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048f2:	4b85      	ldr	r3, [pc, #532]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	08db      	lsrs	r3, r3, #3
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	4a83      	ldr	r2, [pc, #524]	; (8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80048fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004902:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491c:	4b7a      	ldr	r3, [pc, #488]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004930:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004948:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800494c:	e087      	b.n	8004a5e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004958:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004b14 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800495c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004960:	4b69      	ldr	r3, [pc, #420]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004970:	ed97 6a03 	vldr	s12, [r7, #12]
 8004974:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004990:	e065      	b.n	8004a5e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80049a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a4:	4b58      	ldr	r3, [pc, #352]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80049bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049d4:	e043      	b.n	8004a5e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80049e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e8:	4b47      	ldr	r3, [pc, #284]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a18:	e021      	b.n	8004a5e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a24:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2c:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a40:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a5c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004a5e:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	0a5b      	lsrs	r3, r3, #9
 8004a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a84:	ee17 2a90 	vmov	r2, s15
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004a8c:	4b1e      	ldr	r3, [pc, #120]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab2:	ee17 2a90 	vmov	r2, s15
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004aba:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	0e1b      	lsrs	r3, r3, #24
 8004ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac4:	ee07 3a90 	vmov	s15, r3
 8004ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ad0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae0:	ee17 2a90 	vmov	r2, s15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ae8:	e008      	b.n	8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
}
 8004afc:	bf00      	nop
 8004afe:	3724      	adds	r7, #36	; 0x24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	03d09000 	.word	0x03d09000
 8004b10:	46000000 	.word	0x46000000
 8004b14:	4c742400 	.word	0x4c742400
 8004b18:	4a742400 	.word	0x4a742400
 8004b1c:	4c189680 	.word	0x4c189680

08004b20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b089      	sub	sp, #36	; 0x24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b28:	4b9d      	ldr	r3, [pc, #628]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004b32:	4b9b      	ldr	r3, [pc, #620]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	0d1b      	lsrs	r3, r3, #20
 8004b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b3e:	4b98      	ldr	r3, [pc, #608]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	0a1b      	lsrs	r3, r3, #8
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004b4a:	4b95      	ldr	r3, [pc, #596]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	08db      	lsrs	r3, r3, #3
 8004b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 810a 	beq.w	8004d82 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d05a      	beq.n	8004c2a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d302      	bcc.n	8004b7e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d078      	beq.n	8004c6e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004b7c:	e099      	b.n	8004cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b7e:	4b88      	ldr	r3, [pc, #544]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02d      	beq.n	8004be6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b8a:	4b85      	ldr	r3, [pc, #532]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	4a83      	ldr	r2, [pc, #524]	; (8004da4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	ee07 3a90 	vmov	s15, r3
 8004bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb4:	4b7a      	ldr	r3, [pc, #488]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004be4:	e087      	b.n	8004cf6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf8:	4b69      	ldr	r3, [pc, #420]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c08:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c28:	e065      	b.n	8004cf6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	ee07 3a90 	vmov	s15, r3
 8004c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c34:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3c:	4b58      	ldr	r3, [pc, #352]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c50:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c6c:	e043      	b.n	8004cf6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c78:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c80:	4b47      	ldr	r3, [pc, #284]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c88:	ee07 3a90 	vmov	s15, r3
 8004c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c90:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c94:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cb0:	e021      	b.n	8004cf6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	ee07 3a90 	vmov	s15, r3
 8004cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc4:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cf4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	0a5b      	lsrs	r3, r3, #9
 8004cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1c:	ee17 2a90 	vmov	r2, s15
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d4a:	ee17 2a90 	vmov	r2, s15
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	0e1b      	lsrs	r3, r3, #24
 8004d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5c:	ee07 3a90 	vmov	s15, r3
 8004d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d78:	ee17 2a90 	vmov	r2, s15
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d80:	e008      	b.n	8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	3724      	adds	r7, #36	; 0x24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	58024400 	.word	0x58024400
 8004da4:	03d09000 	.word	0x03d09000
 8004da8:	46000000 	.word	0x46000000
 8004dac:	4c742400 	.word	0x4c742400
 8004db0:	4a742400 	.word	0x4a742400
 8004db4:	4c189680 	.word	0x4c189680

08004db8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dc6:	4b53      	ldr	r3, [pc, #332]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d101      	bne.n	8004dd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e099      	b.n	8004f0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004dd6:	4b4f      	ldr	r3, [pc, #316]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a4e      	ldr	r2, [pc, #312]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de2:	f7fd f8d9 	bl	8001f98 <HAL_GetTick>
 8004de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004de8:	e008      	b.n	8004dfc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004dea:	f7fd f8d5 	bl	8001f98 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e086      	b.n	8004f0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dfc:	4b45      	ldr	r3, [pc, #276]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f0      	bne.n	8004dea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e08:	4b42      	ldr	r3, [pc, #264]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	493f      	ldr	r1, [pc, #252]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	628b      	str	r3, [r1, #40]	; 0x28
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	025b      	lsls	r3, r3, #9
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e4c:	4931      	ldr	r1, [pc, #196]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e52:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	492d      	ldr	r1, [pc, #180]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e64:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	f023 0220 	bic.w	r2, r3, #32
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	4928      	ldr	r1, [pc, #160]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e76:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	4a26      	ldr	r2, [pc, #152]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	f023 0310 	bic.w	r3, r3, #16
 8004e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e86:	4b24      	ldr	r3, [pc, #144]	; (8004f18 <RCCEx_PLL2_Config+0x160>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	69d2      	ldr	r2, [r2, #28]
 8004e8e:	00d2      	lsls	r2, r2, #3
 8004e90:	4920      	ldr	r1, [pc, #128]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e96:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e9c:	f043 0310 	orr.w	r3, r3, #16
 8004ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004eb4:	e00f      	b.n	8004ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d106      	bne.n	8004eca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ebc:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ec8:	e005      	b.n	8004ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	4a11      	ldr	r2, [pc, #68]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a0e      	ldr	r2, [pc, #56]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004edc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee2:	f7fd f859 	bl	8001f98 <HAL_GetTick>
 8004ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ee8:	e008      	b.n	8004efc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004eea:	f7fd f855 	bl	8001f98 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e006      	b.n	8004f0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	58024400 	.word	0x58024400
 8004f18:	ffff0007 	.word	0xffff0007

08004f1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f2a:	4b53      	ldr	r3, [pc, #332]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d101      	bne.n	8004f3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e099      	b.n	800506e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f3a:	4b4f      	ldr	r3, [pc, #316]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a4e      	ldr	r2, [pc, #312]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f46:	f7fd f827 	bl	8001f98 <HAL_GetTick>
 8004f4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f4e:	f7fd f823 	bl	8001f98 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e086      	b.n	800506e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f60:	4b45      	ldr	r3, [pc, #276]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f6c:	4b42      	ldr	r3, [pc, #264]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	051b      	lsls	r3, r3, #20
 8004f7a:	493f      	ldr	r1, [pc, #252]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	628b      	str	r3, [r1, #40]	; 0x28
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	025b      	lsls	r3, r3, #9
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	041b      	lsls	r3, r3, #16
 8004f9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	061b      	lsls	r3, r3, #24
 8004fac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fb0:	4931      	ldr	r1, [pc, #196]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004fb6:	4b30      	ldr	r3, [pc, #192]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	492d      	ldr	r1, [pc, #180]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004fc8:	4b2b      	ldr	r3, [pc, #172]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	4928      	ldr	r1, [pc, #160]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004fda:	4b27      	ldr	r3, [pc, #156]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	4a26      	ldr	r2, [pc, #152]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <RCCEx_PLL3_Config+0x160>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	69d2      	ldr	r2, [r2, #28]
 8004ff2:	00d2      	lsls	r2, r2, #3
 8004ff4:	4920      	ldr	r1, [pc, #128]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ffa:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005004:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800500c:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4a19      	ldr	r2, [pc, #100]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005012:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005018:	e00f      	b.n	800503a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d106      	bne.n	800502e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005020:	4b15      	ldr	r3, [pc, #84]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	4a14      	ldr	r2, [pc, #80]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005026:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800502a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800502c:	e005      	b.n	800503a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800502e:	4b12      	ldr	r3, [pc, #72]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	4a11      	ldr	r2, [pc, #68]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005038:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800503a:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a0e      	ldr	r2, [pc, #56]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005046:	f7fc ffa7 	bl	8001f98 <HAL_GetTick>
 800504a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800504c:	e008      	b.n	8005060 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800504e:	f7fc ffa3 	bl	8001f98 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e006      	b.n	800506e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	58024400 	.word	0x58024400
 800507c:	ffff0007 	.word	0xffff0007

08005080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e049      	b.n	8005126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fc fe08 	bl	8001cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f000 f934 	bl	800532c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e019      	b.n	800517c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <HAL_TIM_Base_Start+0x58>)
 8005158:	4013      	ands	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b06      	cmp	r3, #6
 8005160:	d00b      	beq.n	800517a <HAL_TIM_Base_Start+0x4a>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005168:	d007      	beq.n	800517a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	00010007 	.word	0x00010007

0800518c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIM_ConfigClockSource+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e0b7      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x188>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4b57      	ldr	r3, [pc, #348]	; (800531c <HAL_TIM_ConfigClockSource+0x190>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b70      	cmp	r3, #112	; 0x70
 80051da:	d02e      	beq.n	800523a <HAL_TIM_ConfigClockSource+0xae>
 80051dc:	2b70      	cmp	r3, #112	; 0x70
 80051de:	d812      	bhi.n	8005206 <HAL_TIM_ConfigClockSource+0x7a>
 80051e0:	2b30      	cmp	r3, #48	; 0x30
 80051e2:	f000 8084 	beq.w	80052ee <HAL_TIM_ConfigClockSource+0x162>
 80051e6:	2b30      	cmp	r3, #48	; 0x30
 80051e8:	d806      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x6c>
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d07f      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x162>
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d07d      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x162>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d07b      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80051f6:	e084      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80051f8:	2b50      	cmp	r3, #80	; 0x50
 80051fa:	d048      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x102>
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d056      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0x122>
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d064      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005204:	e07d      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005206:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800520a:	d070      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x162>
 800520c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005210:	d809      	bhi.n	8005226 <HAL_TIM_ConfigClockSource+0x9a>
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005216:	d027      	beq.n	8005268 <HAL_TIM_ConfigClockSource+0xdc>
 8005218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521c:	d067      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x162>
 800521e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005222:	d06d      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005224:	e06d      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005226:	4a3e      	ldr	r2, [pc, #248]	; (8005320 <HAL_TIM_ConfigClockSource+0x194>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d060      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x162>
 800522c:	4a3d      	ldr	r2, [pc, #244]	; (8005324 <HAL_TIM_ConfigClockSource+0x198>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d05d      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x162>
 8005232:	4a3d      	ldr	r2, [pc, #244]	; (8005328 <HAL_TIM_ConfigClockSource+0x19c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d05a      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005238:	e063      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6899      	ldr	r1, [r3, #8]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f000 f987 	bl	800555c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800525c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	609a      	str	r2, [r3, #8]
      break;
 8005266:	e04c      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	6899      	ldr	r1, [r3, #8]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f000 f970 	bl	800555c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528a:	609a      	str	r2, [r3, #8]
      break;
 800528c:	e039      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	461a      	mov	r2, r3
 800529c:	f000 f8e0 	bl	8005460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2150      	movs	r1, #80	; 0x50
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f93a 	bl	8005520 <TIM_ITRx_SetConfig>
      break;
 80052ac:	e029      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f000 f8ff 	bl	80054be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2160      	movs	r1, #96	; 0x60
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f92a 	bl	8005520 <TIM_ITRx_SetConfig>
      break;
 80052cc:	e019      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6859      	ldr	r1, [r3, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	461a      	mov	r2, r3
 80052dc:	f000 f8c0 	bl	8005460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2140      	movs	r1, #64	; 0x40
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f91a 	bl	8005520 <TIM_ITRx_SetConfig>
      break;
 80052ec:	e009      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4619      	mov	r1, r3
 80052f8:	4610      	mov	r0, r2
 80052fa:	f000 f911 	bl	8005520 <TIM_ITRx_SetConfig>
      break;
 80052fe:	e000      	b.n	8005302 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005300:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	ffceff88 	.word	0xffceff88
 8005320:	00100030 	.word	0x00100030
 8005324:	00100040 	.word	0x00100040
 8005328:	00100020 	.word	0x00100020

0800532c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a40      	ldr	r2, [pc, #256]	; (8005440 <TIM_Base_SetConfig+0x114>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d013      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534a:	d00f      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a3d      	ldr	r2, [pc, #244]	; (8005444 <TIM_Base_SetConfig+0x118>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00b      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3c      	ldr	r2, [pc, #240]	; (8005448 <TIM_Base_SetConfig+0x11c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d007      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3b      	ldr	r2, [pc, #236]	; (800544c <TIM_Base_SetConfig+0x120>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3a      	ldr	r2, [pc, #232]	; (8005450 <TIM_Base_SetConfig+0x124>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d108      	bne.n	800537e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2f      	ldr	r2, [pc, #188]	; (8005440 <TIM_Base_SetConfig+0x114>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01f      	beq.n	80053c6 <TIM_Base_SetConfig+0x9a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d01b      	beq.n	80053c6 <TIM_Base_SetConfig+0x9a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2c      	ldr	r2, [pc, #176]	; (8005444 <TIM_Base_SetConfig+0x118>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d017      	beq.n	80053c6 <TIM_Base_SetConfig+0x9a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2b      	ldr	r2, [pc, #172]	; (8005448 <TIM_Base_SetConfig+0x11c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <TIM_Base_SetConfig+0x9a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2a      	ldr	r2, [pc, #168]	; (800544c <TIM_Base_SetConfig+0x120>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <TIM_Base_SetConfig+0x9a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a29      	ldr	r2, [pc, #164]	; (8005450 <TIM_Base_SetConfig+0x124>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_Base_SetConfig+0x9a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a28      	ldr	r2, [pc, #160]	; (8005454 <TIM_Base_SetConfig+0x128>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_Base_SetConfig+0x9a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a27      	ldr	r2, [pc, #156]	; (8005458 <TIM_Base_SetConfig+0x12c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_Base_SetConfig+0x9a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a26      	ldr	r2, [pc, #152]	; (800545c <TIM_Base_SetConfig+0x130>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d108      	bne.n	80053d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a10      	ldr	r2, [pc, #64]	; (8005440 <TIM_Base_SetConfig+0x114>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00f      	beq.n	8005424 <TIM_Base_SetConfig+0xf8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a12      	ldr	r2, [pc, #72]	; (8005450 <TIM_Base_SetConfig+0x124>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00b      	beq.n	8005424 <TIM_Base_SetConfig+0xf8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a11      	ldr	r2, [pc, #68]	; (8005454 <TIM_Base_SetConfig+0x128>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_Base_SetConfig+0xf8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a10      	ldr	r2, [pc, #64]	; (8005458 <TIM_Base_SetConfig+0x12c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_Base_SetConfig+0xf8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a0f      	ldr	r2, [pc, #60]	; (800545c <TIM_Base_SetConfig+0x130>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d103      	bne.n	800542c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	615a      	str	r2, [r3, #20]
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40010000 	.word	0x40010000
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40010400 	.word	0x40010400
 8005454:	40014000 	.word	0x40014000
 8005458:	40014400 	.word	0x40014400
 800545c:	40014800 	.word	0x40014800

08005460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0201 	bic.w	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800548a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 030a 	bic.w	r3, r3, #10
 800549c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054be:	b480      	push	{r7}
 80054c0:	b087      	sub	sp, #28
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0210 	bic.w	r2, r3, #16
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	031b      	lsls	r3, r3, #12
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <TIM_ITRx_SetConfig+0x38>)
 8005534:	4013      	ands	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	f043 0307 	orr.w	r3, r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	609a      	str	r2, [r3, #8]
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	ffcfff8f 	.word	0xffcfff8f

0800555c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	431a      	orrs	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4313      	orrs	r3, r2
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e068      	b.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a2e      	ldr	r2, [pc, #184]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d108      	bne.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01d      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d018      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1b      	ldr	r2, [pc, #108]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1a      	ldr	r2, [pc, #104]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10c      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4313      	orrs	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40010400 	.word	0x40010400
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40001800 	.word	0x40001800

080056ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e042      	b.n	8005744 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d106      	bne.n	80056d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7fc fb5f 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2224      	movs	r2, #36	; 0x24
 80056da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fb12 	bl	8005d18 <UART_SetConfig>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e022      	b.n	8005744 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 f8b6 	bl	8006878 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800571a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800572a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 f93d 	bl	80069bc <UART_CheckIdleState>
 8005742:	4603      	mov	r3, r0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4613      	mov	r3, r2
 8005758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005760:	2b20      	cmp	r3, #32
 8005762:	d168      	bne.n	8005836 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_UART_Transmit_IT+0x24>
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e061      	b.n	8005838 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UART_Transmit_IT+0x36>
 800577e:	2302      	movs	r3, #2
 8005780:	e05a      	b.n	8005838 <HAL_UART_Transmit_IT+0xec>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	88fa      	ldrh	r2, [r7, #6]
 8005794:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2221      	movs	r2, #33	; 0x21
 80057b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057be:	d11c      	bne.n	80057fa <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c8:	d107      	bne.n	80057da <HAL_UART_Transmit_IT+0x8e>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <HAL_UART_Transmit_IT+0xf8>)
 80057d6:	671a      	str	r2, [r3, #112]	; 0x70
 80057d8:	e002      	b.n	80057e0 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a1a      	ldr	r2, [pc, #104]	; (8005848 <HAL_UART_Transmit_IT+0xfc>)
 80057de:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	e01b      	b.n	8005832 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	d107      	bne.n	8005814 <HAL_UART_Transmit_IT+0xc8>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a0f      	ldr	r2, [pc, #60]	; (800584c <HAL_UART_Transmit_IT+0x100>)
 8005810:	671a      	str	r2, [r3, #112]	; 0x70
 8005812:	e002      	b.n	800581a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a0e      	ldr	r2, [pc, #56]	; (8005850 <HAL_UART_Transmit_IT+0x104>)
 8005818:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005830:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e000      	b.n	8005838 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005836:	2302      	movs	r3, #2
  }
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	08006d4d 	.word	0x08006d4d
 8005848:	08006cb3 	.word	0x08006cb3
 800584c:	08006c35 	.word	0x08006c35
 8005850:	08006bc1 	.word	0x08006bc1

08005854 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005868:	2b20      	cmp	r3, #32
 800586a:	f040 80bc 	bne.w	80059e6 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <HAL_UART_Receive_IT+0x26>
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0b4      	b.n	80059e8 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_UART_Receive_IT+0x38>
 8005888:	2302      	movs	r3, #2
 800588a:	e0ad      	b.n	80059e8 <HAL_UART_Receive_IT+0x194>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	88fa      	ldrh	r2, [r7, #6]
 80058a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b8:	d10e      	bne.n	80058d8 <HAL_UART_Receive_IT+0x84>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d105      	bne.n	80058ce <HAL_UART_Receive_IT+0x7a>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058cc:	e02d      	b.n	800592a <HAL_UART_Receive_IT+0xd6>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	22ff      	movs	r2, #255	; 0xff
 80058d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058d6:	e028      	b.n	800592a <HAL_UART_Receive_IT+0xd6>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <HAL_UART_Receive_IT+0xa8>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <HAL_UART_Receive_IT+0x9e>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	22ff      	movs	r2, #255	; 0xff
 80058ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058f0:	e01b      	b.n	800592a <HAL_UART_Receive_IT+0xd6>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	227f      	movs	r2, #127	; 0x7f
 80058f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058fa:	e016      	b.n	800592a <HAL_UART_Receive_IT+0xd6>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005904:	d10d      	bne.n	8005922 <HAL_UART_Receive_IT+0xce>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d104      	bne.n	8005918 <HAL_UART_Receive_IT+0xc4>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	227f      	movs	r2, #127	; 0x7f
 8005912:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005916:	e008      	b.n	800592a <HAL_UART_Receive_IT+0xd6>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	223f      	movs	r2, #63	; 0x3f
 800591c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005920:	e003      	b.n	800592a <HAL_UART_Receive_IT+0xd6>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2222      	movs	r2, #34	; 0x22
 8005936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800594e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005952:	d12a      	bne.n	80059aa <HAL_UART_Receive_IT+0x156>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800595a:	88fa      	ldrh	r2, [r7, #6]
 800595c:	429a      	cmp	r2, r3
 800595e:	d324      	bcc.n	80059aa <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005968:	d107      	bne.n	800597a <HAL_UART_Receive_IT+0x126>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4a1f      	ldr	r2, [pc, #124]	; (80059f4 <HAL_UART_Receive_IT+0x1a0>)
 8005976:	66da      	str	r2, [r3, #108]	; 0x6c
 8005978:	e002      	b.n	8005980 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a1e      	ldr	r2, [pc, #120]	; (80059f8 <HAL_UART_Receive_IT+0x1a4>)
 800597e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005996:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	e01b      	b.n	80059e2 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b2:	d107      	bne.n	80059c4 <HAL_UART_Receive_IT+0x170>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4a0f      	ldr	r2, [pc, #60]	; (80059fc <HAL_UART_Receive_IT+0x1a8>)
 80059c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80059c2:	e002      	b.n	80059ca <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a0e      	ldr	r2, [pc, #56]	; (8005a00 <HAL_UART_Receive_IT+0x1ac>)
 80059c8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80059e0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e000      	b.n	80059e8 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80059e6:	2302      	movs	r3, #2
  }
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	08007081 	.word	0x08007081
 80059f8:	08006f79 	.word	0x08006f79
 80059fc:	08006ecf 	.word	0x08006ecf
 8005a00:	08006e25 	.word	0x08006e25

08005a04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d118      	bne.n	8005a66 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d013      	beq.n	8005a66 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8145 	beq.w	8005ce6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
      }
      return;
 8005a64:	e13f      	b.n	8005ce6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80e8 	beq.w	8005c3e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4ba1      	ldr	r3, [pc, #644]	; (8005cf8 <HAL_UART_IRQHandler+0x2f4>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d105      	bne.n	8005a84 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4ba0      	ldr	r3, [pc, #640]	; (8005cfc <HAL_UART_IRQHandler+0x2f8>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80dd 	beq.w	8005c3e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d010      	beq.n	8005ab0 <HAL_UART_IRQHandler+0xac>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00b      	beq.n	8005ab0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa6:	f043 0201 	orr.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d010      	beq.n	8005adc <HAL_UART_IRQHandler+0xd8>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	f043 0204 	orr.w	r2, r3, #4
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d010      	beq.n	8005b08 <HAL_UART_IRQHandler+0x104>
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2204      	movs	r2, #4
 8005af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afe:	f043 0202 	orr.w	r2, r3, #2
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d015      	beq.n	8005b3e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4b76      	ldr	r3, [pc, #472]	; (8005cf8 <HAL_UART_IRQHandler+0x2f4>)
 8005b20:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b34:	f043 0208 	orr.w	r2, r3, #8
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d011      	beq.n	8005b6c <HAL_UART_IRQHandler+0x168>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00c      	beq.n	8005b6c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f043 0220 	orr.w	r2, r3, #32
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 80b9 	beq.w	8005cea <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d011      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bac:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d004      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d031      	beq.n	8005c2a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 ffc0 	bl	8006b4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b40      	cmp	r3, #64	; 0x40
 8005bd8:	d123      	bne.n	8005c22 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d013      	beq.n	8005c1a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf6:	4a42      	ldr	r2, [pc, #264]	; (8005d00 <HAL_UART_IRQHandler+0x2fc>)
 8005bf8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fc fb14 	bl	800222c <HAL_DMA_Abort_IT>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d017      	beq.n	8005c3a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	e00f      	b.n	8005c3a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f872 	bl	8005d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	e00b      	b.n	8005c3a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f86e 	bl	8005d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c28:	e007      	b.n	8005c3a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f86a 	bl	8005d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005c38:	e057      	b.n	8005cea <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3a:	bf00      	nop
    return;
 8005c3c:	e055      	b.n	8005cea <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00d      	beq.n	8005c64 <HAL_UART_IRQHandler+0x260>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d008      	beq.n	8005c64 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 fa93 	bl	8007188 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c62:	e045      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d012      	beq.n	8005c94 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d031      	beq.n	8005cee <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
    }
    return;
 8005c92:	e02c      	b.n	8005cee <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x2ac>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 f8a1 	bl	8006df0 <UART_EndTransmit_IT>
    return;
 8005cae:	e01f      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d008      	beq.n	8005ccc <HAL_UART_IRQHandler+0x2c8>
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fa73 	bl	80071b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cca:	e011      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00c      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x2ec>
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da09      	bge.n	8005cf0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 fa5d 	bl	800719c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ce2:	bf00      	nop
 8005ce4:	e004      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005ce6:	bf00      	nop
 8005ce8:	e002      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005cea:	bf00      	nop
 8005cec:	e000      	b.n	8005cf0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005cee:	bf00      	nop
  }
}
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	10000001 	.word	0x10000001
 8005cfc:	04000120 	.word	0x04000120
 8005d00:	08006b95 	.word	0x08006b95

08005d04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d1c:	b08e      	sub	sp, #56	; 0x38
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d46:	4313      	orrs	r3, r2
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4bc1      	ldr	r3, [pc, #772]	; (8006058 <UART_SetConfig+0x340>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4ab7      	ldr	r2, [pc, #732]	; (800605c <UART_SetConfig+0x344>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	4bb2      	ldr	r3, [pc, #712]	; (8006060 <UART_SetConfig+0x348>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	f023 010f 	bic.w	r1, r3, #15
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4aa9      	ldr	r2, [pc, #676]	; (8006064 <UART_SetConfig+0x34c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d177      	bne.n	8005eb2 <UART_SetConfig+0x19a>
 8005dc2:	4ba9      	ldr	r3, [pc, #676]	; (8006068 <UART_SetConfig+0x350>)
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dca:	2b28      	cmp	r3, #40	; 0x28
 8005dcc:	d86c      	bhi.n	8005ea8 <UART_SetConfig+0x190>
 8005dce:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <UART_SetConfig+0xbc>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005e79 	.word	0x08005e79
 8005dd8:	08005ea9 	.word	0x08005ea9
 8005ddc:	08005ea9 	.word	0x08005ea9
 8005de0:	08005ea9 	.word	0x08005ea9
 8005de4:	08005ea9 	.word	0x08005ea9
 8005de8:	08005ea9 	.word	0x08005ea9
 8005dec:	08005ea9 	.word	0x08005ea9
 8005df0:	08005ea9 	.word	0x08005ea9
 8005df4:	08005e81 	.word	0x08005e81
 8005df8:	08005ea9 	.word	0x08005ea9
 8005dfc:	08005ea9 	.word	0x08005ea9
 8005e00:	08005ea9 	.word	0x08005ea9
 8005e04:	08005ea9 	.word	0x08005ea9
 8005e08:	08005ea9 	.word	0x08005ea9
 8005e0c:	08005ea9 	.word	0x08005ea9
 8005e10:	08005ea9 	.word	0x08005ea9
 8005e14:	08005e89 	.word	0x08005e89
 8005e18:	08005ea9 	.word	0x08005ea9
 8005e1c:	08005ea9 	.word	0x08005ea9
 8005e20:	08005ea9 	.word	0x08005ea9
 8005e24:	08005ea9 	.word	0x08005ea9
 8005e28:	08005ea9 	.word	0x08005ea9
 8005e2c:	08005ea9 	.word	0x08005ea9
 8005e30:	08005ea9 	.word	0x08005ea9
 8005e34:	08005e91 	.word	0x08005e91
 8005e38:	08005ea9 	.word	0x08005ea9
 8005e3c:	08005ea9 	.word	0x08005ea9
 8005e40:	08005ea9 	.word	0x08005ea9
 8005e44:	08005ea9 	.word	0x08005ea9
 8005e48:	08005ea9 	.word	0x08005ea9
 8005e4c:	08005ea9 	.word	0x08005ea9
 8005e50:	08005ea9 	.word	0x08005ea9
 8005e54:	08005e99 	.word	0x08005e99
 8005e58:	08005ea9 	.word	0x08005ea9
 8005e5c:	08005ea9 	.word	0x08005ea9
 8005e60:	08005ea9 	.word	0x08005ea9
 8005e64:	08005ea9 	.word	0x08005ea9
 8005e68:	08005ea9 	.word	0x08005ea9
 8005e6c:	08005ea9 	.word	0x08005ea9
 8005e70:	08005ea9 	.word	0x08005ea9
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e233      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e22f      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e22b      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e227      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005e98:	2320      	movs	r3, #32
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e223      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005ea0:	2340      	movs	r3, #64	; 0x40
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e21f      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	bf00      	nop
 8005eb0:	e21a      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a6d      	ldr	r2, [pc, #436]	; (800606c <UART_SetConfig+0x354>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d132      	bne.n	8005f22 <UART_SetConfig+0x20a>
 8005ebc:	4b6a      	ldr	r3, [pc, #424]	; (8006068 <UART_SetConfig+0x350>)
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	d827      	bhi.n	8005f18 <UART_SetConfig+0x200>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x1b8>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005ee9 	.word	0x08005ee9
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f09 	.word	0x08005f09
 8005ee4:	08005f11 	.word	0x08005f11
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eee:	e1fb      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef6:	e1f7      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efe:	e1f3      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f06:	e1ef      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f08:	2320      	movs	r3, #32
 8005f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0e:	e1eb      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f10:	2340      	movs	r3, #64	; 0x40
 8005f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f16:	e1e7      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1e:	bf00      	nop
 8005f20:	e1e2      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a52      	ldr	r2, [pc, #328]	; (8006070 <UART_SetConfig+0x358>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d132      	bne.n	8005f92 <UART_SetConfig+0x27a>
 8005f2c:	4b4e      	ldr	r3, [pc, #312]	; (8006068 <UART_SetConfig+0x350>)
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	2b05      	cmp	r3, #5
 8005f36:	d827      	bhi.n	8005f88 <UART_SetConfig+0x270>
 8005f38:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0x228>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f59 	.word	0x08005f59
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	08005f69 	.word	0x08005f69
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f5e:	e1c3      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f66:	e1bf      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6e:	e1bb      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f76:	e1b7      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f78:	2320      	movs	r3, #32
 8005f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7e:	e1b3      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f80:	2340      	movs	r3, #64	; 0x40
 8005f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f86:	e1af      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8e:	bf00      	nop
 8005f90:	e1aa      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a37      	ldr	r2, [pc, #220]	; (8006074 <UART_SetConfig+0x35c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d132      	bne.n	8006002 <UART_SetConfig+0x2ea>
 8005f9c:	4b32      	ldr	r3, [pc, #200]	; (8006068 <UART_SetConfig+0x350>)
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	2b05      	cmp	r3, #5
 8005fa6:	d827      	bhi.n	8005ff8 <UART_SetConfig+0x2e0>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <UART_SetConfig+0x298>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fc9 	.word	0x08005fc9
 8005fb4:	08005fd1 	.word	0x08005fd1
 8005fb8:	08005fd9 	.word	0x08005fd9
 8005fbc:	08005fe1 	.word	0x08005fe1
 8005fc0:	08005fe9 	.word	0x08005fe9
 8005fc4:	08005ff1 	.word	0x08005ff1
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fce:	e18b      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd6:	e187      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fde:	e183      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fe6:	e17f      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005fe8:	2320      	movs	r3, #32
 8005fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fee:	e17b      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005ff0:	2340      	movs	r3, #64	; 0x40
 8005ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff6:	e177      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffe:	bf00      	nop
 8006000:	e172      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1c      	ldr	r2, [pc, #112]	; (8006078 <UART_SetConfig+0x360>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d144      	bne.n	8006096 <UART_SetConfig+0x37e>
 800600c:	4b16      	ldr	r3, [pc, #88]	; (8006068 <UART_SetConfig+0x350>)
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	2b05      	cmp	r3, #5
 8006016:	d839      	bhi.n	800608c <UART_SetConfig+0x374>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x308>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006039 	.word	0x08006039
 8006024:	08006041 	.word	0x08006041
 8006028:	08006049 	.word	0x08006049
 800602c:	08006051 	.word	0x08006051
 8006030:	0800607d 	.word	0x0800607d
 8006034:	08006085 	.word	0x08006085
 8006038:	2300      	movs	r3, #0
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	e153      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006040:	2304      	movs	r3, #4
 8006042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006046:	e14f      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604e:	e14b      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006050:	2310      	movs	r3, #16
 8006052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006056:	e147      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006058:	cfff69f3 	.word	0xcfff69f3
 800605c:	58000c00 	.word	0x58000c00
 8006060:	11fff4ff 	.word	0x11fff4ff
 8006064:	40011000 	.word	0x40011000
 8006068:	58024400 	.word	0x58024400
 800606c:	40004400 	.word	0x40004400
 8006070:	40004800 	.word	0x40004800
 8006074:	40004c00 	.word	0x40004c00
 8006078:	40005000 	.word	0x40005000
 800607c:	2320      	movs	r3, #32
 800607e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006082:	e131      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006084:	2340      	movs	r3, #64	; 0x40
 8006086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608a:	e12d      	b.n	80062e8 <UART_SetConfig+0x5d0>
 800608c:	2380      	movs	r3, #128	; 0x80
 800608e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006092:	bf00      	nop
 8006094:	e128      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4ab6      	ldr	r2, [pc, #728]	; (8006374 <UART_SetConfig+0x65c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d178      	bne.n	8006192 <UART_SetConfig+0x47a>
 80060a0:	4bb5      	ldr	r3, [pc, #724]	; (8006378 <UART_SetConfig+0x660>)
 80060a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060a8:	2b28      	cmp	r3, #40	; 0x28
 80060aa:	d86d      	bhi.n	8006188 <UART_SetConfig+0x470>
 80060ac:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <UART_SetConfig+0x39c>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	08006159 	.word	0x08006159
 80060b8:	08006189 	.word	0x08006189
 80060bc:	08006189 	.word	0x08006189
 80060c0:	08006189 	.word	0x08006189
 80060c4:	08006189 	.word	0x08006189
 80060c8:	08006189 	.word	0x08006189
 80060cc:	08006189 	.word	0x08006189
 80060d0:	08006189 	.word	0x08006189
 80060d4:	08006161 	.word	0x08006161
 80060d8:	08006189 	.word	0x08006189
 80060dc:	08006189 	.word	0x08006189
 80060e0:	08006189 	.word	0x08006189
 80060e4:	08006189 	.word	0x08006189
 80060e8:	08006189 	.word	0x08006189
 80060ec:	08006189 	.word	0x08006189
 80060f0:	08006189 	.word	0x08006189
 80060f4:	08006169 	.word	0x08006169
 80060f8:	08006189 	.word	0x08006189
 80060fc:	08006189 	.word	0x08006189
 8006100:	08006189 	.word	0x08006189
 8006104:	08006189 	.word	0x08006189
 8006108:	08006189 	.word	0x08006189
 800610c:	08006189 	.word	0x08006189
 8006110:	08006189 	.word	0x08006189
 8006114:	08006171 	.word	0x08006171
 8006118:	08006189 	.word	0x08006189
 800611c:	08006189 	.word	0x08006189
 8006120:	08006189 	.word	0x08006189
 8006124:	08006189 	.word	0x08006189
 8006128:	08006189 	.word	0x08006189
 800612c:	08006189 	.word	0x08006189
 8006130:	08006189 	.word	0x08006189
 8006134:	08006179 	.word	0x08006179
 8006138:	08006189 	.word	0x08006189
 800613c:	08006189 	.word	0x08006189
 8006140:	08006189 	.word	0x08006189
 8006144:	08006189 	.word	0x08006189
 8006148:	08006189 	.word	0x08006189
 800614c:	08006189 	.word	0x08006189
 8006150:	08006189 	.word	0x08006189
 8006154:	08006181 	.word	0x08006181
 8006158:	2301      	movs	r3, #1
 800615a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800615e:	e0c3      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006160:	2304      	movs	r3, #4
 8006162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006166:	e0bf      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006168:	2308      	movs	r3, #8
 800616a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616e:	e0bb      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006170:	2310      	movs	r3, #16
 8006172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006176:	e0b7      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006178:	2320      	movs	r3, #32
 800617a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617e:	e0b3      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006180:	2340      	movs	r3, #64	; 0x40
 8006182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006186:	e0af      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006188:	2380      	movs	r3, #128	; 0x80
 800618a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618e:	bf00      	nop
 8006190:	e0aa      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a79      	ldr	r2, [pc, #484]	; (800637c <UART_SetConfig+0x664>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d132      	bne.n	8006202 <UART_SetConfig+0x4ea>
 800619c:	4b76      	ldr	r3, [pc, #472]	; (8006378 <UART_SetConfig+0x660>)
 800619e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	2b05      	cmp	r3, #5
 80061a6:	d827      	bhi.n	80061f8 <UART_SetConfig+0x4e0>
 80061a8:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <UART_SetConfig+0x498>)
 80061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ae:	bf00      	nop
 80061b0:	080061c9 	.word	0x080061c9
 80061b4:	080061d1 	.word	0x080061d1
 80061b8:	080061d9 	.word	0x080061d9
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	2300      	movs	r3, #0
 80061ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ce:	e08b      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80061d0:	2304      	movs	r3, #4
 80061d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d6:	e087      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80061d8:	2308      	movs	r3, #8
 80061da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061de:	e083      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80061e0:	2310      	movs	r3, #16
 80061e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e6:	e07f      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80061e8:	2320      	movs	r3, #32
 80061ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ee:	e07b      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80061f0:	2340      	movs	r3, #64	; 0x40
 80061f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f6:	e077      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061fe:	bf00      	nop
 8006200:	e072      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a5e      	ldr	r2, [pc, #376]	; (8006380 <UART_SetConfig+0x668>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d132      	bne.n	8006272 <UART_SetConfig+0x55a>
 800620c:	4b5a      	ldr	r3, [pc, #360]	; (8006378 <UART_SetConfig+0x660>)
 800620e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	2b05      	cmp	r3, #5
 8006216:	d827      	bhi.n	8006268 <UART_SetConfig+0x550>
 8006218:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <UART_SetConfig+0x508>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006239 	.word	0x08006239
 8006224:	08006241 	.word	0x08006241
 8006228:	08006249 	.word	0x08006249
 800622c:	08006251 	.word	0x08006251
 8006230:	08006259 	.word	0x08006259
 8006234:	08006261 	.word	0x08006261
 8006238:	2300      	movs	r3, #0
 800623a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800623e:	e053      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006240:	2304      	movs	r3, #4
 8006242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006246:	e04f      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006248:	2308      	movs	r3, #8
 800624a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624e:	e04b      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006250:	2310      	movs	r3, #16
 8006252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006256:	e047      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006258:	2320      	movs	r3, #32
 800625a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625e:	e043      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006260:	2340      	movs	r3, #64	; 0x40
 8006262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006266:	e03f      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626e:	bf00      	nop
 8006270:	e03a      	b.n	80062e8 <UART_SetConfig+0x5d0>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a43      	ldr	r2, [pc, #268]	; (8006384 <UART_SetConfig+0x66c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d132      	bne.n	80062e2 <UART_SetConfig+0x5ca>
 800627c:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <UART_SetConfig+0x660>)
 800627e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	2b05      	cmp	r3, #5
 8006286:	d827      	bhi.n	80062d8 <UART_SetConfig+0x5c0>
 8006288:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x578>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062a9 	.word	0x080062a9
 8006294:	080062b1 	.word	0x080062b1
 8006298:	080062b9 	.word	0x080062b9
 800629c:	080062c1 	.word	0x080062c1
 80062a0:	080062c9 	.word	0x080062c9
 80062a4:	080062d1 	.word	0x080062d1
 80062a8:	2302      	movs	r3, #2
 80062aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ae:	e01b      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80062b0:	2304      	movs	r3, #4
 80062b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b6:	e017      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062be:	e013      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c6:	e00f      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80062c8:	2320      	movs	r3, #32
 80062ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ce:	e00b      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d6:	e007      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062de:	bf00      	nop
 80062e0:	e002      	b.n	80062e8 <UART_SetConfig+0x5d0>
 80062e2:	2380      	movs	r3, #128	; 0x80
 80062e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a25      	ldr	r2, [pc, #148]	; (8006384 <UART_SetConfig+0x66c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	f040 80b8 	bne.w	8006464 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d019      	beq.n	8006330 <UART_SetConfig+0x618>
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	dc04      	bgt.n	800630a <UART_SetConfig+0x5f2>
 8006300:	2b02      	cmp	r3, #2
 8006302:	d009      	beq.n	8006318 <UART_SetConfig+0x600>
 8006304:	2b04      	cmp	r3, #4
 8006306:	d00b      	beq.n	8006320 <UART_SetConfig+0x608>
 8006308:	e042      	b.n	8006390 <UART_SetConfig+0x678>
 800630a:	2b20      	cmp	r3, #32
 800630c:	d02b      	beq.n	8006366 <UART_SetConfig+0x64e>
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d02c      	beq.n	800636c <UART_SetConfig+0x654>
 8006312:	2b10      	cmp	r3, #16
 8006314:	d014      	beq.n	8006340 <UART_SetConfig+0x628>
 8006316:	e03b      	b.n	8006390 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006318:	f7fe faa0 	bl	800485c <HAL_RCCEx_GetD3PCLK1Freq>
 800631c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800631e:	e03d      	b.n	800639c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006320:	f107 0314 	add.w	r3, r7, #20
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe faaf 	bl	8004888 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800632e:	e035      	b.n	800639c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006330:	f107 0308 	add.w	r3, r7, #8
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fbf3 	bl	8004b20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800633e:	e02d      	b.n	800639c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <UART_SetConfig+0x660>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <UART_SetConfig+0x660>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	08db      	lsrs	r3, r3, #3
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	4a0c      	ldr	r2, [pc, #48]	; (8006388 <UART_SetConfig+0x670>)
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800635e:	e01d      	b.n	800639c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006360:	4b09      	ldr	r3, [pc, #36]	; (8006388 <UART_SetConfig+0x670>)
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006364:	e01a      	b.n	800639c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <UART_SetConfig+0x674>)
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800636a:	e017      	b.n	800639c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006372:	e013      	b.n	800639c <UART_SetConfig+0x684>
 8006374:	40011400 	.word	0x40011400
 8006378:	58024400 	.word	0x58024400
 800637c:	40007800 	.word	0x40007800
 8006380:	40007c00 	.word	0x40007c00
 8006384:	58000c00 	.word	0x58000c00
 8006388:	03d09000 	.word	0x03d09000
 800638c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800639a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 824d 	beq.w	800683e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	4aad      	ldr	r2, [pc, #692]	; (8006660 <UART_SetConfig+0x948>)
 80063aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ae:	461a      	mov	r2, r3
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4613      	mov	r3, r2
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4413      	add	r3, r2
 80063c2:	6a3a      	ldr	r2, [r7, #32]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d305      	bcc.n	80063d4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ce:	6a3a      	ldr	r2, [r7, #32]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d903      	bls.n	80063dc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80063da:	e230      	b.n	800683e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	4618      	mov	r0, r3
 80063e0:	f04f 0100 	mov.w	r1, #0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	4a9d      	ldr	r2, [pc, #628]	; (8006660 <UART_SetConfig+0x948>)
 80063ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f04f 0400 	mov.w	r4, #0
 80063f4:	461a      	mov	r2, r3
 80063f6:	4623      	mov	r3, r4
 80063f8:	f7f9 ffca 	bl	8000390 <__aeabi_uldivmod>
 80063fc:	4603      	mov	r3, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	4619      	mov	r1, r3
 8006402:	4622      	mov	r2, r4
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	f04f 0400 	mov.w	r4, #0
 800640c:	0214      	lsls	r4, r2, #8
 800640e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006412:	020b      	lsls	r3, r1, #8
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6852      	ldr	r2, [r2, #4]
 8006418:	0852      	lsrs	r2, r2, #1
 800641a:	4611      	mov	r1, r2
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	eb13 0b01 	adds.w	fp, r3, r1
 8006424:	eb44 0c02 	adc.w	ip, r4, r2
 8006428:	4658      	mov	r0, fp
 800642a:	4661      	mov	r1, ip
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	461a      	mov	r2, r3
 8006436:	4623      	mov	r3, r4
 8006438:	f7f9 ffaa 	bl	8000390 <__aeabi_uldivmod>
 800643c:	4603      	mov	r3, r0
 800643e:	460c      	mov	r4, r1
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006448:	d308      	bcc.n	800645c <UART_SetConfig+0x744>
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006450:	d204      	bcs.n	800645c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	e1f0      	b.n	800683e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006462:	e1ec      	b.n	800683e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800646c:	f040 8100 	bne.w	8006670 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	f200 80b7 	bhi.w	80065e8 <UART_SetConfig+0x8d0>
 800647a:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <UART_SetConfig+0x768>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	08006585 	.word	0x08006585
 8006484:	0800658d 	.word	0x0800658d
 8006488:	080065e9 	.word	0x080065e9
 800648c:	080065e9 	.word	0x080065e9
 8006490:	08006595 	.word	0x08006595
 8006494:	080065e9 	.word	0x080065e9
 8006498:	080065e9 	.word	0x080065e9
 800649c:	080065e9 	.word	0x080065e9
 80064a0:	080065a5 	.word	0x080065a5
 80064a4:	080065e9 	.word	0x080065e9
 80064a8:	080065e9 	.word	0x080065e9
 80064ac:	080065e9 	.word	0x080065e9
 80064b0:	080065e9 	.word	0x080065e9
 80064b4:	080065e9 	.word	0x080065e9
 80064b8:	080065e9 	.word	0x080065e9
 80064bc:	080065e9 	.word	0x080065e9
 80064c0:	080065b5 	.word	0x080065b5
 80064c4:	080065e9 	.word	0x080065e9
 80064c8:	080065e9 	.word	0x080065e9
 80064cc:	080065e9 	.word	0x080065e9
 80064d0:	080065e9 	.word	0x080065e9
 80064d4:	080065e9 	.word	0x080065e9
 80064d8:	080065e9 	.word	0x080065e9
 80064dc:	080065e9 	.word	0x080065e9
 80064e0:	080065e9 	.word	0x080065e9
 80064e4:	080065e9 	.word	0x080065e9
 80064e8:	080065e9 	.word	0x080065e9
 80064ec:	080065e9 	.word	0x080065e9
 80064f0:	080065e9 	.word	0x080065e9
 80064f4:	080065e9 	.word	0x080065e9
 80064f8:	080065e9 	.word	0x080065e9
 80064fc:	080065e9 	.word	0x080065e9
 8006500:	080065db 	.word	0x080065db
 8006504:	080065e9 	.word	0x080065e9
 8006508:	080065e9 	.word	0x080065e9
 800650c:	080065e9 	.word	0x080065e9
 8006510:	080065e9 	.word	0x080065e9
 8006514:	080065e9 	.word	0x080065e9
 8006518:	080065e9 	.word	0x080065e9
 800651c:	080065e9 	.word	0x080065e9
 8006520:	080065e9 	.word	0x080065e9
 8006524:	080065e9 	.word	0x080065e9
 8006528:	080065e9 	.word	0x080065e9
 800652c:	080065e9 	.word	0x080065e9
 8006530:	080065e9 	.word	0x080065e9
 8006534:	080065e9 	.word	0x080065e9
 8006538:	080065e9 	.word	0x080065e9
 800653c:	080065e9 	.word	0x080065e9
 8006540:	080065e9 	.word	0x080065e9
 8006544:	080065e9 	.word	0x080065e9
 8006548:	080065e9 	.word	0x080065e9
 800654c:	080065e9 	.word	0x080065e9
 8006550:	080065e9 	.word	0x080065e9
 8006554:	080065e9 	.word	0x080065e9
 8006558:	080065e9 	.word	0x080065e9
 800655c:	080065e9 	.word	0x080065e9
 8006560:	080065e9 	.word	0x080065e9
 8006564:	080065e9 	.word	0x080065e9
 8006568:	080065e9 	.word	0x080065e9
 800656c:	080065e9 	.word	0x080065e9
 8006570:	080065e9 	.word	0x080065e9
 8006574:	080065e9 	.word	0x080065e9
 8006578:	080065e9 	.word	0x080065e9
 800657c:	080065e9 	.word	0x080065e9
 8006580:	080065e1 	.word	0x080065e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006584:	f7fd fa50 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8006588:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800658a:	e033      	b.n	80065f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800658c:	f7fd fa62 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8006590:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006592:	e02f      	b.n	80065f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006594:	f107 0314 	add.w	r3, r7, #20
 8006598:	4618      	mov	r0, r3
 800659a:	f7fe f975 	bl	8004888 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065a2:	e027      	b.n	80065f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065a4:	f107 0308 	add.w	r3, r7, #8
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe fab9 	bl	8004b20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065b2:	e01f      	b.n	80065f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b4:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <UART_SetConfig+0x94c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065c0:	4b28      	ldr	r3, [pc, #160]	; (8006664 <UART_SetConfig+0x94c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	08db      	lsrs	r3, r3, #3
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	4a27      	ldr	r2, [pc, #156]	; (8006668 <UART_SetConfig+0x950>)
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065d2:	e00f      	b.n	80065f4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80065d4:	4b24      	ldr	r3, [pc, #144]	; (8006668 <UART_SetConfig+0x950>)
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065d8:	e00c      	b.n	80065f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065da:	4b24      	ldr	r3, [pc, #144]	; (800666c <UART_SetConfig+0x954>)
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065de:	e009      	b.n	80065f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065e6:	e005      	b.n	80065f4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80065f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8121 	beq.w	800683e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	4a17      	ldr	r2, [pc, #92]	; (8006660 <UART_SetConfig+0x948>)
 8006602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006606:	461a      	mov	r2, r3
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	fbb3 f3f2 	udiv	r3, r3, r2
 800660e:	005a      	lsls	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	441a      	add	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006620:	b29b      	uxth	r3, r3
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	2b0f      	cmp	r3, #15
 8006628:	d916      	bls.n	8006658 <UART_SetConfig+0x940>
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006630:	d212      	bcs.n	8006658 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	b29b      	uxth	r3, r3
 8006636:	f023 030f 	bic.w	r3, r3, #15
 800663a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	b29b      	uxth	r3, r3
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	b29a      	uxth	r2, r3
 8006648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800664a:	4313      	orrs	r3, r2
 800664c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006654:	60da      	str	r2, [r3, #12]
 8006656:	e0f2      	b.n	800683e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800665e:	e0ee      	b.n	800683e <UART_SetConfig+0xb26>
 8006660:	08009b78 	.word	0x08009b78
 8006664:	58024400 	.word	0x58024400
 8006668:	03d09000 	.word	0x03d09000
 800666c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006670:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	f200 80b7 	bhi.w	80067e8 <UART_SetConfig+0xad0>
 800667a:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <UART_SetConfig+0x968>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	08006785 	.word	0x08006785
 8006684:	0800678d 	.word	0x0800678d
 8006688:	080067e9 	.word	0x080067e9
 800668c:	080067e9 	.word	0x080067e9
 8006690:	08006795 	.word	0x08006795
 8006694:	080067e9 	.word	0x080067e9
 8006698:	080067e9 	.word	0x080067e9
 800669c:	080067e9 	.word	0x080067e9
 80066a0:	080067a5 	.word	0x080067a5
 80066a4:	080067e9 	.word	0x080067e9
 80066a8:	080067e9 	.word	0x080067e9
 80066ac:	080067e9 	.word	0x080067e9
 80066b0:	080067e9 	.word	0x080067e9
 80066b4:	080067e9 	.word	0x080067e9
 80066b8:	080067e9 	.word	0x080067e9
 80066bc:	080067e9 	.word	0x080067e9
 80066c0:	080067b5 	.word	0x080067b5
 80066c4:	080067e9 	.word	0x080067e9
 80066c8:	080067e9 	.word	0x080067e9
 80066cc:	080067e9 	.word	0x080067e9
 80066d0:	080067e9 	.word	0x080067e9
 80066d4:	080067e9 	.word	0x080067e9
 80066d8:	080067e9 	.word	0x080067e9
 80066dc:	080067e9 	.word	0x080067e9
 80066e0:	080067e9 	.word	0x080067e9
 80066e4:	080067e9 	.word	0x080067e9
 80066e8:	080067e9 	.word	0x080067e9
 80066ec:	080067e9 	.word	0x080067e9
 80066f0:	080067e9 	.word	0x080067e9
 80066f4:	080067e9 	.word	0x080067e9
 80066f8:	080067e9 	.word	0x080067e9
 80066fc:	080067e9 	.word	0x080067e9
 8006700:	080067db 	.word	0x080067db
 8006704:	080067e9 	.word	0x080067e9
 8006708:	080067e9 	.word	0x080067e9
 800670c:	080067e9 	.word	0x080067e9
 8006710:	080067e9 	.word	0x080067e9
 8006714:	080067e9 	.word	0x080067e9
 8006718:	080067e9 	.word	0x080067e9
 800671c:	080067e9 	.word	0x080067e9
 8006720:	080067e9 	.word	0x080067e9
 8006724:	080067e9 	.word	0x080067e9
 8006728:	080067e9 	.word	0x080067e9
 800672c:	080067e9 	.word	0x080067e9
 8006730:	080067e9 	.word	0x080067e9
 8006734:	080067e9 	.word	0x080067e9
 8006738:	080067e9 	.word	0x080067e9
 800673c:	080067e9 	.word	0x080067e9
 8006740:	080067e9 	.word	0x080067e9
 8006744:	080067e9 	.word	0x080067e9
 8006748:	080067e9 	.word	0x080067e9
 800674c:	080067e9 	.word	0x080067e9
 8006750:	080067e9 	.word	0x080067e9
 8006754:	080067e9 	.word	0x080067e9
 8006758:	080067e9 	.word	0x080067e9
 800675c:	080067e9 	.word	0x080067e9
 8006760:	080067e9 	.word	0x080067e9
 8006764:	080067e9 	.word	0x080067e9
 8006768:	080067e9 	.word	0x080067e9
 800676c:	080067e9 	.word	0x080067e9
 8006770:	080067e9 	.word	0x080067e9
 8006774:	080067e9 	.word	0x080067e9
 8006778:	080067e9 	.word	0x080067e9
 800677c:	080067e9 	.word	0x080067e9
 8006780:	080067e1 	.word	0x080067e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006784:	f7fd f950 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8006788:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800678a:	e033      	b.n	80067f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800678c:	f7fd f962 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8006790:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006792:	e02f      	b.n	80067f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006794:	f107 0314 	add.w	r3, r7, #20
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe f875 	bl	8004888 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a2:	e027      	b.n	80067f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a4:	f107 0308 	add.w	r3, r7, #8
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe f9b9 	bl	8004b20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067b2:	e01f      	b.n	80067f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b4:	4b2c      	ldr	r3, [pc, #176]	; (8006868 <UART_SetConfig+0xb50>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067c0:	4b29      	ldr	r3, [pc, #164]	; (8006868 <UART_SetConfig+0xb50>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	08db      	lsrs	r3, r3, #3
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	4a28      	ldr	r2, [pc, #160]	; (800686c <UART_SetConfig+0xb54>)
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80067d4:	4b25      	ldr	r3, [pc, #148]	; (800686c <UART_SetConfig+0xb54>)
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067d8:	e00c      	b.n	80067f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067da:	4b25      	ldr	r3, [pc, #148]	; (8006870 <UART_SetConfig+0xb58>)
 80067dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067de:	e009      	b.n	80067f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067e6:	e005      	b.n	80067f4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80067f2:	bf00      	nop
    }

    if (pclk != 0U)
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d021      	beq.n	800683e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <UART_SetConfig+0xb5c>)
 8006800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006804:	461a      	mov	r2, r3
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	fbb3 f2f2 	udiv	r2, r3, r2
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	441a      	add	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	b29b      	uxth	r3, r3
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	2b0f      	cmp	r3, #15
 8006824:	d908      	bls.n	8006838 <UART_SetConfig+0xb20>
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682c:	d204      	bcs.n	8006838 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	e002      	b.n	800683e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800685a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800685e:	4618      	mov	r0, r3
 8006860:	3738      	adds	r7, #56	; 0x38
 8006862:	46bd      	mov	sp, r7
 8006864:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006868:	58024400 	.word	0x58024400
 800686c:	03d09000 	.word	0x03d09000
 8006870:	003d0900 	.word	0x003d0900
 8006874:	08009b78 	.word	0x08009b78

08006878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00a      	beq.n	80068e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01a      	beq.n	800698e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006976:	d10a      	bne.n	800698e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	605a      	str	r2, [r3, #4]
  }
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80069cc:	f7fb fae4 	bl	8001f98 <HAL_GetTick>
 80069d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d10e      	bne.n	80069fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f82c 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e022      	b.n	8006a44 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d10e      	bne.n	8006a2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f816 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e00c      	b.n	8006a44 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5c:	e062      	b.n	8006b24 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d05e      	beq.n	8006b24 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a66:	f7fb fa97 	bl	8001f98 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d11d      	bne.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a8a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0201 	bic.w	r2, r2, #1
 8006a9a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e045      	b.n	8006b44 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d02e      	beq.n	8006b24 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad4:	d126      	bne.n	8006b24 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ade:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006aee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e00f      	b.n	8006b44 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69da      	ldr	r2, [r3, #28]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d08d      	beq.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6899      	ldr	r1, [r3, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <UART_EndRxTransfer+0x44>)
 8006b70:	400b      	ands	r3, r1
 8006b72:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	effffffe 	.word	0xeffffffe

08006b94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff f8a6 	bl	8005d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bce:	2b21      	cmp	r3, #33	; 0x21
 8006bd0:	d12a      	bne.n	8006c28 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d110      	bne.n	8006c00 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bec:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bfc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006bfe:	e013      	b.n	8006c28 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c04:	781a      	ldrb	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c42:	2b21      	cmp	r3, #33	; 0x21
 8006c44:	d12f      	bne.n	8006ca6 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d110      	bne.n	8006c74 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c60:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c70:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006c72:	e018      	b.n	8006ca6 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c78:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c88:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8e:	1c9a      	adds	r2, r3, #2
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc0:	2b21      	cmp	r3, #33	; 0x21
 8006cc2:	d13d      	bne.n	8006d40 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cca:	81fb      	strh	r3, [r7, #14]
 8006ccc:	e035      	b.n	8006d3a <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d111      	bne.n	8006cfe <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006ce8:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf8:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006cfa:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006cfc:	e020      	b.n	8006d40 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d013      	beq.n	8006d34 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d10:	781a      	ldrb	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006d34:	89fb      	ldrh	r3, [r7, #14]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	81fb      	strh	r3, [r7, #14]
 8006d3a:	89fb      	ldrh	r3, [r7, #14]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1c6      	bne.n	8006cce <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8006d40:	bf00      	nop
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d5a:	2b21      	cmp	r3, #33	; 0x21
 8006d5c:	d142      	bne.n	8006de4 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d64:	81fb      	strh	r3, [r7, #14]
 8006d66:	e03a      	b.n	8006dde <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d111      	bne.n	8006d98 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006d82:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d92:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8006d94:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8006d96:	e025      	b.n	8006de4 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d018      	beq.n	8006dd8 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006daa:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc0:	1c9a      	adds	r2, r3, #2
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006dd8:	89fb      	ldrh	r3, [r7, #14]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	81fb      	strh	r3, [r7, #14]
 8006dde:	89fb      	ldrh	r3, [r7, #14]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1c1      	bne.n	8006d68 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e06:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fa fe5c 	bl	8001ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e32:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e3a:	2b22      	cmp	r3, #34	; 0x22
 8006e3c:	d13b      	bne.n	8006eb6 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e46:	89bb      	ldrh	r3, [r7, #12]
 8006e48:	b2d9      	uxtb	r1, r3
 8006e4a:	89fb      	ldrh	r3, [r7, #14]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e52:	400a      	ands	r2, r1
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d122      	bne.n	8006ec6 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e8e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fa fe20 	bl	8001af4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eb4:	e007      	b.n	8006ec6 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	699a      	ldr	r2, [r3, #24]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0208 	orr.w	r2, r2, #8
 8006ec4:	619a      	str	r2, [r3, #24]
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006edc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee4:	2b22      	cmp	r3, #34	; 0x22
 8006ee6:	d13b      	bne.n	8006f60 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ef6:	89ba      	ldrh	r2, [r7, #12]
 8006ef8:	89fb      	ldrh	r3, [r7, #14]
 8006efa:	4013      	ands	r3, r2
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f06:	1c9a      	adds	r2, r3, #2
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d122      	bne.n	8006f70 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f38:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0201 	bic.w	r2, r2, #1
 8006f48:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fa fdcb 	bl	8001af4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f5e:	e007      	b.n	8006f70 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0208 	orr.w	r2, r2, #8
 8006f6e:	619a      	str	r2, [r3, #24]
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f86:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8e:	2b22      	cmp	r3, #34	; 0x22
 8006f90:	d166      	bne.n	8007060 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f98:	81fb      	strh	r3, [r7, #14]
 8006f9a:	e03d      	b.n	8007018 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fa4:	893b      	ldrh	r3, [r7, #8]
 8006fa6:	b2d9      	uxtb	r1, r3
 8006fa8:	89bb      	ldrh	r3, [r7, #12]
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb0:	400a      	ands	r2, r1
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d119      	bne.n	8007012 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fec:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6899      	ldr	r1, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	4b1f      	ldr	r3, [pc, #124]	; (8007078 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8006ffa:	400b      	ands	r3, r1
 8006ffc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7fa fd71 	bl	8001af4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007012:	89fb      	ldrh	r3, [r7, #14]
 8007014:	3b01      	subs	r3, #1
 8007016:	81fb      	strh	r3, [r7, #14]
 8007018:	89fb      	ldrh	r3, [r7, #14]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1be      	bne.n	8006f9c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007024:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007026:	897b      	ldrh	r3, [r7, #10]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d021      	beq.n	8007070 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007032:	897a      	ldrh	r2, [r7, #10]
 8007034:	429a      	cmp	r2, r3
 8007036:	d21b      	bcs.n	8007070 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007046:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a0c      	ldr	r2, [pc, #48]	; (800707c <UART_RxISR_8BIT_FIFOEN+0x104>)
 800704c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0220 	orr.w	r2, r2, #32
 800705c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800705e:	e007      	b.n	8007070 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0208 	orr.w	r2, r2, #8
 800706e:	619a      	str	r2, [r3, #24]
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	effffffe 	.word	0xeffffffe
 800707c:	08006e25 	.word	0x08006e25

08007080 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800708e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007096:	2b22      	cmp	r3, #34	; 0x22
 8007098:	d166      	bne.n	8007168 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070a0:	82fb      	strh	r3, [r7, #22]
 80070a2:	e03d      	b.n	8007120 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80070b2:	8a3a      	ldrh	r2, [r7, #16]
 80070b4:	8abb      	ldrh	r3, [r7, #20]
 80070b6:	4013      	ands	r3, r2
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c2:	1c9a      	adds	r2, r3, #2
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d119      	bne.n	800711a <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070f4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6899      	ldr	r1, [r3, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	4b1f      	ldr	r3, [pc, #124]	; (8007180 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8007102:	400b      	ands	r3, r1
 8007104:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7fa fced 	bl	8001af4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800711a:	8afb      	ldrh	r3, [r7, #22]
 800711c:	3b01      	subs	r3, #1
 800711e:	82fb      	strh	r3, [r7, #22]
 8007120:	8afb      	ldrh	r3, [r7, #22]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1be      	bne.n	80070a4 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800712c:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800712e:	8a7b      	ldrh	r3, [r7, #18]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d021      	beq.n	8007178 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800713a:	8a7a      	ldrh	r2, [r7, #18]
 800713c:	429a      	cmp	r2, r3
 800713e:	d21b      	bcs.n	8007178 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800714e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a0c      	ldr	r2, [pc, #48]	; (8007184 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8007154:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0220 	orr.w	r2, r2, #32
 8007164:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007166:	e007      	b.n	8007178 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0208 	orr.w	r2, r2, #8
 8007176:	619a      	str	r2, [r3, #24]
}
 8007178:	bf00      	nop
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	effffffe 	.word	0xeffffffe
 8007184:	08006ecf 	.word	0x08006ecf

08007188 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_UARTEx_DisableFifoMode+0x16>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e027      	b.n	800722a <HAL_UARTEx_DisableFifoMode+0x66>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2224      	movs	r2, #36	; 0x24
 80071e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0201 	bic.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007208:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800724a:	2302      	movs	r3, #2
 800724c:	e02d      	b.n	80072aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2224      	movs	r2, #36	; 0x24
 800725a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f850 	bl	8007330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e02d      	b.n	8007326 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2224      	movs	r2, #36	; 0x24
 80072d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f812 	bl	8007330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b089      	sub	sp, #36	; 0x24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007338:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <UARTEx_SetNbDataToProcess+0xc8>)
 800733a:	f107 0314 	add.w	r3, r7, #20
 800733e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007342:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007346:	4a2d      	ldr	r2, [pc, #180]	; (80073fc <UARTEx_SetNbDataToProcess+0xcc>)
 8007348:	f107 030c 	add.w	r3, r7, #12
 800734c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007350:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007358:	2b00      	cmp	r3, #0
 800735a:	d108      	bne.n	800736e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800736c:	e03d      	b.n	80073ea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800736e:	2310      	movs	r3, #16
 8007370:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007372:	2310      	movs	r3, #16
 8007374:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	0e5b      	lsrs	r3, r3, #25
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	0f5b      	lsrs	r3, r3, #29
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007396:	7fbb      	ldrb	r3, [r7, #30]
 8007398:	7f3a      	ldrb	r2, [r7, #28]
 800739a:	f107 0120 	add.w	r1, r7, #32
 800739e:	440a      	add	r2, r1
 80073a0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80073a4:	fb02 f303 	mul.w	r3, r2, r3
 80073a8:	7f3a      	ldrb	r2, [r7, #28]
 80073aa:	f107 0120 	add.w	r1, r7, #32
 80073ae:	440a      	add	r2, r1
 80073b0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80073b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80073c0:	7ffb      	ldrb	r3, [r7, #31]
 80073c2:	7f7a      	ldrb	r2, [r7, #29]
 80073c4:	f107 0120 	add.w	r1, r7, #32
 80073c8:	440a      	add	r2, r1
 80073ca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	7f7a      	ldrb	r2, [r7, #29]
 80073d4:	f107 0120 	add.w	r1, r7, #32
 80073d8:	440a      	add	r2, r1
 80073da:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80073de:	fb93 f3f2 	sdiv	r3, r3, r2
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073ea:	bf00      	nop
 80073ec:	3724      	adds	r7, #36	; 0x24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	08009b4c 	.word	0x08009b4c
 80073fc:	08009b54 	.word	0x08009b54

08007400 <arm_std_f32>:
 8007400:	2901      	cmp	r1, #1
 8007402:	d065      	beq.n	80074d0 <arm_std_f32+0xd0>
 8007404:	eddf 5a39 	vldr	s11, [pc, #228]	; 80074ec <arm_std_f32+0xec>
 8007408:	b530      	push	{r4, r5, lr}
 800740a:	088d      	lsrs	r5, r1, #2
 800740c:	b083      	sub	sp, #12
 800740e:	d062      	beq.n	80074d6 <arm_std_f32+0xd6>
 8007410:	eef0 6a65 	vmov.f32	s13, s11
 8007414:	f100 0310 	add.w	r3, r0, #16
 8007418:	462c      	mov	r4, r5
 800741a:	ed53 7a04 	vldr	s15, [r3, #-16]
 800741e:	3c01      	subs	r4, #1
 8007420:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007424:	f103 0310 	add.w	r3, r3, #16
 8007428:	ee27 4aa7 	vmul.f32	s8, s15, s15
 800742c:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8007430:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007434:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8007438:	ee27 5a07 	vmul.f32	s10, s14, s14
 800743c:	ee74 5a25 	vadd.f32	s11, s8, s11
 8007440:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007444:	ee64 6aa4 	vmul.f32	s13, s9, s9
 8007448:	ee75 5a25 	vadd.f32	s11, s10, s11
 800744c:	ee77 7a24 	vadd.f32	s15, s14, s9
 8007450:	ee26 7a06 	vmul.f32	s14, s12, s12
 8007454:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8007458:	ee77 6a86 	vadd.f32	s13, s15, s12
 800745c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8007460:	d1db      	bne.n	800741a <arm_std_f32+0x1a>
 8007462:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007466:	f011 0303 	ands.w	r3, r1, #3
 800746a:	d009      	beq.n	8007480 <arm_std_f32+0x80>
 800746c:	ecf0 7a01 	vldmia	r0!, {s15}
 8007470:	3b01      	subs	r3, #1
 8007472:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007476:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800747a:	ee75 5a87 	vadd.f32	s11, s11, s14
 800747e:	d1f5      	bne.n	800746c <arm_std_f32+0x6c>
 8007480:	ee07 1a90 	vmov	s15, r1
 8007484:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007490:	ee77 6ac6 	vsub.f32	s13, s15, s12
 8007494:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8007498:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800749c:	ee27 7a07 	vmul.f32	s14, s14, s14
 80074a0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80074a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80074a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80074ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b0:	db0a      	blt.n	80074c8 <arm_std_f32+0xc8>
 80074b2:	eeb1 0ac7 	vsqrt.f32	s0, s14
 80074b6:	eeb4 0a40 	vcmp.f32	s0, s0
 80074ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074be:	d10d      	bne.n	80074dc <arm_std_f32+0xdc>
 80074c0:	ed82 0a00 	vstr	s0, [r2]
 80074c4:	b003      	add	sp, #12
 80074c6:	bd30      	pop	{r4, r5, pc}
 80074c8:	2300      	movs	r3, #0
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	b003      	add	sp, #12
 80074ce:	bd30      	pop	{r4, r5, pc}
 80074d0:	2300      	movs	r3, #0
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	4770      	bx	lr
 80074d6:	eef0 6a65 	vmov.f32	s13, s11
 80074da:	e7c4      	b.n	8007466 <arm_std_f32+0x66>
 80074dc:	eeb0 0a47 	vmov.f32	s0, s14
 80074e0:	9201      	str	r2, [sp, #4]
 80074e2:	f002 f8c9 	bl	8009678 <sqrtf>
 80074e6:	9a01      	ldr	r2, [sp, #4]
 80074e8:	e7ea      	b.n	80074c0 <arm_std_f32+0xc0>
 80074ea:	bf00      	nop
 80074ec:	00000000 	.word	0x00000000

080074f0 <arm_power_f32>:
 80074f0:	b430      	push	{r4, r5}
 80074f2:	088d      	lsrs	r5, r1, #2
 80074f4:	d031      	beq.n	800755a <arm_power_f32+0x6a>
 80074f6:	f100 0310 	add.w	r3, r0, #16
 80074fa:	462c      	mov	r4, r5
 80074fc:	ed9f 5a18 	vldr	s10, [pc, #96]	; 8007560 <arm_power_f32+0x70>
 8007500:	ed53 6a04 	vldr	s13, [r3, #-16]
 8007504:	3c01      	subs	r4, #1
 8007506:	ed13 7a03 	vldr	s14, [r3, #-12]
 800750a:	f103 0310 	add.w	r3, r3, #16
 800750e:	ee26 6aa6 	vmul.f32	s12, s13, s13
 8007512:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8007516:	ee67 6a07 	vmul.f32	s13, s14, s14
 800751a:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 800751e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007522:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007526:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007532:	ee35 5aa7 	vadd.f32	s10, s11, s15
 8007536:	d1e3      	bne.n	8007500 <arm_power_f32+0x10>
 8007538:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800753c:	f011 0103 	ands.w	r1, r1, #3
 8007540:	d007      	beq.n	8007552 <arm_power_f32+0x62>
 8007542:	ecb0 6a01 	vldmia	r0!, {s12}
 8007546:	3901      	subs	r1, #1
 8007548:	ee26 6a06 	vmul.f32	s12, s12, s12
 800754c:	ee35 5a06 	vadd.f32	s10, s10, s12
 8007550:	d1f7      	bne.n	8007542 <arm_power_f32+0x52>
 8007552:	ed82 5a00 	vstr	s10, [r2]
 8007556:	bc30      	pop	{r4, r5}
 8007558:	4770      	bx	lr
 800755a:	ed9f 5a01 	vldr	s10, [pc, #4]	; 8007560 <arm_power_f32+0x70>
 800755e:	e7ed      	b.n	800753c <arm_power_f32+0x4c>
 8007560:	00000000 	.word	0x00000000

08007564 <arm_mean_f32>:
 8007564:	b430      	push	{r4, r5}
 8007566:	088d      	lsrs	r5, r1, #2
 8007568:	d02d      	beq.n	80075c6 <arm_mean_f32+0x62>
 800756a:	f100 0310 	add.w	r3, r0, #16
 800756e:	462c      	mov	r4, r5
 8007570:	eddf 7a16 	vldr	s15, [pc, #88]	; 80075cc <arm_mean_f32+0x68>
 8007574:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007578:	3c01      	subs	r4, #1
 800757a:	ed13 6a03 	vldr	s12, [r3, #-12]
 800757e:	f103 0310 	add.w	r3, r3, #16
 8007582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007586:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800758a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 800758e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759a:	d1eb      	bne.n	8007574 <arm_mean_f32+0x10>
 800759c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80075a0:	f011 0303 	ands.w	r3, r1, #3
 80075a4:	d005      	beq.n	80075b2 <arm_mean_f32+0x4e>
 80075a6:	ecb0 7a01 	vldmia	r0!, {s14}
 80075aa:	3b01      	subs	r3, #1
 80075ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075b0:	d1f9      	bne.n	80075a6 <arm_mean_f32+0x42>
 80075b2:	ee07 1a10 	vmov	s14, r1
 80075b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80075ba:	bc30      	pop	{r4, r5}
 80075bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80075c0:	edc2 6a00 	vstr	s13, [r2]
 80075c4:	4770      	bx	lr
 80075c6:	eddf 7a01 	vldr	s15, [pc, #4]	; 80075cc <arm_mean_f32+0x68>
 80075ca:	e7e9      	b.n	80075a0 <arm_mean_f32+0x3c>
 80075cc:	00000000 	.word	0x00000000

080075d0 <arm_max_f32>:
 80075d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	1e4d      	subs	r5, r1, #1
 80075d6:	f100 0c04 	add.w	ip, r0, #4
 80075da:	edd0 7a00 	vldr	s15, [r0]
 80075de:	ea5f 0995 	movs.w	r9, r5, lsr #2
 80075e2:	d056      	beq.n	8007692 <arm_max_f32+0xc2>
 80075e4:	3014      	adds	r0, #20
 80075e6:	46c8      	mov	r8, r9
 80075e8:	2404      	movs	r4, #4
 80075ea:	2600      	movs	r6, #0
 80075ec:	ed10 6a04 	vldr	s12, [r0, #-16]
 80075f0:	f1a4 0a03 	sub.w	sl, r4, #3
 80075f4:	ed50 6a03 	vldr	s13, [r0, #-12]
 80075f8:	f1a4 0e02 	sub.w	lr, r4, #2
 80075fc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007600:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007604:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007608:	1e67      	subs	r7, r4, #1
 800760a:	3010      	adds	r0, #16
 800760c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007610:	bfc8      	it	gt
 8007612:	eef0 7a46 	vmovgt.f32	s15, s12
 8007616:	bfc8      	it	gt
 8007618:	4656      	movgt	r6, sl
 800761a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007622:	bf48      	it	mi
 8007624:	eef0 7a66 	vmovmi.f32	s15, s13
 8007628:	bf48      	it	mi
 800762a:	4676      	movmi	r6, lr
 800762c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007634:	bf48      	it	mi
 8007636:	eef0 7a47 	vmovmi.f32	s15, s14
 800763a:	bf48      	it	mi
 800763c:	463e      	movmi	r6, r7
 800763e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8007642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007646:	bf48      	it	mi
 8007648:	4626      	movmi	r6, r4
 800764a:	bf48      	it	mi
 800764c:	eef0 7a65 	vmovmi.f32	s15, s11
 8007650:	f1b8 0801 	subs.w	r8, r8, #1
 8007654:	f104 0404 	add.w	r4, r4, #4
 8007658:	d1c8      	bne.n	80075ec <arm_max_f32+0x1c>
 800765a:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 800765e:	f015 0003 	ands.w	r0, r5, #3
 8007662:	d018      	beq.n	8007696 <arm_max_f32+0xc6>
 8007664:	1a08      	subs	r0, r1, r0
 8007666:	ecbc 7a01 	vldmia	ip!, {s14}
 800766a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800766e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007672:	bfc8      	it	gt
 8007674:	4606      	movgt	r6, r0
 8007676:	f100 0001 	add.w	r0, r0, #1
 800767a:	bfd8      	it	le
 800767c:	eeb0 7a67 	vmovle.f32	s14, s15
 8007680:	4281      	cmp	r1, r0
 8007682:	eef0 7a47 	vmov.f32	s15, s14
 8007686:	d1ee      	bne.n	8007666 <arm_max_f32+0x96>
 8007688:	ed82 7a00 	vstr	s14, [r2]
 800768c:	601e      	str	r6, [r3, #0]
 800768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007692:	464e      	mov	r6, r9
 8007694:	e7e3      	b.n	800765e <arm_max_f32+0x8e>
 8007696:	eeb0 7a67 	vmov.f32	s14, s15
 800769a:	e7f5      	b.n	8007688 <arm_max_f32+0xb8>

0800769c <__errno>:
 800769c:	4b01      	ldr	r3, [pc, #4]	; (80076a4 <__errno+0x8>)
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	24000010 	.word	0x24000010

080076a8 <__libc_init_array>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4e0d      	ldr	r6, [pc, #52]	; (80076e0 <__libc_init_array+0x38>)
 80076ac:	4c0d      	ldr	r4, [pc, #52]	; (80076e4 <__libc_init_array+0x3c>)
 80076ae:	1ba4      	subs	r4, r4, r6
 80076b0:	10a4      	asrs	r4, r4, #2
 80076b2:	2500      	movs	r5, #0
 80076b4:	42a5      	cmp	r5, r4
 80076b6:	d109      	bne.n	80076cc <__libc_init_array+0x24>
 80076b8:	4e0b      	ldr	r6, [pc, #44]	; (80076e8 <__libc_init_array+0x40>)
 80076ba:	4c0c      	ldr	r4, [pc, #48]	; (80076ec <__libc_init_array+0x44>)
 80076bc:	f002 f9b6 	bl	8009a2c <_init>
 80076c0:	1ba4      	subs	r4, r4, r6
 80076c2:	10a4      	asrs	r4, r4, #2
 80076c4:	2500      	movs	r5, #0
 80076c6:	42a5      	cmp	r5, r4
 80076c8:	d105      	bne.n	80076d6 <__libc_init_array+0x2e>
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076d0:	4798      	blx	r3
 80076d2:	3501      	adds	r5, #1
 80076d4:	e7ee      	b.n	80076b4 <__libc_init_array+0xc>
 80076d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076da:	4798      	blx	r3
 80076dc:	3501      	adds	r5, #1
 80076de:	e7f2      	b.n	80076c6 <__libc_init_array+0x1e>
 80076e0:	08009e20 	.word	0x08009e20
 80076e4:	08009e20 	.word	0x08009e20
 80076e8:	08009e20 	.word	0x08009e20
 80076ec:	08009e24 	.word	0x08009e24

080076f0 <malloc>:
 80076f0:	4b02      	ldr	r3, [pc, #8]	; (80076fc <malloc+0xc>)
 80076f2:	4601      	mov	r1, r0
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	f000 b861 	b.w	80077bc <_malloc_r>
 80076fa:	bf00      	nop
 80076fc:	24000010 	.word	0x24000010

08007700 <free>:
 8007700:	4b02      	ldr	r3, [pc, #8]	; (800770c <free+0xc>)
 8007702:	4601      	mov	r1, r0
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	f000 b80b 	b.w	8007720 <_free_r>
 800770a:	bf00      	nop
 800770c:	24000010 	.word	0x24000010

08007710 <memset>:
 8007710:	4402      	add	r2, r0
 8007712:	4603      	mov	r3, r0
 8007714:	4293      	cmp	r3, r2
 8007716:	d100      	bne.n	800771a <memset+0xa>
 8007718:	4770      	bx	lr
 800771a:	f803 1b01 	strb.w	r1, [r3], #1
 800771e:	e7f9      	b.n	8007714 <memset+0x4>

08007720 <_free_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4605      	mov	r5, r0
 8007724:	2900      	cmp	r1, #0
 8007726:	d045      	beq.n	80077b4 <_free_r+0x94>
 8007728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800772c:	1f0c      	subs	r4, r1, #4
 800772e:	2b00      	cmp	r3, #0
 8007730:	bfb8      	it	lt
 8007732:	18e4      	addlt	r4, r4, r3
 8007734:	f001 faf9 	bl	8008d2a <__malloc_lock>
 8007738:	4a1f      	ldr	r2, [pc, #124]	; (80077b8 <_free_r+0x98>)
 800773a:	6813      	ldr	r3, [r2, #0]
 800773c:	4610      	mov	r0, r2
 800773e:	b933      	cbnz	r3, 800774e <_free_r+0x2e>
 8007740:	6063      	str	r3, [r4, #4]
 8007742:	6014      	str	r4, [r2, #0]
 8007744:	4628      	mov	r0, r5
 8007746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800774a:	f001 baef 	b.w	8008d2c <__malloc_unlock>
 800774e:	42a3      	cmp	r3, r4
 8007750:	d90c      	bls.n	800776c <_free_r+0x4c>
 8007752:	6821      	ldr	r1, [r4, #0]
 8007754:	1862      	adds	r2, r4, r1
 8007756:	4293      	cmp	r3, r2
 8007758:	bf04      	itt	eq
 800775a:	681a      	ldreq	r2, [r3, #0]
 800775c:	685b      	ldreq	r3, [r3, #4]
 800775e:	6063      	str	r3, [r4, #4]
 8007760:	bf04      	itt	eq
 8007762:	1852      	addeq	r2, r2, r1
 8007764:	6022      	streq	r2, [r4, #0]
 8007766:	6004      	str	r4, [r0, #0]
 8007768:	e7ec      	b.n	8007744 <_free_r+0x24>
 800776a:	4613      	mov	r3, r2
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	b10a      	cbz	r2, 8007774 <_free_r+0x54>
 8007770:	42a2      	cmp	r2, r4
 8007772:	d9fa      	bls.n	800776a <_free_r+0x4a>
 8007774:	6819      	ldr	r1, [r3, #0]
 8007776:	1858      	adds	r0, r3, r1
 8007778:	42a0      	cmp	r0, r4
 800777a:	d10b      	bne.n	8007794 <_free_r+0x74>
 800777c:	6820      	ldr	r0, [r4, #0]
 800777e:	4401      	add	r1, r0
 8007780:	1858      	adds	r0, r3, r1
 8007782:	4282      	cmp	r2, r0
 8007784:	6019      	str	r1, [r3, #0]
 8007786:	d1dd      	bne.n	8007744 <_free_r+0x24>
 8007788:	6810      	ldr	r0, [r2, #0]
 800778a:	6852      	ldr	r2, [r2, #4]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	4401      	add	r1, r0
 8007790:	6019      	str	r1, [r3, #0]
 8007792:	e7d7      	b.n	8007744 <_free_r+0x24>
 8007794:	d902      	bls.n	800779c <_free_r+0x7c>
 8007796:	230c      	movs	r3, #12
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	e7d3      	b.n	8007744 <_free_r+0x24>
 800779c:	6820      	ldr	r0, [r4, #0]
 800779e:	1821      	adds	r1, r4, r0
 80077a0:	428a      	cmp	r2, r1
 80077a2:	bf04      	itt	eq
 80077a4:	6811      	ldreq	r1, [r2, #0]
 80077a6:	6852      	ldreq	r2, [r2, #4]
 80077a8:	6062      	str	r2, [r4, #4]
 80077aa:	bf04      	itt	eq
 80077ac:	1809      	addeq	r1, r1, r0
 80077ae:	6021      	streq	r1, [r4, #0]
 80077b0:	605c      	str	r4, [r3, #4]
 80077b2:	e7c7      	b.n	8007744 <_free_r+0x24>
 80077b4:	bd38      	pop	{r3, r4, r5, pc}
 80077b6:	bf00      	nop
 80077b8:	2400023c 	.word	0x2400023c

080077bc <_malloc_r>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	1ccd      	adds	r5, r1, #3
 80077c0:	f025 0503 	bic.w	r5, r5, #3
 80077c4:	3508      	adds	r5, #8
 80077c6:	2d0c      	cmp	r5, #12
 80077c8:	bf38      	it	cc
 80077ca:	250c      	movcc	r5, #12
 80077cc:	2d00      	cmp	r5, #0
 80077ce:	4606      	mov	r6, r0
 80077d0:	db01      	blt.n	80077d6 <_malloc_r+0x1a>
 80077d2:	42a9      	cmp	r1, r5
 80077d4:	d903      	bls.n	80077de <_malloc_r+0x22>
 80077d6:	230c      	movs	r3, #12
 80077d8:	6033      	str	r3, [r6, #0]
 80077da:	2000      	movs	r0, #0
 80077dc:	bd70      	pop	{r4, r5, r6, pc}
 80077de:	f001 faa4 	bl	8008d2a <__malloc_lock>
 80077e2:	4a21      	ldr	r2, [pc, #132]	; (8007868 <_malloc_r+0xac>)
 80077e4:	6814      	ldr	r4, [r2, #0]
 80077e6:	4621      	mov	r1, r4
 80077e8:	b991      	cbnz	r1, 8007810 <_malloc_r+0x54>
 80077ea:	4c20      	ldr	r4, [pc, #128]	; (800786c <_malloc_r+0xb0>)
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	b91b      	cbnz	r3, 80077f8 <_malloc_r+0x3c>
 80077f0:	4630      	mov	r0, r6
 80077f2:	f000 fc79 	bl	80080e8 <_sbrk_r>
 80077f6:	6020      	str	r0, [r4, #0]
 80077f8:	4629      	mov	r1, r5
 80077fa:	4630      	mov	r0, r6
 80077fc:	f000 fc74 	bl	80080e8 <_sbrk_r>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d124      	bne.n	800784e <_malloc_r+0x92>
 8007804:	230c      	movs	r3, #12
 8007806:	6033      	str	r3, [r6, #0]
 8007808:	4630      	mov	r0, r6
 800780a:	f001 fa8f 	bl	8008d2c <__malloc_unlock>
 800780e:	e7e4      	b.n	80077da <_malloc_r+0x1e>
 8007810:	680b      	ldr	r3, [r1, #0]
 8007812:	1b5b      	subs	r3, r3, r5
 8007814:	d418      	bmi.n	8007848 <_malloc_r+0x8c>
 8007816:	2b0b      	cmp	r3, #11
 8007818:	d90f      	bls.n	800783a <_malloc_r+0x7e>
 800781a:	600b      	str	r3, [r1, #0]
 800781c:	50cd      	str	r5, [r1, r3]
 800781e:	18cc      	adds	r4, r1, r3
 8007820:	4630      	mov	r0, r6
 8007822:	f001 fa83 	bl	8008d2c <__malloc_unlock>
 8007826:	f104 000b 	add.w	r0, r4, #11
 800782a:	1d23      	adds	r3, r4, #4
 800782c:	f020 0007 	bic.w	r0, r0, #7
 8007830:	1ac3      	subs	r3, r0, r3
 8007832:	d0d3      	beq.n	80077dc <_malloc_r+0x20>
 8007834:	425a      	negs	r2, r3
 8007836:	50e2      	str	r2, [r4, r3]
 8007838:	e7d0      	b.n	80077dc <_malloc_r+0x20>
 800783a:	428c      	cmp	r4, r1
 800783c:	684b      	ldr	r3, [r1, #4]
 800783e:	bf16      	itet	ne
 8007840:	6063      	strne	r3, [r4, #4]
 8007842:	6013      	streq	r3, [r2, #0]
 8007844:	460c      	movne	r4, r1
 8007846:	e7eb      	b.n	8007820 <_malloc_r+0x64>
 8007848:	460c      	mov	r4, r1
 800784a:	6849      	ldr	r1, [r1, #4]
 800784c:	e7cc      	b.n	80077e8 <_malloc_r+0x2c>
 800784e:	1cc4      	adds	r4, r0, #3
 8007850:	f024 0403 	bic.w	r4, r4, #3
 8007854:	42a0      	cmp	r0, r4
 8007856:	d005      	beq.n	8007864 <_malloc_r+0xa8>
 8007858:	1a21      	subs	r1, r4, r0
 800785a:	4630      	mov	r0, r6
 800785c:	f000 fc44 	bl	80080e8 <_sbrk_r>
 8007860:	3001      	adds	r0, #1
 8007862:	d0cf      	beq.n	8007804 <_malloc_r+0x48>
 8007864:	6025      	str	r5, [r4, #0]
 8007866:	e7db      	b.n	8007820 <_malloc_r+0x64>
 8007868:	2400023c 	.word	0x2400023c
 800786c:	24000240 	.word	0x24000240

08007870 <__cvt>:
 8007870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007872:	ed2d 8b02 	vpush	{d8}
 8007876:	eeb0 8b40 	vmov.f64	d8, d0
 800787a:	b085      	sub	sp, #20
 800787c:	4617      	mov	r7, r2
 800787e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007880:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007882:	ee18 2a90 	vmov	r2, s17
 8007886:	f025 0520 	bic.w	r5, r5, #32
 800788a:	2a00      	cmp	r2, #0
 800788c:	bfb6      	itet	lt
 800788e:	222d      	movlt	r2, #45	; 0x2d
 8007890:	2200      	movge	r2, #0
 8007892:	eeb1 8b40 	vneglt.f64	d8, d0
 8007896:	2d46      	cmp	r5, #70	; 0x46
 8007898:	460c      	mov	r4, r1
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	d004      	beq.n	80078a8 <__cvt+0x38>
 800789e:	2d45      	cmp	r5, #69	; 0x45
 80078a0:	d100      	bne.n	80078a4 <__cvt+0x34>
 80078a2:	3401      	adds	r4, #1
 80078a4:	2102      	movs	r1, #2
 80078a6:	e000      	b.n	80078aa <__cvt+0x3a>
 80078a8:	2103      	movs	r1, #3
 80078aa:	ab03      	add	r3, sp, #12
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	ab02      	add	r3, sp, #8
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	4622      	mov	r2, r4
 80078b4:	4633      	mov	r3, r6
 80078b6:	eeb0 0b48 	vmov.f64	d0, d8
 80078ba:	f000 fcd1 	bl	8008260 <_dtoa_r>
 80078be:	2d47      	cmp	r5, #71	; 0x47
 80078c0:	d101      	bne.n	80078c6 <__cvt+0x56>
 80078c2:	07fb      	lsls	r3, r7, #31
 80078c4:	d51e      	bpl.n	8007904 <__cvt+0x94>
 80078c6:	2d46      	cmp	r5, #70	; 0x46
 80078c8:	eb00 0304 	add.w	r3, r0, r4
 80078cc:	d10c      	bne.n	80078e8 <__cvt+0x78>
 80078ce:	7802      	ldrb	r2, [r0, #0]
 80078d0:	2a30      	cmp	r2, #48	; 0x30
 80078d2:	d107      	bne.n	80078e4 <__cvt+0x74>
 80078d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80078d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078dc:	bf1c      	itt	ne
 80078de:	f1c4 0401 	rsbne	r4, r4, #1
 80078e2:	6034      	strne	r4, [r6, #0]
 80078e4:	6832      	ldr	r2, [r6, #0]
 80078e6:	4413      	add	r3, r2
 80078e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80078ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f0:	d007      	beq.n	8007902 <__cvt+0x92>
 80078f2:	2130      	movs	r1, #48	; 0x30
 80078f4:	9a03      	ldr	r2, [sp, #12]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d204      	bcs.n	8007904 <__cvt+0x94>
 80078fa:	1c54      	adds	r4, r2, #1
 80078fc:	9403      	str	r4, [sp, #12]
 80078fe:	7011      	strb	r1, [r2, #0]
 8007900:	e7f8      	b.n	80078f4 <__cvt+0x84>
 8007902:	9303      	str	r3, [sp, #12]
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007908:	1a1b      	subs	r3, r3, r0
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	b005      	add	sp, #20
 800790e:	ecbd 8b02 	vpop	{d8}
 8007912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007914 <__exponent>:
 8007914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007916:	2900      	cmp	r1, #0
 8007918:	4604      	mov	r4, r0
 800791a:	bfba      	itte	lt
 800791c:	4249      	neglt	r1, r1
 800791e:	232d      	movlt	r3, #45	; 0x2d
 8007920:	232b      	movge	r3, #43	; 0x2b
 8007922:	2909      	cmp	r1, #9
 8007924:	f804 2b02 	strb.w	r2, [r4], #2
 8007928:	7043      	strb	r3, [r0, #1]
 800792a:	dd20      	ble.n	800796e <__exponent+0x5a>
 800792c:	f10d 0307 	add.w	r3, sp, #7
 8007930:	461f      	mov	r7, r3
 8007932:	260a      	movs	r6, #10
 8007934:	fb91 f5f6 	sdiv	r5, r1, r6
 8007938:	fb06 1115 	mls	r1, r6, r5, r1
 800793c:	3130      	adds	r1, #48	; 0x30
 800793e:	2d09      	cmp	r5, #9
 8007940:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007944:	f103 32ff 	add.w	r2, r3, #4294967295
 8007948:	4629      	mov	r1, r5
 800794a:	dc09      	bgt.n	8007960 <__exponent+0x4c>
 800794c:	3130      	adds	r1, #48	; 0x30
 800794e:	3b02      	subs	r3, #2
 8007950:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007954:	42bb      	cmp	r3, r7
 8007956:	4622      	mov	r2, r4
 8007958:	d304      	bcc.n	8007964 <__exponent+0x50>
 800795a:	1a10      	subs	r0, r2, r0
 800795c:	b003      	add	sp, #12
 800795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007960:	4613      	mov	r3, r2
 8007962:	e7e7      	b.n	8007934 <__exponent+0x20>
 8007964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007968:	f804 2b01 	strb.w	r2, [r4], #1
 800796c:	e7f2      	b.n	8007954 <__exponent+0x40>
 800796e:	2330      	movs	r3, #48	; 0x30
 8007970:	4419      	add	r1, r3
 8007972:	7083      	strb	r3, [r0, #2]
 8007974:	1d02      	adds	r2, r0, #4
 8007976:	70c1      	strb	r1, [r0, #3]
 8007978:	e7ef      	b.n	800795a <__exponent+0x46>
 800797a:	0000      	movs	r0, r0
 800797c:	0000      	movs	r0, r0
	...

08007980 <_printf_float>:
 8007980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	b08d      	sub	sp, #52	; 0x34
 8007986:	460c      	mov	r4, r1
 8007988:	4616      	mov	r6, r2
 800798a:	461f      	mov	r7, r3
 800798c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007990:	4605      	mov	r5, r0
 8007992:	f001 f9b1 	bl	8008cf8 <_localeconv_r>
 8007996:	f8d0 b000 	ldr.w	fp, [r0]
 800799a:	4658      	mov	r0, fp
 800799c:	f7f8 fca0 	bl	80002e0 <strlen>
 80079a0:	2300      	movs	r3, #0
 80079a2:	930a      	str	r3, [sp, #40]	; 0x28
 80079a4:	f8d8 3000 	ldr.w	r3, [r8]
 80079a8:	9005      	str	r0, [sp, #20]
 80079aa:	3307      	adds	r3, #7
 80079ac:	f023 0307 	bic.w	r3, r3, #7
 80079b0:	f103 0108 	add.w	r1, r3, #8
 80079b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80079b8:	6822      	ldr	r2, [r4, #0]
 80079ba:	f8c8 1000 	str.w	r1, [r8]
 80079be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80079c6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8007c50 <_printf_float+0x2d0>
 80079ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80079ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80079d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80079d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079da:	dd24      	ble.n	8007a26 <_printf_float+0xa6>
 80079dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80079e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e4:	d502      	bpl.n	80079ec <_printf_float+0x6c>
 80079e6:	232d      	movs	r3, #45	; 0x2d
 80079e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ec:	499a      	ldr	r1, [pc, #616]	; (8007c58 <_printf_float+0x2d8>)
 80079ee:	4b9b      	ldr	r3, [pc, #620]	; (8007c5c <_printf_float+0x2dc>)
 80079f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80079f4:	bf8c      	ite	hi
 80079f6:	4688      	movhi	r8, r1
 80079f8:	4698      	movls	r8, r3
 80079fa:	f022 0204 	bic.w	r2, r2, #4
 80079fe:	2303      	movs	r3, #3
 8007a00:	6123      	str	r3, [r4, #16]
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	f04f 0a00 	mov.w	sl, #0
 8007a08:	9700      	str	r7, [sp, #0]
 8007a0a:	4633      	mov	r3, r6
 8007a0c:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f000 f9e1 	bl	8007dd8 <_printf_common>
 8007a16:	3001      	adds	r0, #1
 8007a18:	f040 8089 	bne.w	8007b2e <_printf_float+0x1ae>
 8007a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a20:	b00d      	add	sp, #52	; 0x34
 8007a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a26:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2e:	d702      	bvc.n	8007a36 <_printf_float+0xb6>
 8007a30:	498b      	ldr	r1, [pc, #556]	; (8007c60 <_printf_float+0x2e0>)
 8007a32:	4b8c      	ldr	r3, [pc, #560]	; (8007c64 <_printf_float+0x2e4>)
 8007a34:	e7dc      	b.n	80079f0 <_printf_float+0x70>
 8007a36:	6861      	ldr	r1, [r4, #4]
 8007a38:	1c4b      	adds	r3, r1, #1
 8007a3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a3e:	ab0a      	add	r3, sp, #40	; 0x28
 8007a40:	a809      	add	r0, sp, #36	; 0x24
 8007a42:	d13b      	bne.n	8007abc <_printf_float+0x13c>
 8007a44:	2106      	movs	r1, #6
 8007a46:	6061      	str	r1, [r4, #4]
 8007a48:	f04f 0c00 	mov.w	ip, #0
 8007a4c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007a50:	e9cd 0900 	strd	r0, r9, [sp]
 8007a54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	6861      	ldr	r1, [r4, #4]
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f7ff ff07 	bl	8007870 <__cvt>
 8007a62:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8007a66:	2b47      	cmp	r3, #71	; 0x47
 8007a68:	4680      	mov	r8, r0
 8007a6a:	d109      	bne.n	8007a80 <_printf_float+0x100>
 8007a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6e:	1cd8      	adds	r0, r3, #3
 8007a70:	db02      	blt.n	8007a78 <_printf_float+0xf8>
 8007a72:	6862      	ldr	r2, [r4, #4]
 8007a74:	4293      	cmp	r3, r2
 8007a76:	dd47      	ble.n	8007b08 <_printf_float+0x188>
 8007a78:	f1a9 0902 	sub.w	r9, r9, #2
 8007a7c:	fa5f f989 	uxtb.w	r9, r9
 8007a80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a86:	d824      	bhi.n	8007ad2 <_printf_float+0x152>
 8007a88:	3901      	subs	r1, #1
 8007a8a:	464a      	mov	r2, r9
 8007a8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a90:	9109      	str	r1, [sp, #36]	; 0x24
 8007a92:	f7ff ff3f 	bl	8007914 <__exponent>
 8007a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a98:	1813      	adds	r3, r2, r0
 8007a9a:	2a01      	cmp	r2, #1
 8007a9c:	4682      	mov	sl, r0
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	dc02      	bgt.n	8007aa8 <_printf_float+0x128>
 8007aa2:	6822      	ldr	r2, [r4, #0]
 8007aa4:	07d1      	lsls	r1, r2, #31
 8007aa6:	d501      	bpl.n	8007aac <_printf_float+0x12c>
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	6123      	str	r3, [r4, #16]
 8007aac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d0a9      	beq.n	8007a08 <_printf_float+0x88>
 8007ab4:	232d      	movs	r3, #45	; 0x2d
 8007ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aba:	e7a5      	b.n	8007a08 <_printf_float+0x88>
 8007abc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8007ac0:	f000 8178 	beq.w	8007db4 <_printf_float+0x434>
 8007ac4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007ac8:	d1be      	bne.n	8007a48 <_printf_float+0xc8>
 8007aca:	2900      	cmp	r1, #0
 8007acc:	d1bc      	bne.n	8007a48 <_printf_float+0xc8>
 8007ace:	2101      	movs	r1, #1
 8007ad0:	e7b9      	b.n	8007a46 <_printf_float+0xc6>
 8007ad2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007ad6:	d119      	bne.n	8007b0c <_printf_float+0x18c>
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	6863      	ldr	r3, [r4, #4]
 8007adc:	dd0c      	ble.n	8007af8 <_printf_float+0x178>
 8007ade:	6121      	str	r1, [r4, #16]
 8007ae0:	b913      	cbnz	r3, 8007ae8 <_printf_float+0x168>
 8007ae2:	6822      	ldr	r2, [r4, #0]
 8007ae4:	07d2      	lsls	r2, r2, #31
 8007ae6:	d502      	bpl.n	8007aee <_printf_float+0x16e>
 8007ae8:	3301      	adds	r3, #1
 8007aea:	440b      	add	r3, r1
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007af2:	f04f 0a00 	mov.w	sl, #0
 8007af6:	e7d9      	b.n	8007aac <_printf_float+0x12c>
 8007af8:	b913      	cbnz	r3, 8007b00 <_printf_float+0x180>
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	07d0      	lsls	r0, r2, #31
 8007afe:	d501      	bpl.n	8007b04 <_printf_float+0x184>
 8007b00:	3302      	adds	r3, #2
 8007b02:	e7f3      	b.n	8007aec <_printf_float+0x16c>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e7f1      	b.n	8007aec <_printf_float+0x16c>
 8007b08:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b10:	4293      	cmp	r3, r2
 8007b12:	db05      	blt.n	8007b20 <_printf_float+0x1a0>
 8007b14:	6822      	ldr	r2, [r4, #0]
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	07d1      	lsls	r1, r2, #31
 8007b1a:	d5e8      	bpl.n	8007aee <_printf_float+0x16e>
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	e7e5      	b.n	8007aec <_printf_float+0x16c>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bfd4      	ite	le
 8007b24:	f1c3 0302 	rsble	r3, r3, #2
 8007b28:	2301      	movgt	r3, #1
 8007b2a:	4413      	add	r3, r2
 8007b2c:	e7de      	b.n	8007aec <_printf_float+0x16c>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	055a      	lsls	r2, r3, #21
 8007b32:	d407      	bmi.n	8007b44 <_printf_float+0x1c4>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	4642      	mov	r2, r8
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d12a      	bne.n	8007b98 <_printf_float+0x218>
 8007b42:	e76b      	b.n	8007a1c <_printf_float+0x9c>
 8007b44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b48:	f240 80de 	bls.w	8007d08 <_printf_float+0x388>
 8007b4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007b50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b58:	d133      	bne.n	8007bc2 <_printf_float+0x242>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4a42      	ldr	r2, [pc, #264]	; (8007c68 <_printf_float+0x2e8>)
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4628      	mov	r0, r5
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	f43f af59 	beq.w	8007a1c <_printf_float+0x9c>
 8007b6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	db02      	blt.n	8007b78 <_printf_float+0x1f8>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	07d8      	lsls	r0, r3, #31
 8007b76:	d50f      	bpl.n	8007b98 <_printf_float+0x218>
 8007b78:	9b05      	ldr	r3, [sp, #20]
 8007b7a:	465a      	mov	r2, fp
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f af4a 	beq.w	8007a1c <_printf_float+0x9c>
 8007b88:	f04f 0800 	mov.w	r8, #0
 8007b8c:	f104 091a 	add.w	r9, r4, #26
 8007b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b92:	3b01      	subs	r3, #1
 8007b94:	4543      	cmp	r3, r8
 8007b96:	dc09      	bgt.n	8007bac <_printf_float+0x22c>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	079b      	lsls	r3, r3, #30
 8007b9c:	f100 8105 	bmi.w	8007daa <_printf_float+0x42a>
 8007ba0:	68e0      	ldr	r0, [r4, #12]
 8007ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba4:	4298      	cmp	r0, r3
 8007ba6:	bfb8      	it	lt
 8007ba8:	4618      	movlt	r0, r3
 8007baa:	e739      	b.n	8007a20 <_printf_float+0xa0>
 8007bac:	2301      	movs	r3, #1
 8007bae:	464a      	mov	r2, r9
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	f43f af30 	beq.w	8007a1c <_printf_float+0x9c>
 8007bbc:	f108 0801 	add.w	r8, r8, #1
 8007bc0:	e7e6      	b.n	8007b90 <_printf_float+0x210>
 8007bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dc2b      	bgt.n	8007c20 <_printf_float+0x2a0>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4a27      	ldr	r2, [pc, #156]	; (8007c68 <_printf_float+0x2e8>)
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f af22 	beq.w	8007a1c <_printf_float+0x9c>
 8007bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bda:	b923      	cbnz	r3, 8007be6 <_printf_float+0x266>
 8007bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bde:	b913      	cbnz	r3, 8007be6 <_printf_float+0x266>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	07d9      	lsls	r1, r3, #31
 8007be4:	d5d8      	bpl.n	8007b98 <_printf_float+0x218>
 8007be6:	9b05      	ldr	r3, [sp, #20]
 8007be8:	465a      	mov	r2, fp
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f af13 	beq.w	8007a1c <_printf_float+0x9c>
 8007bf6:	f04f 0900 	mov.w	r9, #0
 8007bfa:	f104 0a1a 	add.w	sl, r4, #26
 8007bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c00:	425b      	negs	r3, r3
 8007c02:	454b      	cmp	r3, r9
 8007c04:	dc01      	bgt.n	8007c0a <_printf_float+0x28a>
 8007c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c08:	e795      	b.n	8007b36 <_printf_float+0x1b6>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4652      	mov	r2, sl
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	f43f af01 	beq.w	8007a1c <_printf_float+0x9c>
 8007c1a:	f109 0901 	add.w	r9, r9, #1
 8007c1e:	e7ee      	b.n	8007bfe <_printf_float+0x27e>
 8007c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c24:	429a      	cmp	r2, r3
 8007c26:	bfa8      	it	ge
 8007c28:	461a      	movge	r2, r3
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	4691      	mov	r9, r2
 8007c2e:	dd07      	ble.n	8007c40 <_printf_float+0x2c0>
 8007c30:	4613      	mov	r3, r2
 8007c32:	4631      	mov	r1, r6
 8007c34:	4642      	mov	r2, r8
 8007c36:	4628      	mov	r0, r5
 8007c38:	47b8      	blx	r7
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f43f aeee 	beq.w	8007a1c <_printf_float+0x9c>
 8007c40:	f104 031a 	add.w	r3, r4, #26
 8007c44:	f04f 0a00 	mov.w	sl, #0
 8007c48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c4c:	9307      	str	r3, [sp, #28]
 8007c4e:	e017      	b.n	8007c80 <_printf_float+0x300>
 8007c50:	ffffffff 	.word	0xffffffff
 8007c54:	7fefffff 	.word	0x7fefffff
 8007c58:	08009b94 	.word	0x08009b94
 8007c5c:	08009b90 	.word	0x08009b90
 8007c60:	08009b9c 	.word	0x08009b9c
 8007c64:	08009b98 	.word	0x08009b98
 8007c68:	08009ba0 	.word	0x08009ba0
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	9a07      	ldr	r2, [sp, #28]
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f aed0 	beq.w	8007a1c <_printf_float+0x9c>
 8007c7c:	f10a 0a01 	add.w	sl, sl, #1
 8007c80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c82:	9306      	str	r3, [sp, #24]
 8007c84:	eba3 0309 	sub.w	r3, r3, r9
 8007c88:	4553      	cmp	r3, sl
 8007c8a:	dcef      	bgt.n	8007c6c <_printf_float+0x2ec>
 8007c8c:	9b06      	ldr	r3, [sp, #24]
 8007c8e:	4498      	add	r8, r3
 8007c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c94:	429a      	cmp	r2, r3
 8007c96:	db15      	blt.n	8007cc4 <_printf_float+0x344>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	07da      	lsls	r2, r3, #31
 8007c9c:	d412      	bmi.n	8007cc4 <_printf_float+0x344>
 8007c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca0:	9a06      	ldr	r2, [sp, #24]
 8007ca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ca4:	1a9a      	subs	r2, r3, r2
 8007ca6:	eba3 0a01 	sub.w	sl, r3, r1
 8007caa:	4592      	cmp	sl, r2
 8007cac:	bfa8      	it	ge
 8007cae:	4692      	movge	sl, r2
 8007cb0:	f1ba 0f00 	cmp.w	sl, #0
 8007cb4:	dc0e      	bgt.n	8007cd4 <_printf_float+0x354>
 8007cb6:	f04f 0800 	mov.w	r8, #0
 8007cba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cbe:	f104 091a 	add.w	r9, r4, #26
 8007cc2:	e019      	b.n	8007cf8 <_printf_float+0x378>
 8007cc4:	9b05      	ldr	r3, [sp, #20]
 8007cc6:	465a      	mov	r2, fp
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d1e5      	bne.n	8007c9e <_printf_float+0x31e>
 8007cd2:	e6a3      	b.n	8007a1c <_printf_float+0x9c>
 8007cd4:	4653      	mov	r3, sl
 8007cd6:	4642      	mov	r2, r8
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d1e9      	bne.n	8007cb6 <_printf_float+0x336>
 8007ce2:	e69b      	b.n	8007a1c <_printf_float+0x9c>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	464a      	mov	r2, r9
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	47b8      	blx	r7
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f43f ae94 	beq.w	8007a1c <_printf_float+0x9c>
 8007cf4:	f108 0801 	add.w	r8, r8, #1
 8007cf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	eba3 030a 	sub.w	r3, r3, sl
 8007d02:	4543      	cmp	r3, r8
 8007d04:	dcee      	bgt.n	8007ce4 <_printf_float+0x364>
 8007d06:	e747      	b.n	8007b98 <_printf_float+0x218>
 8007d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d0a:	2a01      	cmp	r2, #1
 8007d0c:	dc01      	bgt.n	8007d12 <_printf_float+0x392>
 8007d0e:	07db      	lsls	r3, r3, #31
 8007d10:	d539      	bpl.n	8007d86 <_printf_float+0x406>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4642      	mov	r2, r8
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	f43f ae7d 	beq.w	8007a1c <_printf_float+0x9c>
 8007d22:	9b05      	ldr	r3, [sp, #20]
 8007d24:	465a      	mov	r2, fp
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	f108 0801 	add.w	r8, r8, #1
 8007d32:	f43f ae73 	beq.w	8007a1c <_printf_float+0x9c>
 8007d36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d44:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d48:	d018      	beq.n	8007d7c <_printf_float+0x3fc>
 8007d4a:	4642      	mov	r2, r8
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	d10e      	bne.n	8007d74 <_printf_float+0x3f4>
 8007d56:	e661      	b.n	8007a1c <_printf_float+0x9c>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	464a      	mov	r2, r9
 8007d5c:	4631      	mov	r1, r6
 8007d5e:	4628      	mov	r0, r5
 8007d60:	47b8      	blx	r7
 8007d62:	3001      	adds	r0, #1
 8007d64:	f43f ae5a 	beq.w	8007a1c <_printf_float+0x9c>
 8007d68:	f108 0801 	add.w	r8, r8, #1
 8007d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	4543      	cmp	r3, r8
 8007d72:	dcf1      	bgt.n	8007d58 <_printf_float+0x3d8>
 8007d74:	4653      	mov	r3, sl
 8007d76:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d7a:	e6dd      	b.n	8007b38 <_printf_float+0x1b8>
 8007d7c:	f04f 0800 	mov.w	r8, #0
 8007d80:	f104 091a 	add.w	r9, r4, #26
 8007d84:	e7f2      	b.n	8007d6c <_printf_float+0x3ec>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e7df      	b.n	8007d4a <_printf_float+0x3ca>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	464a      	mov	r2, r9
 8007d8e:	4631      	mov	r1, r6
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b8      	blx	r7
 8007d94:	3001      	adds	r0, #1
 8007d96:	f43f ae41 	beq.w	8007a1c <_printf_float+0x9c>
 8007d9a:	f108 0801 	add.w	r8, r8, #1
 8007d9e:	68e3      	ldr	r3, [r4, #12]
 8007da0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	4543      	cmp	r3, r8
 8007da6:	dcf0      	bgt.n	8007d8a <_printf_float+0x40a>
 8007da8:	e6fa      	b.n	8007ba0 <_printf_float+0x220>
 8007daa:	f04f 0800 	mov.w	r8, #0
 8007dae:	f104 0919 	add.w	r9, r4, #25
 8007db2:	e7f4      	b.n	8007d9e <_printf_float+0x41e>
 8007db4:	2900      	cmp	r1, #0
 8007db6:	f43f ae8a 	beq.w	8007ace <_printf_float+0x14e>
 8007dba:	f04f 0c00 	mov.w	ip, #0
 8007dbe:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007dc2:	e9cd 0900 	strd	r0, r9, [sp]
 8007dc6:	6022      	str	r2, [r4, #0]
 8007dc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f7ff fd4f 	bl	8007870 <__cvt>
 8007dd2:	4680      	mov	r8, r0
 8007dd4:	e64a      	b.n	8007a6c <_printf_float+0xec>
 8007dd6:	bf00      	nop

08007dd8 <_printf_common>:
 8007dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ddc:	4691      	mov	r9, r2
 8007dde:	461f      	mov	r7, r3
 8007de0:	688a      	ldr	r2, [r1, #8]
 8007de2:	690b      	ldr	r3, [r1, #16]
 8007de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bfb8      	it	lt
 8007dec:	4613      	movlt	r3, r2
 8007dee:	f8c9 3000 	str.w	r3, [r9]
 8007df2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007df6:	4606      	mov	r6, r0
 8007df8:	460c      	mov	r4, r1
 8007dfa:	b112      	cbz	r2, 8007e02 <_printf_common+0x2a>
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f8c9 3000 	str.w	r3, [r9]
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	0699      	lsls	r1, r3, #26
 8007e06:	bf42      	ittt	mi
 8007e08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e0c:	3302      	addmi	r3, #2
 8007e0e:	f8c9 3000 	strmi.w	r3, [r9]
 8007e12:	6825      	ldr	r5, [r4, #0]
 8007e14:	f015 0506 	ands.w	r5, r5, #6
 8007e18:	d107      	bne.n	8007e2a <_printf_common+0x52>
 8007e1a:	f104 0a19 	add.w	sl, r4, #25
 8007e1e:	68e3      	ldr	r3, [r4, #12]
 8007e20:	f8d9 2000 	ldr.w	r2, [r9]
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	42ab      	cmp	r3, r5
 8007e28:	dc28      	bgt.n	8007e7c <_printf_common+0xa4>
 8007e2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	3300      	adds	r3, #0
 8007e32:	bf18      	it	ne
 8007e34:	2301      	movne	r3, #1
 8007e36:	0692      	lsls	r2, r2, #26
 8007e38:	d42d      	bmi.n	8007e96 <_printf_common+0xbe>
 8007e3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e3e:	4639      	mov	r1, r7
 8007e40:	4630      	mov	r0, r6
 8007e42:	47c0      	blx	r8
 8007e44:	3001      	adds	r0, #1
 8007e46:	d020      	beq.n	8007e8a <_printf_common+0xb2>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	68e5      	ldr	r5, [r4, #12]
 8007e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8007e50:	f003 0306 	and.w	r3, r3, #6
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	bf08      	it	eq
 8007e58:	1aad      	subeq	r5, r5, r2
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	6922      	ldr	r2, [r4, #16]
 8007e5e:	bf0c      	ite	eq
 8007e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e64:	2500      	movne	r5, #0
 8007e66:	4293      	cmp	r3, r2
 8007e68:	bfc4      	itt	gt
 8007e6a:	1a9b      	subgt	r3, r3, r2
 8007e6c:	18ed      	addgt	r5, r5, r3
 8007e6e:	f04f 0900 	mov.w	r9, #0
 8007e72:	341a      	adds	r4, #26
 8007e74:	454d      	cmp	r5, r9
 8007e76:	d11a      	bne.n	8007eae <_printf_common+0xd6>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e008      	b.n	8007e8e <_printf_common+0xb6>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	4652      	mov	r2, sl
 8007e80:	4639      	mov	r1, r7
 8007e82:	4630      	mov	r0, r6
 8007e84:	47c0      	blx	r8
 8007e86:	3001      	adds	r0, #1
 8007e88:	d103      	bne.n	8007e92 <_printf_common+0xba>
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e92:	3501      	adds	r5, #1
 8007e94:	e7c3      	b.n	8007e1e <_printf_common+0x46>
 8007e96:	18e1      	adds	r1, r4, r3
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	2030      	movs	r0, #48	; 0x30
 8007e9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ea0:	4422      	add	r2, r4
 8007ea2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ea6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007eaa:	3302      	adds	r3, #2
 8007eac:	e7c5      	b.n	8007e3a <_printf_common+0x62>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	4639      	mov	r1, r7
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	47c0      	blx	r8
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d0e6      	beq.n	8007e8a <_printf_common+0xb2>
 8007ebc:	f109 0901 	add.w	r9, r9, #1
 8007ec0:	e7d8      	b.n	8007e74 <_printf_common+0x9c>
	...

08007ec4 <_printf_i>:
 8007ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ec8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ecc:	460c      	mov	r4, r1
 8007ece:	7e09      	ldrb	r1, [r1, #24]
 8007ed0:	b085      	sub	sp, #20
 8007ed2:	296e      	cmp	r1, #110	; 0x6e
 8007ed4:	4617      	mov	r7, r2
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	4698      	mov	r8, r3
 8007eda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007edc:	f000 80b3 	beq.w	8008046 <_printf_i+0x182>
 8007ee0:	d822      	bhi.n	8007f28 <_printf_i+0x64>
 8007ee2:	2963      	cmp	r1, #99	; 0x63
 8007ee4:	d036      	beq.n	8007f54 <_printf_i+0x90>
 8007ee6:	d80a      	bhi.n	8007efe <_printf_i+0x3a>
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	f000 80b9 	beq.w	8008060 <_printf_i+0x19c>
 8007eee:	2958      	cmp	r1, #88	; 0x58
 8007ef0:	f000 8083 	beq.w	8007ffa <_printf_i+0x136>
 8007ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007efc:	e032      	b.n	8007f64 <_printf_i+0xa0>
 8007efe:	2964      	cmp	r1, #100	; 0x64
 8007f00:	d001      	beq.n	8007f06 <_printf_i+0x42>
 8007f02:	2969      	cmp	r1, #105	; 0x69
 8007f04:	d1f6      	bne.n	8007ef4 <_printf_i+0x30>
 8007f06:	6820      	ldr	r0, [r4, #0]
 8007f08:	6813      	ldr	r3, [r2, #0]
 8007f0a:	0605      	lsls	r5, r0, #24
 8007f0c:	f103 0104 	add.w	r1, r3, #4
 8007f10:	d52a      	bpl.n	8007f68 <_printf_i+0xa4>
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6011      	str	r1, [r2, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	da03      	bge.n	8007f22 <_printf_i+0x5e>
 8007f1a:	222d      	movs	r2, #45	; 0x2d
 8007f1c:	425b      	negs	r3, r3
 8007f1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f22:	486f      	ldr	r0, [pc, #444]	; (80080e0 <_printf_i+0x21c>)
 8007f24:	220a      	movs	r2, #10
 8007f26:	e039      	b.n	8007f9c <_printf_i+0xd8>
 8007f28:	2973      	cmp	r1, #115	; 0x73
 8007f2a:	f000 809d 	beq.w	8008068 <_printf_i+0x1a4>
 8007f2e:	d808      	bhi.n	8007f42 <_printf_i+0x7e>
 8007f30:	296f      	cmp	r1, #111	; 0x6f
 8007f32:	d020      	beq.n	8007f76 <_printf_i+0xb2>
 8007f34:	2970      	cmp	r1, #112	; 0x70
 8007f36:	d1dd      	bne.n	8007ef4 <_printf_i+0x30>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	f043 0320 	orr.w	r3, r3, #32
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	e003      	b.n	8007f4a <_printf_i+0x86>
 8007f42:	2975      	cmp	r1, #117	; 0x75
 8007f44:	d017      	beq.n	8007f76 <_printf_i+0xb2>
 8007f46:	2978      	cmp	r1, #120	; 0x78
 8007f48:	d1d4      	bne.n	8007ef4 <_printf_i+0x30>
 8007f4a:	2378      	movs	r3, #120	; 0x78
 8007f4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f50:	4864      	ldr	r0, [pc, #400]	; (80080e4 <_printf_i+0x220>)
 8007f52:	e055      	b.n	8008000 <_printf_i+0x13c>
 8007f54:	6813      	ldr	r3, [r2, #0]
 8007f56:	1d19      	adds	r1, r3, #4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6011      	str	r1, [r2, #0]
 8007f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f64:	2301      	movs	r3, #1
 8007f66:	e08c      	b.n	8008082 <_printf_i+0x1be>
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6011      	str	r1, [r2, #0]
 8007f6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f70:	bf18      	it	ne
 8007f72:	b21b      	sxthne	r3, r3
 8007f74:	e7cf      	b.n	8007f16 <_printf_i+0x52>
 8007f76:	6813      	ldr	r3, [r2, #0]
 8007f78:	6825      	ldr	r5, [r4, #0]
 8007f7a:	1d18      	adds	r0, r3, #4
 8007f7c:	6010      	str	r0, [r2, #0]
 8007f7e:	0628      	lsls	r0, r5, #24
 8007f80:	d501      	bpl.n	8007f86 <_printf_i+0xc2>
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	e002      	b.n	8007f8c <_printf_i+0xc8>
 8007f86:	0668      	lsls	r0, r5, #25
 8007f88:	d5fb      	bpl.n	8007f82 <_printf_i+0xbe>
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	4854      	ldr	r0, [pc, #336]	; (80080e0 <_printf_i+0x21c>)
 8007f8e:	296f      	cmp	r1, #111	; 0x6f
 8007f90:	bf14      	ite	ne
 8007f92:	220a      	movne	r2, #10
 8007f94:	2208      	moveq	r2, #8
 8007f96:	2100      	movs	r1, #0
 8007f98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f9c:	6865      	ldr	r5, [r4, #4]
 8007f9e:	60a5      	str	r5, [r4, #8]
 8007fa0:	2d00      	cmp	r5, #0
 8007fa2:	f2c0 8095 	blt.w	80080d0 <_printf_i+0x20c>
 8007fa6:	6821      	ldr	r1, [r4, #0]
 8007fa8:	f021 0104 	bic.w	r1, r1, #4
 8007fac:	6021      	str	r1, [r4, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d13d      	bne.n	800802e <_printf_i+0x16a>
 8007fb2:	2d00      	cmp	r5, #0
 8007fb4:	f040 808e 	bne.w	80080d4 <_printf_i+0x210>
 8007fb8:	4665      	mov	r5, ip
 8007fba:	2a08      	cmp	r2, #8
 8007fbc:	d10b      	bne.n	8007fd6 <_printf_i+0x112>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	07db      	lsls	r3, r3, #31
 8007fc2:	d508      	bpl.n	8007fd6 <_printf_i+0x112>
 8007fc4:	6923      	ldr	r3, [r4, #16]
 8007fc6:	6862      	ldr	r2, [r4, #4]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	bfde      	ittt	le
 8007fcc:	2330      	movle	r3, #48	; 0x30
 8007fce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fd6:	ebac 0305 	sub.w	r3, ip, r5
 8007fda:	6123      	str	r3, [r4, #16]
 8007fdc:	f8cd 8000 	str.w	r8, [sp]
 8007fe0:	463b      	mov	r3, r7
 8007fe2:	aa03      	add	r2, sp, #12
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f7ff fef6 	bl	8007dd8 <_printf_common>
 8007fec:	3001      	adds	r0, #1
 8007fee:	d14d      	bne.n	800808c <_printf_i+0x1c8>
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	b005      	add	sp, #20
 8007ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ffa:	4839      	ldr	r0, [pc, #228]	; (80080e0 <_printf_i+0x21c>)
 8007ffc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008000:	6813      	ldr	r3, [r2, #0]
 8008002:	6821      	ldr	r1, [r4, #0]
 8008004:	1d1d      	adds	r5, r3, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6015      	str	r5, [r2, #0]
 800800a:	060a      	lsls	r2, r1, #24
 800800c:	d50b      	bpl.n	8008026 <_printf_i+0x162>
 800800e:	07ca      	lsls	r2, r1, #31
 8008010:	bf44      	itt	mi
 8008012:	f041 0120 	orrmi.w	r1, r1, #32
 8008016:	6021      	strmi	r1, [r4, #0]
 8008018:	b91b      	cbnz	r3, 8008022 <_printf_i+0x15e>
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	f022 0220 	bic.w	r2, r2, #32
 8008020:	6022      	str	r2, [r4, #0]
 8008022:	2210      	movs	r2, #16
 8008024:	e7b7      	b.n	8007f96 <_printf_i+0xd2>
 8008026:	064d      	lsls	r5, r1, #25
 8008028:	bf48      	it	mi
 800802a:	b29b      	uxthmi	r3, r3
 800802c:	e7ef      	b.n	800800e <_printf_i+0x14a>
 800802e:	4665      	mov	r5, ip
 8008030:	fbb3 f1f2 	udiv	r1, r3, r2
 8008034:	fb02 3311 	mls	r3, r2, r1, r3
 8008038:	5cc3      	ldrb	r3, [r0, r3]
 800803a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800803e:	460b      	mov	r3, r1
 8008040:	2900      	cmp	r1, #0
 8008042:	d1f5      	bne.n	8008030 <_printf_i+0x16c>
 8008044:	e7b9      	b.n	8007fba <_printf_i+0xf6>
 8008046:	6813      	ldr	r3, [r2, #0]
 8008048:	6825      	ldr	r5, [r4, #0]
 800804a:	6961      	ldr	r1, [r4, #20]
 800804c:	1d18      	adds	r0, r3, #4
 800804e:	6010      	str	r0, [r2, #0]
 8008050:	0628      	lsls	r0, r5, #24
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	d501      	bpl.n	800805a <_printf_i+0x196>
 8008056:	6019      	str	r1, [r3, #0]
 8008058:	e002      	b.n	8008060 <_printf_i+0x19c>
 800805a:	066a      	lsls	r2, r5, #25
 800805c:	d5fb      	bpl.n	8008056 <_printf_i+0x192>
 800805e:	8019      	strh	r1, [r3, #0]
 8008060:	2300      	movs	r3, #0
 8008062:	6123      	str	r3, [r4, #16]
 8008064:	4665      	mov	r5, ip
 8008066:	e7b9      	b.n	8007fdc <_printf_i+0x118>
 8008068:	6813      	ldr	r3, [r2, #0]
 800806a:	1d19      	adds	r1, r3, #4
 800806c:	6011      	str	r1, [r2, #0]
 800806e:	681d      	ldr	r5, [r3, #0]
 8008070:	6862      	ldr	r2, [r4, #4]
 8008072:	2100      	movs	r1, #0
 8008074:	4628      	mov	r0, r5
 8008076:	f7f8 f93b 	bl	80002f0 <memchr>
 800807a:	b108      	cbz	r0, 8008080 <_printf_i+0x1bc>
 800807c:	1b40      	subs	r0, r0, r5
 800807e:	6060      	str	r0, [r4, #4]
 8008080:	6863      	ldr	r3, [r4, #4]
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	2300      	movs	r3, #0
 8008086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800808a:	e7a7      	b.n	8007fdc <_printf_i+0x118>
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	462a      	mov	r2, r5
 8008090:	4639      	mov	r1, r7
 8008092:	4630      	mov	r0, r6
 8008094:	47c0      	blx	r8
 8008096:	3001      	adds	r0, #1
 8008098:	d0aa      	beq.n	8007ff0 <_printf_i+0x12c>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	079b      	lsls	r3, r3, #30
 800809e:	d413      	bmi.n	80080c8 <_printf_i+0x204>
 80080a0:	68e0      	ldr	r0, [r4, #12]
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	4298      	cmp	r0, r3
 80080a6:	bfb8      	it	lt
 80080a8:	4618      	movlt	r0, r3
 80080aa:	e7a3      	b.n	8007ff4 <_printf_i+0x130>
 80080ac:	2301      	movs	r3, #1
 80080ae:	464a      	mov	r2, r9
 80080b0:	4639      	mov	r1, r7
 80080b2:	4630      	mov	r0, r6
 80080b4:	47c0      	blx	r8
 80080b6:	3001      	adds	r0, #1
 80080b8:	d09a      	beq.n	8007ff0 <_printf_i+0x12c>
 80080ba:	3501      	adds	r5, #1
 80080bc:	68e3      	ldr	r3, [r4, #12]
 80080be:	9a03      	ldr	r2, [sp, #12]
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	42ab      	cmp	r3, r5
 80080c4:	dcf2      	bgt.n	80080ac <_printf_i+0x1e8>
 80080c6:	e7eb      	b.n	80080a0 <_printf_i+0x1dc>
 80080c8:	2500      	movs	r5, #0
 80080ca:	f104 0919 	add.w	r9, r4, #25
 80080ce:	e7f5      	b.n	80080bc <_printf_i+0x1f8>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1ac      	bne.n	800802e <_printf_i+0x16a>
 80080d4:	7803      	ldrb	r3, [r0, #0]
 80080d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080de:	e76c      	b.n	8007fba <_printf_i+0xf6>
 80080e0:	08009ba2 	.word	0x08009ba2
 80080e4:	08009bb3 	.word	0x08009bb3

080080e8 <_sbrk_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4c06      	ldr	r4, [pc, #24]	; (8008104 <_sbrk_r+0x1c>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4605      	mov	r5, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	6023      	str	r3, [r4, #0]
 80080f4:	f7f9 fd68 	bl	8001bc8 <_sbrk>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_sbrk_r+0x1a>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_sbrk_r+0x1a>
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	24009320 	.word	0x24009320

08008108 <siprintf>:
 8008108:	b40e      	push	{r1, r2, r3}
 800810a:	b500      	push	{lr}
 800810c:	b09c      	sub	sp, #112	; 0x70
 800810e:	ab1d      	add	r3, sp, #116	; 0x74
 8008110:	9002      	str	r0, [sp, #8]
 8008112:	9006      	str	r0, [sp, #24]
 8008114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008118:	4809      	ldr	r0, [pc, #36]	; (8008140 <siprintf+0x38>)
 800811a:	9107      	str	r1, [sp, #28]
 800811c:	9104      	str	r1, [sp, #16]
 800811e:	4909      	ldr	r1, [pc, #36]	; (8008144 <siprintf+0x3c>)
 8008120:	f853 2b04 	ldr.w	r2, [r3], #4
 8008124:	9105      	str	r1, [sp, #20]
 8008126:	6800      	ldr	r0, [r0, #0]
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	a902      	add	r1, sp, #8
 800812c:	f001 f942 	bl	80093b4 <_svfiprintf_r>
 8008130:	9b02      	ldr	r3, [sp, #8]
 8008132:	2200      	movs	r2, #0
 8008134:	701a      	strb	r2, [r3, #0]
 8008136:	b01c      	add	sp, #112	; 0x70
 8008138:	f85d eb04 	ldr.w	lr, [sp], #4
 800813c:	b003      	add	sp, #12
 800813e:	4770      	bx	lr
 8008140:	24000010 	.word	0x24000010
 8008144:	ffff0208 	.word	0xffff0208

08008148 <quorem>:
 8008148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	6903      	ldr	r3, [r0, #16]
 800814e:	690c      	ldr	r4, [r1, #16]
 8008150:	42a3      	cmp	r3, r4
 8008152:	4680      	mov	r8, r0
 8008154:	f2c0 8082 	blt.w	800825c <quorem+0x114>
 8008158:	3c01      	subs	r4, #1
 800815a:	f101 0714 	add.w	r7, r1, #20
 800815e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008162:	f100 0614 	add.w	r6, r0, #20
 8008166:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800816a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800816e:	eb06 030c 	add.w	r3, r6, ip
 8008172:	3501      	adds	r5, #1
 8008174:	eb07 090c 	add.w	r9, r7, ip
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	fbb0 f5f5 	udiv	r5, r0, r5
 800817e:	b395      	cbz	r5, 80081e6 <quorem+0x9e>
 8008180:	f04f 0a00 	mov.w	sl, #0
 8008184:	4638      	mov	r0, r7
 8008186:	46b6      	mov	lr, r6
 8008188:	46d3      	mov	fp, sl
 800818a:	f850 2b04 	ldr.w	r2, [r0], #4
 800818e:	b293      	uxth	r3, r2
 8008190:	fb05 a303 	mla	r3, r5, r3, sl
 8008194:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008198:	b29b      	uxth	r3, r3
 800819a:	ebab 0303 	sub.w	r3, fp, r3
 800819e:	0c12      	lsrs	r2, r2, #16
 80081a0:	f8de b000 	ldr.w	fp, [lr]
 80081a4:	fb05 a202 	mla	r2, r5, r2, sl
 80081a8:	fa13 f38b 	uxtah	r3, r3, fp
 80081ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80081b0:	fa1f fb82 	uxth.w	fp, r2
 80081b4:	f8de 2000 	ldr.w	r2, [lr]
 80081b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80081bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081c6:	4581      	cmp	r9, r0
 80081c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80081cc:	f84e 3b04 	str.w	r3, [lr], #4
 80081d0:	d2db      	bcs.n	800818a <quorem+0x42>
 80081d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80081d6:	b933      	cbnz	r3, 80081e6 <quorem+0x9e>
 80081d8:	9b01      	ldr	r3, [sp, #4]
 80081da:	3b04      	subs	r3, #4
 80081dc:	429e      	cmp	r6, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	d330      	bcc.n	8008244 <quorem+0xfc>
 80081e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80081e6:	4640      	mov	r0, r8
 80081e8:	f000 ffb6 	bl	8009158 <__mcmp>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	db25      	blt.n	800823c <quorem+0xf4>
 80081f0:	3501      	adds	r5, #1
 80081f2:	4630      	mov	r0, r6
 80081f4:	f04f 0c00 	mov.w	ip, #0
 80081f8:	f857 2b04 	ldr.w	r2, [r7], #4
 80081fc:	f8d0 e000 	ldr.w	lr, [r0]
 8008200:	b293      	uxth	r3, r2
 8008202:	ebac 0303 	sub.w	r3, ip, r3
 8008206:	0c12      	lsrs	r2, r2, #16
 8008208:	fa13 f38e 	uxtah	r3, r3, lr
 800820c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008214:	b29b      	uxth	r3, r3
 8008216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800821a:	45b9      	cmp	r9, r7
 800821c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008220:	f840 3b04 	str.w	r3, [r0], #4
 8008224:	d2e8      	bcs.n	80081f8 <quorem+0xb0>
 8008226:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800822a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800822e:	b92a      	cbnz	r2, 800823c <quorem+0xf4>
 8008230:	3b04      	subs	r3, #4
 8008232:	429e      	cmp	r6, r3
 8008234:	461a      	mov	r2, r3
 8008236:	d30b      	bcc.n	8008250 <quorem+0x108>
 8008238:	f8c8 4010 	str.w	r4, [r8, #16]
 800823c:	4628      	mov	r0, r5
 800823e:	b003      	add	sp, #12
 8008240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008244:	6812      	ldr	r2, [r2, #0]
 8008246:	3b04      	subs	r3, #4
 8008248:	2a00      	cmp	r2, #0
 800824a:	d1ca      	bne.n	80081e2 <quorem+0x9a>
 800824c:	3c01      	subs	r4, #1
 800824e:	e7c5      	b.n	80081dc <quorem+0x94>
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	3b04      	subs	r3, #4
 8008254:	2a00      	cmp	r2, #0
 8008256:	d1ef      	bne.n	8008238 <quorem+0xf0>
 8008258:	3c01      	subs	r4, #1
 800825a:	e7ea      	b.n	8008232 <quorem+0xea>
 800825c:	2000      	movs	r0, #0
 800825e:	e7ee      	b.n	800823e <quorem+0xf6>

08008260 <_dtoa_r>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	ec57 6b10 	vmov	r6, r7, d0
 8008268:	b095      	sub	sp, #84	; 0x54
 800826a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800826c:	9108      	str	r1, [sp, #32]
 800826e:	4604      	mov	r4, r0
 8008270:	920a      	str	r2, [sp, #40]	; 0x28
 8008272:	9311      	str	r3, [sp, #68]	; 0x44
 8008274:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8008278:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800827c:	b93d      	cbnz	r5, 800828e <_dtoa_r+0x2e>
 800827e:	2010      	movs	r0, #16
 8008280:	f7ff fa36 	bl	80076f0 <malloc>
 8008284:	6260      	str	r0, [r4, #36]	; 0x24
 8008286:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800828a:	6005      	str	r5, [r0, #0]
 800828c:	60c5      	str	r5, [r0, #12]
 800828e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008290:	6819      	ldr	r1, [r3, #0]
 8008292:	b151      	cbz	r1, 80082aa <_dtoa_r+0x4a>
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	604a      	str	r2, [r1, #4]
 8008298:	2301      	movs	r3, #1
 800829a:	4093      	lsls	r3, r2
 800829c:	608b      	str	r3, [r1, #8]
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 fd79 	bl	8008d96 <_Bfree>
 80082a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	1e3b      	subs	r3, r7, #0
 80082ac:	bfb9      	ittee	lt
 80082ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082b2:	9303      	strlt	r3, [sp, #12]
 80082b4:	2300      	movge	r3, #0
 80082b6:	f8c8 3000 	strge.w	r3, [r8]
 80082ba:	9d03      	ldr	r5, [sp, #12]
 80082bc:	4bac      	ldr	r3, [pc, #688]	; (8008570 <_dtoa_r+0x310>)
 80082be:	bfbc      	itt	lt
 80082c0:	2201      	movlt	r2, #1
 80082c2:	f8c8 2000 	strlt.w	r2, [r8]
 80082c6:	43ab      	bics	r3, r5
 80082c8:	d11b      	bne.n	8008302 <_dtoa_r+0xa2>
 80082ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082cc:	f242 730f 	movw	r3, #9999	; 0x270f
 80082d0:	6013      	str	r3, [r2, #0]
 80082d2:	9b02      	ldr	r3, [sp, #8]
 80082d4:	b923      	cbnz	r3, 80082e0 <_dtoa_r+0x80>
 80082d6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80082da:	2d00      	cmp	r5, #0
 80082dc:	f000 84dd 	beq.w	8008c9a <_dtoa_r+0xa3a>
 80082e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082e2:	b953      	cbnz	r3, 80082fa <_dtoa_r+0x9a>
 80082e4:	4ba3      	ldr	r3, [pc, #652]	; (8008574 <_dtoa_r+0x314>)
 80082e6:	e020      	b.n	800832a <_dtoa_r+0xca>
 80082e8:	4ba3      	ldr	r3, [pc, #652]	; (8008578 <_dtoa_r+0x318>)
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	3308      	adds	r3, #8
 80082ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	9804      	ldr	r0, [sp, #16]
 80082f4:	b015      	add	sp, #84	; 0x54
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	4b9e      	ldr	r3, [pc, #632]	; (8008574 <_dtoa_r+0x314>)
 80082fc:	9304      	str	r3, [sp, #16]
 80082fe:	3303      	adds	r3, #3
 8008300:	e7f5      	b.n	80082ee <_dtoa_r+0x8e>
 8008302:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008306:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008312:	d10c      	bne.n	800832e <_dtoa_r+0xce>
 8008314:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008316:	2301      	movs	r3, #1
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 84b9 	beq.w	8008c94 <_dtoa_r+0xa34>
 8008322:	4b96      	ldr	r3, [pc, #600]	; (800857c <_dtoa_r+0x31c>)
 8008324:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	3b01      	subs	r3, #1
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	e7e1      	b.n	80082f2 <_dtoa_r+0x92>
 800832e:	a913      	add	r1, sp, #76	; 0x4c
 8008330:	aa12      	add	r2, sp, #72	; 0x48
 8008332:	ed9d 0b04 	vldr	d0, [sp, #16]
 8008336:	4620      	mov	r0, r4
 8008338:	f000 ff85 	bl	8009246 <__d2b>
 800833c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8008340:	9001      	str	r0, [sp, #4]
 8008342:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008344:	2e00      	cmp	r6, #0
 8008346:	d046      	beq.n	80083d6 <_dtoa_r+0x176>
 8008348:	9805      	ldr	r0, [sp, #20]
 800834a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800834e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008352:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8008356:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800835a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800835e:	2700      	movs	r7, #0
 8008360:	ee07 aa90 	vmov	s15, sl
 8008364:	ec43 2b16 	vmov	d6, r2, r3
 8008368:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800836c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8008558 <_dtoa_r+0x2f8>
 8008370:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008374:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008378:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8008560 <_dtoa_r+0x300>
 800837c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8008380:	eeb0 7b46 	vmov.f64	d7, d6
 8008384:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8008568 <_dtoa_r+0x308>
 8008388:	eea5 7b06 	vfma.f64	d7, d5, d6
 800838c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008390:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008398:	ee16 ba90 	vmov	fp, s13
 800839c:	d508      	bpl.n	80083b0 <_dtoa_r+0x150>
 800839e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80083a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80083a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083aa:	bf18      	it	ne
 80083ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80083b0:	f1bb 0f16 	cmp.w	fp, #22
 80083b4:	d834      	bhi.n	8008420 <_dtoa_r+0x1c0>
 80083b6:	4b72      	ldr	r3, [pc, #456]	; (8008580 <_dtoa_r+0x320>)
 80083b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083bc:	ed93 7b00 	vldr	d7, [r3]
 80083c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80083c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80083c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083cc:	dd01      	ble.n	80083d2 <_dtoa_r+0x172>
 80083ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083d2:	2300      	movs	r3, #0
 80083d4:	e025      	b.n	8008422 <_dtoa_r+0x1c2>
 80083d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083d8:	eb01 0a03 	add.w	sl, r1, r3
 80083dc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	dd17      	ble.n	8008414 <_dtoa_r+0x1b4>
 80083e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80083e8:	9a02      	ldr	r2, [sp, #8]
 80083ea:	409d      	lsls	r5, r3
 80083ec:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80083f0:	fa22 f303 	lsr.w	r3, r2, r3
 80083f4:	432b      	orrs	r3, r5
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80083fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008402:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008406:	9805      	ldr	r0, [sp, #20]
 8008408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800840c:	2701      	movs	r7, #1
 800840e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8008412:	e7a5      	b.n	8008360 <_dtoa_r+0x100>
 8008414:	9a02      	ldr	r2, [sp, #8]
 8008416:	f1c3 0320 	rsb	r3, r3, #32
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
 800841e:	e7ea      	b.n	80083f6 <_dtoa_r+0x196>
 8008420:	2301      	movs	r3, #1
 8008422:	eba1 0a0a 	sub.w	sl, r1, sl
 8008426:	9310      	str	r3, [sp, #64]	; 0x40
 8008428:	f1ba 0301 	subs.w	r3, sl, #1
 800842c:	9307      	str	r3, [sp, #28]
 800842e:	bf43      	ittte	mi
 8008430:	2300      	movmi	r3, #0
 8008432:	f1ca 0a01 	rsbmi	sl, sl, #1
 8008436:	9307      	strmi	r3, [sp, #28]
 8008438:	f04f 0a00 	movpl.w	sl, #0
 800843c:	f1bb 0f00 	cmp.w	fp, #0
 8008440:	db19      	blt.n	8008476 <_dtoa_r+0x216>
 8008442:	9b07      	ldr	r3, [sp, #28]
 8008444:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008448:	445b      	add	r3, fp
 800844a:	9307      	str	r3, [sp, #28]
 800844c:	f04f 0800 	mov.w	r8, #0
 8008450:	9b08      	ldr	r3, [sp, #32]
 8008452:	2b09      	cmp	r3, #9
 8008454:	d866      	bhi.n	8008524 <_dtoa_r+0x2c4>
 8008456:	2b05      	cmp	r3, #5
 8008458:	bfc4      	itt	gt
 800845a:	3b04      	subgt	r3, #4
 800845c:	9308      	strgt	r3, [sp, #32]
 800845e:	9b08      	ldr	r3, [sp, #32]
 8008460:	f1a3 0302 	sub.w	r3, r3, #2
 8008464:	bfcc      	ite	gt
 8008466:	2500      	movgt	r5, #0
 8008468:	2501      	movle	r5, #1
 800846a:	2b03      	cmp	r3, #3
 800846c:	d866      	bhi.n	800853c <_dtoa_r+0x2dc>
 800846e:	e8df f003 	tbb	[pc, r3]
 8008472:	5755      	.short	0x5755
 8008474:	4909      	.short	0x4909
 8008476:	2300      	movs	r3, #0
 8008478:	ebaa 0a0b 	sub.w	sl, sl, fp
 800847c:	f1cb 0800 	rsb	r8, fp, #0
 8008480:	930b      	str	r3, [sp, #44]	; 0x2c
 8008482:	e7e5      	b.n	8008450 <_dtoa_r+0x1f0>
 8008484:	2301      	movs	r3, #1
 8008486:	9309      	str	r3, [sp, #36]	; 0x24
 8008488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848a:	2b00      	cmp	r3, #0
 800848c:	dd59      	ble.n	8008542 <_dtoa_r+0x2e2>
 800848e:	9306      	str	r3, [sp, #24]
 8008490:	4699      	mov	r9, r3
 8008492:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008494:	2200      	movs	r2, #0
 8008496:	6072      	str	r2, [r6, #4]
 8008498:	2204      	movs	r2, #4
 800849a:	f102 0014 	add.w	r0, r2, #20
 800849e:	4298      	cmp	r0, r3
 80084a0:	6871      	ldr	r1, [r6, #4]
 80084a2:	d953      	bls.n	800854c <_dtoa_r+0x2ec>
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fc42 	bl	8008d2e <_Balloc>
 80084aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ac:	6030      	str	r0, [r6, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	f1b9 0f0e 	cmp.w	r9, #14
 80084b6:	f200 80c2 	bhi.w	800863e <_dtoa_r+0x3de>
 80084ba:	2d00      	cmp	r5, #0
 80084bc:	f000 80bf 	beq.w	800863e <_dtoa_r+0x3de>
 80084c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084c4:	f1bb 0f00 	cmp.w	fp, #0
 80084c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80084cc:	f340 80e6 	ble.w	800869c <_dtoa_r+0x43c>
 80084d0:	4a2b      	ldr	r2, [pc, #172]	; (8008580 <_dtoa_r+0x320>)
 80084d2:	f00b 030f 	and.w	r3, fp, #15
 80084d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084da:	ed93 7b00 	vldr	d7, [r3]
 80084de:	ea4f 132b 	mov.w	r3, fp, asr #4
 80084e2:	06da      	lsls	r2, r3, #27
 80084e4:	f140 80d8 	bpl.w	8008698 <_dtoa_r+0x438>
 80084e8:	4a26      	ldr	r2, [pc, #152]	; (8008584 <_dtoa_r+0x324>)
 80084ea:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80084ee:	ed92 6b08 	vldr	d6, [r2, #32]
 80084f2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80084f6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	2203      	movs	r2, #3
 8008500:	4920      	ldr	r1, [pc, #128]	; (8008584 <_dtoa_r+0x324>)
 8008502:	e04a      	b.n	800859a <_dtoa_r+0x33a>
 8008504:	2301      	movs	r3, #1
 8008506:	9309      	str	r3, [sp, #36]	; 0x24
 8008508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850a:	445b      	add	r3, fp
 800850c:	f103 0901 	add.w	r9, r3, #1
 8008510:	9306      	str	r3, [sp, #24]
 8008512:	464b      	mov	r3, r9
 8008514:	2b01      	cmp	r3, #1
 8008516:	bfb8      	it	lt
 8008518:	2301      	movlt	r3, #1
 800851a:	e7ba      	b.n	8008492 <_dtoa_r+0x232>
 800851c:	2300      	movs	r3, #0
 800851e:	e7b2      	b.n	8008486 <_dtoa_r+0x226>
 8008520:	2300      	movs	r3, #0
 8008522:	e7f0      	b.n	8008506 <_dtoa_r+0x2a6>
 8008524:	2501      	movs	r5, #1
 8008526:	2300      	movs	r3, #0
 8008528:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800852c:	f04f 33ff 	mov.w	r3, #4294967295
 8008530:	9306      	str	r3, [sp, #24]
 8008532:	4699      	mov	r9, r3
 8008534:	2200      	movs	r2, #0
 8008536:	2312      	movs	r3, #18
 8008538:	920a      	str	r2, [sp, #40]	; 0x28
 800853a:	e7aa      	b.n	8008492 <_dtoa_r+0x232>
 800853c:	2301      	movs	r3, #1
 800853e:	9309      	str	r3, [sp, #36]	; 0x24
 8008540:	e7f4      	b.n	800852c <_dtoa_r+0x2cc>
 8008542:	2301      	movs	r3, #1
 8008544:	9306      	str	r3, [sp, #24]
 8008546:	4699      	mov	r9, r3
 8008548:	461a      	mov	r2, r3
 800854a:	e7f5      	b.n	8008538 <_dtoa_r+0x2d8>
 800854c:	3101      	adds	r1, #1
 800854e:	6071      	str	r1, [r6, #4]
 8008550:	0052      	lsls	r2, r2, #1
 8008552:	e7a2      	b.n	800849a <_dtoa_r+0x23a>
 8008554:	f3af 8000 	nop.w
 8008558:	636f4361 	.word	0x636f4361
 800855c:	3fd287a7 	.word	0x3fd287a7
 8008560:	8b60c8b3 	.word	0x8b60c8b3
 8008564:	3fc68a28 	.word	0x3fc68a28
 8008568:	509f79fb 	.word	0x509f79fb
 800856c:	3fd34413 	.word	0x3fd34413
 8008570:	7ff00000 	.word	0x7ff00000
 8008574:	08009bcd 	.word	0x08009bcd
 8008578:	08009bc4 	.word	0x08009bc4
 800857c:	08009ba1 	.word	0x08009ba1
 8008580:	08009c00 	.word	0x08009c00
 8008584:	08009bd8 	.word	0x08009bd8
 8008588:	07de      	lsls	r6, r3, #31
 800858a:	d504      	bpl.n	8008596 <_dtoa_r+0x336>
 800858c:	ed91 6b00 	vldr	d6, [r1]
 8008590:	3201      	adds	r2, #1
 8008592:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008596:	105b      	asrs	r3, r3, #1
 8008598:	3108      	adds	r1, #8
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f4      	bne.n	8008588 <_dtoa_r+0x328>
 800859e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80085a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80085a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 80a7 	beq.w	8008700 <_dtoa_r+0x4a0>
 80085b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80085b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80085be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c2:	f140 809d 	bpl.w	8008700 <_dtoa_r+0x4a0>
 80085c6:	f1b9 0f00 	cmp.w	r9, #0
 80085ca:	f000 8099 	beq.w	8008700 <_dtoa_r+0x4a0>
 80085ce:	9b06      	ldr	r3, [sp, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	dd30      	ble.n	8008636 <_dtoa_r+0x3d6>
 80085d4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80085d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085e0:	9d06      	ldr	r5, [sp, #24]
 80085e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80085e6:	3201      	adds	r2, #1
 80085e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80085ec:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80085f0:	ee07 2a90 	vmov	s15, r2
 80085f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80085f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80085fc:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008600:	9a03      	ldr	r2, [sp, #12]
 8008602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008606:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800860a:	2d00      	cmp	r5, #0
 800860c:	d17b      	bne.n	8008706 <_dtoa_r+0x4a6>
 800860e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008612:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008616:	ec41 0b17 	vmov	d7, r0, r1
 800861a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800861e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008622:	f300 8253 	bgt.w	8008acc <_dtoa_r+0x86c>
 8008626:	eeb1 7b47 	vneg.f64	d7, d7
 800862a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008632:	f100 8249 	bmi.w	8008ac8 <_dtoa_r+0x868>
 8008636:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800863a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800863e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008640:	2b00      	cmp	r3, #0
 8008642:	f2c0 8119 	blt.w	8008878 <_dtoa_r+0x618>
 8008646:	f1bb 0f0e 	cmp.w	fp, #14
 800864a:	f300 8115 	bgt.w	8008878 <_dtoa_r+0x618>
 800864e:	4bc3      	ldr	r3, [pc, #780]	; (800895c <_dtoa_r+0x6fc>)
 8008650:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008654:	ed93 6b00 	vldr	d6, [r3]
 8008658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800865a:	2b00      	cmp	r3, #0
 800865c:	f280 80ba 	bge.w	80087d4 <_dtoa_r+0x574>
 8008660:	f1b9 0f00 	cmp.w	r9, #0
 8008664:	f300 80b6 	bgt.w	80087d4 <_dtoa_r+0x574>
 8008668:	f040 822d 	bne.w	8008ac6 <_dtoa_r+0x866>
 800866c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008670:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008674:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008678:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800867c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008680:	464d      	mov	r5, r9
 8008682:	464f      	mov	r7, r9
 8008684:	f280 8204 	bge.w	8008a90 <_dtoa_r+0x830>
 8008688:	9b04      	ldr	r3, [sp, #16]
 800868a:	9a04      	ldr	r2, [sp, #16]
 800868c:	1c5e      	adds	r6, r3, #1
 800868e:	2331      	movs	r3, #49	; 0x31
 8008690:	7013      	strb	r3, [r2, #0]
 8008692:	f10b 0b01 	add.w	fp, fp, #1
 8008696:	e1ff      	b.n	8008a98 <_dtoa_r+0x838>
 8008698:	2202      	movs	r2, #2
 800869a:	e731      	b.n	8008500 <_dtoa_r+0x2a0>
 800869c:	d02e      	beq.n	80086fc <_dtoa_r+0x49c>
 800869e:	f1cb 0300 	rsb	r3, fp, #0
 80086a2:	4aae      	ldr	r2, [pc, #696]	; (800895c <_dtoa_r+0x6fc>)
 80086a4:	f003 010f 	and.w	r1, r3, #15
 80086a8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80086ac:	ed92 7b00 	vldr	d7, [r2]
 80086b0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80086b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80086b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80086bc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80086c0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80086c4:	49a6      	ldr	r1, [pc, #664]	; (8008960 <_dtoa_r+0x700>)
 80086c6:	111b      	asrs	r3, r3, #4
 80086c8:	2000      	movs	r0, #0
 80086ca:	2202      	movs	r2, #2
 80086cc:	b93b      	cbnz	r3, 80086de <_dtoa_r+0x47e>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	f43f af6b 	beq.w	80085aa <_dtoa_r+0x34a>
 80086d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086dc:	e765      	b.n	80085aa <_dtoa_r+0x34a>
 80086de:	07dd      	lsls	r5, r3, #31
 80086e0:	d509      	bpl.n	80086f6 <_dtoa_r+0x496>
 80086e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80086e6:	ed91 7b00 	vldr	d7, [r1]
 80086ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80086ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80086f2:	3201      	adds	r2, #1
 80086f4:	2001      	movs	r0, #1
 80086f6:	105b      	asrs	r3, r3, #1
 80086f8:	3108      	adds	r1, #8
 80086fa:	e7e7      	b.n	80086cc <_dtoa_r+0x46c>
 80086fc:	2202      	movs	r2, #2
 80086fe:	e754      	b.n	80085aa <_dtoa_r+0x34a>
 8008700:	465b      	mov	r3, fp
 8008702:	464d      	mov	r5, r9
 8008704:	e770      	b.n	80085e8 <_dtoa_r+0x388>
 8008706:	4a95      	ldr	r2, [pc, #596]	; (800895c <_dtoa_r+0x6fc>)
 8008708:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800870c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008712:	ec41 0b17 	vmov	d7, r0, r1
 8008716:	b35a      	cbz	r2, 8008770 <_dtoa_r+0x510>
 8008718:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800871c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008720:	9e04      	ldr	r6, [sp, #16]
 8008722:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008726:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800872a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800872e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008732:	ee14 2a90 	vmov	r2, s9
 8008736:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800873a:	3230      	adds	r2, #48	; 0x30
 800873c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008740:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008748:	f806 2b01 	strb.w	r2, [r6], #1
 800874c:	d43b      	bmi.n	80087c6 <_dtoa_r+0x566>
 800874e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008752:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875a:	d472      	bmi.n	8008842 <_dtoa_r+0x5e2>
 800875c:	9a04      	ldr	r2, [sp, #16]
 800875e:	1ab2      	subs	r2, r6, r2
 8008760:	4295      	cmp	r5, r2
 8008762:	f77f af68 	ble.w	8008636 <_dtoa_r+0x3d6>
 8008766:	ee27 7b03 	vmul.f64	d7, d7, d3
 800876a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800876e:	e7de      	b.n	800872e <_dtoa_r+0x4ce>
 8008770:	9a04      	ldr	r2, [sp, #16]
 8008772:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008776:	1956      	adds	r6, r2, r5
 8008778:	4611      	mov	r1, r2
 800877a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800877e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008782:	ee14 2a90 	vmov	r2, s9
 8008786:	3230      	adds	r2, #48	; 0x30
 8008788:	f801 2b01 	strb.w	r2, [r1], #1
 800878c:	42b1      	cmp	r1, r6
 800878e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008792:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008796:	d11a      	bne.n	80087ce <_dtoa_r+0x56e>
 8008798:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800879c:	ee37 4b05 	vadd.f64	d4, d7, d5
 80087a0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80087a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a8:	dc4b      	bgt.n	8008842 <_dtoa_r+0x5e2>
 80087aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80087ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b6:	f57f af3e 	bpl.w	8008636 <_dtoa_r+0x3d6>
 80087ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80087be:	2a30      	cmp	r2, #48	; 0x30
 80087c0:	f106 31ff 	add.w	r1, r6, #4294967295
 80087c4:	d001      	beq.n	80087ca <_dtoa_r+0x56a>
 80087c6:	469b      	mov	fp, r3
 80087c8:	e02a      	b.n	8008820 <_dtoa_r+0x5c0>
 80087ca:	460e      	mov	r6, r1
 80087cc:	e7f5      	b.n	80087ba <_dtoa_r+0x55a>
 80087ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 80087d2:	e7d4      	b.n	800877e <_dtoa_r+0x51e>
 80087d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087d8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80087dc:	9e04      	ldr	r6, [sp, #16]
 80087de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80087e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80087e6:	ee15 3a10 	vmov	r3, s10
 80087ea:	3330      	adds	r3, #48	; 0x30
 80087ec:	f806 3b01 	strb.w	r3, [r6], #1
 80087f0:	9b04      	ldr	r3, [sp, #16]
 80087f2:	1af3      	subs	r3, r6, r3
 80087f4:	4599      	cmp	r9, r3
 80087f6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80087fa:	eea3 7b46 	vfms.f64	d7, d3, d6
 80087fe:	d133      	bne.n	8008868 <_dtoa_r+0x608>
 8008800:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008804:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880c:	dc18      	bgt.n	8008840 <_dtoa_r+0x5e0>
 800880e:	eeb4 7b46 	vcmp.f64	d7, d6
 8008812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008816:	d103      	bne.n	8008820 <_dtoa_r+0x5c0>
 8008818:	ee15 3a10 	vmov	r3, s10
 800881c:	07db      	lsls	r3, r3, #31
 800881e:	d40f      	bmi.n	8008840 <_dtoa_r+0x5e0>
 8008820:	9901      	ldr	r1, [sp, #4]
 8008822:	4620      	mov	r0, r4
 8008824:	f000 fab7 	bl	8008d96 <_Bfree>
 8008828:	2300      	movs	r3, #0
 800882a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800882c:	7033      	strb	r3, [r6, #0]
 800882e:	f10b 0301 	add.w	r3, fp, #1
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008836:	2b00      	cmp	r3, #0
 8008838:	f43f ad5b 	beq.w	80082f2 <_dtoa_r+0x92>
 800883c:	601e      	str	r6, [r3, #0]
 800883e:	e558      	b.n	80082f2 <_dtoa_r+0x92>
 8008840:	465b      	mov	r3, fp
 8008842:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008846:	2939      	cmp	r1, #57	; 0x39
 8008848:	f106 32ff 	add.w	r2, r6, #4294967295
 800884c:	d106      	bne.n	800885c <_dtoa_r+0x5fc>
 800884e:	9904      	ldr	r1, [sp, #16]
 8008850:	4291      	cmp	r1, r2
 8008852:	d107      	bne.n	8008864 <_dtoa_r+0x604>
 8008854:	2230      	movs	r2, #48	; 0x30
 8008856:	700a      	strb	r2, [r1, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	460a      	mov	r2, r1
 800885c:	7811      	ldrb	r1, [r2, #0]
 800885e:	3101      	adds	r1, #1
 8008860:	7011      	strb	r1, [r2, #0]
 8008862:	e7b0      	b.n	80087c6 <_dtoa_r+0x566>
 8008864:	4616      	mov	r6, r2
 8008866:	e7ec      	b.n	8008842 <_dtoa_r+0x5e2>
 8008868:	ee27 7b04 	vmul.f64	d7, d7, d4
 800886c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008874:	d1b3      	bne.n	80087de <_dtoa_r+0x57e>
 8008876:	e7d3      	b.n	8008820 <_dtoa_r+0x5c0>
 8008878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800887a:	2a00      	cmp	r2, #0
 800887c:	f000 808d 	beq.w	800899a <_dtoa_r+0x73a>
 8008880:	9a08      	ldr	r2, [sp, #32]
 8008882:	2a01      	cmp	r2, #1
 8008884:	dc72      	bgt.n	800896c <_dtoa_r+0x70c>
 8008886:	2f00      	cmp	r7, #0
 8008888:	d06c      	beq.n	8008964 <_dtoa_r+0x704>
 800888a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800888e:	4645      	mov	r5, r8
 8008890:	4656      	mov	r6, sl
 8008892:	9a07      	ldr	r2, [sp, #28]
 8008894:	2101      	movs	r1, #1
 8008896:	441a      	add	r2, r3
 8008898:	4620      	mov	r0, r4
 800889a:	449a      	add	sl, r3
 800889c:	9207      	str	r2, [sp, #28]
 800889e:	f000 fb1a 	bl	8008ed6 <__i2b>
 80088a2:	4607      	mov	r7, r0
 80088a4:	2e00      	cmp	r6, #0
 80088a6:	dd0b      	ble.n	80088c0 <_dtoa_r+0x660>
 80088a8:	9b07      	ldr	r3, [sp, #28]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dd08      	ble.n	80088c0 <_dtoa_r+0x660>
 80088ae:	42b3      	cmp	r3, r6
 80088b0:	9a07      	ldr	r2, [sp, #28]
 80088b2:	bfa8      	it	ge
 80088b4:	4633      	movge	r3, r6
 80088b6:	ebaa 0a03 	sub.w	sl, sl, r3
 80088ba:	1af6      	subs	r6, r6, r3
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	9307      	str	r3, [sp, #28]
 80088c0:	f1b8 0f00 	cmp.w	r8, #0
 80088c4:	d01d      	beq.n	8008902 <_dtoa_r+0x6a2>
 80088c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d06a      	beq.n	80089a2 <_dtoa_r+0x742>
 80088cc:	b18d      	cbz	r5, 80088f2 <_dtoa_r+0x692>
 80088ce:	4639      	mov	r1, r7
 80088d0:	462a      	mov	r2, r5
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fb9e 	bl	8009014 <__pow5mult>
 80088d8:	9a01      	ldr	r2, [sp, #4]
 80088da:	4601      	mov	r1, r0
 80088dc:	4607      	mov	r7, r0
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 fb02 	bl	8008ee8 <__multiply>
 80088e4:	9901      	ldr	r1, [sp, #4]
 80088e6:	900c      	str	r0, [sp, #48]	; 0x30
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fa54 	bl	8008d96 <_Bfree>
 80088ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	ebb8 0205 	subs.w	r2, r8, r5
 80088f6:	d004      	beq.n	8008902 <_dtoa_r+0x6a2>
 80088f8:	9901      	ldr	r1, [sp, #4]
 80088fa:	4620      	mov	r0, r4
 80088fc:	f000 fb8a 	bl	8009014 <__pow5mult>
 8008900:	9001      	str	r0, [sp, #4]
 8008902:	2101      	movs	r1, #1
 8008904:	4620      	mov	r0, r4
 8008906:	f000 fae6 	bl	8008ed6 <__i2b>
 800890a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800890c:	4605      	mov	r5, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 81ca 	beq.w	8008ca8 <_dtoa_r+0xa48>
 8008914:	461a      	mov	r2, r3
 8008916:	4601      	mov	r1, r0
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fb7b 	bl	8009014 <__pow5mult>
 800891e:	9b08      	ldr	r3, [sp, #32]
 8008920:	2b01      	cmp	r3, #1
 8008922:	4605      	mov	r5, r0
 8008924:	dc44      	bgt.n	80089b0 <_dtoa_r+0x750>
 8008926:	9b02      	ldr	r3, [sp, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d13c      	bne.n	80089a6 <_dtoa_r+0x746>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008932:	2b00      	cmp	r3, #0
 8008934:	d137      	bne.n	80089a6 <_dtoa_r+0x746>
 8008936:	9b03      	ldr	r3, [sp, #12]
 8008938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800893c:	0d1b      	lsrs	r3, r3, #20
 800893e:	051b      	lsls	r3, r3, #20
 8008940:	2b00      	cmp	r3, #0
 8008942:	d033      	beq.n	80089ac <_dtoa_r+0x74c>
 8008944:	9b07      	ldr	r3, [sp, #28]
 8008946:	3301      	adds	r3, #1
 8008948:	f10a 0a01 	add.w	sl, sl, #1
 800894c:	9307      	str	r3, [sp, #28]
 800894e:	f04f 0801 	mov.w	r8, #1
 8008952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008954:	bb73      	cbnz	r3, 80089b4 <_dtoa_r+0x754>
 8008956:	2001      	movs	r0, #1
 8008958:	e034      	b.n	80089c4 <_dtoa_r+0x764>
 800895a:	bf00      	nop
 800895c:	08009c00 	.word	0x08009c00
 8008960:	08009bd8 	.word	0x08009bd8
 8008964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008966:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800896a:	e790      	b.n	800888e <_dtoa_r+0x62e>
 800896c:	f109 35ff 	add.w	r5, r9, #4294967295
 8008970:	45a8      	cmp	r8, r5
 8008972:	bfbf      	itttt	lt
 8008974:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008976:	eba5 0808 	sublt.w	r8, r5, r8
 800897a:	4443      	addlt	r3, r8
 800897c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800897e:	bfb6      	itet	lt
 8008980:	46a8      	movlt	r8, r5
 8008982:	eba8 0505 	subge.w	r5, r8, r5
 8008986:	2500      	movlt	r5, #0
 8008988:	f1b9 0f00 	cmp.w	r9, #0
 800898c:	bfb9      	ittee	lt
 800898e:	ebaa 0609 	sublt.w	r6, sl, r9
 8008992:	2300      	movlt	r3, #0
 8008994:	4656      	movge	r6, sl
 8008996:	464b      	movge	r3, r9
 8008998:	e77b      	b.n	8008892 <_dtoa_r+0x632>
 800899a:	4645      	mov	r5, r8
 800899c:	4656      	mov	r6, sl
 800899e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80089a0:	e780      	b.n	80088a4 <_dtoa_r+0x644>
 80089a2:	4642      	mov	r2, r8
 80089a4:	e7a8      	b.n	80088f8 <_dtoa_r+0x698>
 80089a6:	f04f 0800 	mov.w	r8, #0
 80089aa:	e7d2      	b.n	8008952 <_dtoa_r+0x6f2>
 80089ac:	4698      	mov	r8, r3
 80089ae:	e7d0      	b.n	8008952 <_dtoa_r+0x6f2>
 80089b0:	f04f 0800 	mov.w	r8, #0
 80089b4:	692b      	ldr	r3, [r5, #16]
 80089b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80089ba:	6918      	ldr	r0, [r3, #16]
 80089bc:	f000 fa3d 	bl	8008e3a <__hi0bits>
 80089c0:	f1c0 0020 	rsb	r0, r0, #32
 80089c4:	9b07      	ldr	r3, [sp, #28]
 80089c6:	4418      	add	r0, r3
 80089c8:	f010 001f 	ands.w	r0, r0, #31
 80089cc:	d047      	beq.n	8008a5e <_dtoa_r+0x7fe>
 80089ce:	f1c0 0320 	rsb	r3, r0, #32
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	dd3b      	ble.n	8008a4e <_dtoa_r+0x7ee>
 80089d6:	9b07      	ldr	r3, [sp, #28]
 80089d8:	f1c0 001c 	rsb	r0, r0, #28
 80089dc:	4482      	add	sl, r0
 80089de:	4406      	add	r6, r0
 80089e0:	4403      	add	r3, r0
 80089e2:	9307      	str	r3, [sp, #28]
 80089e4:	f1ba 0f00 	cmp.w	sl, #0
 80089e8:	dd05      	ble.n	80089f6 <_dtoa_r+0x796>
 80089ea:	4652      	mov	r2, sl
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 fb5e 	bl	80090b0 <__lshift>
 80089f4:	9001      	str	r0, [sp, #4]
 80089f6:	9b07      	ldr	r3, [sp, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dd05      	ble.n	8008a08 <_dtoa_r+0x7a8>
 80089fc:	4629      	mov	r1, r5
 80089fe:	461a      	mov	r2, r3
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fb55 	bl	80090b0 <__lshift>
 8008a06:	4605      	mov	r5, r0
 8008a08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a0a:	b353      	cbz	r3, 8008a62 <_dtoa_r+0x802>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	9801      	ldr	r0, [sp, #4]
 8008a10:	f000 fba2 	bl	8009158 <__mcmp>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	da24      	bge.n	8008a62 <_dtoa_r+0x802>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	220a      	movs	r2, #10
 8008a1c:	9901      	ldr	r1, [sp, #4]
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f000 f9d0 	bl	8008dc4 <__multadd>
 8008a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a26:	9001      	str	r0, [sp, #4]
 8008a28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8142 	beq.w	8008cb6 <_dtoa_r+0xa56>
 8008a32:	2300      	movs	r3, #0
 8008a34:	4639      	mov	r1, r7
 8008a36:	220a      	movs	r2, #10
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 f9c3 	bl	8008dc4 <__multadd>
 8008a3e:	9b06      	ldr	r3, [sp, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	4607      	mov	r7, r0
 8008a44:	dc4b      	bgt.n	8008ade <_dtoa_r+0x87e>
 8008a46:	9b08      	ldr	r3, [sp, #32]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	dd48      	ble.n	8008ade <_dtoa_r+0x87e>
 8008a4c:	e011      	b.n	8008a72 <_dtoa_r+0x812>
 8008a4e:	d0c9      	beq.n	80089e4 <_dtoa_r+0x784>
 8008a50:	9a07      	ldr	r2, [sp, #28]
 8008a52:	331c      	adds	r3, #28
 8008a54:	441a      	add	r2, r3
 8008a56:	449a      	add	sl, r3
 8008a58:	441e      	add	r6, r3
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	e7c1      	b.n	80089e2 <_dtoa_r+0x782>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	e7f6      	b.n	8008a50 <_dtoa_r+0x7f0>
 8008a62:	f1b9 0f00 	cmp.w	r9, #0
 8008a66:	dc34      	bgt.n	8008ad2 <_dtoa_r+0x872>
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	dd31      	ble.n	8008ad2 <_dtoa_r+0x872>
 8008a6e:	f8cd 9018 	str.w	r9, [sp, #24]
 8008a72:	9b06      	ldr	r3, [sp, #24]
 8008a74:	b963      	cbnz	r3, 8008a90 <_dtoa_r+0x830>
 8008a76:	4629      	mov	r1, r5
 8008a78:	2205      	movs	r2, #5
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 f9a2 	bl	8008dc4 <__multadd>
 8008a80:	4601      	mov	r1, r0
 8008a82:	4605      	mov	r5, r0
 8008a84:	9801      	ldr	r0, [sp, #4]
 8008a86:	f000 fb67 	bl	8009158 <__mcmp>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	f73f adfc 	bgt.w	8008688 <_dtoa_r+0x428>
 8008a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a92:	9e04      	ldr	r6, [sp, #16]
 8008a94:	ea6f 0b03 	mvn.w	fp, r3
 8008a98:	f04f 0900 	mov.w	r9, #0
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f979 	bl	8008d96 <_Bfree>
 8008aa4:	2f00      	cmp	r7, #0
 8008aa6:	f43f aebb 	beq.w	8008820 <_dtoa_r+0x5c0>
 8008aaa:	f1b9 0f00 	cmp.w	r9, #0
 8008aae:	d005      	beq.n	8008abc <_dtoa_r+0x85c>
 8008ab0:	45b9      	cmp	r9, r7
 8008ab2:	d003      	beq.n	8008abc <_dtoa_r+0x85c>
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 f96d 	bl	8008d96 <_Bfree>
 8008abc:	4639      	mov	r1, r7
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f969 	bl	8008d96 <_Bfree>
 8008ac4:	e6ac      	b.n	8008820 <_dtoa_r+0x5c0>
 8008ac6:	2500      	movs	r5, #0
 8008ac8:	462f      	mov	r7, r5
 8008aca:	e7e1      	b.n	8008a90 <_dtoa_r+0x830>
 8008acc:	469b      	mov	fp, r3
 8008ace:	462f      	mov	r7, r5
 8008ad0:	e5da      	b.n	8008688 <_dtoa_r+0x428>
 8008ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad4:	f8cd 9018 	str.w	r9, [sp, #24]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80f3 	beq.w	8008cc4 <_dtoa_r+0xa64>
 8008ade:	2e00      	cmp	r6, #0
 8008ae0:	dd05      	ble.n	8008aee <_dtoa_r+0x88e>
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 fae2 	bl	80090b0 <__lshift>
 8008aec:	4607      	mov	r7, r0
 8008aee:	f1b8 0f00 	cmp.w	r8, #0
 8008af2:	d04c      	beq.n	8008b8e <_dtoa_r+0x92e>
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4620      	mov	r0, r4
 8008af8:	f000 f919 	bl	8008d2e <_Balloc>
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	3202      	adds	r2, #2
 8008b00:	4606      	mov	r6, r0
 8008b02:	0092      	lsls	r2, r2, #2
 8008b04:	f107 010c 	add.w	r1, r7, #12
 8008b08:	300c      	adds	r0, #12
 8008b0a:	f000 f903 	bl	8008d14 <memcpy>
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4631      	mov	r1, r6
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 facc 	bl	80090b0 <__lshift>
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	46b9      	mov	r9, r7
 8008b24:	9307      	str	r3, [sp, #28]
 8008b26:	4607      	mov	r7, r0
 8008b28:	4629      	mov	r1, r5
 8008b2a:	9801      	ldr	r0, [sp, #4]
 8008b2c:	f7ff fb0c 	bl	8008148 <quorem>
 8008b30:	4649      	mov	r1, r9
 8008b32:	4606      	mov	r6, r0
 8008b34:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b38:	9801      	ldr	r0, [sp, #4]
 8008b3a:	f000 fb0d 	bl	8009158 <__mcmp>
 8008b3e:	463a      	mov	r2, r7
 8008b40:	9002      	str	r0, [sp, #8]
 8008b42:	4629      	mov	r1, r5
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 fb21 	bl	800918c <__mdiff>
 8008b4a:	68c3      	ldr	r3, [r0, #12]
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	bb03      	cbnz	r3, 8008b92 <_dtoa_r+0x932>
 8008b50:	4601      	mov	r1, r0
 8008b52:	9009      	str	r0, [sp, #36]	; 0x24
 8008b54:	9801      	ldr	r0, [sp, #4]
 8008b56:	f000 faff 	bl	8009158 <__mcmp>
 8008b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4620      	mov	r0, r4
 8008b62:	9309      	str	r3, [sp, #36]	; 0x24
 8008b64:	f000 f917 	bl	8008d96 <_Bfree>
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	b9a3      	cbnz	r3, 8008b96 <_dtoa_r+0x936>
 8008b6c:	9a08      	ldr	r2, [sp, #32]
 8008b6e:	b992      	cbnz	r2, 8008b96 <_dtoa_r+0x936>
 8008b70:	9a07      	ldr	r2, [sp, #28]
 8008b72:	b982      	cbnz	r2, 8008b96 <_dtoa_r+0x936>
 8008b74:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b78:	d029      	beq.n	8008bce <_dtoa_r+0x96e>
 8008b7a:	9b02      	ldr	r3, [sp, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	dd01      	ble.n	8008b84 <_dtoa_r+0x924>
 8008b80:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008b84:	f10a 0601 	add.w	r6, sl, #1
 8008b88:	f88a 8000 	strb.w	r8, [sl]
 8008b8c:	e786      	b.n	8008a9c <_dtoa_r+0x83c>
 8008b8e:	4638      	mov	r0, r7
 8008b90:	e7c2      	b.n	8008b18 <_dtoa_r+0x8b8>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e7e3      	b.n	8008b5e <_dtoa_r+0x8fe>
 8008b96:	9a02      	ldr	r2, [sp, #8]
 8008b98:	2a00      	cmp	r2, #0
 8008b9a:	db04      	blt.n	8008ba6 <_dtoa_r+0x946>
 8008b9c:	d124      	bne.n	8008be8 <_dtoa_r+0x988>
 8008b9e:	9a08      	ldr	r2, [sp, #32]
 8008ba0:	bb12      	cbnz	r2, 8008be8 <_dtoa_r+0x988>
 8008ba2:	9a07      	ldr	r2, [sp, #28]
 8008ba4:	bb02      	cbnz	r2, 8008be8 <_dtoa_r+0x988>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	ddec      	ble.n	8008b84 <_dtoa_r+0x924>
 8008baa:	2201      	movs	r2, #1
 8008bac:	9901      	ldr	r1, [sp, #4]
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f000 fa7e 	bl	80090b0 <__lshift>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	9001      	str	r0, [sp, #4]
 8008bb8:	f000 face 	bl	8009158 <__mcmp>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	dc03      	bgt.n	8008bc8 <_dtoa_r+0x968>
 8008bc0:	d1e0      	bne.n	8008b84 <_dtoa_r+0x924>
 8008bc2:	f018 0f01 	tst.w	r8, #1
 8008bc6:	d0dd      	beq.n	8008b84 <_dtoa_r+0x924>
 8008bc8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bcc:	d1d8      	bne.n	8008b80 <_dtoa_r+0x920>
 8008bce:	2339      	movs	r3, #57	; 0x39
 8008bd0:	f10a 0601 	add.w	r6, sl, #1
 8008bd4:	f88a 3000 	strb.w	r3, [sl]
 8008bd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bdc:	2b39      	cmp	r3, #57	; 0x39
 8008bde:	f106 32ff 	add.w	r2, r6, #4294967295
 8008be2:	d04c      	beq.n	8008c7e <_dtoa_r+0xa1e>
 8008be4:	3301      	adds	r3, #1
 8008be6:	e051      	b.n	8008c8c <_dtoa_r+0xa2c>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f10a 0601 	add.w	r6, sl, #1
 8008bee:	dd05      	ble.n	8008bfc <_dtoa_r+0x99c>
 8008bf0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bf4:	d0eb      	beq.n	8008bce <_dtoa_r+0x96e>
 8008bf6:	f108 0801 	add.w	r8, r8, #1
 8008bfa:	e7c5      	b.n	8008b88 <_dtoa_r+0x928>
 8008bfc:	9b04      	ldr	r3, [sp, #16]
 8008bfe:	9a06      	ldr	r2, [sp, #24]
 8008c00:	f806 8c01 	strb.w	r8, [r6, #-1]
 8008c04:	1af3      	subs	r3, r6, r3
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d021      	beq.n	8008c4e <_dtoa_r+0x9ee>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	220a      	movs	r2, #10
 8008c0e:	9901      	ldr	r1, [sp, #4]
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 f8d7 	bl	8008dc4 <__multadd>
 8008c16:	45b9      	cmp	r9, r7
 8008c18:	9001      	str	r0, [sp, #4]
 8008c1a:	f04f 0300 	mov.w	r3, #0
 8008c1e:	f04f 020a 	mov.w	r2, #10
 8008c22:	4649      	mov	r1, r9
 8008c24:	4620      	mov	r0, r4
 8008c26:	d105      	bne.n	8008c34 <_dtoa_r+0x9d4>
 8008c28:	f000 f8cc 	bl	8008dc4 <__multadd>
 8008c2c:	4681      	mov	r9, r0
 8008c2e:	4607      	mov	r7, r0
 8008c30:	46b2      	mov	sl, r6
 8008c32:	e779      	b.n	8008b28 <_dtoa_r+0x8c8>
 8008c34:	f000 f8c6 	bl	8008dc4 <__multadd>
 8008c38:	4639      	mov	r1, r7
 8008c3a:	4681      	mov	r9, r0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	220a      	movs	r2, #10
 8008c40:	4620      	mov	r0, r4
 8008c42:	f000 f8bf 	bl	8008dc4 <__multadd>
 8008c46:	4607      	mov	r7, r0
 8008c48:	e7f2      	b.n	8008c30 <_dtoa_r+0x9d0>
 8008c4a:	f04f 0900 	mov.w	r9, #0
 8008c4e:	2201      	movs	r2, #1
 8008c50:	9901      	ldr	r1, [sp, #4]
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 fa2c 	bl	80090b0 <__lshift>
 8008c58:	4629      	mov	r1, r5
 8008c5a:	9001      	str	r0, [sp, #4]
 8008c5c:	f000 fa7c 	bl	8009158 <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	dcb9      	bgt.n	8008bd8 <_dtoa_r+0x978>
 8008c64:	d102      	bne.n	8008c6c <_dtoa_r+0xa0c>
 8008c66:	f018 0f01 	tst.w	r8, #1
 8008c6a:	d1b5      	bne.n	8008bd8 <_dtoa_r+0x978>
 8008c6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c70:	2b30      	cmp	r3, #48	; 0x30
 8008c72:	f106 32ff 	add.w	r2, r6, #4294967295
 8008c76:	f47f af11 	bne.w	8008a9c <_dtoa_r+0x83c>
 8008c7a:	4616      	mov	r6, r2
 8008c7c:	e7f6      	b.n	8008c6c <_dtoa_r+0xa0c>
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d105      	bne.n	8008c90 <_dtoa_r+0xa30>
 8008c84:	9a04      	ldr	r2, [sp, #16]
 8008c86:	f10b 0b01 	add.w	fp, fp, #1
 8008c8a:	2331      	movs	r3, #49	; 0x31
 8008c8c:	7013      	strb	r3, [r2, #0]
 8008c8e:	e705      	b.n	8008a9c <_dtoa_r+0x83c>
 8008c90:	4616      	mov	r6, r2
 8008c92:	e7a1      	b.n	8008bd8 <_dtoa_r+0x978>
 8008c94:	4b16      	ldr	r3, [pc, #88]	; (8008cf0 <_dtoa_r+0xa90>)
 8008c96:	f7ff bb48 	b.w	800832a <_dtoa_r+0xca>
 8008c9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f47f ab23 	bne.w	80082e8 <_dtoa_r+0x88>
 8008ca2:	4b14      	ldr	r3, [pc, #80]	; (8008cf4 <_dtoa_r+0xa94>)
 8008ca4:	f7ff bb41 	b.w	800832a <_dtoa_r+0xca>
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	f77f ae3b 	ble.w	8008926 <_dtoa_r+0x6c6>
 8008cb0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008cb4:	e64f      	b.n	8008956 <_dtoa_r+0x6f6>
 8008cb6:	9b06      	ldr	r3, [sp, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	dc03      	bgt.n	8008cc4 <_dtoa_r+0xa64>
 8008cbc:	9b08      	ldr	r3, [sp, #32]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	f73f aed7 	bgt.w	8008a72 <_dtoa_r+0x812>
 8008cc4:	9e04      	ldr	r6, [sp, #16]
 8008cc6:	9801      	ldr	r0, [sp, #4]
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7ff fa3d 	bl	8008148 <quorem>
 8008cce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008cd2:	f806 8b01 	strb.w	r8, [r6], #1
 8008cd6:	9b04      	ldr	r3, [sp, #16]
 8008cd8:	9a06      	ldr	r2, [sp, #24]
 8008cda:	1af3      	subs	r3, r6, r3
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	ddb4      	ble.n	8008c4a <_dtoa_r+0x9ea>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	220a      	movs	r2, #10
 8008ce4:	9901      	ldr	r1, [sp, #4]
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 f86c 	bl	8008dc4 <__multadd>
 8008cec:	9001      	str	r0, [sp, #4]
 8008cee:	e7ea      	b.n	8008cc6 <_dtoa_r+0xa66>
 8008cf0:	08009ba0 	.word	0x08009ba0
 8008cf4:	08009bc4 	.word	0x08009bc4

08008cf8 <_localeconv_r>:
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <_localeconv_r+0x14>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6a18      	ldr	r0, [r3, #32]
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <_localeconv_r+0x18>)
 8008d00:	2800      	cmp	r0, #0
 8008d02:	bf08      	it	eq
 8008d04:	4618      	moveq	r0, r3
 8008d06:	30f0      	adds	r0, #240	; 0xf0
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	24000010 	.word	0x24000010
 8008d10:	24000074 	.word	0x24000074

08008d14 <memcpy>:
 8008d14:	b510      	push	{r4, lr}
 8008d16:	1e43      	subs	r3, r0, #1
 8008d18:	440a      	add	r2, r1
 8008d1a:	4291      	cmp	r1, r2
 8008d1c:	d100      	bne.n	8008d20 <memcpy+0xc>
 8008d1e:	bd10      	pop	{r4, pc}
 8008d20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d28:	e7f7      	b.n	8008d1a <memcpy+0x6>

08008d2a <__malloc_lock>:
 8008d2a:	4770      	bx	lr

08008d2c <__malloc_unlock>:
 8008d2c:	4770      	bx	lr

08008d2e <_Balloc>:
 8008d2e:	b570      	push	{r4, r5, r6, lr}
 8008d30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d32:	4604      	mov	r4, r0
 8008d34:	460e      	mov	r6, r1
 8008d36:	b93d      	cbnz	r5, 8008d48 <_Balloc+0x1a>
 8008d38:	2010      	movs	r0, #16
 8008d3a:	f7fe fcd9 	bl	80076f0 <malloc>
 8008d3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d44:	6005      	str	r5, [r0, #0]
 8008d46:	60c5      	str	r5, [r0, #12]
 8008d48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d4a:	68eb      	ldr	r3, [r5, #12]
 8008d4c:	b183      	cbz	r3, 8008d70 <_Balloc+0x42>
 8008d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008d56:	b9b8      	cbnz	r0, 8008d88 <_Balloc+0x5a>
 8008d58:	2101      	movs	r1, #1
 8008d5a:	fa01 f506 	lsl.w	r5, r1, r6
 8008d5e:	1d6a      	adds	r2, r5, #5
 8008d60:	0092      	lsls	r2, r2, #2
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fabe 	bl	80092e4 <_calloc_r>
 8008d68:	b160      	cbz	r0, 8008d84 <_Balloc+0x56>
 8008d6a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008d6e:	e00e      	b.n	8008d8e <_Balloc+0x60>
 8008d70:	2221      	movs	r2, #33	; 0x21
 8008d72:	2104      	movs	r1, #4
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 fab5 	bl	80092e4 <_calloc_r>
 8008d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d7c:	60e8      	str	r0, [r5, #12]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e4      	bne.n	8008d4e <_Balloc+0x20>
 8008d84:	2000      	movs	r0, #0
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	6802      	ldr	r2, [r0, #0]
 8008d8a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d94:	e7f7      	b.n	8008d86 <_Balloc+0x58>

08008d96 <_Bfree>:
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	460d      	mov	r5, r1
 8008d9e:	b93c      	cbnz	r4, 8008db0 <_Bfree+0x1a>
 8008da0:	2010      	movs	r0, #16
 8008da2:	f7fe fca5 	bl	80076f0 <malloc>
 8008da6:	6270      	str	r0, [r6, #36]	; 0x24
 8008da8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dac:	6004      	str	r4, [r0, #0]
 8008dae:	60c4      	str	r4, [r0, #12]
 8008db0:	b13d      	cbz	r5, 8008dc2 <_Bfree+0x2c>
 8008db2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008db4:	686a      	ldr	r2, [r5, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dbc:	6029      	str	r1, [r5, #0]
 8008dbe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}

08008dc4 <__multadd>:
 8008dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc8:	690d      	ldr	r5, [r1, #16]
 8008dca:	461f      	mov	r7, r3
 8008dcc:	4606      	mov	r6, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	f101 0c14 	add.w	ip, r1, #20
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f8dc 0000 	ldr.w	r0, [ip]
 8008dda:	b281      	uxth	r1, r0
 8008ddc:	fb02 7101 	mla	r1, r2, r1, r7
 8008de0:	0c0f      	lsrs	r7, r1, #16
 8008de2:	0c00      	lsrs	r0, r0, #16
 8008de4:	fb02 7000 	mla	r0, r2, r0, r7
 8008de8:	b289      	uxth	r1, r1
 8008dea:	3301      	adds	r3, #1
 8008dec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008df0:	429d      	cmp	r5, r3
 8008df2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008df6:	f84c 1b04 	str.w	r1, [ip], #4
 8008dfa:	dcec      	bgt.n	8008dd6 <__multadd+0x12>
 8008dfc:	b1d7      	cbz	r7, 8008e34 <__multadd+0x70>
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	42ab      	cmp	r3, r5
 8008e02:	dc12      	bgt.n	8008e2a <__multadd+0x66>
 8008e04:	6861      	ldr	r1, [r4, #4]
 8008e06:	4630      	mov	r0, r6
 8008e08:	3101      	adds	r1, #1
 8008e0a:	f7ff ff90 	bl	8008d2e <_Balloc>
 8008e0e:	6922      	ldr	r2, [r4, #16]
 8008e10:	3202      	adds	r2, #2
 8008e12:	f104 010c 	add.w	r1, r4, #12
 8008e16:	4680      	mov	r8, r0
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	300c      	adds	r0, #12
 8008e1c:	f7ff ff7a 	bl	8008d14 <memcpy>
 8008e20:	4621      	mov	r1, r4
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7ff ffb7 	bl	8008d96 <_Bfree>
 8008e28:	4644      	mov	r4, r8
 8008e2a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e2e:	3501      	adds	r5, #1
 8008e30:	615f      	str	r7, [r3, #20]
 8008e32:	6125      	str	r5, [r4, #16]
 8008e34:	4620      	mov	r0, r4
 8008e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e3a <__hi0bits>:
 8008e3a:	0c02      	lsrs	r2, r0, #16
 8008e3c:	0412      	lsls	r2, r2, #16
 8008e3e:	4603      	mov	r3, r0
 8008e40:	b9b2      	cbnz	r2, 8008e70 <__hi0bits+0x36>
 8008e42:	0403      	lsls	r3, r0, #16
 8008e44:	2010      	movs	r0, #16
 8008e46:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e4a:	bf04      	itt	eq
 8008e4c:	021b      	lsleq	r3, r3, #8
 8008e4e:	3008      	addeq	r0, #8
 8008e50:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e54:	bf04      	itt	eq
 8008e56:	011b      	lsleq	r3, r3, #4
 8008e58:	3004      	addeq	r0, #4
 8008e5a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e5e:	bf04      	itt	eq
 8008e60:	009b      	lsleq	r3, r3, #2
 8008e62:	3002      	addeq	r0, #2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	db06      	blt.n	8008e76 <__hi0bits+0x3c>
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	d503      	bpl.n	8008e74 <__hi0bits+0x3a>
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	4770      	bx	lr
 8008e70:	2000      	movs	r0, #0
 8008e72:	e7e8      	b.n	8008e46 <__hi0bits+0xc>
 8008e74:	2020      	movs	r0, #32
 8008e76:	4770      	bx	lr

08008e78 <__lo0bits>:
 8008e78:	6803      	ldr	r3, [r0, #0]
 8008e7a:	f013 0207 	ands.w	r2, r3, #7
 8008e7e:	4601      	mov	r1, r0
 8008e80:	d00b      	beq.n	8008e9a <__lo0bits+0x22>
 8008e82:	07da      	lsls	r2, r3, #31
 8008e84:	d423      	bmi.n	8008ece <__lo0bits+0x56>
 8008e86:	0798      	lsls	r0, r3, #30
 8008e88:	bf49      	itett	mi
 8008e8a:	085b      	lsrmi	r3, r3, #1
 8008e8c:	089b      	lsrpl	r3, r3, #2
 8008e8e:	2001      	movmi	r0, #1
 8008e90:	600b      	strmi	r3, [r1, #0]
 8008e92:	bf5c      	itt	pl
 8008e94:	600b      	strpl	r3, [r1, #0]
 8008e96:	2002      	movpl	r0, #2
 8008e98:	4770      	bx	lr
 8008e9a:	b298      	uxth	r0, r3
 8008e9c:	b9a8      	cbnz	r0, 8008eca <__lo0bits+0x52>
 8008e9e:	0c1b      	lsrs	r3, r3, #16
 8008ea0:	2010      	movs	r0, #16
 8008ea2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ea6:	bf04      	itt	eq
 8008ea8:	0a1b      	lsreq	r3, r3, #8
 8008eaa:	3008      	addeq	r0, #8
 8008eac:	071a      	lsls	r2, r3, #28
 8008eae:	bf04      	itt	eq
 8008eb0:	091b      	lsreq	r3, r3, #4
 8008eb2:	3004      	addeq	r0, #4
 8008eb4:	079a      	lsls	r2, r3, #30
 8008eb6:	bf04      	itt	eq
 8008eb8:	089b      	lsreq	r3, r3, #2
 8008eba:	3002      	addeq	r0, #2
 8008ebc:	07da      	lsls	r2, r3, #31
 8008ebe:	d402      	bmi.n	8008ec6 <__lo0bits+0x4e>
 8008ec0:	085b      	lsrs	r3, r3, #1
 8008ec2:	d006      	beq.n	8008ed2 <__lo0bits+0x5a>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	600b      	str	r3, [r1, #0]
 8008ec8:	4770      	bx	lr
 8008eca:	4610      	mov	r0, r2
 8008ecc:	e7e9      	b.n	8008ea2 <__lo0bits+0x2a>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	4770      	bx	lr
 8008ed2:	2020      	movs	r0, #32
 8008ed4:	4770      	bx	lr

08008ed6 <__i2b>:
 8008ed6:	b510      	push	{r4, lr}
 8008ed8:	460c      	mov	r4, r1
 8008eda:	2101      	movs	r1, #1
 8008edc:	f7ff ff27 	bl	8008d2e <_Balloc>
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	6144      	str	r4, [r0, #20]
 8008ee4:	6102      	str	r2, [r0, #16]
 8008ee6:	bd10      	pop	{r4, pc}

08008ee8 <__multiply>:
 8008ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	4614      	mov	r4, r2
 8008eee:	690a      	ldr	r2, [r1, #16]
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	bfb8      	it	lt
 8008ef6:	460b      	movlt	r3, r1
 8008ef8:	4688      	mov	r8, r1
 8008efa:	bfbc      	itt	lt
 8008efc:	46a0      	movlt	r8, r4
 8008efe:	461c      	movlt	r4, r3
 8008f00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f10:	eb07 0609 	add.w	r6, r7, r9
 8008f14:	42b3      	cmp	r3, r6
 8008f16:	bfb8      	it	lt
 8008f18:	3101      	addlt	r1, #1
 8008f1a:	f7ff ff08 	bl	8008d2e <_Balloc>
 8008f1e:	f100 0514 	add.w	r5, r0, #20
 8008f22:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f26:	462b      	mov	r3, r5
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4573      	cmp	r3, lr
 8008f2c:	d316      	bcc.n	8008f5c <__multiply+0x74>
 8008f2e:	f104 0214 	add.w	r2, r4, #20
 8008f32:	f108 0114 	add.w	r1, r8, #20
 8008f36:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008f3a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	9b00      	ldr	r3, [sp, #0]
 8008f42:	9201      	str	r2, [sp, #4]
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d80c      	bhi.n	8008f62 <__multiply+0x7a>
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	dd03      	ble.n	8008f54 <__multiply+0x6c>
 8008f4c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d05d      	beq.n	8009010 <__multiply+0x128>
 8008f54:	6106      	str	r6, [r0, #16]
 8008f56:	b003      	add	sp, #12
 8008f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5c:	f843 2b04 	str.w	r2, [r3], #4
 8008f60:	e7e3      	b.n	8008f2a <__multiply+0x42>
 8008f62:	f8b2 b000 	ldrh.w	fp, [r2]
 8008f66:	f1bb 0f00 	cmp.w	fp, #0
 8008f6a:	d023      	beq.n	8008fb4 <__multiply+0xcc>
 8008f6c:	4689      	mov	r9, r1
 8008f6e:	46ac      	mov	ip, r5
 8008f70:	f04f 0800 	mov.w	r8, #0
 8008f74:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f78:	f8dc a000 	ldr.w	sl, [ip]
 8008f7c:	b2a3      	uxth	r3, r4
 8008f7e:	fa1f fa8a 	uxth.w	sl, sl
 8008f82:	fb0b a303 	mla	r3, fp, r3, sl
 8008f86:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f8a:	f8dc 4000 	ldr.w	r4, [ip]
 8008f8e:	4443      	add	r3, r8
 8008f90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f94:	fb0b 840a 	mla	r4, fp, sl, r8
 8008f98:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008f9c:	46e2      	mov	sl, ip
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fa4:	454f      	cmp	r7, r9
 8008fa6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008faa:	f84a 3b04 	str.w	r3, [sl], #4
 8008fae:	d82b      	bhi.n	8009008 <__multiply+0x120>
 8008fb0:	f8cc 8004 	str.w	r8, [ip, #4]
 8008fb4:	9b01      	ldr	r3, [sp, #4]
 8008fb6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008fba:	3204      	adds	r2, #4
 8008fbc:	f1ba 0f00 	cmp.w	sl, #0
 8008fc0:	d020      	beq.n	8009004 <__multiply+0x11c>
 8008fc2:	682b      	ldr	r3, [r5, #0]
 8008fc4:	4689      	mov	r9, r1
 8008fc6:	46a8      	mov	r8, r5
 8008fc8:	f04f 0b00 	mov.w	fp, #0
 8008fcc:	f8b9 c000 	ldrh.w	ip, [r9]
 8008fd0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008fd4:	fb0a 440c 	mla	r4, sl, ip, r4
 8008fd8:	445c      	add	r4, fp
 8008fda:	46c4      	mov	ip, r8
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fe2:	f84c 3b04 	str.w	r3, [ip], #4
 8008fe6:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fea:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008fee:	0c1b      	lsrs	r3, r3, #16
 8008ff0:	fb0a b303 	mla	r3, sl, r3, fp
 8008ff4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ff8:	454f      	cmp	r7, r9
 8008ffa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008ffe:	d805      	bhi.n	800900c <__multiply+0x124>
 8009000:	f8c8 3004 	str.w	r3, [r8, #4]
 8009004:	3504      	adds	r5, #4
 8009006:	e79b      	b.n	8008f40 <__multiply+0x58>
 8009008:	46d4      	mov	ip, sl
 800900a:	e7b3      	b.n	8008f74 <__multiply+0x8c>
 800900c:	46e0      	mov	r8, ip
 800900e:	e7dd      	b.n	8008fcc <__multiply+0xe4>
 8009010:	3e01      	subs	r6, #1
 8009012:	e799      	b.n	8008f48 <__multiply+0x60>

08009014 <__pow5mult>:
 8009014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009018:	4615      	mov	r5, r2
 800901a:	f012 0203 	ands.w	r2, r2, #3
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	d007      	beq.n	8009034 <__pow5mult+0x20>
 8009024:	3a01      	subs	r2, #1
 8009026:	4c21      	ldr	r4, [pc, #132]	; (80090ac <__pow5mult+0x98>)
 8009028:	2300      	movs	r3, #0
 800902a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800902e:	f7ff fec9 	bl	8008dc4 <__multadd>
 8009032:	4607      	mov	r7, r0
 8009034:	10ad      	asrs	r5, r5, #2
 8009036:	d035      	beq.n	80090a4 <__pow5mult+0x90>
 8009038:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800903a:	b93c      	cbnz	r4, 800904c <__pow5mult+0x38>
 800903c:	2010      	movs	r0, #16
 800903e:	f7fe fb57 	bl	80076f0 <malloc>
 8009042:	6270      	str	r0, [r6, #36]	; 0x24
 8009044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009048:	6004      	str	r4, [r0, #0]
 800904a:	60c4      	str	r4, [r0, #12]
 800904c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009050:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009054:	b94c      	cbnz	r4, 800906a <__pow5mult+0x56>
 8009056:	f240 2171 	movw	r1, #625	; 0x271
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff ff3b 	bl	8008ed6 <__i2b>
 8009060:	2300      	movs	r3, #0
 8009062:	f8c8 0008 	str.w	r0, [r8, #8]
 8009066:	4604      	mov	r4, r0
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	f04f 0800 	mov.w	r8, #0
 800906e:	07eb      	lsls	r3, r5, #31
 8009070:	d50a      	bpl.n	8009088 <__pow5mult+0x74>
 8009072:	4639      	mov	r1, r7
 8009074:	4622      	mov	r2, r4
 8009076:	4630      	mov	r0, r6
 8009078:	f7ff ff36 	bl	8008ee8 <__multiply>
 800907c:	4639      	mov	r1, r7
 800907e:	4681      	mov	r9, r0
 8009080:	4630      	mov	r0, r6
 8009082:	f7ff fe88 	bl	8008d96 <_Bfree>
 8009086:	464f      	mov	r7, r9
 8009088:	106d      	asrs	r5, r5, #1
 800908a:	d00b      	beq.n	80090a4 <__pow5mult+0x90>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	b938      	cbnz	r0, 80090a0 <__pow5mult+0x8c>
 8009090:	4622      	mov	r2, r4
 8009092:	4621      	mov	r1, r4
 8009094:	4630      	mov	r0, r6
 8009096:	f7ff ff27 	bl	8008ee8 <__multiply>
 800909a:	6020      	str	r0, [r4, #0]
 800909c:	f8c0 8000 	str.w	r8, [r0]
 80090a0:	4604      	mov	r4, r0
 80090a2:	e7e4      	b.n	800906e <__pow5mult+0x5a>
 80090a4:	4638      	mov	r0, r7
 80090a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090aa:	bf00      	nop
 80090ac:	08009cc8 	.word	0x08009cc8

080090b0 <__lshift>:
 80090b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b4:	460c      	mov	r4, r1
 80090b6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	6849      	ldr	r1, [r1, #4]
 80090be:	eb0a 0903 	add.w	r9, sl, r3
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	4607      	mov	r7, r0
 80090c6:	4616      	mov	r6, r2
 80090c8:	f109 0501 	add.w	r5, r9, #1
 80090cc:	42ab      	cmp	r3, r5
 80090ce:	db32      	blt.n	8009136 <__lshift+0x86>
 80090d0:	4638      	mov	r0, r7
 80090d2:	f7ff fe2c 	bl	8008d2e <_Balloc>
 80090d6:	2300      	movs	r3, #0
 80090d8:	4680      	mov	r8, r0
 80090da:	f100 0114 	add.w	r1, r0, #20
 80090de:	461a      	mov	r2, r3
 80090e0:	4553      	cmp	r3, sl
 80090e2:	db2b      	blt.n	800913c <__lshift+0x8c>
 80090e4:	6920      	ldr	r0, [r4, #16]
 80090e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090ea:	f104 0314 	add.w	r3, r4, #20
 80090ee:	f016 021f 	ands.w	r2, r6, #31
 80090f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090fa:	d025      	beq.n	8009148 <__lshift+0x98>
 80090fc:	f1c2 0e20 	rsb	lr, r2, #32
 8009100:	2000      	movs	r0, #0
 8009102:	681e      	ldr	r6, [r3, #0]
 8009104:	468a      	mov	sl, r1
 8009106:	4096      	lsls	r6, r2
 8009108:	4330      	orrs	r0, r6
 800910a:	f84a 0b04 	str.w	r0, [sl], #4
 800910e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009112:	459c      	cmp	ip, r3
 8009114:	fa20 f00e 	lsr.w	r0, r0, lr
 8009118:	d814      	bhi.n	8009144 <__lshift+0x94>
 800911a:	6048      	str	r0, [r1, #4]
 800911c:	b108      	cbz	r0, 8009122 <__lshift+0x72>
 800911e:	f109 0502 	add.w	r5, r9, #2
 8009122:	3d01      	subs	r5, #1
 8009124:	4638      	mov	r0, r7
 8009126:	f8c8 5010 	str.w	r5, [r8, #16]
 800912a:	4621      	mov	r1, r4
 800912c:	f7ff fe33 	bl	8008d96 <_Bfree>
 8009130:	4640      	mov	r0, r8
 8009132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009136:	3101      	adds	r1, #1
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	e7c7      	b.n	80090cc <__lshift+0x1c>
 800913c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009140:	3301      	adds	r3, #1
 8009142:	e7cd      	b.n	80090e0 <__lshift+0x30>
 8009144:	4651      	mov	r1, sl
 8009146:	e7dc      	b.n	8009102 <__lshift+0x52>
 8009148:	3904      	subs	r1, #4
 800914a:	f853 2b04 	ldr.w	r2, [r3], #4
 800914e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009152:	459c      	cmp	ip, r3
 8009154:	d8f9      	bhi.n	800914a <__lshift+0x9a>
 8009156:	e7e4      	b.n	8009122 <__lshift+0x72>

08009158 <__mcmp>:
 8009158:	6903      	ldr	r3, [r0, #16]
 800915a:	690a      	ldr	r2, [r1, #16]
 800915c:	1a9b      	subs	r3, r3, r2
 800915e:	b530      	push	{r4, r5, lr}
 8009160:	d10c      	bne.n	800917c <__mcmp+0x24>
 8009162:	0092      	lsls	r2, r2, #2
 8009164:	3014      	adds	r0, #20
 8009166:	3114      	adds	r1, #20
 8009168:	1884      	adds	r4, r0, r2
 800916a:	4411      	add	r1, r2
 800916c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009174:	4295      	cmp	r5, r2
 8009176:	d003      	beq.n	8009180 <__mcmp+0x28>
 8009178:	d305      	bcc.n	8009186 <__mcmp+0x2e>
 800917a:	2301      	movs	r3, #1
 800917c:	4618      	mov	r0, r3
 800917e:	bd30      	pop	{r4, r5, pc}
 8009180:	42a0      	cmp	r0, r4
 8009182:	d3f3      	bcc.n	800916c <__mcmp+0x14>
 8009184:	e7fa      	b.n	800917c <__mcmp+0x24>
 8009186:	f04f 33ff 	mov.w	r3, #4294967295
 800918a:	e7f7      	b.n	800917c <__mcmp+0x24>

0800918c <__mdiff>:
 800918c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009190:	460d      	mov	r5, r1
 8009192:	4607      	mov	r7, r0
 8009194:	4611      	mov	r1, r2
 8009196:	4628      	mov	r0, r5
 8009198:	4614      	mov	r4, r2
 800919a:	f7ff ffdd 	bl	8009158 <__mcmp>
 800919e:	1e06      	subs	r6, r0, #0
 80091a0:	d108      	bne.n	80091b4 <__mdiff+0x28>
 80091a2:	4631      	mov	r1, r6
 80091a4:	4638      	mov	r0, r7
 80091a6:	f7ff fdc2 	bl	8008d2e <_Balloc>
 80091aa:	2301      	movs	r3, #1
 80091ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80091b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b4:	bfa4      	itt	ge
 80091b6:	4623      	movge	r3, r4
 80091b8:	462c      	movge	r4, r5
 80091ba:	4638      	mov	r0, r7
 80091bc:	6861      	ldr	r1, [r4, #4]
 80091be:	bfa6      	itte	ge
 80091c0:	461d      	movge	r5, r3
 80091c2:	2600      	movge	r6, #0
 80091c4:	2601      	movlt	r6, #1
 80091c6:	f7ff fdb2 	bl	8008d2e <_Balloc>
 80091ca:	692b      	ldr	r3, [r5, #16]
 80091cc:	60c6      	str	r6, [r0, #12]
 80091ce:	6926      	ldr	r6, [r4, #16]
 80091d0:	f105 0914 	add.w	r9, r5, #20
 80091d4:	f104 0214 	add.w	r2, r4, #20
 80091d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80091dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80091e0:	f100 0514 	add.w	r5, r0, #20
 80091e4:	f04f 0e00 	mov.w	lr, #0
 80091e8:	f852 ab04 	ldr.w	sl, [r2], #4
 80091ec:	f859 4b04 	ldr.w	r4, [r9], #4
 80091f0:	fa1e f18a 	uxtah	r1, lr, sl
 80091f4:	b2a3      	uxth	r3, r4
 80091f6:	1ac9      	subs	r1, r1, r3
 80091f8:	0c23      	lsrs	r3, r4, #16
 80091fa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80091fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009202:	b289      	uxth	r1, r1
 8009204:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009208:	45c8      	cmp	r8, r9
 800920a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800920e:	4694      	mov	ip, r2
 8009210:	f845 3b04 	str.w	r3, [r5], #4
 8009214:	d8e8      	bhi.n	80091e8 <__mdiff+0x5c>
 8009216:	45bc      	cmp	ip, r7
 8009218:	d304      	bcc.n	8009224 <__mdiff+0x98>
 800921a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800921e:	b183      	cbz	r3, 8009242 <__mdiff+0xb6>
 8009220:	6106      	str	r6, [r0, #16]
 8009222:	e7c5      	b.n	80091b0 <__mdiff+0x24>
 8009224:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009228:	fa1e f381 	uxtah	r3, lr, r1
 800922c:	141a      	asrs	r2, r3, #16
 800922e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009232:	b29b      	uxth	r3, r3
 8009234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009238:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800923c:	f845 3b04 	str.w	r3, [r5], #4
 8009240:	e7e9      	b.n	8009216 <__mdiff+0x8a>
 8009242:	3e01      	subs	r6, #1
 8009244:	e7e9      	b.n	800921a <__mdiff+0x8e>

08009246 <__d2b>:
 8009246:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800924a:	460e      	mov	r6, r1
 800924c:	2101      	movs	r1, #1
 800924e:	ec59 8b10 	vmov	r8, r9, d0
 8009252:	4615      	mov	r5, r2
 8009254:	f7ff fd6b 	bl	8008d2e <_Balloc>
 8009258:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800925c:	4607      	mov	r7, r0
 800925e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009262:	bb34      	cbnz	r4, 80092b2 <__d2b+0x6c>
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	f1b8 0300 	subs.w	r3, r8, #0
 800926a:	d027      	beq.n	80092bc <__d2b+0x76>
 800926c:	a802      	add	r0, sp, #8
 800926e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009272:	f7ff fe01 	bl	8008e78 <__lo0bits>
 8009276:	9900      	ldr	r1, [sp, #0]
 8009278:	b1f0      	cbz	r0, 80092b8 <__d2b+0x72>
 800927a:	9a01      	ldr	r2, [sp, #4]
 800927c:	f1c0 0320 	rsb	r3, r0, #32
 8009280:	fa02 f303 	lsl.w	r3, r2, r3
 8009284:	430b      	orrs	r3, r1
 8009286:	40c2      	lsrs	r2, r0
 8009288:	617b      	str	r3, [r7, #20]
 800928a:	9201      	str	r2, [sp, #4]
 800928c:	9b01      	ldr	r3, [sp, #4]
 800928e:	61bb      	str	r3, [r7, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	bf14      	ite	ne
 8009294:	2102      	movne	r1, #2
 8009296:	2101      	moveq	r1, #1
 8009298:	6139      	str	r1, [r7, #16]
 800929a:	b1c4      	cbz	r4, 80092ce <__d2b+0x88>
 800929c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80092a0:	4404      	add	r4, r0
 80092a2:	6034      	str	r4, [r6, #0]
 80092a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092a8:	6028      	str	r0, [r5, #0]
 80092aa:	4638      	mov	r0, r7
 80092ac:	b003      	add	sp, #12
 80092ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092b6:	e7d5      	b.n	8009264 <__d2b+0x1e>
 80092b8:	6179      	str	r1, [r7, #20]
 80092ba:	e7e7      	b.n	800928c <__d2b+0x46>
 80092bc:	a801      	add	r0, sp, #4
 80092be:	f7ff fddb 	bl	8008e78 <__lo0bits>
 80092c2:	9b01      	ldr	r3, [sp, #4]
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	2101      	movs	r1, #1
 80092c8:	6139      	str	r1, [r7, #16]
 80092ca:	3020      	adds	r0, #32
 80092cc:	e7e5      	b.n	800929a <__d2b+0x54>
 80092ce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80092d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092d6:	6030      	str	r0, [r6, #0]
 80092d8:	6918      	ldr	r0, [r3, #16]
 80092da:	f7ff fdae 	bl	8008e3a <__hi0bits>
 80092de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80092e2:	e7e1      	b.n	80092a8 <__d2b+0x62>

080092e4 <_calloc_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	fb02 f401 	mul.w	r4, r2, r1
 80092ea:	4621      	mov	r1, r4
 80092ec:	f7fe fa66 	bl	80077bc <_malloc_r>
 80092f0:	4605      	mov	r5, r0
 80092f2:	b118      	cbz	r0, 80092fc <_calloc_r+0x18>
 80092f4:	4622      	mov	r2, r4
 80092f6:	2100      	movs	r1, #0
 80092f8:	f7fe fa0a 	bl	8007710 <memset>
 80092fc:	4628      	mov	r0, r5
 80092fe:	bd38      	pop	{r3, r4, r5, pc}

08009300 <__ssputs_r>:
 8009300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009304:	688e      	ldr	r6, [r1, #8]
 8009306:	429e      	cmp	r6, r3
 8009308:	4682      	mov	sl, r0
 800930a:	460c      	mov	r4, r1
 800930c:	4690      	mov	r8, r2
 800930e:	4699      	mov	r9, r3
 8009310:	d837      	bhi.n	8009382 <__ssputs_r+0x82>
 8009312:	898a      	ldrh	r2, [r1, #12]
 8009314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009318:	d031      	beq.n	800937e <__ssputs_r+0x7e>
 800931a:	6825      	ldr	r5, [r4, #0]
 800931c:	6909      	ldr	r1, [r1, #16]
 800931e:	1a6f      	subs	r7, r5, r1
 8009320:	6965      	ldr	r5, [r4, #20]
 8009322:	2302      	movs	r3, #2
 8009324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009328:	fb95 f5f3 	sdiv	r5, r5, r3
 800932c:	f109 0301 	add.w	r3, r9, #1
 8009330:	443b      	add	r3, r7
 8009332:	429d      	cmp	r5, r3
 8009334:	bf38      	it	cc
 8009336:	461d      	movcc	r5, r3
 8009338:	0553      	lsls	r3, r2, #21
 800933a:	d530      	bpl.n	800939e <__ssputs_r+0x9e>
 800933c:	4629      	mov	r1, r5
 800933e:	f7fe fa3d 	bl	80077bc <_malloc_r>
 8009342:	4606      	mov	r6, r0
 8009344:	b950      	cbnz	r0, 800935c <__ssputs_r+0x5c>
 8009346:	230c      	movs	r3, #12
 8009348:	f8ca 3000 	str.w	r3, [sl]
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009352:	81a3      	strh	r3, [r4, #12]
 8009354:	f04f 30ff 	mov.w	r0, #4294967295
 8009358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935c:	463a      	mov	r2, r7
 800935e:	6921      	ldr	r1, [r4, #16]
 8009360:	f7ff fcd8 	bl	8008d14 <memcpy>
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800936a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800936e:	81a3      	strh	r3, [r4, #12]
 8009370:	6126      	str	r6, [r4, #16]
 8009372:	6165      	str	r5, [r4, #20]
 8009374:	443e      	add	r6, r7
 8009376:	1bed      	subs	r5, r5, r7
 8009378:	6026      	str	r6, [r4, #0]
 800937a:	60a5      	str	r5, [r4, #8]
 800937c:	464e      	mov	r6, r9
 800937e:	454e      	cmp	r6, r9
 8009380:	d900      	bls.n	8009384 <__ssputs_r+0x84>
 8009382:	464e      	mov	r6, r9
 8009384:	4632      	mov	r2, r6
 8009386:	4641      	mov	r1, r8
 8009388:	6820      	ldr	r0, [r4, #0]
 800938a:	f000 f91d 	bl	80095c8 <memmove>
 800938e:	68a3      	ldr	r3, [r4, #8]
 8009390:	1b9b      	subs	r3, r3, r6
 8009392:	60a3      	str	r3, [r4, #8]
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	441e      	add	r6, r3
 8009398:	6026      	str	r6, [r4, #0]
 800939a:	2000      	movs	r0, #0
 800939c:	e7dc      	b.n	8009358 <__ssputs_r+0x58>
 800939e:	462a      	mov	r2, r5
 80093a0:	f000 f92b 	bl	80095fa <_realloc_r>
 80093a4:	4606      	mov	r6, r0
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d1e2      	bne.n	8009370 <__ssputs_r+0x70>
 80093aa:	6921      	ldr	r1, [r4, #16]
 80093ac:	4650      	mov	r0, sl
 80093ae:	f7fe f9b7 	bl	8007720 <_free_r>
 80093b2:	e7c8      	b.n	8009346 <__ssputs_r+0x46>

080093b4 <_svfiprintf_r>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	461d      	mov	r5, r3
 80093ba:	898b      	ldrh	r3, [r1, #12]
 80093bc:	061f      	lsls	r7, r3, #24
 80093be:	b09d      	sub	sp, #116	; 0x74
 80093c0:	4680      	mov	r8, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	4616      	mov	r6, r2
 80093c6:	d50f      	bpl.n	80093e8 <_svfiprintf_r+0x34>
 80093c8:	690b      	ldr	r3, [r1, #16]
 80093ca:	b96b      	cbnz	r3, 80093e8 <_svfiprintf_r+0x34>
 80093cc:	2140      	movs	r1, #64	; 0x40
 80093ce:	f7fe f9f5 	bl	80077bc <_malloc_r>
 80093d2:	6020      	str	r0, [r4, #0]
 80093d4:	6120      	str	r0, [r4, #16]
 80093d6:	b928      	cbnz	r0, 80093e4 <_svfiprintf_r+0x30>
 80093d8:	230c      	movs	r3, #12
 80093da:	f8c8 3000 	str.w	r3, [r8]
 80093de:	f04f 30ff 	mov.w	r0, #4294967295
 80093e2:	e0c8      	b.n	8009576 <_svfiprintf_r+0x1c2>
 80093e4:	2340      	movs	r3, #64	; 0x40
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	2300      	movs	r3, #0
 80093ea:	9309      	str	r3, [sp, #36]	; 0x24
 80093ec:	2320      	movs	r3, #32
 80093ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093f2:	2330      	movs	r3, #48	; 0x30
 80093f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093f8:	9503      	str	r5, [sp, #12]
 80093fa:	f04f 0b01 	mov.w	fp, #1
 80093fe:	4637      	mov	r7, r6
 8009400:	463d      	mov	r5, r7
 8009402:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009406:	b10b      	cbz	r3, 800940c <_svfiprintf_r+0x58>
 8009408:	2b25      	cmp	r3, #37	; 0x25
 800940a:	d13e      	bne.n	800948a <_svfiprintf_r+0xd6>
 800940c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009410:	d00b      	beq.n	800942a <_svfiprintf_r+0x76>
 8009412:	4653      	mov	r3, sl
 8009414:	4632      	mov	r2, r6
 8009416:	4621      	mov	r1, r4
 8009418:	4640      	mov	r0, r8
 800941a:	f7ff ff71 	bl	8009300 <__ssputs_r>
 800941e:	3001      	adds	r0, #1
 8009420:	f000 80a4 	beq.w	800956c <_svfiprintf_r+0x1b8>
 8009424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009426:	4453      	add	r3, sl
 8009428:	9309      	str	r3, [sp, #36]	; 0x24
 800942a:	783b      	ldrb	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 809d 	beq.w	800956c <_svfiprintf_r+0x1b8>
 8009432:	2300      	movs	r3, #0
 8009434:	f04f 32ff 	mov.w	r2, #4294967295
 8009438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800943c:	9304      	str	r3, [sp, #16]
 800943e:	9307      	str	r3, [sp, #28]
 8009440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009444:	931a      	str	r3, [sp, #104]	; 0x68
 8009446:	462f      	mov	r7, r5
 8009448:	2205      	movs	r2, #5
 800944a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800944e:	4850      	ldr	r0, [pc, #320]	; (8009590 <_svfiprintf_r+0x1dc>)
 8009450:	f7f6 ff4e 	bl	80002f0 <memchr>
 8009454:	9b04      	ldr	r3, [sp, #16]
 8009456:	b9d0      	cbnz	r0, 800948e <_svfiprintf_r+0xda>
 8009458:	06d9      	lsls	r1, r3, #27
 800945a:	bf44      	itt	mi
 800945c:	2220      	movmi	r2, #32
 800945e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009462:	071a      	lsls	r2, r3, #28
 8009464:	bf44      	itt	mi
 8009466:	222b      	movmi	r2, #43	; 0x2b
 8009468:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800946c:	782a      	ldrb	r2, [r5, #0]
 800946e:	2a2a      	cmp	r2, #42	; 0x2a
 8009470:	d015      	beq.n	800949e <_svfiprintf_r+0xea>
 8009472:	9a07      	ldr	r2, [sp, #28]
 8009474:	462f      	mov	r7, r5
 8009476:	2000      	movs	r0, #0
 8009478:	250a      	movs	r5, #10
 800947a:	4639      	mov	r1, r7
 800947c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009480:	3b30      	subs	r3, #48	; 0x30
 8009482:	2b09      	cmp	r3, #9
 8009484:	d94d      	bls.n	8009522 <_svfiprintf_r+0x16e>
 8009486:	b1b8      	cbz	r0, 80094b8 <_svfiprintf_r+0x104>
 8009488:	e00f      	b.n	80094aa <_svfiprintf_r+0xf6>
 800948a:	462f      	mov	r7, r5
 800948c:	e7b8      	b.n	8009400 <_svfiprintf_r+0x4c>
 800948e:	4a40      	ldr	r2, [pc, #256]	; (8009590 <_svfiprintf_r+0x1dc>)
 8009490:	1a80      	subs	r0, r0, r2
 8009492:	fa0b f000 	lsl.w	r0, fp, r0
 8009496:	4318      	orrs	r0, r3
 8009498:	9004      	str	r0, [sp, #16]
 800949a:	463d      	mov	r5, r7
 800949c:	e7d3      	b.n	8009446 <_svfiprintf_r+0x92>
 800949e:	9a03      	ldr	r2, [sp, #12]
 80094a0:	1d11      	adds	r1, r2, #4
 80094a2:	6812      	ldr	r2, [r2, #0]
 80094a4:	9103      	str	r1, [sp, #12]
 80094a6:	2a00      	cmp	r2, #0
 80094a8:	db01      	blt.n	80094ae <_svfiprintf_r+0xfa>
 80094aa:	9207      	str	r2, [sp, #28]
 80094ac:	e004      	b.n	80094b8 <_svfiprintf_r+0x104>
 80094ae:	4252      	negs	r2, r2
 80094b0:	f043 0302 	orr.w	r3, r3, #2
 80094b4:	9207      	str	r2, [sp, #28]
 80094b6:	9304      	str	r3, [sp, #16]
 80094b8:	783b      	ldrb	r3, [r7, #0]
 80094ba:	2b2e      	cmp	r3, #46	; 0x2e
 80094bc:	d10c      	bne.n	80094d8 <_svfiprintf_r+0x124>
 80094be:	787b      	ldrb	r3, [r7, #1]
 80094c0:	2b2a      	cmp	r3, #42	; 0x2a
 80094c2:	d133      	bne.n	800952c <_svfiprintf_r+0x178>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	1d1a      	adds	r2, r3, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	9203      	str	r2, [sp, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	bfb8      	it	lt
 80094d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80094d4:	3702      	adds	r7, #2
 80094d6:	9305      	str	r3, [sp, #20]
 80094d8:	4d2e      	ldr	r5, [pc, #184]	; (8009594 <_svfiprintf_r+0x1e0>)
 80094da:	7839      	ldrb	r1, [r7, #0]
 80094dc:	2203      	movs	r2, #3
 80094de:	4628      	mov	r0, r5
 80094e0:	f7f6 ff06 	bl	80002f0 <memchr>
 80094e4:	b138      	cbz	r0, 80094f6 <_svfiprintf_r+0x142>
 80094e6:	2340      	movs	r3, #64	; 0x40
 80094e8:	1b40      	subs	r0, r0, r5
 80094ea:	fa03 f000 	lsl.w	r0, r3, r0
 80094ee:	9b04      	ldr	r3, [sp, #16]
 80094f0:	4303      	orrs	r3, r0
 80094f2:	3701      	adds	r7, #1
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	7839      	ldrb	r1, [r7, #0]
 80094f8:	4827      	ldr	r0, [pc, #156]	; (8009598 <_svfiprintf_r+0x1e4>)
 80094fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094fe:	2206      	movs	r2, #6
 8009500:	1c7e      	adds	r6, r7, #1
 8009502:	f7f6 fef5 	bl	80002f0 <memchr>
 8009506:	2800      	cmp	r0, #0
 8009508:	d038      	beq.n	800957c <_svfiprintf_r+0x1c8>
 800950a:	4b24      	ldr	r3, [pc, #144]	; (800959c <_svfiprintf_r+0x1e8>)
 800950c:	bb13      	cbnz	r3, 8009554 <_svfiprintf_r+0x1a0>
 800950e:	9b03      	ldr	r3, [sp, #12]
 8009510:	3307      	adds	r3, #7
 8009512:	f023 0307 	bic.w	r3, r3, #7
 8009516:	3308      	adds	r3, #8
 8009518:	9303      	str	r3, [sp, #12]
 800951a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951c:	444b      	add	r3, r9
 800951e:	9309      	str	r3, [sp, #36]	; 0x24
 8009520:	e76d      	b.n	80093fe <_svfiprintf_r+0x4a>
 8009522:	fb05 3202 	mla	r2, r5, r2, r3
 8009526:	2001      	movs	r0, #1
 8009528:	460f      	mov	r7, r1
 800952a:	e7a6      	b.n	800947a <_svfiprintf_r+0xc6>
 800952c:	2300      	movs	r3, #0
 800952e:	3701      	adds	r7, #1
 8009530:	9305      	str	r3, [sp, #20]
 8009532:	4619      	mov	r1, r3
 8009534:	250a      	movs	r5, #10
 8009536:	4638      	mov	r0, r7
 8009538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800953c:	3a30      	subs	r2, #48	; 0x30
 800953e:	2a09      	cmp	r2, #9
 8009540:	d903      	bls.n	800954a <_svfiprintf_r+0x196>
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0c8      	beq.n	80094d8 <_svfiprintf_r+0x124>
 8009546:	9105      	str	r1, [sp, #20]
 8009548:	e7c6      	b.n	80094d8 <_svfiprintf_r+0x124>
 800954a:	fb05 2101 	mla	r1, r5, r1, r2
 800954e:	2301      	movs	r3, #1
 8009550:	4607      	mov	r7, r0
 8009552:	e7f0      	b.n	8009536 <_svfiprintf_r+0x182>
 8009554:	ab03      	add	r3, sp, #12
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	4622      	mov	r2, r4
 800955a:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <_svfiprintf_r+0x1ec>)
 800955c:	a904      	add	r1, sp, #16
 800955e:	4640      	mov	r0, r8
 8009560:	f7fe fa0e 	bl	8007980 <_printf_float>
 8009564:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009568:	4681      	mov	r9, r0
 800956a:	d1d6      	bne.n	800951a <_svfiprintf_r+0x166>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	065b      	lsls	r3, r3, #25
 8009570:	f53f af35 	bmi.w	80093de <_svfiprintf_r+0x2a>
 8009574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009576:	b01d      	add	sp, #116	; 0x74
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957c:	ab03      	add	r3, sp, #12
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	4622      	mov	r2, r4
 8009582:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <_svfiprintf_r+0x1ec>)
 8009584:	a904      	add	r1, sp, #16
 8009586:	4640      	mov	r0, r8
 8009588:	f7fe fc9c 	bl	8007ec4 <_printf_i>
 800958c:	e7ea      	b.n	8009564 <_svfiprintf_r+0x1b0>
 800958e:	bf00      	nop
 8009590:	08009cd4 	.word	0x08009cd4
 8009594:	08009cda 	.word	0x08009cda
 8009598:	08009cde 	.word	0x08009cde
 800959c:	08007981 	.word	0x08007981
 80095a0:	08009301 	.word	0x08009301

080095a4 <__ascii_mbtowc>:
 80095a4:	b082      	sub	sp, #8
 80095a6:	b901      	cbnz	r1, 80095aa <__ascii_mbtowc+0x6>
 80095a8:	a901      	add	r1, sp, #4
 80095aa:	b142      	cbz	r2, 80095be <__ascii_mbtowc+0x1a>
 80095ac:	b14b      	cbz	r3, 80095c2 <__ascii_mbtowc+0x1e>
 80095ae:	7813      	ldrb	r3, [r2, #0]
 80095b0:	600b      	str	r3, [r1, #0]
 80095b2:	7812      	ldrb	r2, [r2, #0]
 80095b4:	1c10      	adds	r0, r2, #0
 80095b6:	bf18      	it	ne
 80095b8:	2001      	movne	r0, #1
 80095ba:	b002      	add	sp, #8
 80095bc:	4770      	bx	lr
 80095be:	4610      	mov	r0, r2
 80095c0:	e7fb      	b.n	80095ba <__ascii_mbtowc+0x16>
 80095c2:	f06f 0001 	mvn.w	r0, #1
 80095c6:	e7f8      	b.n	80095ba <__ascii_mbtowc+0x16>

080095c8 <memmove>:
 80095c8:	4288      	cmp	r0, r1
 80095ca:	b510      	push	{r4, lr}
 80095cc:	eb01 0302 	add.w	r3, r1, r2
 80095d0:	d807      	bhi.n	80095e2 <memmove+0x1a>
 80095d2:	1e42      	subs	r2, r0, #1
 80095d4:	4299      	cmp	r1, r3
 80095d6:	d00a      	beq.n	80095ee <memmove+0x26>
 80095d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80095e0:	e7f8      	b.n	80095d4 <memmove+0xc>
 80095e2:	4283      	cmp	r3, r0
 80095e4:	d9f5      	bls.n	80095d2 <memmove+0xa>
 80095e6:	1881      	adds	r1, r0, r2
 80095e8:	1ad2      	subs	r2, r2, r3
 80095ea:	42d3      	cmn	r3, r2
 80095ec:	d100      	bne.n	80095f0 <memmove+0x28>
 80095ee:	bd10      	pop	{r4, pc}
 80095f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80095f8:	e7f7      	b.n	80095ea <memmove+0x22>

080095fa <_realloc_r>:
 80095fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fc:	4607      	mov	r7, r0
 80095fe:	4614      	mov	r4, r2
 8009600:	460e      	mov	r6, r1
 8009602:	b921      	cbnz	r1, 800960e <_realloc_r+0x14>
 8009604:	4611      	mov	r1, r2
 8009606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800960a:	f7fe b8d7 	b.w	80077bc <_malloc_r>
 800960e:	b922      	cbnz	r2, 800961a <_realloc_r+0x20>
 8009610:	f7fe f886 	bl	8007720 <_free_r>
 8009614:	4625      	mov	r5, r4
 8009616:	4628      	mov	r0, r5
 8009618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800961a:	f000 f821 	bl	8009660 <_malloc_usable_size_r>
 800961e:	42a0      	cmp	r0, r4
 8009620:	d20f      	bcs.n	8009642 <_realloc_r+0x48>
 8009622:	4621      	mov	r1, r4
 8009624:	4638      	mov	r0, r7
 8009626:	f7fe f8c9 	bl	80077bc <_malloc_r>
 800962a:	4605      	mov	r5, r0
 800962c:	2800      	cmp	r0, #0
 800962e:	d0f2      	beq.n	8009616 <_realloc_r+0x1c>
 8009630:	4631      	mov	r1, r6
 8009632:	4622      	mov	r2, r4
 8009634:	f7ff fb6e 	bl	8008d14 <memcpy>
 8009638:	4631      	mov	r1, r6
 800963a:	4638      	mov	r0, r7
 800963c:	f7fe f870 	bl	8007720 <_free_r>
 8009640:	e7e9      	b.n	8009616 <_realloc_r+0x1c>
 8009642:	4635      	mov	r5, r6
 8009644:	e7e7      	b.n	8009616 <_realloc_r+0x1c>

08009646 <__ascii_wctomb>:
 8009646:	b149      	cbz	r1, 800965c <__ascii_wctomb+0x16>
 8009648:	2aff      	cmp	r2, #255	; 0xff
 800964a:	bf85      	ittet	hi
 800964c:	238a      	movhi	r3, #138	; 0x8a
 800964e:	6003      	strhi	r3, [r0, #0]
 8009650:	700a      	strbls	r2, [r1, #0]
 8009652:	f04f 30ff 	movhi.w	r0, #4294967295
 8009656:	bf98      	it	ls
 8009658:	2001      	movls	r0, #1
 800965a:	4770      	bx	lr
 800965c:	4608      	mov	r0, r1
 800965e:	4770      	bx	lr

08009660 <_malloc_usable_size_r>:
 8009660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009664:	1f18      	subs	r0, r3, #4
 8009666:	2b00      	cmp	r3, #0
 8009668:	bfbc      	itt	lt
 800966a:	580b      	ldrlt	r3, [r1, r0]
 800966c:	18c0      	addlt	r0, r0, r3
 800966e:	4770      	bx	lr

08009670 <atan2f>:
 8009670:	f000 b852 	b.w	8009718 <__ieee754_atan2f>
 8009674:	0000      	movs	r0, r0
	...

08009678 <sqrtf>:
 8009678:	b500      	push	{lr}
 800967a:	ed2d 8b02 	vpush	{d8}
 800967e:	b08b      	sub	sp, #44	; 0x2c
 8009680:	eeb0 8a40 	vmov.f32	s16, s0
 8009684:	f000 f8f2 	bl	800986c <__ieee754_sqrtf>
 8009688:	4b21      	ldr	r3, [pc, #132]	; (8009710 <sqrtf+0x98>)
 800968a:	f993 3000 	ldrsb.w	r3, [r3]
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	d028      	beq.n	80096e4 <sqrtf+0x6c>
 8009692:	eeb4 8a48 	vcmp.f32	s16, s16
 8009696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969a:	d623      	bvs.n	80096e4 <sqrtf+0x6c>
 800969c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80096a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a4:	d51e      	bpl.n	80096e4 <sqrtf+0x6c>
 80096a6:	2201      	movs	r2, #1
 80096a8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80096ac:	9200      	str	r2, [sp, #0]
 80096ae:	4a19      	ldr	r2, [pc, #100]	; (8009714 <sqrtf+0x9c>)
 80096b0:	9201      	str	r2, [sp, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	9208      	str	r2, [sp, #32]
 80096b6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80096ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80096be:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8009708 <sqrtf+0x90>
 80096c2:	b9a3      	cbnz	r3, 80096ee <sqrtf+0x76>
 80096c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096c8:	4668      	mov	r0, sp
 80096ca:	f000 f8d2 	bl	8009872 <matherr>
 80096ce:	b1a0      	cbz	r0, 80096fa <sqrtf+0x82>
 80096d0:	9b08      	ldr	r3, [sp, #32]
 80096d2:	b11b      	cbz	r3, 80096dc <sqrtf+0x64>
 80096d4:	f7fd ffe2 	bl	800769c <__errno>
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	6003      	str	r3, [r0, #0]
 80096dc:	ed9d 0b06 	vldr	d0, [sp, #24]
 80096e0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80096e4:	b00b      	add	sp, #44	; 0x2c
 80096e6:	ecbd 8b02 	vpop	{d8}
 80096ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80096f4:	ed8d 6b06 	vstr	d6, [sp, #24]
 80096f8:	d1e6      	bne.n	80096c8 <sqrtf+0x50>
 80096fa:	f7fd ffcf 	bl	800769c <__errno>
 80096fe:	2321      	movs	r3, #33	; 0x21
 8009700:	6003      	str	r3, [r0, #0]
 8009702:	e7e5      	b.n	80096d0 <sqrtf+0x58>
 8009704:	f3af 8000 	nop.w
	...
 8009710:	240001e0 	.word	0x240001e0
 8009714:	08009df0 	.word	0x08009df0

08009718 <__ieee754_atan2f>:
 8009718:	ee10 2a90 	vmov	r2, s1
 800971c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009720:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009724:	b510      	push	{r4, lr}
 8009726:	eef0 7a40 	vmov.f32	s15, s0
 800972a:	dc06      	bgt.n	800973a <__ieee754_atan2f+0x22>
 800972c:	ee10 0a10 	vmov	r0, s0
 8009730:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009734:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009738:	dd04      	ble.n	8009744 <__ieee754_atan2f+0x2c>
 800973a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800973e:	eeb0 0a67 	vmov.f32	s0, s15
 8009742:	bd10      	pop	{r4, pc}
 8009744:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009748:	d103      	bne.n	8009752 <__ieee754_atan2f+0x3a>
 800974a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800974e:	f000 b893 	b.w	8009878 <atanf>
 8009752:	1794      	asrs	r4, r2, #30
 8009754:	f004 0402 	and.w	r4, r4, #2
 8009758:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800975c:	b93b      	cbnz	r3, 800976e <__ieee754_atan2f+0x56>
 800975e:	2c02      	cmp	r4, #2
 8009760:	d06b      	beq.n	800983a <__ieee754_atan2f+0x122>
 8009762:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8009840 <__ieee754_atan2f+0x128>
 8009766:	2c03      	cmp	r4, #3
 8009768:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800976c:	e7e7      	b.n	800973e <__ieee754_atan2f+0x26>
 800976e:	b939      	cbnz	r1, 8009780 <__ieee754_atan2f+0x68>
 8009770:	eddf 7a34 	vldr	s15, [pc, #208]	; 8009844 <__ieee754_atan2f+0x12c>
 8009774:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009848 <__ieee754_atan2f+0x130>
 8009778:	2800      	cmp	r0, #0
 800977a:	fe67 7a87 	vselge.f32	s15, s15, s14
 800977e:	e7de      	b.n	800973e <__ieee754_atan2f+0x26>
 8009780:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009784:	d121      	bne.n	80097ca <__ieee754_atan2f+0xb2>
 8009786:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800978a:	d111      	bne.n	80097b0 <__ieee754_atan2f+0x98>
 800978c:	2c02      	cmp	r4, #2
 800978e:	d009      	beq.n	80097a4 <__ieee754_atan2f+0x8c>
 8009790:	2c03      	cmp	r4, #3
 8009792:	d00a      	beq.n	80097aa <__ieee754_atan2f+0x92>
 8009794:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800984c <__ieee754_atan2f+0x134>
 8009798:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8009850 <__ieee754_atan2f+0x138>
 800979c:	2c01      	cmp	r4, #1
 800979e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 80097a2:	e7cc      	b.n	800973e <__ieee754_atan2f+0x26>
 80097a4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009854 <__ieee754_atan2f+0x13c>
 80097a8:	e7c9      	b.n	800973e <__ieee754_atan2f+0x26>
 80097aa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009858 <__ieee754_atan2f+0x140>
 80097ae:	e7c6      	b.n	800973e <__ieee754_atan2f+0x26>
 80097b0:	2c02      	cmp	r4, #2
 80097b2:	d042      	beq.n	800983a <__ieee754_atan2f+0x122>
 80097b4:	2c03      	cmp	r4, #3
 80097b6:	d005      	beq.n	80097c4 <__ieee754_atan2f+0xac>
 80097b8:	2c01      	cmp	r4, #1
 80097ba:	eddf 7a28 	vldr	s15, [pc, #160]	; 800985c <__ieee754_atan2f+0x144>
 80097be:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009860 <__ieee754_atan2f+0x148>
 80097c2:	e7ec      	b.n	800979e <__ieee754_atan2f+0x86>
 80097c4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8009840 <__ieee754_atan2f+0x128>
 80097c8:	e7b9      	b.n	800973e <__ieee754_atan2f+0x26>
 80097ca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80097ce:	d0cf      	beq.n	8009770 <__ieee754_atan2f+0x58>
 80097d0:	1a5b      	subs	r3, r3, r1
 80097d2:	15db      	asrs	r3, r3, #23
 80097d4:	2b3c      	cmp	r3, #60	; 0x3c
 80097d6:	dc1a      	bgt.n	800980e <__ieee754_atan2f+0xf6>
 80097d8:	2a00      	cmp	r2, #0
 80097da:	da01      	bge.n	80097e0 <__ieee754_atan2f+0xc8>
 80097dc:	333c      	adds	r3, #60	; 0x3c
 80097de:	db19      	blt.n	8009814 <__ieee754_atan2f+0xfc>
 80097e0:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80097e4:	f000 f91a 	bl	8009a1c <fabsf>
 80097e8:	f000 f846 	bl	8009878 <atanf>
 80097ec:	eef0 7a40 	vmov.f32	s15, s0
 80097f0:	2c01      	cmp	r4, #1
 80097f2:	d012      	beq.n	800981a <__ieee754_atan2f+0x102>
 80097f4:	2c02      	cmp	r4, #2
 80097f6:	d017      	beq.n	8009828 <__ieee754_atan2f+0x110>
 80097f8:	2c00      	cmp	r4, #0
 80097fa:	d0a0      	beq.n	800973e <__ieee754_atan2f+0x26>
 80097fc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009864 <__ieee754_atan2f+0x14c>
 8009800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009804:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009868 <__ieee754_atan2f+0x150>
 8009808:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800980c:	e797      	b.n	800973e <__ieee754_atan2f+0x26>
 800980e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009844 <__ieee754_atan2f+0x12c>
 8009812:	e7ed      	b.n	80097f0 <__ieee754_atan2f+0xd8>
 8009814:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009860 <__ieee754_atan2f+0x148>
 8009818:	e7ea      	b.n	80097f0 <__ieee754_atan2f+0xd8>
 800981a:	ee17 3a90 	vmov	r3, s15
 800981e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009822:	ee07 3a90 	vmov	s15, r3
 8009826:	e78a      	b.n	800973e <__ieee754_atan2f+0x26>
 8009828:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009864 <__ieee754_atan2f+0x14c>
 800982c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009830:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8009868 <__ieee754_atan2f+0x150>
 8009834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009838:	e781      	b.n	800973e <__ieee754_atan2f+0x26>
 800983a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009868 <__ieee754_atan2f+0x150>
 800983e:	e77e      	b.n	800973e <__ieee754_atan2f+0x26>
 8009840:	c0490fdb 	.word	0xc0490fdb
 8009844:	3fc90fdb 	.word	0x3fc90fdb
 8009848:	bfc90fdb 	.word	0xbfc90fdb
 800984c:	bf490fdb 	.word	0xbf490fdb
 8009850:	3f490fdb 	.word	0x3f490fdb
 8009854:	4016cbe4 	.word	0x4016cbe4
 8009858:	c016cbe4 	.word	0xc016cbe4
 800985c:	80000000 	.word	0x80000000
 8009860:	00000000 	.word	0x00000000
 8009864:	33bbbd2e 	.word	0x33bbbd2e
 8009868:	40490fdb 	.word	0x40490fdb

0800986c <__ieee754_sqrtf>:
 800986c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009870:	4770      	bx	lr

08009872 <matherr>:
 8009872:	2000      	movs	r0, #0
 8009874:	4770      	bx	lr
	...

08009878 <atanf>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	ee10 5a10 	vmov	r5, s0
 800987e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009882:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009886:	eef0 7a40 	vmov.f32	s15, s0
 800988a:	db0f      	blt.n	80098ac <atanf+0x34>
 800988c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009890:	dd04      	ble.n	800989c <atanf+0x24>
 8009892:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009896:	eeb0 0a67 	vmov.f32	s0, s15
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80099d0 <atanf+0x158>
 80098a0:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80099d4 <atanf+0x15c>
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	fe77 7a87 	vselgt.f32	s15, s15, s14
 80098aa:	e7f4      	b.n	8009896 <atanf+0x1e>
 80098ac:	4b4a      	ldr	r3, [pc, #296]	; (80099d8 <atanf+0x160>)
 80098ae:	429c      	cmp	r4, r3
 80098b0:	dc10      	bgt.n	80098d4 <atanf+0x5c>
 80098b2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80098b6:	da0a      	bge.n	80098ce <atanf+0x56>
 80098b8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80099dc <atanf+0x164>
 80098bc:	ee30 7a07 	vadd.f32	s14, s0, s14
 80098c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80098c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098cc:	dce3      	bgt.n	8009896 <atanf+0x1e>
 80098ce:	f04f 33ff 	mov.w	r3, #4294967295
 80098d2:	e013      	b.n	80098fc <atanf+0x84>
 80098d4:	f000 f8a2 	bl	8009a1c <fabsf>
 80098d8:	4b41      	ldr	r3, [pc, #260]	; (80099e0 <atanf+0x168>)
 80098da:	429c      	cmp	r4, r3
 80098dc:	dc4f      	bgt.n	800997e <atanf+0x106>
 80098de:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80098e2:	429c      	cmp	r4, r3
 80098e4:	dc41      	bgt.n	800996a <atanf+0xf2>
 80098e6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80098ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80098ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 80098f2:	2300      	movs	r3, #0
 80098f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80098f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009902:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80099e4 <atanf+0x16c>
 8009906:	eddf 5a38 	vldr	s11, [pc, #224]	; 80099e8 <atanf+0x170>
 800990a:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80099ec <atanf+0x174>
 800990e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009912:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009916:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80099f0 <atanf+0x178>
 800991a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800991e:	eddf 5a35 	vldr	s11, [pc, #212]	; 80099f4 <atanf+0x17c>
 8009922:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009926:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80099f8 <atanf+0x180>
 800992a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800992e:	eddf 5a33 	vldr	s11, [pc, #204]	; 80099fc <atanf+0x184>
 8009932:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009936:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009a00 <atanf+0x188>
 800993a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800993e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009a04 <atanf+0x18c>
 8009942:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009946:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009a08 <atanf+0x190>
 800994a:	eea7 5a26 	vfma.f32	s10, s14, s13
 800994e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009a0c <atanf+0x194>
 8009952:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009956:	ee27 7a26 	vmul.f32	s14, s14, s13
 800995a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800995e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009962:	d121      	bne.n	80099a8 <atanf+0x130>
 8009964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009968:	e795      	b.n	8009896 <atanf+0x1e>
 800996a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800996e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009972:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009976:	2301      	movs	r3, #1
 8009978:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800997c:	e7be      	b.n	80098fc <atanf+0x84>
 800997e:	4b24      	ldr	r3, [pc, #144]	; (8009a10 <atanf+0x198>)
 8009980:	429c      	cmp	r4, r3
 8009982:	dc0b      	bgt.n	800999c <atanf+0x124>
 8009984:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800998c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009990:	2302      	movs	r3, #2
 8009992:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800999a:	e7af      	b.n	80098fc <atanf+0x84>
 800999c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80099a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80099a4:	2303      	movs	r3, #3
 80099a6:	e7a9      	b.n	80098fc <atanf+0x84>
 80099a8:	4a1a      	ldr	r2, [pc, #104]	; (8009a14 <atanf+0x19c>)
 80099aa:	491b      	ldr	r1, [pc, #108]	; (8009a18 <atanf+0x1a0>)
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	441a      	add	r2, r3
 80099b0:	440b      	add	r3, r1
 80099b2:	edd3 6a00 	vldr	s13, [r3]
 80099b6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80099ba:	2d00      	cmp	r5, #0
 80099bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099c0:	ed92 7a00 	vldr	s14, [r2]
 80099c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099c8:	bfb8      	it	lt
 80099ca:	eef1 7a67 	vneglt.f32	s15, s15
 80099ce:	e762      	b.n	8009896 <atanf+0x1e>
 80099d0:	bfc90fdb 	.word	0xbfc90fdb
 80099d4:	3fc90fdb 	.word	0x3fc90fdb
 80099d8:	3edfffff 	.word	0x3edfffff
 80099dc:	7149f2ca 	.word	0x7149f2ca
 80099e0:	3f97ffff 	.word	0x3f97ffff
 80099e4:	3c8569d7 	.word	0x3c8569d7
 80099e8:	3d4bda59 	.word	0x3d4bda59
 80099ec:	bd6ef16b 	.word	0xbd6ef16b
 80099f0:	3d886b35 	.word	0x3d886b35
 80099f4:	3dba2e6e 	.word	0x3dba2e6e
 80099f8:	3e124925 	.word	0x3e124925
 80099fc:	3eaaaaab 	.word	0x3eaaaaab
 8009a00:	bd15a221 	.word	0xbd15a221
 8009a04:	bd9d8795 	.word	0xbd9d8795
 8009a08:	bde38e38 	.word	0xbde38e38
 8009a0c:	be4ccccd 	.word	0xbe4ccccd
 8009a10:	401bffff 	.word	0x401bffff
 8009a14:	08009df8 	.word	0x08009df8
 8009a18:	08009e08 	.word	0x08009e08

08009a1c <fabsf>:
 8009a1c:	ee10 3a10 	vmov	r3, s0
 8009a20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a24:	ee00 3a10 	vmov	s0, r3
 8009a28:	4770      	bx	lr
	...

08009a2c <_init>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	bf00      	nop
 8009a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a32:	bc08      	pop	{r3}
 8009a34:	469e      	mov	lr, r3
 8009a36:	4770      	bx	lr

08009a38 <_fini>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr
