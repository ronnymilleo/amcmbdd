
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007220  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  080074c0  080074c0  000174c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  08007850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000654c  200001e0  08007a30  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000672c  08007a30  0002672c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e85a  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004f63  00000000  00000000  0004ea68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00013a94  00000000  00000000  000539cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000011d8  00000000  00000000  00067460  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002820  00000000  00000000  00068638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003c259  00000000  00000000  0006ae58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00016a00  00000000  00000000  000a70b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00186204  00000000  00000000  000bdab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000e9  00000000  00000000  00243cb5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000046ec  00000000  00000000  00243da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e0 	.word	0x200001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080074a8 	.word	0x080074a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001e4 	.word	0x200001e4
 80002dc:	080074a8 	.word	0x080074a8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	491d      	ldr	r1, [pc, #116]	; (8000708 <SystemInit+0x78>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000692:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <SystemInit+0x7c>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <SystemInit+0x80>)
{
 8000698:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800069a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4d1d      	ldr	r5, [pc, #116]	; (8000714 <SystemInit+0x84>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a0:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a4:	4e1c      	ldr	r6, [pc, #112]	; (8000718 <SystemInit+0x88>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a6:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006aa:	690c      	ldr	r4, [r1, #16]
 80006ac:	f044 0404 	orr.w	r4, r4, #4
 80006b0:	610c      	str	r4, [r1, #16]
  RCC->CR |= RCC_CR_HSION;
 80006b2:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b4:	4919      	ldr	r1, [pc, #100]	; (800071c <SystemInit+0x8c>)
  RCC->CR |= RCC_CR_HSION;
 80006b6:	f044 0401 	orr.w	r4, r4, #1
 80006ba:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 80006bc:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	681c      	ldr	r4, [r3, #0]
 80006c0:	4020      	ands	r0, r4
 80006c2:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 80006c4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80006c6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80006c8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 80006d4:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 80006d6:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 80006d8:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80006e0:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80006e2:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 80006e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	626b      	str	r3, [r5, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ec:	6833      	ldr	r3, [r6, #0]
 80006ee:	4019      	ands	r1, r3
 80006f0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80006f4:	d202      	bcs.n	80006fc <SystemInit+0x6c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <SystemInit+0x90>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <SystemInit+0x78>)
 80006fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000702:	bc70      	pop	{r4, r5, r6}
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000704:	609a      	str	r2, [r3, #8]
}
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	58024400 	.word	0x58024400
 8000710:	eaf6ed7f 	.word	0xeaf6ed7f
 8000714:	580000c0 	.word	0x580000c0
 8000718:	5c001000 	.word	0x5c001000
 800071c:	ffff0000 	.word	0xffff0000
 8000720:	51008108 	.word	0x51008108

08000724 <inst_absolute>:

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
	int j = 0;
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <inst_absolute+0x2c>)
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	0053      	lsls	r3, r2, #1
 800072a:	b182      	cbz	r2, 800074e <inst_absolute+0x2a>
 800072c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000730:	edd0 7a01 	vldr	s15, [r0, #4]
 8000734:	3008      	adds	r0, #8
 8000736:	ed10 7a02 	vldr	s14, [r0, #-8]
 800073a:	ee67 7aa7 	vmul.f32	s15, s15, s15
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800073e:	4283      	cmp	r3, r0
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000740:	eee7 7a07 	vfma.f32	s15, s14, s14
 8000744:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8000748:	eca1 7a01 	vstmia	r1!, {s14}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800074c:	d1f0      	bne.n	8000730 <inst_absolute+0xc>
		j++;
	}
}
 800074e:	4770      	bx	lr
 8000750:	080074d0 	.word	0x080074d0

08000754 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
	int j = 0;
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <inst_phase+0x38>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b1bb      	cbz	r3, 800078a <inst_phase+0x36>
void inst_phase(float32_t in[], float32_t out[]){
 800075a:	b570      	push	{r4, r5, r6, lr}
 800075c:	005e      	lsls	r6, r3, #1
 800075e:	4604      	mov	r4, r0
 8000760:	460d      	mov	r5, r1
 8000762:	eb00 0686 	add.w	r6, r0, r6, lsl #2
		out[j] = atan2(in[i+1], in[i]);
 8000766:	ed94 1a00 	vldr	s2, [r4]
 800076a:	3408      	adds	r4, #8
 800076c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8000770:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 8000774:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000778:	f006 fcac 	bl	80070d4 <atan2>
 800077c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000780:	42a6      	cmp	r6, r4
		out[j] = atan2(in[i+1], in[i]);
 8000782:	eca5 0a01 	vstmia	r5!, {s0}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000786:	d1ee      	bne.n	8000766 <inst_phase+0x12>
		j++;
	}
}
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	4770      	bx	lr
 800078c:	080074d0 	.word	0x080074d0

08000790 <unwrap>:
	end
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
	float32_t alpha = pi;
	for(int i = 0; i < (frameSize - 1); i++){
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <unwrap+0x90>)
void unwrap(float32_t in[], float32_t out[]){
 8000792:	b4f0      	push	{r4, r5, r6, r7}
	for(int i = 0; i < (frameSize - 1); i++){
 8000794:	881f      	ldrh	r7, [r3, #0]
 8000796:	2f01      	cmp	r7, #1
 8000798:	d93f      	bls.n	800081a <unwrap+0x8a>
 800079a:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 800079e:	4602      	mov	r2, r0
 80007a0:	460d      	mov	r5, r1
	uint16_t k = 0;
 80007a2:	2400      	movs	r4, #0
 80007a4:	3e04      	subs	r6, #4
 80007a6:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8000824 <unwrap+0x94>
		out[i] = in[i] + 2*pi*k;
 80007aa:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8000828 <unwrap+0x98>
 80007ae:	ee25 7a85 	vmul.f32	s14, s11, s10
 80007b2:	edd2 7a00 	vldr	s15, [r2]
 80007b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007ba:	ece5 7a01 	vstmia	r5!, {s15}
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 80007be:	edd2 6a01 	vldr	s13, [r2, #4]
 80007c2:	ecb2 6a01 	vldmia	r2!, {s12}
 80007c6:	ee76 7ac6 	vsub.f32	s15, s13, s12
 80007ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ce:	ee17 3a90 	vmov	r3, s15
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bfb8      	it	lt
 80007d6:	425b      	neglt	r3, r3
 80007d8:	2b03      	cmp	r3, #3
 80007da:	dd0e      	ble.n	80007fa <unwrap+0x6a>
			if(in[i+1] < in[i]){
 80007dc:	eeb4 6ae6 	vcmpe.f32	s12, s13
				k++;
			} else {
				k--;
 80007e0:	1e63      	subs	r3, r4, #1
				k++;
 80007e2:	3401      	adds	r4, #1
			if(in[i+1] < in[i]){
 80007e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				k++;
 80007e8:	bfcc      	ite	gt
 80007ea:	b2a4      	uxthgt	r4, r4
				k--;
 80007ec:	b29c      	uxthle	r4, r3
 80007ee:	ee07 4a90 	vmov	s15, r4
 80007f2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80007f6:	ee25 7a85 	vmul.f32	s14, s11, s10
	for(int i = 0; i < (frameSize - 1); i++){
 80007fa:	4296      	cmp	r6, r2
 80007fc:	d1d7      	bne.n	80007ae <unwrap+0x1e>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 80007fe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000802:	443b      	add	r3, r7
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4418      	add	r0, r3
 8000808:	440b      	add	r3, r1
 800080a:	edd0 7a00 	vldr	s15, [r0]
 800080e:	ee37 7a87 	vadd.f32	s14, s15, s14
}
 8000812:	bcf0      	pop	{r4, r5, r6, r7}
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 8000814:	ed83 7a00 	vstr	s14, [r3]
}
 8000818:	4770      	bx	lr
	for(int i = 0; i < (frameSize - 1); i++){
 800081a:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8000824 <unwrap+0x94>
 800081e:	e7ee      	b.n	80007fe <unwrap+0x6e>
 8000820:	080074d0 	.word	0x080074d0
 8000824:	00000000 	.word	0x00000000
 8000828:	40c90fdb 	.word	0x40c90fdb

0800082c <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 800082c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float32_t *inst_phase, *unwrapped_phase;
	inst_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000830:	4b59      	ldr	r3, [pc, #356]	; (8000998 <inst_frequency+0x16c>)
void inst_frequency(float32_t in[], float32_t out[]){
 8000832:	4607      	mov	r7, r0
 8000834:	460e      	mov	r6, r1
	inst_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000836:	f8b3 8000 	ldrh.w	r8, [r3]
 800083a:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800083e:	4648      	mov	r0, r9
 8000840:	f004 fc88 	bl	8005154 <malloc>
 8000844:	4605      	mov	r5, r0
	unwrapped_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000846:	4648      	mov	r0, r9
 8000848:	f004 fc84 	bl	8005154 <malloc>
 800084c:	4604      	mov	r4, r0
	int j = 0;
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800084e:	f1b8 0f00 	cmp.w	r8, #0
 8000852:	d016      	beq.n	8000882 <inst_frequency+0x56>
 8000854:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8000858:	46aa      	mov	sl, r5
 800085a:	eb07 0b8b 	add.w	fp, r7, fp, lsl #2
		inst_phase[j] = atan2(in[i], in[i+1]);
 800085e:	463b      	mov	r3, r7
 8000860:	ed97 1a01 	vldr	s2, [r7, #4]
 8000864:	3708      	adds	r7, #8
 8000866:	ed93 0a00 	vldr	s0, [r3]
 800086a:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 800086e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000872:	f006 fc2f 	bl	80070d4 <atan2>
 8000876:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800087a:	455f      	cmp	r7, fp
		inst_phase[j] = atan2(in[i], in[i+1]);
 800087c:	ecaa 0a01 	vstmia	sl!, {s0}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000880:	d1ed      	bne.n	800085e <inst_frequency+0x32>
 8000882:	f1a9 0004 	sub.w	r0, r9, #4
	for(int i = 0; i < (frameSize - 1); i++){
 8000886:	f108 31ff 	add.w	r1, r8, #4294967295
 800088a:	182b      	adds	r3, r5, r0
 800088c:	2900      	cmp	r1, #0
 800088e:	ed93 4a00 	vldr	s8, [r3]
 8000892:	dd70      	ble.n	8000976 <inst_frequency+0x14a>
 8000894:	462a      	mov	r2, r5
 8000896:	44a9      	add	r9, r5
 8000898:	46a4      	mov	ip, r4
 800089a:	46a6      	mov	lr, r4
 800089c:	ecb2 7a01 	vldmia	r2!, {s14}
	uint16_t k = 0;
 80008a0:	2700      	movs	r7, #0
 80008a2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800099c <inst_frequency+0x170>
		out[i] = in[i] + 2*pi*k;
 80008a6:	eddf 4a3e 	vldr	s9, [pc, #248]	; 80009a0 <inst_frequency+0x174>
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 80008aa:	ecf2 6a01 	vldmia	r2!, {s13}
		out[i] = in[i] + 2*pi*k;
 80008ae:	ee25 6aa4 	vmul.f32	s12, s11, s9
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 80008b2:	ee76 7ac7 	vsub.f32	s15, s13, s14
		out[i] = in[i] + 2*pi*k;
 80008b6:	ee37 5a06 	vadd.f32	s10, s14, s12
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 80008ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		out[i] = in[i] + 2*pi*k;
 80008be:	ecae 5a01 	vstmia	lr!, {s10}
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 80008c2:	ee17 3a90 	vmov	r3, s15
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	bfb8      	it	lt
 80008ca:	425b      	neglt	r3, r3
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	dd0e      	ble.n	80008ee <inst_frequency+0xc2>
			if(in[i+1] < in[i]){
 80008d0:	eeb4 7ae6 	vcmpe.f32	s14, s13
				k--;
 80008d4:	1e7b      	subs	r3, r7, #1
				k++;
 80008d6:	3701      	adds	r7, #1
			if(in[i+1] < in[i]){
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				k++;
 80008dc:	bfcc      	ite	gt
 80008de:	b2bf      	uxthgt	r7, r7
				k--;
 80008e0:	b29f      	uxthle	r7, r3
 80008e2:	ee07 7a90 	vmov	s15, r7
 80008e6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80008ea:	ee25 6aa4 	vmul.f32	s12, s11, s9
	for(int i = 0; i < (frameSize - 1); i++){
 80008ee:	4591      	cmp	r9, r2
 80008f0:	eeb0 7a66 	vmov.f32	s14, s13
 80008f4:	d1d9      	bne.n	80008aa <inst_frequency+0x7e>
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 80008f6:	ee34 4a06 	vadd.f32	s8, s8, s12
 80008fa:	1823      	adds	r3, r4, r0
 80008fc:	f1b8 0f03 	cmp.w	r8, #3
 8000900:	ed83 4a00 	vstr	s8, [r3]
 8000904:	d946      	bls.n	8000994 <inst_frequency+0x168>
 8000906:	f1a8 0804 	sub.w	r8, r8, #4
 800090a:	edd4 6a00 	vldr	s13, [r4]
 800090e:	4632      	mov	r2, r6
		j++;
	}
	unwrap(inst_phase, unwrapped_phase);
	for(int i = 0; i < frameSize - 1; i++){
 8000910:	2300      	movs	r3, #0
 8000912:	f028 0801 	bic.w	r8, r8, #1
		out[i] = (1/(2*pi))*(unwrapped_phase[i+1] - unwrapped_phase[i]);
 8000916:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80009a4 <inst_frequency+0x178>
 800091a:	f108 0802 	add.w	r8, r8, #2
 800091e:	eddc 7a01 	vldr	s15, [ip, #4]
 8000922:	f10c 0c08 	add.w	ip, ip, #8
 8000926:	3302      	adds	r3, #2
 8000928:	3208      	adds	r2, #8
 800092a:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800092e:	eddc 6a00 	vldr	s13, [ip]
 8000932:	4598      	cmp	r8, r3
 8000934:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000938:	ee27 7a06 	vmul.f32	s14, s14, s12
 800093c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000940:	ed02 7a02 	vstr	s14, [r2, #-8]
 8000944:	ed42 7a01 	vstr	s15, [r2, #-4]
 8000948:	d1e9      	bne.n	800091e <inst_frequency+0xf2>
 800094a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800094e:	eddf 6a15 	vldr	s13, [pc, #84]	; 80009a4 <inst_frequency+0x178>
 8000952:	eb04 070c 	add.w	r7, r4, ip
 8000956:	44b4      	add	ip, r6
 8000958:	463a      	mov	r2, r7
 800095a:	edd7 7a01 	vldr	s15, [r7, #4]
	for(int i = 0; i < frameSize - 1; i++){
 800095e:	3301      	adds	r3, #1
		out[i] = (1/(2*pi))*(unwrapped_phase[i+1] - unwrapped_phase[i]);
 8000960:	3704      	adds	r7, #4
 8000962:	ed92 7a00 	vldr	s14, [r2]
	for(int i = 0; i < frameSize - 1; i++){
 8000966:	4299      	cmp	r1, r3
		out[i] = (1/(2*pi))*(unwrapped_phase[i+1] - unwrapped_phase[i]);
 8000968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800096c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000970:	ecec 7a01 	vstmia	ip!, {s15}
	for(int i = 0; i < frameSize - 1; i++){
 8000974:	dcf0      	bgt.n	8000958 <inst_frequency+0x12c>
	}
	out[frameSize - 1] = (1/(2*pi))*(0 - unwrapped_phase[frameSize - 1]);
 8000976:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80009a8 <inst_frequency+0x17c>
 800097a:	4406      	add	r6, r0
	free(inst_phase);
 800097c:	4628      	mov	r0, r5
	out[frameSize - 1] = (1/(2*pi))*(0 - unwrapped_phase[frameSize - 1]);
 800097e:	ee24 4a27 	vmul.f32	s8, s8, s15
 8000982:	ed86 4a00 	vstr	s8, [r6]
	free(inst_phase);
 8000986:	f004 fbed 	bl	8005164 <free>
	free(unwrapped_phase);
 800098a:	4620      	mov	r0, r4
}
 800098c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	free(unwrapped_phase);
 8000990:	f004 bbe8 	b.w	8005164 <free>
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 8000994:	2300      	movs	r3, #0
 8000996:	e7d8      	b.n	800094a <inst_frequency+0x11e>
 8000998:	080074d0 	.word	0x080074d0
 800099c:	00000000 	.word	0x00000000
 80009a0:	40c90fdb 	.word	0x40c90fdb
 80009a4:	3e22f983 	.word	0x3e22f983
 80009a8:	be22f983 	.word	0xbe22f983

080009ac <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 80009ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	float32_t mean = 0, max = 0;
	uint32_t max_index = 0;
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80009b0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8000a90 <inst_centralized_normalized_absolute+0xe4>
void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 80009b4:	b085      	sub	sp, #20
	float32_t mean = 0, max = 0;
 80009b6:	2300      	movs	r3, #0
	uint32_t max_index = 0;
 80009b8:	2200      	movs	r2, #0
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80009ba:	f8b8 9000 	ldrh.w	r9, [r8]
void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 80009be:	4604      	mov	r4, r0
 80009c0:	460d      	mov	r5, r1
	float32_t mean = 0, max = 0;
 80009c2:	9301      	str	r3, [sp, #4]
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80009c4:	ea4f 0689 	mov.w	r6, r9, lsl #2
	float32_t mean = 0, max = 0;
 80009c8:	9302      	str	r3, [sp, #8]
	uint32_t max_index = 0;
 80009ca:	9203      	str	r2, [sp, #12]
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80009cc:	4630      	mov	r0, r6
 80009ce:	f004 fbc1 	bl	8005154 <malloc>
 80009d2:	4607      	mov	r7, r0
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 80009d4:	4630      	mov	r0, r6
 80009d6:	f004 fbbd 	bl	8005154 <malloc>
 80009da:	4606      	mov	r6, r0
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80009dc:	f1b9 0f00 	cmp.w	r9, #0
 80009e0:	d014      	beq.n	8000a0c <inst_centralized_normalized_absolute+0x60>
 80009e2:	ea4f 0249 	mov.w	r2, r9, lsl #1
 80009e6:	4620      	mov	r0, r4
 80009e8:	463b      	mov	r3, r7
 80009ea:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 80009ee:	edd0 7a01 	vldr	s15, [r0, #4]
 80009f2:	3008      	adds	r0, #8
 80009f4:	ed10 7a02 	vldr	s14, [r0, #-8]
 80009f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80009fc:	4282      	cmp	r2, r0
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 80009fe:	eee7 7a07 	vfma.f32	s15, s14, s14
 8000a02:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8000a06:	eca3 7a01 	vstmia	r3!, {s14}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a0a:	d1f0      	bne.n	80009ee <inst_centralized_normalized_absolute+0x42>
	inst_absolute(in, &absolute[0]);
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	ab03      	add	r3, sp, #12
 8000a10:	aa02      	add	r2, sp, #8
 8000a12:	4638      	mov	r0, r7
 8000a14:	f004 fb0e 	bl	8005034 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000a18:	f8b8 1000 	ldrh.w	r1, [r8]
 8000a1c:	b189      	cbz	r1, 8000a42 <inst_centralized_normalized_absolute+0x96>
 8000a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a22:	eddd 7a02 	vldr	s15, [sp, #8]
 8000a26:	463b      	mov	r3, r7
 8000a28:	4632      	mov	r2, r6
 8000a2a:	eb07 0081 	add.w	r0, r7, r1, lsl #2
 8000a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		normalized[a] = absolute[a] / max;
 8000a32:	ecf3 7a01 	vldmia	r3!, {s15}
	for(int a = 0; a < frameSize; a++){
 8000a36:	4298      	cmp	r0, r3
		normalized[a] = absolute[a] / max;
 8000a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a3c:	ece2 7a01 	vstmia	r2!, {s15}
	for(int a = 0; a < frameSize; a++){
 8000a40:	d1f7      	bne.n	8000a32 <inst_centralized_normalized_absolute+0x86>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000a42:	aa01      	add	r2, sp, #4
 8000a44:	4630      	mov	r0, r6
 8000a46:	f004 fabf 	bl	8004fc8 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000a4a:	f8b8 2000 	ldrh.w	r2, [r8]
 8000a4e:	b1aa      	cbz	r2, 8000a7c <inst_centralized_normalized_absolute+0xd0>
 8000a50:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000a54:	eddd 7a01 	vldr	s15, [sp, #4]
		out[i] = normalized[i] / mean - 1;
 8000a58:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8000a5c:	4629      	mov	r1, r5
 8000a5e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8000a62:	4633      	mov	r3, r6
 8000a64:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8000a68:	ecf3 7a01 	vldmia	r3!, {s15}
	for(int i = 0; i < frameSize; i++){
 8000a6c:	4293      	cmp	r3, r2
		out[i] = normalized[i] / mean - 1;
 8000a6e:	eeb0 6a66 	vmov.f32	s12, s13
 8000a72:	eea7 6a87 	vfma.f32	s12, s15, s14
 8000a76:	eca1 6a01 	vstmia	r1!, {s12}
	for(int i = 0; i < frameSize; i++){
 8000a7a:	d1f5      	bne.n	8000a68 <inst_centralized_normalized_absolute+0xbc>
	}
	free(absolute);
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	f004 fb71 	bl	8005164 <free>
	free(normalized);
 8000a82:	4630      	mov	r0, r6
}
 8000a84:	b005      	add	sp, #20
 8000a86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	free(normalized);
 8000a8a:	f004 bb6b 	b.w	8005164 <free>
 8000a8e:	bf00      	nop
 8000a90:	080074d0 	.word	0x080074d0

08000a94 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <MX_GPIO_Init+0xe4>)
{
 8000a98:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	2400      	movs	r4, #0
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a9e:	4f37      	ldr	r7, [pc, #220]	; (8000b7c <MX_GPIO_Init+0xe8>)
 8000aa0:	f244 0101 	movw	r1, #16385	; 0x4001
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aa6:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	9407      	str	r4, [sp, #28]
 8000aaa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aac:	4e34      	ldr	r6, [pc, #208]	; (8000b80 <MX_GPIO_Init+0xec>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000ab6:	f040 0004 	orr.w	r0, r0, #4
 8000aba:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000abe:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000ac2:	f000 0004 	and.w	r0, r0, #4
 8000ac6:	9001      	str	r0, [sp, #4]
 8000ac8:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000ace:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8000ad2:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000ad6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000ada:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000ade:	9002      	str	r0, [sp, #8]
 8000ae0:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000ae6:	f040 0002 	orr.w	r0, r0, #2
 8000aea:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000aee:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000af2:	f000 0002 	and.w	r0, r0, #2
 8000af6:	9003      	str	r0, [sp, #12]
 8000af8:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000afe:	f040 0008 	orr.w	r0, r0, #8
 8000b02:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000b06:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b0a:	f000 0008 	and.w	r0, r0, #8
 8000b0e:	9004      	str	r0, [sp, #16]
 8000b10:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b16:	4328      	orrs	r0, r5
 8000b18:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000b1c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b20:	4028      	ands	r0, r5
 8000b22:	9005      	str	r0, [sp, #20]
 8000b24:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b26:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b2a:	f040 0010 	orr.w	r0, r0, #16
 8000b2e:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b32:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	9306      	str	r3, [sp, #24]
 8000b3e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b40:	f000 ff68 	bl	8001a14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b44:	4622      	mov	r2, r4
 8000b46:	4630      	mov	r0, r6
 8000b48:	2102      	movs	r1, #2
 8000b4a:	f000 ff63 	bl	8001a14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b4e:	f244 0301 	movw	r3, #16385	; 0x4001
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	4638      	mov	r0, r7
 8000b54:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f000 fe35 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b62:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b64:	a907      	add	r1, sp, #28
 8000b66:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	e9cd 5408 	strd	r5, r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f000 fe2c 	bl	80017cc <HAL_GPIO_Init>

}
 8000b74:	b00d      	add	sp, #52	; 0x34
 8000b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	58020400 	.word	0x58020400
 8000b80:	58021000 	.word	0x58021000

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b88:	224c      	movs	r2, #76	; 0x4c
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	a80a      	add	r0, sp, #40	; 0x28
 8000b8e:	f004 fafc 	bl	800518a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b92:	2220      	movs	r2, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	a802      	add	r0, sp, #8
 8000b98:	f004 faf7 	bl	800518a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	22bc      	movs	r2, #188	; 0xbc
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	a81d      	add	r0, sp, #116	; 0x74
 8000ba2:	f004 faf2 	bl	800518a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f000 fffc 	bl	8001ba4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <SystemClock_Config+0xcc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4928      	ldr	r1, [pc, #160]	; (8000c54 <SystemClock_Config+0xd0>)
 8000bb2:	9201      	str	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bb4:	461a      	mov	r2, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bb6:	6998      	ldr	r0, [r3, #24]
 8000bb8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000bbc:	6198      	str	r0, [r3, #24]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	62cb      	str	r3, [r1, #44]	; 0x2c
 8000bce:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd8:	6993      	ldr	r3, [r2, #24]
 8000bda:	049b      	lsls	r3, r3, #18
 8000bdc:	d5fc      	bpl.n	8000bd8 <SystemClock_Config+0x54>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000bde:	2122      	movs	r1, #34	; 0x22
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be0:	2440      	movs	r4, #64	; 0x40
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be2:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000be4:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be6:	2500      	movs	r5, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000be8:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bea:	2704      	movs	r7, #4
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bec:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bee:	263c      	movs	r6, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bf2:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bf4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bf8:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bfa:	911a      	str	r1, [sp, #104]	; 0x68
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfc:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bfe:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c00:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c04:	e9cd 7615 	strd	r7, r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c08:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f001 f812 	bl	8001c34 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c10:	2208      	movs	r2, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	2603      	movs	r6, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	eb0d 0002 	add.w	r0, sp, r2
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c22:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c24:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c28:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c2a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c2c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	e9cd c602 	strd	ip, r6, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c32:	f001 fb83 	bl	800233c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <SystemClock_Config+0xd4>)
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c38:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3c:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000c3e:	921d      	str	r2, [sp, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c40:	933e      	str	r3, [sp, #248]	; 0xf8
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8000c42:	963a      	str	r6, [sp, #232]	; 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c44:	f001 ffa4 	bl	8002b90 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000c48:	f000 ffec 	bl	8001c24 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000c4c:	b04d      	add	sp, #308	; 0x134
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	58024800 	.word	0x58024800
 8000c54:	58000400 	.word	0x58000400
 8000c58:	00040002 	.word	0x00040002

08000c5c <byte2float>:
void resetDataBuffer(uint8_t *dataBuffer){
	for(uint16_t i = 1; i < 8192; i++){
		dataBuffer[i] = 0;
	}
}
void byte2float(uint8_t *rxDataBuffer, float32_t *processedData, uint16_t arraySize){
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	4616      	mov	r6, r2
 8000c60:	4604      	mov	r4, r0
 8000c62:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6a:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <byte2float+0x4c>)
 8000c6c:	f000 fed2 	bl	8001a14 <HAL_GPIO_WritePin>
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000c70:	b146      	cbz	r6, 8000c84 <byte2float+0x28>
 8000c72:	00b0      	lsls	r0, r6, #2
 8000c74:	2300      	movs	r3, #0
		memcpy(&processedData[i / 4], &rxDataBuffer[i], 4);
 8000c76:	58e1      	ldr	r1, [r4, r3]
 8000c78:	109a      	asrs	r2, r3, #2
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000c7a:	3304      	adds	r3, #4
		memcpy(&processedData[i / 4], &rxDataBuffer[i], 4);
 8000c7c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000c80:	4283      	cmp	r3, r0
 8000c82:	dbf8      	blt.n	8000c76 <byte2float+0x1a>
	}
	processed = 1;
 8000c84:	4909      	ldr	r1, [pc, #36]	; (8000cac <byte2float+0x50>)
 8000c86:	2301      	movs	r3, #1
	received = 1;
 8000c88:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <byte2float+0x54>)
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 8000c8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	processed = 1;
 8000c8e:	700b      	strb	r3, [r1, #0]
	received = 1;
 8000c90:	7013      	strb	r3, [r2, #0]
	HAL_Delay(500);
 8000c92:	f000 fc45 	bl	8001520 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <byte2float+0x4c>)
}
 8000c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000ca2:	f000 beb7 	b.w	8001a14 <HAL_GPIO_WritePin>
 8000ca6:	bf00      	nop
 8000ca8:	58020400 	.word	0x58020400
 8000cac:	200001fd 	.word	0x200001fd
 8000cb0:	20002200 	.word	0x20002200

08000cb4 <float2byte>:
void float2byte(uint8_t *txDataBuffer, float *processedData, uint16_t arraySize){
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	4616      	mov	r6, r2
 8000cb8:	4604      	mov	r4, r0
 8000cba:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <float2byte+0x4c>)
 8000cc4:	f000 fea6 	bl	8001a14 <HAL_GPIO_WritePin>
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000cc8:	b146      	cbz	r6, 8000cdc <float2byte+0x28>
 8000cca:	00b1      	lsls	r1, r6, #2
 8000ccc:	2300      	movs	r3, #0
		memcpy(&txDataBuffer[i], &processedData[i / 4], 4);
 8000cce:	109a      	asrs	r2, r3, #2
 8000cd0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8000cd4:	50e2      	str	r2, [r4, r3]
	for(int i = 0; i < arraySize*4; i = i + 4){
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	dbf8      	blt.n	8000cce <float2byte+0x1a>
	}
	processed = 1;
 8000cdc:	4909      	ldr	r1, [pc, #36]	; (8000d04 <float2byte+0x50>)
 8000cde:	2301      	movs	r3, #1
	received = 1;
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <float2byte+0x54>)
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 8000ce2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	processed = 1;
 8000ce6:	700b      	strb	r3, [r1, #0]
	received = 1;
 8000ce8:	7013      	strb	r3, [r2, #0]
	HAL_Delay(500);
 8000cea:	f000 fc19 	bl	8001520 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <float2byte+0x4c>)
}
 8000cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000cfa:	f000 be8b 	b.w	8001a14 <HAL_GPIO_WritePin>
 8000cfe:	bf00      	nop
 8000d00:	58020400 	.word	0x58020400
 8000d04:	200001fd 	.word	0x200001fd
 8000d08:	20002200 	.word	0x20002200

08000d0c <main>:
{
 8000d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0e:	f5ad 4da0 	sub.w	sp, sp, #20480	; 0x5000
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d16:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <main+0x5c>)
{
 8000d18:	b083      	sub	sp, #12
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d1a:	e001      	b.n	8000d20 <main+0x14>
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	d002      	beq.n	8000d26 <main+0x1a>
 8000d20:	6811      	ldr	r1, [r2, #0]
 8000d22:	0409      	lsls	r1, r1, #16
 8000d24:	d4fa      	bmi.n	8000d1c <main+0x10>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d26:	4c10      	ldr	r4, [pc, #64]	; (8000d68 <main+0x5c>)
  HAL_Init();
 8000d28:	f000 fbb6 	bl	8001498 <HAL_Init>
  SystemClock_Config();
 8000d2c:	f7ff ff2a 	bl	8000b84 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d30:	f245 0108 	movw	r1, #20488	; 0x5008
 8000d34:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d38:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <main+0x60>)
 8000d3c:	4469      	add	r1, sp
 8000d3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d42:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d46:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	508b      	str	r3, [r1, r2]
 8000d50:	460b      	mov	r3, r1
 8000d52:	589b      	ldr	r3, [r3, r2]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d54:	f000 fe62 	bl	8001a1c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	f000 fe6c 	bl	8001a38 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	e006      	b.n	8000d74 <main+0x68>
 8000d66:	bf00      	nop
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	ffffaffc 	.word	0xffffaffc
 8000d70:	3b01      	subs	r3, #1
 8000d72:	d002      	beq.n	8000d7a <main+0x6e>
 8000d74:	6822      	ldr	r2, [r4, #0]
 8000d76:	0412      	lsls	r2, r2, #16
 8000d78:	d5fa      	bpl.n	8000d70 <main+0x64>
  while (UartReady != SET)
 8000d7a:	4db8      	ldr	r5, [pc, #736]	; (800105c <main+0x350>)
  MX_GPIO_Init();
 8000d7c:	f7ff fe8a 	bl	8000a94 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d80:	f000 fa5c 	bl	800123c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d84:	f000 fad4 	bl	8001330 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000d88:	f000 fa0a 	bl	80011a0 <MX_TIM2_Init>
  if(HAL_UART_Receive_IT(&huart3, &rxDataBuffer[0], bufferSize) != HAL_OK)
 8000d8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d90:	49b3      	ldr	r1, [pc, #716]	; (8001060 <main+0x354>)
 8000d92:	48b4      	ldr	r0, [pc, #720]	; (8001064 <main+0x358>)
 8000d94:	f003 f81e 	bl	8003dd4 <HAL_UART_Receive_IT>
  while (UartReady != SET)
 8000d98:	782b      	ldrb	r3, [r5, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d024      	beq.n	8000de8 <main+0xdc>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000d9e:	4cb2      	ldr	r4, [pc, #712]	; (8001068 <main+0x35c>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	4620      	mov	r0, r4
 8000da4:	4611      	mov	r1, r2
 8000da6:	f000 fe35 	bl	8001a14 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f000 fbb8 	bl	8001520 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	4620      	mov	r0, r4
 8000db6:	f000 fe2d 	bl	8001a14 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000dba:	2064      	movs	r0, #100	; 0x64
 8000dbc:	f000 fbb0 	bl	8001520 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	f000 fe25 	bl	8001a14 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f000 fba8 	bl	8001520 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f000 fe1d 	bl	8001a14 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dde:	f000 fb9f 	bl	8001520 <HAL_Delay>
  while (UartReady != SET)
 8000de2:	782b      	ldrb	r3, [r5, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d1db      	bne.n	8000da0 <main+0x94>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
  UartReady = RESET;
 8000dea:	2300      	movs	r3, #0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000dec:	489e      	ldr	r0, [pc, #632]	; (8001068 <main+0x35c>)
 8000dee:	4611      	mov	r1, r2
  UartReady = RESET;
 8000df0:	702b      	strb	r3, [r5, #0]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000df2:	f000 fe0f 	bl	8001a14 <HAL_GPIO_WritePin>
  if(rxDataBuffer[8191] != 0 && (processed == 0)){
 8000df6:	489a      	ldr	r0, [pc, #616]	; (8001060 <main+0x354>)
 8000df8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000dfc:	5cc3      	ldrb	r3, [r0, r3]
 8000dfe:	b13b      	cbz	r3, 8000e10 <main+0x104>
 8000e00:	4b9a      	ldr	r3, [pc, #616]	; (800106c <main+0x360>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b923      	cbnz	r3, 8000e10 <main+0x104>
	  byte2float(rxDataBuffer, processedData, 2*frameSize);
 8000e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e0a:	4999      	ldr	r1, [pc, #612]	; (8001070 <main+0x364>)
 8000e0c:	f7ff ff26 	bl	8000c5c <byte2float>
  __HAL_TIM_ENABLE(&htim2);
 8000e10:	4e98      	ldr	r6, [pc, #608]	; (8001074 <main+0x368>)
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000e12:	2400      	movs	r4, #0
  __HAL_TIM_ENABLE(&htim2);
 8000e14:	6833      	ldr	r3, [r6, #0]
  HAL_TIM_Base_Start(&htim2);
 8000e16:	4630      	mov	r0, r6
  __HAL_TIM_ENABLE(&htim2);
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e26:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8000e28:	f002 fde2 	bl	80039f0 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000e2c:	6833      	ldr	r3, [r6, #0]
	inst_absolute(&processedData[0], &instAbs[0]);
 8000e2e:	a902      	add	r1, sp, #8
 8000e30:	488f      	ldr	r0, [pc, #572]	; (8001070 <main+0x364>)
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000e32:	625c      	str	r4, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000e34:	625c      	str	r4, [r3, #36]	; 0x24
	inst_absolute(&processedData[0], &instAbs[0]);
 8000e36:	f7ff fc75 	bl	8000724 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000e3a:	6833      	ldr	r3, [r6, #0]
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	2231      	movs	r2, #49	; 0x31
 8000e40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000e42:	488d      	ldr	r0, [pc, #564]	; (8001078 <main+0x36c>)
 8000e44:	f004 f9a1 	bl	800518a <memset>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter);
 8000e48:	4622      	mov	r2, r4
 8000e4a:	498c      	ldr	r1, [pc, #560]	; (800107c <main+0x370>)
 8000e4c:	488c      	ldr	r0, [pc, #560]	; (8001080 <main+0x374>)
 8000e4e:	f004 fe97 	bl	8005b80 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000e52:	4884      	ldr	r0, [pc, #528]	; (8001064 <main+0x358>)
 8000e54:	f003 fe12 	bl	8004a7c <UART_CheckIdleState>
 8000e58:	b928      	cbnz	r0, 8000e66 <main+0x15a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8000e5a:	2364      	movs	r3, #100	; 0x64
 8000e5c:	2232      	movs	r2, #50	; 0x32
 8000e5e:	4988      	ldr	r1, [pc, #544]	; (8001080 <main+0x374>)
 8000e60:	4880      	ldr	r0, [pc, #512]	; (8001064 <main+0x358>)
 8000e62:	f002 fefb 	bl	8003c5c <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000e66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e6a:	f000 fb59 	bl	8001520 <HAL_Delay>
 8000e6e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000e72:	2100      	movs	r1, #0
 8000e74:	4883      	ldr	r0, [pc, #524]	; (8001084 <main+0x378>)
 8000e76:	f004 f988 	bl	800518a <memset>
	float2byte(txDataBuffer, instAbs, 2*frameSize);
 8000e7a:	4883      	ldr	r0, [pc, #524]	; (8001088 <main+0x37c>)
 8000e7c:	a902      	add	r1, sp, #8
 8000e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e82:	f7ff ff17 	bl	8000cb4 <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000e86:	4877      	ldr	r0, [pc, #476]	; (8001064 <main+0x358>)
 8000e88:	f003 fdf8 	bl	8004a7c <UART_CheckIdleState>
 8000e8c:	b998      	cbnz	r0, 8000eb6 <main+0x1aa>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 8000e8e:	2364      	movs	r3, #100	; 0x64
 8000e90:	2204      	movs	r2, #4
 8000e92:	497e      	ldr	r1, [pc, #504]	; (800108c <main+0x380>)
 8000e94:	4873      	ldr	r0, [pc, #460]	; (8001064 <main+0x358>)
 8000e96:	f002 fee1 	bl	8003c5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8000e9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea2:	4979      	ldr	r1, [pc, #484]	; (8001088 <main+0x37c>)
 8000ea4:	486f      	ldr	r0, [pc, #444]	; (8001064 <main+0x358>)
 8000ea6:	f002 fed9 	bl	8003c5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 8000eaa:	2364      	movs	r3, #100	; 0x64
 8000eac:	2204      	movs	r2, #4
 8000eae:	4978      	ldr	r1, [pc, #480]	; (8001090 <main+0x384>)
 8000eb0:	486c      	ldr	r0, [pc, #432]	; (8001064 <main+0x358>)
 8000eb2:	f002 fed3 	bl	8003c5c <HAL_UART_Transmit>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000eb6:	6833      	ldr	r3, [r6, #0]
 8000eb8:	2400      	movs	r4, #0
	inst_phase(&processedData[0], &instPhase[0]);
 8000eba:	f241 0108 	movw	r1, #4104	; 0x1008
 8000ebe:	486c      	ldr	r0, [pc, #432]	; (8001070 <main+0x364>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000ec0:	625c      	str	r4, [r3, #36]	; 0x24
	inst_phase(&processedData[0], &instPhase[0]);
 8000ec2:	4469      	add	r1, sp
 8000ec4:	f7ff fc46 	bl	8000754 <inst_phase>
	unwrap(&instPhase[0], &unwrappedPhase[0]);
 8000ec8:	f241 0008 	movw	r0, #4104	; 0x1008
 8000ecc:	f244 0108 	movw	r1, #16392	; 0x4008
 8000ed0:	4468      	add	r0, sp
 8000ed2:	4469      	add	r1, sp
 8000ed4:	f7ff fc5c 	bl	8000790 <unwrap>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000ed8:	6833      	ldr	r3, [r6, #0]
 8000eda:	4621      	mov	r1, r4
 8000edc:	2231      	movs	r2, #49	; 0x31
 8000ede:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000ee0:	4865      	ldr	r0, [pc, #404]	; (8001078 <main+0x36c>)
 8000ee2:	f004 f952 	bl	800518a <memset>
	sprintf(&txStringBuffer[0], "Inst phase counter = %ld\r\n", counter);
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	496a      	ldr	r1, [pc, #424]	; (8001094 <main+0x388>)
 8000eea:	4865      	ldr	r0, [pc, #404]	; (8001080 <main+0x374>)
 8000eec:	f004 fe48 	bl	8005b80 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000ef0:	485c      	ldr	r0, [pc, #368]	; (8001064 <main+0x358>)
 8000ef2:	f003 fdc3 	bl	8004a7c <UART_CheckIdleState>
 8000ef6:	b928      	cbnz	r0, 8000f04 <main+0x1f8>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	2232      	movs	r2, #50	; 0x32
 8000efc:	4960      	ldr	r1, [pc, #384]	; (8001080 <main+0x374>)
 8000efe:	4859      	ldr	r0, [pc, #356]	; (8001064 <main+0x358>)
 8000f00:	f002 feac 	bl	8003c5c <HAL_UART_Transmit>
 8000f04:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000f08:	2100      	movs	r1, #0
 8000f0a:	485e      	ldr	r0, [pc, #376]	; (8001084 <main+0x378>)
 8000f0c:	f004 f93d 	bl	800518a <memset>
	float2byte(txDataBuffer, unwrappedPhase, 2*frameSize);
 8000f10:	f244 0108 	movw	r1, #16392	; 0x4008
 8000f14:	485c      	ldr	r0, [pc, #368]	; (8001088 <main+0x37c>)
 8000f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f1a:	4469      	add	r1, sp
 8000f1c:	f7ff feca 	bl	8000cb4 <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f20:	4850      	ldr	r0, [pc, #320]	; (8001064 <main+0x358>)
 8000f22:	f003 fdab 	bl	8004a7c <UART_CheckIdleState>
 8000f26:	b938      	cbnz	r0, 8000f38 <main+0x22c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8000f28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f30:	4955      	ldr	r1, [pc, #340]	; (8001088 <main+0x37c>)
 8000f32:	484c      	ldr	r0, [pc, #304]	; (8001064 <main+0x358>)
 8000f34:	f002 fe92 	bl	8003c5c <HAL_UART_Transmit>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f38:	6833      	ldr	r3, [r6, #0]
 8000f3a:	2400      	movs	r4, #0
	inst_frequency(&processedData[0], &instFreq[0]);
 8000f3c:	f242 0108 	movw	r1, #8200	; 0x2008
 8000f40:	484b      	ldr	r0, [pc, #300]	; (8001070 <main+0x364>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f42:	625c      	str	r4, [r3, #36]	; 0x24
	inst_frequency(&processedData[0], &instFreq[0]);
 8000f44:	4469      	add	r1, sp
 8000f46:	f7ff fc71 	bl	800082c <inst_frequency>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000f4a:	6833      	ldr	r3, [r6, #0]
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	2231      	movs	r2, #49	; 0x31
 8000f50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000f52:	4849      	ldr	r0, [pc, #292]	; (8001078 <main+0x36c>)
 8000f54:	f004 f919 	bl	800518a <memset>
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n", counter);
 8000f58:	4622      	mov	r2, r4
 8000f5a:	494f      	ldr	r1, [pc, #316]	; (8001098 <main+0x38c>)
 8000f5c:	4848      	ldr	r0, [pc, #288]	; (8001080 <main+0x374>)
 8000f5e:	f004 fe0f 	bl	8005b80 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f62:	4840      	ldr	r0, [pc, #256]	; (8001064 <main+0x358>)
 8000f64:	f003 fd8a 	bl	8004a7c <UART_CheckIdleState>
 8000f68:	b928      	cbnz	r0, 8000f76 <main+0x26a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	2232      	movs	r2, #50	; 0x32
 8000f6e:	4944      	ldr	r1, [pc, #272]	; (8001080 <main+0x374>)
 8000f70:	483c      	ldr	r0, [pc, #240]	; (8001064 <main+0x358>)
 8000f72:	f002 fe73 	bl	8003c5c <HAL_UART_Transmit>
 8000f76:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4841      	ldr	r0, [pc, #260]	; (8001084 <main+0x378>)
 8000f7e:	f004 f904 	bl	800518a <memset>
	float2byte(txDataBuffer, instFreq, 2*frameSize);
 8000f82:	f242 0108 	movw	r1, #8200	; 0x2008
 8000f86:	4840      	ldr	r0, [pc, #256]	; (8001088 <main+0x37c>)
 8000f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f8c:	4469      	add	r1, sp
 8000f8e:	f7ff fe91 	bl	8000cb4 <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f92:	4834      	ldr	r0, [pc, #208]	; (8001064 <main+0x358>)
 8000f94:	f003 fd72 	bl	8004a7c <UART_CheckIdleState>
 8000f98:	b998      	cbnz	r0, 8000fc2 <main+0x2b6>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 8000f9a:	2364      	movs	r3, #100	; 0x64
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	493b      	ldr	r1, [pc, #236]	; (800108c <main+0x380>)
 8000fa0:	4830      	ldr	r0, [pc, #192]	; (8001064 <main+0x358>)
 8000fa2:	f002 fe5b 	bl	8003c5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8000fa6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000faa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fae:	4936      	ldr	r1, [pc, #216]	; (8001088 <main+0x37c>)
 8000fb0:	482c      	ldr	r0, [pc, #176]	; (8001064 <main+0x358>)
 8000fb2:	f002 fe53 	bl	8003c5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	2204      	movs	r2, #4
 8000fba:	4935      	ldr	r1, [pc, #212]	; (8001090 <main+0x384>)
 8000fbc:	4829      	ldr	r0, [pc, #164]	; (8001064 <main+0x358>)
 8000fbe:	f002 fe4d 	bl	8003c5c <HAL_UART_Transmit>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fc2:	6833      	ldr	r3, [r6, #0]
 8000fc4:	2400      	movs	r4, #0
	inst_centralized_normalized_absolute(&processedData[0], &instCNA[0]);
 8000fc6:	f243 0108 	movw	r1, #12296	; 0x3008
 8000fca:	4829      	ldr	r0, [pc, #164]	; (8001070 <main+0x364>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fcc:	625c      	str	r4, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&processedData[0], &instCNA[0]);
 8000fce:	4469      	add	r1, sp
 8000fd0:	f7ff fcec 	bl	80009ac <inst_centralized_normalized_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000fd4:	6833      	ldr	r3, [r6, #0]
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	2231      	movs	r2, #49	; 0x31
 8000fda:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000fdc:	4826      	ldr	r0, [pc, #152]	; (8001078 <main+0x36c>)
 8000fde:	f004 f8d4 	bl	800518a <memset>
	sprintf(&txStringBuffer[0], "Inst CNA counter = %ld\r\n&", counter);
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	492d      	ldr	r1, [pc, #180]	; (800109c <main+0x390>)
 8000fe6:	4826      	ldr	r0, [pc, #152]	; (8001080 <main+0x374>)
 8000fe8:	f004 fdca 	bl	8005b80 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000fec:	481d      	ldr	r0, [pc, #116]	; (8001064 <main+0x358>)
 8000fee:	f003 fd45 	bl	8004a7c <UART_CheckIdleState>
 8000ff2:	b928      	cbnz	r0, 8001000 <main+0x2f4>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	2232      	movs	r2, #50	; 0x32
 8000ff8:	4921      	ldr	r1, [pc, #132]	; (8001080 <main+0x374>)
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <main+0x358>)
 8000ffc:	f002 fe2e 	bl	8003c5c <HAL_UART_Transmit>
 8001000:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001004:	2100      	movs	r1, #0
 8001006:	481f      	ldr	r0, [pc, #124]	; (8001084 <main+0x378>)
 8001008:	f004 f8bf 	bl	800518a <memset>
	float2byte(txDataBuffer, instCNA, 2*frameSize);
 800100c:	f243 0108 	movw	r1, #12296	; 0x3008
 8001010:	481d      	ldr	r0, [pc, #116]	; (8001088 <main+0x37c>)
 8001012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001016:	4469      	add	r1, sp
 8001018:	f7ff fe4c 	bl	8000cb4 <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800101c:	4811      	ldr	r0, [pc, #68]	; (8001064 <main+0x358>)
 800101e:	f003 fd2d 	bl	8004a7c <UART_CheckIdleState>
 8001022:	b998      	cbnz	r0, 800104c <main+0x340>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	2204      	movs	r2, #4
 8001028:	4918      	ldr	r1, [pc, #96]	; (800108c <main+0x380>)
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <main+0x358>)
 800102c:	f002 fe16 	bl	8003c5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8001030:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001038:	4913      	ldr	r1, [pc, #76]	; (8001088 <main+0x37c>)
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <main+0x358>)
 800103c:	f002 fe0e 	bl	8003c5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	2204      	movs	r2, #4
 8001044:	4912      	ldr	r1, [pc, #72]	; (8001090 <main+0x384>)
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <main+0x358>)
 8001048:	f002 fe08 	bl	8003c5c <HAL_UART_Transmit>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800104c:	2400      	movs	r4, #0
 800104e:	6833      	ldr	r3, [r6, #0]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001050:	2101      	movs	r1, #1
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <main+0x35c>)
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001054:	625c      	str	r4, [r3, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001056:	4622      	mov	r2, r4
 8001058:	e022      	b.n	80010a0 <main+0x394>
 800105a:	bf00      	nop
 800105c:	200001fc 	.word	0x200001fc
 8001060:	20002204 	.word	0x20002204
 8001064:	20006290 	.word	0x20006290
 8001068:	58020400 	.word	0x58020400
 800106c:	200001fd 	.word	0x200001fd
 8001070:	20000200 	.word	0x20000200
 8001074:	20006244 	.word	0x20006244
 8001078:	20006205 	.word	0x20006205
 800107c:	080074d4 	.word	0x080074d4
 8001080:	20006204 	.word	0x20006204
 8001084:	20004205 	.word	0x20004205
 8001088:	20004204 	.word	0x20004204
 800108c:	08007544 	.word	0x08007544
 8001090:	08007548 	.word	0x08007548
 8001094:	080074f0 	.word	0x080074f0
 8001098:	0800750c 	.word	0x0800750c
 800109c:	08007528 	.word	0x08007528
 80010a0:	f000 fcb8 	bl	8001a14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80010a4:	4622      	mov	r2, r4
 80010a6:	2102      	movs	r1, #2
 80010a8:	480f      	ldr	r0, [pc, #60]	; (80010e8 <main+0x3dc>)
 80010aa:	f000 fcb3 	bl	8001a14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80010ae:	4622      	mov	r2, r4
 80010b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <main+0x3e0>)
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80010b6:	4627      	mov	r7, r4
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80010b8:	f000 fcac 	bl	8001a14 <HAL_GPIO_WritePin>
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 80010bc:	4c0c      	ldr	r4, [pc, #48]	; (80010f0 <main+0x3e4>)
 80010be:	6832      	ldr	r2, [r6, #0]
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 80010c0:	4d09      	ldr	r5, [pc, #36]	; (80010e8 <main+0x3dc>)
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 80010c2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80010c4:	42a3      	cmp	r3, r4
 80010c6:	d9fc      	bls.n	80010c2 <main+0x3b6>
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 80010c8:	2102      	movs	r1, #2
 80010ca:	4628      	mov	r0, r5
 80010cc:	f000 fc9c 	bl	8001a08 <HAL_GPIO_ReadPin>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2102      	movs	r1, #2
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 80010d4:	b908      	cbnz	r0, 80010da <main+0x3ce>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2102      	movs	r1, #2
 80010da:	4628      	mov	r0, r5
 80010dc:	f000 fc9a 	bl	8001a14 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010e0:	6832      	ldr	r2, [r6, #0]
 80010e2:	6257      	str	r7, [r2, #36]	; 0x24
 80010e4:	e7ed      	b.n	80010c2 <main+0x3b6>
 80010e6:	bf00      	nop
 80010e8:	58021000 	.word	0x58021000
 80010ec:	58020400 	.word	0x58020400
 80010f0:	0e4e1bff 	.word	0x0e4e1bff

080010f4 <HAL_UART_TxCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3)
{
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 80010f4:	4b01      	ldr	r3, [pc, #4]	; (80010fc <HAL_UART_TxCpltCallback+0x8>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	4770      	bx	lr
 80010fc:	200001fc 	.word	0x200001fc

08001100 <HAL_UART_RxCpltCallback>:
 8001100:	4b01      	ldr	r3, [pc, #4]	; (8001108 <HAL_UART_RxCpltCallback+0x8>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	4770      	bx	lr
 8001108:	200001fc 	.word	0x200001fc

0800110c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_MspInit+0x20>)
{
 8001112:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001114:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001118:	f042 0202 	orr.w	r2, r2, #2
 800111c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112c:	b002      	add	sp, #8
 800112e:	4770      	bx	lr
 8001130:	58024400 	.word	0x58024400

08001134 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001138:	e7fe      	b.n	8001138 <HardFault_Handler>
 800113a:	bf00      	nop

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	e7fe      	b.n	800113c <MemManage_Handler>
 800113e:	bf00      	nop

08001140 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001140:	e7fe      	b.n	8001140 <BusFault_Handler>
 8001142:	bf00      	nop

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler>
 8001146:	bf00      	nop

08001148 <SVC_Handler>:
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <DebugMon_Handler>:
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <PendSV_Handler>:
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 b9d2 	b.w	80014fc <HAL_IncTick>

08001158 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001158:	4801      	ldr	r0, [pc, #4]	; (8001160 <USART3_IRQHandler+0x8>)
 800115a:	f002 bff1 	b.w	8004140 <HAL_UART_IRQHandler>
 800115e:	bf00      	nop
 8001160:	20006290 	.word	0x20006290

08001164 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <_sbrk+0x34>)
{
 8001166:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	b133      	cbz	r3, 800117a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800116c:	4418      	add	r0, r3
 800116e:	4669      	mov	r1, sp
 8001170:	4288      	cmp	r0, r1
 8001172:	d809      	bhi.n	8001188 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001174:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <_sbrk+0x38>)
 800117c:	460b      	mov	r3, r1
 800117e:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001180:	4669      	mov	r1, sp
 8001182:	4418      	add	r0, r3
 8001184:	4288      	cmp	r0, r1
 8001186:	d9f5      	bls.n	8001174 <_sbrk+0x10>
		errno = ENOMEM;
 8001188:	f003 ffba 	bl	8005100 <__errno>
 800118c:	220c      	movs	r2, #12
		return (caddr_t) -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 8001192:	6002      	str	r2, [r0, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd08      	pop	{r3, pc}
 8001198:	20006238 	.word	0x20006238
 800119c:	20006730 	.word	0x20006730

080011a0 <MX_TIM2_Init>:
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <MX_TIM2_Init+0x68>)
 80011a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
{
 80011ac:	b500      	push	{lr}
 80011ae:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80011b0:	6010      	str	r0, [r2, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b2:	4610      	mov	r0, r2
  htim2.Init.Period = 4294967295;
 80011b4:	60d1      	str	r1, [r2, #12]
  htim2.Init.Prescaler = 0;
 80011b6:	6053      	str	r3, [r2, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b8:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ba:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	6093      	str	r3, [r2, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	6113      	str	r3, [r2, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	9307      	str	r3, [sp, #28]
 80011c4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011cc:	f002 fb7e 	bl	80038cc <HAL_TIM_Base_Init>
 80011d0:	b9b8      	cbnz	r0, 8001202 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011d6:	a904      	add	r1, sp, #16
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011da:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011dc:	f002 fc24 	bl	8003a28 <HAL_TIM_ConfigClockSource>
 80011e0:	b960      	cbnz	r0, 80011fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e4:	a901      	add	r1, sp, #4
 80011e6:	4808      	ldr	r0, [pc, #32]	; (8001208 <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ec:	f002 fcdc 	bl	8003ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	b108      	cbz	r0, 80011f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011f2:	f7ff ff8b 	bl	800110c <Error_Handler>
  }

}
 80011f6:	b009      	add	sp, #36	; 0x24
 80011f8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011fc:	f7ff ff86 	bl	800110c <Error_Handler>
 8001200:	e7ef      	b.n	80011e2 <MX_TIM2_Init+0x42>
    Error_Handler();
 8001202:	f7ff ff83 	bl	800110c <Error_Handler>
 8001206:	e7e4      	b.n	80011d2 <MX_TIM2_Init+0x32>
 8001208:	20006244 	.word	0x20006244

0800120c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800120c:	6803      	ldr	r3, [r0, #0]
 800120e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001212:	d000      	beq.n	8001216 <HAL_TIM_Base_MspInit+0xa>
 8001214:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_TIM_Base_MspInit+0x2c>)
{
 8001218:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001232:	b002      	add	sp, #8
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	58024400 	.word	0x58024400

0800123c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800123c:	b538      	push	{r3, r4, r5, lr}

  huart3.Instance = USART3;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_USART3_UART_Init+0x64>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001240:	2200      	movs	r2, #0
  huart3.Init.BaudRate = 115200;
 8001242:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart3.Instance = USART3;
 8001246:	4d17      	ldr	r5, [pc, #92]	; (80012a4 <MX_USART3_UART_Init+0x68>)
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001248:	210c      	movs	r1, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800124a:	4618      	mov	r0, r3
  huart3.Init.Parity = UART_PARITY_NONE;
 800124c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800124e:	6159      	str	r1, [r3, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 8001252:	e9c3 5400 	strd	r5, r4, [r3]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001256:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800125a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800125e:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001262:	f003 f8cb 	bl	80043fc <HAL_UART_Init>
 8001266:	b9c0      	cbnz	r0, 800129a <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001268:	2100      	movs	r1, #0
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_USART3_UART_Init+0x64>)
 800126c:	f003 fc8e 	bl	8004b8c <HAL_UARTEx_SetTxFifoThreshold>
 8001270:	b980      	cbnz	r0, 8001294 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001272:	2100      	movs	r1, #0
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <MX_USART3_UART_Init+0x64>)
 8001276:	f003 fcdb 	bl	8004c30 <HAL_UARTEx_SetRxFifoThreshold>
 800127a:	b940      	cbnz	r0, 800128e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <MX_USART3_UART_Init+0x64>)
 800127e:	f003 fc67 	bl	8004b50 <HAL_UARTEx_DisableFifoMode>
 8001282:	b900      	cbnz	r0, 8001286 <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
  }

}
 8001284:	bd38      	pop	{r3, r4, r5, pc}
 8001286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800128a:	f7ff bf3f 	b.w	800110c <Error_Handler>
    Error_Handler();
 800128e:	f7ff ff3d 	bl	800110c <Error_Handler>
 8001292:	e7f3      	b.n	800127c <MX_USART3_UART_Init+0x40>
    Error_Handler();
 8001294:	f7ff ff3a 	bl	800110c <Error_Handler>
 8001298:	e7eb      	b.n	8001272 <MX_USART3_UART_Init+0x36>
    Error_Handler();
 800129a:	f7ff ff37 	bl	800110c <Error_Handler>
 800129e:	e7e3      	b.n	8001268 <MX_USART3_UART_Init+0x2c>
 80012a0:	20006290 	.word	0x20006290
 80012a4:	40004800 	.word	0x40004800

080012a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART3)
 80012a8:	6802      	ldr	r2, [r0, #0]
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <HAL_UART_MspInit+0x7c>)
{
 80012ac:	b570      	push	{r4, r5, r6, lr}
  if(uartHandle->Instance==USART3)
 80012ae:	429a      	cmp	r2, r3
{
 80012b0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f04f 0400 	mov.w	r4, #0
 80012b6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80012ba:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80012be:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART3)
 80012c0:	d001      	beq.n	80012c6 <HAL_UART_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012c2:	b008      	add	sp, #32
 80012c4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c8:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ce:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d4:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012da:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80012de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80012e2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80012e6:	9201      	str	r2, [sp, #4]
 80012e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012ee:	f042 0208 	orr.w	r2, r2, #8
 80012f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012fa:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001308:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f000 fa5f 	bl	80017cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800130e:	4622      	mov	r2, r4
 8001310:	4621      	mov	r1, r4
 8001312:	2027      	movs	r0, #39	; 0x27
 8001314:	f000 f930 	bl	8001578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001318:	2027      	movs	r0, #39	; 0x27
 800131a:	f000 f963 	bl	80015e4 <HAL_NVIC_EnableIRQ>
}
 800131e:	b008      	add	sp, #32
 8001320:	bd70      	pop	{r4, r5, r6, pc}
 8001322:	bf00      	nop
 8001324:	40004800 	.word	0x40004800
 8001328:	58024400 	.word	0x58024400
 800132c:	58020c00 	.word	0x58020c00

08001330 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001330:	b538      	push	{r3, r4, r5, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_USB_OTG_FS_PCD_Init+0x38>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001334:	2200      	movs	r2, #0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MX_USB_OTG_FS_PCD_Init+0x3c>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001338:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800133a:	2509      	movs	r5, #9
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800133c:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800133e:	6018      	str	r0, [r3, #0]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001340:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001342:	605d      	str	r5, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001344:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001346:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001348:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800134e:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001352:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001356:	f000 fb77 	bl	8001a48 <HAL_PCD_Init>
 800135a:	b900      	cbnz	r0, 800135e <MX_USB_OTG_FS_PCD_Init+0x2e>
  {
    Error_Handler();
  }

}
 800135c:	bd38      	pop	{r3, r4, r5, pc}
 800135e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001362:	f7ff bed3 	b.w	800110c <Error_Handler>
 8001366:	bf00      	nop
 8001368:	40080000 	.word	0x40080000
 800136c:	2000631c 	.word	0x2000631c

08001370 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8001370:	6802      	ldr	r2, [r0, #0]
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <HAL_PCD_MspInit+0x7c>)
{
 8001374:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8001376:	429a      	cmp	r2, r3
{
 8001378:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f04f 0400 	mov.w	r4, #0
 800137e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001382:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001386:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001388:	d001      	beq.n	800138e <HAL_PCD_MspInit+0x1e>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800138a:	b009      	add	sp, #36	; 0x24
 800138c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4d18      	ldr	r5, [pc, #96]	; (80013f0 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001390:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001396:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80013a4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013a8:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	9104      	str	r1, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <HAL_PCD_MspInit+0x84>)
 80013b2:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013b6:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f000 fa07 	bl	80017cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013be:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	a903      	add	r1, sp, #12
 80013c4:	480b      	ldr	r0, [pc, #44]	; (80013f4 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f000 f9fe 	bl	80017cc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013d0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 80013d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013d8:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 80013dc:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 80013e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	9b02      	ldr	r3, [sp, #8]
}
 80013e8:	b009      	add	sp, #36	; 0x24
 80013ea:	bd30      	pop	{r4, r5, pc}
 80013ec:	40080000 	.word	0x40080000
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020000 	.word	0x58020000

080013f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013fe:	e003      	b.n	8001408 <LoopCopyDataInit>

08001400 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001402:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001404:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001406:	3104      	adds	r1, #4

08001408 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800140c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800140e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001410:	d3f6      	bcc.n	8001400 <CopyDataInit>
  ldr  r2, =_sbss
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001414:	e002      	b.n	800141c <LoopFillZerobss>

08001416 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001416:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001418:	f842 3b04 	str.w	r3, [r2], #4

0800141c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800141e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001420:	d3f9      	bcc.n	8001416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001422:	f7ff f935 	bl	8000690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001426:	f003 fe71 	bl	800510c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff fc6f 	bl	8000d0c <main>
  bx  lr    
 800142e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001434:	08007850 	.word	0x08007850
  ldr  r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800143c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001440:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001444:	2000672c 	.word	0x2000672c

08001448 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC3_IRQHandler>
	...

0800144c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_InitTick+0x40>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b90b      	cbnz	r3, 8001456 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001452:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001454:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001456:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800145a:	490d      	ldr	r1, [pc, #52]	; (8001490 <HAL_InitTick+0x44>)
 800145c:	fbb2 f3f3 	udiv	r3, r2, r3
{
 8001460:	b510      	push	{r4, lr}
 8001462:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001464:	6808      	ldr	r0, [r1, #0]
 8001466:	fbb0 f0f3 	udiv	r0, r0, r3
 800146a:	f000 f8c9 	bl	8001600 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	2c0f      	cmp	r4, #15
 8001470:	d800      	bhi.n	8001474 <HAL_InitTick+0x28>
 8001472:	b108      	cbz	r0, 8001478 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001474:	2001      	movs	r0, #1
}
 8001476:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	4621      	mov	r1, r4
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 f87a 	bl	8001578 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_InitTick+0x48>)
 8001486:	2000      	movs	r0, #0
 8001488:	601c      	str	r4, [r3, #0]
}
 800148a:	bd10      	pop	{r4, pc}
 800148c:	20000008 	.word	0x20000008
 8001490:	20000000 	.word	0x20000000
 8001494:	2000000c 	.word	0x2000000c

08001498 <HAL_Init>:
{
 8001498:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
{
 800149c:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149e:	f000 f857 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014a2:	4c12      	ldr	r4, [pc, #72]	; (80014ec <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a4:	f000 febe 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80014a8:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <HAL_Init+0x58>)
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <HAL_Init+0x5c>)
 80014ac:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ae:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014b0:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 80014b4:	4d10      	ldr	r5, [pc, #64]	; (80014f8 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014b6:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014bc:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014be:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014c2:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014c6:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ca:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014cc:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 80014d0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014d2:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d4:	f7ff ffba 	bl	800144c <HAL_InitTick>
 80014d8:	b110      	cbz	r0, 80014e0 <HAL_Init+0x48>
    return HAL_ERROR;
 80014da:	2001      	movs	r0, #1
}
 80014dc:	b003      	add	sp, #12
 80014de:	bd30      	pop	{r4, r5, pc}
 80014e0:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 80014e2:	f7ff fe15 	bl	8001110 <HAL_MspInit>
  return HAL_OK;
 80014e6:	9801      	ldr	r0, [sp, #4]
}
 80014e8:	b003      	add	sp, #12
 80014ea:	bd30      	pop	{r4, r5, pc}
 80014ec:	20000004 	.word	0x20000004
 80014f0:	58024400 	.word	0x58024400
 80014f4:	080074c0 	.word	0x080074c0
 80014f8:	20000000 	.word	0x20000000

080014fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <HAL_IncTick+0x10>)
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_IncTick+0x14>)
 8001500:	6811      	ldr	r1, [r2, #0]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	440b      	add	r3, r1
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20006724 	.word	0x20006724
 8001510:	20000008 	.word	0x20000008

08001514 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <HAL_GetTick+0x8>)
 8001516:	6818      	ldr	r0, [r3, #0]
}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20006724 	.word	0x20006724

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fff6 	bl	8001514 <HAL_GetTick>
 8001528:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	1c63      	adds	r3, r4, #1
 800152c:	d002      	beq.n	8001534 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_Delay+0x20>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001534:	f7ff ffee 	bl	8001514 <HAL_GetTick>
 8001538:	1b40      	subs	r0, r0, r5
 800153a:	42a0      	cmp	r0, r4
 800153c:	d3fa      	bcc.n	8001534 <HAL_Delay+0x14>
  {
  }
}
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001544:	4b01      	ldr	r3, [pc, #4]	; (800154c <HAL_GetREVID+0x8>)
 8001546:	6818      	ldr	r0, [r3, #0]
}
 8001548:	0c00      	lsrs	r0, r0, #16
 800154a:	4770      	bx	lr
 800154c:	5c001000 	.word	0x5c001000

08001550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001552:	0200      	lsls	r0, r0, #8
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001556:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001562:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001568:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156a:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 800156c:	60c8      	str	r0, [r1, #12]
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	05fa0000 	.word	0x05fa0000

08001578 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_NVIC_SetPriority+0x60>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001582:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	2d04      	cmp	r5, #4
 800158a:	bf28      	it	cs
 800158c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	2c06      	cmp	r4, #6
 8001590:	d918      	bls.n	80015c4 <HAL_NVIC_SetPriority+0x4c>
 8001592:	3b03      	subs	r3, #3
 8001594:	f04f 34ff 	mov.w	r4, #4294967295
 8001598:	409c      	lsls	r4, r3
 800159a:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159e:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80015a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	fa02 f205 	lsl.w	r2, r2, r5
 80015a8:	ea21 0102 	bic.w	r1, r1, r2
 80015ac:	fa01 f203 	lsl.w	r2, r1, r3
 80015b0:	ea42 0204 	orr.w	r2, r2, r4
 80015b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80015b8:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80015ba:	db06      	blt.n	80015ca <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_NVIC_SetPriority+0x64>)
 80015be:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015c0:	bc30      	pop	{r4, r5}
 80015c2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c4:	2400      	movs	r4, #0
 80015c6:	4623      	mov	r3, r4
 80015c8:	e7e9      	b.n	800159e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	f000 000f 	and.w	r0, r0, #15
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_NVIC_SetPriority+0x68>)
 80015d0:	541a      	strb	r2, [r3, r0]
 80015d2:	bc30      	pop	{r4, r5}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	e000e400 	.word	0xe000e400
 80015e0:	e000ed14 	.word	0xe000ed14

080015e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015e4:	2800      	cmp	r0, #0
 80015e6:	db07      	blt.n	80015f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e8:	f000 011f 	and.w	r1, r0, #31
 80015ec:	2301      	movs	r3, #1
 80015ee:	0940      	lsrs	r0, r0, #5
 80015f0:	4a02      	ldr	r2, [pc, #8]	; (80015fc <HAL_NVIC_EnableIRQ+0x18>)
 80015f2:	408b      	lsls	r3, r1
 80015f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	3801      	subs	r0, #1
 8001602:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001606:	d20d      	bcs.n	8001624 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160c:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	25f0      	movs	r5, #240	; 0xf0
 8001612:	4c06      	ldr	r4, [pc, #24]	; (800162c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001614:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001616:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001620:	bc30      	pop	{r4, r5}
 8001622:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001624:	2001      	movs	r0, #1
 8001626:	4770      	bx	lr
 8001628:	e000e010 	.word	0xe000e010
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001630:	2800      	cmp	r0, #0
 8001632:	d060      	beq.n	80016f6 <HAL_DMA_Abort_IT+0xc6>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001634:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8001638:	2a02      	cmp	r2, #2
{
 800163a:	b538      	push	{r3, r4, r5, lr}
 800163c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163e:	d003      	beq.n	8001648 <HAL_DMA_Abort_IT+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001640:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001642:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  return HAL_OK;
}
 8001646:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001648:	6801      	ldr	r1, [r0, #0]
 800164a:	4a57      	ldr	r2, [pc, #348]	; (80017a8 <HAL_DMA_Abort_IT+0x178>)
 800164c:	4291      	cmp	r1, r2
 800164e:	d049      	beq.n	80016e4 <HAL_DMA_Abort_IT+0xb4>
 8001650:	3218      	adds	r2, #24
 8001652:	4291      	cmp	r1, r2
 8001654:	d046      	beq.n	80016e4 <HAL_DMA_Abort_IT+0xb4>
 8001656:	3230      	adds	r2, #48	; 0x30
 8001658:	4854      	ldr	r0, [pc, #336]	; (80017ac <HAL_DMA_Abort_IT+0x17c>)
 800165a:	4c55      	ldr	r4, [pc, #340]	; (80017b0 <HAL_DMA_Abort_IT+0x180>)
 800165c:	4281      	cmp	r1, r0
 800165e:	bf18      	it	ne
 8001660:	4291      	cmpne	r1, r2
 8001662:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001666:	4d53      	ldr	r5, [pc, #332]	; (80017b4 <HAL_DMA_Abort_IT+0x184>)
 8001668:	bf0c      	ite	eq
 800166a:	2201      	moveq	r2, #1
 800166c:	2200      	movne	r2, #0
 800166e:	42a1      	cmp	r1, r4
 8001670:	bf08      	it	eq
 8001672:	f042 0201 	orreq.w	r2, r2, #1
 8001676:	3448      	adds	r4, #72	; 0x48
 8001678:	4281      	cmp	r1, r0
 800167a:	bf08      	it	eq
 800167c:	f042 0201 	orreq.w	r2, r2, #1
 8001680:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001684:	42a9      	cmp	r1, r5
 8001686:	bf08      	it	eq
 8001688:	f042 0201 	orreq.w	r2, r2, #1
 800168c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8001690:	42a1      	cmp	r1, r4
 8001692:	bf08      	it	eq
 8001694:	f042 0201 	orreq.w	r2, r2, #1
 8001698:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800169c:	4281      	cmp	r1, r0
 800169e:	bf08      	it	eq
 80016a0:	f042 0201 	orreq.w	r2, r2, #1
 80016a4:	3048      	adds	r0, #72	; 0x48
 80016a6:	42a9      	cmp	r1, r5
 80016a8:	bf08      	it	eq
 80016aa:	f042 0201 	orreq.w	r2, r2, #1
 80016ae:	3548      	adds	r5, #72	; 0x48
 80016b0:	42a1      	cmp	r1, r4
 80016b2:	bf08      	it	eq
 80016b4:	f042 0201 	orreq.w	r2, r2, #1
 80016b8:	3448      	adds	r4, #72	; 0x48
 80016ba:	4281      	cmp	r1, r0
 80016bc:	bf08      	it	eq
 80016be:	f042 0201 	orreq.w	r2, r2, #1
 80016c2:	3048      	adds	r0, #72	; 0x48
 80016c4:	42a9      	cmp	r1, r5
 80016c6:	bf08      	it	eq
 80016c8:	f042 0201 	orreq.w	r2, r2, #1
 80016cc:	42a1      	cmp	r1, r4
 80016ce:	bf08      	it	eq
 80016d0:	f042 0201 	orreq.w	r2, r2, #1
 80016d4:	4281      	cmp	r1, r0
 80016d6:	bf08      	it	eq
 80016d8:	f042 0201 	orreq.w	r2, r2, #1
 80016dc:	b912      	cbnz	r2, 80016e4 <HAL_DMA_Abort_IT+0xb4>
 80016de:	4a36      	ldr	r2, [pc, #216]	; (80017b8 <HAL_DMA_Abort_IT+0x188>)
 80016e0:	4291      	cmp	r1, r2
 80016e2:	d10a      	bne.n	80016fa <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 80016e4:	2204      	movs	r2, #4
  return HAL_OK;
 80016e6:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80016ec:	680b      	ldr	r3, [r1, #0]
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	600b      	str	r3, [r1, #0]
}
 80016f4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
}
 80016f8:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016fa:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 80016fe:	4a2f      	ldr	r2, [pc, #188]	; (80017bc <HAL_DMA_Abort_IT+0x18c>)
 8001700:	482f      	ldr	r0, [pc, #188]	; (80017c0 <HAL_DMA_Abort_IT+0x190>)
 8001702:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 8001706:	4d2f      	ldr	r5, [pc, #188]	; (80017c4 <HAL_DMA_Abort_IT+0x194>)
 8001708:	42a1      	cmp	r1, r4
 800170a:	bf18      	it	ne
 800170c:	4291      	cmpne	r1, r2
 800170e:	f104 0450 	add.w	r4, r4, #80	; 0x50
 8001712:	bf0c      	ite	eq
 8001714:	2201      	moveq	r2, #1
 8001716:	2200      	movne	r2, #0
 8001718:	4281      	cmp	r1, r0
 800171a:	bf08      	it	eq
 800171c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001720:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001722:	42a9      	cmp	r1, r5
 8001724:	bf08      	it	eq
 8001726:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800172a:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800172e:	3528      	adds	r5, #40	; 0x28
 8001730:	42a1      	cmp	r1, r4
 8001732:	bf08      	it	eq
 8001734:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001738:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800173a:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 800173c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800173e:	42a9      	cmp	r1, r5
 8001740:	bf08      	it	eq
 8001742:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8001746:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800174a:	42a1      	cmp	r1, r4
 800174c:	bf08      	it	eq
 800174e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8001752:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001754:	b912      	cbnz	r2, 800175c <HAL_DMA_Abort_IT+0x12c>
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_DMA_Abort_IT+0x198>)
 8001758:	4291      	cmp	r1, r2
 800175a:	d117      	bne.n	800178c <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800175c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800175e:	2101      	movs	r1, #1
 8001760:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001762:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001764:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001768:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800176a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800176e:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001770:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001772:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 8001774:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001778:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800177a:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800177c:	b132      	cbz	r2, 800178c <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800177e:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001780:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8001782:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001784:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001788:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800178a:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800178c:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800178e:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8001790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8001792:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001796:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800179a:	b11a      	cbz	r2, 80017a4 <HAL_DMA_Abort_IT+0x174>
 800179c:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 800179e:	4790      	blx	r2
  return HAL_OK;
 80017a0:	4620      	mov	r0, r4
}
 80017a2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80017a4:	4610      	mov	r0, r2
}
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
 80017a8:	40020010 	.word	0x40020010
 80017ac:	40020040 	.word	0x40020040
 80017b0:	40020070 	.word	0x40020070
 80017b4:	400200a0 	.word	0x400200a0
 80017b8:	400204b8 	.word	0x400204b8
 80017bc:	5802541c 	.word	0x5802541c
 80017c0:	58025430 	.word	0x58025430
 80017c4:	58025444 	.word	0x58025444
 80017c8:	58025494 	.word	0x58025494

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d0:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017d2:	6809      	ldr	r1, [r1, #0]
{
 80017d4:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017d6:	2900      	cmp	r1, #0
 80017d8:	f000 80cd 	beq.w	8001976 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 80017dc:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80017de:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80019f4 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e2:	2301      	movs	r3, #1
 80017e4:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 80017e6:	ea13 0501 	ands.w	r5, r3, r1
 80017ea:	f000 80bf 	beq.w	800196c <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ee:	f8de 2004 	ldr.w	r2, [lr, #4]
 80017f2:	0077      	lsls	r7, r6, #1
 80017f4:	f04f 0c03 	mov.w	ip, #3
 80017f8:	f022 0910 	bic.w	r9, r2, #16
 80017fc:	fa0c fc07 	lsl.w	ip, ip, r7
 8001800:	f109 34ff 	add.w	r4, r9, #4294967295
 8001804:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001808:	2c01      	cmp	r4, #1
 800180a:	d812      	bhi.n	8001832 <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 800180c:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800180e:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001812:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001816:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800181a:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181e:	40bc      	lsls	r4, r7
 8001820:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 8001824:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001826:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001828:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800182c:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 8001830:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001832:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001834:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800183c:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001840:	fa04 f407 	lsl.w	r4, r4, r7
 8001844:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 8001848:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184a:	d115      	bne.n	8001878 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 800184c:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800184e:	f006 0907 	and.w	r9, r6, #7
 8001852:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001856:	f8de 4010 	ldr.w	r4, [lr, #16]
 800185a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800185e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8001862:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001866:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800186a:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800186e:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001872:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001876:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 8001878:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187a:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800187e:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001882:	40bb      	lsls	r3, r7
 8001884:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 8001888:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188a:	00d3      	lsls	r3, r2, #3
 800188c:	d56e      	bpl.n	800196c <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_GPIO_Init+0x210>)
 8001890:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001894:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800189a:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	f047 0c02 	orr.w	ip, r7, #2
 80018a2:	4f4f      	ldr	r7, [pc, #316]	; (80019e0 <HAL_GPIO_Init+0x214>)
 80018a4:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018a6:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ac:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 80018b4:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018b8:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018bc:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018c0:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	f8cd c004 	str.w	ip, [sp, #4]
 80018c6:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80018ca:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ce:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018d2:	d026      	beq.n	8001922 <HAL_GPIO_Init+0x156>
 80018d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d8:	4298      	cmp	r0, r3
 80018da:	d055      	beq.n	8001988 <HAL_GPIO_Init+0x1bc>
 80018dc:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <HAL_GPIO_Init+0x218>)
 80018de:	4298      	cmp	r0, r3
 80018e0:	d04c      	beq.n	800197c <HAL_GPIO_Init+0x1b0>
 80018e2:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_GPIO_Init+0x21c>)
 80018e4:	4298      	cmp	r0, r3
 80018e6:	d05b      	beq.n	80019a0 <HAL_GPIO_Init+0x1d4>
 80018e8:	4b40      	ldr	r3, [pc, #256]	; (80019ec <HAL_GPIO_Init+0x220>)
 80018ea:	4298      	cmp	r0, r3
 80018ec:	d05e      	beq.n	80019ac <HAL_GPIO_Init+0x1e0>
 80018ee:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <HAL_GPIO_Init+0x224>)
 80018f0:	4298      	cmp	r0, r3
 80018f2:	d04f      	beq.n	8001994 <HAL_GPIO_Init+0x1c8>
 80018f4:	f8df c100 	ldr.w	ip, [pc, #256]	; 80019f8 <HAL_GPIO_Init+0x22c>
 80018f8:	4560      	cmp	r0, ip
 80018fa:	d05d      	beq.n	80019b8 <HAL_GPIO_Init+0x1ec>
 80018fc:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80019fc <HAL_GPIO_Init+0x230>
 8001900:	4560      	cmp	r0, ip
 8001902:	d05f      	beq.n	80019c4 <HAL_GPIO_Init+0x1f8>
 8001904:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8001a00 <HAL_GPIO_Init+0x234>
 8001908:	4560      	cmp	r0, ip
 800190a:	d061      	beq.n	80019d0 <HAL_GPIO_Init+0x204>
 800190c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8001a04 <HAL_GPIO_Init+0x238>
 8001910:	4560      	cmp	r0, ip
 8001912:	bf0c      	ite	eq
 8001914:	f04f 0c09 	moveq.w	ip, #9
 8001918:	f04f 0c0a 	movne.w	ip, #10
 800191c:	fa0c f309 	lsl.w	r3, ip, r9
 8001920:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001922:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 8001924:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 8001926:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192a:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 800192c:	bf4c      	ite	mi
 800192e:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8001930:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001932:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001934:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 8001938:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 800193c:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 8001940:	bf4c      	ite	mi
 8001942:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8001944:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 8001946:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 800194a:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194c:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800194e:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 8001952:	bf4c      	ite	mi
 8001954:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8001956:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 800195a:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 800195c:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 800195e:	bf54      	ite	pl
 8001960:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 8001964:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 800196c:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800196e:	fa31 f306 	lsrs.w	r3, r1, r6
 8001972:	f47f af36 	bne.w	80017e2 <HAL_GPIO_Init+0x16>
  }
}
 8001976:	b003      	add	sp, #12
 8001978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800197c:	f04f 0c02 	mov.w	ip, #2
 8001980:	fa0c f309 	lsl.w	r3, ip, r9
 8001984:	431c      	orrs	r4, r3
 8001986:	e7cc      	b.n	8001922 <HAL_GPIO_Init+0x156>
 8001988:	f04f 0c01 	mov.w	ip, #1
 800198c:	fa0c f309 	lsl.w	r3, ip, r9
 8001990:	431c      	orrs	r4, r3
 8001992:	e7c6      	b.n	8001922 <HAL_GPIO_Init+0x156>
 8001994:	f04f 0c05 	mov.w	ip, #5
 8001998:	fa0c f309 	lsl.w	r3, ip, r9
 800199c:	431c      	orrs	r4, r3
 800199e:	e7c0      	b.n	8001922 <HAL_GPIO_Init+0x156>
 80019a0:	f04f 0c03 	mov.w	ip, #3
 80019a4:	fa0c f309 	lsl.w	r3, ip, r9
 80019a8:	431c      	orrs	r4, r3
 80019aa:	e7ba      	b.n	8001922 <HAL_GPIO_Init+0x156>
 80019ac:	f04f 0c04 	mov.w	ip, #4
 80019b0:	fa0c f309 	lsl.w	r3, ip, r9
 80019b4:	431c      	orrs	r4, r3
 80019b6:	e7b4      	b.n	8001922 <HAL_GPIO_Init+0x156>
 80019b8:	f04f 0c06 	mov.w	ip, #6
 80019bc:	fa0c f309 	lsl.w	r3, ip, r9
 80019c0:	431c      	orrs	r4, r3
 80019c2:	e7ae      	b.n	8001922 <HAL_GPIO_Init+0x156>
 80019c4:	f04f 0c07 	mov.w	ip, #7
 80019c8:	fa0c f309 	lsl.w	r3, ip, r9
 80019cc:	431c      	orrs	r4, r3
 80019ce:	e7a8      	b.n	8001922 <HAL_GPIO_Init+0x156>
 80019d0:	f04f 0c08 	mov.w	ip, #8
 80019d4:	fa0c f309 	lsl.w	r3, ip, r9
 80019d8:	431c      	orrs	r4, r3
 80019da:	e7a2      	b.n	8001922 <HAL_GPIO_Init+0x156>
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58000400 	.word	0x58000400
 80019e4:	58020800 	.word	0x58020800
 80019e8:	58020c00 	.word	0x58020c00
 80019ec:	58021000 	.word	0x58021000
 80019f0:	58021400 	.word	0x58021400
 80019f4:	58000080 	.word	0x58000080
 80019f8:	58021800 	.word	0x58021800
 80019fc:	58021c00 	.word	0x58021c00
 8001a00:	58022000 	.word	0x58022000
 8001a04:	58022400 	.word	0x58022400

08001a08 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a08:	6903      	ldr	r3, [r0, #16]
 8001a0a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001a0c:	bf14      	ite	ne
 8001a0e:	2001      	movne	r0, #1
 8001a10:	2000      	moveq	r0, #0
 8001a12:	4770      	bx	lr

08001a14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a14:	b902      	cbnz	r2, 8001a18 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a16:	0409      	lsls	r1, r1, #16
 8001a18:	6181      	str	r1, [r0, #24]
  }
}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_HSEM_FastTake+0x14>)
 8001a1e:	3020      	adds	r0, #32
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_HSEM_FastTake+0x18>)
 8001a22:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8001a26:	1ac0      	subs	r0, r0, r3
 8001a28:	bf18      	it	ne
 8001a2a:	2001      	movne	r0, #1
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	58026400 	.word	0x58026400
 8001a34:	80000300 	.word	0x80000300

08001a38 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a38:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8001a3c:	4b01      	ldr	r3, [pc, #4]	; (8001a44 <HAL_HSEM_Release+0xc>)
 8001a3e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8001a42:	4770      	bx	lr
 8001a44:	58026400 	.word	0x58026400

08001a48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	f000 808a 	beq.w	8001b66 <HAL_PCD_Init+0x11e>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a52:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001a56:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8001a58:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a5e:	b343      	cbz	r3, 8001ab2 <HAL_PCD_Init+0x6a>
 8001a60:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a62:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a64:	466f      	mov	r7, sp
 8001a66:	1d26      	adds	r6, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a68:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a6c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a6e:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a70:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8001a74:	bf08      	it	eq
 8001a76:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001a78:	f003 f996 	bl	8004da8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a7c:	f855 eb10 	ldr.w	lr, [r5], #16
 8001a80:	46ac      	mov	ip, r5
 8001a82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001a86:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001a88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001a8c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001a8e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001a92:	e887 0003 	stmia.w	r7, {r0, r1}
 8001a96:	4670      	mov	r0, lr
 8001a98:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a9c:	f003 f91a 	bl	8004cd4 <USB_CoreInit>
 8001aa0:	4607      	mov	r7, r0
 8001aa2:	b160      	cbz	r0, 8001abe <HAL_PCD_Init+0x76>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8001aa4:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aa6:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001aa8:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aaa:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 8001aae:	b00b      	add	sp, #44	; 0x2c
 8001ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001ab2:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001ab6:	f7ff fc5b 	bl	8001370 <HAL_PCD_MspInit>
 8001aba:	6820      	ldr	r0, [r4, #0]
 8001abc:	e7d1      	b.n	8001a62 <HAL_PCD_Init+0x1a>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001abe:	4601      	mov	r1, r0
 8001ac0:	6820      	ldr	r0, [r4, #0]
 8001ac2:	f003 f979 	bl	8004db8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac6:	6860      	ldr	r0, [r4, #4]
 8001ac8:	b360      	cbz	r0, 8001b24 <HAL_PCD_Init+0xdc>
 8001aca:	4639      	mov	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8001acc:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ad0:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8001ad2:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad6:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8001ad8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8001adc:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ae0:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae4:	b2f9      	uxtb	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8001ae6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aea:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8001af0:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001af2:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af6:	d3ec      	bcc.n	8001ad2 <HAL_PCD_Init+0x8a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af8:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8001afa:	4611      	mov	r1, r2
 8001afc:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b00:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8001b02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8001b06:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0a:	b2fa      	uxtb	r2, r7
    hpcd->OUT_ep[i].is_in = 0U;
 8001b0c:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b10:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b12:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b16:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b1a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b1e:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b22:	d3eb      	bcc.n	8001afc <HAL_PCD_Init+0xb4>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b24:	466f      	mov	r7, sp
 8001b26:	f8d4 c000 	ldr.w	ip, [r4]
 8001b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b30:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001b32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b36:	e887 0003 	stmia.w	r7, {r0, r1}
 8001b3a:	4660      	mov	r0, ip
 8001b3c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b40:	f003 f952 	bl	8004de8 <USB_DevInit>
 8001b44:	4605      	mov	r5, r0
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d1ac      	bne.n	8001aa4 <HAL_PCD_Init+0x5c>
  hpcd->State = HAL_PCD_STATE_READY;
 8001b4a:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8001b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8001b4e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8001b52:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8001b54:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8001b58:	d009      	beq.n	8001b6e <HAL_PCD_Init+0x126>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b5a:	6820      	ldr	r0, [r4, #0]
 8001b5c:	f003 fa28 	bl	8004fb0 <USB_DevDisconnect>
}
 8001b60:	4628      	mov	r0, r5
 8001b62:	b00b      	add	sp, #44	; 0x2c
 8001b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001b66:	2501      	movs	r5, #1
}
 8001b68:	4628      	mov	r0, r5
 8001b6a:	b00b      	add	sp, #44	; 0x2c
 8001b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f000 f802 	bl	8001b78 <HAL_PCDEx_ActivateLPM>
 8001b74:	e7f1      	b.n	8001b5a <HAL_PCD_Init+0x112>
 8001b76:	bf00      	nop

08001b78 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b78:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8001b7a:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001b7c:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_PCDEx_ActivateLPM+0x28>)
{
 8001b7e:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 8001b80:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 8001b84:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b86:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 8001b88:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b8a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 8001b8e:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 8001b92:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b94:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001b96:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b98:	430a      	orrs	r2, r1
}
 8001b9a:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001b9e:	4770      	bx	lr
 8001ba0:	10000003 	.word	0x10000003

08001ba4 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_PWREx_ConfigSupply+0x7c>)
 8001ba6:	68d3      	ldr	r3, [r2, #12]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	2b06      	cmp	r3, #6
 8001bae:	d006      	beq.n	8001bbe <HAL_PWREx_ConfigSupply+0x1a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bb0:	68d3      	ldr	r3, [r2, #12]
 8001bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001bb6:	1a18      	subs	r0, r3, r0
 8001bb8:	bf18      	it	ne
 8001bba:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001bbc:	4770      	bx	lr
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001bbe:	68d3      	ldr	r3, [r2, #12]
 8001bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bc4:	4303      	orrs	r3, r0
{
 8001bc6:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001bc8:	60d3      	str	r3, [r2, #12]
 8001bca:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bcc:	4615      	mov	r5, r2
  tickstart = HAL_GetTick ();
 8001bce:	f7ff fca1 	bl	8001514 <HAL_GetTick>
 8001bd2:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bd4:	e005      	b.n	8001be2 <HAL_PWREx_ConfigSupply+0x3e>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bd6:	f7ff fc9d 	bl	8001514 <HAL_GetTick>
 8001bda:	1b80      	subs	r0, r0, r6
 8001bdc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001be0:	d81b      	bhi.n	8001c1a <HAL_PWREx_ConfigSupply+0x76>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001be2:	686b      	ldr	r3, [r5, #4]
 8001be4:	049a      	lsls	r2, r3, #18
 8001be6:	d5f6      	bpl.n	8001bd6 <HAL_PWREx_ConfigSupply+0x32>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001be8:	f1a4 031d 	sub.w	r3, r4, #29
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d905      	bls.n	8001bfc <HAL_PWREx_ConfigSupply+0x58>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8001bf0:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001bf4:	2801      	cmp	r0, #1
 8001bf6:	d901      	bls.n	8001bfc <HAL_PWREx_ConfigSupply+0x58>
  return HAL_OK;
 8001bf8:	2000      	movs	r0, #0
}
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8001bfc:	f7ff fc8a 	bl	8001514 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c00:	4c07      	ldr	r4, [pc, #28]	; (8001c20 <HAL_PWREx_ConfigSupply+0x7c>)
    tickstart = HAL_GetTick ();
 8001c02:	4605      	mov	r5, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c04:	e005      	b.n	8001c12 <HAL_PWREx_ConfigSupply+0x6e>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c06:	f7ff fc85 	bl	8001514 <HAL_GetTick>
 8001c0a:	1b40      	subs	r0, r0, r5
 8001c0c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c10:	d803      	bhi.n	8001c1a <HAL_PWREx_ConfigSupply+0x76>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c12:	68e3      	ldr	r3, [r4, #12]
 8001c14:	03db      	lsls	r3, r3, #15
 8001c16:	d5f6      	bpl.n	8001c06 <HAL_PWREx_ConfigSupply+0x62>
 8001c18:	e7ee      	b.n	8001bf8 <HAL_PWREx_ConfigSupply+0x54>
      return HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
}
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}
 8001c1e:	bf00      	nop
 8001c20:	58024800 	.word	0x58024800

08001c24 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001c24:	4a02      	ldr	r2, [pc, #8]	; (8001c30 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8001c26:	68d3      	ldr	r3, [r2, #12]
 8001c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2c:	60d3      	str	r3, [r2, #12]
}
 8001c2e:	4770      	bx	lr
 8001c30:	58024800 	.word	0x58024800

08001c34 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c34:	2800      	cmp	r0, #0
 8001c36:	f000 819d 	beq.w	8001f74 <HAL_RCC_OscConfig+0x340>
{
 8001c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3c:	6803      	ldr	r3, [r0, #0]
 8001c3e:	4604      	mov	r4, r0
 8001c40:	07d9      	lsls	r1, r3, #31
 8001c42:	d533      	bpl.n	8001cac <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c44:	49a7      	ldr	r1, [pc, #668]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001c46:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c48:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c4e:	2a10      	cmp	r2, #16
 8001c50:	f000 8112 	beq.w	8001e78 <HAL_RCC_OscConfig+0x244>
 8001c54:	2a18      	cmp	r2, #24
 8001c56:	f000 810a 	beq.w	8001e6e <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5a:	6863      	ldr	r3, [r4, #4]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d010      	beq.n	8001c84 <HAL_RCC_OscConfig+0x50>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 816f 	beq.w	8001f46 <HAL_RCC_OscConfig+0x312>
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	4b9d      	ldr	r3, [pc, #628]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f000 81e4 	beq.w	800203c <HAL_RCC_OscConfig+0x408>
 8001c74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e004      	b.n	8001c8e <HAL_RCC_OscConfig+0x5a>
 8001c84:	4a97      	ldr	r2, [pc, #604]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001c86:	6813      	ldr	r3, [r2, #0]
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fc41 	bl	8001514 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c92:	4d94      	ldr	r5, [pc, #592]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8001c94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c96:	e005      	b.n	8001ca4 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fc3c 	bl	8001514 <HAL_GetTick>
 8001c9c:	1b80      	subs	r0, r0, r6
 8001c9e:	2864      	cmp	r0, #100	; 0x64
 8001ca0:	f200 814f 	bhi.w	8001f42 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca4:	682b      	ldr	r3, [r5, #0]
 8001ca6:	039f      	lsls	r7, r3, #14
 8001ca8:	d5f6      	bpl.n	8001c98 <HAL_RCC_OscConfig+0x64>
 8001caa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cac:	0799      	lsls	r1, r3, #30
 8001cae:	f100 808e 	bmi.w	8001dce <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cb2:	06d9      	lsls	r1, r3, #27
 8001cb4:	d534      	bpl.n	8001d20 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb6:	4a8b      	ldr	r2, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001cb8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cba:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	f000 80e9 	beq.w	8001e98 <HAL_RCC_OscConfig+0x264>
 8001cc6:	2b18      	cmp	r3, #24
 8001cc8:	f000 80e1 	beq.w	8001e8e <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001ccc:	69e3      	ldr	r3, [r4, #28]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8178 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x390>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cd4:	4b83      	ldr	r3, [pc, #524]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001cd6:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cd8:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8001cda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fc18 	bl	8001514 <HAL_GetTick>
 8001ce4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ce6:	e005      	b.n	8001cf4 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fc14 	bl	8001514 <HAL_GetTick>
 8001cec:	1b80      	subs	r0, r0, r6
 8001cee:	2802      	cmp	r0, #2
 8001cf0:	f200 8127 	bhi.w	8001f42 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	05db      	lsls	r3, r3, #23
 8001cf8:	d5f6      	bpl.n	8001ce8 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cfa:	f7ff fc23 	bl	8001544 <HAL_GetREVID>
 8001cfe:	f241 0303 	movw	r3, #4099	; 0x1003
 8001d02:	4298      	cmp	r0, r3
 8001d04:	f200 825d 	bhi.w	80021c2 <HAL_RCC_OscConfig+0x58e>
 8001d08:	6a22      	ldr	r2, [r4, #32]
 8001d0a:	686b      	ldr	r3, [r5, #4]
 8001d0c:	2a20      	cmp	r2, #32
 8001d0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d12:	bf0c      	ite	eq
 8001d14:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001d18:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8001d1c:	606b      	str	r3, [r5, #4]
 8001d1e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d20:	071d      	lsls	r5, r3, #28
 8001d22:	d517      	bpl.n	8001d54 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d24:	6963      	ldr	r3, [r4, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8126 	beq.w	8001f78 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2c:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001d2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d30:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001d38:	f7ff fbec 	bl	8001514 <HAL_GetTick>
 8001d3c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d3e:	e005      	b.n	8001d4c <HAL_RCC_OscConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff fbe8 	bl	8001514 <HAL_GetTick>
 8001d44:	1b80      	subs	r0, r0, r6
 8001d46:	2802      	cmp	r0, #2
 8001d48:	f200 80fb 	bhi.w	8001f42 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d4c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d4e:	0798      	lsls	r0, r3, #30
 8001d50:	d5f6      	bpl.n	8001d40 <HAL_RCC_OscConfig+0x10c>
 8001d52:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d54:	069a      	lsls	r2, r3, #26
 8001d56:	d517      	bpl.n	8001d88 <HAL_RCC_OscConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d58:	69a3      	ldr	r3, [r4, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 811f 	beq.w	8001f9e <HAL_RCC_OscConfig+0x36a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d60:	4b60      	ldr	r3, [pc, #384]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001d62:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d64:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8001d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d6a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fbd2 	bl	8001514 <HAL_GetTick>
 8001d70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d72:	e005      	b.n	8001d80 <HAL_RCC_OscConfig+0x14c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d74:	f7ff fbce 	bl	8001514 <HAL_GetTick>
 8001d78:	1b80      	subs	r0, r0, r6
 8001d7a:	2802      	cmp	r0, #2
 8001d7c:	f200 80e1 	bhi.w	8001f42 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d80:	682b      	ldr	r3, [r5, #0]
 8001d82:	049f      	lsls	r7, r3, #18
 8001d84:	d5f6      	bpl.n	8001d74 <HAL_RCC_OscConfig+0x140>
 8001d86:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	0759      	lsls	r1, r3, #29
 8001d8a:	f100 80a0 	bmi.w	8001ece <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001d90:	b1d8      	cbz	r0, 8001dca <HAL_RCC_OscConfig+0x196>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d92:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001d9a:	2a18      	cmp	r2, #24
 8001d9c:	f000 81c9 	beq.w	8002132 <HAL_RCC_OscConfig+0x4fe>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da0:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da4:	f000 815b 	beq.w	800205e <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dac:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8001dae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001db0:	f7ff fbb0 	bl	8001514 <HAL_GetTick>
 8001db4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff fbac 	bl	8001514 <HAL_GetTick>
 8001dbc:	1b40      	subs	r0, r0, r5
 8001dbe:	2802      	cmp	r0, #2
 8001dc0:	f200 80bf 	bhi.w	8001f42 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	019b      	lsls	r3, r3, #6
 8001dc8:	d4f6      	bmi.n	8001db8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001dca:	2000      	movs	r0, #0
}
 8001dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4a45      	ldr	r2, [pc, #276]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001dd0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dd2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001dd4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8001dd8:	d02f      	beq.n	8001e3a <HAL_RCC_OscConfig+0x206>
 8001dda:	2b18      	cmp	r3, #24
 8001ddc:	d02b      	beq.n	8001e36 <HAL_RCC_OscConfig+0x202>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dde:	68e2      	ldr	r2, [r4, #12]
 8001de0:	2a00      	cmp	r2, #0
 8001de2:	f000 8103 	beq.w	8001fec <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001de6:	493f      	ldr	r1, [pc, #252]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001de8:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dea:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dec:	f023 0319 	bic.w	r3, r3, #25
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001df4:	f7ff fb8e 	bl	8001514 <HAL_GetTick>
 8001df8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_OscConfig+0x1d4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fb8a 	bl	8001514 <HAL_GetTick>
 8001e00:	1b80      	subs	r0, r0, r6
 8001e02:	2802      	cmp	r0, #2
 8001e04:	f200 809d 	bhi.w	8001f42 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e08:	682b      	ldr	r3, [r5, #0]
 8001e0a:	075f      	lsls	r7, r3, #29
 8001e0c:	d5f6      	bpl.n	8001dfc <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	f7ff fb99 	bl	8001544 <HAL_GetREVID>
 8001e12:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e16:	4298      	cmp	r0, r3
 8001e18:	f200 81e2 	bhi.w	80021e0 <HAL_RCC_OscConfig+0x5ac>
 8001e1c:	6922      	ldr	r2, [r4, #16]
 8001e1e:	686b      	ldr	r3, [r5, #4]
 8001e20:	2a40      	cmp	r2, #64	; 0x40
 8001e22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e26:	bf0c      	ite	eq
 8001e28:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8001e2c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8001e30:	606b      	str	r3, [r5, #4]
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	e73d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e36:	0792      	lsls	r2, r2, #30
 8001e38:	d1d1      	bne.n	8001dde <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	075b      	lsls	r3, r3, #29
 8001e40:	d501      	bpl.n	8001e46 <HAL_RCC_OscConfig+0x212>
 8001e42:	68e3      	ldr	r3, [r4, #12]
 8001e44:	b30b      	cbz	r3, 8001e8a <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	f7ff fb7d 	bl	8001544 <HAL_GetREVID>
 8001e4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e4e:	4298      	cmp	r0, r3
 8001e50:	f200 80e0 	bhi.w	8002014 <HAL_RCC_OscConfig+0x3e0>
 8001e54:	6922      	ldr	r2, [r4, #16]
 8001e56:	2a40      	cmp	r2, #64	; 0x40
 8001e58:	f000 80f8 	beq.w	800204c <HAL_RCC_OscConfig+0x418>
 8001e5c:	4921      	ldr	r1, [pc, #132]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001e5e:	684b      	ldr	r3, [r1, #4]
 8001e60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e64:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001e68:	604b      	str	r3, [r1, #4]
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	e721      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e6e:	f001 0103 	and.w	r1, r1, #3
 8001e72:	2902      	cmp	r1, #2
 8001e74:	f47f aef1 	bne.w	8001c5a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	0392      	lsls	r2, r2, #14
 8001e7e:	f57f af15 	bpl.w	8001cac <HAL_RCC_OscConfig+0x78>
 8001e82:	6862      	ldr	r2, [r4, #4]
 8001e84:	2a00      	cmp	r2, #0
 8001e86:	f47f af11 	bne.w	8001cac <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 8001e8a:	2001      	movs	r0, #1
}
 8001e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e8e:	f002 0203 	and.w	r2, r2, #3
 8001e92:	2a01      	cmp	r2, #1
 8001e94:	f47f af1a 	bne.w	8001ccc <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	05da      	lsls	r2, r3, #23
 8001e9e:	d502      	bpl.n	8001ea6 <HAL_RCC_OscConfig+0x272>
 8001ea0:	69e3      	ldr	r3, [r4, #28]
 8001ea2:	2b80      	cmp	r3, #128	; 0x80
 8001ea4:	d1f1      	bne.n	8001e8a <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ea6:	f7ff fb4d 	bl	8001544 <HAL_GetREVID>
 8001eaa:	f241 0303 	movw	r3, #4099	; 0x1003
 8001eae:	4298      	cmp	r0, r3
 8001eb0:	f200 80ba 	bhi.w	8002028 <HAL_RCC_OscConfig+0x3f4>
 8001eb4:	6a22      	ldr	r2, [r4, #32]
 8001eb6:	2a20      	cmp	r2, #32
 8001eb8:	f000 81a1 	beq.w	80021fe <HAL_RCC_OscConfig+0x5ca>
 8001ebc:	4909      	ldr	r1, [pc, #36]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001ebe:	684b      	ldr	r3, [r1, #4]
 8001ec0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ec4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001ec8:	604b      	str	r3, [r1, #4]
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	e728      	b.n	8001d20 <HAL_RCC_OscConfig+0xec>
    PWR->CR1 |= PWR_CR1_DBP;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x2b4>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed2:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8001ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001eda:	f7ff fb1b 	bl	8001514 <HAL_GetTick>
 8001ede:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_OscConfig+0x2c2>
 8001ee2:	bf00      	nop
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001eec:	f7ff fb12 	bl	8001514 <HAL_GetTick>
 8001ef0:	1b80      	subs	r0, r0, r6
 8001ef2:	2864      	cmp	r0, #100	; 0x64
 8001ef4:	d825      	bhi.n	8001f42 <HAL_RCC_OscConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ef6:	682b      	ldr	r3, [r5, #0]
 8001ef8:	05da      	lsls	r2, r3, #23
 8001efa:	d5f7      	bpl.n	8001eec <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	68a3      	ldr	r3, [r4, #8]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	f000 8177 	beq.w	80021f2 <HAL_RCC_OscConfig+0x5be>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8142 	beq.w	800218e <HAL_RCC_OscConfig+0x55a>
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	4bb1      	ldr	r3, [pc, #708]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
 8001f0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f10:	f000 817e 	beq.w	8002210 <HAL_RCC_OscConfig+0x5dc>
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	671a      	str	r2, [r3, #112]	; 0x70
 8001f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f1c:	f022 0204 	bic.w	r2, r2, #4
 8001f20:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001f22:	f7ff faf7 	bl	8001514 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f26:	4dab      	ldr	r5, [pc, #684]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
      tickstart = HAL_GetTick();
 8001f28:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f2e:	e004      	b.n	8001f3a <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff faf0 	bl	8001514 <HAL_GetTick>
 8001f34:	1bc0      	subs	r0, r0, r7
 8001f36:	42b0      	cmp	r0, r6
 8001f38:	d803      	bhi.n	8001f42 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f3a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f3c:	079b      	lsls	r3, r3, #30
 8001f3e:	d5f7      	bpl.n	8001f30 <HAL_RCC_OscConfig+0x2fc>
 8001f40:	e725      	b.n	8001d8e <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8001f42:	2003      	movs	r0, #3
}
 8001f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f46:	4ba3      	ldr	r3, [pc, #652]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
 8001f48:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f4a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fadb 	bl	8001514 <HAL_GetTick>
 8001f5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f60:	e004      	b.n	8001f6c <HAL_RCC_OscConfig+0x338>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f62:	f7ff fad7 	bl	8001514 <HAL_GetTick>
 8001f66:	1b80      	subs	r0, r0, r6
 8001f68:	2864      	cmp	r0, #100	; 0x64
 8001f6a:	d8ea      	bhi.n	8001f42 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	0398      	lsls	r0, r3, #14
 8001f70:	d4f7      	bmi.n	8001f62 <HAL_RCC_OscConfig+0x32e>
 8001f72:	e69a      	b.n	8001caa <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 8001f74:	2001      	movs	r0, #1
}
 8001f76:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b96      	ldr	r3, [pc, #600]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
 8001f7a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f7c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001f84:	f7ff fac6 	bl	8001514 <HAL_GetTick>
 8001f88:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f8a:	e004      	b.n	8001f96 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fac2 	bl	8001514 <HAL_GetTick>
 8001f90:	1b80      	subs	r0, r0, r6
 8001f92:	2802      	cmp	r0, #2
 8001f94:	d8d5      	bhi.n	8001f42 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f96:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f98:	0799      	lsls	r1, r3, #30
 8001f9a:	d4f7      	bmi.n	8001f8c <HAL_RCC_OscConfig+0x358>
 8001f9c:	e6d9      	b.n	8001d52 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSI48_DISABLE();
 8001f9e:	4b8d      	ldr	r3, [pc, #564]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fa2:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8001fa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fa8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001faa:	f7ff fab3 	bl	8001514 <HAL_GetTick>
 8001fae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fb0:	e004      	b.n	8001fbc <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001fb2:	f7ff faaf 	bl	8001514 <HAL_GetTick>
 8001fb6:	1b80      	subs	r0, r0, r6
 8001fb8:	2802      	cmp	r0, #2
 8001fba:	d8c2      	bhi.n	8001f42 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	0498      	lsls	r0, r3, #18
 8001fc0:	d4f7      	bmi.n	8001fb2 <HAL_RCC_OscConfig+0x37e>
 8001fc2:	e6e0      	b.n	8001d86 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_DISABLE();
 8001fc4:	4b83      	ldr	r3, [pc, #524]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fc8:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8001fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fd0:	f7ff faa0 	bl	8001514 <HAL_GetTick>
 8001fd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fd6:	e004      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fa9c 	bl	8001514 <HAL_GetTick>
 8001fdc:	1b80      	subs	r0, r0, r6
 8001fde:	2802      	cmp	r0, #2
 8001fe0:	d8af      	bhi.n	8001f42 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fe2:	682b      	ldr	r3, [r5, #0]
 8001fe4:	05df      	lsls	r7, r3, #23
 8001fe6:	d4f7      	bmi.n	8001fd8 <HAL_RCC_OscConfig+0x3a4>
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	e699      	b.n	8001d20 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8001fec:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
 8001fee:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ff0:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fa8c 	bl	8001514 <HAL_GetTick>
 8001ffc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ffe:	e004      	b.n	800200a <HAL_RCC_OscConfig+0x3d6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002000:	f7ff fa88 	bl	8001514 <HAL_GetTick>
 8002004:	1b80      	subs	r0, r0, r6
 8002006:	2802      	cmp	r0, #2
 8002008:	d89b      	bhi.n	8001f42 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800200a:	682b      	ldr	r3, [r5, #0]
 800200c:	0758      	lsls	r0, r3, #29
 800200e:	d4f7      	bmi.n	8002000 <HAL_RCC_OscConfig+0x3cc>
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	e64e      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4a6f      	ldr	r2, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
 8002016:	6921      	ldr	r1, [r4, #16]
 8002018:	6853      	ldr	r3, [r2, #4]
 800201a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800201e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002022:	6053      	str	r3, [r2, #4]
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	e644      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
 800202a:	6a21      	ldr	r1, [r4, #32]
 800202c:	68d3      	ldr	r3, [r2, #12]
 800202e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002032:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002036:	60d3      	str	r3, [r2, #12]
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	e671      	b.n	8001d20 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e620      	b.n	8001c8e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4a61      	ldr	r2, [pc, #388]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
 800204e:	6853      	ldr	r3, [r2, #4]
 8002050:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	6053      	str	r3, [r2, #4]
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	e629      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_PLL_DISABLE();
 800205e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002062:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8002064:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002066:	f7ff fa55 	bl	8001514 <HAL_GetTick>
 800206a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800206c:	e005      	b.n	800207a <HAL_RCC_OscConfig+0x446>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206e:	f7ff fa51 	bl	8001514 <HAL_GetTick>
 8002072:	1b80      	subs	r0, r0, r6
 8002074:	2802      	cmp	r0, #2
 8002076:	f63f af64 	bhi.w	8001f42 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800207a:	682b      	ldr	r3, [r5, #0]
 800207c:	0199      	lsls	r1, r3, #6
 800207e:	d4f6      	bmi.n	800206e <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002080:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002082:	4b55      	ldr	r3, [pc, #340]	; (80021d8 <HAL_RCC_OscConfig+0x5a4>)
 8002084:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002086:	4013      	ands	r3, r2
 8002088:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800208a:	4954      	ldr	r1, [pc, #336]	; (80021dc <HAL_RCC_OscConfig+0x5a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800208e:	4e51      	ldr	r6, [pc, #324]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002090:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002094:	62ab      	str	r3, [r5, #40]	; 0x28
 8002096:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8002098:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800209c:	3f01      	subs	r7, #1
 800209e:	1e50      	subs	r0, r2, #1
 80020a0:	3b01      	subs	r3, #1
 80020a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020a4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	0400      	lsls	r0, r0, #16
 80020ac:	3a01      	subs	r2, #1
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80020b4:	0612      	lsls	r2, r2, #24
 80020b6:	4303      	orrs	r3, r0
 80020b8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80020bc:	433b      	orrs	r3, r7
 80020be:	4313      	orrs	r3, r2
 80020c0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80020c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020ca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80020cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80020ce:	4011      	ands	r1, r2
 80020d0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80020d4:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020da:	f023 030c 	bic.w	r3, r3, #12
 80020de:	4313      	orrs	r3, r2
 80020e0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80020e6:	f023 0302 	bic.w	r3, r3, #2
 80020ea:	4313      	orrs	r3, r2
 80020ec:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002106:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800210e:	682b      	ldr	r3, [r5, #0]
 8002110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002114:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002116:	f7ff f9fd 	bl	8001514 <HAL_GetTick>
 800211a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800211c:	e005      	b.n	800212a <HAL_RCC_OscConfig+0x4f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7ff f9f9 	bl	8001514 <HAL_GetTick>
 8002122:	1b00      	subs	r0, r0, r4
 8002124:	2802      	cmp	r0, #2
 8002126:	f63f af0c 	bhi.w	8001f42 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800212a:	6833      	ldr	r3, [r6, #0]
 800212c:	019a      	lsls	r2, r3, #6
 800212e:	d5f6      	bpl.n	800211e <HAL_RCC_OscConfig+0x4ea>
 8002130:	e64b      	b.n	8001dca <HAL_RCC_OscConfig+0x196>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002132:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002136:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002138:	f43f ae48 	beq.w	8001dcc <HAL_RCC_OscConfig+0x198>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002140:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002142:	428b      	cmp	r3, r1
 8002144:	f47f aea1 	bne.w	8001e8a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002148:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800214e:	429a      	cmp	r2, r3
 8002150:	f47f ae9b 	bne.w	8001e8a <HAL_RCC_OscConfig+0x256>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002154:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002156:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800215a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	f47f ae94 	bne.w	8001e8a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002164:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8002168:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	f47f ae8d 	bne.w	8001e8a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002170:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002172:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8002176:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	f47f ae86 	bne.w	8001e8a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800217e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002180:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8002184:	3801      	subs	r0, #1
    return HAL_ERROR;
 8002186:	1a28      	subs	r0, r5, r0
 8002188:	bf18      	it	ne
 800218a:	2001      	movne	r0, #1
 800218c:	e61e      	b.n	8001dcc <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_OscConfig+0x5a0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002196:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	671a      	str	r2, [r3, #112]	; 0x70
 800219e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021a0:	f022 0204 	bic.w	r2, r2, #4
 80021a4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80021a6:	f7ff f9b5 	bl	8001514 <HAL_GetTick>
 80021aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ac:	e005      	b.n	80021ba <HAL_RCC_OscConfig+0x586>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff f9b1 	bl	8001514 <HAL_GetTick>
 80021b2:	1b80      	subs	r0, r0, r6
 80021b4:	42b8      	cmp	r0, r7
 80021b6:	f63f aec4 	bhi.w	8001f42 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021bc:	0798      	lsls	r0, r3, #30
 80021be:	d4f6      	bmi.n	80021ae <HAL_RCC_OscConfig+0x57a>
 80021c0:	e5e5      	b.n	8001d8e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021c2:	68eb      	ldr	r3, [r5, #12]
 80021c4:	6a22      	ldr	r2, [r4, #32]
 80021c6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80021ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021ce:	60eb      	str	r3, [r5, #12]
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	e5a5      	b.n	8001d20 <HAL_RCC_OscConfig+0xec>
 80021d4:	58024400 	.word	0x58024400
 80021d8:	fffffc0c 	.word	0xfffffc0c
 80021dc:	ffff0007 	.word	0xffff0007
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	686b      	ldr	r3, [r5, #4]
 80021e2:	6922      	ldr	r2, [r4, #16]
 80021e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021ec:	606b      	str	r3, [r5, #4]
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	e55f      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f2:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <HAL_RCC_OscConfig+0x5ec>)
 80021f4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
 80021fc:	e691      	b.n	8001f22 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_RCC_OscConfig+0x5ec>)
 8002200:	6853      	ldr	r3, [r2, #4]
 8002202:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800220a:	6053      	str	r3, [r2, #4]
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	e587      	b.n	8001d20 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002210:	f042 0204 	orr.w	r2, r2, #4
 8002214:	671a      	str	r2, [r3, #112]	; 0x70
 8002216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002218:	f042 0201 	orr.w	r2, r2, #1
 800221c:	671a      	str	r2, [r3, #112]	; 0x70
 800221e:	e680      	b.n	8001f22 <HAL_RCC_OscConfig+0x2ee>
 8002220:	58024400 	.word	0x58024400

08002224 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002224:	4a3e      	ldr	r2, [pc, #248]	; (8002320 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002226:	6913      	ldr	r3, [r2, #16]
 8002228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800222c:	2b10      	cmp	r3, #16
 800222e:	d04f      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0xac>
 8002230:	2b18      	cmp	r3, #24
 8002232:	d00b      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x28>
 8002234:	b10b      	cbz	r3, 800223a <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002236:	483b      	ldr	r0, [pc, #236]	; (8002324 <HAL_RCC_GetSysClockFreq+0x100>)
 8002238:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800223a:	6813      	ldr	r3, [r2, #0]
 800223c:	0699      	lsls	r1, r3, #26
 800223e:	d549      	bpl.n	80022d4 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002240:	6813      	ldr	r3, [r2, #0]
 8002242:	4839      	ldr	r0, [pc, #228]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 8002244:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002248:	40d8      	lsrs	r0, r3
 800224a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800224c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800224e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002250:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002252:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8002256:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002258:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 800225a:	b3b0      	cbz	r0, 80022ca <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800225c:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002260:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002264:	f001 0103 	and.w	r1, r1, #3
 8002268:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800226c:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8002270:	2901      	cmp	r1, #1
 8002272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002276:	ee07 3a10 	vmov	s14, r3
 800227a:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 800227e:	d002      	beq.n	8002286 <HAL_RCC_GetSysClockFreq+0x62>
 8002280:	d32d      	bcc.n	80022de <HAL_RCC_GetSysClockFreq+0xba>
 8002282:	2902      	cmp	r1, #2
 8002284:	d028      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002286:	eddf 5a29 	vldr	s11, [pc, #164]	; 800232c <HAL_RCC_GetSysClockFreq+0x108>
 800228a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800228e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800229c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80022a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80022a8:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80022b4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022c6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80022ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022ce:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80022d0:	4817      	ldr	r0, [pc, #92]	; (8002330 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022d2:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022d4:	4814      	ldr	r0, [pc, #80]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80022d6:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022d8:	eddf 5a16 	vldr	s11, [pc, #88]	; 8002334 <HAL_RCC_GetSysClockFreq+0x110>
 80022dc:	e7d5      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022de:	6813      	ldr	r3, [r2, #0]
 80022e0:	069b      	lsls	r3, r3, #26
 80022e2:	d51a      	bpl.n	800231a <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022e4:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022e6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022ea:	490f      	ldr	r1, [pc, #60]	; (8002328 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ec:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022f2:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f8:	ee06 1a90 	vmov	s13, r1
 80022fc:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8002300:	ee06 3a90 	vmov	s13, r3
 8002304:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8002308:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800230c:	ee76 7a05 	vadd.f32	s15, s12, s10
 8002310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002314:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002318:	e7c8      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800231a:	eddf 5a07 	vldr	s11, [pc, #28]	; 8002338 <HAL_RCC_GetSysClockFreq+0x114>
 800231e:	e7b4      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x66>
 8002320:	58024400 	.word	0x58024400
 8002324:	003d0900 	.word	0x003d0900
 8002328:	03d09000 	.word	0x03d09000
 800232c:	4a742400 	.word	0x4a742400
 8002330:	02625a00 	.word	0x02625a00
 8002334:	4c189680 	.word	0x4c189680
 8002338:	4c742400 	.word	0x4c742400

0800233c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800233c:	b178      	cbz	r0, 800235e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233e:	4a8e      	ldr	r2, [pc, #568]	; (8002578 <HAL_RCC_ClockConfig+0x23c>)
 8002340:	6813      	ldr	r3, [r2, #0]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	428b      	cmp	r3, r1
 8002348:	d20b      	bcs.n	8002362 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	6813      	ldr	r3, [r2, #0]
 800234c:	f023 030f 	bic.w	r3, r3, #15
 8002350:	430b      	orrs	r3, r1
 8002352:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002354:	6813      	ldr	r3, [r2, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	428b      	cmp	r3, r1
 800235c:	d001      	beq.n	8002362 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800235e:	2001      	movs	r0, #1
}
 8002360:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002362:	6803      	ldr	r3, [r0, #0]
{
 8002364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002368:	075d      	lsls	r5, r3, #29
 800236a:	d50b      	bpl.n	8002384 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800236c:	4c83      	ldr	r4, [pc, #524]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 800236e:	6905      	ldr	r5, [r0, #16]
 8002370:	69a2      	ldr	r2, [r4, #24]
 8002372:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002376:	4295      	cmp	r5, r2
 8002378:	d904      	bls.n	8002384 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800237a:	69a2      	ldr	r2, [r4, #24]
 800237c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002380:	432a      	orrs	r2, r5
 8002382:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	071c      	lsls	r4, r3, #28
 8002386:	d50b      	bpl.n	80023a0 <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002388:	4c7c      	ldr	r4, [pc, #496]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 800238a:	6945      	ldr	r5, [r0, #20]
 800238c:	69e2      	ldr	r2, [r4, #28]
 800238e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002392:	4295      	cmp	r5, r2
 8002394:	d904      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002396:	69e2      	ldr	r2, [r4, #28]
 8002398:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800239c:	432a      	orrs	r2, r5
 800239e:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	06da      	lsls	r2, r3, #27
 80023a2:	d50b      	bpl.n	80023bc <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023a4:	4c75      	ldr	r4, [pc, #468]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 80023a6:	6985      	ldr	r5, [r0, #24]
 80023a8:	69e2      	ldr	r2, [r4, #28]
 80023aa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80023ae:	4295      	cmp	r5, r2
 80023b0:	d904      	bls.n	80023bc <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023b2:	69e2      	ldr	r2, [r4, #28]
 80023b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023b8:	432a      	orrs	r2, r5
 80023ba:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023bc:	069f      	lsls	r7, r3, #26
 80023be:	d50b      	bpl.n	80023d8 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023c0:	4c6e      	ldr	r4, [pc, #440]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 80023c2:	69c5      	ldr	r5, [r0, #28]
 80023c4:	6a22      	ldr	r2, [r4, #32]
 80023c6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80023ca:	4295      	cmp	r5, r2
 80023cc:	d904      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80023ce:	6a22      	ldr	r2, [r4, #32]
 80023d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023d4:	432a      	orrs	r2, r5
 80023d6:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	079e      	lsls	r6, r3, #30
 80023da:	4604      	mov	r4, r0
 80023dc:	460d      	mov	r5, r1
 80023de:	f003 0201 	and.w	r2, r3, #1
 80023e2:	d55d      	bpl.n	80024a0 <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023e4:	4e65      	ldr	r6, [pc, #404]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 80023e6:	68c0      	ldr	r0, [r0, #12]
 80023e8:	69b1      	ldr	r1, [r6, #24]
 80023ea:	f001 010f 	and.w	r1, r1, #15
 80023ee:	4288      	cmp	r0, r1
 80023f0:	d904      	bls.n	80023fc <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f2:	69b1      	ldr	r1, [r6, #24]
 80023f4:	f021 010f 	bic.w	r1, r1, #15
 80023f8:	4301      	orrs	r1, r0
 80023fa:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	d031      	beq.n	8002464 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002400:	4a5e      	ldr	r2, [pc, #376]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 8002402:	68a1      	ldr	r1, [r4, #8]
 8002404:	6993      	ldr	r3, [r2, #24]
 8002406:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800240a:	430b      	orrs	r3, r1
 800240c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002410:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	2b02      	cmp	r3, #2
 8002414:	f000 80a2 	beq.w	800255c <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002418:	2b03      	cmp	r3, #3
 800241a:	f000 80a5 	beq.w	8002568 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800241e:	2b01      	cmp	r3, #1
 8002420:	f000 80a6 	beq.w	8002570 <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002424:	0757      	lsls	r7, r2, #29
 8002426:	d538      	bpl.n	800249a <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002428:	4954      	ldr	r1, [pc, #336]	; (800257c <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800242e:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002430:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002432:	f022 0207 	bic.w	r2, r2, #7
 8002436:	4313      	orrs	r3, r2
 8002438:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800243a:	f7ff f86b 	bl	8001514 <HAL_GetTick>
 800243e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002440:	e005      	b.n	800244e <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002442:	f7ff f867 	bl	8001514 <HAL_GetTick>
 8002446:	1bc0      	subs	r0, r0, r7
 8002448:	4540      	cmp	r0, r8
 800244a:	f200 808b 	bhi.w	8002564 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	6933      	ldr	r3, [r6, #16]
 8002450:	6862      	ldr	r2, [r4, #4]
 8002452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002456:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800245a:	d1f2      	bne.n	8002442 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	079e      	lsls	r6, r3, #30
 8002460:	d50b      	bpl.n	800247a <HAL_RCC_ClockConfig+0x13e>
 8002462:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002464:	4945      	ldr	r1, [pc, #276]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 8002466:	698a      	ldr	r2, [r1, #24]
 8002468:	f002 020f 	and.w	r2, r2, #15
 800246c:	4282      	cmp	r2, r0
 800246e:	d904      	bls.n	800247a <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	698a      	ldr	r2, [r1, #24]
 8002472:	f022 020f 	bic.w	r2, r2, #15
 8002476:	4310      	orrs	r0, r2
 8002478:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800247a:	493f      	ldr	r1, [pc, #252]	; (8002578 <HAL_RCC_ClockConfig+0x23c>)
 800247c:	680a      	ldr	r2, [r1, #0]
 800247e:	f002 020f 	and.w	r2, r2, #15
 8002482:	42aa      	cmp	r2, r5
 8002484:	d914      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	680a      	ldr	r2, [r1, #0]
 8002488:	f022 020f 	bic.w	r2, r2, #15
 800248c:	432a      	orrs	r2, r5
 800248e:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002490:	680a      	ldr	r2, [r1, #0]
 8002492:	f002 020f 	and.w	r2, r2, #15
 8002496:	42aa      	cmp	r2, r5
 8002498:	d00a      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 800249a:	2001      	movs	r0, #1
}
 800249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a0:	2a00      	cmp	r2, #0
 80024a2:	d1ad      	bne.n	8002400 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4934      	ldr	r1, [pc, #208]	; (8002578 <HAL_RCC_ClockConfig+0x23c>)
 80024a6:	680a      	ldr	r2, [r1, #0]
 80024a8:	f002 020f 	and.w	r2, r2, #15
 80024ac:	42aa      	cmp	r2, r5
 80024ae:	d8ea      	bhi.n	8002486 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024b0:	0758      	lsls	r0, r3, #29
 80024b2:	d50b      	bpl.n	80024cc <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024b4:	4931      	ldr	r1, [pc, #196]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 80024b6:	6920      	ldr	r0, [r4, #16]
 80024b8:	698a      	ldr	r2, [r1, #24]
 80024ba:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80024be:	4290      	cmp	r0, r2
 80024c0:	d204      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024c2:	698a      	ldr	r2, [r1, #24]
 80024c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024c8:	4302      	orrs	r2, r0
 80024ca:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	0719      	lsls	r1, r3, #28
 80024ce:	d50b      	bpl.n	80024e8 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024d0:	492a      	ldr	r1, [pc, #168]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 80024d2:	6960      	ldr	r0, [r4, #20]
 80024d4:	69ca      	ldr	r2, [r1, #28]
 80024d6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80024da:	4290      	cmp	r0, r2
 80024dc:	d204      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024de:	69ca      	ldr	r2, [r1, #28]
 80024e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024e4:	4302      	orrs	r2, r0
 80024e6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e8:	06da      	lsls	r2, r3, #27
 80024ea:	d50b      	bpl.n	8002504 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024ec:	4923      	ldr	r1, [pc, #140]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 80024ee:	69a0      	ldr	r0, [r4, #24]
 80024f0:	69ca      	ldr	r2, [r1, #28]
 80024f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80024f6:	4290      	cmp	r0, r2
 80024f8:	d204      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024fa:	69ca      	ldr	r2, [r1, #28]
 80024fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002500:	4302      	orrs	r2, r0
 8002502:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002504:	069b      	lsls	r3, r3, #26
 8002506:	d50b      	bpl.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 800250a:	69e1      	ldr	r1, [r4, #28]
 800250c:	6a13      	ldr	r3, [r2, #32]
 800250e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002512:	4299      	cmp	r1, r3
 8002514:	d204      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002516:	6a13      	ldr	r3, [r2, #32]
 8002518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251c:	430b      	orrs	r3, r1
 800251e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002520:	f7ff fe80 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8002524:	4a15      	ldr	r2, [pc, #84]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 8002526:	4916      	ldr	r1, [pc, #88]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002528:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800252a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800252c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8002530:	4d14      	ldr	r5, [pc, #80]	; (8002584 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002532:	f002 020f 	and.w	r2, r2, #15
 8002536:	4c14      	ldr	r4, [pc, #80]	; (8002588 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002538:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800253a:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800253c:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8002540:	4912      	ldr	r1, [pc, #72]	; (800258c <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002542:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002546:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 800254a:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800254c:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8002550:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002552:	6022      	str	r2, [r4, #0]
}
 8002554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002558:	f7fe bf78 	b.w	800144c <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800255c:	0390      	lsls	r0, r2, #14
 800255e:	f53f af63 	bmi.w	8002428 <HAL_RCC_ClockConfig+0xec>
 8002562:	e79a      	b.n	800249a <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 8002564:	2003      	movs	r0, #3
 8002566:	e799      	b.n	800249c <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002568:	0191      	lsls	r1, r2, #6
 800256a:	f53f af5d 	bmi.w	8002428 <HAL_RCC_ClockConfig+0xec>
 800256e:	e794      	b.n	800249a <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002570:	05d2      	lsls	r2, r2, #23
 8002572:	f53f af59 	bmi.w	8002428 <HAL_RCC_ClockConfig+0xec>
 8002576:	e790      	b.n	800249a <HAL_RCC_ClockConfig+0x15e>
 8002578:	52002000 	.word	0x52002000
 800257c:	58024400 	.word	0x58024400
 8002580:	080074c0 	.word	0x080074c0
 8002584:	2000000c 	.word	0x2000000c
 8002588:	20000004 	.word	0x20000004
 800258c:	20000000 	.word	0x20000000

08002590 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002590:	4a49      	ldr	r2, [pc, #292]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x128>)
 8002592:	6913      	ldr	r3, [r2, #16]
 8002594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002598:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259a:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800259c:	d064      	beq.n	8002668 <HAL_RCC_GetHCLKFreq+0xd8>
 800259e:	2b18      	cmp	r3, #24
 80025a0:	d022      	beq.n	80025e8 <HAL_RCC_GetHCLKFreq+0x58>
 80025a2:	b1bb      	cbz	r3, 80025d4 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 80025a4:	4b45      	ldr	r3, [pc, #276]	; (80026bc <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025a6:	4944      	ldr	r1, [pc, #272]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x128>)
 80025a8:	4845      	ldr	r0, [pc, #276]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x130>)
 80025aa:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025ac:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025ae:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025b2:	4c44      	ldr	r4, [pc, #272]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x134>)
 80025b4:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025b8:	4d43      	ldr	r5, [pc, #268]	; (80026c8 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025ba:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025bc:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025be:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025c2:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025c6:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025c8:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80025cc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025ce:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80025d0:	bc30      	pop	{r4, r5}
 80025d2:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025d4:	6813      	ldr	r3, [r2, #0]
 80025d6:	0699      	lsls	r1, r3, #26
 80025d8:	d548      	bpl.n	800266c <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025da:	6813      	ldr	r3, [r2, #0]
 80025dc:	4a3b      	ldr	r2, [pc, #236]	; (80026cc <HAL_RCC_GetHCLKFreq+0x13c>)
 80025de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	e7de      	b.n	80025a6 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025e8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80025ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80025ee:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80025f2:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0d6      	beq.n	80025a6 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80025f8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025fc:	f001 0101 	and.w	r1, r1, #1
 8002600:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002604:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002608:	fb01 f304 	mul.w	r3, r1, r4
 800260c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8002610:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 800261a:	d002      	beq.n	8002622 <HAL_RCC_GetHCLKFreq+0x92>
 800261c:	d32b      	bcc.n	8002676 <HAL_RCC_GetHCLKFreq+0xe6>
 800261e:	2802      	cmp	r0, #2
 8002620:	d026      	beq.n	8002670 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002622:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80026d0 <HAL_RCC_GetHCLKFreq+0x140>
 8002626:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800262a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800262c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002630:	ee07 3a10 	vmov	s14, r3
 8002634:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002638:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800263c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002644:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x128>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002650:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002652:	ee07 3a10 	vmov	s14, r3
 8002656:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800265a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800265e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002662:	ee17 3a90 	vmov	r3, s15
 8002666:	e79e      	b.n	80025a6 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x144>)
 800266a:	e79c      	b.n	80025a6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <HAL_RCC_GetHCLKFreq+0x13c>)
 800266e:	e79a      	b.n	80025a6 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002670:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80026d8 <HAL_RCC_GetHCLKFreq+0x148>
 8002674:	e7d7      	b.n	8002626 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	069b      	lsls	r3, r3, #26
 800267a:	d51a      	bpl.n	80026b2 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800267c:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800267e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002682:	4912      	ldr	r1, [pc, #72]	; (80026cc <HAL_RCC_GetHCLKFreq+0x13c>)
 8002684:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002688:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800268a:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800268c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002690:	ee07 1a10 	vmov	s14, r1
 8002694:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002698:	ee07 3a10 	vmov	s14, r3
 800269c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80026a0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80026a4:	ee76 6a05 	vadd.f32	s13, s12, s10
 80026a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b0:	e7ca      	b.n	8002648 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026b2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80026dc <HAL_RCC_GetHCLKFreq+0x14c>
 80026b6:	e7b6      	b.n	8002626 <HAL_RCC_GetHCLKFreq+0x96>
 80026b8:	58024400 	.word	0x58024400
 80026bc:	003d0900 	.word	0x003d0900
 80026c0:	080074c0 	.word	0x080074c0
 80026c4:	20000004 	.word	0x20000004
 80026c8:	20000000 	.word	0x20000000
 80026cc:	03d09000 	.word	0x03d09000
 80026d0:	4a742400 	.word	0x4a742400
 80026d4:	02625a00 	.word	0x02625a00
 80026d8:	4c189680 	.word	0x4c189680
 80026dc:	4c742400 	.word	0x4c742400

080026e0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e0:	494d      	ldr	r1, [pc, #308]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x138>)
 80026e2:	690b      	ldr	r3, [r1, #16]
 80026e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026e8:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ea:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ec:	d06b      	beq.n	80027c6 <HAL_RCC_GetPCLK1Freq+0xe6>
 80026ee:	2b18      	cmp	r3, #24
 80026f0:	d029      	beq.n	8002746 <HAL_RCC_GetPCLK1Freq+0x66>
 80026f2:	b1fb      	cbz	r3, 8002734 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 80026f4:	4a49      	ldr	r2, [pc, #292]	; (800281c <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026f6:	4848      	ldr	r0, [pc, #288]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x138>)
 80026f8:	4949      	ldr	r1, [pc, #292]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x140>)
 80026fa:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026fc:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026fe:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8002702:	4d48      	ldr	r5, [pc, #288]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002704:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002708:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800270a:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800270c:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002710:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002714:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002716:	4c44      	ldr	r4, [pc, #272]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x148>)
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800271c:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800271e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002720:	69c2      	ldr	r2, [r0, #28]
 8002722:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002726:	5c88      	ldrb	r0, [r1, r2]
 8002728:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800272c:	bc30      	pop	{r4, r5}
 800272e:	fa23 f000 	lsr.w	r0, r3, r0
 8002732:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002734:	680b      	ldr	r3, [r1, #0]
 8002736:	069a      	lsls	r2, r3, #26
 8002738:	d547      	bpl.n	80027ca <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800273a:	680b      	ldr	r3, [r1, #0]
 800273c:	4a3b      	ldr	r2, [pc, #236]	; (800282c <HAL_RCC_GetPCLK1Freq+0x14c>)
 800273e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002742:	40da      	lsrs	r2, r3
 8002744:	e7d7      	b.n	80026f6 <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002746:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002748:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800274a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800274c:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002750:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 8002752:	2a00      	cmp	r2, #0
 8002754:	d0cf      	beq.n	80026f6 <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002756:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002762:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002766:	fb03 f304 	mul.w	r3, r3, r4
 800276a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800276e:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8002778:	d002      	beq.n	8002780 <HAL_RCC_GetPCLK1Freq+0xa0>
 800277a:	d32b      	bcc.n	80027d4 <HAL_RCC_GetPCLK1Freq+0xf4>
 800277c:	2802      	cmp	r0, #2
 800277e:	d026      	beq.n	80027ce <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002780:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002830 <HAL_RCC_GetPCLK1Freq+0x150>
 8002784:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8002788:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800278a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278e:	ee07 3a10 	vmov	s14, r3
 8002792:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002796:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800279a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800279e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a2:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x138>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80027ae:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80027b0:	ee07 3a10 	vmov	s14, r3
 80027b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80027b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027bc:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80027c0:	ee17 2a90 	vmov	r2, s15
 80027c4:	e797      	b.n	80026f6 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 80027c6:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x154>)
 80027c8:	e795      	b.n	80026f6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027ca:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_RCC_GetPCLK1Freq+0x14c>)
 80027cc:	e793      	b.n	80026f6 <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027ce:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002838 <HAL_RCC_GetPCLK1Freq+0x158>
 80027d2:	e7d7      	b.n	8002784 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027d4:	680b      	ldr	r3, [r1, #0]
 80027d6:	069b      	lsls	r3, r3, #26
 80027d8:	d51a      	bpl.n	8002810 <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027da:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027dc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_RCC_GetPCLK1Freq+0x14c>)
 80027e2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027e8:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	ee07 2a10 	vmov	s14, r2
 80027f2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80027f6:	ee07 3a10 	vmov	s14, r3
 80027fa:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80027fe:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002802:	ee76 6a05 	vadd.f32	s13, s12, s10
 8002806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	e7ca      	b.n	80027a6 <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002810:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800283c <HAL_RCC_GetPCLK1Freq+0x15c>
 8002814:	e7b6      	b.n	8002784 <HAL_RCC_GetPCLK1Freq+0xa4>
 8002816:	bf00      	nop
 8002818:	58024400 	.word	0x58024400
 800281c:	003d0900 	.word	0x003d0900
 8002820:	080074c0 	.word	0x080074c0
 8002824:	20000000 	.word	0x20000000
 8002828:	20000004 	.word	0x20000004
 800282c:	03d09000 	.word	0x03d09000
 8002830:	4a742400 	.word	0x4a742400
 8002834:	02625a00 	.word	0x02625a00
 8002838:	4c189680 	.word	0x4c189680
 800283c:	4c742400 	.word	0x4c742400

08002840 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002840:	494d      	ldr	r1, [pc, #308]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x138>)
 8002842:	690b      	ldr	r3, [r1, #16]
 8002844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002848:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800284a:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800284c:	d06b      	beq.n	8002926 <HAL_RCC_GetPCLK2Freq+0xe6>
 800284e:	2b18      	cmp	r3, #24
 8002850:	d029      	beq.n	80028a6 <HAL_RCC_GetPCLK2Freq+0x66>
 8002852:	b1fb      	cbz	r3, 8002894 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8002854:	4a49      	ldr	r2, [pc, #292]	; (800297c <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002856:	4848      	ldr	r0, [pc, #288]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x138>)
 8002858:	4949      	ldr	r1, [pc, #292]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x140>)
 800285a:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800285c:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800285e:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8002862:	4d48      	ldr	r5, [pc, #288]	; (8002984 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002864:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002868:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800286a:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800286c:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002870:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002874:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002876:	4c44      	ldr	r4, [pc, #272]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x148>)
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800287c:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800287e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002880:	69c2      	ldr	r2, [r0, #28]
 8002882:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8002886:	5c88      	ldrb	r0, [r1, r2]
 8002888:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800288c:	bc30      	pop	{r4, r5}
 800288e:	fa23 f000 	lsr.w	r0, r3, r0
 8002892:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002894:	680b      	ldr	r3, [r1, #0]
 8002896:	069a      	lsls	r2, r3, #26
 8002898:	d547      	bpl.n	800292a <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800289a:	680b      	ldr	r3, [r1, #0]
 800289c:	4a3b      	ldr	r2, [pc, #236]	; (800298c <HAL_RCC_GetPCLK2Freq+0x14c>)
 800289e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80028a2:	40da      	lsrs	r2, r3
 80028a4:	e7d7      	b.n	8002856 <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028a6:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80028a8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028aa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80028ac:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80028b0:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	d0cf      	beq.n	8002856 <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80028b6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028c2:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80028c6:	fb03 f304 	mul.w	r3, r3, r4
 80028ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80028ce:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetPCLK2Freq+0xa0>
 80028da:	d32b      	bcc.n	8002934 <HAL_RCC_GetPCLK2Freq+0xf4>
 80028dc:	2802      	cmp	r0, #2
 80028de:	d026      	beq.n	800292e <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028e0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002990 <HAL_RCC_GetPCLK2Freq+0x150>
 80028e4:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80028e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80028ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ee:	ee07 3a10 	vmov	s14, r3
 80028f2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80028f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80028fa:	ee37 7a25 	vadd.f32	s14, s14, s11
 80028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002902:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x138>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800290e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002910:	ee07 3a10 	vmov	s14, r3
 8002914:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002918:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800291c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002920:	ee17 2a90 	vmov	r2, s15
 8002924:	e797      	b.n	8002856 <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8002926:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x154>)
 8002928:	e795      	b.n	8002856 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_RCC_GetPCLK2Freq+0x14c>)
 800292c:	e793      	b.n	8002856 <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800292e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002998 <HAL_RCC_GetPCLK2Freq+0x158>
 8002932:	e7d7      	b.n	80028e4 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002934:	680b      	ldr	r3, [r1, #0]
 8002936:	069b      	lsls	r3, r3, #26
 8002938:	d51a      	bpl.n	8002970 <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800293a:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800293c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002940:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_RCC_GetPCLK2Freq+0x14c>)
 8002942:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002946:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002948:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	ee07 2a10 	vmov	s14, r2
 8002952:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002956:	ee07 3a10 	vmov	s14, r3
 800295a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800295e:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002962:	ee76 6a05 	vadd.f32	s13, s12, s10
 8002966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296e:	e7ca      	b.n	8002906 <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002970:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800299c <HAL_RCC_GetPCLK2Freq+0x15c>
 8002974:	e7b6      	b.n	80028e4 <HAL_RCC_GetPCLK2Freq+0xa4>
 8002976:	bf00      	nop
 8002978:	58024400 	.word	0x58024400
 800297c:	003d0900 	.word	0x003d0900
 8002980:	080074c0 	.word	0x080074c0
 8002984:	20000000 	.word	0x20000000
 8002988:	20000004 	.word	0x20000004
 800298c:	03d09000 	.word	0x03d09000
 8002990:	4a742400 	.word	0x4a742400
 8002994:	02625a00 	.word	0x02625a00
 8002998:	4c189680 	.word	0x4c189680
 800299c:	4c742400 	.word	0x4c742400

080029a0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80029a0:	4a3b      	ldr	r2, [pc, #236]	; (8002a90 <RCCEx_PLL2_Config+0xf0>)
{
 80029a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80029a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d067      	beq.n	8002a7e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	460f      	mov	r7, r1
 80029b2:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80029b4:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80029b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029ba:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80029bc:	f7fe fdaa 	bl	8001514 <HAL_GetTick>
 80029c0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80029c2:	e004      	b.n	80029ce <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80029c4:	f7fe fda6 	bl	8001514 <HAL_GetTick>
 80029c8:	1b80      	subs	r0, r0, r6
 80029ca:	2802      	cmp	r0, #2
 80029cc:	d859      	bhi.n	8002a82 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	011a      	lsls	r2, r3, #4
 80029d2:	d4f7      	bmi.n	80029c4 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80029d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029d6:	682a      	ldr	r2, [r5, #0]
 80029d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80029dc:	492d      	ldr	r1, [pc, #180]	; (8002a94 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80029de:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80029e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80029e4:	686e      	ldr	r6, [r5, #4]
 80029e6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80029ea:	3e01      	subs	r6, #1
 80029ec:	1e50      	subs	r0, r2, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	692a      	ldr	r2, [r5, #16]
 80029f2:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	0400      	lsls	r0, r0, #16
 80029fa:	3a01      	subs	r2, #1
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002a02:	0612      	lsls	r2, r2, #24
 8002a04:	4303      	orrs	r3, r0
 8002a06:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002a0a:	4333      	orrs	r3, r6
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a12:	696a      	ldr	r2, [r5, #20]
 8002a14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002a1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a1e:	69aa      	ldr	r2, [r5, #24]
 8002a20:	f023 0320 	bic.w	r3, r3, #32
 8002a24:	4313      	orrs	r3, r2
 8002a26:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002a28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a2a:	f023 0310 	bic.w	r3, r3, #16
 8002a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002a30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a32:	69eb      	ldr	r3, [r5, #28]
 8002a34:	4011      	ands	r1, r2
 8002a36:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002a3a:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002a3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a3e:	f043 0310 	orr.w	r3, r3, #16
 8002a42:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002a44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002a46:	b1f7      	cbz	r7, 8002a86 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002a48:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002a4a:	bf0c      	ite	eq
 8002a4c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002a50:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8002a54:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <RCCEx_PLL2_Config+0xf0>)
 8002a58:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002a5a:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8002a5c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a60:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002a62:	f7fe fd57 	bl	8001514 <HAL_GetTick>
 8002a66:	4605      	mov	r5, r0
 8002a68:	e004      	b.n	8002a74 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002a6a:	f7fe fd53 	bl	8001514 <HAL_GetTick>
 8002a6e:	1b40      	subs	r0, r0, r5
 8002a70:	2802      	cmp	r0, #2
 8002a72:	d806      	bhi.n	8002a82 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	d5f7      	bpl.n	8002a6a <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8002a7a:	2000      	movs	r0, #0
}
 8002a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002a7e:	2001      	movs	r0, #1
}
 8002a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002a82:	2003      	movs	r0, #3
}
 8002a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a8c:	e7e3      	b.n	8002a56 <RCCEx_PLL2_Config+0xb6>
 8002a8e:	bf00      	nop
 8002a90:	58024400 	.word	0x58024400
 8002a94:	ffff0007 	.word	0xffff0007

08002a98 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002a98:	4a3b      	ldr	r2, [pc, #236]	; (8002b88 <RCCEx_PLL3_Config+0xf0>)
{
 8002a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002a9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d067      	beq.n	8002b76 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002aa6:	6813      	ldr	r3, [r2, #0]
 8002aa8:	460f      	mov	r7, r1
 8002aaa:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002aac:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fd2e 	bl	8001514 <HAL_GetTick>
 8002ab8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002aba:	e004      	b.n	8002ac6 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002abc:	f7fe fd2a 	bl	8001514 <HAL_GetTick>
 8002ac0:	1b80      	subs	r0, r0, r6
 8002ac2:	2802      	cmp	r0, #2
 8002ac4:	d859      	bhi.n	8002b7a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	009a      	lsls	r2, r3, #2
 8002aca:	d4f7      	bmi.n	8002abc <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002acc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ace:	682a      	ldr	r2, [r5, #0]
 8002ad0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002ad4:	492d      	ldr	r1, [pc, #180]	; (8002b8c <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002ad6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002ada:	62a3      	str	r3, [r4, #40]	; 0x28
 8002adc:	686e      	ldr	r6, [r5, #4]
 8002ade:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8002ae2:	3e01      	subs	r6, #1
 8002ae4:	1e50      	subs	r0, r2, #1
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	692a      	ldr	r2, [r5, #16]
 8002aea:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	0400      	lsls	r0, r0, #16
 8002af2:	3a01      	subs	r2, #1
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002afa:	0612      	lsls	r2, r2, #24
 8002afc:	4303      	orrs	r3, r0
 8002afe:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002b02:	4333      	orrs	r3, r6
 8002b04:	4313      	orrs	r3, r2
 8002b06:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002b08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b0a:	696a      	ldr	r2, [r5, #20]
 8002b0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b10:	4313      	orrs	r3, r2
 8002b12:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002b14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b16:	69aa      	ldr	r2, [r5, #24]
 8002b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002b20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b26:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002b28:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002b2a:	69eb      	ldr	r3, [r5, #28]
 8002b2c:	4011      	ands	r1, r2
 8002b2e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002b32:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002b3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002b3e:	b1f7      	cbz	r7, 8002b7e <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002b40:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002b42:	bf0c      	ite	eq
 8002b44:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002b48:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <RCCEx_PLL3_Config+0xf0>)
 8002b50:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002b52:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8002b54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b58:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002b5a:	f7fe fcdb 	bl	8001514 <HAL_GetTick>
 8002b5e:	4605      	mov	r5, r0
 8002b60:	e004      	b.n	8002b6c <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002b62:	f7fe fcd7 	bl	8001514 <HAL_GetTick>
 8002b66:	1b40      	subs	r0, r0, r5
 8002b68:	2802      	cmp	r0, #2
 8002b6a:	d806      	bhi.n	8002b7a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	d5f7      	bpl.n	8002b62 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8002b72:	2000      	movs	r0, #0
}
 8002b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002b76:	2001      	movs	r0, #1
}
 8002b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002b7a:	2003      	movs	r0, #3
}
 8002b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002b7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b84:	e7e3      	b.n	8002b4e <RCCEx_PLL3_Config+0xb6>
 8002b86:	bf00      	nop
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	ffff0007 	.word	0xffff0007

08002b90 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b94:	6803      	ldr	r3, [r0, #0]
{
 8002b96:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b98:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8002b9c:	d015      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b9e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8002ba0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002ba4:	f000 844e 	beq.w	8003444 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8002ba8:	f240 8501 	bls.w	80035ae <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002bac:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002bb0:	f000 8461 	beq.w	8003476 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8002bb4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002bb8:	f040 8512 	bne.w	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002bbc:	48a2      	ldr	r0, [pc, #648]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002bc2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bca:	05dd      	lsls	r5, r3, #23
 8002bcc:	d50a      	bpl.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002bce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002bd0:	2a04      	cmp	r2, #4
 8002bd2:	d806      	bhi.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bd4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002bd8:	03e403dd 	.word	0x03e403dd
 8002bdc:	039e03d2 	.word	0x039e03d2
 8002be0:	039e      	.short	0x039e
      ret = HAL_ERROR;
 8002be2:	2601      	movs	r6, #1
 8002be4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002be6:	0598      	lsls	r0, r3, #22
 8002be8:	d51b      	bpl.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002bea:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002bec:	2a80      	cmp	r2, #128	; 0x80
 8002bee:	f000 8405 	beq.w	80033fc <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8002bf2:	f200 84d1 	bhi.w	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 8002bf6:	2a00      	cmp	r2, #0
 8002bf8:	f000 8443 	beq.w	8003482 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8002bfc:	2a40      	cmp	r2, #64	; 0x40
 8002bfe:	f040 84d2 	bne.w	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c02:	2100      	movs	r1, #0
 8002c04:	1d20      	adds	r0, r4, #4
 8002c06:	f7ff fecb 	bl	80029a0 <RCCEx_PLL2_Config>
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002c0e:	2d00      	cmp	r5, #0
 8002c10:	f040 83fe 	bne.w	8003410 <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c14:	498c      	ldr	r1, [pc, #560]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002c16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c18:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002c1a:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8002c1e:	4302      	orrs	r2, r0
 8002c20:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c22:	0559      	lsls	r1, r3, #21
 8002c24:	d51f      	bpl.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002c26:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8002c2a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002c2e:	f000 83d4 	beq.w	80033da <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8002c32:	f200 8499 	bhi.w	8003568 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	f000 8410 	beq.w	800345c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8002c3c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002c40:	f040 849a 	bne.w	8003578 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c44:	2100      	movs	r1, #0
 8002c46:	1d20      	adds	r0, r4, #4
 8002c48:	f7ff feaa 	bl	80029a0 <RCCEx_PLL2_Config>
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002c50:	2d00      	cmp	r5, #0
 8002c52:	f040 83cc 	bne.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c56:	497c      	ldr	r1, [pc, #496]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002c58:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8002c5c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002c5e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8002c62:	4302      	orrs	r2, r0
 8002c64:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c66:	051a      	lsls	r2, r3, #20
 8002c68:	d51f      	bpl.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c6a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8002c6e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8002c72:	f000 83cf 	beq.w	8003414 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8002c76:	f200 8483 	bhi.w	8003580 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 8002c7a:	2a00      	cmp	r2, #0
 8002c7c:	f000 8408 	beq.w	8003490 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8002c80:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8002c84:	f040 8484 	bne.w	8003590 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c88:	2100      	movs	r1, #0
 8002c8a:	1d20      	adds	r0, r4, #4
 8002c8c:	f7ff fe88 	bl	80029a0 <RCCEx_PLL2_Config>
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002c94:	2d00      	cmp	r5, #0
 8002c96:	f040 83c7 	bne.w	8003428 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c9a:	496b      	ldr	r1, [pc, #428]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002c9c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8002ca0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002ca2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8002ca6:	4302      	orrs	r2, r0
 8002ca8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002caa:	019f      	lsls	r7, r3, #6
 8002cac:	d50d      	bpl.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 8002cae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002cb0:	2a10      	cmp	r2, #16
 8002cb2:	f000 830c 	beq.w	80032ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002cb6:	f240 848e 	bls.w	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8002cba:	2a20      	cmp	r2, #32
 8002cbc:	f000 8349 	beq.w	8003352 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8002cc0:	2a30      	cmp	r2, #48	; 0x30
 8002cc2:	f000 8309 	beq.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      ret = HAL_ERROR;
 8002cc6:	2601      	movs	r6, #1
 8002cc8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002cca:	04d8      	lsls	r0, r3, #19
 8002ccc:	d51d      	bpl.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002cce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002cd0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002cd4:	f000 83aa 	beq.w	800342c <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8002cd8:	f200 8471 	bhi.w	80035be <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8002cdc:	2a00      	cmp	r2, #0
 8002cde:	f000 83c4 	beq.w	800346a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8002ce2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002ce6:	f040 8472 	bne.w	80035ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cea:	2100      	movs	r1, #0
 8002cec:	1d20      	adds	r0, r4, #4
 8002cee:	f7ff fe57 	bl	80029a0 <RCCEx_PLL2_Config>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002cf6:	2d00      	cmp	r5, #0
 8002cf8:	f040 83a2 	bne.w	8003440 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002cfc:	4952      	ldr	r1, [pc, #328]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002cfe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002d00:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002d02:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002d06:	4302      	orrs	r2, r0
 8002d08:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d0a:	0499      	lsls	r1, r3, #18
 8002d0c:	d51b      	bpl.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d0e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002d10:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002d14:	f000 8309 	beq.w	800332a <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8002d18:	f200 8407 	bhi.w	800352a <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8002d1c:	b14a      	cbz	r2, 8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002d1e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002d22:	f040 840e 	bne.w	8003542 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d26:	2101      	movs	r1, #1
 8002d28:	1d20      	adds	r0, r4, #4
 8002d2a:	f7ff fe39 	bl	80029a0 <RCCEx_PLL2_Config>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002d32:	2d00      	cmp	r5, #0
 8002d34:	f040 8271 	bne.w	800321a <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d38:	4943      	ldr	r1, [pc, #268]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002d3a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002d3c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002d3e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002d42:	4302      	orrs	r2, r0
 8002d44:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d46:	045a      	lsls	r2, r3, #17
 8002d48:	d51d      	bpl.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d4a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8002d4e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002d52:	f000 82b2 	beq.w	80032ba <HAL_RCCEx_PeriphCLKConfig+0x72a>
 8002d56:	f200 83f8 	bhi.w	800354a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002d5a:	b14a      	cbz	r2, 8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8002d5c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002d60:	f040 83ff 	bne.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d64:	2101      	movs	r1, #1
 8002d66:	1d20      	adds	r0, r4, #4
 8002d68:	f7ff fe1a 	bl	80029a0 <RCCEx_PLL2_Config>
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002d70:	2d00      	cmp	r5, #0
 8002d72:	f040 8250 	bne.w	8003216 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d76:	4934      	ldr	r1, [pc, #208]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002d78:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8002d7c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002d7e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8002d82:	4302      	orrs	r2, r0
 8002d84:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d86:	041f      	lsls	r7, r3, #16
 8002d88:	d50d      	bpl.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 8002d8a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002d8c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002d90:	f000 82d6 	beq.w	8003340 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8002d94:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002d98:	f000 81ad 	beq.w	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002d9c:	2a00      	cmp	r2, #0
 8002d9e:	f000 81b0 	beq.w	8003102 <HAL_RCCEx_PeriphCLKConfig+0x572>
      ret = HAL_ERROR;
 8002da2:	2601      	movs	r6, #1
 8002da4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002da6:	01d8      	lsls	r0, r3, #7
 8002da8:	d519      	bpl.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 8002daa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002dac:	2a03      	cmp	r2, #3
 8002dae:	f200 8442 	bhi.w	8003636 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 8002db2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002db6:	000a      	.short	0x000a
 8002db8:	00040264 	.word	0x00040264
 8002dbc:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	1d20      	adds	r0, r4, #4
 8002dc2:	f7ff fded 	bl	80029a0 <RCCEx_PLL2_Config>
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	f040 821b 	bne.w	8003206 <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dd0:	491d      	ldr	r1, [pc, #116]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002dd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002dd4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002dd6:	f022 0203 	bic.w	r2, r2, #3
 8002dda:	4302      	orrs	r2, r0
 8002ddc:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dde:	0259      	lsls	r1, r3, #9
 8002de0:	f100 81cb 	bmi.w	800317a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002de4:	07df      	lsls	r7, r3, #31
 8002de6:	d542      	bpl.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002de8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002dea:	2a28      	cmp	r2, #40	; 0x28
 8002dec:	f200 8369 	bhi.w	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8002df0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002df4:	03670033 	.word	0x03670033
 8002df8:	03670367 	.word	0x03670367
 8002dfc:	03670367 	.word	0x03670367
 8002e00:	03670367 	.word	0x03670367
 8002e04:	03670256 	.word	0x03670256
 8002e08:	03670367 	.word	0x03670367
 8002e0c:	03670367 	.word	0x03670367
 8002e10:	03670367 	.word	0x03670367
 8002e14:	0367002c 	.word	0x0367002c
 8002e18:	03670367 	.word	0x03670367
 8002e1c:	03670367 	.word	0x03670367
 8002e20:	03670367 	.word	0x03670367
 8002e24:	03670033 	.word	0x03670033
 8002e28:	03670367 	.word	0x03670367
 8002e2c:	03670367 	.word	0x03670367
 8002e30:	03670367 	.word	0x03670367
 8002e34:	03670033 	.word	0x03670033
 8002e38:	03670367 	.word	0x03670367
 8002e3c:	03670367 	.word	0x03670367
 8002e40:	03670367 	.word	0x03670367
 8002e44:	0033      	.short	0x0033
 8002e46:	bf00      	nop
 8002e48:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e52:	f7ff fe21 	bl	8002a98 <RCCEx_PLL3_Config>
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	f040 81d1 	bne.w	8003202 <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e60:	49ad      	ldr	r1, [pc, #692]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002e62:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002e64:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002e66:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002e6a:	4302      	orrs	r2, r0
 8002e6c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e6e:	0798      	lsls	r0, r3, #30
 8002e70:	d51c      	bpl.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e72:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002e74:	2a05      	cmp	r2, #5
 8002e76:	f200 83d8 	bhi.w	800362a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8002e7a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002e7e:	000d      	.short	0x000d
 8002e80:	000601f7 	.word	0x000601f7
 8002e84:	000d000d 	.word	0x000d000d
 8002e88:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e90:	f7ff fe02 	bl	8002a98 <RCCEx_PLL3_Config>
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002e98:	2d00      	cmp	r5, #0
 8002e9a:	f040 81b6 	bne.w	800320a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e9e:	499e      	ldr	r1, [pc, #632]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002ea0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002ea2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002ea4:	f022 0207 	bic.w	r2, r2, #7
 8002ea8:	4302      	orrs	r2, r0
 8002eaa:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eac:	0759      	lsls	r1, r3, #29
 8002eae:	d51e      	bpl.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002eb0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002eb4:	2a05      	cmp	r2, #5
 8002eb6:	f200 83bb 	bhi.w	8003630 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8002eba:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002ebe:	000d      	.short	0x000d
 8002ec0:	000601e8 	.word	0x000601e8
 8002ec4:	000d000d 	.word	0x000d000d
 8002ec8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eca:	2101      	movs	r1, #1
 8002ecc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ed0:	f7ff fde2 	bl	8002a98 <RCCEx_PLL3_Config>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002ed8:	2d00      	cmp	r5, #0
 8002eda:	f040 8198 	bne.w	800320e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ede:	498e      	ldr	r1, [pc, #568]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002ee0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002ee4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002ee6:	f022 0207 	bic.w	r2, r2, #7
 8002eea:	4302      	orrs	r2, r0
 8002eec:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eee:	069a      	lsls	r2, r3, #26
 8002ef0:	d51d      	bpl.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002ef2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002ef6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002efa:	f000 81f7 	beq.w	80032ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002efe:	f200 82e7 	bhi.w	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002f02:	b14a      	cbz	r2, 8002f18 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002f04:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002f08:	f040 82ee 	bne.w	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x958>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	1d20      	adds	r0, r4, #4
 8002f10:	f7ff fd46 	bl	80029a0 <RCCEx_PLL2_Config>
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002f18:	2d00      	cmp	r5, #0
 8002f1a:	f040 817a 	bne.w	8003212 <HAL_RCCEx_PeriphCLKConfig+0x682>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f1e:	497e      	ldr	r1, [pc, #504]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002f20:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002f24:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002f26:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8002f2a:	4302      	orrs	r2, r0
 8002f2c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f2e:	065f      	lsls	r7, r3, #25
 8002f30:	d51d      	bpl.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f32:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8002f36:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002f3a:	f000 81e1 	beq.w	8003300 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002f3e:	f200 82d6 	bhi.w	80034ee <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8002f42:	b14a      	cbz	r2, 8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8002f44:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f48:	f040 82dd 	bne.w	8003506 <HAL_RCCEx_PeriphCLKConfig+0x976>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	1d20      	adds	r0, r4, #4
 8002f50:	f7ff fd26 	bl	80029a0 <RCCEx_PLL2_Config>
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002f58:	2d00      	cmp	r5, #0
 8002f5a:	f040 8162 	bne.w	8003222 <HAL_RCCEx_PeriphCLKConfig+0x692>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f5e:	496e      	ldr	r1, [pc, #440]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002f60:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8002f64:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002f66:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002f6a:	4302      	orrs	r2, r0
 8002f6c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002f6e:	0618      	lsls	r0, r3, #24
 8002f70:	d51d      	bpl.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002f72:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8002f76:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002f7a:	f000 81f4 	beq.w	8003366 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8002f7e:	f200 82c5 	bhi.w	800350c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002f82:	b14a      	cbz	r2, 8002f98 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002f84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002f88:	f040 82cc 	bne.w	8003524 <HAL_RCCEx_PeriphCLKConfig+0x994>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	1d20      	adds	r0, r4, #4
 8002f90:	f7ff fd06 	bl	80029a0 <RCCEx_PLL2_Config>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002f98:	2d00      	cmp	r5, #0
 8002f9a:	f040 8144 	bne.w	8003226 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f9e:	495e      	ldr	r1, [pc, #376]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002fa0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8002fa4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002fa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002faa:	4302      	orrs	r2, r0
 8002fac:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002fae:	0719      	lsls	r1, r3, #28
 8002fb0:	d50b      	bpl.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002fb2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002fb6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002fba:	f000 81f8 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fbe:	4856      	ldr	r0, [pc, #344]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002fc0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002fc2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fca:	06da      	lsls	r2, r3, #27
 8002fcc:	d50b      	bpl.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002fce:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002fd2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002fd6:	f000 81f5 	beq.w	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fda:	484f      	ldr	r0, [pc, #316]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002fdc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002fde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fe6:	031f      	lsls	r7, r3, #12
 8002fe8:	d50e      	bpl.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 8002fea:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002fee:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002ff2:	f000 8093 	beq.w	800311c <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8002ff6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002ffa:	f000 8096 	beq.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002ffe:	2900      	cmp	r1, #0
 8003000:	f000 824d 	beq.w	800349e <HAL_RCCEx_PeriphCLKConfig+0x90e>
      ret = HAL_ERROR;
 8003004:	2601      	movs	r6, #1
 8003006:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003008:	0358      	lsls	r0, r3, #13
 800300a:	d50f      	bpl.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 800300c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003010:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003014:	f000 8094 	beq.w	8003140 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003018:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800301c:	f000 8097 	beq.w	800314e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003020:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003024:	f000 8244 	beq.w	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x920>
      ret = HAL_ERROR;
 8003028:	2601      	movs	r6, #1
 800302a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800302c:	03d9      	lsls	r1, r3, #15
 800302e:	d517      	bpl.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003030:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003032:	2a00      	cmp	r2, #0
 8003034:	f000 8110 	beq.w	8003258 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8003038:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800303c:	f040 80f7 	bne.w	800322e <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003040:	2102      	movs	r1, #2
 8003042:	1d20      	adds	r0, r4, #4
 8003044:	f7ff fcac 	bl	80029a0 <RCCEx_PLL2_Config>
 8003048:	4605      	mov	r5, r0
 800304a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800304c:	2d00      	cmp	r5, #0
 800304e:	f040 810b 	bne.w	8003268 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003052:	4931      	ldr	r1, [pc, #196]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003054:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003056:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003058:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800305c:	4302      	orrs	r2, r0
 800305e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003060:	009a      	lsls	r2, r3, #2
 8003062:	d47f      	bmi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003064:	039f      	lsls	r7, r3, #14
 8003066:	d435      	bmi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8003068:	1c30      	adds	r0, r6, #0
 800306a:	bf18      	it	ne
 800306c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800306e:	02de      	lsls	r6, r3, #11
 8003070:	d506      	bpl.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003072:	4929      	ldr	r1, [pc, #164]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003074:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8003076:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003078:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800307c:	432a      	orrs	r2, r5
 800307e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003080:	00dd      	lsls	r5, r3, #3
 8003082:	d507      	bpl.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003084:	4924      	ldr	r1, [pc, #144]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003086:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800308a:	690a      	ldr	r2, [r1, #16]
 800308c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003090:	432a      	orrs	r2, r5
 8003092:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003094:	0299      	lsls	r1, r3, #10
 8003096:	d506      	bpl.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003098:	491f      	ldr	r1, [pc, #124]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800309a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800309c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800309e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80030a2:	432a      	orrs	r2, r5
 80030a4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80030a6:	005a      	lsls	r2, r3, #1
 80030a8:	d509      	bpl.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030aa:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80030ac:	6911      	ldr	r1, [r2, #16]
 80030ae:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80030b2:	6111      	str	r1, [r2, #16]
 80030b4:	6911      	ldr	r1, [r2, #16]
 80030b6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80030ba:	4329      	orrs	r1, r5
 80030bc:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da06      	bge.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80030c2:	4a15      	ldr	r2, [pc, #84]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80030c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80030c6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80030c8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80030cc:	430b      	orrs	r3, r1
 80030ce:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80030d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80030d4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80030d6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80030da:	f000 80ab 	beq.w	8003234 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80030de:	f240 80e8 	bls.w	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x722>
 80030e2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80030e6:	f000 80aa 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80030ea:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80030ee:	f000 80a6 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80030f2:	2001      	movs	r0, #1
 80030f4:	e7bb      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030f6:	2101      	movs	r1, #1
 80030f8:	1d20      	adds	r0, r4, #4
 80030fa:	f7ff fc51 	bl	80029a0 <RCCEx_PLL2_Config>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003102:	2d00      	cmp	r5, #0
 8003104:	f040 808b 	bne.w	800321e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003108:	4903      	ldr	r1, [pc, #12]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800310a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800310c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800310e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003112:	4302      	orrs	r2, r0
 8003114:	650a      	str	r2, [r1, #80]	; 0x50
 8003116:	e646      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8003118:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800311c:	2102      	movs	r1, #2
 800311e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003122:	f7ff fcb9 	bl	8002a98 <RCCEx_PLL3_Config>
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800312a:	2d00      	cmp	r5, #0
 800312c:	d17d      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x69a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800312e:	49b1      	ldr	r1, [pc, #708]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003130:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003134:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003136:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800313a:	4302      	orrs	r2, r0
 800313c:	658a      	str	r2, [r1, #88]	; 0x58
 800313e:	e763      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003140:	2101      	movs	r1, #1
 8003142:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003146:	f7ff fca7 	bl	8002a98 <RCCEx_PLL3_Config>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800314e:	2d00      	cmp	r5, #0
 8003150:	d155      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003152:	49a8      	ldr	r1, [pc, #672]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003154:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003158:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800315a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800315e:	4302      	orrs	r2, r0
 8003160:	654a      	str	r2, [r1, #84]	; 0x54
 8003162:	e763      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003164:	2102      	movs	r1, #2
 8003166:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800316a:	f7ff fc95 	bl	8002a98 <RCCEx_PLL3_Config>
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	2800      	cmp	r0, #0
 8003172:	f43f af77 	beq.w	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      status=HAL_ERROR;
 8003176:	2601      	movs	r6, #1
 8003178:	e774      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800317a:	4b9f      	ldr	r3, [pc, #636]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x868>)
 800317c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800317e:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003184:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003186:	f7fe f9c5 	bl	8001514 <HAL_GetTick>
 800318a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800318c:	e006      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x60c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fe f9c1 	bl	8001514 <HAL_GetTick>
 8003192:	eba0 0008 	sub.w	r0, r0, r8
 8003196:	2864      	cmp	r0, #100	; 0x64
 8003198:	f200 8196 	bhi.w	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	05da      	lsls	r2, r3, #23
 80031a0:	d5f5      	bpl.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    if(ret == HAL_OK)
 80031a2:	2d00      	cmp	r5, #0
 80031a4:	f040 823d 	bne.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0xa92>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80031a8:	4a92      	ldr	r2, [pc, #584]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80031aa:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80031ae:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80031b0:	4059      	eors	r1, r3
 80031b2:	f411 7f40 	tst.w	r1, #768	; 0x300
 80031b6:	d00b      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x640>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031b8:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ba:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031bc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80031c0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80031c4:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80031c8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80031cc:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80031ce:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	f000 8207 	beq.w	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80031dc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80031e0:	f000 8215 	beq.w	800360e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80031e4:	4983      	ldr	r1, [pc, #524]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80031e6:	690a      	ldr	r2, [r1, #16]
 80031e8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80031ec:	610a      	str	r2, [r1, #16]
 80031ee:	4a81      	ldr	r2, [pc, #516]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80031f6:	430b      	orrs	r3, r1
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	e5f2      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80031fe:	462e      	mov	r6, r5
 8003200:	e714      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003202:	462e      	mov	r6, r5
 8003204:	e633      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003206:	462e      	mov	r6, r5
 8003208:	e5e9      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800320a:	462e      	mov	r6, r5
 800320c:	e64e      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800320e:	462e      	mov	r6, r5
 8003210:	e66d      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003212:	462e      	mov	r6, r5
 8003214:	e68b      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8003216:	462e      	mov	r6, r5
 8003218:	e5b5      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800321a:	462e      	mov	r6, r5
 800321c:	e593      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800321e:	462e      	mov	r6, r5
 8003220:	e5c1      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8003222:	462e      	mov	r6, r5
 8003224:	e6a3      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003226:	462e      	mov	r6, r5
 8003228:	e6c1      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800322a:	462e      	mov	r6, r5
 800322c:	e6ec      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 800322e:	2601      	movs	r6, #1
 8003230:	4635      	mov	r5, r6
 8003232:	e715      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003234:	486f      	ldr	r0, [pc, #444]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003236:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003238:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800323c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800323e:	2d00      	cmp	r5, #0
 8003240:	f47f af57 	bne.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003244:	4d6b      	ldr	r5, [pc, #428]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003246:	1c30      	adds	r0, r6, #0
 8003248:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800324a:	bf18      	it	ne
 800324c:	2001      	movne	r0, #1
 800324e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003252:	430a      	orrs	r2, r1
 8003254:	656a      	str	r2, [r5, #84]	; 0x54
 8003256:	e70a      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003258:	4966      	ldr	r1, [pc, #408]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800325a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800325c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003260:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003262:	2d00      	cmp	r5, #0
 8003264:	f43f aef5 	beq.w	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003268:	462e      	mov	r6, r5
 800326a:	e6f9      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800326c:	2101      	movs	r1, #1
 800326e:	1d20      	adds	r0, r4, #4
 8003270:	f7ff fb96 	bl	80029a0 <RCCEx_PLL2_Config>
 8003274:	4605      	mov	r5, r0
 8003276:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003278:	2d00      	cmp	r5, #0
 800327a:	d1c6      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800327c:	e60f      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327e:	495d      	ldr	r1, [pc, #372]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003280:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003282:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003286:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003288:	2d00      	cmp	r5, #0
 800328a:	d1bc      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800328c:	e5a0      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800328e:	2101      	movs	r1, #1
 8003290:	1d20      	adds	r0, r4, #4
 8003292:	f7ff fb85 	bl	80029a0 <RCCEx_PLL2_Config>
 8003296:	4605      	mov	r5, r0
 8003298:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800329a:	2d00      	cmp	r5, #0
 800329c:	d1b7      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800329e:	e61e      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032a0:	2101      	movs	r1, #1
 80032a2:	1d20      	adds	r0, r4, #4
 80032a4:	f7ff fb7c 	bl	80029a0 <RCCEx_PLL2_Config>
 80032a8:	4605      	mov	r5, r0
 80032aa:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80032ac:	2d00      	cmp	r5, #0
 80032ae:	d1a8      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80032b0:	e5d6      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	f47f af1d 	bne.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80032b8:	e7c1      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032ba:	2101      	movs	r1, #1
 80032bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032c0:	f7ff fbea 	bl	8002a98 <RCCEx_PLL3_Config>
 80032c4:	4605      	mov	r5, r0
 80032c6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80032c8:	2d00      	cmp	r5, #0
 80032ca:	d1a4      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x686>
 80032cc:	e553      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ce:	4949      	ldr	r1, [pc, #292]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80032d0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80032d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80032d6:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80032d8:	2d00      	cmp	r5, #0
 80032da:	d142      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80032dc:	4945      	ldr	r1, [pc, #276]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80032de:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80032e0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80032e2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80032e6:	4302      	orrs	r2, r0
 80032e8:	64ca      	str	r2, [r1, #76]	; 0x4c
 80032ea:	e4ee      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032ec:	2102      	movs	r1, #2
 80032ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032f2:	f7ff fbd1 	bl	8002a98 <RCCEx_PLL3_Config>
 80032f6:	4605      	mov	r5, r0
 80032f8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d189      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80032fe:	e60e      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003300:	2102      	movs	r1, #2
 8003302:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003306:	f7ff fbc7 	bl	8002a98 <RCCEx_PLL3_Config>
 800330a:	4605      	mov	r5, r0
 800330c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800330e:	2d00      	cmp	r5, #0
 8003310:	d187      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8003312:	e624      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003314:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8003316:	2d00      	cmp	r5, #0
 8003318:	d139      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800331a:	4936      	ldr	r1, [pc, #216]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800331c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800331e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003320:	f022 0207 	bic.w	r2, r2, #7
 8003324:	4302      	orrs	r2, r0
 8003326:	650a      	str	r2, [r1, #80]	; 0x50
 8003328:	e45d      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800332a:	2101      	movs	r1, #1
 800332c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003330:	f7ff fbb2 	bl	8002a98 <RCCEx_PLL3_Config>
 8003334:	4605      	mov	r5, r0
 8003336:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003338:	2d00      	cmp	r5, #0
 800333a:	f47f af6e 	bne.w	800321a <HAL_RCCEx_PeriphCLKConfig+0x68a>
 800333e:	e4fb      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003340:	492c      	ldr	r1, [pc, #176]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003342:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003344:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003348:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800334a:	2d00      	cmp	r5, #0
 800334c:	f47f af67 	bne.w	800321e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003350:	e6da      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x578>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003352:	2102      	movs	r1, #2
 8003354:	1d20      	adds	r0, r4, #4
 8003356:	f7ff fb23 	bl	80029a0 <RCCEx_PLL2_Config>
 800335a:	4605      	mov	r5, r0
 800335c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800335e:	2d00      	cmp	r5, #0
 8003360:	d0bc      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003362:	462e      	mov	r6, r5
 8003364:	e4b1      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003366:	2102      	movs	r1, #2
 8003368:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800336c:	f7ff fb94 	bl	8002a98 <RCCEx_PLL3_Config>
 8003370:	4605      	mov	r5, r0
 8003372:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003374:	2d00      	cmp	r5, #0
 8003376:	f47f af56 	bne.w	8003226 <HAL_RCCEx_PeriphCLKConfig+0x696>
 800337a:	e610      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800337c:	2100      	movs	r1, #0
 800337e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003382:	f7ff fb89 	bl	8002a98 <RCCEx_PLL3_Config>
 8003386:	4605      	mov	r5, r0
 8003388:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800338a:	2d00      	cmp	r5, #0
 800338c:	d0c5      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800338e:	462e      	mov	r6, r5
 8003390:	e429      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003392:	4918      	ldr	r1, [pc, #96]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
      break;
 8003394:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003396:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003398:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800339c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800339e:	e7ba      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x786>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033a0:	2100      	movs	r1, #0
 80033a2:	1d20      	adds	r0, r4, #4
 80033a4:	f7ff fafc 	bl	80029a0 <RCCEx_PLL2_Config>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	4605      	mov	r5, r0
      break;
 80033ac:	e7b3      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x786>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033ae:	2102      	movs	r1, #2
 80033b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033b4:	f7ff fb70 	bl	8002a98 <RCCEx_PLL3_Config>
 80033b8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80033bc:	b100      	cbz	r0, 80033c0 <HAL_RCCEx_PeriphCLKConfig+0x830>
          status = HAL_ERROR;
 80033be:	2601      	movs	r6, #1
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	e5fc      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033c4:	2102      	movs	r1, #2
 80033c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033ca:	f7ff fb65 	bl	8002a98 <RCCEx_PLL3_Config>
 80033ce:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80033d2:	b100      	cbz	r0, 80033d6 <HAL_RCCEx_PeriphCLKConfig+0x846>
        status = HAL_ERROR;
 80033d4:	2601      	movs	r6, #1
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	e5ff      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033da:	2100      	movs	r1, #0
 80033dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033e0:	f7ff fb5a 	bl	8002a98 <RCCEx_PLL3_Config>
 80033e4:	4605      	mov	r5, r0
 80033e6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80033e8:	2d00      	cmp	r5, #0
 80033ea:	f43f ac34 	beq.w	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80033ee:	462e      	mov	r6, r5
 80033f0:	e439      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80033f2:	bf00      	nop
 80033f4:	58024400 	.word	0x58024400
 80033f8:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033fc:	2100      	movs	r1, #0
 80033fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003402:	f7ff fb49 	bl	8002a98 <RCCEx_PLL3_Config>
 8003406:	4605      	mov	r5, r0
 8003408:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800340a:	2d00      	cmp	r5, #0
 800340c:	f43f ac02 	beq.w	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003410:	462e      	mov	r6, r5
 8003412:	e406      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003414:	2100      	movs	r1, #0
 8003416:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800341a:	f7ff fb3d 	bl	8002a98 <RCCEx_PLL3_Config>
 800341e:	4605      	mov	r5, r0
 8003420:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003422:	2d00      	cmp	r5, #0
 8003424:	f43f ac39 	beq.w	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8003428:	462e      	mov	r6, r5
 800342a:	e43e      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800342c:	2100      	movs	r1, #0
 800342e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003432:	f7ff fb31 	bl	8002a98 <RCCEx_PLL3_Config>
 8003436:	4605      	mov	r5, r0
 8003438:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800343a:	2d00      	cmp	r5, #0
 800343c:	f43f ac5e 	beq.w	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003440:	462e      	mov	r6, r5
 8003442:	e462      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003444:	2102      	movs	r1, #2
 8003446:	3004      	adds	r0, #4
 8003448:	f7ff faaa 	bl	80029a0 <RCCEx_PLL2_Config>
 800344c:	4606      	mov	r6, r0
 800344e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003450:	2e00      	cmp	r6, #0
 8003452:	f47f abba 	bne.w	8002bca <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003458:	f7ff bbb0 	b.w	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345c:	4978      	ldr	r1, [pc, #480]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800345e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003460:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003464:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8003466:	f7ff bbf3 	b.w	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346a:	4975      	ldr	r1, [pc, #468]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800346c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800346e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003472:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8003474:	e43f      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003476:	2102      	movs	r1, #2
 8003478:	3024      	adds	r0, #36	; 0x24
 800347a:	f7ff fb0d 	bl	8002a98 <RCCEx_PLL3_Config>
 800347e:	4606      	mov	r6, r0
      break;
 8003480:	e7e5      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003482:	496f      	ldr	r1, [pc, #444]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003484:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003486:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800348a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800348c:	f7ff bbbf 	b.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003490:	496b      	ldr	r1, [pc, #428]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003492:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003494:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003498:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800349a:	f7ff bbfb 	b.w	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800349e:	1d20      	adds	r0, r4, #4
 80034a0:	f7ff fa7e 	bl	80029a0 <RCCEx_PLL2_Config>
 80034a4:	4605      	mov	r5, r0
 80034a6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80034a8:	2d00      	cmp	r5, #0
 80034aa:	f47f aebe 	bne.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x69a>
 80034ae:	e63e      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b0:	4963      	ldr	r1, [pc, #396]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80034b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80034b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034b8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80034ba:	2d00      	cmp	r5, #0
 80034bc:	f47f ae9f 	bne.w	80031fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80034c0:	e647      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      ret = HAL_ERROR;
 80034c2:	2601      	movs	r6, #1
 80034c4:	4635      	mov	r5, r6
 80034c6:	e4d2      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 80034c8:	2603      	movs	r6, #3
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	4635      	mov	r5, r6
 80034ce:	e489      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80034d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80034d4:	f43f ad20 	beq.w	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80034d8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80034dc:	f43f ad1c 	beq.w	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80034e0:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80034e4:	f43f ad18 	beq.w	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 80034e8:	2601      	movs	r6, #1
 80034ea:	4635      	mov	r5, r6
 80034ec:	e51f      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80034ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80034f2:	f43f ad31 	beq.w	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80034f6:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80034fa:	f43f ad2d 	beq.w	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80034fe:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003502:	f43f ad29 	beq.w	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 8003506:	2601      	movs	r6, #1
 8003508:	4635      	mov	r5, r6
 800350a:	e530      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800350c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003510:	f43f ad42 	beq.w	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003514:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8003518:	f43f ad3e 	beq.w	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800351c:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8003520:	f43f ad3a 	beq.w	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 8003524:	2601      	movs	r6, #1
 8003526:	4635      	mov	r5, r6
 8003528:	e541      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 800352a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800352e:	f43f ac00 	beq.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003532:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003536:	f43f abfc 	beq.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800353a:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800353e:	f43f abf8 	beq.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 8003542:	2601      	movs	r6, #1
 8003544:	4635      	mov	r5, r6
 8003546:	f7ff bbfe 	b.w	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 800354a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800354e:	f43f ac0f 	beq.w	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8003552:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003556:	f43f ac0b 	beq.w	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800355a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800355e:	f43f ac07 	beq.w	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 8003562:	2601      	movs	r6, #1
 8003564:	4635      	mov	r5, r6
 8003566:	e40e      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003568:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800356c:	f43f ab70 	beq.w	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003570:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003574:	f43f ab6c 	beq.w	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 8003578:	2601      	movs	r6, #1
 800357a:	4635      	mov	r5, r6
 800357c:	f7ff bb73 	b.w	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003580:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8003584:	f43f ab86 	beq.w	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003588:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800358c:	f43f ab82 	beq.w	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 8003590:	2601      	movs	r6, #1
 8003592:	4635      	mov	r5, r6
 8003594:	f7ff bb89 	b.w	8002caa <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003598:	2ac0      	cmp	r2, #192	; 0xc0
 800359a:	f43f ab38 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800359e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80035a2:	f43f ab34 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 80035a6:	2601      	movs	r6, #1
 80035a8:	4635      	mov	r5, r6
 80035aa:	f7ff bb3a 	b.w	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80035ae:	b9ba      	cbnz	r2, 80035e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b0:	4823      	ldr	r0, [pc, #140]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80035b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80035b4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80035b8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80035ba:	f7ff baff 	b.w	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80035be:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80035c2:	f43f ab98 	beq.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80035c6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80035ca:	f43f ab94 	beq.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 80035ce:	2601      	movs	r6, #1
 80035d0:	4635      	mov	r5, r6
 80035d2:	f7ff bb9a 	b.w	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	f43f ae7e 	beq.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80035dc:	f7ff bb73 	b.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 80035e0:	2601      	movs	r6, #1
 80035e2:	f7ff baf2 	b.w	8002bca <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80035e6:	f7fd ff95 	bl	8001514 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ea:	4f15      	ldr	r7, [pc, #84]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
        tickstart = HAL_GetTick();
 80035ec:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035f2:	e006      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xa72>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fd ff8e 	bl	8001514 <HAL_GetTick>
 80035f8:	eba0 0009 	sub.w	r0, r0, r9
 80035fc:	4540      	cmp	r0, r8
 80035fe:	f63f af63 	bhi.w	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003604:	079b      	lsls	r3, r3, #30
 8003606:	d5f5      	bpl.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
 8003608:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800360c:	e5e4      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360e:	480c      	ldr	r0, [pc, #48]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003610:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0xab4>)
 8003612:	6901      	ldr	r1, [r0, #16]
 8003614:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8003618:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800361c:	430a      	orrs	r2, r1
 800361e:	6102      	str	r2, [r0, #16]
 8003620:	e5e5      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8003622:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003624:	462e      	mov	r6, r5
 8003626:	f7ff bbdd 	b.w	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 800362a:	2601      	movs	r6, #1
 800362c:	4635      	mov	r5, r6
 800362e:	e43d      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 8003630:	2601      	movs	r6, #1
 8003632:	4635      	mov	r5, r6
 8003634:	e45b      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 8003636:	2601      	movs	r6, #1
 8003638:	4635      	mov	r5, r6
 800363a:	f7ff bbd0 	b.w	8002dde <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800363e:	bf00      	nop
 8003640:	58024400 	.word	0x58024400
 8003644:	00ffffcf 	.word	0x00ffffcf

08003648 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8003648:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800364a:	f7fe ffa1 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003650:	4a05      	ldr	r2, [pc, #20]	; (8003668 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003658:	5cd3      	ldrb	r3, [r2, r3]
 800365a:	f003 031f 	and.w	r3, r3, #31
}
 800365e:	40d8      	lsrs	r0, r3
 8003660:	bd08      	pop	{r3, pc}
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400
 8003668:	080074c0 	.word	0x080074c0

0800366c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800366c:	4a46      	ldr	r2, [pc, #280]	; (8003788 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 800366e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003670:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003672:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003674:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003676:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800367a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800367c:	2b00      	cmp	r3, #0
 800367e:	d059      	beq.n	8003734 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003680:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003684:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003688:	f004 0403 	and.w	r4, r4, #3
 800368c:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003690:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8003694:	2c01      	cmp	r4, #1
 8003696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800369a:	ee06 1a90 	vmov	s13, r1
 800369e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80036a2:	d002      	beq.n	80036aa <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 80036a4:	d34e      	bcc.n	8003744 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80036a6:	2c02      	cmp	r4, #2
 80036a8:	d049      	beq.n	800373e <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036aa:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800378c <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 80036ae:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80036b2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80036b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b8:	ee07 3a10 	vmov	s14, r3
 80036bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80036c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80036c4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80036c8:	ee77 7a26 	vadd.f32	s15, s14, s13
 80036cc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80036d0:	4a2d      	ldr	r2, [pc, #180]	; (8003788 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 80036d2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80036d6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80036d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80036dc:	ee06 3a90 	vmov	s13, r3
 80036e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80036e4:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80036e6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80036ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036ee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80036f2:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036f6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80036f8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80036fc:	ee06 3a90 	vmov	s13, r3
 8003700:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003704:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003708:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800370c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003710:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003714:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003716:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800371a:	ee07 3a10 	vmov	s14, r3
 800371e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003722:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003726:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800372a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800372e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8003732:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003734:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003738:	6083      	str	r3, [r0, #8]
}
 800373a:	bc30      	pop	{r4, r5}
 800373c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800373e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003790 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8003742:	e7b4      	b.n	80036ae <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003744:	6813      	ldr	r3, [r2, #0]
 8003746:	069b      	lsls	r3, r3, #26
 8003748:	d51a      	bpl.n	8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800374a:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800374c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003750:	4910      	ldr	r1, [pc, #64]	; (8003794 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8003752:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003756:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003758:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	ee07 1a10 	vmov	s14, r1
 8003762:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003766:	ee07 3a10 	vmov	s14, r3
 800376a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800376e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8003772:	ee76 7a05 	vadd.f32	s15, s12, s10
 8003776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	e7a7      	b.n	80036d0 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003780:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8003784:	e793      	b.n	80036ae <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8003786:	bf00      	nop
 8003788:	58024400 	.word	0x58024400
 800378c:	4a742400 	.word	0x4a742400
 8003790:	4c189680 	.word	0x4c189680
 8003794:	03d09000 	.word	0x03d09000
 8003798:	4c742400 	.word	0x4c742400

0800379c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800379c:	4a46      	ldr	r2, [pc, #280]	; (80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 800379e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037a0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80037a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80037a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80037a6:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80037aa:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d059      	beq.n	8003864 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80037b0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80037b4:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037b8:	f004 0403 	and.w	r4, r4, #3
 80037bc:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80037c0:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80037c4:	2c01      	cmp	r4, #1
 80037c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ca:	ee06 1a90 	vmov	s13, r1
 80037ce:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80037d2:	d002      	beq.n	80037da <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 80037d4:	d34e      	bcc.n	8003874 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80037d6:	2c02      	cmp	r4, #2
 80037d8:	d049      	beq.n	800386e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037da:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80038bc <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 80037de:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80037e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80037e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e8:	ee07 3a10 	vmov	s14, r3
 80037ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80037f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80037f4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80037f8:	ee77 7a26 	vadd.f32	s15, s14, s13
 80037fc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003800:	4a2d      	ldr	r2, [pc, #180]	; (80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8003802:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003806:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003808:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800380c:	ee06 3a90 	vmov	s13, r3
 8003810:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8003814:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003816:	ee76 6a86 	vadd.f32	s13, s13, s12
 800381a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800381e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003822:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003826:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003828:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800382c:	ee06 3a90 	vmov	s13, r3
 8003830:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003834:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003838:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800383c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003840:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003844:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003846:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800384a:	ee07 3a10 	vmov	s14, r3
 800384e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003852:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003856:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800385a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800385e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8003862:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003864:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003868:	6083      	str	r3, [r0, #8]
}
 800386a:	bc30      	pop	{r4, r5}
 800386c:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800386e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80038c0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8003872:	e7b4      	b.n	80037de <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003874:	6813      	ldr	r3, [r2, #0]
 8003876:	069b      	lsls	r3, r3, #26
 8003878:	d51a      	bpl.n	80038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800387a:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800387c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003880:	4910      	ldr	r1, [pc, #64]	; (80038c4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8003882:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003886:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003888:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	ee07 1a10 	vmov	s14, r1
 8003892:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003896:	ee07 3a10 	vmov	s14, r3
 800389a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800389e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80038a2:	ee76 7a05 	vadd.f32	s15, s12, s10
 80038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	e7a7      	b.n	8003800 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038b0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80038c8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80038b4:	e793      	b.n	80037de <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80038b6:	bf00      	nop
 80038b8:	58024400 	.word	0x58024400
 80038bc:	4a742400 	.word	0x4a742400
 80038c0:	4c189680 	.word	0x4c189680
 80038c4:	03d09000 	.word	0x03d09000
 80038c8:	4c742400 	.word	0x4c742400

080038cc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d076      	beq.n	80039be <HAL_TIM_Base_Init+0xf2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80038d4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038da:	4604      	mov	r4, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d069      	beq.n	80039b4 <HAL_TIM_Base_Init+0xe8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e0:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80038e2:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e4:	493c      	ldr	r1, [pc, #240]	; (80039d8 <HAL_TIM_Base_Init+0x10c>)
 80038e6:	4e3d      	ldr	r6, [pc, #244]	; (80039dc <HAL_TIM_Base_Init+0x110>)
 80038e8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80038ec:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80038f4:	eba2 0606 	sub.w	r6, r2, r6
  tmpcr1 = TIMx->CR1;
 80038f8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038fa:	fab1 f181 	clz	r1, r1
 80038fe:	fab6 f686 	clz	r6, r6
 8003902:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8003906:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800390a:	d018      	beq.n	800393e <HAL_TIM_Base_Init+0x72>
 800390c:	b9b9      	cbnz	r1, 800393e <HAL_TIM_Base_Init+0x72>
 800390e:	4834      	ldr	r0, [pc, #208]	; (80039e0 <HAL_TIM_Base_Init+0x114>)
 8003910:	4282      	cmp	r2, r0
 8003912:	d014      	beq.n	800393e <HAL_TIM_Base_Init+0x72>
 8003914:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003918:	4282      	cmp	r2, r0
 800391a:	d010      	beq.n	800393e <HAL_TIM_Base_Init+0x72>
 800391c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003920:	4282      	cmp	r2, r0
 8003922:	d04e      	beq.n	80039c2 <HAL_TIM_Base_Init+0xf6>
 8003924:	2e00      	cmp	r6, #0
 8003926:	d14c      	bne.n	80039c2 <HAL_TIM_Base_Init+0xf6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003928:	4d2e      	ldr	r5, [pc, #184]	; (80039e4 <HAL_TIM_Base_Init+0x118>)
 800392a:	482f      	ldr	r0, [pc, #188]	; (80039e8 <HAL_TIM_Base_Init+0x11c>)
 800392c:	4282      	cmp	r2, r0
 800392e:	bf18      	it	ne
 8003930:	42aa      	cmpne	r2, r5
 8003932:	d008      	beq.n	8003946 <HAL_TIM_Base_Init+0x7a>
 8003934:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003938:	4282      	cmp	r2, r0
 800393a:	d108      	bne.n	800394e <HAL_TIM_Base_Init+0x82>
 800393c:	e003      	b.n	8003946 <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003942:	68a0      	ldr	r0, [r4, #8]
 8003944:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394a:	6920      	ldr	r0, [r4, #16]
 800394c:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800394e:	69a0      	ldr	r0, [r4, #24]
 8003950:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003954:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003956:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003958:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800395a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800395c:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800395e:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003960:	b951      	cbnz	r1, 8003978 <HAL_TIM_Base_Init+0xac>
 8003962:	b94e      	cbnz	r6, 8003978 <HAL_TIM_Base_Init+0xac>
 8003964:	491f      	ldr	r1, [pc, #124]	; (80039e4 <HAL_TIM_Base_Init+0x118>)
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_TIM_Base_Init+0x11c>)
 8003968:	429a      	cmp	r2, r3
 800396a:	bf18      	it	ne
 800396c:	428a      	cmpne	r2, r1
 800396e:	d003      	beq.n	8003978 <HAL_TIM_Base_Init+0xac>
 8003970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003974:	429a      	cmp	r2, r3
 8003976:	d101      	bne.n	800397c <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003978:	6963      	ldr	r3, [r4, #20]
 800397a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800397c:	2301      	movs	r3, #1
  return HAL_OK;
 800397e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003980:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003982:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003986:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800398a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800398e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003992:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800399a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80039a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039a6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80039aa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80039ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80039b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80039b8:	f7fd fc28 	bl	800120c <HAL_TIM_Base_MspInit>
 80039bc:	e790      	b.n	80038e0 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80039be:	2001      	movs	r0, #1
}
 80039c0:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c2:	480a      	ldr	r0, [pc, #40]	; (80039ec <HAL_TIM_Base_Init+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80039c8:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ca:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 80039cc:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d0:	d0b9      	beq.n	8003946 <HAL_TIM_Base_Init+0x7a>
 80039d2:	2e00      	cmp	r6, #0
 80039d4:	d1b7      	bne.n	8003946 <HAL_TIM_Base_Init+0x7a>
 80039d6:	e7a7      	b.n	8003928 <HAL_TIM_Base_Init+0x5c>
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40010400 	.word	0x40010400
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40000c00 	.word	0x40000c00

080039f0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80039f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d001      	beq.n	80039fc <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 80039f8:	2001      	movs	r0, #1
 80039fa:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039fe:	6802      	ldr	r2, [r0, #0]
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_TIM_Base_Start+0x34>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003a02:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a06:	6891      	ldr	r1, [r2, #8]
 8003a08:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d008      	beq.n	8003a20 <HAL_TIM_Base_Start+0x30>
 8003a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a12:	d005      	beq.n	8003a20 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8003a14:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8003a16:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4770      	bx	lr
  return HAL_OK;
 8003a20:	2000      	movs	r0, #0
}
 8003a22:	4770      	bx	lr
 8003a24:	00010007 	.word	0x00010007

08003a28 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003a28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f000 8081 	beq.w	8003b34 <HAL_TIM_ConfigClockSource+0x10c>
 8003a32:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR;
 8003a36:	6813      	ldr	r3, [r2, #0]
{
 8003a38:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003a3e:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8003a40:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a42:	4c56      	ldr	r4, [pc, #344]	; (8003b9c <HAL_TIM_ConfigClockSource+0x174>)
  __HAL_LOCK(htim);
 8003a44:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a48:	4004      	ands	r4, r0
  switch (sClockSourceConfig->ClockSource)
 8003a4a:	6808      	ldr	r0, [r1, #0]
 8003a4c:	2860      	cmp	r0, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003a4e:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003a50:	d072      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0x110>
 8003a52:	d91f      	bls.n	8003a94 <HAL_TIM_ConfigClockSource+0x6c>
 8003a54:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 8003a58:	f000 808a 	beq.w	8003b70 <HAL_TIM_ConfigClockSource+0x148>
 8003a5c:	f200 8090 	bhi.w	8003b80 <HAL_TIM_ConfigClockSource+0x158>
 8003a60:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003a64:	d03d      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0xba>
 8003a66:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8003a6a:	f000 8081 	beq.w	8003b70 <HAL_TIM_ConfigClockSource+0x148>
 8003a6e:	2870      	cmp	r0, #112	; 0x70
 8003a70:	d12e      	bne.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a72:	68cc      	ldr	r4, [r1, #12]
 8003a74:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 8003a78:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 8003a7c:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a7e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a82:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a86:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a88:	6099      	str	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003a8a:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8c:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003a90:	6099      	str	r1, [r3, #8]
      break;
 8003a92:	e01d      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8003a94:	2820      	cmp	r0, #32
 8003a96:	d06b      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0x148>
 8003a98:	d967      	bls.n	8003b6a <HAL_TIM_ConfigClockSource+0x142>
 8003a9a:	2840      	cmp	r0, #64	; 0x40
 8003a9c:	d032      	beq.n	8003b04 <HAL_TIM_ConfigClockSource+0xdc>
 8003a9e:	2850      	cmp	r0, #80	; 0x50
 8003aa0:	d178      	bne.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
  tmpccer = TIMx->CCER;
 8003aa2:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa4:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa6:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aa8:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aac:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab0:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003ab2:	4334      	orrs	r4, r6
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ab4:	493a      	ldr	r1, [pc, #232]	; (8003ba0 <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab8:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aba:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003abe:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003ac2:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac4:	621c      	str	r4, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003ac6:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac8:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aca:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003ace:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 8003ad0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003ad2:	2101      	movs	r1, #1
  return HAL_OK;
 8003ad4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8003ad6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003ada:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003ade:	bcf0      	pop	{r4, r5, r6, r7}
 8003ae0:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae2:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 8003ae6:	68cc      	ldr	r4, [r1, #12]
 8003ae8:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 8003aec:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aee:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af2:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af6:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8003af8:	6099      	str	r1, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003afa:	6899      	ldr	r1, [r3, #8]
 8003afc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003b00:	6099      	str	r1, [r3, #8]
      break;
 8003b02:	e7e5      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>
  tmpccer = TIMx->CCER;
 8003b04:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b06:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b08:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b0a:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b12:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003b14:	4334      	orrs	r4, r6
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b16:	4922      	ldr	r1, [pc, #136]	; (8003ba0 <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b18:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b1c:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b20:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003b24:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b26:	621c      	str	r4, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003b28:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2a:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b2c:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003b30:	6099      	str	r1, [r3, #8]
 8003b32:	e7cd      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>
  __HAL_LOCK(htim);
 8003b34:	2002      	movs	r0, #2
}
 8003b36:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b38:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b3a:	684e      	ldr	r6, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3c:	f025 0510 	bic.w	r5, r5, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b40:	68cf      	ldr	r7, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b42:	4917      	ldr	r1, [pc, #92]	; (8003ba0 <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b44:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b46:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 8003b48:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b4a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b4e:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b52:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b56:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003b5a:	619c      	str	r4, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5c:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003b5e:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b60:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b62:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003b66:	6099      	str	r1, [r3, #8]
 8003b68:	e7b2      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8003b6a:	b108      	cbz	r0, 8003b70 <HAL_TIM_ConfigClockSource+0x148>
 8003b6c:	2810      	cmp	r0, #16
 8003b6e:	d1af      	bne.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>
  tmpsmcr = TIMx->SMCR;
 8003b70:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b72:	f040 0007 	orr.w	r0, r0, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b76:	490a      	ldr	r1, [pc, #40]	; (8003ba0 <HAL_TIM_ConfigClockSource+0x178>)
 8003b78:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b7a:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8003b7c:	6098      	str	r0, [r3, #8]
 8003b7e:	e7a7      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8003b80:	4908      	ldr	r1, [pc, #32]	; (8003ba4 <HAL_TIM_ConfigClockSource+0x17c>)
 8003b82:	4288      	cmp	r0, r1
 8003b84:	d0f4      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0x148>
 8003b86:	3110      	adds	r1, #16
 8003b88:	4288      	cmp	r0, r1
 8003b8a:	d0f1      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0x148>
 8003b8c:	3920      	subs	r1, #32
 8003b8e:	4288      	cmp	r0, r1
 8003b90:	d19e      	bne.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>
 8003b92:	e7ed      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x148>
 8003b94:	2830      	cmp	r0, #48	; 0x30
 8003b96:	d19b      	bne.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>
 8003b98:	e7ea      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x148>
 8003b9a:	bf00      	nop
 8003b9c:	ffce0088 	.word	0xffce0088
 8003ba0:	ffcfff8f 	.word	0xffcfff8f
 8003ba4:	00100030 	.word	0x00100030

08003ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d045      	beq.n	8003c3c <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb0:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bb2:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 8003bb4:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bb6:	4e24      	ldr	r6, [pc, #144]	; (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 8003bba:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bf18      	it	ne
 8003bc0:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc2:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003bc6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bca:	bf08      	it	eq
 8003bcc:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8003bce:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bd0:	bf18      	it	ne
 8003bd2:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 8003bd4:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bd6:	d103      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bd8:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bdc:	684a      	ldr	r2, [r1, #4]
 8003bde:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be0:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be6:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be8:	4293      	cmp	r3, r2
 8003bea:	bf18      	it	ne
 8003bec:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8003bf0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bf4:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf8:	4f15      	ldr	r7, [pc, #84]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2201      	moveq	r2, #1
 8003bfe:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8003c00:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c02:	4563      	cmp	r3, ip
 8003c04:	bf08      	it	eq
 8003c06:	f042 0201 	orreq.w	r2, r2, #1
 8003c0a:	4c12      	ldr	r4, [pc, #72]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003c0c:	42bb      	cmp	r3, r7
 8003c0e:	bf08      	it	eq
 8003c10:	f042 0201 	orreq.w	r2, r2, #1
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	bf08      	it	eq
 8003c18:	f042 0201 	orreq.w	r2, r2, #1
 8003c1c:	b902      	cbnz	r2, 8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003c1e:	b126      	cbz	r6, 8003c2a <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c20:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c22:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c26:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c28:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003c2a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8003c2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003c32:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	bcf0      	pop	{r4, r5, r6, r7}
 8003c3a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003c3c:	2202      	movs	r2, #2
}
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40010400 	.word	0x40010400
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000c00 	.word	0x40000c00
 8003c54:	40001800 	.word	0x40001800
 8003c58:	40000800 	.word	0x40000800

08003c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c60:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c62:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8003c66:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d14a      	bne.n	8003d02 <HAL_UART_Transmit+0xa6>
 8003c6c:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6e:	2900      	cmp	r1, #0
 8003c70:	d04b      	beq.n	8003d0a <HAL_UART_Transmit+0xae>
 8003c72:	fab2 f782 	clz	r7, r2
 8003c76:	9201      	str	r2, [sp, #4]
 8003c78:	097f      	lsrs	r7, r7, #5
 8003c7a:	2f00      	cmp	r7, #0
 8003c7c:	d145      	bne.n	8003d0a <HAL_UART_Transmit+0xae>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8003c7e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003c82:	4605      	mov	r5, r0
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d03c      	beq.n	8003d02 <HAL_UART_Transmit+0xa6>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c88:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8003c8a:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8c:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 8003c90:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c94:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c98:	f7fd fc3c 	bl	8001514 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8003c9e:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8003ca0:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8003ca6:	f8a5 2054 	strh.w	r2, [r5, #84]	; 0x54
    huart->TxXferCount = Size;
 8003caa:	f8a5 2056 	strh.w	r2, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cae:	f000 8089 	beq.w	8003dc4 <HAL_UART_Transmit+0x168>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 8003cb2:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 8003cba:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8003cbc:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 8003cc0:	b1ab      	cbz	r3, 8003cee <HAL_UART_Transmit+0x92>
 8003cc2:	1c71      	adds	r1, r6, #1
 8003cc4:	d125      	bne.n	8003d12 <HAL_UART_Transmit+0xb6>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	69e2      	ldr	r2, [r4, #28]
 8003cc8:	0612      	lsls	r2, r2, #24
 8003cca:	d5fc      	bpl.n	8003cc6 <HAL_UART_Transmit+0x6a>
      if (pdata8bits == NULL)
 8003ccc:	f1b9 0f00 	cmp.w	r9, #0
 8003cd0:	d035      	beq.n	8003d3e <HAL_UART_Transmit+0xe2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cd2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8003cd6:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8003cd8:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ce4:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e9      	bne.n	8003cc2 <HAL_UART_Transmit+0x66>
 8003cee:	1c71      	adds	r1, r6, #1
 8003cf0:	d12a      	bne.n	8003d48 <HAL_UART_Transmit+0xec>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf2:	69e3      	ldr	r3, [r4, #28]
 8003cf4:	065a      	lsls	r2, r3, #25
 8003cf6:	d5fc      	bpl.n	8003cf2 <HAL_UART_Transmit+0x96>
    huart->gState = HAL_UART_STATE_READY;
 8003cf8:	2320      	movs	r3, #32
    return HAL_OK;
 8003cfa:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8003cfc:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    return HAL_OK;
 8003d00:	e000      	b.n	8003d04 <HAL_UART_Transmit+0xa8>
    return HAL_BUSY;
 8003d02:	2002      	movs	r0, #2
}
 8003d04:	b003      	add	sp, #12
 8003d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003d0a:	2001      	movs	r0, #1
}
 8003d0c:	b003      	add	sp, #12
 8003d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d12:	69e3      	ldr	r3, [r4, #28]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	d4d9      	bmi.n	8003ccc <HAL_UART_Transmit+0x70>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d18:	f7fd fbfc 	bl	8001514 <HAL_GetTick>
 8003d1c:	eba0 0008 	sub.w	r0, r0, r8
 8003d20:	4286      	cmp	r6, r0
 8003d22:	d33c      	bcc.n	8003d9e <HAL_UART_Transmit+0x142>
 8003d24:	fab6 f386 	clz	r3, r6
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d137      	bne.n	8003d9e <HAL_UART_Transmit+0x142>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d2e:	682c      	ldr	r4, [r5, #0]
 8003d30:	6822      	ldr	r2, [r4, #0]
 8003d32:	0752      	lsls	r2, r2, #29
 8003d34:	d5c5      	bpl.n	8003cc2 <HAL_UART_Transmit+0x66>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d36:	69e2      	ldr	r2, [r4, #28]
 8003d38:	0510      	lsls	r0, r2, #20
 8003d3a:	d5c2      	bpl.n	8003cc2 <HAL_UART_Transmit+0x66>
 8003d3c:	e019      	b.n	8003d72 <HAL_UART_Transmit+0x116>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d3e:	f837 3b02 	ldrh.w	r3, [r7], #2
 8003d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d46:	e7c6      	b.n	8003cd6 <HAL_UART_Transmit+0x7a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d48:	69e3      	ldr	r3, [r4, #28]
 8003d4a:	065b      	lsls	r3, r3, #25
 8003d4c:	d4d4      	bmi.n	8003cf8 <HAL_UART_Transmit+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fd fbe1 	bl	8001514 <HAL_GetTick>
 8003d52:	eba0 0008 	sub.w	r0, r0, r8
 8003d56:	fab6 f386 	clz	r3, r6
 8003d5a:	4286      	cmp	r6, r0
 8003d5c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8003d60:	d31d      	bcc.n	8003d9e <HAL_UART_Transmit+0x142>
 8003d62:	b9e3      	cbnz	r3, 8003d9e <HAL_UART_Transmit+0x142>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d64:	682c      	ldr	r4, [r5, #0]
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	0757      	lsls	r7, r2, #29
 8003d6a:	d5c0      	bpl.n	8003cee <HAL_UART_Transmit+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d6c:	69e2      	ldr	r2, [r4, #28]
 8003d6e:	0510      	lsls	r0, r2, #20
 8003d70:	d5bd      	bpl.n	8003cee <HAL_UART_Transmit+0x92>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d72:	f44f 6100 	mov.w	r1, #2048	; 0x800

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8003d76:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8003d78:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d7a:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003d7c:	6821      	ldr	r1, [r4, #0]
 8003d7e:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8003d82:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	68a1      	ldr	r1, [r4, #8]
 8003d86:	f021 0101 	bic.w	r1, r1, #1
 8003d8a:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003d8c:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d90:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003d94:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d98:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 8003d9c:	e7b2      	b.n	8003d04 <HAL_UART_Transmit+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003d9e:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8003da0:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8003da2:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 8003da4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003db6:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8003dba:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8003dc2:	e79f      	b.n	8003d04 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc4:	692b      	ldr	r3, [r5, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f47f af73 	bne.w	8003cb2 <HAL_UART_Transmit+0x56>
 8003dcc:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 8003dce:	4699      	mov	r9, r3
 8003dd0:	e76f      	b.n	8003cb2 <HAL_UART_Transmit+0x56>
 8003dd2:	bf00      	nop

08003dd4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d13d      	bne.n	8003e58 <HAL_UART_Receive_IT+0x84>
    if ((pData == NULL) || (Size == 0U))
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	d039      	beq.n	8003e54 <HAL_UART_Receive_IT+0x80>
 8003de0:	fab2 f382 	clz	r3, r2
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d134      	bne.n	8003e54 <HAL_UART_Receive_IT+0x80>
{
 8003dea:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(huart);
 8003dec:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8003df0:	2c01      	cmp	r4, #1
 8003df2:	d062      	beq.n	8003eba <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 8003df4:	6884      	ldr	r4, [r0, #8]
    __HAL_LOCK(huart);
 8003df6:	2501      	movs	r5, #1
    huart->pRxBuffPtr  = pData;
 8003df8:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003dfa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    __HAL_LOCK(huart);
 8003dfe:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize  = Size;
 8003e02:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003e06:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8003e0a:	66c3      	str	r3, [r0, #108]	; 0x6c
 8003e0c:	6801      	ldr	r1, [r0, #0]
 8003e0e:	6e45      	ldr	r5, [r0, #100]	; 0x64
    UART_MASK_COMPUTATION(huart);
 8003e10:	d024      	beq.n	8003e5c <HAL_UART_Receive_IT+0x88>
 8003e12:	2c00      	cmp	r4, #0
 8003e14:	d146      	bne.n	8003ea4 <HAL_UART_Receive_IT+0xd0>
 8003e16:	6903      	ldr	r3, [r0, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d066      	beq.n	8003eea <HAL_UART_Receive_IT+0x116>
 8003e1c:	237f      	movs	r3, #127	; 0x7f
 8003e1e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e22:	2400      	movs	r4, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e24:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e26:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e2a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	688b      	ldr	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003e30:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003e3a:	d020      	beq.n	8003e7e <HAL_UART_Receive_IT+0xaa>
        huart->RxISR = UART_RxISR_8BIT;
 8003e3c:	4c31      	ldr	r4, [pc, #196]	; (8003f04 <HAL_UART_Receive_IT+0x130>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003e3e:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8003e40:	2300      	movs	r3, #0
 8003e42:	66c4      	str	r4, [r0, #108]	; 0x6c
 8003e44:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003e48:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return HAL_OK;
 8003e4c:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003e4e:	600a      	str	r2, [r1, #0]
}
 8003e50:	bc70      	pop	{r4, r5, r6}
 8003e52:	4770      	bx	lr
      return HAL_ERROR;
 8003e54:	2001      	movs	r0, #1
}
 8003e56:	4770      	bx	lr
    return HAL_BUSY;
 8003e58:	2002      	movs	r0, #2
 8003e5a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8003e5c:	6904      	ldr	r4, [r0, #16]
 8003e5e:	b374      	cbz	r4, 8003ebe <HAL_UART_Receive_IT+0xea>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e60:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e62:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8003e66:	24ff      	movs	r4, #255	; 0xff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003e68:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e6c:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8003e72:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003e7c:	d1de      	bne.n	8003e3c <HAL_UART_Receive_IT+0x68>
 8003e7e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d8da      	bhi.n	8003e3c <HAL_UART_Receive_IT+0x68>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003e86:	4c20      	ldr	r4, [pc, #128]	; (8003f08 <HAL_UART_Receive_IT+0x134>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e88:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	66c4      	str	r4, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8003e92:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    return HAL_OK;
 8003e96:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e98:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003e9a:	688b      	ldr	r3, [r1, #8]
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	608b      	str	r3, [r1, #8]
 8003ea2:	e7d5      	b.n	8003e50 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 8003ea4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8003ea8:	d023      	beq.n	8003ef2 <HAL_UART_Receive_IT+0x11e>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eaa:	2422      	movs	r4, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8003eb0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb4:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 8003eb8:	e7b9      	b.n	8003e2e <HAL_UART_Receive_IT+0x5a>
    return HAL_BUSY;
 8003eba:	2002      	movs	r0, #2
 8003ebc:	e7c8      	b.n	8003e50 <HAL_UART_Receive_IT+0x7c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ebe:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003ec4:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 8003ec8:	f240 14ff 	movw	r4, #511	; 0x1ff
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ecc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8003ed2:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003edc:	d103      	bne.n	8003ee6 <HAL_UART_Receive_IT+0x112>
 8003ede:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d90c      	bls.n	8003f00 <HAL_UART_Receive_IT+0x12c>
        huart->RxISR = UART_RxISR_16BIT;
 8003ee6:	4c09      	ldr	r4, [pc, #36]	; (8003f0c <HAL_UART_Receive_IT+0x138>)
 8003ee8:	e7a9      	b.n	8003e3e <HAL_UART_Receive_IT+0x6a>
    UART_MASK_COMPUTATION(huart);
 8003eea:	23ff      	movs	r3, #255	; 0xff
 8003eec:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8003ef0:	e797      	b.n	8003e22 <HAL_UART_Receive_IT+0x4e>
 8003ef2:	6903      	ldr	r3, [r0, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d091      	beq.n	8003e1c <HAL_UART_Receive_IT+0x48>
 8003ef8:	233f      	movs	r3, #63	; 0x3f
 8003efa:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8003efe:	e790      	b.n	8003e22 <HAL_UART_Receive_IT+0x4e>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003f00:	4c03      	ldr	r4, [pc, #12]	; (8003f10 <HAL_UART_Receive_IT+0x13c>)
 8003f02:	e7c1      	b.n	8003e88 <HAL_UART_Receive_IT+0xb4>
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003fd1 	.word	0x08003fd1
 8003f0c:	08003f75 	.word	0x08003f75
 8003f10:	08004089 	.word	0x08004089

08003f14 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f14:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8003f18:	6802      	ldr	r2, [r0, #0]
 8003f1a:	2922      	cmp	r1, #34	; 0x22
{
 8003f1c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f1e:	d004      	beq.n	8003f2a <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f20:	6993      	ldr	r3, [r2, #24]
 8003f22:	f043 0308 	orr.w	r3, r3, #8
 8003f26:	6193      	str	r3, [r2, #24]
  }
}
 8003f28:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f2c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8003f30:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003f32:	4022      	ands	r2, r4
 8003f34:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8003f36:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8003f3a:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003f3c:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 8003f3e:	3101      	adds	r1, #1
    huart->RxXferCount--;
 8003f40:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8003f42:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003f44:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8003f48:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8003f4c:	b292      	uxth	r2, r2
 8003f4e:	2a00      	cmp	r2, #0
 8003f50:	d1ea      	bne.n	8003f28 <UART_RxISR_8BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f52:	6801      	ldr	r1, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8003f54:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f56:	680c      	ldr	r4, [r1, #0]
 8003f58:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8003f5c:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	688c      	ldr	r4, [r1, #8]
 8003f60:	f024 0401 	bic.w	r4, r4, #1
 8003f64:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 8003f66:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8003f68:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8003f6c:	f7fd f8c8 	bl	8001100 <HAL_UART_RxCpltCallback>
}
 8003f70:	bd38      	pop	{r3, r4, r5, pc}
 8003f72:	bf00      	nop

08003f74 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f74:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8003f78:	6802      	ldr	r2, [r0, #0]
 8003f7a:	2922      	cmp	r1, #34	; 0x22
{
 8003f7c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7e:	d004      	beq.n	8003f8a <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f80:	6993      	ldr	r3, [r2, #24]
 8003f82:	f043 0308 	orr.w	r3, r3, #8
 8003f86:	6193      	str	r3, [r2, #24]
  }
}
 8003f88:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f8a:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f8c:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 8003f90:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003f92:	4029      	ands	r1, r5
 8003f94:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 8003f98:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8003f9c:	6584      	str	r4, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003f9e:	3901      	subs	r1, #1
 8003fa0:	b289      	uxth	r1, r1
 8003fa2:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8003fa6:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8003faa:	b289      	uxth	r1, r1
 8003fac:	2900      	cmp	r1, #0
 8003fae:	d1eb      	bne.n	8003f88 <UART_RxISR_16BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fb0:	6814      	ldr	r4, [r2, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fb4:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8003fb8:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	6894      	ldr	r4, [r2, #8]
 8003fbc:	f024 0401 	bic.w	r4, r4, #1
 8003fc0:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 8003fc2:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8003fc8:	f7fd f89a 	bl	8001100 <HAL_UART_RxCpltCallback>
}
 8003fcc:	bd38      	pop	{r3, r4, r5, pc}
 8003fce:	bf00      	nop

08003fd0 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fd0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003fd4:	2b22      	cmp	r3, #34	; 0x22
 8003fd6:	d005      	beq.n	8003fe4 <UART_RxISR_8BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fd8:	6802      	ldr	r2, [r0, #0]
 8003fda:	6993      	ldr	r3, [r2, #24]
 8003fdc:	f043 0308 	orr.w	r3, r3, #8
 8003fe0:	6193      	str	r3, [r2, #24]
 8003fe2:	4770      	bx	lr
{
 8003fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003fe8:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8003fec:	2d00      	cmp	r5, #0
 8003fee:	d043      	beq.n	8004078 <UART_RxISR_8BIT_FIFOEN+0xa8>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	f890 8060 	ldrb.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ff8:	4e21      	ldr	r6, [pc, #132]	; (8004080 <UART_RxISR_8BIT_FIFOEN+0xb0>)
 8003ffa:	e002      	b.n	8004002 <UART_RxISR_8BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003ffc:	3d01      	subs	r5, #1
 8003ffe:	b2ad      	uxth	r5, r5
 8004000:	b32d      	cbz	r5, 800404e <UART_RxISR_8BIT_FIFOEN+0x7e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004002:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004004:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004008:	ea08 0303 	and.w	r3, r8, r3
 800400c:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 800400e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 8004012:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8004014:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 8004016:	3201      	adds	r2, #1
      huart->RxXferCount--;
 8004018:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 800401a:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800401c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8004020:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e8      	bne.n	8003ffc <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800402a:	6822      	ldr	r2, [r4, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800402c:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 800402e:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004030:	6811      	ldr	r1, [r2, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004032:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004034:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004038:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800403a:	6891      	ldr	r1, [r2, #8]
 800403c:	4031      	ands	r1, r6
 800403e:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8004040:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8004044:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8004046:	f7fd f85b 	bl	8001100 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800404a:	2d00      	cmp	r5, #0
 800404c:	d1d9      	bne.n	8004002 <UART_RxISR_8BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 800404e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004052:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004054:	b173      	cbz	r3, 8004074 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8004056:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800405a:	429a      	cmp	r2, r3
 800405c:	d90a      	bls.n	8004074 <UART_RxISR_8BIT_FIFOEN+0xa4>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800405e:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8004060:	4908      	ldr	r1, [pc, #32]	; (8004084 <UART_RxISR_8BIT_FIFOEN+0xb4>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004068:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800406a:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800406c:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800406e:	f042 0220 	orr.w	r2, r2, #32
 8004072:	601a      	str	r2, [r3, #0]
  }
}
 8004074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8004078:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800407c:	e7fa      	b.n	8004074 <UART_RxISR_8BIT_FIFOEN+0xa4>
 800407e:	bf00      	nop
 8004080:	effffffe 	.word	0xeffffffe
 8004084:	08003f15 	.word	0x08003f15

08004088 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004088:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800408c:	2b22      	cmp	r3, #34	; 0x22
 800408e:	d005      	beq.n	800409c <UART_RxISR_16BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004090:	6802      	ldr	r2, [r0, #0]
 8004092:	6993      	ldr	r3, [r2, #24]
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	6193      	str	r3, [r2, #24]
 800409a:	4770      	bx	lr
{
 800409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80040a0:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 80040a4:	2d00      	cmp	r5, #0
 80040a6:	d041      	beq.n	800412c <UART_RxISR_16BIT_FIFOEN+0xa4>
 80040a8:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 80040aa:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 80040ae:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040b0:	4e20      	ldr	r6, [pc, #128]	; (8004134 <UART_RxISR_16BIT_FIFOEN+0xac>)
 80040b2:	e002      	b.n	80040ba <UART_RxISR_16BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80040b4:	3d01      	subs	r5, #1
 80040b6:	b2ad      	uxth	r5, r5
 80040b8:	b31d      	cbz	r5, 8004102 <UART_RxISR_16BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040ba:	6821      	ldr	r1, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 80040bc:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80040c0:	ea08 0303 	and.w	r3, r8, r3
 80040c4:	f822 3b02 	strh.w	r3, [r2], #2
      huart->RxXferCount--;
 80040c8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 80040cc:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80040d6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e9      	bne.n	80040b4 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e0:	680a      	ldr	r2, [r1, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80040e2:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 80040e4:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80040ea:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ec:	600a      	str	r2, [r1, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040ee:	688a      	ldr	r2, [r1, #8]
 80040f0:	4032      	ands	r2, r6
 80040f2:	608a      	str	r2, [r1, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80040f4:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80040f8:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80040fa:	f7fd f801 	bl	8001100 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80040fe:	2d00      	cmp	r5, #0
 8004100:	d1db      	bne.n	80040ba <UART_RxISR_16BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 8004102:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004106:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004108:	b173      	cbz	r3, 8004128 <UART_RxISR_16BIT_FIFOEN+0xa0>
 800410a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800410e:	429a      	cmp	r2, r3
 8004110:	d90a      	bls.n	8004128 <UART_RxISR_16BIT_FIFOEN+0xa0>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004112:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8004114:	4908      	ldr	r1, [pc, #32]	; (8004138 <UART_RxISR_16BIT_FIFOEN+0xb0>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800411c:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800411e:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8004120:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004122:	f042 0220 	orr.w	r2, r2, #32
 8004126:	601a      	str	r2, [r3, #0]
  }
}
 8004128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 800412c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004130:	e7fa      	b.n	8004128 <UART_RxISR_16BIT_FIFOEN+0xa0>
 8004132:	bf00      	nop
 8004134:	effffffe 	.word	0xeffffffe
 8004138:	08003f75 	.word	0x08003f75

0800413c <HAL_UART_ErrorCallback>:
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop

08004140 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004140:	6802      	ldr	r2, [r0, #0]
{
 8004142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004146:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004148:	f640 050f 	movw	r5, #2063	; 0x80f
{
 800414c:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800414e:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 8004150:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004152:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8004154:	d070      	beq.n	8004238 <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004156:	4d73      	ldr	r5, [pc, #460]	; (8004324 <HAL_UART_IRQHandler+0x1e4>)
 8004158:	400d      	ands	r5, r1
 800415a:	f000 808f 	beq.w	800427c <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800415e:	07df      	lsls	r7, r3, #31
 8004160:	d509      	bpl.n	8004176 <HAL_UART_IRQHandler+0x36>
 8004162:	05c6      	lsls	r6, r0, #23
 8004164:	d507      	bpl.n	8004176 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004166:	2601      	movs	r6, #1
 8004168:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800416a:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800416e:	f046 0601 	orr.w	r6, r6, #1
 8004172:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004176:	079f      	lsls	r7, r3, #30
 8004178:	f003 0604 	and.w	r6, r3, #4
 800417c:	f140 8093 	bpl.w	80042a6 <HAL_UART_IRQHandler+0x166>
 8004180:	07cf      	lsls	r7, r1, #31
 8004182:	d50a      	bpl.n	800419a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004184:	2702      	movs	r7, #2
 8004186:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004188:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 800418c:	f047 0704 	orr.w	r7, r7, #4
 8004190:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004194:	2e00      	cmp	r6, #0
 8004196:	f040 808c 	bne.w	80042b2 <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800419a:	071f      	lsls	r7, r3, #28
 800419c:	d505      	bpl.n	80041aa <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800419e:	0686      	lsls	r6, r0, #26
 80041a0:	f100 8097 	bmi.w	80042d2 <HAL_UART_IRQHandler+0x192>
 80041a4:	2d00      	cmp	r5, #0
 80041a6:	f040 8094 	bne.w	80042d2 <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041aa:	051f      	lsls	r7, r3, #20
 80041ac:	d50a      	bpl.n	80041c4 <HAL_UART_IRQHandler+0x84>
 80041ae:	0146      	lsls	r6, r0, #5
 80041b0:	d508      	bpl.n	80041c4 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80041b6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041b8:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80041bc:	f045 0520 	orr.w	r5, r5, #32
 80041c0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041c4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80041c8:	2d00      	cmp	r5, #0
 80041ca:	d06a      	beq.n	80042a2 <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041cc:	069d      	lsls	r5, r3, #26
 80041ce:	d507      	bpl.n	80041e0 <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041d0:	0680      	lsls	r0, r0, #26
 80041d2:	f140 808b 	bpl.w	80042ec <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 80041d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80041d8:	b113      	cbz	r3, 80041e0 <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 80041da:	4620      	mov	r0, r4
 80041dc:	4798      	blx	r3
 80041de:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80041e0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041e4:	6891      	ldr	r1, [r2, #8]
 80041e6:	064f      	lsls	r7, r1, #25
 80041e8:	d403      	bmi.n	80041f2 <HAL_UART_IRQHandler+0xb2>
 80041ea:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80041ee:	f000 8093 	beq.w	8004318 <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041f2:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80041f4:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041f6:	4b4c      	ldr	r3, [pc, #304]	; (8004328 <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 80041f8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041fa:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80041fe:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004200:	6891      	ldr	r1, [r2, #8]
 8004202:	400b      	ands	r3, r1
 8004204:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004206:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420a:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 800420c:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420e:	065e      	lsls	r6, r3, #25
 8004210:	d568      	bpl.n	80042e4 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8004214:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421a:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800421c:	2900      	cmp	r1, #0
 800421e:	d061      	beq.n	80042e4 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004220:	4b42      	ldr	r3, [pc, #264]	; (800432c <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004222:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004224:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004226:	f7fd fa03 	bl	8001630 <HAL_DMA_Abort_IT>
 800422a:	2800      	cmp	r0, #0
 800422c:	d039      	beq.n	80042a2 <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800422e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8004230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004234:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004236:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004238:	069f      	lsls	r7, r3, #26
 800423a:	d509      	bpl.n	8004250 <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800423c:	0686      	lsls	r6, r0, #26
 800423e:	d505      	bpl.n	800424c <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 8004240:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004242:	b373      	cbz	r3, 80042a2 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8004244:	4620      	mov	r0, r4
}
 8004246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800424a:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800424c:	00cd      	lsls	r5, r1, #3
 800424e:	d4f7      	bmi.n	8004240 <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004250:	02dd      	lsls	r5, r3, #11
 8004252:	d409      	bmi.n	8004268 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004254:	061e      	lsls	r6, r3, #24
 8004256:	d51a      	bpl.n	800428e <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004258:	0605      	lsls	r5, r0, #24
 800425a:	d516      	bpl.n	800428a <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 800425c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800425e:	b303      	cbz	r3, 80042a2 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8004260:	4620      	mov	r0, r4
}
 8004262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8004266:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004268:	024f      	lsls	r7, r1, #9
 800426a:	d5f3      	bpl.n	8004254 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800426c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004270:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004272:	6213      	str	r3, [r2, #32]
}
 8004274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004278:	f000 bc64 	b.w	8004b44 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800427c:	4e2c      	ldr	r6, [pc, #176]	; (8004330 <HAL_UART_IRQHandler+0x1f0>)
 800427e:	4230      	tst	r0, r6
 8004280:	d0e6      	beq.n	8004250 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004282:	07df      	lsls	r7, r3, #31
 8004284:	f57f af77 	bpl.w	8004176 <HAL_UART_IRQHandler+0x36>
 8004288:	e76b      	b.n	8004162 <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800428a:	020f      	lsls	r7, r1, #8
 800428c:	d4e6      	bmi.n	800425c <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800428e:	065e      	lsls	r6, r3, #25
 8004290:	d501      	bpl.n	8004296 <HAL_UART_IRQHandler+0x156>
 8004292:	0645      	lsls	r5, r0, #25
 8004294:	d42e      	bmi.n	80042f4 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004296:	0219      	lsls	r1, r3, #8
 8004298:	d414      	bmi.n	80042c4 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800429a:	01db      	lsls	r3, r3, #7
 800429c:	d501      	bpl.n	80042a2 <HAL_UART_IRQHandler+0x162>
 800429e:	2800      	cmp	r0, #0
 80042a0:	db35      	blt.n	800430e <HAL_UART_IRQHandler+0x1ce>
}
 80042a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	f43f af77 	beq.w	800419a <HAL_UART_IRQHandler+0x5a>
 80042ac:	07ce      	lsls	r6, r1, #31
 80042ae:	f57f af74 	bpl.w	800419a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042b2:	2604      	movs	r6, #4
 80042b4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b6:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80042ba:	f046 0602 	orr.w	r6, r6, #2
 80042be:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 80042c2:	e76a      	b.n	800419a <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042c4:	0042      	lsls	r2, r0, #1
 80042c6:	d5e8      	bpl.n	800429a <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042c8:	4620      	mov	r0, r4
}
 80042ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042ce:	f000 bc3d 	b.w	8004b4c <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d2:	2508      	movs	r5, #8
 80042d4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042d6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80042da:	f045 0508 	orr.w	r5, r5, #8
 80042de:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80042e2:	e762      	b.n	80041aa <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff ff29 	bl	800413c <HAL_UART_ErrorCallback>
 80042ea:	e7da      	b.n	80042a2 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042ec:	00cb      	lsls	r3, r1, #3
 80042ee:	f57f af77 	bpl.w	80041e0 <HAL_UART_IRQHandler+0xa0>
 80042f2:	e770      	b.n	80041d6 <HAL_UART_IRQHandler+0x96>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042f4:	6813      	ldr	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80042f6:	2520      	movs	r5, #32
  huart->TxISR = NULL;
 80042f8:	2100      	movs	r1, #0
  HAL_UART_TxCpltCallback(huart);
 80042fa:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004300:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004302:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8004306:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8004308:	f7fc fef4 	bl	80010f4 <HAL_UART_TxCpltCallback>
 800430c:	e7c9      	b.n	80042a2 <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800430e:	4620      	mov	r0, r4
}
 8004310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004314:	f000 bc18 	b.w	8004b48 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8004318:	4620      	mov	r0, r4
 800431a:	f7ff ff0f 	bl	800413c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8004322:	e7be      	b.n	80042a2 <HAL_UART_IRQHandler+0x162>
 8004324:	10000001 	.word	0x10000001
 8004328:	effffffe 	.word	0xeffffffe
 800432c:	08004335 	.word	0x08004335
 8004330:	04000120 	.word	0x04000120

08004334 <UART_DMAAbortOnError>:
{
 8004334:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8004336:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004338:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800433a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 800433e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8004340:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8004344:	f7ff fefa 	bl	800413c <HAL_UART_ErrorCallback>
}
 8004348:	bd08      	pop	{r3, pc}
 800434a:	bf00      	nop

0800434c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800434c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800434e:	07da      	lsls	r2, r3, #31
{
 8004350:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004352:	d506      	bpl.n	8004362 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004354:	6801      	ldr	r1, [r0, #0]
 8004356:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004358:	684a      	ldr	r2, [r1, #4]
 800435a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800435e:	4322      	orrs	r2, r4
 8004360:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004362:	079c      	lsls	r4, r3, #30
 8004364:	d506      	bpl.n	8004374 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004366:	6801      	ldr	r1, [r0, #0]
 8004368:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800436a:	684a      	ldr	r2, [r1, #4]
 800436c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004370:	4322      	orrs	r2, r4
 8004372:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004374:	0759      	lsls	r1, r3, #29
 8004376:	d506      	bpl.n	8004386 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004378:	6801      	ldr	r1, [r0, #0]
 800437a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800437c:	684a      	ldr	r2, [r1, #4]
 800437e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004382:	4322      	orrs	r2, r4
 8004384:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004386:	071a      	lsls	r2, r3, #28
 8004388:	d506      	bpl.n	8004398 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800438a:	6801      	ldr	r1, [r0, #0]
 800438c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800438e:	684a      	ldr	r2, [r1, #4]
 8004390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004394:	4322      	orrs	r2, r4
 8004396:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004398:	06dc      	lsls	r4, r3, #27
 800439a:	d506      	bpl.n	80043aa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800439c:	6801      	ldr	r1, [r0, #0]
 800439e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80043a0:	688a      	ldr	r2, [r1, #8]
 80043a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043a6:	4322      	orrs	r2, r4
 80043a8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043aa:	0699      	lsls	r1, r3, #26
 80043ac:	d506      	bpl.n	80043bc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ae:	6801      	ldr	r1, [r0, #0]
 80043b0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80043b2:	688a      	ldr	r2, [r1, #8]
 80043b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b8:	4322      	orrs	r2, r4
 80043ba:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043bc:	065a      	lsls	r2, r3, #25
 80043be:	d50a      	bpl.n	80043d6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043c0:	6801      	ldr	r1, [r0, #0]
 80043c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80043c4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043c6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80043ce:	ea42 0204 	orr.w	r2, r2, r4
 80043d2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d4:	d00b      	beq.n	80043ee <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	d506      	bpl.n	80043e8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043da:	6802      	ldr	r2, [r0, #0]
 80043dc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80043de:	6853      	ldr	r3, [r2, #4]
 80043e0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6053      	str	r3, [r2, #4]
}
 80043e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ec:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ee:	684a      	ldr	r2, [r1, #4]
 80043f0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80043f2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80043f6:	4322      	orrs	r2, r4
 80043f8:	604a      	str	r2, [r1, #4]
 80043fa:	e7ec      	b.n	80043d6 <UART_AdvFeatureConfig+0x8a>

080043fc <HAL_UART_Init>:
  if (huart == NULL)
 80043fc:	2800      	cmp	r0, #0
 80043fe:	f000 80d2 	beq.w	80045a6 <HAL_UART_Init+0x1aa>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004402:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8004406:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800440a:	4604      	mov	r4, r0
 800440c:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_RESET)
 800440e:	2b00      	cmp	r3, #0
 8004410:	d058      	beq.n	80044c4 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 8004412:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004414:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004416:	6921      	ldr	r1, [r4, #16]
 8004418:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800441a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800441e:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 8004420:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004422:	6960      	ldr	r0, [r4, #20]
 8004424:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8004426:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800442a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800442c:	48a1      	ldr	r0, [pc, #644]	; (80046b4 <HAL_UART_Init+0x2b8>)
  __HAL_UART_DISABLE(huart);
 800442e:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004430:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004432:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004434:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004436:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004438:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 800443a:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800443c:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004440:	4e9d      	ldr	r6, [pc, #628]	; (80046b8 <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004442:	4302      	orrs	r2, r0
 8004444:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004446:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004448:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004450:	ea42 0207 	orr.w	r2, r2, r7
 8004454:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004456:	f000 808b 	beq.w	8004570 <HAL_UART_Init+0x174>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800445a:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800445c:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800445e:	4897      	ldr	r0, [pc, #604]	; (80046bc <HAL_UART_Init+0x2c0>)
    tmpreg |= huart->Init.OneBitSampling;
 8004460:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004464:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004466:	4e96      	ldr	r6, [pc, #600]	; (80046c0 <HAL_UART_Init+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004468:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800446a:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800446c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	f022 020f 	bic.w	r2, r2, #15
 8004474:	ea42 0205 	orr.w	r2, r2, r5
 8004478:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800447a:	d028      	beq.n	80044ce <HAL_UART_Init+0xd2>
 800447c:	4a91      	ldr	r2, [pc, #580]	; (80046c4 <HAL_UART_Init+0x2c8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	f000 810e 	beq.w	80046a0 <HAL_UART_Init+0x2a4>
 8004484:	4a90      	ldr	r2, [pc, #576]	; (80046c8 <HAL_UART_Init+0x2cc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	f000 8100 	beq.w	800468c <HAL_UART_Init+0x290>
 800448c:	4a8f      	ldr	r2, [pc, #572]	; (80046cc <HAL_UART_Init+0x2d0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f000 829e 	beq.w	80049d0 <HAL_UART_Init+0x5d4>
 8004494:	4a8e      	ldr	r2, [pc, #568]	; (80046d0 <HAL_UART_Init+0x2d4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	f000 82a4 	beq.w	80049e4 <HAL_UART_Init+0x5e8>
 800449c:	4a8d      	ldr	r2, [pc, #564]	; (80046d4 <HAL_UART_Init+0x2d8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	f000 82aa 	beq.w	80049f8 <HAL_UART_Init+0x5fc>
 80044a4:	4a8c      	ldr	r2, [pc, #560]	; (80046d8 <HAL_UART_Init+0x2dc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	f000 82c5 	beq.w	8004a36 <HAL_UART_Init+0x63a>
 80044ac:	4a8b      	ldr	r2, [pc, #556]	; (80046dc <HAL_UART_Init+0x2e0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d16f      	bne.n	8004592 <HAL_UART_Init+0x196>
 80044b2:	4b8b      	ldr	r3, [pc, #556]	; (80046e0 <HAL_UART_Init+0x2e4>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d869      	bhi.n	8004592 <HAL_UART_Init+0x196>
 80044be:	4a89      	ldr	r2, [pc, #548]	; (80046e4 <HAL_UART_Init+0x2e8>)
 80044c0:	5cd3      	ldrb	r3, [r2, r3]
 80044c2:	e00c      	b.n	80044de <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 80044c4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80044c8:	f7fc feee 	bl	80012a8 <HAL_UART_MspInit>
 80044cc:	e7a1      	b.n	8004412 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ce:	4b84      	ldr	r3, [pc, #528]	; (80046e0 <HAL_UART_Init+0x2e4>)
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d6:	2b28      	cmp	r3, #40	; 0x28
 80044d8:	d85b      	bhi.n	8004592 <HAL_UART_Init+0x196>
 80044da:	4a83      	ldr	r2, [pc, #524]	; (80046e8 <HAL_UART_Init+0x2ec>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044de:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80044e2:	f000 810f 	beq.w	8004704 <HAL_UART_Init+0x308>
    switch (clocksource)
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	d853      	bhi.n	8004592 <HAL_UART_Init+0x196>
 80044ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044ee:	0209      	.short	0x0209
 80044f0:	0052020c 	.word	0x0052020c
 80044f4:	02040052 	.word	0x02040052
 80044f8:	00520052 	.word	0x00520052
 80044fc:	01fc0052 	.word	0x01fc0052
 8004500:	00520052 	.word	0x00520052
 8004504:	00520052 	.word	0x00520052
 8004508:	00520052 	.word	0x00520052
 800450c:	01d00052 	.word	0x01d00052
 8004510:	00520052 	.word	0x00520052
 8004514:	00520052 	.word	0x00520052
 8004518:	00520052 	.word	0x00520052
 800451c:	00520052 	.word	0x00520052
 8004520:	00520052 	.word	0x00520052
 8004524:	00520052 	.word	0x00520052
 8004528:	00520052 	.word	0x00520052
 800452c:	02120052 	.word	0x02120052
 8004530:	00520052 	.word	0x00520052
 8004534:	00520052 	.word	0x00520052
 8004538:	00520052 	.word	0x00520052
 800453c:	00520052 	.word	0x00520052
 8004540:	00520052 	.word	0x00520052
 8004544:	00520052 	.word	0x00520052
 8004548:	00520052 	.word	0x00520052
 800454c:	00520052 	.word	0x00520052
 8004550:	00520052 	.word	0x00520052
 8004554:	00520052 	.word	0x00520052
 8004558:	00520052 	.word	0x00520052
 800455c:	00520052 	.word	0x00520052
 8004560:	00520052 	.word	0x00520052
 8004564:	00520052 	.word	0x00520052
 8004568:	00520052 	.word	0x00520052
 800456c:	020f0052 	.word	0x020f0052
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004570:	6898      	ldr	r0, [r3, #8]
 8004572:	4a52      	ldr	r2, [pc, #328]	; (80046bc <HAL_UART_Init+0x2c0>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004574:	495a      	ldr	r1, [pc, #360]	; (80046e0 <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004576:	4002      	ands	r2, r0
 8004578:	ea42 020c 	orr.w	r2, r2, ip
 800457c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	f022 020f 	bic.w	r2, r2, #15
 8004584:	432a      	orrs	r2, r5
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004588:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	2b05      	cmp	r3, #5
 8004590:	d90b      	bls.n	80045aa <HAL_UART_Init+0x1ae>
  huart->RxISR = NULL;
 8004592:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8004594:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8004598:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 800459a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 800459c:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 80045a0:	b007      	add	sp, #28
 80045a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 80045a6:	2001      	movs	r0, #1
}
 80045a8:	4770      	bx	lr
    switch (clocksource)
 80045aa:	4a50      	ldr	r2, [pc, #320]	; (80046ec <HAL_UART_Init+0x2f0>)
 80045ac:	5cd3      	ldrb	r3, [r2, r3]
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	f000 823c 	beq.w	8004a2c <HAL_UART_Init+0x630>
 80045b4:	f240 822a 	bls.w	8004a0c <HAL_UART_Init+0x610>
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	f000 81ac 	beq.w	8004916 <HAL_UART_Init+0x51a>
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	f000 8245 	beq.w	8004a4e <HAL_UART_Init+0x652>
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d1e4      	bne.n	8004592 <HAL_UART_Init+0x196>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045c8:	680b      	ldr	r3, [r1, #0]
 80045ca:	069f      	lsls	r7, r3, #26
 80045cc:	f140 8242 	bpl.w	8004a54 <HAL_UART_Init+0x658>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80045d0:	680b      	ldr	r3, [r1, #0]
 80045d2:	4847      	ldr	r0, [pc, #284]	; (80046f0 <HAL_UART_Init+0x2f4>)
 80045d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80045d8:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045da:	4b46      	ldr	r3, [pc, #280]	; (80046f4 <HAL_UART_Init+0x2f8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045dc:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045de:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045e2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045e6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045ea:	428b      	cmp	r3, r1
 80045ec:	d3d1      	bcc.n	8004592 <HAL_UART_Init+0x196>
 80045ee:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80045f2:	d8ce      	bhi.n	8004592 <HAL_UART_Init+0x196>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f4:	2500      	movs	r5, #0
 80045f6:	2300      	movs	r3, #0
 80045f8:	0877      	lsrs	r7, r6, #1
 80045fa:	4629      	mov	r1, r5
 80045fc:	f7fb fec8 	bl	8000390 <__aeabi_uldivmod>
 8004600:	4632      	mov	r2, r6
 8004602:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8004606:	462b      	mov	r3, r5
 8004608:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800460c:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8004610:	eb18 0007 	adds.w	r0, r8, r7
 8004614:	f149 0100 	adc.w	r1, r9, #0
 8004618:	f7fb feba 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800461c:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <HAL_UART_Init+0x2fc>)
 800461e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004622:	429a      	cmp	r2, r3
 8004624:	d8b5      	bhi.n	8004592 <HAL_UART_Init+0x196>
          huart->Instance->BRR = usartdiv;
 8004626:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8004628:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800462c:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 800462e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004630:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004634:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 8151 	bne.w	80048de <HAL_UART_Init+0x4e2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800463c:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800464e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004658:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 800465c:	f7fc ff5a 	bl	8001514 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004660:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004662:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	0711      	lsls	r1, r2, #28
 8004668:	f100 80d4 	bmi.w	8004814 <HAL_UART_Init+0x418>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	0750      	lsls	r0, r2, #29
 8004670:	f100 80f9 	bmi.w	8004866 <HAL_UART_Init+0x46a>
  __HAL_UNLOCK(huart);
 8004674:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004676:	2220      	movs	r2, #32
  return HAL_OK;
 8004678:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800467a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800467e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004682:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8004686:	b007      	add	sp, #28
 8004688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_UART_Init+0x2e4>)
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	2b05      	cmp	r3, #5
 8004696:	f63f af7c 	bhi.w	8004592 <HAL_UART_Init+0x196>
 800469a:	4a18      	ldr	r2, [pc, #96]	; (80046fc <HAL_UART_Init+0x300>)
 800469c:	5cd3      	ldrb	r3, [r2, r3]
 800469e:	e71e      	b.n	80044de <HAL_UART_Init+0xe2>
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_UART_Init+0x2e4>)
 80046a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	2b05      	cmp	r3, #5
 80046aa:	f63f af72 	bhi.w	8004592 <HAL_UART_Init+0x196>
 80046ae:	4a14      	ldr	r2, [pc, #80]	; (8004700 <HAL_UART_Init+0x304>)
 80046b0:	5cd3      	ldrb	r3, [r2, r3]
 80046b2:	e714      	b.n	80044de <HAL_UART_Init+0xe2>
 80046b4:	cfff69f3 	.word	0xcfff69f3
 80046b8:	58000c00 	.word	0x58000c00
 80046bc:	11fff4ff 	.word	0x11fff4ff
 80046c0:	40011000 	.word	0x40011000
 80046c4:	40004400 	.word	0x40004400
 80046c8:	40004800 	.word	0x40004800
 80046cc:	40004c00 	.word	0x40004c00
 80046d0:	40005000 	.word	0x40005000
 80046d4:	40011400 	.word	0x40011400
 80046d8:	40007800 	.word	0x40007800
 80046dc:	40007c00 	.word	0x40007c00
 80046e0:	58024400 	.word	0x58024400
 80046e4:	08007578 	.word	0x08007578
 80046e8:	0800754c 	.word	0x0800754c
 80046ec:	08007580 	.word	0x08007580
 80046f0:	03d09000 	.word	0x03d09000
 80046f4:	08007588 	.word	0x08007588
 80046f8:	000ffcff 	.word	0x000ffcff
 80046fc:	08007578 	.word	0x08007578
 8004700:	08007578 	.word	0x08007578
    switch (clocksource)
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	f63f af44 	bhi.w	8004592 <HAL_UART_Init+0x196>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <HAL_UART_Init+0x314>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004987 	.word	0x08004987
 8004714:	08004981 	.word	0x08004981
 8004718:	08004593 	.word	0x08004593
 800471c:	08004593 	.word	0x08004593
 8004720:	0800498d 	.word	0x0800498d
 8004724:	08004593 	.word	0x08004593
 8004728:	08004593 	.word	0x08004593
 800472c:	08004593 	.word	0x08004593
 8004730:	08004973 	.word	0x08004973
 8004734:	08004593 	.word	0x08004593
 8004738:	08004593 	.word	0x08004593
 800473c:	08004593 	.word	0x08004593
 8004740:	08004593 	.word	0x08004593
 8004744:	08004593 	.word	0x08004593
 8004748:	08004593 	.word	0x08004593
 800474c:	08004593 	.word	0x08004593
 8004750:	0800491b 	.word	0x0800491b
 8004754:	08004593 	.word	0x08004593
 8004758:	08004593 	.word	0x08004593
 800475c:	08004593 	.word	0x08004593
 8004760:	08004593 	.word	0x08004593
 8004764:	08004593 	.word	0x08004593
 8004768:	08004593 	.word	0x08004593
 800476c:	08004593 	.word	0x08004593
 8004770:	08004593 	.word	0x08004593
 8004774:	08004593 	.word	0x08004593
 8004778:	08004593 	.word	0x08004593
 800477c:	08004593 	.word	0x08004593
 8004780:	08004593 	.word	0x08004593
 8004784:	08004593 	.word	0x08004593
 8004788:	08004593 	.word	0x08004593
 800478c:	08004593 	.word	0x08004593
 8004790:	08004997 	.word	0x08004997
 8004794:	08004593 	.word	0x08004593
 8004798:	08004593 	.word	0x08004593
 800479c:	08004593 	.word	0x08004593
 80047a0:	08004593 	.word	0x08004593
 80047a4:	08004593 	.word	0x08004593
 80047a8:	08004593 	.word	0x08004593
 80047ac:	08004593 	.word	0x08004593
 80047b0:	08004593 	.word	0x08004593
 80047b4:	08004593 	.word	0x08004593
 80047b8:	08004593 	.word	0x08004593
 80047bc:	08004593 	.word	0x08004593
 80047c0:	08004593 	.word	0x08004593
 80047c4:	08004593 	.word	0x08004593
 80047c8:	08004593 	.word	0x08004593
 80047cc:	08004593 	.word	0x08004593
 80047d0:	08004593 	.word	0x08004593
 80047d4:	08004593 	.word	0x08004593
 80047d8:	08004593 	.word	0x08004593
 80047dc:	08004593 	.word	0x08004593
 80047e0:	08004593 	.word	0x08004593
 80047e4:	08004593 	.word	0x08004593
 80047e8:	08004593 	.word	0x08004593
 80047ec:	08004593 	.word	0x08004593
 80047f0:	08004593 	.word	0x08004593
 80047f4:	08004593 	.word	0x08004593
 80047f8:	08004593 	.word	0x08004593
 80047fc:	08004593 	.word	0x08004593
 8004800:	08004593 	.word	0x08004593
 8004804:	08004593 	.word	0x08004593
 8004808:	08004593 	.word	0x08004593
 800480c:	08004593 	.word	0x08004593
 8004810:	0800499b 	.word	0x0800499b
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004814:	69dd      	ldr	r5, [r3, #28]
 8004816:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800481a:	f47f af27 	bne.w	800466c <HAL_UART_Init+0x270>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fc fe79 	bl	8001514 <HAL_GetTick>
 8004822:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004824:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800482a:	f080 80c0 	bcs.w	80049ae <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	0752      	lsls	r2, r2, #29
 8004832:	d5ef      	bpl.n	8004814 <HAL_UART_Init+0x418>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	0517      	lsls	r7, r2, #20
 8004838:	d5ec      	bpl.n	8004814 <HAL_UART_Init+0x418>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483a:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800483e:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8004840:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004842:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800484a:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	6899      	ldr	r1, [r3, #8]
 800484e:	f021 0101 	bic.w	r1, r1, #1
 8004852:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004854:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8004858:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800485c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004860:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8004864:	e69c      	b.n	80045a0 <HAL_UART_Init+0x1a4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004866:	69dd      	ldr	r5, [r3, #28]
 8004868:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800486c:	f47f af02 	bne.w	8004674 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004870:	f7fc fe50 	bl	8001514 <HAL_GetTick>
 8004874:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004876:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004878:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800487c:	f080 8097 	bcs.w	80049ae <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	0751      	lsls	r1, r2, #29
 8004884:	d5ef      	bpl.n	8004866 <HAL_UART_Init+0x46a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	0512      	lsls	r2, r2, #20
 800488a:	d5ec      	bpl.n	8004866 <HAL_UART_Init+0x46a>
 800488c:	e7d5      	b.n	800483a <HAL_UART_Init+0x43e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800488e:	4b73      	ldr	r3, [pc, #460]	; (8004a5c <HAL_UART_Init+0x660>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	0690      	lsls	r0, r2, #26
 8004894:	f140 80d9 	bpl.w	8004a4a <HAL_UART_Init+0x64e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4871      	ldr	r0, [pc, #452]	; (8004a60 <HAL_UART_Init+0x664>)
 800489c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80048a0:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a2:	4b70      	ldr	r3, [pc, #448]	; (8004a64 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a8:	6862      	ldr	r2, [r4, #4]
 80048aa:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80048ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80048b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ba:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048bc:	f1a3 0210 	sub.w	r2, r3, #16
 80048c0:	428a      	cmp	r2, r1
 80048c2:	f63f ae66 	bhi.w	8004592 <HAL_UART_Init+0x196>
        huart->Instance->BRR = usartdiv;
 80048c6:	6820      	ldr	r0, [r4, #0]
  huart->NbTxDataToProcess = 1;
 80048c8:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 80048ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 80048ce:	60c3      	str	r3, [r0, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 80048d2:	6722      	str	r2, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 80048d4:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f43f aeaf 	beq.w	800463c <HAL_UART_Init+0x240>
    UART_AdvFeatureConfig(huart);
 80048de:	4620      	mov	r0, r4
 80048e0:	f7ff fd34 	bl	800434c <UART_AdvFeatureConfig>
 80048e4:	e6aa      	b.n	800463c <HAL_UART_Init+0x240>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048e6:	a803      	add	r0, sp, #12
 80048e8:	f7fe ff58 	bl	800379c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048ec:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d056      	beq.n	80049a0 <HAL_UART_Init+0x5a4>
 80048f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80048f4:	e7d5      	b.n	80048a2 <HAL_UART_Init+0x4a6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048f6:	4668      	mov	r0, sp
 80048f8:	f7fe feb8 	bl	800366c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048fc:	9801      	ldr	r0, [sp, #4]
 80048fe:	e7f6      	b.n	80048ee <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fd feee 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8004904:	e7f3      	b.n	80048ee <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004906:	f7fd ff9b 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 800490a:	e7f0      	b.n	80048ee <HAL_UART_Init+0x4f2>
        pclk = (uint32_t) LSE_VALUE;
 800490c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004910:	e7c7      	b.n	80048a2 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8004912:	4855      	ldr	r0, [pc, #340]	; (8004a68 <HAL_UART_Init+0x66c>)
 8004914:	e7c5      	b.n	80048a2 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8004916:	4854      	ldr	r0, [pc, #336]	; (8004a68 <HAL_UART_Init+0x66c>)
 8004918:	e65f      	b.n	80045da <HAL_UART_Init+0x1de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800491a:	4b50      	ldr	r3, [pc, #320]	; (8004a5c <HAL_UART_Init+0x660>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	0696      	lsls	r6, r2, #26
 8004920:	f140 809a 	bpl.w	8004a58 <HAL_UART_Init+0x65c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	484e      	ldr	r0, [pc, #312]	; (8004a60 <HAL_UART_Init+0x664>)
 8004928:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800492c:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800492e:	4b4d      	ldr	r3, [pc, #308]	; (8004a64 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004930:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004934:	6862      	ldr	r2, [r4, #4]
 8004936:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 800493a:	0853      	lsrs	r3, r2, #1
 800493c:	fbb0 f0f5 	udiv	r0, r0, r5
 8004940:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004944:	fbb3 f3f2 	udiv	r3, r3, r2
 8004948:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494a:	f1a2 0010 	sub.w	r0, r2, #16
 800494e:	4288      	cmp	r0, r1
 8004950:	f63f ae1f 	bhi.w	8004592 <HAL_UART_Init+0x196>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004954:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004958:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->NbTxDataToProcess = 1;
 800495c:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800495e:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004960:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 8004962:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 8004966:	4313      	orrs	r3, r2
 8004968:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 800496a:	6721      	str	r1, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 800496c:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 8004970:	e660      	b.n	8004634 <HAL_UART_Init+0x238>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004972:	a803      	add	r0, sp, #12
 8004974:	f7fe ff12 	bl	800379c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004978:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800497a:	b188      	cbz	r0, 80049a0 <HAL_UART_Init+0x5a4>
 800497c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800497e:	e7d6      	b.n	800492e <HAL_UART_Init+0x532>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004980:	f7fd ff5e 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8004984:	e7f9      	b.n	800497a <HAL_UART_Init+0x57e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004986:	f7fd feab 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 800498a:	e7f6      	b.n	800497a <HAL_UART_Init+0x57e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800498c:	4668      	mov	r0, sp
 800498e:	f7fe fe6d 	bl	800366c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004992:	9801      	ldr	r0, [sp, #4]
 8004994:	e7f1      	b.n	800497a <HAL_UART_Init+0x57e>
        pclk = (uint32_t) CSI_VALUE;
 8004996:	4834      	ldr	r0, [pc, #208]	; (8004a68 <HAL_UART_Init+0x66c>)
 8004998:	e7c9      	b.n	800492e <HAL_UART_Init+0x532>
        pclk = (uint32_t) LSE_VALUE;
 800499a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800499e:	e7c6      	b.n	800492e <HAL_UART_Init+0x532>
  huart->RxISR = NULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80049a6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80049a8:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 80049ac:	e642      	b.n	8004634 <HAL_UART_Init+0x238>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049ae:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80049b0:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80049b2:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80049c2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80049c6:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80049ca:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80049ce:	e5e7      	b.n	80045a0 <HAL_UART_Init+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d0:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <HAL_UART_Init+0x660>)
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	2b05      	cmp	r3, #5
 80049da:	f63f adda 	bhi.w	8004592 <HAL_UART_Init+0x196>
 80049de:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <HAL_UART_Init+0x670>)
 80049e0:	5cd3      	ldrb	r3, [r2, r3]
 80049e2:	e57c      	b.n	80044de <HAL_UART_Init+0xe2>
 80049e4:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <HAL_UART_Init+0x660>)
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	f63f add0 	bhi.w	8004592 <HAL_UART_Init+0x196>
 80049f2:	4a1f      	ldr	r2, [pc, #124]	; (8004a70 <HAL_UART_Init+0x674>)
 80049f4:	5cd3      	ldrb	r3, [r2, r3]
 80049f6:	e572      	b.n	80044de <HAL_UART_Init+0xe2>
 80049f8:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <HAL_UART_Init+0x660>)
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a00:	2b28      	cmp	r3, #40	; 0x28
 8004a02:	f63f adc6 	bhi.w	8004592 <HAL_UART_Init+0x196>
 8004a06:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <HAL_UART_Init+0x678>)
 8004a08:	5cd3      	ldrb	r3, [r2, r3]
 8004a0a:	e568      	b.n	80044de <HAL_UART_Init+0xe2>
    switch (clocksource)
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d00a      	beq.n	8004a26 <HAL_UART_Init+0x62a>
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	f47f adbe 	bne.w	8004592 <HAL_UART_Init+0x196>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a16:	4668      	mov	r0, sp
 8004a18:	f7fe fe28 	bl	800366c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a1c:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d0be      	beq.n	80049a0 <HAL_UART_Init+0x5a4>
 8004a22:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004a24:	e5d9      	b.n	80045da <HAL_UART_Init+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a26:	f7fe fe0f 	bl	8003648 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a2a:	e7f8      	b.n	8004a1e <HAL_UART_Init+0x622>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a2c:	a803      	add	r0, sp, #12
 8004a2e:	f7fe feb5 	bl	800379c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a32:	9804      	ldr	r0, [sp, #16]
 8004a34:	e7f3      	b.n	8004a1e <HAL_UART_Init+0x622>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_UART_Init+0x660>)
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	2b05      	cmp	r3, #5
 8004a40:	f63f ada7 	bhi.w	8004592 <HAL_UART_Init+0x196>
 8004a44:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <HAL_UART_Init+0x67c>)
 8004a46:	5cd3      	ldrb	r3, [r2, r3]
 8004a48:	e549      	b.n	80044de <HAL_UART_Init+0xe2>
          pclk = (uint32_t) HSI_VALUE;
 8004a4a:	4805      	ldr	r0, [pc, #20]	; (8004a60 <HAL_UART_Init+0x664>)
 8004a4c:	e729      	b.n	80048a2 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a52:	e5c2      	b.n	80045da <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8004a54:	4802      	ldr	r0, [pc, #8]	; (8004a60 <HAL_UART_Init+0x664>)
 8004a56:	e5c0      	b.n	80045da <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <HAL_UART_Init+0x664>)
 8004a5a:	e768      	b.n	800492e <HAL_UART_Init+0x532>
 8004a5c:	58024400 	.word	0x58024400
 8004a60:	03d09000 	.word	0x03d09000
 8004a64:	08007588 	.word	0x08007588
 8004a68:	003d0900 	.word	0x003d0900
 8004a6c:	08007578 	.word	0x08007578
 8004a70:	08007578 	.word	0x08007578
 8004a74:	0800754c 	.word	0x0800754c
 8004a78:	08007578 	.word	0x08007578

08004a7c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	2300      	movs	r3, #0
{
 8004a7e:	b570      	push	{r4, r5, r6, lr}
 8004a80:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8004a86:	f7fc fd45 	bl	8001514 <HAL_GetTick>
 8004a8a:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	0710      	lsls	r0, r2, #28
 8004a92:	d40c      	bmi.n	8004aae <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	0750      	lsls	r0, r2, #29
 8004a98:	d430      	bmi.n	8004afc <UART_CheckIdleState+0x80>
  huart->gState = HAL_UART_STATE_READY;
 8004a9a:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8004a9c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004a9e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  return HAL_OK;
 8004aa2:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004aa8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aae:	69dd      	ldr	r5, [r3, #28]
 8004ab0:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8004ab4:	d1ee      	bne.n	8004a94 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab6:	f7fc fd2d 	bl	8001514 <HAL_GetTick>
 8004aba:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004abc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8004ac2:	d22d      	bcs.n	8004b20 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	0751      	lsls	r1, r2, #29
 8004ac8:	d5f1      	bpl.n	8004aae <UART_CheckIdleState+0x32>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	0512      	lsls	r2, r2, #20
 8004ace:	d5ee      	bpl.n	8004aae <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad0:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8004ad4:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8004ad6:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad8:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ada:	6819      	ldr	r1, [r3, #0]
 8004adc:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8004ae0:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae2:	6899      	ldr	r1, [r3, #8]
 8004ae4:	f021 0101 	bic.w	r1, r1, #1
 8004ae8:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004aea:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8004aee:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004af2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004af6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afc:	69dd      	ldr	r5, [r3, #28]
 8004afe:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8004b02:	d1ca      	bne.n	8004a9a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b04:	f7fc fd06 	bl	8001514 <HAL_GetTick>
 8004b08:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b0a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8004b10:	d206      	bcs.n	8004b20 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	0751      	lsls	r1, r2, #29
 8004b16:	d5f1      	bpl.n	8004afc <UART_CheckIdleState+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	0512      	lsls	r2, r2, #20
 8004b1c:	d5ee      	bpl.n	8004afc <UART_CheckIdleState+0x80>
 8004b1e:	e7d7      	b.n	8004ad0 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b20:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004b22:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8004b24:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b2a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004b34:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8004b38:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	bf00      	nop

08004b44 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop

08004b48 <HAL_UARTEx_RxFifoFullCallback>:
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop

08004b4c <HAL_UARTEx_TxFifoEmptyCallback>:
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop

08004b50 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b50:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8004b54:	2a01      	cmp	r2, #1
 8004b56:	d017      	beq.n	8004b88 <HAL_UARTEx_DisableFifoMode+0x38>
 8004b58:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5a:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b5c:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b5e:	681a      	ldr	r2, [r3, #0]
{
 8004b60:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 8004b62:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8004b66:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b68:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8004b6a:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 8004b6c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b6e:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8004b72:	f025 0501 	bic.w	r5, r5, #1
 8004b76:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b78:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b7a:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004b7c:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004b80:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8004b84:	bc70      	pop	{r4, r5, r6}
 8004b86:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004b88:	2002      	movs	r0, #2
}
 8004b8a:	4770      	bx	lr

08004b8c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b8c:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8004b90:	2a01      	cmp	r2, #1
 8004b92:	d046      	beq.n	8004c22 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 8004b94:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8004b96:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b98:	681a      	ldr	r2, [r3, #0]
{
 8004b9a:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8004b9c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8004ba0:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ba2:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ba4:	6810      	ldr	r0, [r2, #0]
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004ba6:	4d20      	ldr	r5, [pc, #128]	; (8004c28 <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8004ba8:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004bac:	4e1f      	ldr	r6, [pc, #124]	; (8004c2c <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004bae:	9500      	str	r5, [sp, #0]
 8004bb0:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8004bb4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bb6:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004bb8:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004bba:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bbe:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004bc2:	9602      	str	r6, [sp, #8]
 8004bc4:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bc8:	4301      	orrs	r1, r0

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bca:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004bcc:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bce:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bd0:	b320      	cbz	r0, 8004c1c <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bd2:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004bd4:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bd6:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004bd8:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004bdc:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004be0:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004be2:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004be6:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8004bea:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004bee:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004bf0:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004bf2:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004bf6:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004bfa:	fb90 f0f5 	sdiv	r0, r0, r5
 8004bfe:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8004c02:	2100      	movs	r1, #0
 8004c04:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8004c08:	2520      	movs	r5, #32
  return HAL_OK;
 8004c0a:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c0c:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c0e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004c12:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8004c16:	b004      	add	sp, #16
 8004c18:	bcf0      	pop	{r4, r5, r6, r7}
 8004c1a:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8004c1c:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8004c1e:	4608      	mov	r0, r1
 8004c20:	e7ed      	b.n	8004bfe <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8004c22:	2002      	movs	r0, #2
}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	03010101 	.word	0x03010101
 8004c2c:	04020408 	.word	0x04020408

08004c30 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8004c30:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8004c34:	2a01      	cmp	r2, #1
 8004c36:	d046      	beq.n	8004cc6 <HAL_UARTEx_SetRxFifoThreshold+0x96>
 8004c38:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8004c3a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c3c:	681a      	ldr	r2, [r3, #0]
{
 8004c3e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8004c40:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8004c44:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c46:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004c48:	6810      	ldr	r0, [r2, #0]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004c4a:	4d20      	ldr	r5, [pc, #128]	; (8004ccc <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8004c4c:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004c50:	4e1f      	ldr	r6, [pc, #124]	; (8004cd0 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004c52:	9500      	str	r5, [sp, #0]
 8004c54:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8004c58:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c5a:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004c5c:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004c5e:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c62:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004c66:	9602      	str	r6, [sp, #8]
 8004c68:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c6c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c6e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004c70:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c72:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c74:	b320      	cbz	r0, 8004cc0 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c76:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c78:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c7a:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004c7c:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c80:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004c84:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c86:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004c8a:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8004c8e:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c92:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004c94:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c96:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004c9a:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c9e:	fb90 f0f5 	sdiv	r0, r0, r5
 8004ca2:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8004cac:	2520      	movs	r5, #32
  return HAL_OK;
 8004cae:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cb0:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004cb2:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004cb6:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8004cba:	b004      	add	sp, #16
 8004cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8004cbe:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8004cc0:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	e7ed      	b.n	8004ca2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8004cc6:	2002      	movs	r0, #2
}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	03010101 	.word	0x03010101
 8004cd0:	04020408 	.word	0x04020408

08004cd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cd8:	9d08      	ldr	r5, [sp, #32]
{
 8004cda:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cdc:	2d01      	cmp	r5, #1
{
 8004cde:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ce2:	d131      	bne.n	8004d48 <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce4:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ce6:	4b2e      	ldr	r3, [pc, #184]	; (8004da0 <USB_CoreInit+0xcc>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ce8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8004cec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cee:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8004cf0:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cf2:	68c2      	ldr	r2, [r0, #12]
 8004cf4:	ea03 0302 	and.w	r3, r3, r2
 8004cf8:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cfa:	68c3      	ldr	r3, [r0, #12]
 8004cfc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d00:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004d02:	d044      	beq.n	8004d8e <USB_CoreInit+0xba>
{
 8004d04:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <USB_CoreInit+0xd0>)
 8004d06:	e001      	b.n	8004d0c <USB_CoreInit+0x38>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	d045      	beq.n	8004d98 <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d0c:	6902      	ldr	r2, [r0, #16]
 8004d0e:	2a00      	cmp	r2, #0
 8004d10:	dafa      	bge.n	8004d08 <USB_CoreInit+0x34>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d12:	6903      	ldr	r3, [r0, #16]
 8004d14:	4a23      	ldr	r2, [pc, #140]	; (8004da4 <USB_CoreInit+0xd0>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6103      	str	r3, [r0, #16]
 8004d1c:	e001      	b.n	8004d22 <USB_CoreInit+0x4e>

  do
  {
    if (++count > 200000U)
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	d03a      	beq.n	8004d98 <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d22:	6903      	ldr	r3, [r0, #16]
 8004d24:	f013 0301 	ands.w	r3, r3, #1
 8004d28:	d1f9      	bne.n	8004d1e <USB_CoreInit+0x4a>
  if (cfg.dma_enable == 1U)
 8004d2a:	9a06      	ldr	r2, [sp, #24]
 8004d2c:	2a01      	cmp	r2, #1
 8004d2e:	d107      	bne.n	8004d40 <USB_CoreInit+0x6c>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d30:	6882      	ldr	r2, [r0, #8]
 8004d32:	f042 0206 	orr.w	r2, r2, #6
 8004d36:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d38:	6882      	ldr	r2, [r0, #8]
 8004d3a:	f042 0220 	orr.w	r2, r2, #32
 8004d3e:	6082      	str	r2, [r0, #8]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	bc30      	pop	{r4, r5}
 8004d44:	b004      	add	sp, #16
 8004d46:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d48:	68c2      	ldr	r2, [r0, #12]
 8004d4a:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <USB_CoreInit+0xd0>)
 8004d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d50:	60c2      	str	r2, [r0, #12]
 8004d52:	e001      	b.n	8004d58 <USB_CoreInit+0x84>
    if (++count > 200000U)
 8004d54:	3b01      	subs	r3, #1
 8004d56:	d021      	beq.n	8004d9c <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d58:	6902      	ldr	r2, [r0, #16]
 8004d5a:	2a00      	cmp	r2, #0
 8004d5c:	dafa      	bge.n	8004d54 <USB_CoreInit+0x80>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d5e:	6903      	ldr	r3, [r0, #16]
 8004d60:	4a10      	ldr	r2, [pc, #64]	; (8004da4 <USB_CoreInit+0xd0>)
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	6103      	str	r3, [r0, #16]
 8004d68:	e001      	b.n	8004d6e <USB_CoreInit+0x9a>
    if (++count > 200000U)
 8004d6a:	3a01      	subs	r2, #1
 8004d6c:	d016      	beq.n	8004d9c <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d6e:	6903      	ldr	r3, [r0, #16]
 8004d70:	f013 0301 	ands.w	r3, r3, #1
 8004d74:	d1f9      	bne.n	8004d6a <USB_CoreInit+0x96>
    if (cfg.battery_charging_enable == 0U)
 8004d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d78:	b922      	cbnz	r2, 8004d84 <USB_CoreInit+0xb0>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d7a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004d7c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d80:	6382      	str	r2, [r0, #56]	; 0x38
 8004d82:	e7d2      	b.n	8004d2a <USB_CoreInit+0x56>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d84:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004d86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d8a:	6382      	str	r2, [r0, #56]	; 0x38
 8004d8c:	e7cd      	b.n	8004d2a <USB_CoreInit+0x56>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d8e:	68c3      	ldr	r3, [r0, #12]
 8004d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d94:	60c3      	str	r3, [r0, #12]
 8004d96:	e7b5      	b.n	8004d04 <USB_CoreInit+0x30>
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e7c6      	b.n	8004d2a <USB_CoreInit+0x56>
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e7ea      	b.n	8004d76 <USB_CoreInit+0xa2>
 8004da0:	ffbdffbf 	.word	0xffbdffbf
 8004da4:	00030d40 	.word	0x00030d40

08004da8 <USB_DisableGlobalInt>:
{
 8004da8:	4602      	mov	r2, r0
}
 8004daa:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dac:	6893      	ldr	r3, [r2, #8]
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6093      	str	r3, [r2, #8]
}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop

08004db8 <USB_SetCurrentMode>:
{
 8004db8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dba:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004dbc:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dbe:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004dc2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004dc4:	d00b      	beq.n	8004dde <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8004dc6:	b941      	cbnz	r1, 8004dda <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dc8:	68c3      	ldr	r3, [r0, #12]
 8004dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dce:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004dd0:	2032      	movs	r0, #50	; 0x32
 8004dd2:	f7fc fba5 	bl	8001520 <HAL_Delay>
  return HAL_OK;
 8004dd6:	2000      	movs	r0, #0
}
 8004dd8:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8004dda:	2001      	movs	r0, #1
}
 8004ddc:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dde:	68c3      	ldr	r3, [r0, #12]
 8004de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004de4:	60c3      	str	r3, [r0, #12]
 8004de6:	e7f3      	b.n	8004dd0 <USB_SetCurrentMode+0x18>

08004de8 <USB_DevInit>:
{
 8004de8:	b084      	sub	sp, #16
 8004dea:	468c      	mov	ip, r1
 8004dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004df0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004df2:	4604      	mov	r4, r0
 8004df4:	ae08      	add	r6, sp, #32
    USBx->DIEPTXF[i] = 0U;
 8004df6:	2000      	movs	r0, #0
 8004df8:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8004dfc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
 8004e00:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8004e04:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
 8004e08:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
 8004e0c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8004e10:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
 8004e14:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
 8004e18:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
 8004e1c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 8004e20:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004e24:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8004e28:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 8004e2c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8004e30:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8004e34:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
{
 8004e38:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  if (cfg.vbus_sensing_enable == 0U)
 8004e3c:	2d00      	cmp	r5, #0
 8004e3e:	f040 8094 	bne.w	8004f6a <USB_DevInit+0x182>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e50:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e58:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e60:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004e62:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_PCGCCTL = 0U;
 8004e66:	f8c4 2e00 	str.w	r2, [r4, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e6a:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e6c:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
 8004e70:	f8c4 2800 	str.w	r2, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e74:	d07e      	beq.n	8004f74 <USB_DevInit+0x18c>
  USBx_DEVICE->DCFG |= speed;
 8004e76:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004e7a:	f043 0303 	orr.w	r3, r3, #3
 8004e7e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e82:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8004e86:	4b47      	ldr	r3, [pc, #284]	; (8004fa4 <USB_DevInit+0x1bc>)
 8004e88:	6122      	str	r2, [r4, #16]
 8004e8a:	e001      	b.n	8004e90 <USB_DevInit+0xa8>
    if (++count > 200000U)
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	d07f      	beq.n	8004f90 <USB_DevInit+0x1a8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e90:	6920      	ldr	r0, [r4, #16]
 8004e92:	f010 0020 	ands.w	r0, r0, #32
 8004e96:	d1f9      	bne.n	8004e8c <USB_DevInit+0xa4>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e98:	2210      	movs	r2, #16
 8004e9a:	4b42      	ldr	r3, [pc, #264]	; (8004fa4 <USB_DevInit+0x1bc>)
 8004e9c:	6122      	str	r2, [r4, #16]
 8004e9e:	e001      	b.n	8004ea4 <USB_DevInit+0xbc>
    if (++count > 200000U)
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	d077      	beq.n	8004f94 <USB_DevInit+0x1ac>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ea4:	6922      	ldr	r2, [r4, #16]
 8004ea6:	06d2      	lsls	r2, r2, #27
 8004ea8:	d4fa      	bmi.n	8004ea0 <USB_DevInit+0xb8>
  USBx_DEVICE->DIEPMSK = 0U;
 8004eaa:	2200      	movs	r2, #0
 8004eac:	613a      	str	r2, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004eae:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004eb0:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eb2:	f1bc 0f00 	cmp.w	ip, #0
 8004eb6:	d019      	beq.n	8004eec <USB_DevInit+0x104>
 8004eb8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ebc:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ec0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ec4:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ec6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8004eca:	e007      	b.n	8004edc <USB_DevInit+0xf4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ecc:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ece:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ed0:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ed2:	f8c3 e008 	str.w	lr, [r3, #8]
 8004ed6:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed8:	4562      	cmp	r2, ip
 8004eda:	d02a      	beq.n	8004f32 <USB_DevInit+0x14a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004edc:	6819      	ldr	r1, [r3, #0]
 8004ede:	2900      	cmp	r1, #0
 8004ee0:	daf4      	bge.n	8004ecc <USB_DevInit+0xe4>
      if (i == 0U)
 8004ee2:	2a00      	cmp	r2, #0
 8004ee4:	d05b      	beq.n	8004f9e <USB_DevInit+0x1b6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ee6:	f8c3 8000 	str.w	r8, [r3]
 8004eea:	e7f0      	b.n	8004ece <USB_DevInit+0xe6>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004eec:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8004eee:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ef0:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 8004ef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004efa:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8004efc:	61a6      	str	r6, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004efe:	6161      	str	r1, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004f00:	b91a      	cbnz	r2, 8004f0a <USB_DevInit+0x122>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f02:	69a3      	ldr	r3, [r4, #24]
 8004f04:	f043 0310 	orr.w	r3, r3, #16
 8004f08:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f0a:	69a1      	ldr	r1, [r4, #24]
 8004f0c:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <USB_DevInit+0x1c0>)
  if (cfg.Sof_enable != 0U)
 8004f0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f10:	430b      	orrs	r3, r1
 8004f12:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004f14:	b11a      	cbz	r2, 8004f1e <USB_DevInit+0x136>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f16:	69a3      	ldr	r3, [r4, #24]
 8004f18:	f043 0308 	orr.w	r3, r3, #8
 8004f1c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004f1e:	2d01      	cmp	r5, #1
 8004f20:	d103      	bne.n	8004f2a <USB_DevInit+0x142>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f22:	69a2      	ldr	r2, [r4, #24]
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <USB_DevInit+0x1c4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61a3      	str	r3, [r4, #24]
}
 8004f2a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f2e:	b004      	add	sp, #16
 8004f30:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f32:	2100      	movs	r1, #0
 8004f34:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f38:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f3c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f40:	468c      	mov	ip, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f42:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8004f46:	e009      	b.n	8004f5c <USB_DevInit+0x174>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f48:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f4c:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f4e:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f52:	f8c3 e008 	str.w	lr, [r3, #8]
 8004f56:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f58:	4291      	cmp	r1, r2
 8004f5a:	d0c7      	beq.n	8004eec <USB_DevInit+0x104>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f5c:	681e      	ldr	r6, [r3, #0]
 8004f5e:	2e00      	cmp	r6, #0
 8004f60:	daf2      	bge.n	8004f48 <USB_DevInit+0x160>
      if (i == 0U)
 8004f62:	b1c9      	cbz	r1, 8004f98 <USB_DevInit+0x1b0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f64:	f8c3 8000 	str.w	r8, [r3]
 8004f68:	e7f0      	b.n	8004f4c <USB_DevInit+0x164>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f70:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f72:	e776      	b.n	8004e62 <USB_DevInit+0x7a>
    if (cfg.speed == USBD_HS_SPEED)
 8004f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f76:	b923      	cbnz	r3, 8004f82 <USB_DevInit+0x19a>
  USBx_DEVICE->DCFG |= speed;
 8004f78:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004f7c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8004f80:	e77f      	b.n	8004e82 <USB_DevInit+0x9a>
 8004f82:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8004f8e:	e778      	b.n	8004e82 <USB_DevInit+0x9a>
    ret = HAL_ERROR;
 8004f90:	2001      	movs	r0, #1
 8004f92:	e781      	b.n	8004e98 <USB_DevInit+0xb0>
    ret = HAL_ERROR;
 8004f94:	2001      	movs	r0, #1
 8004f96:	e788      	b.n	8004eaa <USB_DevInit+0xc2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f98:	f8c3 9000 	str.w	r9, [r3]
 8004f9c:	e7d6      	b.n	8004f4c <USB_DevInit+0x164>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f9e:	f8c3 9000 	str.w	r9, [r3]
 8004fa2:	e794      	b.n	8004ece <USB_DevInit+0xe6>
 8004fa4:	00030d40 	.word	0x00030d40
 8004fa8:	803c3800 	.word	0x803c3800
 8004fac:	40000004 	.word	0x40000004

08004fb0 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fb0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 8004fb4:	2003      	movs	r0, #3
{
 8004fb6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fb8:	6853      	ldr	r3, [r2, #4]
 8004fba:	f043 0302 	orr.w	r3, r3, #2
 8004fbe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004fc0:	f7fc faae 	bl	8001520 <HAL_Delay>
}
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	bd08      	pop	{r3, pc}

08004fc8 <arm_mean_f32>:
 8004fc8:	b430      	push	{r4, r5}
 8004fca:	088d      	lsrs	r5, r1, #2
 8004fcc:	d02d      	beq.n	800502a <arm_mean_f32+0x62>
 8004fce:	f100 0310 	add.w	r3, r0, #16
 8004fd2:	462c      	mov	r4, r5
 8004fd4:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005030 <arm_mean_f32+0x68>
 8004fd8:	ed13 7a04 	vldr	s14, [r3, #-16]
 8004fdc:	3c01      	subs	r4, #1
 8004fde:	ed13 6a03 	vldr	s12, [r3, #-12]
 8004fe2:	f103 0310 	add.w	r3, r3, #16
 8004fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fea:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8004fee:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8004ff2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	d1eb      	bne.n	8004fd8 <arm_mean_f32+0x10>
 8005000:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8005004:	f011 0303 	ands.w	r3, r1, #3
 8005008:	d005      	beq.n	8005016 <arm_mean_f32+0x4e>
 800500a:	ecb0 7a01 	vldmia	r0!, {s14}
 800500e:	3b01      	subs	r3, #1
 8005010:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005014:	d1f9      	bne.n	800500a <arm_mean_f32+0x42>
 8005016:	ee07 1a10 	vmov	s14, r1
 800501a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800501e:	bc30      	pop	{r4, r5}
 8005020:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005024:	edc2 6a00 	vstr	s13, [r2]
 8005028:	4770      	bx	lr
 800502a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8005030 <arm_mean_f32+0x68>
 800502e:	e7e9      	b.n	8005004 <arm_mean_f32+0x3c>
 8005030:	00000000 	.word	0x00000000

08005034 <arm_max_f32>:
 8005034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005038:	1e4d      	subs	r5, r1, #1
 800503a:	f100 0c04 	add.w	ip, r0, #4
 800503e:	edd0 7a00 	vldr	s15, [r0]
 8005042:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8005046:	d056      	beq.n	80050f6 <arm_max_f32+0xc2>
 8005048:	3014      	adds	r0, #20
 800504a:	46c8      	mov	r8, r9
 800504c:	2404      	movs	r4, #4
 800504e:	2600      	movs	r6, #0
 8005050:	ed10 6a04 	vldr	s12, [r0, #-16]
 8005054:	f1a4 0a03 	sub.w	sl, r4, #3
 8005058:	ed50 6a03 	vldr	s13, [r0, #-12]
 800505c:	f1a4 0e02 	sub.w	lr, r4, #2
 8005060:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8005064:	ed10 7a02 	vldr	s14, [r0, #-8]
 8005068:	ed50 5a01 	vldr	s11, [r0, #-4]
 800506c:	1e67      	subs	r7, r4, #1
 800506e:	3010      	adds	r0, #16
 8005070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005074:	bfc8      	it	gt
 8005076:	eef0 7a46 	vmovgt.f32	s15, s12
 800507a:	bfc8      	it	gt
 800507c:	4656      	movgt	r6, sl
 800507e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005086:	bf48      	it	mi
 8005088:	eef0 7a66 	vmovmi.f32	s15, s13
 800508c:	bf48      	it	mi
 800508e:	4676      	movmi	r6, lr
 8005090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005098:	bf48      	it	mi
 800509a:	eef0 7a47 	vmovmi.f32	s15, s14
 800509e:	bf48      	it	mi
 80050a0:	463e      	movmi	r6, r7
 80050a2:	eef4 7ae5 	vcmpe.f32	s15, s11
 80050a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050aa:	bf48      	it	mi
 80050ac:	4626      	movmi	r6, r4
 80050ae:	bf48      	it	mi
 80050b0:	eef0 7a65 	vmovmi.f32	s15, s11
 80050b4:	f1b8 0801 	subs.w	r8, r8, #1
 80050b8:	f104 0404 	add.w	r4, r4, #4
 80050bc:	d1c8      	bne.n	8005050 <arm_max_f32+0x1c>
 80050be:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 80050c2:	f015 0003 	ands.w	r0, r5, #3
 80050c6:	d018      	beq.n	80050fa <arm_max_f32+0xc6>
 80050c8:	1a08      	subs	r0, r1, r0
 80050ca:	ecbc 7a01 	vldmia	ip!, {s14}
 80050ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d6:	bfc8      	it	gt
 80050d8:	4606      	movgt	r6, r0
 80050da:	f100 0001 	add.w	r0, r0, #1
 80050de:	bfd8      	it	le
 80050e0:	eeb0 7a67 	vmovle.f32	s14, s15
 80050e4:	4281      	cmp	r1, r0
 80050e6:	eef0 7a47 	vmov.f32	s15, s14
 80050ea:	d1ee      	bne.n	80050ca <arm_max_f32+0x96>
 80050ec:	ed82 7a00 	vstr	s14, [r2]
 80050f0:	601e      	str	r6, [r3, #0]
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	464e      	mov	r6, r9
 80050f8:	e7e3      	b.n	80050c2 <arm_max_f32+0x8e>
 80050fa:	eeb0 7a67 	vmov.f32	s14, s15
 80050fe:	e7f5      	b.n	80050ec <arm_max_f32+0xb8>

08005100 <__errno>:
 8005100:	4b01      	ldr	r3, [pc, #4]	; (8005108 <__errno+0x8>)
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000010 	.word	0x20000010

0800510c <__libc_init_array>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	4e0d      	ldr	r6, [pc, #52]	; (8005144 <__libc_init_array+0x38>)
 8005110:	4c0d      	ldr	r4, [pc, #52]	; (8005148 <__libc_init_array+0x3c>)
 8005112:	1ba4      	subs	r4, r4, r6
 8005114:	10a4      	asrs	r4, r4, #2
 8005116:	2500      	movs	r5, #0
 8005118:	42a5      	cmp	r5, r4
 800511a:	d109      	bne.n	8005130 <__libc_init_array+0x24>
 800511c:	4e0b      	ldr	r6, [pc, #44]	; (800514c <__libc_init_array+0x40>)
 800511e:	4c0c      	ldr	r4, [pc, #48]	; (8005150 <__libc_init_array+0x44>)
 8005120:	f002 f9c2 	bl	80074a8 <_init>
 8005124:	1ba4      	subs	r4, r4, r6
 8005126:	10a4      	asrs	r4, r4, #2
 8005128:	2500      	movs	r5, #0
 800512a:	42a5      	cmp	r5, r4
 800512c:	d105      	bne.n	800513a <__libc_init_array+0x2e>
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005134:	4798      	blx	r3
 8005136:	3501      	adds	r5, #1
 8005138:	e7ee      	b.n	8005118 <__libc_init_array+0xc>
 800513a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800513e:	4798      	blx	r3
 8005140:	3501      	adds	r5, #1
 8005142:	e7f2      	b.n	800512a <__libc_init_array+0x1e>
 8005144:	08007848 	.word	0x08007848
 8005148:	08007848 	.word	0x08007848
 800514c:	08007848 	.word	0x08007848
 8005150:	0800784c 	.word	0x0800784c

08005154 <malloc>:
 8005154:	4b02      	ldr	r3, [pc, #8]	; (8005160 <malloc+0xc>)
 8005156:	4601      	mov	r1, r0
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	f000 b86d 	b.w	8005238 <_malloc_r>
 800515e:	bf00      	nop
 8005160:	20000010 	.word	0x20000010

08005164 <free>:
 8005164:	4b02      	ldr	r3, [pc, #8]	; (8005170 <free+0xc>)
 8005166:	4601      	mov	r1, r0
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	f000 b817 	b.w	800519c <_free_r>
 800516e:	bf00      	nop
 8005170:	20000010 	.word	0x20000010

08005174 <memcpy>:
 8005174:	b510      	push	{r4, lr}
 8005176:	1e43      	subs	r3, r0, #1
 8005178:	440a      	add	r2, r1
 800517a:	4291      	cmp	r1, r2
 800517c:	d100      	bne.n	8005180 <memcpy+0xc>
 800517e:	bd10      	pop	{r4, pc}
 8005180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005188:	e7f7      	b.n	800517a <memcpy+0x6>

0800518a <memset>:
 800518a:	4402      	add	r2, r0
 800518c:	4603      	mov	r3, r0
 800518e:	4293      	cmp	r3, r2
 8005190:	d100      	bne.n	8005194 <memset+0xa>
 8005192:	4770      	bx	lr
 8005194:	f803 1b01 	strb.w	r1, [r3], #1
 8005198:	e7f9      	b.n	800518e <memset+0x4>
	...

0800519c <_free_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4605      	mov	r5, r0
 80051a0:	2900      	cmp	r1, #0
 80051a2:	d045      	beq.n	8005230 <_free_r+0x94>
 80051a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051a8:	1f0c      	subs	r4, r1, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bfb8      	it	lt
 80051ae:	18e4      	addlt	r4, r4, r3
 80051b0:	f001 faec 	bl	800678c <__malloc_lock>
 80051b4:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <_free_r+0x98>)
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	4610      	mov	r0, r2
 80051ba:	b933      	cbnz	r3, 80051ca <_free_r+0x2e>
 80051bc:	6063      	str	r3, [r4, #4]
 80051be:	6014      	str	r4, [r2, #0]
 80051c0:	4628      	mov	r0, r5
 80051c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c6:	f001 bae2 	b.w	800678e <__malloc_unlock>
 80051ca:	42a3      	cmp	r3, r4
 80051cc:	d90c      	bls.n	80051e8 <_free_r+0x4c>
 80051ce:	6821      	ldr	r1, [r4, #0]
 80051d0:	1862      	adds	r2, r4, r1
 80051d2:	4293      	cmp	r3, r2
 80051d4:	bf04      	itt	eq
 80051d6:	681a      	ldreq	r2, [r3, #0]
 80051d8:	685b      	ldreq	r3, [r3, #4]
 80051da:	6063      	str	r3, [r4, #4]
 80051dc:	bf04      	itt	eq
 80051de:	1852      	addeq	r2, r2, r1
 80051e0:	6022      	streq	r2, [r4, #0]
 80051e2:	6004      	str	r4, [r0, #0]
 80051e4:	e7ec      	b.n	80051c0 <_free_r+0x24>
 80051e6:	4613      	mov	r3, r2
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	b10a      	cbz	r2, 80051f0 <_free_r+0x54>
 80051ec:	42a2      	cmp	r2, r4
 80051ee:	d9fa      	bls.n	80051e6 <_free_r+0x4a>
 80051f0:	6819      	ldr	r1, [r3, #0]
 80051f2:	1858      	adds	r0, r3, r1
 80051f4:	42a0      	cmp	r0, r4
 80051f6:	d10b      	bne.n	8005210 <_free_r+0x74>
 80051f8:	6820      	ldr	r0, [r4, #0]
 80051fa:	4401      	add	r1, r0
 80051fc:	1858      	adds	r0, r3, r1
 80051fe:	4282      	cmp	r2, r0
 8005200:	6019      	str	r1, [r3, #0]
 8005202:	d1dd      	bne.n	80051c0 <_free_r+0x24>
 8005204:	6810      	ldr	r0, [r2, #0]
 8005206:	6852      	ldr	r2, [r2, #4]
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	4401      	add	r1, r0
 800520c:	6019      	str	r1, [r3, #0]
 800520e:	e7d7      	b.n	80051c0 <_free_r+0x24>
 8005210:	d902      	bls.n	8005218 <_free_r+0x7c>
 8005212:	230c      	movs	r3, #12
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	e7d3      	b.n	80051c0 <_free_r+0x24>
 8005218:	6820      	ldr	r0, [r4, #0]
 800521a:	1821      	adds	r1, r4, r0
 800521c:	428a      	cmp	r2, r1
 800521e:	bf04      	itt	eq
 8005220:	6811      	ldreq	r1, [r2, #0]
 8005222:	6852      	ldreq	r2, [r2, #4]
 8005224:	6062      	str	r2, [r4, #4]
 8005226:	bf04      	itt	eq
 8005228:	1809      	addeq	r1, r1, r0
 800522a:	6021      	streq	r1, [r4, #0]
 800522c:	605c      	str	r4, [r3, #4]
 800522e:	e7c7      	b.n	80051c0 <_free_r+0x24>
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	bf00      	nop
 8005234:	2000623c 	.word	0x2000623c

08005238 <_malloc_r>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	1ccd      	adds	r5, r1, #3
 800523c:	f025 0503 	bic.w	r5, r5, #3
 8005240:	3508      	adds	r5, #8
 8005242:	2d0c      	cmp	r5, #12
 8005244:	bf38      	it	cc
 8005246:	250c      	movcc	r5, #12
 8005248:	2d00      	cmp	r5, #0
 800524a:	4606      	mov	r6, r0
 800524c:	db01      	blt.n	8005252 <_malloc_r+0x1a>
 800524e:	42a9      	cmp	r1, r5
 8005250:	d903      	bls.n	800525a <_malloc_r+0x22>
 8005252:	230c      	movs	r3, #12
 8005254:	6033      	str	r3, [r6, #0]
 8005256:	2000      	movs	r0, #0
 8005258:	bd70      	pop	{r4, r5, r6, pc}
 800525a:	f001 fa97 	bl	800678c <__malloc_lock>
 800525e:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <_malloc_r+0xac>)
 8005260:	6814      	ldr	r4, [r2, #0]
 8005262:	4621      	mov	r1, r4
 8005264:	b991      	cbnz	r1, 800528c <_malloc_r+0x54>
 8005266:	4c20      	ldr	r4, [pc, #128]	; (80052e8 <_malloc_r+0xb0>)
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	b91b      	cbnz	r3, 8005274 <_malloc_r+0x3c>
 800526c:	4630      	mov	r0, r6
 800526e:	f000 fc77 	bl	8005b60 <_sbrk_r>
 8005272:	6020      	str	r0, [r4, #0]
 8005274:	4629      	mov	r1, r5
 8005276:	4630      	mov	r0, r6
 8005278:	f000 fc72 	bl	8005b60 <_sbrk_r>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d124      	bne.n	80052ca <_malloc_r+0x92>
 8005280:	230c      	movs	r3, #12
 8005282:	6033      	str	r3, [r6, #0]
 8005284:	4630      	mov	r0, r6
 8005286:	f001 fa82 	bl	800678e <__malloc_unlock>
 800528a:	e7e4      	b.n	8005256 <_malloc_r+0x1e>
 800528c:	680b      	ldr	r3, [r1, #0]
 800528e:	1b5b      	subs	r3, r3, r5
 8005290:	d418      	bmi.n	80052c4 <_malloc_r+0x8c>
 8005292:	2b0b      	cmp	r3, #11
 8005294:	d90f      	bls.n	80052b6 <_malloc_r+0x7e>
 8005296:	600b      	str	r3, [r1, #0]
 8005298:	50cd      	str	r5, [r1, r3]
 800529a:	18cc      	adds	r4, r1, r3
 800529c:	4630      	mov	r0, r6
 800529e:	f001 fa76 	bl	800678e <__malloc_unlock>
 80052a2:	f104 000b 	add.w	r0, r4, #11
 80052a6:	1d23      	adds	r3, r4, #4
 80052a8:	f020 0007 	bic.w	r0, r0, #7
 80052ac:	1ac3      	subs	r3, r0, r3
 80052ae:	d0d3      	beq.n	8005258 <_malloc_r+0x20>
 80052b0:	425a      	negs	r2, r3
 80052b2:	50e2      	str	r2, [r4, r3]
 80052b4:	e7d0      	b.n	8005258 <_malloc_r+0x20>
 80052b6:	428c      	cmp	r4, r1
 80052b8:	684b      	ldr	r3, [r1, #4]
 80052ba:	bf16      	itet	ne
 80052bc:	6063      	strne	r3, [r4, #4]
 80052be:	6013      	streq	r3, [r2, #0]
 80052c0:	460c      	movne	r4, r1
 80052c2:	e7eb      	b.n	800529c <_malloc_r+0x64>
 80052c4:	460c      	mov	r4, r1
 80052c6:	6849      	ldr	r1, [r1, #4]
 80052c8:	e7cc      	b.n	8005264 <_malloc_r+0x2c>
 80052ca:	1cc4      	adds	r4, r0, #3
 80052cc:	f024 0403 	bic.w	r4, r4, #3
 80052d0:	42a0      	cmp	r0, r4
 80052d2:	d005      	beq.n	80052e0 <_malloc_r+0xa8>
 80052d4:	1a21      	subs	r1, r4, r0
 80052d6:	4630      	mov	r0, r6
 80052d8:	f000 fc42 	bl	8005b60 <_sbrk_r>
 80052dc:	3001      	adds	r0, #1
 80052de:	d0cf      	beq.n	8005280 <_malloc_r+0x48>
 80052e0:	6025      	str	r5, [r4, #0]
 80052e2:	e7db      	b.n	800529c <_malloc_r+0x64>
 80052e4:	2000623c 	.word	0x2000623c
 80052e8:	20006240 	.word	0x20006240

080052ec <__cvt>:
 80052ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ee:	ed2d 8b02 	vpush	{d8}
 80052f2:	eeb0 8b40 	vmov.f64	d8, d0
 80052f6:	b085      	sub	sp, #20
 80052f8:	4617      	mov	r7, r2
 80052fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80052fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80052fe:	ee18 2a90 	vmov	r2, s17
 8005302:	f025 0520 	bic.w	r5, r5, #32
 8005306:	2a00      	cmp	r2, #0
 8005308:	bfb6      	itet	lt
 800530a:	222d      	movlt	r2, #45	; 0x2d
 800530c:	2200      	movge	r2, #0
 800530e:	eeb1 8b40 	vneglt.f64	d8, d0
 8005312:	2d46      	cmp	r5, #70	; 0x46
 8005314:	460c      	mov	r4, r1
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	d004      	beq.n	8005324 <__cvt+0x38>
 800531a:	2d45      	cmp	r5, #69	; 0x45
 800531c:	d100      	bne.n	8005320 <__cvt+0x34>
 800531e:	3401      	adds	r4, #1
 8005320:	2102      	movs	r1, #2
 8005322:	e000      	b.n	8005326 <__cvt+0x3a>
 8005324:	2103      	movs	r1, #3
 8005326:	ab03      	add	r3, sp, #12
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	ab02      	add	r3, sp, #8
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	4622      	mov	r2, r4
 8005330:	4633      	mov	r3, r6
 8005332:	eeb0 0b48 	vmov.f64	d0, d8
 8005336:	f000 fccf 	bl	8005cd8 <_dtoa_r>
 800533a:	2d47      	cmp	r5, #71	; 0x47
 800533c:	d101      	bne.n	8005342 <__cvt+0x56>
 800533e:	07fb      	lsls	r3, r7, #31
 8005340:	d51e      	bpl.n	8005380 <__cvt+0x94>
 8005342:	2d46      	cmp	r5, #70	; 0x46
 8005344:	eb00 0304 	add.w	r3, r0, r4
 8005348:	d10c      	bne.n	8005364 <__cvt+0x78>
 800534a:	7802      	ldrb	r2, [r0, #0]
 800534c:	2a30      	cmp	r2, #48	; 0x30
 800534e:	d107      	bne.n	8005360 <__cvt+0x74>
 8005350:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005358:	bf1c      	itt	ne
 800535a:	f1c4 0401 	rsbne	r4, r4, #1
 800535e:	6034      	strne	r4, [r6, #0]
 8005360:	6832      	ldr	r2, [r6, #0]
 8005362:	4413      	add	r3, r2
 8005364:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536c:	d007      	beq.n	800537e <__cvt+0x92>
 800536e:	2130      	movs	r1, #48	; 0x30
 8005370:	9a03      	ldr	r2, [sp, #12]
 8005372:	429a      	cmp	r2, r3
 8005374:	d204      	bcs.n	8005380 <__cvt+0x94>
 8005376:	1c54      	adds	r4, r2, #1
 8005378:	9403      	str	r4, [sp, #12]
 800537a:	7011      	strb	r1, [r2, #0]
 800537c:	e7f8      	b.n	8005370 <__cvt+0x84>
 800537e:	9303      	str	r3, [sp, #12]
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005384:	1a1b      	subs	r3, r3, r0
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	b005      	add	sp, #20
 800538a:	ecbd 8b02 	vpop	{d8}
 800538e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005390 <__exponent>:
 8005390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005392:	2900      	cmp	r1, #0
 8005394:	4604      	mov	r4, r0
 8005396:	bfba      	itte	lt
 8005398:	4249      	neglt	r1, r1
 800539a:	232d      	movlt	r3, #45	; 0x2d
 800539c:	232b      	movge	r3, #43	; 0x2b
 800539e:	2909      	cmp	r1, #9
 80053a0:	f804 2b02 	strb.w	r2, [r4], #2
 80053a4:	7043      	strb	r3, [r0, #1]
 80053a6:	dd20      	ble.n	80053ea <__exponent+0x5a>
 80053a8:	f10d 0307 	add.w	r3, sp, #7
 80053ac:	461f      	mov	r7, r3
 80053ae:	260a      	movs	r6, #10
 80053b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80053b4:	fb06 1115 	mls	r1, r6, r5, r1
 80053b8:	3130      	adds	r1, #48	; 0x30
 80053ba:	2d09      	cmp	r5, #9
 80053bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053c0:	f103 32ff 	add.w	r2, r3, #4294967295
 80053c4:	4629      	mov	r1, r5
 80053c6:	dc09      	bgt.n	80053dc <__exponent+0x4c>
 80053c8:	3130      	adds	r1, #48	; 0x30
 80053ca:	3b02      	subs	r3, #2
 80053cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80053d0:	42bb      	cmp	r3, r7
 80053d2:	4622      	mov	r2, r4
 80053d4:	d304      	bcc.n	80053e0 <__exponent+0x50>
 80053d6:	1a10      	subs	r0, r2, r0
 80053d8:	b003      	add	sp, #12
 80053da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053dc:	4613      	mov	r3, r2
 80053de:	e7e7      	b.n	80053b0 <__exponent+0x20>
 80053e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e4:	f804 2b01 	strb.w	r2, [r4], #1
 80053e8:	e7f2      	b.n	80053d0 <__exponent+0x40>
 80053ea:	2330      	movs	r3, #48	; 0x30
 80053ec:	4419      	add	r1, r3
 80053ee:	7083      	strb	r3, [r0, #2]
 80053f0:	1d02      	adds	r2, r0, #4
 80053f2:	70c1      	strb	r1, [r0, #3]
 80053f4:	e7ef      	b.n	80053d6 <__exponent+0x46>
	...

080053f8 <_printf_float>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	b08d      	sub	sp, #52	; 0x34
 80053fe:	460c      	mov	r4, r1
 8005400:	4616      	mov	r6, r2
 8005402:	461f      	mov	r7, r3
 8005404:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005408:	4605      	mov	r5, r0
 800540a:	f001 f9b1 	bl	8006770 <_localeconv_r>
 800540e:	f8d0 b000 	ldr.w	fp, [r0]
 8005412:	4658      	mov	r0, fp
 8005414:	f7fa ff64 	bl	80002e0 <strlen>
 8005418:	2300      	movs	r3, #0
 800541a:	930a      	str	r3, [sp, #40]	; 0x28
 800541c:	f8d8 3000 	ldr.w	r3, [r8]
 8005420:	9005      	str	r0, [sp, #20]
 8005422:	3307      	adds	r3, #7
 8005424:	f023 0307 	bic.w	r3, r3, #7
 8005428:	f103 0108 	add.w	r1, r3, #8
 800542c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	f8c8 1000 	str.w	r1, [r8]
 8005436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800543a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800543e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80056c8 <_printf_float+0x2d0>
 8005442:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005446:	eeb0 6bc0 	vabs.f64	d6, d0
 800544a:	eeb4 6b47 	vcmp.f64	d6, d7
 800544e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005452:	dd24      	ble.n	800549e <_printf_float+0xa6>
 8005454:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545c:	d502      	bpl.n	8005464 <_printf_float+0x6c>
 800545e:	232d      	movs	r3, #45	; 0x2d
 8005460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005464:	499a      	ldr	r1, [pc, #616]	; (80056d0 <_printf_float+0x2d8>)
 8005466:	4b9b      	ldr	r3, [pc, #620]	; (80056d4 <_printf_float+0x2dc>)
 8005468:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800546c:	bf8c      	ite	hi
 800546e:	4688      	movhi	r8, r1
 8005470:	4698      	movls	r8, r3
 8005472:	f022 0204 	bic.w	r2, r2, #4
 8005476:	2303      	movs	r3, #3
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	6022      	str	r2, [r4, #0]
 800547c:	f04f 0a00 	mov.w	sl, #0
 8005480:	9700      	str	r7, [sp, #0]
 8005482:	4633      	mov	r3, r6
 8005484:	aa0b      	add	r2, sp, #44	; 0x2c
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f000 f9e1 	bl	8005850 <_printf_common>
 800548e:	3001      	adds	r0, #1
 8005490:	f040 8089 	bne.w	80055a6 <_printf_float+0x1ae>
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	b00d      	add	sp, #52	; 0x34
 800549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549e:	eeb4 0b40 	vcmp.f64	d0, d0
 80054a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a6:	d702      	bvc.n	80054ae <_printf_float+0xb6>
 80054a8:	498b      	ldr	r1, [pc, #556]	; (80056d8 <_printf_float+0x2e0>)
 80054aa:	4b8c      	ldr	r3, [pc, #560]	; (80056dc <_printf_float+0x2e4>)
 80054ac:	e7dc      	b.n	8005468 <_printf_float+0x70>
 80054ae:	6861      	ldr	r1, [r4, #4]
 80054b0:	1c4b      	adds	r3, r1, #1
 80054b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054b6:	ab0a      	add	r3, sp, #40	; 0x28
 80054b8:	a809      	add	r0, sp, #36	; 0x24
 80054ba:	d13b      	bne.n	8005534 <_printf_float+0x13c>
 80054bc:	2106      	movs	r1, #6
 80054be:	6061      	str	r1, [r4, #4]
 80054c0:	f04f 0c00 	mov.w	ip, #0
 80054c4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80054c8:	e9cd 0900 	strd	r0, r9, [sp]
 80054cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054d0:	6022      	str	r2, [r4, #0]
 80054d2:	6861      	ldr	r1, [r4, #4]
 80054d4:	4628      	mov	r0, r5
 80054d6:	f7ff ff09 	bl	80052ec <__cvt>
 80054da:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80054de:	2b47      	cmp	r3, #71	; 0x47
 80054e0:	4680      	mov	r8, r0
 80054e2:	d109      	bne.n	80054f8 <_printf_float+0x100>
 80054e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e6:	1cd8      	adds	r0, r3, #3
 80054e8:	db02      	blt.n	80054f0 <_printf_float+0xf8>
 80054ea:	6862      	ldr	r2, [r4, #4]
 80054ec:	4293      	cmp	r3, r2
 80054ee:	dd47      	ble.n	8005580 <_printf_float+0x188>
 80054f0:	f1a9 0902 	sub.w	r9, r9, #2
 80054f4:	fa5f f989 	uxtb.w	r9, r9
 80054f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054fe:	d824      	bhi.n	800554a <_printf_float+0x152>
 8005500:	3901      	subs	r1, #1
 8005502:	464a      	mov	r2, r9
 8005504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005508:	9109      	str	r1, [sp, #36]	; 0x24
 800550a:	f7ff ff41 	bl	8005390 <__exponent>
 800550e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005510:	1813      	adds	r3, r2, r0
 8005512:	2a01      	cmp	r2, #1
 8005514:	4682      	mov	sl, r0
 8005516:	6123      	str	r3, [r4, #16]
 8005518:	dc02      	bgt.n	8005520 <_printf_float+0x128>
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	07d1      	lsls	r1, r2, #31
 800551e:	d501      	bpl.n	8005524 <_printf_float+0x12c>
 8005520:	3301      	adds	r3, #1
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0a9      	beq.n	8005480 <_printf_float+0x88>
 800552c:	232d      	movs	r3, #45	; 0x2d
 800552e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005532:	e7a5      	b.n	8005480 <_printf_float+0x88>
 8005534:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8005538:	f000 8178 	beq.w	800582c <_printf_float+0x434>
 800553c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005540:	d1be      	bne.n	80054c0 <_printf_float+0xc8>
 8005542:	2900      	cmp	r1, #0
 8005544:	d1bc      	bne.n	80054c0 <_printf_float+0xc8>
 8005546:	2101      	movs	r1, #1
 8005548:	e7b9      	b.n	80054be <_printf_float+0xc6>
 800554a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800554e:	d119      	bne.n	8005584 <_printf_float+0x18c>
 8005550:	2900      	cmp	r1, #0
 8005552:	6863      	ldr	r3, [r4, #4]
 8005554:	dd0c      	ble.n	8005570 <_printf_float+0x178>
 8005556:	6121      	str	r1, [r4, #16]
 8005558:	b913      	cbnz	r3, 8005560 <_printf_float+0x168>
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	07d2      	lsls	r2, r2, #31
 800555e:	d502      	bpl.n	8005566 <_printf_float+0x16e>
 8005560:	3301      	adds	r3, #1
 8005562:	440b      	add	r3, r1
 8005564:	6123      	str	r3, [r4, #16]
 8005566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005568:	65a3      	str	r3, [r4, #88]	; 0x58
 800556a:	f04f 0a00 	mov.w	sl, #0
 800556e:	e7d9      	b.n	8005524 <_printf_float+0x12c>
 8005570:	b913      	cbnz	r3, 8005578 <_printf_float+0x180>
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	07d0      	lsls	r0, r2, #31
 8005576:	d501      	bpl.n	800557c <_printf_float+0x184>
 8005578:	3302      	adds	r3, #2
 800557a:	e7f3      	b.n	8005564 <_printf_float+0x16c>
 800557c:	2301      	movs	r3, #1
 800557e:	e7f1      	b.n	8005564 <_printf_float+0x16c>
 8005580:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005584:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005588:	4293      	cmp	r3, r2
 800558a:	db05      	blt.n	8005598 <_printf_float+0x1a0>
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	6123      	str	r3, [r4, #16]
 8005590:	07d1      	lsls	r1, r2, #31
 8005592:	d5e8      	bpl.n	8005566 <_printf_float+0x16e>
 8005594:	3301      	adds	r3, #1
 8005596:	e7e5      	b.n	8005564 <_printf_float+0x16c>
 8005598:	2b00      	cmp	r3, #0
 800559a:	bfd4      	ite	le
 800559c:	f1c3 0302 	rsble	r3, r3, #2
 80055a0:	2301      	movgt	r3, #1
 80055a2:	4413      	add	r3, r2
 80055a4:	e7de      	b.n	8005564 <_printf_float+0x16c>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	055a      	lsls	r2, r3, #21
 80055aa:	d407      	bmi.n	80055bc <_printf_float+0x1c4>
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	4642      	mov	r2, r8
 80055b0:	4631      	mov	r1, r6
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	d12a      	bne.n	8005610 <_printf_float+0x218>
 80055ba:	e76b      	b.n	8005494 <_printf_float+0x9c>
 80055bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055c0:	f240 80de 	bls.w	8005780 <_printf_float+0x388>
 80055c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80055c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80055cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d0:	d133      	bne.n	800563a <_printf_float+0x242>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4a42      	ldr	r2, [pc, #264]	; (80056e0 <_printf_float+0x2e8>)
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f af59 	beq.w	8005494 <_printf_float+0x9c>
 80055e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055e6:	429a      	cmp	r2, r3
 80055e8:	db02      	blt.n	80055f0 <_printf_float+0x1f8>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	07d8      	lsls	r0, r3, #31
 80055ee:	d50f      	bpl.n	8005610 <_printf_float+0x218>
 80055f0:	9b05      	ldr	r3, [sp, #20]
 80055f2:	465a      	mov	r2, fp
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	f43f af4a 	beq.w	8005494 <_printf_float+0x9c>
 8005600:	f04f 0800 	mov.w	r8, #0
 8005604:	f104 091a 	add.w	r9, r4, #26
 8005608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560a:	3b01      	subs	r3, #1
 800560c:	4543      	cmp	r3, r8
 800560e:	dc09      	bgt.n	8005624 <_printf_float+0x22c>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	079b      	lsls	r3, r3, #30
 8005614:	f100 8105 	bmi.w	8005822 <_printf_float+0x42a>
 8005618:	68e0      	ldr	r0, [r4, #12]
 800561a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800561c:	4298      	cmp	r0, r3
 800561e:	bfb8      	it	lt
 8005620:	4618      	movlt	r0, r3
 8005622:	e739      	b.n	8005498 <_printf_float+0xa0>
 8005624:	2301      	movs	r3, #1
 8005626:	464a      	mov	r2, r9
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f af30 	beq.w	8005494 <_printf_float+0x9c>
 8005634:	f108 0801 	add.w	r8, r8, #1
 8005638:	e7e6      	b.n	8005608 <_printf_float+0x210>
 800563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	dc2b      	bgt.n	8005698 <_printf_float+0x2a0>
 8005640:	2301      	movs	r3, #1
 8005642:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <_printf_float+0x2e8>)
 8005644:	4631      	mov	r1, r6
 8005646:	4628      	mov	r0, r5
 8005648:	47b8      	blx	r7
 800564a:	3001      	adds	r0, #1
 800564c:	f43f af22 	beq.w	8005494 <_printf_float+0x9c>
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	b923      	cbnz	r3, 800565e <_printf_float+0x266>
 8005654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005656:	b913      	cbnz	r3, 800565e <_printf_float+0x266>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	07d9      	lsls	r1, r3, #31
 800565c:	d5d8      	bpl.n	8005610 <_printf_float+0x218>
 800565e:	9b05      	ldr	r3, [sp, #20]
 8005660:	465a      	mov	r2, fp
 8005662:	4631      	mov	r1, r6
 8005664:	4628      	mov	r0, r5
 8005666:	47b8      	blx	r7
 8005668:	3001      	adds	r0, #1
 800566a:	f43f af13 	beq.w	8005494 <_printf_float+0x9c>
 800566e:	f04f 0900 	mov.w	r9, #0
 8005672:	f104 0a1a 	add.w	sl, r4, #26
 8005676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005678:	425b      	negs	r3, r3
 800567a:	454b      	cmp	r3, r9
 800567c:	dc01      	bgt.n	8005682 <_printf_float+0x28a>
 800567e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005680:	e795      	b.n	80055ae <_printf_float+0x1b6>
 8005682:	2301      	movs	r3, #1
 8005684:	4652      	mov	r2, sl
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	47b8      	blx	r7
 800568c:	3001      	adds	r0, #1
 800568e:	f43f af01 	beq.w	8005494 <_printf_float+0x9c>
 8005692:	f109 0901 	add.w	r9, r9, #1
 8005696:	e7ee      	b.n	8005676 <_printf_float+0x27e>
 8005698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800569a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800569c:	429a      	cmp	r2, r3
 800569e:	bfa8      	it	ge
 80056a0:	461a      	movge	r2, r3
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	4691      	mov	r9, r2
 80056a6:	dd07      	ble.n	80056b8 <_printf_float+0x2c0>
 80056a8:	4613      	mov	r3, r2
 80056aa:	4631      	mov	r1, r6
 80056ac:	4642      	mov	r2, r8
 80056ae:	4628      	mov	r0, r5
 80056b0:	47b8      	blx	r7
 80056b2:	3001      	adds	r0, #1
 80056b4:	f43f aeee 	beq.w	8005494 <_printf_float+0x9c>
 80056b8:	f104 031a 	add.w	r3, r4, #26
 80056bc:	f04f 0a00 	mov.w	sl, #0
 80056c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056c4:	9307      	str	r3, [sp, #28]
 80056c6:	e017      	b.n	80056f8 <_printf_float+0x300>
 80056c8:	ffffffff 	.word	0xffffffff
 80056cc:	7fefffff 	.word	0x7fefffff
 80056d0:	080075a4 	.word	0x080075a4
 80056d4:	080075a0 	.word	0x080075a0
 80056d8:	080075ac 	.word	0x080075ac
 80056dc:	080075a8 	.word	0x080075a8
 80056e0:	080075b0 	.word	0x080075b0
 80056e4:	2301      	movs	r3, #1
 80056e6:	9a07      	ldr	r2, [sp, #28]
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	f43f aed0 	beq.w	8005494 <_printf_float+0x9c>
 80056f4:	f10a 0a01 	add.w	sl, sl, #1
 80056f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056fa:	9306      	str	r3, [sp, #24]
 80056fc:	eba3 0309 	sub.w	r3, r3, r9
 8005700:	4553      	cmp	r3, sl
 8005702:	dcef      	bgt.n	80056e4 <_printf_float+0x2ec>
 8005704:	9b06      	ldr	r3, [sp, #24]
 8005706:	4498      	add	r8, r3
 8005708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800570c:	429a      	cmp	r2, r3
 800570e:	db15      	blt.n	800573c <_printf_float+0x344>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	07da      	lsls	r2, r3, #31
 8005714:	d412      	bmi.n	800573c <_printf_float+0x344>
 8005716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005718:	9a06      	ldr	r2, [sp, #24]
 800571a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800571c:	1a9a      	subs	r2, r3, r2
 800571e:	eba3 0a01 	sub.w	sl, r3, r1
 8005722:	4592      	cmp	sl, r2
 8005724:	bfa8      	it	ge
 8005726:	4692      	movge	sl, r2
 8005728:	f1ba 0f00 	cmp.w	sl, #0
 800572c:	dc0e      	bgt.n	800574c <_printf_float+0x354>
 800572e:	f04f 0800 	mov.w	r8, #0
 8005732:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005736:	f104 091a 	add.w	r9, r4, #26
 800573a:	e019      	b.n	8005770 <_printf_float+0x378>
 800573c:	9b05      	ldr	r3, [sp, #20]
 800573e:	465a      	mov	r2, fp
 8005740:	4631      	mov	r1, r6
 8005742:	4628      	mov	r0, r5
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	d1e5      	bne.n	8005716 <_printf_float+0x31e>
 800574a:	e6a3      	b.n	8005494 <_printf_float+0x9c>
 800574c:	4653      	mov	r3, sl
 800574e:	4642      	mov	r2, r8
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	d1e9      	bne.n	800572e <_printf_float+0x336>
 800575a:	e69b      	b.n	8005494 <_printf_float+0x9c>
 800575c:	2301      	movs	r3, #1
 800575e:	464a      	mov	r2, r9
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	f43f ae94 	beq.w	8005494 <_printf_float+0x9c>
 800576c:	f108 0801 	add.w	r8, r8, #1
 8005770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	eba3 030a 	sub.w	r3, r3, sl
 800577a:	4543      	cmp	r3, r8
 800577c:	dcee      	bgt.n	800575c <_printf_float+0x364>
 800577e:	e747      	b.n	8005610 <_printf_float+0x218>
 8005780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005782:	2a01      	cmp	r2, #1
 8005784:	dc01      	bgt.n	800578a <_printf_float+0x392>
 8005786:	07db      	lsls	r3, r3, #31
 8005788:	d539      	bpl.n	80057fe <_printf_float+0x406>
 800578a:	2301      	movs	r3, #1
 800578c:	4642      	mov	r2, r8
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f ae7d 	beq.w	8005494 <_printf_float+0x9c>
 800579a:	9b05      	ldr	r3, [sp, #20]
 800579c:	465a      	mov	r2, fp
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	f108 0801 	add.w	r8, r8, #1
 80057aa:	f43f ae73 	beq.w	8005494 <_printf_float+0x9c>
 80057ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80057b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80057c0:	d018      	beq.n	80057f4 <_printf_float+0x3fc>
 80057c2:	4642      	mov	r2, r8
 80057c4:	4631      	mov	r1, r6
 80057c6:	4628      	mov	r0, r5
 80057c8:	47b8      	blx	r7
 80057ca:	3001      	adds	r0, #1
 80057cc:	d10e      	bne.n	80057ec <_printf_float+0x3f4>
 80057ce:	e661      	b.n	8005494 <_printf_float+0x9c>
 80057d0:	2301      	movs	r3, #1
 80057d2:	464a      	mov	r2, r9
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	f43f ae5a 	beq.w	8005494 <_printf_float+0x9c>
 80057e0:	f108 0801 	add.w	r8, r8, #1
 80057e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e6:	3b01      	subs	r3, #1
 80057e8:	4543      	cmp	r3, r8
 80057ea:	dcf1      	bgt.n	80057d0 <_printf_float+0x3d8>
 80057ec:	4653      	mov	r3, sl
 80057ee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057f2:	e6dd      	b.n	80055b0 <_printf_float+0x1b8>
 80057f4:	f04f 0800 	mov.w	r8, #0
 80057f8:	f104 091a 	add.w	r9, r4, #26
 80057fc:	e7f2      	b.n	80057e4 <_printf_float+0x3ec>
 80057fe:	2301      	movs	r3, #1
 8005800:	e7df      	b.n	80057c2 <_printf_float+0x3ca>
 8005802:	2301      	movs	r3, #1
 8005804:	464a      	mov	r2, r9
 8005806:	4631      	mov	r1, r6
 8005808:	4628      	mov	r0, r5
 800580a:	47b8      	blx	r7
 800580c:	3001      	adds	r0, #1
 800580e:	f43f ae41 	beq.w	8005494 <_printf_float+0x9c>
 8005812:	f108 0801 	add.w	r8, r8, #1
 8005816:	68e3      	ldr	r3, [r4, #12]
 8005818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	4543      	cmp	r3, r8
 800581e:	dcf0      	bgt.n	8005802 <_printf_float+0x40a>
 8005820:	e6fa      	b.n	8005618 <_printf_float+0x220>
 8005822:	f04f 0800 	mov.w	r8, #0
 8005826:	f104 0919 	add.w	r9, r4, #25
 800582a:	e7f4      	b.n	8005816 <_printf_float+0x41e>
 800582c:	2900      	cmp	r1, #0
 800582e:	f43f ae8a 	beq.w	8005546 <_printf_float+0x14e>
 8005832:	f04f 0c00 	mov.w	ip, #0
 8005836:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800583a:	e9cd 0900 	strd	r0, r9, [sp]
 800583e:	6022      	str	r2, [r4, #0]
 8005840:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005844:	4628      	mov	r0, r5
 8005846:	f7ff fd51 	bl	80052ec <__cvt>
 800584a:	4680      	mov	r8, r0
 800584c:	e64a      	b.n	80054e4 <_printf_float+0xec>
 800584e:	bf00      	nop

08005850 <_printf_common>:
 8005850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005854:	4691      	mov	r9, r2
 8005856:	461f      	mov	r7, r3
 8005858:	688a      	ldr	r2, [r1, #8]
 800585a:	690b      	ldr	r3, [r1, #16]
 800585c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005860:	4293      	cmp	r3, r2
 8005862:	bfb8      	it	lt
 8005864:	4613      	movlt	r3, r2
 8005866:	f8c9 3000 	str.w	r3, [r9]
 800586a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800586e:	4606      	mov	r6, r0
 8005870:	460c      	mov	r4, r1
 8005872:	b112      	cbz	r2, 800587a <_printf_common+0x2a>
 8005874:	3301      	adds	r3, #1
 8005876:	f8c9 3000 	str.w	r3, [r9]
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	0699      	lsls	r1, r3, #26
 800587e:	bf42      	ittt	mi
 8005880:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005884:	3302      	addmi	r3, #2
 8005886:	f8c9 3000 	strmi.w	r3, [r9]
 800588a:	6825      	ldr	r5, [r4, #0]
 800588c:	f015 0506 	ands.w	r5, r5, #6
 8005890:	d107      	bne.n	80058a2 <_printf_common+0x52>
 8005892:	f104 0a19 	add.w	sl, r4, #25
 8005896:	68e3      	ldr	r3, [r4, #12]
 8005898:	f8d9 2000 	ldr.w	r2, [r9]
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	42ab      	cmp	r3, r5
 80058a0:	dc28      	bgt.n	80058f4 <_printf_common+0xa4>
 80058a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058a6:	6822      	ldr	r2, [r4, #0]
 80058a8:	3300      	adds	r3, #0
 80058aa:	bf18      	it	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	0692      	lsls	r2, r2, #26
 80058b0:	d42d      	bmi.n	800590e <_printf_common+0xbe>
 80058b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058b6:	4639      	mov	r1, r7
 80058b8:	4630      	mov	r0, r6
 80058ba:	47c0      	blx	r8
 80058bc:	3001      	adds	r0, #1
 80058be:	d020      	beq.n	8005902 <_printf_common+0xb2>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	68e5      	ldr	r5, [r4, #12]
 80058c4:	f8d9 2000 	ldr.w	r2, [r9]
 80058c8:	f003 0306 	and.w	r3, r3, #6
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	bf08      	it	eq
 80058d0:	1aad      	subeq	r5, r5, r2
 80058d2:	68a3      	ldr	r3, [r4, #8]
 80058d4:	6922      	ldr	r2, [r4, #16]
 80058d6:	bf0c      	ite	eq
 80058d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058dc:	2500      	movne	r5, #0
 80058de:	4293      	cmp	r3, r2
 80058e0:	bfc4      	itt	gt
 80058e2:	1a9b      	subgt	r3, r3, r2
 80058e4:	18ed      	addgt	r5, r5, r3
 80058e6:	f04f 0900 	mov.w	r9, #0
 80058ea:	341a      	adds	r4, #26
 80058ec:	454d      	cmp	r5, r9
 80058ee:	d11a      	bne.n	8005926 <_printf_common+0xd6>
 80058f0:	2000      	movs	r0, #0
 80058f2:	e008      	b.n	8005906 <_printf_common+0xb6>
 80058f4:	2301      	movs	r3, #1
 80058f6:	4652      	mov	r2, sl
 80058f8:	4639      	mov	r1, r7
 80058fa:	4630      	mov	r0, r6
 80058fc:	47c0      	blx	r8
 80058fe:	3001      	adds	r0, #1
 8005900:	d103      	bne.n	800590a <_printf_common+0xba>
 8005902:	f04f 30ff 	mov.w	r0, #4294967295
 8005906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590a:	3501      	adds	r5, #1
 800590c:	e7c3      	b.n	8005896 <_printf_common+0x46>
 800590e:	18e1      	adds	r1, r4, r3
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	2030      	movs	r0, #48	; 0x30
 8005914:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005918:	4422      	add	r2, r4
 800591a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800591e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005922:	3302      	adds	r3, #2
 8005924:	e7c5      	b.n	80058b2 <_printf_common+0x62>
 8005926:	2301      	movs	r3, #1
 8005928:	4622      	mov	r2, r4
 800592a:	4639      	mov	r1, r7
 800592c:	4630      	mov	r0, r6
 800592e:	47c0      	blx	r8
 8005930:	3001      	adds	r0, #1
 8005932:	d0e6      	beq.n	8005902 <_printf_common+0xb2>
 8005934:	f109 0901 	add.w	r9, r9, #1
 8005938:	e7d8      	b.n	80058ec <_printf_common+0x9c>
	...

0800593c <_printf_i>:
 800593c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005940:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005944:	460c      	mov	r4, r1
 8005946:	7e09      	ldrb	r1, [r1, #24]
 8005948:	b085      	sub	sp, #20
 800594a:	296e      	cmp	r1, #110	; 0x6e
 800594c:	4617      	mov	r7, r2
 800594e:	4606      	mov	r6, r0
 8005950:	4698      	mov	r8, r3
 8005952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005954:	f000 80b3 	beq.w	8005abe <_printf_i+0x182>
 8005958:	d822      	bhi.n	80059a0 <_printf_i+0x64>
 800595a:	2963      	cmp	r1, #99	; 0x63
 800595c:	d036      	beq.n	80059cc <_printf_i+0x90>
 800595e:	d80a      	bhi.n	8005976 <_printf_i+0x3a>
 8005960:	2900      	cmp	r1, #0
 8005962:	f000 80b9 	beq.w	8005ad8 <_printf_i+0x19c>
 8005966:	2958      	cmp	r1, #88	; 0x58
 8005968:	f000 8083 	beq.w	8005a72 <_printf_i+0x136>
 800596c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005970:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005974:	e032      	b.n	80059dc <_printf_i+0xa0>
 8005976:	2964      	cmp	r1, #100	; 0x64
 8005978:	d001      	beq.n	800597e <_printf_i+0x42>
 800597a:	2969      	cmp	r1, #105	; 0x69
 800597c:	d1f6      	bne.n	800596c <_printf_i+0x30>
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	6813      	ldr	r3, [r2, #0]
 8005982:	0605      	lsls	r5, r0, #24
 8005984:	f103 0104 	add.w	r1, r3, #4
 8005988:	d52a      	bpl.n	80059e0 <_printf_i+0xa4>
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6011      	str	r1, [r2, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	da03      	bge.n	800599a <_printf_i+0x5e>
 8005992:	222d      	movs	r2, #45	; 0x2d
 8005994:	425b      	negs	r3, r3
 8005996:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800599a:	486f      	ldr	r0, [pc, #444]	; (8005b58 <_printf_i+0x21c>)
 800599c:	220a      	movs	r2, #10
 800599e:	e039      	b.n	8005a14 <_printf_i+0xd8>
 80059a0:	2973      	cmp	r1, #115	; 0x73
 80059a2:	f000 809d 	beq.w	8005ae0 <_printf_i+0x1a4>
 80059a6:	d808      	bhi.n	80059ba <_printf_i+0x7e>
 80059a8:	296f      	cmp	r1, #111	; 0x6f
 80059aa:	d020      	beq.n	80059ee <_printf_i+0xb2>
 80059ac:	2970      	cmp	r1, #112	; 0x70
 80059ae:	d1dd      	bne.n	800596c <_printf_i+0x30>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	f043 0320 	orr.w	r3, r3, #32
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	e003      	b.n	80059c2 <_printf_i+0x86>
 80059ba:	2975      	cmp	r1, #117	; 0x75
 80059bc:	d017      	beq.n	80059ee <_printf_i+0xb2>
 80059be:	2978      	cmp	r1, #120	; 0x78
 80059c0:	d1d4      	bne.n	800596c <_printf_i+0x30>
 80059c2:	2378      	movs	r3, #120	; 0x78
 80059c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059c8:	4864      	ldr	r0, [pc, #400]	; (8005b5c <_printf_i+0x220>)
 80059ca:	e055      	b.n	8005a78 <_printf_i+0x13c>
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	1d19      	adds	r1, r3, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6011      	str	r1, [r2, #0]
 80059d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059dc:	2301      	movs	r3, #1
 80059de:	e08c      	b.n	8005afa <_printf_i+0x1be>
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6011      	str	r1, [r2, #0]
 80059e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059e8:	bf18      	it	ne
 80059ea:	b21b      	sxthne	r3, r3
 80059ec:	e7cf      	b.n	800598e <_printf_i+0x52>
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	6825      	ldr	r5, [r4, #0]
 80059f2:	1d18      	adds	r0, r3, #4
 80059f4:	6010      	str	r0, [r2, #0]
 80059f6:	0628      	lsls	r0, r5, #24
 80059f8:	d501      	bpl.n	80059fe <_printf_i+0xc2>
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	e002      	b.n	8005a04 <_printf_i+0xc8>
 80059fe:	0668      	lsls	r0, r5, #25
 8005a00:	d5fb      	bpl.n	80059fa <_printf_i+0xbe>
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	4854      	ldr	r0, [pc, #336]	; (8005b58 <_printf_i+0x21c>)
 8005a06:	296f      	cmp	r1, #111	; 0x6f
 8005a08:	bf14      	ite	ne
 8005a0a:	220a      	movne	r2, #10
 8005a0c:	2208      	moveq	r2, #8
 8005a0e:	2100      	movs	r1, #0
 8005a10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a14:	6865      	ldr	r5, [r4, #4]
 8005a16:	60a5      	str	r5, [r4, #8]
 8005a18:	2d00      	cmp	r5, #0
 8005a1a:	f2c0 8095 	blt.w	8005b48 <_printf_i+0x20c>
 8005a1e:	6821      	ldr	r1, [r4, #0]
 8005a20:	f021 0104 	bic.w	r1, r1, #4
 8005a24:	6021      	str	r1, [r4, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d13d      	bne.n	8005aa6 <_printf_i+0x16a>
 8005a2a:	2d00      	cmp	r5, #0
 8005a2c:	f040 808e 	bne.w	8005b4c <_printf_i+0x210>
 8005a30:	4665      	mov	r5, ip
 8005a32:	2a08      	cmp	r2, #8
 8005a34:	d10b      	bne.n	8005a4e <_printf_i+0x112>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	07db      	lsls	r3, r3, #31
 8005a3a:	d508      	bpl.n	8005a4e <_printf_i+0x112>
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	6862      	ldr	r2, [r4, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	bfde      	ittt	le
 8005a44:	2330      	movle	r3, #48	; 0x30
 8005a46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a4e:	ebac 0305 	sub.w	r3, ip, r5
 8005a52:	6123      	str	r3, [r4, #16]
 8005a54:	f8cd 8000 	str.w	r8, [sp]
 8005a58:	463b      	mov	r3, r7
 8005a5a:	aa03      	add	r2, sp, #12
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f7ff fef6 	bl	8005850 <_printf_common>
 8005a64:	3001      	adds	r0, #1
 8005a66:	d14d      	bne.n	8005b04 <_printf_i+0x1c8>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	b005      	add	sp, #20
 8005a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a72:	4839      	ldr	r0, [pc, #228]	; (8005b58 <_printf_i+0x21c>)
 8005a74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a78:	6813      	ldr	r3, [r2, #0]
 8005a7a:	6821      	ldr	r1, [r4, #0]
 8005a7c:	1d1d      	adds	r5, r3, #4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6015      	str	r5, [r2, #0]
 8005a82:	060a      	lsls	r2, r1, #24
 8005a84:	d50b      	bpl.n	8005a9e <_printf_i+0x162>
 8005a86:	07ca      	lsls	r2, r1, #31
 8005a88:	bf44      	itt	mi
 8005a8a:	f041 0120 	orrmi.w	r1, r1, #32
 8005a8e:	6021      	strmi	r1, [r4, #0]
 8005a90:	b91b      	cbnz	r3, 8005a9a <_printf_i+0x15e>
 8005a92:	6822      	ldr	r2, [r4, #0]
 8005a94:	f022 0220 	bic.w	r2, r2, #32
 8005a98:	6022      	str	r2, [r4, #0]
 8005a9a:	2210      	movs	r2, #16
 8005a9c:	e7b7      	b.n	8005a0e <_printf_i+0xd2>
 8005a9e:	064d      	lsls	r5, r1, #25
 8005aa0:	bf48      	it	mi
 8005aa2:	b29b      	uxthmi	r3, r3
 8005aa4:	e7ef      	b.n	8005a86 <_printf_i+0x14a>
 8005aa6:	4665      	mov	r5, ip
 8005aa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005aac:	fb02 3311 	mls	r3, r2, r1, r3
 8005ab0:	5cc3      	ldrb	r3, [r0, r3]
 8005ab2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	d1f5      	bne.n	8005aa8 <_printf_i+0x16c>
 8005abc:	e7b9      	b.n	8005a32 <_printf_i+0xf6>
 8005abe:	6813      	ldr	r3, [r2, #0]
 8005ac0:	6825      	ldr	r5, [r4, #0]
 8005ac2:	6961      	ldr	r1, [r4, #20]
 8005ac4:	1d18      	adds	r0, r3, #4
 8005ac6:	6010      	str	r0, [r2, #0]
 8005ac8:	0628      	lsls	r0, r5, #24
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	d501      	bpl.n	8005ad2 <_printf_i+0x196>
 8005ace:	6019      	str	r1, [r3, #0]
 8005ad0:	e002      	b.n	8005ad8 <_printf_i+0x19c>
 8005ad2:	066a      	lsls	r2, r5, #25
 8005ad4:	d5fb      	bpl.n	8005ace <_printf_i+0x192>
 8005ad6:	8019      	strh	r1, [r3, #0]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6123      	str	r3, [r4, #16]
 8005adc:	4665      	mov	r5, ip
 8005ade:	e7b9      	b.n	8005a54 <_printf_i+0x118>
 8005ae0:	6813      	ldr	r3, [r2, #0]
 8005ae2:	1d19      	adds	r1, r3, #4
 8005ae4:	6011      	str	r1, [r2, #0]
 8005ae6:	681d      	ldr	r5, [r3, #0]
 8005ae8:	6862      	ldr	r2, [r4, #4]
 8005aea:	2100      	movs	r1, #0
 8005aec:	4628      	mov	r0, r5
 8005aee:	f7fa fbff 	bl	80002f0 <memchr>
 8005af2:	b108      	cbz	r0, 8005af8 <_printf_i+0x1bc>
 8005af4:	1b40      	subs	r0, r0, r5
 8005af6:	6060      	str	r0, [r4, #4]
 8005af8:	6863      	ldr	r3, [r4, #4]
 8005afa:	6123      	str	r3, [r4, #16]
 8005afc:	2300      	movs	r3, #0
 8005afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b02:	e7a7      	b.n	8005a54 <_printf_i+0x118>
 8005b04:	6923      	ldr	r3, [r4, #16]
 8005b06:	462a      	mov	r2, r5
 8005b08:	4639      	mov	r1, r7
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	47c0      	blx	r8
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d0aa      	beq.n	8005a68 <_printf_i+0x12c>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	079b      	lsls	r3, r3, #30
 8005b16:	d413      	bmi.n	8005b40 <_printf_i+0x204>
 8005b18:	68e0      	ldr	r0, [r4, #12]
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	4298      	cmp	r0, r3
 8005b1e:	bfb8      	it	lt
 8005b20:	4618      	movlt	r0, r3
 8005b22:	e7a3      	b.n	8005a6c <_printf_i+0x130>
 8005b24:	2301      	movs	r3, #1
 8005b26:	464a      	mov	r2, r9
 8005b28:	4639      	mov	r1, r7
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	47c0      	blx	r8
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d09a      	beq.n	8005a68 <_printf_i+0x12c>
 8005b32:	3501      	adds	r5, #1
 8005b34:	68e3      	ldr	r3, [r4, #12]
 8005b36:	9a03      	ldr	r2, [sp, #12]
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	42ab      	cmp	r3, r5
 8005b3c:	dcf2      	bgt.n	8005b24 <_printf_i+0x1e8>
 8005b3e:	e7eb      	b.n	8005b18 <_printf_i+0x1dc>
 8005b40:	2500      	movs	r5, #0
 8005b42:	f104 0919 	add.w	r9, r4, #25
 8005b46:	e7f5      	b.n	8005b34 <_printf_i+0x1f8>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1ac      	bne.n	8005aa6 <_printf_i+0x16a>
 8005b4c:	7803      	ldrb	r3, [r0, #0]
 8005b4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b56:	e76c      	b.n	8005a32 <_printf_i+0xf6>
 8005b58:	080075b2 	.word	0x080075b2
 8005b5c:	080075c3 	.word	0x080075c3

08005b60 <_sbrk_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4c06      	ldr	r4, [pc, #24]	; (8005b7c <_sbrk_r+0x1c>)
 8005b64:	2300      	movs	r3, #0
 8005b66:	4605      	mov	r5, r0
 8005b68:	4608      	mov	r0, r1
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	f7fb fafa 	bl	8001164 <_sbrk>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_sbrk_r+0x1a>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_sbrk_r+0x1a>
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	20006728 	.word	0x20006728

08005b80 <siprintf>:
 8005b80:	b40e      	push	{r1, r2, r3}
 8005b82:	b500      	push	{lr}
 8005b84:	b09c      	sub	sp, #112	; 0x70
 8005b86:	ab1d      	add	r3, sp, #116	; 0x74
 8005b88:	9002      	str	r0, [sp, #8]
 8005b8a:	9006      	str	r0, [sp, #24]
 8005b8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b90:	4809      	ldr	r0, [pc, #36]	; (8005bb8 <siprintf+0x38>)
 8005b92:	9107      	str	r1, [sp, #28]
 8005b94:	9104      	str	r1, [sp, #16]
 8005b96:	4909      	ldr	r1, [pc, #36]	; (8005bbc <siprintf+0x3c>)
 8005b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b9c:	9105      	str	r1, [sp, #20]
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	a902      	add	r1, sp, #8
 8005ba4:	f001 f938 	bl	8006e18 <_svfiprintf_r>
 8005ba8:	9b02      	ldr	r3, [sp, #8]
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	b01c      	add	sp, #112	; 0x70
 8005bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bb4:	b003      	add	sp, #12
 8005bb6:	4770      	bx	lr
 8005bb8:	20000010 	.word	0x20000010
 8005bbc:	ffff0208 	.word	0xffff0208

08005bc0 <quorem>:
 8005bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	6903      	ldr	r3, [r0, #16]
 8005bc6:	690c      	ldr	r4, [r1, #16]
 8005bc8:	42a3      	cmp	r3, r4
 8005bca:	4680      	mov	r8, r0
 8005bcc:	f2c0 8082 	blt.w	8005cd4 <quorem+0x114>
 8005bd0:	3c01      	subs	r4, #1
 8005bd2:	f101 0714 	add.w	r7, r1, #20
 8005bd6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005bda:	f100 0614 	add.w	r6, r0, #20
 8005bde:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005be2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005be6:	eb06 030c 	add.w	r3, r6, ip
 8005bea:	3501      	adds	r5, #1
 8005bec:	eb07 090c 	add.w	r9, r7, ip
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005bf6:	b395      	cbz	r5, 8005c5e <quorem+0x9e>
 8005bf8:	f04f 0a00 	mov.w	sl, #0
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	46b6      	mov	lr, r6
 8005c00:	46d3      	mov	fp, sl
 8005c02:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c06:	b293      	uxth	r3, r2
 8005c08:	fb05 a303 	mla	r3, r5, r3, sl
 8005c0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	ebab 0303 	sub.w	r3, fp, r3
 8005c16:	0c12      	lsrs	r2, r2, #16
 8005c18:	f8de b000 	ldr.w	fp, [lr]
 8005c1c:	fb05 a202 	mla	r2, r5, r2, sl
 8005c20:	fa13 f38b 	uxtah	r3, r3, fp
 8005c24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005c28:	fa1f fb82 	uxth.w	fp, r2
 8005c2c:	f8de 2000 	ldr.w	r2, [lr]
 8005c30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005c34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c3e:	4581      	cmp	r9, r0
 8005c40:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005c44:	f84e 3b04 	str.w	r3, [lr], #4
 8005c48:	d2db      	bcs.n	8005c02 <quorem+0x42>
 8005c4a:	f856 300c 	ldr.w	r3, [r6, ip]
 8005c4e:	b933      	cbnz	r3, 8005c5e <quorem+0x9e>
 8005c50:	9b01      	ldr	r3, [sp, #4]
 8005c52:	3b04      	subs	r3, #4
 8005c54:	429e      	cmp	r6, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	d330      	bcc.n	8005cbc <quorem+0xfc>
 8005c5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f000 ffac 	bl	8006bbc <__mcmp>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	db25      	blt.n	8005cb4 <quorem+0xf4>
 8005c68:	3501      	adds	r5, #1
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f04f 0c00 	mov.w	ip, #0
 8005c70:	f857 2b04 	ldr.w	r2, [r7], #4
 8005c74:	f8d0 e000 	ldr.w	lr, [r0]
 8005c78:	b293      	uxth	r3, r2
 8005c7a:	ebac 0303 	sub.w	r3, ip, r3
 8005c7e:	0c12      	lsrs	r2, r2, #16
 8005c80:	fa13 f38e 	uxtah	r3, r3, lr
 8005c84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c92:	45b9      	cmp	r9, r7
 8005c94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c98:	f840 3b04 	str.w	r3, [r0], #4
 8005c9c:	d2e8      	bcs.n	8005c70 <quorem+0xb0>
 8005c9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005ca2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ca6:	b92a      	cbnz	r2, 8005cb4 <quorem+0xf4>
 8005ca8:	3b04      	subs	r3, #4
 8005caa:	429e      	cmp	r6, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	d30b      	bcc.n	8005cc8 <quorem+0x108>
 8005cb0:	f8c8 4010 	str.w	r4, [r8, #16]
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	b003      	add	sp, #12
 8005cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	3b04      	subs	r3, #4
 8005cc0:	2a00      	cmp	r2, #0
 8005cc2:	d1ca      	bne.n	8005c5a <quorem+0x9a>
 8005cc4:	3c01      	subs	r4, #1
 8005cc6:	e7c5      	b.n	8005c54 <quorem+0x94>
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	3b04      	subs	r3, #4
 8005ccc:	2a00      	cmp	r2, #0
 8005cce:	d1ef      	bne.n	8005cb0 <quorem+0xf0>
 8005cd0:	3c01      	subs	r4, #1
 8005cd2:	e7ea      	b.n	8005caa <quorem+0xea>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e7ee      	b.n	8005cb6 <quorem+0xf6>

08005cd8 <_dtoa_r>:
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	ec57 6b10 	vmov	r6, r7, d0
 8005ce0:	b095      	sub	sp, #84	; 0x54
 8005ce2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ce4:	9108      	str	r1, [sp, #32]
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8005cea:	9311      	str	r3, [sp, #68]	; 0x44
 8005cec:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005cf0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005cf4:	b93d      	cbnz	r5, 8005d06 <_dtoa_r+0x2e>
 8005cf6:	2010      	movs	r0, #16
 8005cf8:	f7ff fa2c 	bl	8005154 <malloc>
 8005cfc:	6260      	str	r0, [r4, #36]	; 0x24
 8005cfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d02:	6005      	str	r5, [r0, #0]
 8005d04:	60c5      	str	r5, [r0, #12]
 8005d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d08:	6819      	ldr	r1, [r3, #0]
 8005d0a:	b151      	cbz	r1, 8005d22 <_dtoa_r+0x4a>
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	604a      	str	r2, [r1, #4]
 8005d10:	2301      	movs	r3, #1
 8005d12:	4093      	lsls	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
 8005d16:	4620      	mov	r0, r4
 8005d18:	f000 fd6e 	bl	80067f8 <_Bfree>
 8005d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	1e3b      	subs	r3, r7, #0
 8005d24:	bfb9      	ittee	lt
 8005d26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d2a:	9303      	strlt	r3, [sp, #12]
 8005d2c:	2300      	movge	r3, #0
 8005d2e:	f8c8 3000 	strge.w	r3, [r8]
 8005d32:	9d03      	ldr	r5, [sp, #12]
 8005d34:	4bac      	ldr	r3, [pc, #688]	; (8005fe8 <_dtoa_r+0x310>)
 8005d36:	bfbc      	itt	lt
 8005d38:	2201      	movlt	r2, #1
 8005d3a:	f8c8 2000 	strlt.w	r2, [r8]
 8005d3e:	43ab      	bics	r3, r5
 8005d40:	d11b      	bne.n	8005d7a <_dtoa_r+0xa2>
 8005d42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d44:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	9b02      	ldr	r3, [sp, #8]
 8005d4c:	b923      	cbnz	r3, 8005d58 <_dtoa_r+0x80>
 8005d4e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005d52:	2d00      	cmp	r5, #0
 8005d54:	f000 84dd 	beq.w	8006712 <_dtoa_r+0xa3a>
 8005d58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d5a:	b953      	cbnz	r3, 8005d72 <_dtoa_r+0x9a>
 8005d5c:	4ba3      	ldr	r3, [pc, #652]	; (8005fec <_dtoa_r+0x314>)
 8005d5e:	e020      	b.n	8005da2 <_dtoa_r+0xca>
 8005d60:	4ba3      	ldr	r3, [pc, #652]	; (8005ff0 <_dtoa_r+0x318>)
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	3308      	adds	r3, #8
 8005d66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	9804      	ldr	r0, [sp, #16]
 8005d6c:	b015      	add	sp, #84	; 0x54
 8005d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d72:	4b9e      	ldr	r3, [pc, #632]	; (8005fec <_dtoa_r+0x314>)
 8005d74:	9304      	str	r3, [sp, #16]
 8005d76:	3303      	adds	r3, #3
 8005d78:	e7f5      	b.n	8005d66 <_dtoa_r+0x8e>
 8005d7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d8a:	d10c      	bne.n	8005da6 <_dtoa_r+0xce>
 8005d8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d8e:	2301      	movs	r3, #1
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 84b9 	beq.w	800670c <_dtoa_r+0xa34>
 8005d9a:	4b96      	ldr	r3, [pc, #600]	; (8005ff4 <_dtoa_r+0x31c>)
 8005d9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	9304      	str	r3, [sp, #16]
 8005da4:	e7e1      	b.n	8005d6a <_dtoa_r+0x92>
 8005da6:	a913      	add	r1, sp, #76	; 0x4c
 8005da8:	aa12      	add	r2, sp, #72	; 0x48
 8005daa:	ed9d 0b04 	vldr	d0, [sp, #16]
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 ff7b 	bl	8006caa <__d2b>
 8005db4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8005db8:	9001      	str	r0, [sp, #4]
 8005dba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005dbc:	2e00      	cmp	r6, #0
 8005dbe:	d046      	beq.n	8005e4e <_dtoa_r+0x176>
 8005dc0:	9805      	ldr	r0, [sp, #20]
 8005dc2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8005dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dca:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8005dce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005dd2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8005dd6:	2700      	movs	r7, #0
 8005dd8:	ee07 aa90 	vmov	s15, sl
 8005ddc:	ec43 2b16 	vmov	d6, r2, r3
 8005de0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8005de4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8005fd0 <_dtoa_r+0x2f8>
 8005de8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005dec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005df0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8005fd8 <_dtoa_r+0x300>
 8005df4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8005df8:	eeb0 7b46 	vmov.f64	d7, d6
 8005dfc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8005fe0 <_dtoa_r+0x308>
 8005e00:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005e04:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005e08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e10:	ee16 ba90 	vmov	fp, s13
 8005e14:	d508      	bpl.n	8005e28 <_dtoa_r+0x150>
 8005e16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005e1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8005e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e22:	bf18      	it	ne
 8005e24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005e28:	f1bb 0f16 	cmp.w	fp, #22
 8005e2c:	d834      	bhi.n	8005e98 <_dtoa_r+0x1c0>
 8005e2e:	4b72      	ldr	r3, [pc, #456]	; (8005ff8 <_dtoa_r+0x320>)
 8005e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e34:	ed93 7b00 	vldr	d7, [r3]
 8005e38:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005e3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e44:	dd01      	ble.n	8005e4a <_dtoa_r+0x172>
 8005e46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e025      	b.n	8005e9a <_dtoa_r+0x1c2>
 8005e4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e50:	eb01 0a03 	add.w	sl, r1, r3
 8005e54:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	dd17      	ble.n	8005e8c <_dtoa_r+0x1b4>
 8005e5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005e60:	9a02      	ldr	r2, [sp, #8]
 8005e62:	409d      	lsls	r5, r3
 8005e64:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6c:	432b      	orrs	r3, r5
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005e7e:	9805      	ldr	r0, [sp, #20]
 8005e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e84:	2701      	movs	r7, #1
 8005e86:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8005e8a:	e7a5      	b.n	8005dd8 <_dtoa_r+0x100>
 8005e8c:	9a02      	ldr	r2, [sp, #8]
 8005e8e:	f1c3 0320 	rsb	r3, r3, #32
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	e7ea      	b.n	8005e6e <_dtoa_r+0x196>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	eba1 0a0a 	sub.w	sl, r1, sl
 8005e9e:	9310      	str	r3, [sp, #64]	; 0x40
 8005ea0:	f1ba 0301 	subs.w	r3, sl, #1
 8005ea4:	9307      	str	r3, [sp, #28]
 8005ea6:	bf43      	ittte	mi
 8005ea8:	2300      	movmi	r3, #0
 8005eaa:	f1ca 0a01 	rsbmi	sl, sl, #1
 8005eae:	9307      	strmi	r3, [sp, #28]
 8005eb0:	f04f 0a00 	movpl.w	sl, #0
 8005eb4:	f1bb 0f00 	cmp.w	fp, #0
 8005eb8:	db19      	blt.n	8005eee <_dtoa_r+0x216>
 8005eba:	9b07      	ldr	r3, [sp, #28]
 8005ebc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005ec0:	445b      	add	r3, fp
 8005ec2:	9307      	str	r3, [sp, #28]
 8005ec4:	f04f 0800 	mov.w	r8, #0
 8005ec8:	9b08      	ldr	r3, [sp, #32]
 8005eca:	2b09      	cmp	r3, #9
 8005ecc:	d866      	bhi.n	8005f9c <_dtoa_r+0x2c4>
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	bfc4      	itt	gt
 8005ed2:	3b04      	subgt	r3, #4
 8005ed4:	9308      	strgt	r3, [sp, #32]
 8005ed6:	9b08      	ldr	r3, [sp, #32]
 8005ed8:	f1a3 0302 	sub.w	r3, r3, #2
 8005edc:	bfcc      	ite	gt
 8005ede:	2500      	movgt	r5, #0
 8005ee0:	2501      	movle	r5, #1
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d866      	bhi.n	8005fb4 <_dtoa_r+0x2dc>
 8005ee6:	e8df f003 	tbb	[pc, r3]
 8005eea:	5755      	.short	0x5755
 8005eec:	4909      	.short	0x4909
 8005eee:	2300      	movs	r3, #0
 8005ef0:	ebaa 0a0b 	sub.w	sl, sl, fp
 8005ef4:	f1cb 0800 	rsb	r8, fp, #0
 8005ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005efa:	e7e5      	b.n	8005ec8 <_dtoa_r+0x1f0>
 8005efc:	2301      	movs	r3, #1
 8005efe:	9309      	str	r3, [sp, #36]	; 0x24
 8005f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dd59      	ble.n	8005fba <_dtoa_r+0x2e2>
 8005f06:	9306      	str	r3, [sp, #24]
 8005f08:	4699      	mov	r9, r3
 8005f0a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	6072      	str	r2, [r6, #4]
 8005f10:	2204      	movs	r2, #4
 8005f12:	f102 0014 	add.w	r0, r2, #20
 8005f16:	4298      	cmp	r0, r3
 8005f18:	6871      	ldr	r1, [r6, #4]
 8005f1a:	d953      	bls.n	8005fc4 <_dtoa_r+0x2ec>
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f000 fc37 	bl	8006790 <_Balloc>
 8005f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f24:	6030      	str	r0, [r6, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	9304      	str	r3, [sp, #16]
 8005f2a:	f1b9 0f0e 	cmp.w	r9, #14
 8005f2e:	f200 80c2 	bhi.w	80060b6 <_dtoa_r+0x3de>
 8005f32:	2d00      	cmp	r5, #0
 8005f34:	f000 80bf 	beq.w	80060b6 <_dtoa_r+0x3de>
 8005f38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f3c:	f1bb 0f00 	cmp.w	fp, #0
 8005f40:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005f44:	f340 80e6 	ble.w	8006114 <_dtoa_r+0x43c>
 8005f48:	4a2b      	ldr	r2, [pc, #172]	; (8005ff8 <_dtoa_r+0x320>)
 8005f4a:	f00b 030f 	and.w	r3, fp, #15
 8005f4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f52:	ed93 7b00 	vldr	d7, [r3]
 8005f56:	ea4f 132b 	mov.w	r3, fp, asr #4
 8005f5a:	06da      	lsls	r2, r3, #27
 8005f5c:	f140 80d8 	bpl.w	8006110 <_dtoa_r+0x438>
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <_dtoa_r+0x324>)
 8005f62:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8005f66:	ed92 6b08 	vldr	d6, [r2, #32]
 8005f6a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8005f6e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	2203      	movs	r2, #3
 8005f78:	4920      	ldr	r1, [pc, #128]	; (8005ffc <_dtoa_r+0x324>)
 8005f7a:	e04a      	b.n	8006012 <_dtoa_r+0x33a>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f82:	445b      	add	r3, fp
 8005f84:	f103 0901 	add.w	r9, r3, #1
 8005f88:	9306      	str	r3, [sp, #24]
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bfb8      	it	lt
 8005f90:	2301      	movlt	r3, #1
 8005f92:	e7ba      	b.n	8005f0a <_dtoa_r+0x232>
 8005f94:	2300      	movs	r3, #0
 8005f96:	e7b2      	b.n	8005efe <_dtoa_r+0x226>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e7f0      	b.n	8005f7e <_dtoa_r+0x2a6>
 8005f9c:	2501      	movs	r5, #1
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8005fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa8:	9306      	str	r3, [sp, #24]
 8005faa:	4699      	mov	r9, r3
 8005fac:	2200      	movs	r2, #0
 8005fae:	2312      	movs	r3, #18
 8005fb0:	920a      	str	r2, [sp, #40]	; 0x28
 8005fb2:	e7aa      	b.n	8005f0a <_dtoa_r+0x232>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb8:	e7f4      	b.n	8005fa4 <_dtoa_r+0x2cc>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	9306      	str	r3, [sp, #24]
 8005fbe:	4699      	mov	r9, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	e7f5      	b.n	8005fb0 <_dtoa_r+0x2d8>
 8005fc4:	3101      	adds	r1, #1
 8005fc6:	6071      	str	r1, [r6, #4]
 8005fc8:	0052      	lsls	r2, r2, #1
 8005fca:	e7a2      	b.n	8005f12 <_dtoa_r+0x23a>
 8005fcc:	f3af 8000 	nop.w
 8005fd0:	636f4361 	.word	0x636f4361
 8005fd4:	3fd287a7 	.word	0x3fd287a7
 8005fd8:	8b60c8b3 	.word	0x8b60c8b3
 8005fdc:	3fc68a28 	.word	0x3fc68a28
 8005fe0:	509f79fb 	.word	0x509f79fb
 8005fe4:	3fd34413 	.word	0x3fd34413
 8005fe8:	7ff00000 	.word	0x7ff00000
 8005fec:	080075dd 	.word	0x080075dd
 8005ff0:	080075d4 	.word	0x080075d4
 8005ff4:	080075b1 	.word	0x080075b1
 8005ff8:	08007610 	.word	0x08007610
 8005ffc:	080075e8 	.word	0x080075e8
 8006000:	07de      	lsls	r6, r3, #31
 8006002:	d504      	bpl.n	800600e <_dtoa_r+0x336>
 8006004:	ed91 6b00 	vldr	d6, [r1]
 8006008:	3201      	adds	r2, #1
 800600a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800600e:	105b      	asrs	r3, r3, #1
 8006010:	3108      	adds	r1, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1f4      	bne.n	8006000 <_dtoa_r+0x328>
 8006016:	ed9d 6b02 	vldr	d6, [sp, #8]
 800601a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800601e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006022:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80a7 	beq.w	8006178 <_dtoa_r+0x4a0>
 800602a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800602e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006032:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603a:	f140 809d 	bpl.w	8006178 <_dtoa_r+0x4a0>
 800603e:	f1b9 0f00 	cmp.w	r9, #0
 8006042:	f000 8099 	beq.w	8006178 <_dtoa_r+0x4a0>
 8006046:	9b06      	ldr	r3, [sp, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dd30      	ble.n	80060ae <_dtoa_r+0x3d6>
 800604c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006050:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006054:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006058:	9d06      	ldr	r5, [sp, #24]
 800605a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800605e:	3201      	adds	r2, #1
 8006060:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006064:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006068:	ee07 2a90 	vmov	s15, r2
 800606c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006070:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006074:	ed8d 5b02 	vstr	d5, [sp, #8]
 8006078:	9a03      	ldr	r2, [sp, #12]
 800607a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800607e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8006082:	2d00      	cmp	r5, #0
 8006084:	d17b      	bne.n	800617e <_dtoa_r+0x4a6>
 8006086:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800608a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800608e:	ec41 0b17 	vmov	d7, r0, r1
 8006092:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609a:	f300 8253 	bgt.w	8006544 <_dtoa_r+0x86c>
 800609e:	eeb1 7b47 	vneg.f64	d7, d7
 80060a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80060a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060aa:	f100 8249 	bmi.w	8006540 <_dtoa_r+0x868>
 80060ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80060b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f2c0 8119 	blt.w	80062f0 <_dtoa_r+0x618>
 80060be:	f1bb 0f0e 	cmp.w	fp, #14
 80060c2:	f300 8115 	bgt.w	80062f0 <_dtoa_r+0x618>
 80060c6:	4bc3      	ldr	r3, [pc, #780]	; (80063d4 <_dtoa_r+0x6fc>)
 80060c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060cc:	ed93 6b00 	vldr	d6, [r3]
 80060d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f280 80ba 	bge.w	800624c <_dtoa_r+0x574>
 80060d8:	f1b9 0f00 	cmp.w	r9, #0
 80060dc:	f300 80b6 	bgt.w	800624c <_dtoa_r+0x574>
 80060e0:	f040 822d 	bne.w	800653e <_dtoa_r+0x866>
 80060e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80060e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80060ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80060f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f8:	464d      	mov	r5, r9
 80060fa:	464f      	mov	r7, r9
 80060fc:	f280 8204 	bge.w	8006508 <_dtoa_r+0x830>
 8006100:	9b04      	ldr	r3, [sp, #16]
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	1c5e      	adds	r6, r3, #1
 8006106:	2331      	movs	r3, #49	; 0x31
 8006108:	7013      	strb	r3, [r2, #0]
 800610a:	f10b 0b01 	add.w	fp, fp, #1
 800610e:	e1ff      	b.n	8006510 <_dtoa_r+0x838>
 8006110:	2202      	movs	r2, #2
 8006112:	e731      	b.n	8005f78 <_dtoa_r+0x2a0>
 8006114:	d02e      	beq.n	8006174 <_dtoa_r+0x49c>
 8006116:	f1cb 0300 	rsb	r3, fp, #0
 800611a:	4aae      	ldr	r2, [pc, #696]	; (80063d4 <_dtoa_r+0x6fc>)
 800611c:	f003 010f 	and.w	r1, r3, #15
 8006120:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006124:	ed92 7b00 	vldr	d7, [r2]
 8006128:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800612c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006130:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006134:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8006138:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800613c:	49a6      	ldr	r1, [pc, #664]	; (80063d8 <_dtoa_r+0x700>)
 800613e:	111b      	asrs	r3, r3, #4
 8006140:	2000      	movs	r0, #0
 8006142:	2202      	movs	r2, #2
 8006144:	b93b      	cbnz	r3, 8006156 <_dtoa_r+0x47e>
 8006146:	2800      	cmp	r0, #0
 8006148:	f43f af6b 	beq.w	8006022 <_dtoa_r+0x34a>
 800614c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006154:	e765      	b.n	8006022 <_dtoa_r+0x34a>
 8006156:	07dd      	lsls	r5, r3, #31
 8006158:	d509      	bpl.n	800616e <_dtoa_r+0x496>
 800615a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800615e:	ed91 7b00 	vldr	d7, [r1]
 8006162:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006166:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800616a:	3201      	adds	r2, #1
 800616c:	2001      	movs	r0, #1
 800616e:	105b      	asrs	r3, r3, #1
 8006170:	3108      	adds	r1, #8
 8006172:	e7e7      	b.n	8006144 <_dtoa_r+0x46c>
 8006174:	2202      	movs	r2, #2
 8006176:	e754      	b.n	8006022 <_dtoa_r+0x34a>
 8006178:	465b      	mov	r3, fp
 800617a:	464d      	mov	r5, r9
 800617c:	e770      	b.n	8006060 <_dtoa_r+0x388>
 800617e:	4a95      	ldr	r2, [pc, #596]	; (80063d4 <_dtoa_r+0x6fc>)
 8006180:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8006184:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800618a:	ec41 0b17 	vmov	d7, r0, r1
 800618e:	b35a      	cbz	r2, 80061e8 <_dtoa_r+0x510>
 8006190:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006194:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006198:	9e04      	ldr	r6, [sp, #16]
 800619a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800619e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80061a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80061a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80061aa:	ee14 2a90 	vmov	r2, s9
 80061ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80061b2:	3230      	adds	r2, #48	; 0x30
 80061b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80061b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c0:	f806 2b01 	strb.w	r2, [r6], #1
 80061c4:	d43b      	bmi.n	800623e <_dtoa_r+0x566>
 80061c6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80061ca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80061ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d2:	d472      	bmi.n	80062ba <_dtoa_r+0x5e2>
 80061d4:	9a04      	ldr	r2, [sp, #16]
 80061d6:	1ab2      	subs	r2, r6, r2
 80061d8:	4295      	cmp	r5, r2
 80061da:	f77f af68 	ble.w	80060ae <_dtoa_r+0x3d6>
 80061de:	ee27 7b03 	vmul.f64	d7, d7, d3
 80061e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80061e6:	e7de      	b.n	80061a6 <_dtoa_r+0x4ce>
 80061e8:	9a04      	ldr	r2, [sp, #16]
 80061ea:	ee24 7b07 	vmul.f64	d7, d4, d7
 80061ee:	1956      	adds	r6, r2, r5
 80061f0:	4611      	mov	r1, r2
 80061f2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80061f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80061fa:	ee14 2a90 	vmov	r2, s9
 80061fe:	3230      	adds	r2, #48	; 0x30
 8006200:	f801 2b01 	strb.w	r2, [r1], #1
 8006204:	42b1      	cmp	r1, r6
 8006206:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800620a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800620e:	d11a      	bne.n	8006246 <_dtoa_r+0x56e>
 8006210:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006214:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006218:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	dc4b      	bgt.n	80062ba <_dtoa_r+0x5e2>
 8006222:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006226:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622e:	f57f af3e 	bpl.w	80060ae <_dtoa_r+0x3d6>
 8006232:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006236:	2a30      	cmp	r2, #48	; 0x30
 8006238:	f106 31ff 	add.w	r1, r6, #4294967295
 800623c:	d001      	beq.n	8006242 <_dtoa_r+0x56a>
 800623e:	469b      	mov	fp, r3
 8006240:	e02a      	b.n	8006298 <_dtoa_r+0x5c0>
 8006242:	460e      	mov	r6, r1
 8006244:	e7f5      	b.n	8006232 <_dtoa_r+0x55a>
 8006246:	ee26 6b03 	vmul.f64	d6, d6, d3
 800624a:	e7d4      	b.n	80061f6 <_dtoa_r+0x51e>
 800624c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006250:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006254:	9e04      	ldr	r6, [sp, #16]
 8006256:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800625a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800625e:	ee15 3a10 	vmov	r3, s10
 8006262:	3330      	adds	r3, #48	; 0x30
 8006264:	f806 3b01 	strb.w	r3, [r6], #1
 8006268:	9b04      	ldr	r3, [sp, #16]
 800626a:	1af3      	subs	r3, r6, r3
 800626c:	4599      	cmp	r9, r3
 800626e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006272:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006276:	d133      	bne.n	80062e0 <_dtoa_r+0x608>
 8006278:	ee37 7b07 	vadd.f64	d7, d7, d7
 800627c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006284:	dc18      	bgt.n	80062b8 <_dtoa_r+0x5e0>
 8006286:	eeb4 7b46 	vcmp.f64	d7, d6
 800628a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628e:	d103      	bne.n	8006298 <_dtoa_r+0x5c0>
 8006290:	ee15 3a10 	vmov	r3, s10
 8006294:	07db      	lsls	r3, r3, #31
 8006296:	d40f      	bmi.n	80062b8 <_dtoa_r+0x5e0>
 8006298:	9901      	ldr	r1, [sp, #4]
 800629a:	4620      	mov	r0, r4
 800629c:	f000 faac 	bl	80067f8 <_Bfree>
 80062a0:	2300      	movs	r3, #0
 80062a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062a4:	7033      	strb	r3, [r6, #0]
 80062a6:	f10b 0301 	add.w	r3, fp, #1
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f43f ad5b 	beq.w	8005d6a <_dtoa_r+0x92>
 80062b4:	601e      	str	r6, [r3, #0]
 80062b6:	e558      	b.n	8005d6a <_dtoa_r+0x92>
 80062b8:	465b      	mov	r3, fp
 80062ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80062be:	2939      	cmp	r1, #57	; 0x39
 80062c0:	f106 32ff 	add.w	r2, r6, #4294967295
 80062c4:	d106      	bne.n	80062d4 <_dtoa_r+0x5fc>
 80062c6:	9904      	ldr	r1, [sp, #16]
 80062c8:	4291      	cmp	r1, r2
 80062ca:	d107      	bne.n	80062dc <_dtoa_r+0x604>
 80062cc:	2230      	movs	r2, #48	; 0x30
 80062ce:	700a      	strb	r2, [r1, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	460a      	mov	r2, r1
 80062d4:	7811      	ldrb	r1, [r2, #0]
 80062d6:	3101      	adds	r1, #1
 80062d8:	7011      	strb	r1, [r2, #0]
 80062da:	e7b0      	b.n	800623e <_dtoa_r+0x566>
 80062dc:	4616      	mov	r6, r2
 80062de:	e7ec      	b.n	80062ba <_dtoa_r+0x5e2>
 80062e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80062e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80062e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ec:	d1b3      	bne.n	8006256 <_dtoa_r+0x57e>
 80062ee:	e7d3      	b.n	8006298 <_dtoa_r+0x5c0>
 80062f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f2:	2a00      	cmp	r2, #0
 80062f4:	f000 808d 	beq.w	8006412 <_dtoa_r+0x73a>
 80062f8:	9a08      	ldr	r2, [sp, #32]
 80062fa:	2a01      	cmp	r2, #1
 80062fc:	dc72      	bgt.n	80063e4 <_dtoa_r+0x70c>
 80062fe:	2f00      	cmp	r7, #0
 8006300:	d06c      	beq.n	80063dc <_dtoa_r+0x704>
 8006302:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006306:	4645      	mov	r5, r8
 8006308:	4656      	mov	r6, sl
 800630a:	9a07      	ldr	r2, [sp, #28]
 800630c:	2101      	movs	r1, #1
 800630e:	441a      	add	r2, r3
 8006310:	4620      	mov	r0, r4
 8006312:	449a      	add	sl, r3
 8006314:	9207      	str	r2, [sp, #28]
 8006316:	f000 fb0f 	bl	8006938 <__i2b>
 800631a:	4607      	mov	r7, r0
 800631c:	2e00      	cmp	r6, #0
 800631e:	dd0b      	ble.n	8006338 <_dtoa_r+0x660>
 8006320:	9b07      	ldr	r3, [sp, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	dd08      	ble.n	8006338 <_dtoa_r+0x660>
 8006326:	42b3      	cmp	r3, r6
 8006328:	9a07      	ldr	r2, [sp, #28]
 800632a:	bfa8      	it	ge
 800632c:	4633      	movge	r3, r6
 800632e:	ebaa 0a03 	sub.w	sl, sl, r3
 8006332:	1af6      	subs	r6, r6, r3
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	9307      	str	r3, [sp, #28]
 8006338:	f1b8 0f00 	cmp.w	r8, #0
 800633c:	d01d      	beq.n	800637a <_dtoa_r+0x6a2>
 800633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d06a      	beq.n	800641a <_dtoa_r+0x742>
 8006344:	b18d      	cbz	r5, 800636a <_dtoa_r+0x692>
 8006346:	4639      	mov	r1, r7
 8006348:	462a      	mov	r2, r5
 800634a:	4620      	mov	r0, r4
 800634c:	f000 fb94 	bl	8006a78 <__pow5mult>
 8006350:	9a01      	ldr	r2, [sp, #4]
 8006352:	4601      	mov	r1, r0
 8006354:	4607      	mov	r7, r0
 8006356:	4620      	mov	r0, r4
 8006358:	f000 faf7 	bl	800694a <__multiply>
 800635c:	9901      	ldr	r1, [sp, #4]
 800635e:	900c      	str	r0, [sp, #48]	; 0x30
 8006360:	4620      	mov	r0, r4
 8006362:	f000 fa49 	bl	80067f8 <_Bfree>
 8006366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	ebb8 0205 	subs.w	r2, r8, r5
 800636e:	d004      	beq.n	800637a <_dtoa_r+0x6a2>
 8006370:	9901      	ldr	r1, [sp, #4]
 8006372:	4620      	mov	r0, r4
 8006374:	f000 fb80 	bl	8006a78 <__pow5mult>
 8006378:	9001      	str	r0, [sp, #4]
 800637a:	2101      	movs	r1, #1
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fadb 	bl	8006938 <__i2b>
 8006382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006384:	4605      	mov	r5, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 81ca 	beq.w	8006720 <_dtoa_r+0xa48>
 800638c:	461a      	mov	r2, r3
 800638e:	4601      	mov	r1, r0
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fb71 	bl	8006a78 <__pow5mult>
 8006396:	9b08      	ldr	r3, [sp, #32]
 8006398:	2b01      	cmp	r3, #1
 800639a:	4605      	mov	r5, r0
 800639c:	dc44      	bgt.n	8006428 <_dtoa_r+0x750>
 800639e:	9b02      	ldr	r3, [sp, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d13c      	bne.n	800641e <_dtoa_r+0x746>
 80063a4:	9b03      	ldr	r3, [sp, #12]
 80063a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d137      	bne.n	800641e <_dtoa_r+0x746>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063b4:	0d1b      	lsrs	r3, r3, #20
 80063b6:	051b      	lsls	r3, r3, #20
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d033      	beq.n	8006424 <_dtoa_r+0x74c>
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	3301      	adds	r3, #1
 80063c0:	f10a 0a01 	add.w	sl, sl, #1
 80063c4:	9307      	str	r3, [sp, #28]
 80063c6:	f04f 0801 	mov.w	r8, #1
 80063ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063cc:	bb73      	cbnz	r3, 800642c <_dtoa_r+0x754>
 80063ce:	2001      	movs	r0, #1
 80063d0:	e034      	b.n	800643c <_dtoa_r+0x764>
 80063d2:	bf00      	nop
 80063d4:	08007610 	.word	0x08007610
 80063d8:	080075e8 	.word	0x080075e8
 80063dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063e2:	e790      	b.n	8006306 <_dtoa_r+0x62e>
 80063e4:	f109 35ff 	add.w	r5, r9, #4294967295
 80063e8:	45a8      	cmp	r8, r5
 80063ea:	bfbf      	itttt	lt
 80063ec:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80063ee:	eba5 0808 	sublt.w	r8, r5, r8
 80063f2:	4443      	addlt	r3, r8
 80063f4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80063f6:	bfb6      	itet	lt
 80063f8:	46a8      	movlt	r8, r5
 80063fa:	eba8 0505 	subge.w	r5, r8, r5
 80063fe:	2500      	movlt	r5, #0
 8006400:	f1b9 0f00 	cmp.w	r9, #0
 8006404:	bfb9      	ittee	lt
 8006406:	ebaa 0609 	sublt.w	r6, sl, r9
 800640a:	2300      	movlt	r3, #0
 800640c:	4656      	movge	r6, sl
 800640e:	464b      	movge	r3, r9
 8006410:	e77b      	b.n	800630a <_dtoa_r+0x632>
 8006412:	4645      	mov	r5, r8
 8006414:	4656      	mov	r6, sl
 8006416:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006418:	e780      	b.n	800631c <_dtoa_r+0x644>
 800641a:	4642      	mov	r2, r8
 800641c:	e7a8      	b.n	8006370 <_dtoa_r+0x698>
 800641e:	f04f 0800 	mov.w	r8, #0
 8006422:	e7d2      	b.n	80063ca <_dtoa_r+0x6f2>
 8006424:	4698      	mov	r8, r3
 8006426:	e7d0      	b.n	80063ca <_dtoa_r+0x6f2>
 8006428:	f04f 0800 	mov.w	r8, #0
 800642c:	692b      	ldr	r3, [r5, #16]
 800642e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006432:	6918      	ldr	r0, [r3, #16]
 8006434:	f000 fa32 	bl	800689c <__hi0bits>
 8006438:	f1c0 0020 	rsb	r0, r0, #32
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	4418      	add	r0, r3
 8006440:	f010 001f 	ands.w	r0, r0, #31
 8006444:	d047      	beq.n	80064d6 <_dtoa_r+0x7fe>
 8006446:	f1c0 0320 	rsb	r3, r0, #32
 800644a:	2b04      	cmp	r3, #4
 800644c:	dd3b      	ble.n	80064c6 <_dtoa_r+0x7ee>
 800644e:	9b07      	ldr	r3, [sp, #28]
 8006450:	f1c0 001c 	rsb	r0, r0, #28
 8006454:	4482      	add	sl, r0
 8006456:	4406      	add	r6, r0
 8006458:	4403      	add	r3, r0
 800645a:	9307      	str	r3, [sp, #28]
 800645c:	f1ba 0f00 	cmp.w	sl, #0
 8006460:	dd05      	ble.n	800646e <_dtoa_r+0x796>
 8006462:	4652      	mov	r2, sl
 8006464:	9901      	ldr	r1, [sp, #4]
 8006466:	4620      	mov	r0, r4
 8006468:	f000 fb54 	bl	8006b14 <__lshift>
 800646c:	9001      	str	r0, [sp, #4]
 800646e:	9b07      	ldr	r3, [sp, #28]
 8006470:	2b00      	cmp	r3, #0
 8006472:	dd05      	ble.n	8006480 <_dtoa_r+0x7a8>
 8006474:	4629      	mov	r1, r5
 8006476:	461a      	mov	r2, r3
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fb4b 	bl	8006b14 <__lshift>
 800647e:	4605      	mov	r5, r0
 8006480:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006482:	b353      	cbz	r3, 80064da <_dtoa_r+0x802>
 8006484:	4629      	mov	r1, r5
 8006486:	9801      	ldr	r0, [sp, #4]
 8006488:	f000 fb98 	bl	8006bbc <__mcmp>
 800648c:	2800      	cmp	r0, #0
 800648e:	da24      	bge.n	80064da <_dtoa_r+0x802>
 8006490:	2300      	movs	r3, #0
 8006492:	220a      	movs	r2, #10
 8006494:	9901      	ldr	r1, [sp, #4]
 8006496:	4620      	mov	r0, r4
 8006498:	f000 f9c5 	bl	8006826 <__multadd>
 800649c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649e:	9001      	str	r0, [sp, #4]
 80064a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8142 	beq.w	800672e <_dtoa_r+0xa56>
 80064aa:	2300      	movs	r3, #0
 80064ac:	4639      	mov	r1, r7
 80064ae:	220a      	movs	r2, #10
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 f9b8 	bl	8006826 <__multadd>
 80064b6:	9b06      	ldr	r3, [sp, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	4607      	mov	r7, r0
 80064bc:	dc4b      	bgt.n	8006556 <_dtoa_r+0x87e>
 80064be:	9b08      	ldr	r3, [sp, #32]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	dd48      	ble.n	8006556 <_dtoa_r+0x87e>
 80064c4:	e011      	b.n	80064ea <_dtoa_r+0x812>
 80064c6:	d0c9      	beq.n	800645c <_dtoa_r+0x784>
 80064c8:	9a07      	ldr	r2, [sp, #28]
 80064ca:	331c      	adds	r3, #28
 80064cc:	441a      	add	r2, r3
 80064ce:	449a      	add	sl, r3
 80064d0:	441e      	add	r6, r3
 80064d2:	4613      	mov	r3, r2
 80064d4:	e7c1      	b.n	800645a <_dtoa_r+0x782>
 80064d6:	4603      	mov	r3, r0
 80064d8:	e7f6      	b.n	80064c8 <_dtoa_r+0x7f0>
 80064da:	f1b9 0f00 	cmp.w	r9, #0
 80064de:	dc34      	bgt.n	800654a <_dtoa_r+0x872>
 80064e0:	9b08      	ldr	r3, [sp, #32]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	dd31      	ble.n	800654a <_dtoa_r+0x872>
 80064e6:	f8cd 9018 	str.w	r9, [sp, #24]
 80064ea:	9b06      	ldr	r3, [sp, #24]
 80064ec:	b963      	cbnz	r3, 8006508 <_dtoa_r+0x830>
 80064ee:	4629      	mov	r1, r5
 80064f0:	2205      	movs	r2, #5
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 f997 	bl	8006826 <__multadd>
 80064f8:	4601      	mov	r1, r0
 80064fa:	4605      	mov	r5, r0
 80064fc:	9801      	ldr	r0, [sp, #4]
 80064fe:	f000 fb5d 	bl	8006bbc <__mcmp>
 8006502:	2800      	cmp	r0, #0
 8006504:	f73f adfc 	bgt.w	8006100 <_dtoa_r+0x428>
 8006508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650a:	9e04      	ldr	r6, [sp, #16]
 800650c:	ea6f 0b03 	mvn.w	fp, r3
 8006510:	f04f 0900 	mov.w	r9, #0
 8006514:	4629      	mov	r1, r5
 8006516:	4620      	mov	r0, r4
 8006518:	f000 f96e 	bl	80067f8 <_Bfree>
 800651c:	2f00      	cmp	r7, #0
 800651e:	f43f aebb 	beq.w	8006298 <_dtoa_r+0x5c0>
 8006522:	f1b9 0f00 	cmp.w	r9, #0
 8006526:	d005      	beq.n	8006534 <_dtoa_r+0x85c>
 8006528:	45b9      	cmp	r9, r7
 800652a:	d003      	beq.n	8006534 <_dtoa_r+0x85c>
 800652c:	4649      	mov	r1, r9
 800652e:	4620      	mov	r0, r4
 8006530:	f000 f962 	bl	80067f8 <_Bfree>
 8006534:	4639      	mov	r1, r7
 8006536:	4620      	mov	r0, r4
 8006538:	f000 f95e 	bl	80067f8 <_Bfree>
 800653c:	e6ac      	b.n	8006298 <_dtoa_r+0x5c0>
 800653e:	2500      	movs	r5, #0
 8006540:	462f      	mov	r7, r5
 8006542:	e7e1      	b.n	8006508 <_dtoa_r+0x830>
 8006544:	469b      	mov	fp, r3
 8006546:	462f      	mov	r7, r5
 8006548:	e5da      	b.n	8006100 <_dtoa_r+0x428>
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	f8cd 9018 	str.w	r9, [sp, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80f3 	beq.w	800673c <_dtoa_r+0xa64>
 8006556:	2e00      	cmp	r6, #0
 8006558:	dd05      	ble.n	8006566 <_dtoa_r+0x88e>
 800655a:	4639      	mov	r1, r7
 800655c:	4632      	mov	r2, r6
 800655e:	4620      	mov	r0, r4
 8006560:	f000 fad8 	bl	8006b14 <__lshift>
 8006564:	4607      	mov	r7, r0
 8006566:	f1b8 0f00 	cmp.w	r8, #0
 800656a:	d04c      	beq.n	8006606 <_dtoa_r+0x92e>
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f90e 	bl	8006790 <_Balloc>
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	3202      	adds	r2, #2
 8006578:	4606      	mov	r6, r0
 800657a:	0092      	lsls	r2, r2, #2
 800657c:	f107 010c 	add.w	r1, r7, #12
 8006580:	300c      	adds	r0, #12
 8006582:	f7fe fdf7 	bl	8005174 <memcpy>
 8006586:	2201      	movs	r2, #1
 8006588:	4631      	mov	r1, r6
 800658a:	4620      	mov	r0, r4
 800658c:	f000 fac2 	bl	8006b14 <__lshift>
 8006590:	9b02      	ldr	r3, [sp, #8]
 8006592:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	46b9      	mov	r9, r7
 800659c:	9307      	str	r3, [sp, #28]
 800659e:	4607      	mov	r7, r0
 80065a0:	4629      	mov	r1, r5
 80065a2:	9801      	ldr	r0, [sp, #4]
 80065a4:	f7ff fb0c 	bl	8005bc0 <quorem>
 80065a8:	4649      	mov	r1, r9
 80065aa:	4606      	mov	r6, r0
 80065ac:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80065b0:	9801      	ldr	r0, [sp, #4]
 80065b2:	f000 fb03 	bl	8006bbc <__mcmp>
 80065b6:	463a      	mov	r2, r7
 80065b8:	9002      	str	r0, [sp, #8]
 80065ba:	4629      	mov	r1, r5
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 fb17 	bl	8006bf0 <__mdiff>
 80065c2:	68c3      	ldr	r3, [r0, #12]
 80065c4:	4602      	mov	r2, r0
 80065c6:	bb03      	cbnz	r3, 800660a <_dtoa_r+0x932>
 80065c8:	4601      	mov	r1, r0
 80065ca:	9009      	str	r0, [sp, #36]	; 0x24
 80065cc:	9801      	ldr	r0, [sp, #4]
 80065ce:	f000 faf5 	bl	8006bbc <__mcmp>
 80065d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d4:	4603      	mov	r3, r0
 80065d6:	4611      	mov	r1, r2
 80065d8:	4620      	mov	r0, r4
 80065da:	9309      	str	r3, [sp, #36]	; 0x24
 80065dc:	f000 f90c 	bl	80067f8 <_Bfree>
 80065e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e2:	b9a3      	cbnz	r3, 800660e <_dtoa_r+0x936>
 80065e4:	9a08      	ldr	r2, [sp, #32]
 80065e6:	b992      	cbnz	r2, 800660e <_dtoa_r+0x936>
 80065e8:	9a07      	ldr	r2, [sp, #28]
 80065ea:	b982      	cbnz	r2, 800660e <_dtoa_r+0x936>
 80065ec:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065f0:	d029      	beq.n	8006646 <_dtoa_r+0x96e>
 80065f2:	9b02      	ldr	r3, [sp, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dd01      	ble.n	80065fc <_dtoa_r+0x924>
 80065f8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80065fc:	f10a 0601 	add.w	r6, sl, #1
 8006600:	f88a 8000 	strb.w	r8, [sl]
 8006604:	e786      	b.n	8006514 <_dtoa_r+0x83c>
 8006606:	4638      	mov	r0, r7
 8006608:	e7c2      	b.n	8006590 <_dtoa_r+0x8b8>
 800660a:	2301      	movs	r3, #1
 800660c:	e7e3      	b.n	80065d6 <_dtoa_r+0x8fe>
 800660e:	9a02      	ldr	r2, [sp, #8]
 8006610:	2a00      	cmp	r2, #0
 8006612:	db04      	blt.n	800661e <_dtoa_r+0x946>
 8006614:	d124      	bne.n	8006660 <_dtoa_r+0x988>
 8006616:	9a08      	ldr	r2, [sp, #32]
 8006618:	bb12      	cbnz	r2, 8006660 <_dtoa_r+0x988>
 800661a:	9a07      	ldr	r2, [sp, #28]
 800661c:	bb02      	cbnz	r2, 8006660 <_dtoa_r+0x988>
 800661e:	2b00      	cmp	r3, #0
 8006620:	ddec      	ble.n	80065fc <_dtoa_r+0x924>
 8006622:	2201      	movs	r2, #1
 8006624:	9901      	ldr	r1, [sp, #4]
 8006626:	4620      	mov	r0, r4
 8006628:	f000 fa74 	bl	8006b14 <__lshift>
 800662c:	4629      	mov	r1, r5
 800662e:	9001      	str	r0, [sp, #4]
 8006630:	f000 fac4 	bl	8006bbc <__mcmp>
 8006634:	2800      	cmp	r0, #0
 8006636:	dc03      	bgt.n	8006640 <_dtoa_r+0x968>
 8006638:	d1e0      	bne.n	80065fc <_dtoa_r+0x924>
 800663a:	f018 0f01 	tst.w	r8, #1
 800663e:	d0dd      	beq.n	80065fc <_dtoa_r+0x924>
 8006640:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006644:	d1d8      	bne.n	80065f8 <_dtoa_r+0x920>
 8006646:	2339      	movs	r3, #57	; 0x39
 8006648:	f10a 0601 	add.w	r6, sl, #1
 800664c:	f88a 3000 	strb.w	r3, [sl]
 8006650:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006654:	2b39      	cmp	r3, #57	; 0x39
 8006656:	f106 32ff 	add.w	r2, r6, #4294967295
 800665a:	d04c      	beq.n	80066f6 <_dtoa_r+0xa1e>
 800665c:	3301      	adds	r3, #1
 800665e:	e051      	b.n	8006704 <_dtoa_r+0xa2c>
 8006660:	2b00      	cmp	r3, #0
 8006662:	f10a 0601 	add.w	r6, sl, #1
 8006666:	dd05      	ble.n	8006674 <_dtoa_r+0x99c>
 8006668:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800666c:	d0eb      	beq.n	8006646 <_dtoa_r+0x96e>
 800666e:	f108 0801 	add.w	r8, r8, #1
 8006672:	e7c5      	b.n	8006600 <_dtoa_r+0x928>
 8006674:	9b04      	ldr	r3, [sp, #16]
 8006676:	9a06      	ldr	r2, [sp, #24]
 8006678:	f806 8c01 	strb.w	r8, [r6, #-1]
 800667c:	1af3      	subs	r3, r6, r3
 800667e:	4293      	cmp	r3, r2
 8006680:	d021      	beq.n	80066c6 <_dtoa_r+0x9ee>
 8006682:	2300      	movs	r3, #0
 8006684:	220a      	movs	r2, #10
 8006686:	9901      	ldr	r1, [sp, #4]
 8006688:	4620      	mov	r0, r4
 800668a:	f000 f8cc 	bl	8006826 <__multadd>
 800668e:	45b9      	cmp	r9, r7
 8006690:	9001      	str	r0, [sp, #4]
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	f04f 020a 	mov.w	r2, #10
 800669a:	4649      	mov	r1, r9
 800669c:	4620      	mov	r0, r4
 800669e:	d105      	bne.n	80066ac <_dtoa_r+0x9d4>
 80066a0:	f000 f8c1 	bl	8006826 <__multadd>
 80066a4:	4681      	mov	r9, r0
 80066a6:	4607      	mov	r7, r0
 80066a8:	46b2      	mov	sl, r6
 80066aa:	e779      	b.n	80065a0 <_dtoa_r+0x8c8>
 80066ac:	f000 f8bb 	bl	8006826 <__multadd>
 80066b0:	4639      	mov	r1, r7
 80066b2:	4681      	mov	r9, r0
 80066b4:	2300      	movs	r3, #0
 80066b6:	220a      	movs	r2, #10
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 f8b4 	bl	8006826 <__multadd>
 80066be:	4607      	mov	r7, r0
 80066c0:	e7f2      	b.n	80066a8 <_dtoa_r+0x9d0>
 80066c2:	f04f 0900 	mov.w	r9, #0
 80066c6:	2201      	movs	r2, #1
 80066c8:	9901      	ldr	r1, [sp, #4]
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fa22 	bl	8006b14 <__lshift>
 80066d0:	4629      	mov	r1, r5
 80066d2:	9001      	str	r0, [sp, #4]
 80066d4:	f000 fa72 	bl	8006bbc <__mcmp>
 80066d8:	2800      	cmp	r0, #0
 80066da:	dcb9      	bgt.n	8006650 <_dtoa_r+0x978>
 80066dc:	d102      	bne.n	80066e4 <_dtoa_r+0xa0c>
 80066de:	f018 0f01 	tst.w	r8, #1
 80066e2:	d1b5      	bne.n	8006650 <_dtoa_r+0x978>
 80066e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066e8:	2b30      	cmp	r3, #48	; 0x30
 80066ea:	f106 32ff 	add.w	r2, r6, #4294967295
 80066ee:	f47f af11 	bne.w	8006514 <_dtoa_r+0x83c>
 80066f2:	4616      	mov	r6, r2
 80066f4:	e7f6      	b.n	80066e4 <_dtoa_r+0xa0c>
 80066f6:	9b04      	ldr	r3, [sp, #16]
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d105      	bne.n	8006708 <_dtoa_r+0xa30>
 80066fc:	9a04      	ldr	r2, [sp, #16]
 80066fe:	f10b 0b01 	add.w	fp, fp, #1
 8006702:	2331      	movs	r3, #49	; 0x31
 8006704:	7013      	strb	r3, [r2, #0]
 8006706:	e705      	b.n	8006514 <_dtoa_r+0x83c>
 8006708:	4616      	mov	r6, r2
 800670a:	e7a1      	b.n	8006650 <_dtoa_r+0x978>
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <_dtoa_r+0xa90>)
 800670e:	f7ff bb48 	b.w	8005da2 <_dtoa_r+0xca>
 8006712:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006714:	2b00      	cmp	r3, #0
 8006716:	f47f ab23 	bne.w	8005d60 <_dtoa_r+0x88>
 800671a:	4b14      	ldr	r3, [pc, #80]	; (800676c <_dtoa_r+0xa94>)
 800671c:	f7ff bb41 	b.w	8005da2 <_dtoa_r+0xca>
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	2b01      	cmp	r3, #1
 8006724:	f77f ae3b 	ble.w	800639e <_dtoa_r+0x6c6>
 8006728:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800672c:	e64f      	b.n	80063ce <_dtoa_r+0x6f6>
 800672e:	9b06      	ldr	r3, [sp, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dc03      	bgt.n	800673c <_dtoa_r+0xa64>
 8006734:	9b08      	ldr	r3, [sp, #32]
 8006736:	2b02      	cmp	r3, #2
 8006738:	f73f aed7 	bgt.w	80064ea <_dtoa_r+0x812>
 800673c:	9e04      	ldr	r6, [sp, #16]
 800673e:	9801      	ldr	r0, [sp, #4]
 8006740:	4629      	mov	r1, r5
 8006742:	f7ff fa3d 	bl	8005bc0 <quorem>
 8006746:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800674a:	f806 8b01 	strb.w	r8, [r6], #1
 800674e:	9b04      	ldr	r3, [sp, #16]
 8006750:	9a06      	ldr	r2, [sp, #24]
 8006752:	1af3      	subs	r3, r6, r3
 8006754:	429a      	cmp	r2, r3
 8006756:	ddb4      	ble.n	80066c2 <_dtoa_r+0x9ea>
 8006758:	2300      	movs	r3, #0
 800675a:	220a      	movs	r2, #10
 800675c:	9901      	ldr	r1, [sp, #4]
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f861 	bl	8006826 <__multadd>
 8006764:	9001      	str	r0, [sp, #4]
 8006766:	e7ea      	b.n	800673e <_dtoa_r+0xa66>
 8006768:	080075b0 	.word	0x080075b0
 800676c:	080075d4 	.word	0x080075d4

08006770 <_localeconv_r>:
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <_localeconv_r+0x14>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a18      	ldr	r0, [r3, #32]
 8006776:	4b04      	ldr	r3, [pc, #16]	; (8006788 <_localeconv_r+0x18>)
 8006778:	2800      	cmp	r0, #0
 800677a:	bf08      	it	eq
 800677c:	4618      	moveq	r0, r3
 800677e:	30f0      	adds	r0, #240	; 0xf0
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000010 	.word	0x20000010
 8006788:	20000074 	.word	0x20000074

0800678c <__malloc_lock>:
 800678c:	4770      	bx	lr

0800678e <__malloc_unlock>:
 800678e:	4770      	bx	lr

08006790 <_Balloc>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006794:	4604      	mov	r4, r0
 8006796:	460e      	mov	r6, r1
 8006798:	b93d      	cbnz	r5, 80067aa <_Balloc+0x1a>
 800679a:	2010      	movs	r0, #16
 800679c:	f7fe fcda 	bl	8005154 <malloc>
 80067a0:	6260      	str	r0, [r4, #36]	; 0x24
 80067a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067a6:	6005      	str	r5, [r0, #0]
 80067a8:	60c5      	str	r5, [r0, #12]
 80067aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80067ac:	68eb      	ldr	r3, [r5, #12]
 80067ae:	b183      	cbz	r3, 80067d2 <_Balloc+0x42>
 80067b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80067b8:	b9b8      	cbnz	r0, 80067ea <_Balloc+0x5a>
 80067ba:	2101      	movs	r1, #1
 80067bc:	fa01 f506 	lsl.w	r5, r1, r6
 80067c0:	1d6a      	adds	r2, r5, #5
 80067c2:	0092      	lsls	r2, r2, #2
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 fabf 	bl	8006d48 <_calloc_r>
 80067ca:	b160      	cbz	r0, 80067e6 <_Balloc+0x56>
 80067cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80067d0:	e00e      	b.n	80067f0 <_Balloc+0x60>
 80067d2:	2221      	movs	r2, #33	; 0x21
 80067d4:	2104      	movs	r1, #4
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 fab6 	bl	8006d48 <_calloc_r>
 80067dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067de:	60e8      	str	r0, [r5, #12]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e4      	bne.n	80067b0 <_Balloc+0x20>
 80067e6:	2000      	movs	r0, #0
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
 80067ea:	6802      	ldr	r2, [r0, #0]
 80067ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80067f0:	2300      	movs	r3, #0
 80067f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067f6:	e7f7      	b.n	80067e8 <_Balloc+0x58>

080067f8 <_Bfree>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80067fc:	4606      	mov	r6, r0
 80067fe:	460d      	mov	r5, r1
 8006800:	b93c      	cbnz	r4, 8006812 <_Bfree+0x1a>
 8006802:	2010      	movs	r0, #16
 8006804:	f7fe fca6 	bl	8005154 <malloc>
 8006808:	6270      	str	r0, [r6, #36]	; 0x24
 800680a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800680e:	6004      	str	r4, [r0, #0]
 8006810:	60c4      	str	r4, [r0, #12]
 8006812:	b13d      	cbz	r5, 8006824 <_Bfree+0x2c>
 8006814:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006816:	686a      	ldr	r2, [r5, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800681e:	6029      	str	r1, [r5, #0]
 8006820:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006824:	bd70      	pop	{r4, r5, r6, pc}

08006826 <__multadd>:
 8006826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682a:	690d      	ldr	r5, [r1, #16]
 800682c:	461f      	mov	r7, r3
 800682e:	4606      	mov	r6, r0
 8006830:	460c      	mov	r4, r1
 8006832:	f101 0c14 	add.w	ip, r1, #20
 8006836:	2300      	movs	r3, #0
 8006838:	f8dc 0000 	ldr.w	r0, [ip]
 800683c:	b281      	uxth	r1, r0
 800683e:	fb02 7101 	mla	r1, r2, r1, r7
 8006842:	0c0f      	lsrs	r7, r1, #16
 8006844:	0c00      	lsrs	r0, r0, #16
 8006846:	fb02 7000 	mla	r0, r2, r0, r7
 800684a:	b289      	uxth	r1, r1
 800684c:	3301      	adds	r3, #1
 800684e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006852:	429d      	cmp	r5, r3
 8006854:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006858:	f84c 1b04 	str.w	r1, [ip], #4
 800685c:	dcec      	bgt.n	8006838 <__multadd+0x12>
 800685e:	b1d7      	cbz	r7, 8006896 <__multadd+0x70>
 8006860:	68a3      	ldr	r3, [r4, #8]
 8006862:	42ab      	cmp	r3, r5
 8006864:	dc12      	bgt.n	800688c <__multadd+0x66>
 8006866:	6861      	ldr	r1, [r4, #4]
 8006868:	4630      	mov	r0, r6
 800686a:	3101      	adds	r1, #1
 800686c:	f7ff ff90 	bl	8006790 <_Balloc>
 8006870:	6922      	ldr	r2, [r4, #16]
 8006872:	3202      	adds	r2, #2
 8006874:	f104 010c 	add.w	r1, r4, #12
 8006878:	4680      	mov	r8, r0
 800687a:	0092      	lsls	r2, r2, #2
 800687c:	300c      	adds	r0, #12
 800687e:	f7fe fc79 	bl	8005174 <memcpy>
 8006882:	4621      	mov	r1, r4
 8006884:	4630      	mov	r0, r6
 8006886:	f7ff ffb7 	bl	80067f8 <_Bfree>
 800688a:	4644      	mov	r4, r8
 800688c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006890:	3501      	adds	r5, #1
 8006892:	615f      	str	r7, [r3, #20]
 8006894:	6125      	str	r5, [r4, #16]
 8006896:	4620      	mov	r0, r4
 8006898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800689c <__hi0bits>:
 800689c:	0c02      	lsrs	r2, r0, #16
 800689e:	0412      	lsls	r2, r2, #16
 80068a0:	4603      	mov	r3, r0
 80068a2:	b9b2      	cbnz	r2, 80068d2 <__hi0bits+0x36>
 80068a4:	0403      	lsls	r3, r0, #16
 80068a6:	2010      	movs	r0, #16
 80068a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80068ac:	bf04      	itt	eq
 80068ae:	021b      	lsleq	r3, r3, #8
 80068b0:	3008      	addeq	r0, #8
 80068b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80068b6:	bf04      	itt	eq
 80068b8:	011b      	lsleq	r3, r3, #4
 80068ba:	3004      	addeq	r0, #4
 80068bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80068c0:	bf04      	itt	eq
 80068c2:	009b      	lsleq	r3, r3, #2
 80068c4:	3002      	addeq	r0, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	db06      	blt.n	80068d8 <__hi0bits+0x3c>
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	d503      	bpl.n	80068d6 <__hi0bits+0x3a>
 80068ce:	3001      	adds	r0, #1
 80068d0:	4770      	bx	lr
 80068d2:	2000      	movs	r0, #0
 80068d4:	e7e8      	b.n	80068a8 <__hi0bits+0xc>
 80068d6:	2020      	movs	r0, #32
 80068d8:	4770      	bx	lr

080068da <__lo0bits>:
 80068da:	6803      	ldr	r3, [r0, #0]
 80068dc:	f013 0207 	ands.w	r2, r3, #7
 80068e0:	4601      	mov	r1, r0
 80068e2:	d00b      	beq.n	80068fc <__lo0bits+0x22>
 80068e4:	07da      	lsls	r2, r3, #31
 80068e6:	d423      	bmi.n	8006930 <__lo0bits+0x56>
 80068e8:	0798      	lsls	r0, r3, #30
 80068ea:	bf49      	itett	mi
 80068ec:	085b      	lsrmi	r3, r3, #1
 80068ee:	089b      	lsrpl	r3, r3, #2
 80068f0:	2001      	movmi	r0, #1
 80068f2:	600b      	strmi	r3, [r1, #0]
 80068f4:	bf5c      	itt	pl
 80068f6:	600b      	strpl	r3, [r1, #0]
 80068f8:	2002      	movpl	r0, #2
 80068fa:	4770      	bx	lr
 80068fc:	b298      	uxth	r0, r3
 80068fe:	b9a8      	cbnz	r0, 800692c <__lo0bits+0x52>
 8006900:	0c1b      	lsrs	r3, r3, #16
 8006902:	2010      	movs	r0, #16
 8006904:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006908:	bf04      	itt	eq
 800690a:	0a1b      	lsreq	r3, r3, #8
 800690c:	3008      	addeq	r0, #8
 800690e:	071a      	lsls	r2, r3, #28
 8006910:	bf04      	itt	eq
 8006912:	091b      	lsreq	r3, r3, #4
 8006914:	3004      	addeq	r0, #4
 8006916:	079a      	lsls	r2, r3, #30
 8006918:	bf04      	itt	eq
 800691a:	089b      	lsreq	r3, r3, #2
 800691c:	3002      	addeq	r0, #2
 800691e:	07da      	lsls	r2, r3, #31
 8006920:	d402      	bmi.n	8006928 <__lo0bits+0x4e>
 8006922:	085b      	lsrs	r3, r3, #1
 8006924:	d006      	beq.n	8006934 <__lo0bits+0x5a>
 8006926:	3001      	adds	r0, #1
 8006928:	600b      	str	r3, [r1, #0]
 800692a:	4770      	bx	lr
 800692c:	4610      	mov	r0, r2
 800692e:	e7e9      	b.n	8006904 <__lo0bits+0x2a>
 8006930:	2000      	movs	r0, #0
 8006932:	4770      	bx	lr
 8006934:	2020      	movs	r0, #32
 8006936:	4770      	bx	lr

08006938 <__i2b>:
 8006938:	b510      	push	{r4, lr}
 800693a:	460c      	mov	r4, r1
 800693c:	2101      	movs	r1, #1
 800693e:	f7ff ff27 	bl	8006790 <_Balloc>
 8006942:	2201      	movs	r2, #1
 8006944:	6144      	str	r4, [r0, #20]
 8006946:	6102      	str	r2, [r0, #16]
 8006948:	bd10      	pop	{r4, pc}

0800694a <__multiply>:
 800694a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694e:	4614      	mov	r4, r2
 8006950:	690a      	ldr	r2, [r1, #16]
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	429a      	cmp	r2, r3
 8006956:	bfb8      	it	lt
 8006958:	460b      	movlt	r3, r1
 800695a:	4688      	mov	r8, r1
 800695c:	bfbc      	itt	lt
 800695e:	46a0      	movlt	r8, r4
 8006960:	461c      	movlt	r4, r3
 8006962:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006966:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800696a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800696e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006972:	eb07 0609 	add.w	r6, r7, r9
 8006976:	42b3      	cmp	r3, r6
 8006978:	bfb8      	it	lt
 800697a:	3101      	addlt	r1, #1
 800697c:	f7ff ff08 	bl	8006790 <_Balloc>
 8006980:	f100 0514 	add.w	r5, r0, #20
 8006984:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006988:	462b      	mov	r3, r5
 800698a:	2200      	movs	r2, #0
 800698c:	4573      	cmp	r3, lr
 800698e:	d316      	bcc.n	80069be <__multiply+0x74>
 8006990:	f104 0214 	add.w	r2, r4, #20
 8006994:	f108 0114 	add.w	r1, r8, #20
 8006998:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800699c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	9b00      	ldr	r3, [sp, #0]
 80069a4:	9201      	str	r2, [sp, #4]
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d80c      	bhi.n	80069c4 <__multiply+0x7a>
 80069aa:	2e00      	cmp	r6, #0
 80069ac:	dd03      	ble.n	80069b6 <__multiply+0x6c>
 80069ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d05d      	beq.n	8006a72 <__multiply+0x128>
 80069b6:	6106      	str	r6, [r0, #16]
 80069b8:	b003      	add	sp, #12
 80069ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069be:	f843 2b04 	str.w	r2, [r3], #4
 80069c2:	e7e3      	b.n	800698c <__multiply+0x42>
 80069c4:	f8b2 b000 	ldrh.w	fp, [r2]
 80069c8:	f1bb 0f00 	cmp.w	fp, #0
 80069cc:	d023      	beq.n	8006a16 <__multiply+0xcc>
 80069ce:	4689      	mov	r9, r1
 80069d0:	46ac      	mov	ip, r5
 80069d2:	f04f 0800 	mov.w	r8, #0
 80069d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80069da:	f8dc a000 	ldr.w	sl, [ip]
 80069de:	b2a3      	uxth	r3, r4
 80069e0:	fa1f fa8a 	uxth.w	sl, sl
 80069e4:	fb0b a303 	mla	r3, fp, r3, sl
 80069e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80069ec:	f8dc 4000 	ldr.w	r4, [ip]
 80069f0:	4443      	add	r3, r8
 80069f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80069f6:	fb0b 840a 	mla	r4, fp, sl, r8
 80069fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80069fe:	46e2      	mov	sl, ip
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a06:	454f      	cmp	r7, r9
 8006a08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a0c:	f84a 3b04 	str.w	r3, [sl], #4
 8006a10:	d82b      	bhi.n	8006a6a <__multiply+0x120>
 8006a12:	f8cc 8004 	str.w	r8, [ip, #4]
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006a1c:	3204      	adds	r2, #4
 8006a1e:	f1ba 0f00 	cmp.w	sl, #0
 8006a22:	d020      	beq.n	8006a66 <__multiply+0x11c>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	4689      	mov	r9, r1
 8006a28:	46a8      	mov	r8, r5
 8006a2a:	f04f 0b00 	mov.w	fp, #0
 8006a2e:	f8b9 c000 	ldrh.w	ip, [r9]
 8006a32:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006a36:	fb0a 440c 	mla	r4, sl, ip, r4
 8006a3a:	445c      	add	r4, fp
 8006a3c:	46c4      	mov	ip, r8
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a44:	f84c 3b04 	str.w	r3, [ip], #4
 8006a48:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a4c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	fb0a b303 	mla	r3, sl, r3, fp
 8006a56:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a5a:	454f      	cmp	r7, r9
 8006a5c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006a60:	d805      	bhi.n	8006a6e <__multiply+0x124>
 8006a62:	f8c8 3004 	str.w	r3, [r8, #4]
 8006a66:	3504      	adds	r5, #4
 8006a68:	e79b      	b.n	80069a2 <__multiply+0x58>
 8006a6a:	46d4      	mov	ip, sl
 8006a6c:	e7b3      	b.n	80069d6 <__multiply+0x8c>
 8006a6e:	46e0      	mov	r8, ip
 8006a70:	e7dd      	b.n	8006a2e <__multiply+0xe4>
 8006a72:	3e01      	subs	r6, #1
 8006a74:	e799      	b.n	80069aa <__multiply+0x60>
	...

08006a78 <__pow5mult>:
 8006a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	4615      	mov	r5, r2
 8006a7e:	f012 0203 	ands.w	r2, r2, #3
 8006a82:	4606      	mov	r6, r0
 8006a84:	460f      	mov	r7, r1
 8006a86:	d007      	beq.n	8006a98 <__pow5mult+0x20>
 8006a88:	3a01      	subs	r2, #1
 8006a8a:	4c21      	ldr	r4, [pc, #132]	; (8006b10 <__pow5mult+0x98>)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a92:	f7ff fec8 	bl	8006826 <__multadd>
 8006a96:	4607      	mov	r7, r0
 8006a98:	10ad      	asrs	r5, r5, #2
 8006a9a:	d035      	beq.n	8006b08 <__pow5mult+0x90>
 8006a9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a9e:	b93c      	cbnz	r4, 8006ab0 <__pow5mult+0x38>
 8006aa0:	2010      	movs	r0, #16
 8006aa2:	f7fe fb57 	bl	8005154 <malloc>
 8006aa6:	6270      	str	r0, [r6, #36]	; 0x24
 8006aa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006aac:	6004      	str	r4, [r0, #0]
 8006aae:	60c4      	str	r4, [r0, #12]
 8006ab0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ab8:	b94c      	cbnz	r4, 8006ace <__pow5mult+0x56>
 8006aba:	f240 2171 	movw	r1, #625	; 0x271
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff ff3a 	bl	8006938 <__i2b>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006aca:	4604      	mov	r4, r0
 8006acc:	6003      	str	r3, [r0, #0]
 8006ace:	f04f 0800 	mov.w	r8, #0
 8006ad2:	07eb      	lsls	r3, r5, #31
 8006ad4:	d50a      	bpl.n	8006aec <__pow5mult+0x74>
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	4622      	mov	r2, r4
 8006ada:	4630      	mov	r0, r6
 8006adc:	f7ff ff35 	bl	800694a <__multiply>
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	4681      	mov	r9, r0
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f7ff fe87 	bl	80067f8 <_Bfree>
 8006aea:	464f      	mov	r7, r9
 8006aec:	106d      	asrs	r5, r5, #1
 8006aee:	d00b      	beq.n	8006b08 <__pow5mult+0x90>
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	b938      	cbnz	r0, 8006b04 <__pow5mult+0x8c>
 8006af4:	4622      	mov	r2, r4
 8006af6:	4621      	mov	r1, r4
 8006af8:	4630      	mov	r0, r6
 8006afa:	f7ff ff26 	bl	800694a <__multiply>
 8006afe:	6020      	str	r0, [r4, #0]
 8006b00:	f8c0 8000 	str.w	r8, [r0]
 8006b04:	4604      	mov	r4, r0
 8006b06:	e7e4      	b.n	8006ad2 <__pow5mult+0x5a>
 8006b08:	4638      	mov	r0, r7
 8006b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0e:	bf00      	nop
 8006b10:	080076d8 	.word	0x080076d8

08006b14 <__lshift>:
 8006b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	460c      	mov	r4, r1
 8006b1a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	6849      	ldr	r1, [r1, #4]
 8006b22:	eb0a 0903 	add.w	r9, sl, r3
 8006b26:	68a3      	ldr	r3, [r4, #8]
 8006b28:	4607      	mov	r7, r0
 8006b2a:	4616      	mov	r6, r2
 8006b2c:	f109 0501 	add.w	r5, r9, #1
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	db32      	blt.n	8006b9a <__lshift+0x86>
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff fe2b 	bl	8006790 <_Balloc>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	f100 0114 	add.w	r1, r0, #20
 8006b42:	461a      	mov	r2, r3
 8006b44:	4553      	cmp	r3, sl
 8006b46:	db2b      	blt.n	8006ba0 <__lshift+0x8c>
 8006b48:	6920      	ldr	r0, [r4, #16]
 8006b4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b4e:	f104 0314 	add.w	r3, r4, #20
 8006b52:	f016 021f 	ands.w	r2, r6, #31
 8006b56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b5e:	d025      	beq.n	8006bac <__lshift+0x98>
 8006b60:	f1c2 0e20 	rsb	lr, r2, #32
 8006b64:	2000      	movs	r0, #0
 8006b66:	681e      	ldr	r6, [r3, #0]
 8006b68:	468a      	mov	sl, r1
 8006b6a:	4096      	lsls	r6, r2
 8006b6c:	4330      	orrs	r0, r6
 8006b6e:	f84a 0b04 	str.w	r0, [sl], #4
 8006b72:	f853 0b04 	ldr.w	r0, [r3], #4
 8006b76:	459c      	cmp	ip, r3
 8006b78:	fa20 f00e 	lsr.w	r0, r0, lr
 8006b7c:	d814      	bhi.n	8006ba8 <__lshift+0x94>
 8006b7e:	6048      	str	r0, [r1, #4]
 8006b80:	b108      	cbz	r0, 8006b86 <__lshift+0x72>
 8006b82:	f109 0502 	add.w	r5, r9, #2
 8006b86:	3d01      	subs	r5, #1
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f8c8 5010 	str.w	r5, [r8, #16]
 8006b8e:	4621      	mov	r1, r4
 8006b90:	f7ff fe32 	bl	80067f8 <_Bfree>
 8006b94:	4640      	mov	r0, r8
 8006b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9a:	3101      	adds	r1, #1
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	e7c7      	b.n	8006b30 <__lshift+0x1c>
 8006ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	e7cd      	b.n	8006b44 <__lshift+0x30>
 8006ba8:	4651      	mov	r1, sl
 8006baa:	e7dc      	b.n	8006b66 <__lshift+0x52>
 8006bac:	3904      	subs	r1, #4
 8006bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bb6:	459c      	cmp	ip, r3
 8006bb8:	d8f9      	bhi.n	8006bae <__lshift+0x9a>
 8006bba:	e7e4      	b.n	8006b86 <__lshift+0x72>

08006bbc <__mcmp>:
 8006bbc:	6903      	ldr	r3, [r0, #16]
 8006bbe:	690a      	ldr	r2, [r1, #16]
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	b530      	push	{r4, r5, lr}
 8006bc4:	d10c      	bne.n	8006be0 <__mcmp+0x24>
 8006bc6:	0092      	lsls	r2, r2, #2
 8006bc8:	3014      	adds	r0, #20
 8006bca:	3114      	adds	r1, #20
 8006bcc:	1884      	adds	r4, r0, r2
 8006bce:	4411      	add	r1, r2
 8006bd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006bd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006bd8:	4295      	cmp	r5, r2
 8006bda:	d003      	beq.n	8006be4 <__mcmp+0x28>
 8006bdc:	d305      	bcc.n	8006bea <__mcmp+0x2e>
 8006bde:	2301      	movs	r3, #1
 8006be0:	4618      	mov	r0, r3
 8006be2:	bd30      	pop	{r4, r5, pc}
 8006be4:	42a0      	cmp	r0, r4
 8006be6:	d3f3      	bcc.n	8006bd0 <__mcmp+0x14>
 8006be8:	e7fa      	b.n	8006be0 <__mcmp+0x24>
 8006bea:	f04f 33ff 	mov.w	r3, #4294967295
 8006bee:	e7f7      	b.n	8006be0 <__mcmp+0x24>

08006bf0 <__mdiff>:
 8006bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	460d      	mov	r5, r1
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	f7ff ffdd 	bl	8006bbc <__mcmp>
 8006c02:	1e06      	subs	r6, r0, #0
 8006c04:	d108      	bne.n	8006c18 <__mdiff+0x28>
 8006c06:	4631      	mov	r1, r6
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f7ff fdc1 	bl	8006790 <_Balloc>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c18:	bfa4      	itt	ge
 8006c1a:	4623      	movge	r3, r4
 8006c1c:	462c      	movge	r4, r5
 8006c1e:	4638      	mov	r0, r7
 8006c20:	6861      	ldr	r1, [r4, #4]
 8006c22:	bfa6      	itte	ge
 8006c24:	461d      	movge	r5, r3
 8006c26:	2600      	movge	r6, #0
 8006c28:	2601      	movlt	r6, #1
 8006c2a:	f7ff fdb1 	bl	8006790 <_Balloc>
 8006c2e:	692b      	ldr	r3, [r5, #16]
 8006c30:	60c6      	str	r6, [r0, #12]
 8006c32:	6926      	ldr	r6, [r4, #16]
 8006c34:	f105 0914 	add.w	r9, r5, #20
 8006c38:	f104 0214 	add.w	r2, r4, #20
 8006c3c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006c40:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006c44:	f100 0514 	add.w	r5, r0, #20
 8006c48:	f04f 0e00 	mov.w	lr, #0
 8006c4c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006c50:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c54:	fa1e f18a 	uxtah	r1, lr, sl
 8006c58:	b2a3      	uxth	r3, r4
 8006c5a:	1ac9      	subs	r1, r1, r3
 8006c5c:	0c23      	lsrs	r3, r4, #16
 8006c5e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006c62:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c66:	b289      	uxth	r1, r1
 8006c68:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006c6c:	45c8      	cmp	r8, r9
 8006c6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c72:	4694      	mov	ip, r2
 8006c74:	f845 3b04 	str.w	r3, [r5], #4
 8006c78:	d8e8      	bhi.n	8006c4c <__mdiff+0x5c>
 8006c7a:	45bc      	cmp	ip, r7
 8006c7c:	d304      	bcc.n	8006c88 <__mdiff+0x98>
 8006c7e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006c82:	b183      	cbz	r3, 8006ca6 <__mdiff+0xb6>
 8006c84:	6106      	str	r6, [r0, #16]
 8006c86:	e7c5      	b.n	8006c14 <__mdiff+0x24>
 8006c88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c8c:	fa1e f381 	uxtah	r3, lr, r1
 8006c90:	141a      	asrs	r2, r3, #16
 8006c92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c9c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006ca0:	f845 3b04 	str.w	r3, [r5], #4
 8006ca4:	e7e9      	b.n	8006c7a <__mdiff+0x8a>
 8006ca6:	3e01      	subs	r6, #1
 8006ca8:	e7e9      	b.n	8006c7e <__mdiff+0x8e>

08006caa <__d2b>:
 8006caa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cae:	460e      	mov	r6, r1
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	ec59 8b10 	vmov	r8, r9, d0
 8006cb6:	4615      	mov	r5, r2
 8006cb8:	f7ff fd6a 	bl	8006790 <_Balloc>
 8006cbc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cc6:	bb34      	cbnz	r4, 8006d16 <__d2b+0x6c>
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	f1b8 0300 	subs.w	r3, r8, #0
 8006cce:	d027      	beq.n	8006d20 <__d2b+0x76>
 8006cd0:	a802      	add	r0, sp, #8
 8006cd2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006cd6:	f7ff fe00 	bl	80068da <__lo0bits>
 8006cda:	9900      	ldr	r1, [sp, #0]
 8006cdc:	b1f0      	cbz	r0, 8006d1c <__d2b+0x72>
 8006cde:	9a01      	ldr	r2, [sp, #4]
 8006ce0:	f1c0 0320 	rsb	r3, r0, #32
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	40c2      	lsrs	r2, r0
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	9201      	str	r2, [sp, #4]
 8006cf0:	9b01      	ldr	r3, [sp, #4]
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bf14      	ite	ne
 8006cf8:	2102      	movne	r1, #2
 8006cfa:	2101      	moveq	r1, #1
 8006cfc:	6139      	str	r1, [r7, #16]
 8006cfe:	b1c4      	cbz	r4, 8006d32 <__d2b+0x88>
 8006d00:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d04:	4404      	add	r4, r0
 8006d06:	6034      	str	r4, [r6, #0]
 8006d08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d0c:	6028      	str	r0, [r5, #0]
 8006d0e:	4638      	mov	r0, r7
 8006d10:	b003      	add	sp, #12
 8006d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d1a:	e7d5      	b.n	8006cc8 <__d2b+0x1e>
 8006d1c:	6179      	str	r1, [r7, #20]
 8006d1e:	e7e7      	b.n	8006cf0 <__d2b+0x46>
 8006d20:	a801      	add	r0, sp, #4
 8006d22:	f7ff fdda 	bl	80068da <__lo0bits>
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	6139      	str	r1, [r7, #16]
 8006d2e:	3020      	adds	r0, #32
 8006d30:	e7e5      	b.n	8006cfe <__d2b+0x54>
 8006d32:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006d36:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d3a:	6030      	str	r0, [r6, #0]
 8006d3c:	6918      	ldr	r0, [r3, #16]
 8006d3e:	f7ff fdad 	bl	800689c <__hi0bits>
 8006d42:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d46:	e7e1      	b.n	8006d0c <__d2b+0x62>

08006d48 <_calloc_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	fb02 f401 	mul.w	r4, r2, r1
 8006d4e:	4621      	mov	r1, r4
 8006d50:	f7fe fa72 	bl	8005238 <_malloc_r>
 8006d54:	4605      	mov	r5, r0
 8006d56:	b118      	cbz	r0, 8006d60 <_calloc_r+0x18>
 8006d58:	4622      	mov	r2, r4
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	f7fe fa15 	bl	800518a <memset>
 8006d60:	4628      	mov	r0, r5
 8006d62:	bd38      	pop	{r3, r4, r5, pc}

08006d64 <__ssputs_r>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	688e      	ldr	r6, [r1, #8]
 8006d6a:	429e      	cmp	r6, r3
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	4690      	mov	r8, r2
 8006d72:	4699      	mov	r9, r3
 8006d74:	d837      	bhi.n	8006de6 <__ssputs_r+0x82>
 8006d76:	898a      	ldrh	r2, [r1, #12]
 8006d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d7c:	d031      	beq.n	8006de2 <__ssputs_r+0x7e>
 8006d7e:	6825      	ldr	r5, [r4, #0]
 8006d80:	6909      	ldr	r1, [r1, #16]
 8006d82:	1a6f      	subs	r7, r5, r1
 8006d84:	6965      	ldr	r5, [r4, #20]
 8006d86:	2302      	movs	r3, #2
 8006d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006d90:	f109 0301 	add.w	r3, r9, #1
 8006d94:	443b      	add	r3, r7
 8006d96:	429d      	cmp	r5, r3
 8006d98:	bf38      	it	cc
 8006d9a:	461d      	movcc	r5, r3
 8006d9c:	0553      	lsls	r3, r2, #21
 8006d9e:	d530      	bpl.n	8006e02 <__ssputs_r+0x9e>
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7fe fa49 	bl	8005238 <_malloc_r>
 8006da6:	4606      	mov	r6, r0
 8006da8:	b950      	cbnz	r0, 8006dc0 <__ssputs_r+0x5c>
 8006daa:	230c      	movs	r3, #12
 8006dac:	f8ca 3000 	str.w	r3, [sl]
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc0:	463a      	mov	r2, r7
 8006dc2:	6921      	ldr	r1, [r4, #16]
 8006dc4:	f7fe f9d6 	bl	8005174 <memcpy>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	6126      	str	r6, [r4, #16]
 8006dd6:	6165      	str	r5, [r4, #20]
 8006dd8:	443e      	add	r6, r7
 8006dda:	1bed      	subs	r5, r5, r7
 8006ddc:	6026      	str	r6, [r4, #0]
 8006dde:	60a5      	str	r5, [r4, #8]
 8006de0:	464e      	mov	r6, r9
 8006de2:	454e      	cmp	r6, r9
 8006de4:	d900      	bls.n	8006de8 <__ssputs_r+0x84>
 8006de6:	464e      	mov	r6, r9
 8006de8:	4632      	mov	r2, r6
 8006dea:	4641      	mov	r1, r8
 8006dec:	6820      	ldr	r0, [r4, #0]
 8006dee:	f000 f91d 	bl	800702c <memmove>
 8006df2:	68a3      	ldr	r3, [r4, #8]
 8006df4:	1b9b      	subs	r3, r3, r6
 8006df6:	60a3      	str	r3, [r4, #8]
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	441e      	add	r6, r3
 8006dfc:	6026      	str	r6, [r4, #0]
 8006dfe:	2000      	movs	r0, #0
 8006e00:	e7dc      	b.n	8006dbc <__ssputs_r+0x58>
 8006e02:	462a      	mov	r2, r5
 8006e04:	f000 f92b 	bl	800705e <_realloc_r>
 8006e08:	4606      	mov	r6, r0
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d1e2      	bne.n	8006dd4 <__ssputs_r+0x70>
 8006e0e:	6921      	ldr	r1, [r4, #16]
 8006e10:	4650      	mov	r0, sl
 8006e12:	f7fe f9c3 	bl	800519c <_free_r>
 8006e16:	e7c8      	b.n	8006daa <__ssputs_r+0x46>

08006e18 <_svfiprintf_r>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	461d      	mov	r5, r3
 8006e1e:	898b      	ldrh	r3, [r1, #12]
 8006e20:	061f      	lsls	r7, r3, #24
 8006e22:	b09d      	sub	sp, #116	; 0x74
 8006e24:	4680      	mov	r8, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	4616      	mov	r6, r2
 8006e2a:	d50f      	bpl.n	8006e4c <_svfiprintf_r+0x34>
 8006e2c:	690b      	ldr	r3, [r1, #16]
 8006e2e:	b96b      	cbnz	r3, 8006e4c <_svfiprintf_r+0x34>
 8006e30:	2140      	movs	r1, #64	; 0x40
 8006e32:	f7fe fa01 	bl	8005238 <_malloc_r>
 8006e36:	6020      	str	r0, [r4, #0]
 8006e38:	6120      	str	r0, [r4, #16]
 8006e3a:	b928      	cbnz	r0, 8006e48 <_svfiprintf_r+0x30>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	f8c8 3000 	str.w	r3, [r8]
 8006e42:	f04f 30ff 	mov.w	r0, #4294967295
 8006e46:	e0c8      	b.n	8006fda <_svfiprintf_r+0x1c2>
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	6163      	str	r3, [r4, #20]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e50:	2320      	movs	r3, #32
 8006e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e56:	2330      	movs	r3, #48	; 0x30
 8006e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e5c:	9503      	str	r5, [sp, #12]
 8006e5e:	f04f 0b01 	mov.w	fp, #1
 8006e62:	4637      	mov	r7, r6
 8006e64:	463d      	mov	r5, r7
 8006e66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e6a:	b10b      	cbz	r3, 8006e70 <_svfiprintf_r+0x58>
 8006e6c:	2b25      	cmp	r3, #37	; 0x25
 8006e6e:	d13e      	bne.n	8006eee <_svfiprintf_r+0xd6>
 8006e70:	ebb7 0a06 	subs.w	sl, r7, r6
 8006e74:	d00b      	beq.n	8006e8e <_svfiprintf_r+0x76>
 8006e76:	4653      	mov	r3, sl
 8006e78:	4632      	mov	r2, r6
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	f7ff ff71 	bl	8006d64 <__ssputs_r>
 8006e82:	3001      	adds	r0, #1
 8006e84:	f000 80a4 	beq.w	8006fd0 <_svfiprintf_r+0x1b8>
 8006e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8a:	4453      	add	r3, sl
 8006e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8e:	783b      	ldrb	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 809d 	beq.w	8006fd0 <_svfiprintf_r+0x1b8>
 8006e96:	2300      	movs	r3, #0
 8006e98:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	9307      	str	r3, [sp, #28]
 8006ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8006eaa:	462f      	mov	r7, r5
 8006eac:	2205      	movs	r2, #5
 8006eae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006eb2:	4850      	ldr	r0, [pc, #320]	; (8006ff4 <_svfiprintf_r+0x1dc>)
 8006eb4:	f7f9 fa1c 	bl	80002f0 <memchr>
 8006eb8:	9b04      	ldr	r3, [sp, #16]
 8006eba:	b9d0      	cbnz	r0, 8006ef2 <_svfiprintf_r+0xda>
 8006ebc:	06d9      	lsls	r1, r3, #27
 8006ebe:	bf44      	itt	mi
 8006ec0:	2220      	movmi	r2, #32
 8006ec2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ec6:	071a      	lsls	r2, r3, #28
 8006ec8:	bf44      	itt	mi
 8006eca:	222b      	movmi	r2, #43	; 0x2b
 8006ecc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ed0:	782a      	ldrb	r2, [r5, #0]
 8006ed2:	2a2a      	cmp	r2, #42	; 0x2a
 8006ed4:	d015      	beq.n	8006f02 <_svfiprintf_r+0xea>
 8006ed6:	9a07      	ldr	r2, [sp, #28]
 8006ed8:	462f      	mov	r7, r5
 8006eda:	2000      	movs	r0, #0
 8006edc:	250a      	movs	r5, #10
 8006ede:	4639      	mov	r1, r7
 8006ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ee4:	3b30      	subs	r3, #48	; 0x30
 8006ee6:	2b09      	cmp	r3, #9
 8006ee8:	d94d      	bls.n	8006f86 <_svfiprintf_r+0x16e>
 8006eea:	b1b8      	cbz	r0, 8006f1c <_svfiprintf_r+0x104>
 8006eec:	e00f      	b.n	8006f0e <_svfiprintf_r+0xf6>
 8006eee:	462f      	mov	r7, r5
 8006ef0:	e7b8      	b.n	8006e64 <_svfiprintf_r+0x4c>
 8006ef2:	4a40      	ldr	r2, [pc, #256]	; (8006ff4 <_svfiprintf_r+0x1dc>)
 8006ef4:	1a80      	subs	r0, r0, r2
 8006ef6:	fa0b f000 	lsl.w	r0, fp, r0
 8006efa:	4318      	orrs	r0, r3
 8006efc:	9004      	str	r0, [sp, #16]
 8006efe:	463d      	mov	r5, r7
 8006f00:	e7d3      	b.n	8006eaa <_svfiprintf_r+0x92>
 8006f02:	9a03      	ldr	r2, [sp, #12]
 8006f04:	1d11      	adds	r1, r2, #4
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	9103      	str	r1, [sp, #12]
 8006f0a:	2a00      	cmp	r2, #0
 8006f0c:	db01      	blt.n	8006f12 <_svfiprintf_r+0xfa>
 8006f0e:	9207      	str	r2, [sp, #28]
 8006f10:	e004      	b.n	8006f1c <_svfiprintf_r+0x104>
 8006f12:	4252      	negs	r2, r2
 8006f14:	f043 0302 	orr.w	r3, r3, #2
 8006f18:	9207      	str	r2, [sp, #28]
 8006f1a:	9304      	str	r3, [sp, #16]
 8006f1c:	783b      	ldrb	r3, [r7, #0]
 8006f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f20:	d10c      	bne.n	8006f3c <_svfiprintf_r+0x124>
 8006f22:	787b      	ldrb	r3, [r7, #1]
 8006f24:	2b2a      	cmp	r3, #42	; 0x2a
 8006f26:	d133      	bne.n	8006f90 <_svfiprintf_r+0x178>
 8006f28:	9b03      	ldr	r3, [sp, #12]
 8006f2a:	1d1a      	adds	r2, r3, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	9203      	str	r2, [sp, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bfb8      	it	lt
 8006f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f38:	3702      	adds	r7, #2
 8006f3a:	9305      	str	r3, [sp, #20]
 8006f3c:	4d2e      	ldr	r5, [pc, #184]	; (8006ff8 <_svfiprintf_r+0x1e0>)
 8006f3e:	7839      	ldrb	r1, [r7, #0]
 8006f40:	2203      	movs	r2, #3
 8006f42:	4628      	mov	r0, r5
 8006f44:	f7f9 f9d4 	bl	80002f0 <memchr>
 8006f48:	b138      	cbz	r0, 8006f5a <_svfiprintf_r+0x142>
 8006f4a:	2340      	movs	r3, #64	; 0x40
 8006f4c:	1b40      	subs	r0, r0, r5
 8006f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8006f52:	9b04      	ldr	r3, [sp, #16]
 8006f54:	4303      	orrs	r3, r0
 8006f56:	3701      	adds	r7, #1
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	7839      	ldrb	r1, [r7, #0]
 8006f5c:	4827      	ldr	r0, [pc, #156]	; (8006ffc <_svfiprintf_r+0x1e4>)
 8006f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f62:	2206      	movs	r2, #6
 8006f64:	1c7e      	adds	r6, r7, #1
 8006f66:	f7f9 f9c3 	bl	80002f0 <memchr>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d038      	beq.n	8006fe0 <_svfiprintf_r+0x1c8>
 8006f6e:	4b24      	ldr	r3, [pc, #144]	; (8007000 <_svfiprintf_r+0x1e8>)
 8006f70:	bb13      	cbnz	r3, 8006fb8 <_svfiprintf_r+0x1a0>
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	3307      	adds	r3, #7
 8006f76:	f023 0307 	bic.w	r3, r3, #7
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	9303      	str	r3, [sp, #12]
 8006f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f80:	444b      	add	r3, r9
 8006f82:	9309      	str	r3, [sp, #36]	; 0x24
 8006f84:	e76d      	b.n	8006e62 <_svfiprintf_r+0x4a>
 8006f86:	fb05 3202 	mla	r2, r5, r2, r3
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	e7a6      	b.n	8006ede <_svfiprintf_r+0xc6>
 8006f90:	2300      	movs	r3, #0
 8006f92:	3701      	adds	r7, #1
 8006f94:	9305      	str	r3, [sp, #20]
 8006f96:	4619      	mov	r1, r3
 8006f98:	250a      	movs	r5, #10
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fa0:	3a30      	subs	r2, #48	; 0x30
 8006fa2:	2a09      	cmp	r2, #9
 8006fa4:	d903      	bls.n	8006fae <_svfiprintf_r+0x196>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0c8      	beq.n	8006f3c <_svfiprintf_r+0x124>
 8006faa:	9105      	str	r1, [sp, #20]
 8006fac:	e7c6      	b.n	8006f3c <_svfiprintf_r+0x124>
 8006fae:	fb05 2101 	mla	r1, r5, r1, r2
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	e7f0      	b.n	8006f9a <_svfiprintf_r+0x182>
 8006fb8:	ab03      	add	r3, sp, #12
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4622      	mov	r2, r4
 8006fbe:	4b11      	ldr	r3, [pc, #68]	; (8007004 <_svfiprintf_r+0x1ec>)
 8006fc0:	a904      	add	r1, sp, #16
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	f7fe fa18 	bl	80053f8 <_printf_float>
 8006fc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006fcc:	4681      	mov	r9, r0
 8006fce:	d1d6      	bne.n	8006f7e <_svfiprintf_r+0x166>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	065b      	lsls	r3, r3, #25
 8006fd4:	f53f af35 	bmi.w	8006e42 <_svfiprintf_r+0x2a>
 8006fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fda:	b01d      	add	sp, #116	; 0x74
 8006fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe0:	ab03      	add	r3, sp, #12
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	4b07      	ldr	r3, [pc, #28]	; (8007004 <_svfiprintf_r+0x1ec>)
 8006fe8:	a904      	add	r1, sp, #16
 8006fea:	4640      	mov	r0, r8
 8006fec:	f7fe fca6 	bl	800593c <_printf_i>
 8006ff0:	e7ea      	b.n	8006fc8 <_svfiprintf_r+0x1b0>
 8006ff2:	bf00      	nop
 8006ff4:	080076e4 	.word	0x080076e4
 8006ff8:	080076ea 	.word	0x080076ea
 8006ffc:	080076ee 	.word	0x080076ee
 8007000:	080053f9 	.word	0x080053f9
 8007004:	08006d65 	.word	0x08006d65

08007008 <__ascii_mbtowc>:
 8007008:	b082      	sub	sp, #8
 800700a:	b901      	cbnz	r1, 800700e <__ascii_mbtowc+0x6>
 800700c:	a901      	add	r1, sp, #4
 800700e:	b142      	cbz	r2, 8007022 <__ascii_mbtowc+0x1a>
 8007010:	b14b      	cbz	r3, 8007026 <__ascii_mbtowc+0x1e>
 8007012:	7813      	ldrb	r3, [r2, #0]
 8007014:	600b      	str	r3, [r1, #0]
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	1c10      	adds	r0, r2, #0
 800701a:	bf18      	it	ne
 800701c:	2001      	movne	r0, #1
 800701e:	b002      	add	sp, #8
 8007020:	4770      	bx	lr
 8007022:	4610      	mov	r0, r2
 8007024:	e7fb      	b.n	800701e <__ascii_mbtowc+0x16>
 8007026:	f06f 0001 	mvn.w	r0, #1
 800702a:	e7f8      	b.n	800701e <__ascii_mbtowc+0x16>

0800702c <memmove>:
 800702c:	4288      	cmp	r0, r1
 800702e:	b510      	push	{r4, lr}
 8007030:	eb01 0302 	add.w	r3, r1, r2
 8007034:	d807      	bhi.n	8007046 <memmove+0x1a>
 8007036:	1e42      	subs	r2, r0, #1
 8007038:	4299      	cmp	r1, r3
 800703a:	d00a      	beq.n	8007052 <memmove+0x26>
 800703c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007040:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007044:	e7f8      	b.n	8007038 <memmove+0xc>
 8007046:	4283      	cmp	r3, r0
 8007048:	d9f5      	bls.n	8007036 <memmove+0xa>
 800704a:	1881      	adds	r1, r0, r2
 800704c:	1ad2      	subs	r2, r2, r3
 800704e:	42d3      	cmn	r3, r2
 8007050:	d100      	bne.n	8007054 <memmove+0x28>
 8007052:	bd10      	pop	{r4, pc}
 8007054:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007058:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800705c:	e7f7      	b.n	800704e <memmove+0x22>

0800705e <_realloc_r>:
 800705e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007060:	4607      	mov	r7, r0
 8007062:	4614      	mov	r4, r2
 8007064:	460e      	mov	r6, r1
 8007066:	b921      	cbnz	r1, 8007072 <_realloc_r+0x14>
 8007068:	4611      	mov	r1, r2
 800706a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800706e:	f7fe b8e3 	b.w	8005238 <_malloc_r>
 8007072:	b922      	cbnz	r2, 800707e <_realloc_r+0x20>
 8007074:	f7fe f892 	bl	800519c <_free_r>
 8007078:	4625      	mov	r5, r4
 800707a:	4628      	mov	r0, r5
 800707c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800707e:	f000 f821 	bl	80070c4 <_malloc_usable_size_r>
 8007082:	42a0      	cmp	r0, r4
 8007084:	d20f      	bcs.n	80070a6 <_realloc_r+0x48>
 8007086:	4621      	mov	r1, r4
 8007088:	4638      	mov	r0, r7
 800708a:	f7fe f8d5 	bl	8005238 <_malloc_r>
 800708e:	4605      	mov	r5, r0
 8007090:	2800      	cmp	r0, #0
 8007092:	d0f2      	beq.n	800707a <_realloc_r+0x1c>
 8007094:	4631      	mov	r1, r6
 8007096:	4622      	mov	r2, r4
 8007098:	f7fe f86c 	bl	8005174 <memcpy>
 800709c:	4631      	mov	r1, r6
 800709e:	4638      	mov	r0, r7
 80070a0:	f7fe f87c 	bl	800519c <_free_r>
 80070a4:	e7e9      	b.n	800707a <_realloc_r+0x1c>
 80070a6:	4635      	mov	r5, r6
 80070a8:	e7e7      	b.n	800707a <_realloc_r+0x1c>

080070aa <__ascii_wctomb>:
 80070aa:	b149      	cbz	r1, 80070c0 <__ascii_wctomb+0x16>
 80070ac:	2aff      	cmp	r2, #255	; 0xff
 80070ae:	bf85      	ittet	hi
 80070b0:	238a      	movhi	r3, #138	; 0x8a
 80070b2:	6003      	strhi	r3, [r0, #0]
 80070b4:	700a      	strbls	r2, [r1, #0]
 80070b6:	f04f 30ff 	movhi.w	r0, #4294967295
 80070ba:	bf98      	it	ls
 80070bc:	2001      	movls	r0, #1
 80070be:	4770      	bx	lr
 80070c0:	4608      	mov	r0, r1
 80070c2:	4770      	bx	lr

080070c4 <_malloc_usable_size_r>:
 80070c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c8:	1f18      	subs	r0, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	bfbc      	itt	lt
 80070ce:	580b      	ldrlt	r3, [r1, r0]
 80070d0:	18c0      	addlt	r0, r0, r3
 80070d2:	4770      	bx	lr

080070d4 <atan2>:
 80070d4:	f000 b800 	b.w	80070d8 <__ieee754_atan2>

080070d8 <__ieee754_atan2>:
 80070d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070da:	ee11 6a10 	vmov	r6, s2
 80070de:	ee11 0a90 	vmov	r0, s3
 80070e2:	4273      	negs	r3, r6
 80070e4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80070e8:	4333      	orrs	r3, r6
 80070ea:	4f6b      	ldr	r7, [pc, #428]	; (8007298 <__ieee754_atan2+0x1c0>)
 80070ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80070f0:	42bb      	cmp	r3, r7
 80070f2:	ed8d 0b00 	vstr	d0, [sp]
 80070f6:	d80b      	bhi.n	8007110 <__ieee754_atan2+0x38>
 80070f8:	e9dd c500 	ldrd	ip, r5, [sp]
 80070fc:	f1cc 0100 	rsb	r1, ip, #0
 8007100:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007104:	ea41 010c 	orr.w	r1, r1, ip
 8007108:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800710c:	42b9      	cmp	r1, r7
 800710e:	d906      	bls.n	800711e <__ieee754_atan2+0x46>
 8007110:	ed9d 7b00 	vldr	d7, [sp]
 8007114:	ee37 7b01 	vadd.f64	d7, d7, d1
 8007118:	ed8d 7b00 	vstr	d7, [sp]
 800711c:	e063      	b.n	80071e6 <__ieee754_atan2+0x10e>
 800711e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8007122:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8007126:	4331      	orrs	r1, r6
 8007128:	d104      	bne.n	8007134 <__ieee754_atan2+0x5c>
 800712a:	b003      	add	sp, #12
 800712c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007130:	f000 b8b6 	b.w	80072a0 <atan>
 8007134:	1784      	asrs	r4, r0, #30
 8007136:	f004 0402 	and.w	r4, r4, #2
 800713a:	ea53 010c 	orrs.w	r1, r3, ip
 800713e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8007142:	d109      	bne.n	8007158 <__ieee754_atan2+0x80>
 8007144:	2c02      	cmp	r4, #2
 8007146:	d078      	beq.n	800723a <__ieee754_atan2+0x162>
 8007148:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 8007240 <__ieee754_atan2+0x168>
 800714c:	ed9d 6b00 	vldr	d6, [sp]
 8007150:	2c03      	cmp	r4, #3
 8007152:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8007156:	e7df      	b.n	8007118 <__ieee754_atan2+0x40>
 8007158:	ea52 0106 	orrs.w	r1, r2, r6
 800715c:	d107      	bne.n	800716e <__ieee754_atan2+0x96>
 800715e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8007248 <__ieee754_atan2+0x170>
 8007162:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8007250 <__ieee754_atan2+0x178>
 8007166:	2d00      	cmp	r5, #0
 8007168:	fe26 7b07 	vselge.f64	d7, d6, d7
 800716c:	e7d4      	b.n	8007118 <__ieee754_atan2+0x40>
 800716e:	42ba      	cmp	r2, r7
 8007170:	d120      	bne.n	80071b4 <__ieee754_atan2+0xdc>
 8007172:	4293      	cmp	r3, r2
 8007174:	d111      	bne.n	800719a <__ieee754_atan2+0xc2>
 8007176:	2c02      	cmp	r4, #2
 8007178:	d009      	beq.n	800718e <__ieee754_atan2+0xb6>
 800717a:	2c03      	cmp	r4, #3
 800717c:	d00a      	beq.n	8007194 <__ieee754_atan2+0xbc>
 800717e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8007258 <__ieee754_atan2+0x180>
 8007182:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8007260 <__ieee754_atan2+0x188>
 8007186:	2c01      	cmp	r4, #1
 8007188:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800718c:	e7c4      	b.n	8007118 <__ieee754_atan2+0x40>
 800718e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8007268 <__ieee754_atan2+0x190>
 8007192:	e7c1      	b.n	8007118 <__ieee754_atan2+0x40>
 8007194:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8007270 <__ieee754_atan2+0x198>
 8007198:	e7be      	b.n	8007118 <__ieee754_atan2+0x40>
 800719a:	2c02      	cmp	r4, #2
 800719c:	d04d      	beq.n	800723a <__ieee754_atan2+0x162>
 800719e:	2c03      	cmp	r4, #3
 80071a0:	d005      	beq.n	80071ae <__ieee754_atan2+0xd6>
 80071a2:	2c01      	cmp	r4, #1
 80071a4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8007278 <__ieee754_atan2+0x1a0>
 80071a8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8007280 <__ieee754_atan2+0x1a8>
 80071ac:	e7ec      	b.n	8007188 <__ieee754_atan2+0xb0>
 80071ae:	ed9f 7b24 	vldr	d7, [pc, #144]	; 8007240 <__ieee754_atan2+0x168>
 80071b2:	e7b1      	b.n	8007118 <__ieee754_atan2+0x40>
 80071b4:	42bb      	cmp	r3, r7
 80071b6:	d0d2      	beq.n	800715e <__ieee754_atan2+0x86>
 80071b8:	1a9b      	subs	r3, r3, r2
 80071ba:	151b      	asrs	r3, r3, #20
 80071bc:	2b3c      	cmp	r3, #60	; 0x3c
 80071be:	dc16      	bgt.n	80071ee <__ieee754_atan2+0x116>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	da01      	bge.n	80071c8 <__ieee754_atan2+0xf0>
 80071c4:	333c      	adds	r3, #60	; 0x3c
 80071c6:	db17      	blt.n	80071f8 <__ieee754_atan2+0x120>
 80071c8:	ed9d 7b00 	vldr	d7, [sp]
 80071cc:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80071d0:	f000 f960 	bl	8007494 <fabs>
 80071d4:	f000 f864 	bl	80072a0 <atan>
 80071d8:	ed8d 0b00 	vstr	d0, [sp]
 80071dc:	2c01      	cmp	r4, #1
 80071de:	d00e      	beq.n	80071fe <__ieee754_atan2+0x126>
 80071e0:	2c02      	cmp	r4, #2
 80071e2:	d014      	beq.n	800720e <__ieee754_atan2+0x136>
 80071e4:	b9f4      	cbnz	r4, 8007224 <__ieee754_atan2+0x14c>
 80071e6:	ed9d 0b00 	vldr	d0, [sp]
 80071ea:	b003      	add	sp, #12
 80071ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ee:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007248 <__ieee754_atan2+0x170>
 80071f2:	ed8d 7b00 	vstr	d7, [sp]
 80071f6:	e7f1      	b.n	80071dc <__ieee754_atan2+0x104>
 80071f8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007280 <__ieee754_atan2+0x1a8>
 80071fc:	e7f9      	b.n	80071f2 <__ieee754_atan2+0x11a>
 80071fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007202:	9901      	ldr	r1, [sp, #4]
 8007204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007208:	e9cd 2300 	strd	r2, r3, [sp]
 800720c:	e7eb      	b.n	80071e6 <__ieee754_atan2+0x10e>
 800720e:	ed9d 6b00 	vldr	d6, [sp]
 8007212:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8007288 <__ieee754_atan2+0x1b0>
 8007216:	ee36 7b47 	vsub.f64	d7, d6, d7
 800721a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8007290 <__ieee754_atan2+0x1b8>
 800721e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007222:	e779      	b.n	8007118 <__ieee754_atan2+0x40>
 8007224:	ed9d 6b00 	vldr	d6, [sp]
 8007228:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8007288 <__ieee754_atan2+0x1b0>
 800722c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007230:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8007290 <__ieee754_atan2+0x1b8>
 8007234:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007238:	e76e      	b.n	8007118 <__ieee754_atan2+0x40>
 800723a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8007290 <__ieee754_atan2+0x1b8>
 800723e:	e76b      	b.n	8007118 <__ieee754_atan2+0x40>
 8007240:	54442d18 	.word	0x54442d18
 8007244:	c00921fb 	.word	0xc00921fb
 8007248:	54442d18 	.word	0x54442d18
 800724c:	3ff921fb 	.word	0x3ff921fb
 8007250:	54442d18 	.word	0x54442d18
 8007254:	bff921fb 	.word	0xbff921fb
 8007258:	54442d18 	.word	0x54442d18
 800725c:	bfe921fb 	.word	0xbfe921fb
 8007260:	54442d18 	.word	0x54442d18
 8007264:	3fe921fb 	.word	0x3fe921fb
 8007268:	7f3321d2 	.word	0x7f3321d2
 800726c:	4002d97c 	.word	0x4002d97c
 8007270:	7f3321d2 	.word	0x7f3321d2
 8007274:	c002d97c 	.word	0xc002d97c
 8007278:	00000000 	.word	0x00000000
 800727c:	80000000 	.word	0x80000000
	...
 8007288:	33145c07 	.word	0x33145c07
 800728c:	3ca1a626 	.word	0x3ca1a626
 8007290:	54442d18 	.word	0x54442d18
 8007294:	400921fb 	.word	0x400921fb
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	00000000 	.word	0x00000000

080072a0 <atan>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	eeb0 7b40 	vmov.f64	d7, d0
 80072a6:	ee17 5a90 	vmov	r5, s15
 80072aa:	4b73      	ldr	r3, [pc, #460]	; (8007478 <atan+0x1d8>)
 80072ac:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80072b0:	429c      	cmp	r4, r3
 80072b2:	dd13      	ble.n	80072dc <atan+0x3c>
 80072b4:	4b71      	ldr	r3, [pc, #452]	; (800747c <atan+0x1dc>)
 80072b6:	429c      	cmp	r4, r3
 80072b8:	dc03      	bgt.n	80072c2 <atan+0x22>
 80072ba:	d107      	bne.n	80072cc <atan+0x2c>
 80072bc:	ee10 3a10 	vmov	r3, s0
 80072c0:	b123      	cbz	r3, 80072cc <atan+0x2c>
 80072c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80072c6:	eeb0 0b47 	vmov.f64	d0, d7
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8007408 <atan+0x168>
 80072d0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8007410 <atan+0x170>
 80072d4:	2d00      	cmp	r5, #0
 80072d6:	fe37 7b06 	vselgt.f64	d7, d7, d6
 80072da:	e7f4      	b.n	80072c6 <atan+0x26>
 80072dc:	4b68      	ldr	r3, [pc, #416]	; (8007480 <atan+0x1e0>)
 80072de:	429c      	cmp	r4, r3
 80072e0:	dc11      	bgt.n	8007306 <atan+0x66>
 80072e2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80072e6:	429c      	cmp	r4, r3
 80072e8:	dc0a      	bgt.n	8007300 <atan+0x60>
 80072ea:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80072ee:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8007418 <atan+0x178>
 80072f2:	ee30 6b06 	vadd.f64	d6, d0, d6
 80072f6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80072fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fe:	dce2      	bgt.n	80072c6 <atan+0x26>
 8007300:	f04f 33ff 	mov.w	r3, #4294967295
 8007304:	e013      	b.n	800732e <atan+0x8e>
 8007306:	f000 f8c5 	bl	8007494 <fabs>
 800730a:	4b5e      	ldr	r3, [pc, #376]	; (8007484 <atan+0x1e4>)
 800730c:	429c      	cmp	r4, r3
 800730e:	dc4f      	bgt.n	80073b0 <atan+0x110>
 8007310:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007314:	429c      	cmp	r4, r3
 8007316:	dc41      	bgt.n	800739c <atan+0xfc>
 8007318:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800731c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007320:	2300      	movs	r3, #0
 8007322:	eea0 6b07 	vfma.f64	d6, d0, d7
 8007326:	ee30 0b07 	vadd.f64	d0, d0, d7
 800732a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800732e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007420 <atan+0x180>
 8007332:	ee27 4b07 	vmul.f64	d4, d7, d7
 8007336:	ee24 5b04 	vmul.f64	d5, d4, d4
 800733a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007428 <atan+0x188>
 800733e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8007342:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8007430 <atan+0x190>
 8007346:	eea3 6b05 	vfma.f64	d6, d3, d5
 800734a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007438 <atan+0x198>
 800734e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8007352:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8007440 <atan+0x1a0>
 8007356:	eea3 6b05 	vfma.f64	d6, d3, d5
 800735a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007448 <atan+0x1a8>
 800735e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8007450 <atan+0x1b0>
 8007362:	eea6 3b05 	vfma.f64	d3, d6, d5
 8007366:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007458 <atan+0x1b8>
 800736a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800736e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007460 <atan+0x1c0>
 8007372:	eea2 6b05 	vfma.f64	d6, d2, d5
 8007376:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8007468 <atan+0x1c8>
 800737a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800737e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007470 <atan+0x1d0>
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	eea2 6b05 	vfma.f64	d6, d2, d5
 8007388:	ee26 6b05 	vmul.f64	d6, d6, d5
 800738c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8007390:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007394:	d121      	bne.n	80073da <atan+0x13a>
 8007396:	ee37 7b46 	vsub.f64	d7, d7, d6
 800739a:	e794      	b.n	80072c6 <atan+0x26>
 800739c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80073a0:	2301      	movs	r3, #1
 80073a2:	ee30 6b47 	vsub.f64	d6, d0, d7
 80073a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80073aa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80073ae:	e7be      	b.n	800732e <atan+0x8e>
 80073b0:	4b35      	ldr	r3, [pc, #212]	; (8007488 <atan+0x1e8>)
 80073b2:	429c      	cmp	r4, r3
 80073b4:	dc0b      	bgt.n	80073ce <atan+0x12e>
 80073b6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80073ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80073be:	ee30 5b47 	vsub.f64	d5, d0, d7
 80073c2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80073c6:	2302      	movs	r3, #2
 80073c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80073cc:	e7af      	b.n	800732e <atan+0x8e>
 80073ce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80073d2:	2303      	movs	r3, #3
 80073d4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80073d8:	e7a9      	b.n	800732e <atan+0x8e>
 80073da:	4a2c      	ldr	r2, [pc, #176]	; (800748c <atan+0x1ec>)
 80073dc:	492c      	ldr	r1, [pc, #176]	; (8007490 <atan+0x1f0>)
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	441a      	add	r2, r3
 80073e2:	440b      	add	r3, r1
 80073e4:	ed93 5b00 	vldr	d5, [r3]
 80073e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80073ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80073f0:	ed92 6b00 	vldr	d6, [r2]
 80073f4:	2d00      	cmp	r5, #0
 80073f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80073fa:	bfb8      	it	lt
 80073fc:	eeb1 7b47 	vneglt.f64	d7, d7
 8007400:	e761      	b.n	80072c6 <atan+0x26>
 8007402:	bf00      	nop
 8007404:	f3af 8000 	nop.w
 8007408:	54442d18 	.word	0x54442d18
 800740c:	bff921fb 	.word	0xbff921fb
 8007410:	54442d18 	.word	0x54442d18
 8007414:	3ff921fb 	.word	0x3ff921fb
 8007418:	8800759c 	.word	0x8800759c
 800741c:	7e37e43c 	.word	0x7e37e43c
 8007420:	e322da11 	.word	0xe322da11
 8007424:	3f90ad3a 	.word	0x3f90ad3a
 8007428:	24760deb 	.word	0x24760deb
 800742c:	3fa97b4b 	.word	0x3fa97b4b
 8007430:	a0d03d51 	.word	0xa0d03d51
 8007434:	3fb10d66 	.word	0x3fb10d66
 8007438:	c54c206e 	.word	0xc54c206e
 800743c:	3fb745cd 	.word	0x3fb745cd
 8007440:	920083ff 	.word	0x920083ff
 8007444:	3fc24924 	.word	0x3fc24924
 8007448:	5555550d 	.word	0x5555550d
 800744c:	3fd55555 	.word	0x3fd55555
 8007450:	52defd9a 	.word	0x52defd9a
 8007454:	bfadde2d 	.word	0xbfadde2d
 8007458:	2c6a6c2f 	.word	0x2c6a6c2f
 800745c:	bfa2b444 	.word	0xbfa2b444
 8007460:	af749a6d 	.word	0xaf749a6d
 8007464:	bfb3b0f2 	.word	0xbfb3b0f2
 8007468:	fe231671 	.word	0xfe231671
 800746c:	bfbc71c6 	.word	0xbfbc71c6
 8007470:	9998ebc4 	.word	0x9998ebc4
 8007474:	bfc99999 	.word	0xbfc99999
 8007478:	440fffff 	.word	0x440fffff
 800747c:	7ff00000 	.word	0x7ff00000
 8007480:	3fdbffff 	.word	0x3fdbffff
 8007484:	3ff2ffff 	.word	0x3ff2ffff
 8007488:	40037fff 	.word	0x40037fff
 800748c:	08007800 	.word	0x08007800
 8007490:	08007820 	.word	0x08007820

08007494 <fabs>:
 8007494:	ec51 0b10 	vmov	r0, r1, d0
 8007498:	ee10 2a10 	vmov	r2, s0
 800749c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074a0:	ec43 2b10 	vmov	d0, r2, r3
 80074a4:	4770      	bx	lr
	...

080074a8 <_init>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr

080074b4 <_fini>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	bf00      	nop
 80074b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ba:	bc08      	pop	{r3}
 80074bc:	469e      	mov	lr, r3
 80074be:	4770      	bx	lr
