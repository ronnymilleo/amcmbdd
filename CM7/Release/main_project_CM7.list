
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c630  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000060f0  0800c8d0  0800c8d0  0001c8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080129c0  080129c0  000229c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080129c8  080129c8  000229c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080129cc  080129cc  000229cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  080129d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001567c  240001e0  08012bb0  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401585c  08012bb0  0003585c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002786a  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003fd0  00000000  00000000  00057a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001498  00000000  00000000  0005ba48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001310  00000000  00000000  0005cee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b2d7  00000000  00000000  0005e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00014e5d  00000000  00000000  000994c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00184a84  00000000  00000000  000ae324  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  00232da8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e64  00000000  00000000  00232e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00003441  00000000  00000000  00238cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c8b8 	.word	0x0800c8b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800c8b8 	.word	0x0800c8b8

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <SystemInit+0xc4>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <SystemInit+0xc4>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <SystemInit+0xc4>)
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SystemInit+0xc4>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemInit+0xc8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a28      	ldr	r2, [pc, #160]	; (8000818 <SystemInit+0xc8>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <SystemInit+0xc8>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemInit+0xc8>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4924      	ldr	r1, [pc, #144]	; (8000818 <SystemInit+0xc8>)
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemInit+0xcc>)
 800078a:	4013      	ands	r3, r2
 800078c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemInit+0xc8>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <SystemInit+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemInit+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <SystemInit+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <SystemInit+0xc8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <SystemInit+0xc8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <SystemInit+0xc8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <SystemInit+0xc8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <SystemInit+0xc8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <SystemInit+0xc8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <SystemInit+0xc8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <SystemInit+0xc8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <SystemInit+0xc8>)
 80007d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <SystemInit+0xc8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <SystemInit+0xd0>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <SystemInit+0xd0>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <SystemInit+0xd4>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <SystemInit+0xd8>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007fa:	d202      	bcs.n	8000802 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <SystemInit+0xdc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SystemInit+0xc4>)
 8000804:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000808:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	58024400 	.word	0x58024400
 800081c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000820:	580000c0 	.word	0x580000c0
 8000824:	5c001000 	.word	0x5c001000
 8000828:	ffff0000 	.word	0xffff0000
 800082c:	51008108 	.word	0x51008108

08000830 <inst_absolute>:
#include "math.h"

//**********************************************************************************************//
// Preprocessing - Instantaneous values (6 features)
// To use with instantaneous values
void inst_absolute(float32_t in[], float32_t out[]){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	arm_abs_f32(&in[0], &out[0], frameSize);
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <inst_absolute+0x20>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	6839      	ldr	r1, [r7, #0]
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f007 fe86 	bl	8008554 <arm_abs_f32>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	0800c8f0 	.word	0x0800c8f0

08000854 <complex_inst_absolute>:

// To use with complex input values
void complex_inst_absolute(float32_t in[], float32_t out[]){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	arm_cmplx_mag_f32(&in[0], &out[0], frameSize);
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <complex_inst_absolute+0x20>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	6839      	ldr	r1, [r7, #0]
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f007 fd00 	bl	800826c <arm_cmplx_mag_f32>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	0800c8f0 	.word	0x0800c8f0

08000878 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
	int j = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	e020      	b.n	80008ce <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	3301      	adds	r3, #1
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	ed93 7a00 	vldr	s14, [r3]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	18d4      	adds	r4, r2, r3
 80008ae:	eef0 0a47 	vmov.f32	s1, s14
 80008b2:	eeb0 0a67 	vmov.f32	s0, s15
 80008b6:	f008 f975 	bl	8008ba4 <atan2f>
 80008ba:	eef0 7a40 	vmov.f32	s15, s0
 80008be:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3302      	adds	r3, #2
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <inst_phase+0x6c>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	dbd8      	blt.n	800088c <inst_phase+0x14>
	}
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	bf00      	nop
 80008e4:	0800c8f0 	.word	0x0800c8f0

080008e8 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	uint16_t k = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = M_PI;
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <unwrap+0x130>)
 80008f8:	60fb      	str	r3, [r7, #12]
	float32_t diff = 0.0f;
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < (frameSize - 1); i++){
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	e052      	b.n	80009ac <unwrap+0xc4>
		out[i] = in[i] + 2*M_PI*k;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000916:	8afb      	ldrh	r3, [r7, #22]
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000920:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000a10 <unwrap+0x128>
 8000924:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000928:	ee36 7b07 	vadd.f64	d7, d6, d7
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	4413      	add	r3, r2
 8000934:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000938:	edc3 7a00 	vstr	s15, [r3]
		diff = fabsf(in[i+1] - in[i]);
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	3301      	adds	r3, #1
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	ed93 7a00 	vldr	s14, [r3]
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800095a:	eef0 7ae7 	vabs.f32	s15, s15
 800095e:	edc7 7a02 	vstr	s15, [r7, #8]
		if(diff > alpha){
 8000962:	ed97 7a02 	vldr	s14, [r7, #8]
 8000966:	edd7 7a03 	vldr	s15, [r7, #12]
 800096a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800096e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000972:	dd18      	ble.n	80009a6 <unwrap+0xbe>
			if(in[i+1] < in[i]){
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	3301      	adds	r3, #1
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	ed93 7a00 	vldr	s14, [r3]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000996:	d503      	bpl.n	80009a0 <unwrap+0xb8>
				k++;
 8000998:	8afb      	ldrh	r3, [r7, #22]
 800099a:	3301      	adds	r3, #1
 800099c:	82fb      	strh	r3, [r7, #22]
 800099e:	e002      	b.n	80009a6 <unwrap+0xbe>
			} else {
				k--;
 80009a0:	8afb      	ldrh	r3, [r7, #22]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	3301      	adds	r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <unwrap+0x134>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dba6      	blt.n	8000906 <unwrap+0x1e>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <unwrap+0x134>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	edd3 7a00 	vldr	s15, [r3]
 80009ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009d2:	8afb      	ldrh	r3, [r7, #22]
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009dc:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000a10 <unwrap+0x128>
 80009e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80009e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <unwrap+0x134>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009fe:	edc3 7a00 	vstr	s15, [r3]
}
 8000a02:	bf00      	nop
 8000a04:	371c      	adds	r7, #28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	54442d18 	.word	0x54442d18
 8000a14:	401921fb 	.word	0x401921fb
 8000a18:	40490fdb 	.word	0x40490fdb
 8000a1c:	0800c8f0 	.word	0x0800c8f0

08000a20 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4b53      	ldr	r3, [pc, #332]	; (8000b78 <inst_frequency+0x158>)
 8000a2c:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a30:	443a      	add	r2, r7
 8000a32:	4413      	add	r3, r2
 8000a34:	6018      	str	r0, [r3, #0]
 8000a36:	4b51      	ldr	r3, [pc, #324]	; (8000b7c <inst_frequency+0x15c>)
 8000a38:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a3c:	443a      	add	r2, r7
 8000a3e:	4413      	add	r3, r2
 8000a40:	6019      	str	r1, [r3, #0]
	float32_t phase[2048] = {0};
 8000a42:	4b4f      	ldr	r3, [pc, #316]	; (8000b80 <inst_frequency+0x160>)
 8000a44:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a48:	443a      	add	r2, r7
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a52:	461a      	mov	r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	f008 fac6 	bl	8008fe6 <memset>
	float32_t unwrapped_phase[2048] = {0};
 8000a5a:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <inst_frequency+0x164>)
 8000a5c:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a60:	443a      	add	r2, r7
 8000a62:	4413      	add	r3, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f008 faba 	bl	8008fe6 <memset>
	float32_t C = 1 / M_TWOPI;
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <inst_frequency+0x168>)
 8000a74:	f244 0208 	movw	r2, #16392	; 0x4008
 8000a78:	443a      	add	r2, r7
 8000a7a:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 8000a7c:	4a40      	ldr	r2, [pc, #256]	; (8000b80 <inst_frequency+0x160>)
 8000a7e:	f244 0310 	movw	r3, #16400	; 0x4010
 8000a82:	443b      	add	r3, r7
 8000a84:	441a      	add	r2, r3
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <inst_frequency+0x158>)
 8000a88:	f244 0110 	movw	r1, #16400	; 0x4010
 8000a8c:	4439      	add	r1, r7
 8000a8e:	440b      	add	r3, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	f7ff fef0 	bl	8000878 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8000a98:	4a3a      	ldr	r2, [pc, #232]	; (8000b84 <inst_frequency+0x164>)
 8000a9a:	f244 0310 	movw	r3, #16400	; 0x4010
 8000a9e:	443b      	add	r3, r7
 8000aa0:	441a      	add	r2, r3
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <inst_frequency+0x160>)
 8000aa4:	f244 0110 	movw	r1, #16400	; 0x4010
 8000aa8:	4439      	add	r1, r7
 8000aaa:	440b      	add	r3, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff1a 	bl	80008e8 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f244 020c 	movw	r2, #16396	; 0x400c
 8000aba:	443a      	add	r2, r7
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e03a      	b.n	8000b36 <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 8000ac0:	f244 030c 	movw	r3, #16396	; 0x400c
 8000ac4:	443b      	add	r3, r7
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <inst_frequency+0x164>)
 8000acc:	f244 0110 	movw	r1, #16400	; 0x4010
 8000ad0:	4439      	add	r1, r7
 8000ad2:	440b      	add	r3, r1
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	ed93 7a00 	vldr	s14, [r3]
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <inst_frequency+0x164>)
 8000ade:	f244 0210 	movw	r2, #16400	; 0x4010
 8000ae2:	443a      	add	r2, r7
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f244 020c 	movw	r2, #16396	; 0x400c
 8000aea:	443a      	add	r2, r7
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	0092      	lsls	r2, r2, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	edd3 7a00 	vldr	s15, [r3]
 8000af6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000afa:	f244 030c 	movw	r3, #16396	; 0x400c
 8000afe:	443b      	add	r3, r7
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	009a      	lsls	r2, r3, #2
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <inst_frequency+0x15c>)
 8000b06:	f244 0110 	movw	r1, #16400	; 0x4010
 8000b0a:	4439      	add	r1, r7
 8000b0c:	440b      	add	r3, r1
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	f244 0208 	movw	r2, #16392	; 0x4008
 8000b16:	443a      	add	r2, r7
 8000b18:	edd2 7a00 	vldr	s15, [r2]
 8000b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b20:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8000b24:	f244 030c 	movw	r3, #16396	; 0x400c
 8000b28:	443b      	add	r3, r7
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f244 020c 	movw	r2, #16396	; 0x400c
 8000b32:	443a      	add	r2, r7
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <inst_frequency+0x16c>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f244 020c 	movw	r2, #16396	; 0x400c
 8000b40:	443a      	add	r2, r7
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbbb      	blt.n	8000ac0 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <inst_frequency+0x16c>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000b52:	4413      	add	r3, r2
 8000b54:	009a      	lsls	r2, r3, #2
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <inst_frequency+0x15c>)
 8000b58:	f244 0110 	movw	r1, #16400	; 0x4010
 8000b5c:	4439      	add	r1, r7
 8000b5e:	440b      	add	r3, r1
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	ffffbff4 	.word	0xffffbff4
 8000b7c:	ffffbff0 	.word	0xffffbff0
 8000b80:	ffffdff8 	.word	0xffffdff8
 8000b84:	ffffbff8 	.word	0xffffbff8
 8000b88:	3e22f983 	.word	0x3e22f983
 8000b8c:	0800c8f0 	.word	0x0800c8f0

08000b90 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8000b9a:	f04f 0300 	mov.w	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f008 f9fd 	bl	8008fb0 <malloc>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 f9f5 	bl	8008fb0 <malloc>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	61bb      	str	r3, [r7, #24]
	complex_inst_absolute(in, &absolute[0]);
 8000bca:	69f9      	ldr	r1, [r7, #28]
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fe41 	bl	8000854 <complex_inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	f107 0210 	add.w	r2, r7, #16
 8000be0:	69f8      	ldr	r0, [r7, #28]
 8000be2:	f006 ff3d 	bl	8007a60 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bea:	e012      	b.n	8000c12 <inst_centralized_normalized_absolute+0x82>
		normalized[a] = absolute[a] / max;
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	edd3 6a00 	vldr	s13, [r3]
 8000bf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4413      	add	r3, r2
 8000c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c08:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	3301      	adds	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	dbe6      	blt.n	8000bec <inst_centralized_normalized_absolute+0x5c>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	461a      	mov	r2, r3
 8000c2a:	69b8      	ldr	r0, [r7, #24]
 8000c2c:	f006 fee2 	bl	80079f4 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
 8000c34:	e016      	b.n	8000c64 <inst_centralized_normalized_absolute+0xd4>
		out[i] = normalized[i] / mean - 1;
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	edd3 6a00 	vldr	s13, [r3]
 8000c42:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c5a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	3301      	adds	r3, #1
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	dbe2      	blt.n	8000c36 <inst_centralized_normalized_absolute+0xa6>
	}
	free(absolute);
 8000c70:	69f8      	ldr	r0, [r7, #28]
 8000c72:	f008 f9a5 	bl	8008fc0 <free>
	free(normalized);
 8000c76:	69b8      	ldr	r0, [r7, #24]
 8000c78:	f008 f9a2 	bl	8008fc0 <free>
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	0800c8f0 	.word	0x0800c8f0

08000c88 <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <std_dev+0x20>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f006 fe32 	bl	8007904 <arm_std_f32>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	0800c8f0 	.word	0x0800c8f0

08000cac <mean_of_signal_magnitude>:
//**********************************************************************************************//
// Feature number 6
void mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	arm_mean_f32(&in[0], frameSize, out);
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <mean_of_signal_magnitude+0x20>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f006 fe98 	bl	80079f4 <arm_mean_f32>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0800c8f0 	.word	0x0800c8f0

08000cd0 <squared_mean_of_signal_magnitude>:

// Feature number 7
void squared_mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	float32_t mean_of_signal_magnitude;
	arm_mean_f32(&in[0], frameSize, &mean_of_signal_magnitude);
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <squared_mean_of_signal_magnitude+0x38>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f006 fe84 	bl	80079f4 <arm_mean_f32>
	*out = mean_of_signal_magnitude * mean_of_signal_magnitude;
 8000cec:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	edc3 7a00 	vstr	s15, [r3]
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	0800c8f0 	.word	0x0800c8f0

08000d0c <normalized_sqrt_of_sum_of_amp>:

// Feature number 8
void normalized_sqrt_of_sum_of_amp(float32_t in[], float32_t *out) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	float32_t sum = 0.0f;
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	e00e      	b.n	8000d40 <normalized_sqrt_of_sum_of_amp+0x34>
		sum += in[i];
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	edd3 7a00 	vldr	s15, [r3]
 8000d2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d36:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <normalized_sqrt_of_sum_of_amp+0x6c>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	dbea      	blt.n	8000d22 <normalized_sqrt_of_sum_of_amp+0x16>
	}
	*out = sqrtf(sum)/frameSize;
 8000d4c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d50:	f007 ff2a 	bl	8008ba8 <sqrtf>
 8000d54:	eef0 6a40 	vmov.f32	s13, s0
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <normalized_sqrt_of_sum_of_amp+0x6c>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	edc3 7a00 	vstr	s15, [r3]
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	0800c8f0 	.word	0x0800c8f0

08000d7c <ratio_iq>:

// Feature number 9
void ratio_iq(float32_t in[], float32_t *out) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	// ft_output = np.sum(np.power(np.imag(signal_input), 2)) / np.sum(np.power(np.real(signal_input), 2))
	float32_t sum_of_real_squared = 0.0f;
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
	float32_t sum_of_imag_squared = 0.0f;
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e02c      	b.n	8000df2 <ratio_iq+0x76>
		sum_of_real_squared += in[i]*in[i];
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	edd3 7a00 	vldr	s15, [r3]
 8000db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dbc:	edc7 7a05 	vstr	s15, [r7, #20]
		sum_of_imag_squared += in[i+1]*in[i+1];
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	ed93 7a00 	vldr	s14, [r3]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de8:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3302      	adds	r3, #2
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <ratio_iq+0xa0>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbcc      	blt.n	8000d98 <ratio_iq+0x1c>
	}
	*out = sum_of_imag_squared / sum_of_real_squared;
 8000dfe:	edd7 6a04 	vldr	s13, [r7, #16]
 8000e02:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	edc3 7a00 	vstr	s15, [r3]
}
 8000e10:	bf00      	nop
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	0800c8f0 	.word	0x0800c8f0

08000e20 <gmax>:

// Feature number 10
void gmax(float32_t in[], float32_t *out){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4b61      	ldr	r3, [pc, #388]	; (8000fb0 <gmax+0x190>)
 8000e2c:	f244 0228 	movw	r2, #16424	; 0x4028
 8000e30:	443a      	add	r2, r7
 8000e32:	4413      	add	r3, r2
 8000e34:	6018      	str	r0, [r3, #0]
 8000e36:	4b5f      	ldr	r3, [pc, #380]	; (8000fb4 <gmax+0x194>)
 8000e38:	f244 0228 	movw	r2, #16424	; 0x4028
 8000e3c:	443a      	add	r2, r7
 8000e3e:	4413      	add	r3, r2
 8000e40:	6019      	str	r1, [r3, #0]
	uint32_t fftSize = 2048;
 8000e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e46:	f244 0220 	movw	r2, #16416	; 0x4020
 8000e4a:	443a      	add	r2, r7
 8000e4c:	6013      	str	r3, [r2, #0]
	uint32_t ifftFlag = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f244 021c 	movw	r2, #16412	; 0x401c
 8000e54:	443a      	add	r2, r7
 8000e56:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f244 0218 	movw	r2, #16408	; 0x4018
 8000e5e:	443a      	add	r2, r7
 8000e60:	6013      	str	r3, [r2, #0]
	uint32_t maxValueIndex; //Unused
	float32_t maxValue;
	float32_t *result_mag;
	float32_t result_fft[4096] = {0};
 8000e62:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <gmax+0x198>)
 8000e64:	f244 0228 	movw	r2, #16424	; 0x4028
 8000e68:	443a      	add	r2, r7
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e72:	461a      	mov	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	f008 f8b6 	bl	8008fe6 <memset>

	result_mag = (float32_t *) malloc(fftSize * sizeof(float32_t));
 8000e7a:	f244 0320 	movw	r3, #16416	; 0x4020
 8000e7e:	443b      	add	r3, r7
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f008 f893 	bl	8008fb0 <malloc>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f244 0214 	movw	r2, #16404	; 0x4014
 8000e90:	443a      	add	r2, r7
 8000e92:	6013      	str	r3, [r2, #0]

	// Copy array to calculate
	for(int i = 0; i < frameSize*2; i++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	f244 0224 	movw	r2, #16420	; 0x4024
 8000e9a:	443a      	add	r2, r7
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e021      	b.n	8000ee4 <gmax+0xc4>
		result_fft[i] = in[i];
 8000ea0:	f244 0324 	movw	r3, #16420	; 0x4024
 8000ea4:	443b      	add	r3, r7
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	009a      	lsls	r2, r3, #2
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <gmax+0x190>)
 8000eac:	f244 0128 	movw	r1, #16424	; 0x4028
 8000eb0:	4439      	add	r1, r7
 8000eb2:	440b      	add	r3, r1
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <gmax+0x198>)
 8000ebc:	f244 0128 	movw	r1, #16424	; 0x4028
 8000ec0:	4439      	add	r1, r7
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f244 0124 	movw	r1, #16420	; 0x4024
 8000ec8:	4439      	add	r1, r7
 8000eca:	6809      	ldr	r1, [r1, #0]
 8000ecc:	0089      	lsls	r1, r1, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < frameSize*2; i++){
 8000ed2:	f244 0324 	movw	r3, #16420	; 0x4024
 8000ed6:	443b      	add	r3, r7
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	f244 0224 	movw	r2, #16420	; 0x4024
 8000ee0:	443a      	add	r2, r7
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <gmax+0x19c>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	f244 0224 	movw	r2, #16420	; 0x4024
 8000eee:	443a      	add	r2, r7
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dbd4      	blt.n	8000ea0 <gmax+0x80>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, &result_fft[0], ifftFlag, doBitReverse);
 8000ef6:	f244 031c 	movw	r3, #16412	; 0x401c
 8000efa:	443b      	add	r3, r7
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	f244 0318 	movw	r3, #16408	; 0x4018
 8000f04:	443b      	add	r3, r7
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	492b      	ldr	r1, [pc, #172]	; (8000fb8 <gmax+0x198>)
 8000f0c:	f244 0028 	movw	r0, #16424	; 0x4028
 8000f10:	4438      	add	r0, r7
 8000f12:	4401      	add	r1, r0
 8000f14:	482a      	ldr	r0, [pc, #168]	; (8000fc0 <gmax+0x1a0>)
 8000f16:	f007 f931 	bl	800817c <arm_cfft_f32>
	arm_cmplx_mag_f32(result_fft, result_mag, fftSize);
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <gmax+0x198>)
 8000f1c:	f244 0228 	movw	r2, #16424	; 0x4028
 8000f20:	443a      	add	r2, r7
 8000f22:	4413      	add	r3, r2
 8000f24:	f244 0220 	movw	r2, #16416	; 0x4020
 8000f28:	443a      	add	r2, r7
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	f244 0114 	movw	r1, #16404	; 0x4014
 8000f30:	4439      	add	r1, r7
 8000f32:	6809      	ldr	r1, [r1, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 f999 	bl	800826c <arm_cmplx_mag_f32>
	arm_max_f32(result_mag, fftSize, &maxValue, &maxValueIndex);
 8000f3a:	f244 0310 	movw	r3, #16400	; 0x4010
 8000f3e:	443b      	add	r3, r7
 8000f40:	f244 020c 	movw	r2, #16396	; 0x400c
 8000f44:	443a      	add	r2, r7
 8000f46:	f244 0120 	movw	r1, #16416	; 0x4020
 8000f4a:	4439      	add	r1, r7
 8000f4c:	6809      	ldr	r1, [r1, #0]
 8000f4e:	f244 0014 	movw	r0, #16404	; 0x4014
 8000f52:	4438      	add	r0, r7
 8000f54:	6800      	ldr	r0, [r0, #0]
 8000f56:	f006 fd83 	bl	8007a60 <arm_max_f32>
	*out = maxValue*maxValue/fftSize;
 8000f5a:	f244 030c 	movw	r3, #16396	; 0x400c
 8000f5e:	443b      	add	r3, r7
 8000f60:	ed93 7a00 	vldr	s14, [r3]
 8000f64:	f244 030c 	movw	r3, #16396	; 0x400c
 8000f68:	443b      	add	r3, r7
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f72:	f244 0320 	movw	r3, #16416	; 0x4020
 8000f76:	443b      	add	r3, r7
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <gmax+0x194>)
 8000f88:	f244 0228 	movw	r2, #16424	; 0x4028
 8000f8c:	443a      	add	r2, r7
 8000f8e:	4413      	add	r3, r2
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	edc3 7a00 	vstr	s15, [r3]
	free(result_mag);
 8000f96:	f244 0314 	movw	r3, #16404	; 0x4014
 8000f9a:	443b      	add	r3, r7
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	f008 f80f 	bl	8008fc0 <free>
}
 8000fa2:	bf00      	nop
 8000fa4:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	ffffbfdc 	.word	0xffffbfdc
 8000fb4:	ffffbfd8 	.word	0xffffbfd8
 8000fb8:	ffffbfe4 	.word	0xffffbfe4
 8000fbc:	0800c8f0 	.word	0x0800c8f0
 8000fc0:	0800c914 	.word	0x0800c914

08000fc4 <kurtosis_of_abs_amplitude>:
	free(temp);
	*/
}

// Features number 11 and 12
void kurtosis_of_abs_amplitude(float32_t in[], float32_t *out, uint32_t blockSize){
 8000fc4:	b5b0      	push	{r4, r5, r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	466b      	mov	r3, sp
 8000fd2:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
 8000fdc:	4601      	mov	r1, r0
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	f04f 0400 	mov.w	r4, #0
 8000fea:	0154      	lsls	r4, r2, #5
 8000fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ff0:	014b      	lsls	r3, r1, #5
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	f04f 0400 	mov.w	r4, #0
 8001000:	0154      	lsls	r4, r2, #5
 8001002:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001006:	014b      	lsls	r3, r1, #5
 8001008:	0083      	lsls	r3, r0, #2
 800100a:	3303      	adds	r3, #3
 800100c:	3307      	adds	r3, #7
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	ebad 0d03 	sub.w	sp, sp, r3
 8001016:	466b      	mov	r3, sp
 8001018:	3303      	adds	r3, #3
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	4603      	mov	r3, r0
 8001024:	3b01      	subs	r3, #1
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001028:	4601      	mov	r1, r0
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	f04f 0400 	mov.w	r4, #0
 8001036:	0154      	lsls	r4, r2, #5
 8001038:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800103c:	014b      	lsls	r3, r1, #5
 800103e:	4601      	mov	r1, r0
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	f04f 0400 	mov.w	r4, #0
 800104c:	0154      	lsls	r4, r2, #5
 800104e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001052:	014b      	lsls	r3, r1, #5
 8001054:	0083      	lsls	r3, r0, #2
 8001056:	3303      	adds	r3, #3
 8001058:	3307      	adds	r3, #7
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	ebad 0d03 	sub.w	sp, sp, r3
 8001062:	466b      	mov	r3, sp
 8001064:	3303      	adds	r3, #3
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	4603      	mov	r3, r0
 8001070:	3b01      	subs	r3, #1
 8001072:	647b      	str	r3, [r7, #68]	; 0x44
 8001074:	4601      	mov	r1, r0
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	f04f 0400 	mov.w	r4, #0
 8001082:	0154      	lsls	r4, r2, #5
 8001084:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001088:	014b      	lsls	r3, r1, #5
 800108a:	4601      	mov	r1, r0
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	f04f 0400 	mov.w	r4, #0
 8001098:	0154      	lsls	r4, r2, #5
 800109a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800109e:	014b      	lsls	r3, r1, #5
 80010a0:	0083      	lsls	r3, r0, #2
 80010a2:	3303      	adds	r3, #3
 80010a4:	3307      	adds	r3, #7
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	ebad 0d03 	sub.w	sp, sp, r3
 80010ae:	466b      	mov	r3, sp
 80010b0:	3303      	adds	r3, #3
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4603      	mov	r3, r0
 80010bc:	3b01      	subs	r3, #1
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010c0:	4601      	mov	r1, r0
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	f04f 0400 	mov.w	r4, #0
 80010ce:	0154      	lsls	r4, r2, #5
 80010d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010d4:	014b      	lsls	r3, r1, #5
 80010d6:	4601      	mov	r1, r0
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	f04f 0400 	mov.w	r4, #0
 80010e4:	0154      	lsls	r4, r2, #5
 80010e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010ea:	014b      	lsls	r3, r1, #5
 80010ec:	0083      	lsls	r3, r0, #2
 80010ee:	3303      	adds	r3, #3
 80010f0:	3307      	adds	r3, #7
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	ebad 0d03 	sub.w	sp, sp, r3
 80010fa:	466b      	mov	r3, sp
 80010fc:	3303      	adds	r3, #3
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	4603      	mov	r3, r0
 8001108:	3b01      	subs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800110c:	4601      	mov	r1, r0
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	f04f 0400 	mov.w	r4, #0
 800111a:	0154      	lsls	r4, r2, #5
 800111c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001120:	014b      	lsls	r3, r1, #5
 8001122:	4601      	mov	r1, r0
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f04f 0400 	mov.w	r4, #0
 8001130:	0154      	lsls	r4, r2, #5
 8001132:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001136:	014b      	lsls	r3, r1, #5
 8001138:	0083      	lsls	r3, r0, #2
 800113a:	3303      	adds	r3, #3
 800113c:	3307      	adds	r3, #7
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	ebad 0d03 	sub.w	sp, sp, r3
 8001146:	466b      	mov	r3, sp
 8001148:	3303      	adds	r3, #3
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4603      	mov	r3, r0
 8001154:	3b01      	subs	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	4601      	mov	r1, r0
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	0154      	lsls	r4, r2, #5
 8001168:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800116c:	014b      	lsls	r3, r1, #5
 800116e:	4601      	mov	r1, r0
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	f04f 0400 	mov.w	r4, #0
 800117c:	0154      	lsls	r4, r2, #5
 800117e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001182:	014b      	lsls	r3, r1, #5
 8001184:	0083      	lsls	r3, r0, #2
 8001186:	3303      	adds	r3, #3
 8001188:	3307      	adds	r3, #7
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	ebad 0d03 	sub.w	sp, sp, r3
 8001192:	466b      	mov	r3, sp
 8001194:	3303      	adds	r3, #3
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	461a      	mov	r2, r3
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f006 fc25 	bl	80079f4 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 80011aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	f006 fb56 	bl	8007868 <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 80011bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80011be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f007 f93a 	bl	800843c <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 80011c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 fb68 	bl	80078a4 <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 80011d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80011d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f007 f974 	bl	80084c8 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 80011e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f007 f96e 	bl	80084c8 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 80011ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011f0:	6a3a      	ldr	r2, [r7, #32]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f007 f968 	bl	80084c8 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	f107 0218 	add.w	r2, r7, #24
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f006 fbf7 	bl	80079f4 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	f107 0214 	add.w	r2, r7, #20
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f006 fbf0 	bl	80079f4 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8001214:	edd7 6a06 	vldr	s13, [r7, #24]
 8001218:	ed97 7a05 	vldr	s14, [r7, #20]
 800121c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001228:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800122c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	edc3 7a00 	vstr	s15, [r3]
 8001236:	46ad      	mov	sp, r5
}
 8001238:	bf00      	nop
 800123a:	3750      	adds	r7, #80	; 0x50
 800123c:	46bd      	mov	sp, r7
 800123e:	bdb0      	pop	{r4, r5, r7, pc}

08001240 <kurtosis_of_abs_freq>:

void kurtosis_of_abs_freq(float32_t in[], float32_t *out, uint32_t blockSize){
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b094      	sub	sp, #80	; 0x50
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	466b      	mov	r3, sp
 800124e:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	4603      	mov	r3, r0
 8001254:	3b01      	subs	r3, #1
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
 8001258:	4601      	mov	r1, r0
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	f04f 0400 	mov.w	r4, #0
 8001266:	0154      	lsls	r4, r2, #5
 8001268:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800126c:	014b      	lsls	r3, r1, #5
 800126e:	4601      	mov	r1, r0
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	f04f 0400 	mov.w	r4, #0
 800127c:	0154      	lsls	r4, r2, #5
 800127e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001282:	014b      	lsls	r3, r1, #5
 8001284:	0083      	lsls	r3, r0, #2
 8001286:	3303      	adds	r3, #3
 8001288:	3307      	adds	r3, #7
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	ebad 0d03 	sub.w	sp, sp, r3
 8001292:	466b      	mov	r3, sp
 8001294:	3303      	adds	r3, #3
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4603      	mov	r3, r0
 80012a0:	3b01      	subs	r3, #1
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012a4:	4601      	mov	r1, r0
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	f04f 0400 	mov.w	r4, #0
 80012b2:	0154      	lsls	r4, r2, #5
 80012b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012b8:	014b      	lsls	r3, r1, #5
 80012ba:	4601      	mov	r1, r0
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	f04f 0400 	mov.w	r4, #0
 80012c8:	0154      	lsls	r4, r2, #5
 80012ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012ce:	014b      	lsls	r3, r1, #5
 80012d0:	0083      	lsls	r3, r0, #2
 80012d2:	3303      	adds	r3, #3
 80012d4:	3307      	adds	r3, #7
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	ebad 0d03 	sub.w	sp, sp, r3
 80012de:	466b      	mov	r3, sp
 80012e0:	3303      	adds	r3, #3
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4603      	mov	r3, r0
 80012ec:	3b01      	subs	r3, #1
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
 80012f0:	4601      	mov	r1, r0
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	f04f 0400 	mov.w	r4, #0
 80012fe:	0154      	lsls	r4, r2, #5
 8001300:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001304:	014b      	lsls	r3, r1, #5
 8001306:	4601      	mov	r1, r0
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	f04f 0400 	mov.w	r4, #0
 8001314:	0154      	lsls	r4, r2, #5
 8001316:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800131a:	014b      	lsls	r3, r1, #5
 800131c:	0083      	lsls	r3, r0, #2
 800131e:	3303      	adds	r3, #3
 8001320:	3307      	adds	r3, #7
 8001322:	08db      	lsrs	r3, r3, #3
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	ebad 0d03 	sub.w	sp, sp, r3
 800132a:	466b      	mov	r3, sp
 800132c:	3303      	adds	r3, #3
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4603      	mov	r3, r0
 8001338:	3b01      	subs	r3, #1
 800133a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800133c:	4601      	mov	r1, r0
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	f04f 0400 	mov.w	r4, #0
 800134a:	0154      	lsls	r4, r2, #5
 800134c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001350:	014b      	lsls	r3, r1, #5
 8001352:	4601      	mov	r1, r0
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	f04f 0400 	mov.w	r4, #0
 8001360:	0154      	lsls	r4, r2, #5
 8001362:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001366:	014b      	lsls	r3, r1, #5
 8001368:	0083      	lsls	r3, r0, #2
 800136a:	3303      	adds	r3, #3
 800136c:	3307      	adds	r3, #7
 800136e:	08db      	lsrs	r3, r3, #3
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	ebad 0d03 	sub.w	sp, sp, r3
 8001376:	466b      	mov	r3, sp
 8001378:	3303      	adds	r3, #3
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	4603      	mov	r3, r0
 8001384:	3b01      	subs	r3, #1
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001388:	4601      	mov	r1, r0
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	f04f 0400 	mov.w	r4, #0
 8001396:	0154      	lsls	r4, r2, #5
 8001398:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800139c:	014b      	lsls	r3, r1, #5
 800139e:	4601      	mov	r1, r0
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	f04f 0400 	mov.w	r4, #0
 80013ac:	0154      	lsls	r4, r2, #5
 80013ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013b2:	014b      	lsls	r3, r1, #5
 80013b4:	0083      	lsls	r3, r0, #2
 80013b6:	3303      	adds	r3, #3
 80013b8:	3307      	adds	r3, #7
 80013ba:	08db      	lsrs	r3, r3, #3
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	ebad 0d03 	sub.w	sp, sp, r3
 80013c2:	466b      	mov	r3, sp
 80013c4:	3303      	adds	r3, #3
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	4603      	mov	r3, r0
 80013d0:	3b01      	subs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
 80013d4:	4601      	mov	r1, r0
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	f04f 0400 	mov.w	r4, #0
 80013e2:	0154      	lsls	r4, r2, #5
 80013e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013e8:	014b      	lsls	r3, r1, #5
 80013ea:	4601      	mov	r1, r0
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	f04f 0400 	mov.w	r4, #0
 80013f8:	0154      	lsls	r4, r2, #5
 80013fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013fe:	014b      	lsls	r3, r1, #5
 8001400:	0083      	lsls	r3, r0, #2
 8001402:	3303      	adds	r3, #3
 8001404:	3307      	adds	r3, #7
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	ebad 0d03 	sub.w	sp, sp, r3
 800140e:	466b      	mov	r3, sp
 8001410:	3303      	adds	r3, #3
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	461a      	mov	r2, r3
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f006 fae7 	bl	80079f4 <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 8001426:	edd7 7a07 	vldr	s15, [r7, #28]
 800142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4618      	mov	r0, r3
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	f006 fa18 	bl	8007868 <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 8001438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800143a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f006 fffc 	bl	800843c <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 8001444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001446:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4618      	mov	r0, r3
 800144c:	f006 fa2a 	bl	80078a4 <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 8001450:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001452:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f007 f836 	bl	80084c8 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 800145c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800145e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f007 f830 	bl	80084c8 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 8001468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800146a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f007 f82a 	bl	80084c8 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f107 0218 	add.w	r2, r7, #24
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	f006 fab9 	bl	80079f4 <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	f107 0214 	add.w	r2, r7, #20
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f006 fab2 	bl	80079f4 <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8001490:	edd7 6a06 	vldr	s13, [r7, #24]
 8001494:	ed97 7a05 	vldr	s14, [r7, #20]
 8001498:	edd7 7a05 	vldr	s15, [r7, #20]
 800149c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	edc3 7a00 	vstr	s15, [r3]
 80014b2:	46ad      	mov	sp, r5
}
 80014b4:	bf00      	nop
 80014b6:	3750      	adds	r7, #80	; 0x50
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bdb0      	pop	{r4, r5, r7, pc}

080014bc <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b4b      	ldr	r3, [pc, #300]	; (8001600 <MX_GPIO_Init+0x144>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4a49      	ldr	r2, [pc, #292]	; (8001600 <MX_GPIO_Init+0x144>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4b47      	ldr	r3, [pc, #284]	; (8001600 <MX_GPIO_Init+0x144>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f0:	4b43      	ldr	r3, [pc, #268]	; (8001600 <MX_GPIO_Init+0x144>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	4a42      	ldr	r2, [pc, #264]	; (8001600 <MX_GPIO_Init+0x144>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001500:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <MX_GPIO_Init+0x144>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b3c      	ldr	r3, [pc, #240]	; (8001600 <MX_GPIO_Init+0x144>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	4a3a      	ldr	r2, [pc, #232]	; (8001600 <MX_GPIO_Init+0x144>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <MX_GPIO_Init+0x144>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <MX_GPIO_Init+0x144>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	4a33      	ldr	r2, [pc, #204]	; (8001600 <MX_GPIO_Init+0x144>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <MX_GPIO_Init+0x144>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <MX_GPIO_Init+0x144>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <MX_GPIO_Init+0x144>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_GPIO_Init+0x144>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001568:	4b25      	ldr	r3, [pc, #148]	; (8001600 <MX_GPIO_Init+0x144>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <MX_GPIO_Init+0x144>)
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <MX_GPIO_Init+0x144>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f244 0101 	movw	r1, #16385	; 0x4001
 800158c:	481d      	ldr	r0, [pc, #116]	; (8001604 <MX_GPIO_Init+0x148>)
 800158e:	f001 fc75 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2102      	movs	r1, #2
 8001596:	481c      	ldr	r0, [pc, #112]	; (8001608 <MX_GPIO_Init+0x14c>)
 8001598:	f001 fc70 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800159c:	f244 0301 	movw	r3, #16385	; 0x4001
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_GPIO_Init+0x148>)
 80015b6:	f001 fab1 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015cc:	230a      	movs	r3, #10
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_GPIO_Init+0x150>)
 80015d8:	f001 faa0 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015dc:	2302      	movs	r3, #2
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_GPIO_Init+0x14c>)
 80015f4:	f001 fa92 	bl	8002b1c <HAL_GPIO_Init>

}
 80015f8:	bf00      	nop
 80015fa:	3730      	adds	r7, #48	; 0x30
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	58024400 	.word	0x58024400
 8001604:	58020400 	.word	0x58020400
 8001608:	58021000 	.word	0x58021000
 800160c:	58020000 	.word	0x58020000

08001610 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001614:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001618:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <SCB_EnableICache+0x3c>)
 800161e:	2200      	movs	r2, #0
 8001620:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001624:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001628:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <SCB_EnableICache+0x3c>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <SCB_EnableICache+0x3c>)
 8001632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001636:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800163c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <SCB_EnableDCache+0x7c>)
 8001658:	2200      	movs	r2, #0
 800165a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800165e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <SCB_EnableDCache+0x7c>)
 8001664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001668:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0b5b      	lsrs	r3, r3, #13
 800166e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001672:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	08db      	lsrs	r3, r3, #3
 8001678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800167c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001686:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800168c:	490f      	ldr	r1, [pc, #60]	; (80016cc <SCB_EnableDCache+0x7c>)
 800168e:	4313      	orrs	r3, r2
 8001690:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1e5a      	subs	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ef      	bne.n	800167e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	60fa      	str	r2, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e5      	bne.n	8001674 <SCB_EnableDCache+0x24>
 80016a8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <SCB_EnableDCache+0x7c>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <SCB_EnableDCache+0x7c>)
 80016b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b6:	6153      	str	r3, [r2, #20]
 80016b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016bc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b090      	sub	sp, #64	; 0x40
 80016d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 80016d6:	f7ff ff9b 	bl	8001610 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 80016da:	f7ff ffb9 	bl	8001650 <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80016de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80016e4:	bf00      	nop
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <main+0xb8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <main+0x2c>
 80016f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	dcf4      	bgt.n	80016e6 <main+0x16>
	if ( timeout < 0 )
 80016fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da01      	bge.n	8001706 <main+0x36>
	{
		Error_Handler();
 8001702:	f000 fc3b 	bl	8001f7c <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001706:	f000 fdf5 	bl	80022f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800170a:	f000 fa55 	bl	8001bb8 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <main+0xb8>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <main+0xb8>)
 8001716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <main+0xb8>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800172c:	2000      	movs	r0, #0
 800172e:	f001 fbbf 	bl	8002eb0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f001 fbd5 	bl	8002ee4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800173a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001740:	bf00      	nop
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <main+0xb8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d104      	bne.n	8001758 <main+0x88>
 800174e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001754:	2b00      	cmp	r3, #0
 8001756:	dcf4      	bgt.n	8001742 <main+0x72>
	if ( timeout < 0 )
 8001758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800175a:	2b00      	cmp	r3, #0
 800175c:	da01      	bge.n	8001762 <main+0x92>
	{
		Error_Handler();
 800175e:	f000 fc0d 	bl	8001f7c <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001762:	f7ff feab 	bl	80014bc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001766:	f000 fcfd 	bl	8002164 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 800176a:	f000 fc8d 	bl	8002088 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 800176e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001772:	4906      	ldr	r1, [pc, #24]	; (800178c <main+0xbc>)
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <main+0xc0>)
 8001776:	f004 faa1 	bl	8005cbc <HAL_UART_Receive_IT>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d011      	beq.n	80017a4 <main+0xd4>
	{
		Error_Handler();
 8001780:	f000 fbfc 	bl	8001f7c <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 8001784:	e00e      	b.n	80017a4 <main+0xd4>
 8001786:	bf00      	nop
 8001788:	58024400 	.word	0x58024400
 800178c:	2400e82c 	.word	0x2400e82c
 8001790:	240157c8 	.word	0x240157c8
	{
		HAL_Delay(500);
 8001794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001798:	f000 fe3e 	bl	8002418 <HAL_Delay>
		blink_green();
 800179c:	f000 fb06 	bl	8001dac <blink_green>
		blink_green();
 80017a0:	f000 fb04 	bl	8001dac <blink_green>
	while (UartReady != SET)
 80017a4:	4bb3      	ldr	r3, [pc, #716]	; (8001a74 <main+0x3a4>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d1f2      	bne.n	8001794 <main+0xc4>
	}
	UartReady = RESET;
 80017ae:	4bb1      	ldr	r3, [pc, #708]	; (8001a74 <main+0x3a4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	2101      	movs	r1, #1
 80017b8:	48af      	ldr	r0, [pc, #700]	; (8001a78 <main+0x3a8>)
 80017ba:	f001 fb5f 	bl	8002e7c <HAL_GPIO_WritePin>

	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 80017be:	4aaf      	ldr	r2, [pc, #700]	; (8001a7c <main+0x3ac>)
 80017c0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80017c4:	4413      	add	r3, r2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <main+0x10e>
 80017cc:	4bac      	ldr	r3, [pc, #688]	; (8001a80 <main+0x3b0>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <main+0x10e>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2102      	movs	r1, #2
 80017d8:	48aa      	ldr	r0, [pc, #680]	; (8001a84 <main+0x3b4>)
 80017da:	f001 fb4f 	bl	8002e7c <HAL_GPIO_WritePin>
	}

	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 80017de:	4baa      	ldr	r3, [pc, #680]	; (8001a88 <main+0x3b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4ba8      	ldr	r3, [pc, #672]	; (8001a88 <main+0x3b8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 80017ee:	4ba6      	ldr	r3, [pc, #664]	; (8001a88 <main+0x3b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4ba4      	ldr	r3, [pc, #656]	; (8001a88 <main+0x3b8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 80017fe:	48a2      	ldr	r0, [pc, #648]	; (8001a88 <main+0x3b8>)
 8001800:	f003 feca 	bl	8005598 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001804:	4ba0      	ldr	r3, [pc, #640]	; (8001a88 <main+0x3b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24

	/*****************************************************************************************************/
	// Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800180c:	4b9e      	ldr	r3, [pc, #632]	; (8001a88 <main+0x3b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
	complex_inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8001814:	499d      	ldr	r1, [pc, #628]	; (8001a8c <main+0x3bc>)
 8001816:	4899      	ldr	r0, [pc, #612]	; (8001a7c <main+0x3ac>)
 8001818:	f7ff f81c 	bl	8000854 <complex_inst_absolute>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800181c:	4b9a      	ldr	r3, [pc, #616]	; (8001a88 <main+0x3b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_array(&instAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8001824:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001828:	461a      	mov	r2, r3
 800182a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182e:	4897      	ldr	r0, [pc, #604]	; (8001a8c <main+0x3bc>)
 8001830:	f000 fb2a 	bl	8001e88 <transmit_array>

	blink_orange_slow();
 8001834:	f000 faa2 	bl	8001d7c <blink_orange_slow>
	blink_orange_slow();
 8001838:	f000 faa0 	bl	8001d7c <blink_orange_slow>

	// Instantaneous phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800183c:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <main+0x3b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8001844:	4992      	ldr	r1, [pc, #584]	; (8001a90 <main+0x3c0>)
 8001846:	488d      	ldr	r0, [pc, #564]	; (8001a7c <main+0x3ac>)
 8001848:	f7ff f816 	bl	8000878 <inst_phase>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800184c:	4b8e      	ldr	r3, [pc, #568]	; (8001a88 <main+0x3b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_array(&instPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8001854:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001858:	461a      	mov	r2, r3
 800185a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185e:	488c      	ldr	r0, [pc, #560]	; (8001a90 <main+0x3c0>)
 8001860:	f000 fb12 	bl	8001e88 <transmit_array>

	blink_orange_slow();
 8001864:	f000 fa8a 	bl	8001d7c <blink_orange_slow>
	blink_orange_slow();
 8001868:	f000 fa88 	bl	8001d7c <blink_orange_slow>

	// Instantaneous unwrapped phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800186c:	4b86      	ldr	r3, [pc, #536]	; (8001a88 <main+0x3b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8001874:	4986      	ldr	r1, [pc, #536]	; (8001a90 <main+0x3c0>)
 8001876:	4881      	ldr	r0, [pc, #516]	; (8001a7c <main+0x3ac>)
 8001878:	f7fe fffe 	bl	8000878 <inst_phase>
	unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 800187c:	4985      	ldr	r1, [pc, #532]	; (8001a94 <main+0x3c4>)
 800187e:	4884      	ldr	r0, [pc, #528]	; (8001a90 <main+0x3c0>)
 8001880:	f7ff f832 	bl	80008e8 <unwrap>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001884:	4b80      	ldr	r3, [pc, #512]	; (8001a88 <main+0x3b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_array(&instUnwrappedPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 800188c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001890:	461a      	mov	r2, r3
 8001892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001896:	487f      	ldr	r0, [pc, #508]	; (8001a94 <main+0x3c4>)
 8001898:	f000 faf6 	bl	8001e88 <transmit_array>

	blink_orange_slow();
 800189c:	f000 fa6e 	bl	8001d7c <blink_orange_slow>
	blink_orange_slow();
 80018a0:	f000 fa6c 	bl	8001d7c <blink_orange_slow>

	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80018a4:	4b78      	ldr	r3, [pc, #480]	; (8001a88 <main+0x3b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 80018ac:	497a      	ldr	r1, [pc, #488]	; (8001a98 <main+0x3c8>)
 80018ae:	4873      	ldr	r0, [pc, #460]	; (8001a7c <main+0x3ac>)
 80018b0:	f7ff f8b6 	bl	8000a20 <inst_frequency>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80018b4:	4b74      	ldr	r3, [pc, #464]	; (8001a88 <main+0x3b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_array(&instFreq.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 80018bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018c0:	461a      	mov	r2, r3
 80018c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c6:	4874      	ldr	r0, [pc, #464]	; (8001a98 <main+0x3c8>)
 80018c8:	f000 fade 	bl	8001e88 <transmit_array>

	blink_orange_slow();
 80018cc:	f000 fa56 	bl	8001d7c <blink_orange_slow>
	blink_orange_slow();
 80018d0:	f000 fa54 	bl	8001d7c <blink_orange_slow>

	// Instantaneous centered normalized absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80018d4:	4b6c      	ldr	r3, [pc, #432]	; (8001a88 <main+0x3b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 80018dc:	496f      	ldr	r1, [pc, #444]	; (8001a9c <main+0x3cc>)
 80018de:	4867      	ldr	r0, [pc, #412]	; (8001a7c <main+0x3ac>)
 80018e0:	f7ff f956 	bl	8000b90 <inst_centralized_normalized_absolute>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <main+0x3b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_array(&instCNAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 80018ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018f0:	461a      	mov	r2, r3
 80018f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f6:	4869      	ldr	r0, [pc, #420]	; (8001a9c <main+0x3cc>)
 80018f8:	f000 fac6 	bl	8001e88 <transmit_array>

	blink_orange_slow();
 80018fc:	f000 fa3e 	bl	8001d7c <blink_orange_slow>
	blink_orange_slow();
 8001900:	f000 fa3c 	bl	8001d7c <blink_orange_slow>

	/*****************************************************************************************************/
	// Standard deviation of the instantaneous phase
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001904:	4b60      	ldr	r3, [pc, #384]	; (8001a88 <main+0x3b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instPhase.number[0], &ft0.number);
 800190c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001910:	4619      	mov	r1, r3
 8001912:	485f      	ldr	r0, [pc, #380]	; (8001a90 <main+0x3c0>)
 8001914:	f7ff f9b8 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001918:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <main+0x3b8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft0.bytes[0], &counter.bytes[0]);
 8001920:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001924:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fa54 	bl	8001dd8 <transmit_features>

	// Standard deviation of the absolute instantaneous phase
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001930:	4b55      	ldr	r3, [pc, #340]	; (8001a88 <main+0x3b8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 8001938:	4959      	ldr	r1, [pc, #356]	; (8001aa0 <main+0x3d0>)
 800193a:	4855      	ldr	r0, [pc, #340]	; (8001a90 <main+0x3c0>)
 800193c:	f7fe ff78 	bl	8000830 <inst_absolute>
	std_dev(&instAbsPhase.number[0], &ft1.number);
 8001940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001944:	4619      	mov	r1, r3
 8001946:	4856      	ldr	r0, [pc, #344]	; (8001aa0 <main+0x3d0>)
 8001948:	f7ff f99e 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800194c:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <main+0x3b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft1.bytes[0], &counter.bytes[0]);
 8001954:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fa3a 	bl	8001dd8 <transmit_features>

	// Standard deviation of the instantaneous frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001964:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <main+0x3b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2200      	movs	r2, #0
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instFreq.number[0], &ft2.number);
 800196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001970:	4619      	mov	r1, r3
 8001972:	4849      	ldr	r0, [pc, #292]	; (8001a98 <main+0x3c8>)
 8001974:	f7ff f988 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001978:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <main+0x3b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft2.bytes[0], &counter.bytes[0]);
 8001980:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fa24 	bl	8001dd8 <transmit_features>

	// Standard deviation of the absolute instantaneous frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001990:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <main+0x3b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 8001998:	4942      	ldr	r1, [pc, #264]	; (8001aa4 <main+0x3d4>)
 800199a:	483f      	ldr	r0, [pc, #252]	; (8001a98 <main+0x3c8>)
 800199c:	f7fe ff48 	bl	8000830 <inst_absolute>
	std_dev(&instAbsFreq.number[0], &ft3.number);
 80019a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a4:	4619      	mov	r1, r3
 80019a6:	483f      	ldr	r0, [pc, #252]	; (8001aa4 <main+0x3d4>)
 80019a8:	f7ff f96e 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <main+0x3b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft3.bytes[0], &counter.bytes[0]);
 80019b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fa0a 	bl	8001dd8 <transmit_features>

	// Standard deviation of the centralized normalized absolute amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <main+0x3b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instCNAbs.number[0], &ft4.number);
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	4619      	mov	r1, r3
 80019d2:	4832      	ldr	r0, [pc, #200]	; (8001a9c <main+0x3cc>)
 80019d4:	f7ff f958 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <main+0x3b8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft4.bytes[0], &counter.bytes[0]);
 80019e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f9f4 	bl	8001dd8 <transmit_features>

	// Standard deviation of the absolute centralized normalized absolute amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <main+0x3b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instCNAbs.number[0], &instAbsCNAbs.number[0]);
 80019f8:	492b      	ldr	r1, [pc, #172]	; (8001aa8 <main+0x3d8>)
 80019fa:	4828      	ldr	r0, [pc, #160]	; (8001a9c <main+0x3cc>)
 80019fc:	f7fe ff18 	bl	8000830 <inst_absolute>
	std_dev(&instAbsCNAbs.number[0], &ft5.number);
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4619      	mov	r1, r3
 8001a06:	4828      	ldr	r0, [pc, #160]	; (8001aa8 <main+0x3d8>)
 8001a08:	f7ff f93e 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <main+0x3b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft5.bytes[0], &counter.bytes[0]);
 8001a14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f9da 	bl	8001dd8 <transmit_features>

	// Mean Value of the Signal Magnitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <main+0x3b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
	mean_of_signal_magnitude(&instAbs.number[0], &ft6.number);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4816      	ldr	r0, [pc, #88]	; (8001a8c <main+0x3bc>)
 8001a34:	f7ff f93a 	bl	8000cac <mean_of_signal_magnitude>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <main+0x3b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft6.bytes[0], &counter.bytes[0]);
 8001a40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f9c4 	bl	8001dd8 <transmit_features>

	// Squared Mean of the Signal Magnitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <main+0x3b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
	squared_mean_of_signal_magnitude(&instAbs.number[0], &ft7.number);
 8001a58:	f107 0318 	add.w	r3, r7, #24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <main+0x3bc>)
 8001a60:	f7ff f936 	bl	8000cd0 <squared_mean_of_signal_magnitude>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <main+0x3b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft7.bytes[0], &counter.bytes[0]);
 8001a6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a70:	e01c      	b.n	8001aac <main+0x3dc>
 8001a72:	bf00      	nop
 8001a74:	240021fd 	.word	0x240021fd
 8001a78:	58020400 	.word	0x58020400
 8001a7c:	2400e82c 	.word	0x2400e82c
 8001a80:	240021fc 	.word	0x240021fc
 8001a84:	58021000 	.word	0x58021000
 8001a88:	2401577c 	.word	0x2401577c
 8001a8c:	2400820c 	.word	0x2400820c
 8001a90:	2400620c 	.word	0x2400620c
 8001a94:	24012b3c 	.word	0x24012b3c
 8001a98:	2400420c 	.word	0x2400420c
 8001a9c:	2400a20c 	.word	0x2400a20c
 8001aa0:	2400220c 	.word	0x2400220c
 8001aa4:	240001fc 	.word	0x240001fc
 8001aa8:	2400c82c 	.word	0x2400c82c
 8001aac:	f107 0318 	add.w	r3, r7, #24
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f990 	bl	8001dd8 <transmit_features>

	// Normalized Sqrt Value of Sum of Amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <main+0x4d8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
	normalized_sqrt_of_sum_of_amp(&instAbs.number[0], &ft8.number);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4839      	ldr	r0, [pc, #228]	; (8001bac <main+0x4dc>)
 8001ac8:	f7ff f920 	bl	8000d0c <normalized_sqrt_of_sum_of_amp>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <main+0x4d8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft8.bytes[0], &counter.bytes[0]);
 8001ad4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f97a 	bl	8001dd8 <transmit_features>

	// Ratio of I/Q Components
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <main+0x4d8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
	ratio_iq(&rxBuffer.number[0], &ft9.number);
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	4619      	mov	r1, r3
 8001af2:	482f      	ldr	r0, [pc, #188]	; (8001bb0 <main+0x4e0>)
 8001af4:	f7ff f942 	bl	8000d7c <ratio_iq>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <main+0x4d8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft9.bytes[0], &counter.bytes[0]);
 8001b00:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f964 	bl	8001dd8 <transmit_features>

	// Gmax
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <main+0x4d8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
	gmax(&rxBuffer.number[0], &ft10.number);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4824      	ldr	r0, [pc, #144]	; (8001bb0 <main+0x4e0>)
 8001b20:	f7ff f97e 	bl	8000e20 <gmax>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <main+0x4d8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft10.bytes[0], &counter.bytes[0]);
 8001b2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f94e 	bl	8001dd8 <transmit_features>

	// Kurtosis of the Absolute Amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <main+0x4d8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24
	kurtosis_of_abs_amplitude(&instAbs.number[0], &ft11.number, frameSize);
 8001b44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4816      	ldr	r0, [pc, #88]	; (8001bac <main+0x4dc>)
 8001b52:	f7ff fa37 	bl	8000fc4 <kurtosis_of_abs_amplitude>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <main+0x4d8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft11.bytes[0], &counter.bytes[0]);
 8001b5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f935 	bl	8001dd8 <transmit_features>

	// Kurtosis of the Absolute Frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <main+0x4d8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
	kurtosis_of_abs_freq(&instAbsFreq.number[0], &ft12.number, frameSize - 1);
 8001b76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <main+0x4e4>)
 8001b84:	f7ff fb5c 	bl	8001240 <kurtosis_of_abs_freq>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <main+0x4d8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
	transmit_features(&ft12.bytes[0], &counter.bytes[0]);
 8001b90:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f91d 	bl	8001dd8 <transmit_features>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	clear_leds();
 8001b9e:	f000 f8bd 	bl	8001d1c <clear_leds>
	while (1)
	{
		blink_orange_slow();
 8001ba2:	f000 f8eb 	bl	8001d7c <blink_orange_slow>
 8001ba6:	e7fc      	b.n	8001ba2 <main+0x4d2>
 8001ba8:	2401577c 	.word	0x2401577c
 8001bac:	2400820c 	.word	0x2400820c
 8001bb0:	2400e82c 	.word	0x2400e82c
 8001bb4:	240001fc 	.word	0x240001fc

08001bb8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0cc      	sub	sp, #304	; 0x130
 8001bbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bc2:	224c      	movs	r2, #76	; 0x4c
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f007 fa0d 	bl	8008fe6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bcc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f007 fa06 	bl	8008fe6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	23bc      	movs	r3, #188	; 0xbc
 8001be2:	461a      	mov	r2, r3
 8001be4:	2100      	movs	r1, #0
 8001be6:	f007 f9fe 	bl	8008fe6 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001bea:	2004      	movs	r0, #4
 8001bec:	f001 f98e 	bl	8002f0c <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <SystemClock_Config+0x15c>)
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <SystemClock_Config+0x15c>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <SystemClock_Config+0x15c>)
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	f003 0201 	and.w	r2, r3, #1
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <SystemClock_Config+0x160>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a41      	ldr	r2, [pc, #260]	; (8001d18 <SystemClock_Config+0x160>)
 8001c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <SystemClock_Config+0x160>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c2a:	bf00      	nop
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <SystemClock_Config+0x160>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c38:	d1f8      	bne.n	8001c2c <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c46:	2340      	movs	r3, #64	; 0x40
 8001c48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 8001c5e:	2332      	movs	r3, #50	; 0x32
 8001c60:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001c64:	2302      	movs	r3, #2
 8001c66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c76:	230c      	movs	r3, #12
 8001c78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f001 f997 	bl	8002fc0 <HAL_RCC_OscConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8001c98:	f000 f970 	bl	8001f7c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9c:	233f      	movs	r3, #63	; 0x3f
 8001c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001cb4:	2340      	movs	r3, #64	; 0x40
 8001cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001cba:	2340      	movs	r3, #64	; 0x40
 8001cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001cc8:	2340      	movs	r3, #64	; 0x40
 8001cca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fd83 	bl	80037e0 <HAL_RCC_ClockConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0x12c>
	{
		Error_Handler();
 8001ce0:	f000 f94c 	bl	8001f7c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	2202      	movs	r2, #2
 8001cea:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 f8f5 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0x150>
	{
		Error_Handler();
 8001d04:	f000 f93a 	bl	8001f7c <Error_Handler>
	}
}
 8001d08:	bf00      	nop
 8001d0a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	58000400 	.word	0x58000400
 8001d18:	58024800 	.word	0x58024800

08001d1c <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2101      	movs	r1, #1
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <clear_leds+0x28>)
 8001d26:	f001 f8a9 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	4806      	ldr	r0, [pc, #24]	; (8001d48 <clear_leds+0x2c>)
 8001d30:	f001 f8a4 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d3a:	4802      	ldr	r0, [pc, #8]	; (8001d44 <clear_leds+0x28>)
 8001d3c:	f001 f89e 	bl	8002e7c <HAL_GPIO_WritePin>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	58020400 	.word	0x58020400
 8001d48:	58021000 	.word	0x58021000

08001d4c <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d56:	4808      	ldr	r0, [pc, #32]	; (8001d78 <blink_red_fast+0x2c>)
 8001d58:	f001 f890 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001d5c:	2032      	movs	r0, #50	; 0x32
 8001d5e:	f000 fb5b 	bl	8002418 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <blink_red_fast+0x2c>)
 8001d6a:	f001 f887 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001d6e:	2032      	movs	r0, #50	; 0x32
 8001d70:	f000 fb52 	bl	8002418 <HAL_Delay>
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	58020400 	.word	0x58020400

08001d7c <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2102      	movs	r1, #2
 8001d84:	4808      	ldr	r0, [pc, #32]	; (8001da8 <blink_orange_slow+0x2c>)
 8001d86:	f001 f879 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d8e:	f000 fb43 	bl	8002418 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8001d92:	2201      	movs	r2, #1
 8001d94:	2102      	movs	r1, #2
 8001d96:	4804      	ldr	r0, [pc, #16]	; (8001da8 <blink_orange_slow+0x2c>)
 8001d98:	f001 f870 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001da0:	f000 fb3a 	bl	8002418 <HAL_Delay>
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	58021000 	.word	0x58021000

08001dac <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2101      	movs	r1, #1
 8001db4:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <blink_green+0x28>)
 8001db6:	f001 f861 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001dba:	20c8      	movs	r0, #200	; 0xc8
 8001dbc:	f000 fb2c 	bl	8002418 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <blink_green+0x28>)
 8001dc6:	f001 f859 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001dca:	20c8      	movs	r0, #200	; 0xc8
 8001dcc:	f000 fb24 	bl	8002418 <HAL_Delay>
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	58020400 	.word	0x58020400

08001dd8 <transmit_features>:
void resetDataBuffer(uint8_t *dataBuffer){
	for(uint16_t i = 1; i < 8192; i++){
		dataBuffer[i] = 0;
	}
}
void transmit_features(uint8_t *value, uint8_t *counter){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001de2:	4825      	ldr	r0, [pc, #148]	; (8001e78 <transmit_features+0xa0>)
 8001de4:	f005 f81e 	bl	8006e24 <UART_CheckIdleState>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d13f      	bne.n	8001e6e <transmit_features+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8001dee:	2204      	movs	r2, #4
 8001df0:	4922      	ldr	r1, [pc, #136]	; (8001e7c <transmit_features+0xa4>)
 8001df2:	4821      	ldr	r0, [pc, #132]	; (8001e78 <transmit_features+0xa0>)
 8001df4:	f003 fede 	bl	8005bb4 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001df8:	e001      	b.n	8001dfe <transmit_features+0x26>
			blink_red_fast();
 8001dfa:	f7ff ffa7 	bl	8001d4c <blink_red_fast>
		while(UartReady != SET){
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <transmit_features+0xa8>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d1f8      	bne.n	8001dfa <transmit_features+0x22>
		}
		UartReady = RESET;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <transmit_features+0xa8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4);
 8001e0e:	2204      	movs	r2, #4
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4819      	ldr	r0, [pc, #100]	; (8001e78 <transmit_features+0xa0>)
 8001e14:	f003 fece 	bl	8005bb4 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001e18:	e001      	b.n	8001e1e <transmit_features+0x46>
			blink_red_fast();
 8001e1a:	f7ff ff97 	bl	8001d4c <blink_red_fast>
		while(UartReady != SET){
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <transmit_features+0xa8>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d1f8      	bne.n	8001e1a <transmit_features+0x42>
		}
		UartReady = RESET;
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <transmit_features+0xa8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 8001e2e:	2204      	movs	r2, #4
 8001e30:	6839      	ldr	r1, [r7, #0]
 8001e32:	4811      	ldr	r0, [pc, #68]	; (8001e78 <transmit_features+0xa0>)
 8001e34:	f003 febe 	bl	8005bb4 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001e38:	e001      	b.n	8001e3e <transmit_features+0x66>
			blink_red_fast();
 8001e3a:	f7ff ff87 	bl	8001d4c <blink_red_fast>
		while(UartReady != SET){
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <transmit_features+0xa8>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d1f8      	bne.n	8001e3a <transmit_features+0x62>
		}
		UartReady = RESET;
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <transmit_features+0xa8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001e4e:	2204      	movs	r2, #4
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <transmit_features+0xac>)
 8001e52:	4809      	ldr	r0, [pc, #36]	; (8001e78 <transmit_features+0xa0>)
 8001e54:	f003 feae 	bl	8005bb4 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001e58:	e001      	b.n	8001e5e <transmit_features+0x86>
			blink_red_fast();
 8001e5a:	f7ff ff77 	bl	8001d4c <blink_red_fast>
		while(UartReady != SET){
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <transmit_features+0xa8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d1f8      	bne.n	8001e5a <transmit_features+0x82>
		}
		UartReady = RESET;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <transmit_features+0xa8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
	}
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	240157c8 	.word	0x240157c8
 8001e7c:	0800c8f4 	.word	0x0800c8f4
 8001e80:	240021fd 	.word	0x240021fd
 8001e84:	0800c8f8 	.word	0x0800c8f8

08001e88 <transmit_array>:
void transmit_array(uint8_t *array, uint16_t size, uint8_t *counter){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	460b      	mov	r3, r1
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	817b      	strh	r3, [r7, #10]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001e96:	4825      	ldr	r0, [pc, #148]	; (8001f2c <transmit_array+0xa4>)
 8001e98:	f004 ffc4 	bl	8006e24 <UART_CheckIdleState>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d140      	bne.n	8001f24 <transmit_array+0x9c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4922      	ldr	r1, [pc, #136]	; (8001f30 <transmit_array+0xa8>)
 8001ea6:	4821      	ldr	r0, [pc, #132]	; (8001f2c <transmit_array+0xa4>)
 8001ea8:	f003 fe84 	bl	8005bb4 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001eac:	e001      	b.n	8001eb2 <transmit_array+0x2a>
			blink_red_fast();
 8001eae:	f7ff ff4d 	bl	8001d4c <blink_red_fast>
		while(UartReady != SET){
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <transmit_array+0xac>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d1f8      	bne.n	8001eae <transmit_array+0x26>
		}
		UartReady = RESET;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <transmit_array+0xac>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 8001ec2:	897b      	ldrh	r3, [r7, #10]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	4818      	ldr	r0, [pc, #96]	; (8001f2c <transmit_array+0xa4>)
 8001eca:	f003 fe73 	bl	8005bb4 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001ece:	e001      	b.n	8001ed4 <transmit_array+0x4c>
			blink_red_fast();
 8001ed0:	f7ff ff3c 	bl	8001d4c <blink_red_fast>
		while(UartReady != SET){
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <transmit_array+0xac>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d1f8      	bne.n	8001ed0 <transmit_array+0x48>
		}
		UartReady = RESET;
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <transmit_array+0xac>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4810      	ldr	r0, [pc, #64]	; (8001f2c <transmit_array+0xa4>)
 8001eea:	f003 fe63 	bl	8005bb4 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001eee:	e001      	b.n	8001ef4 <transmit_array+0x6c>
			blink_red_fast();
 8001ef0:	f7ff ff2c 	bl	8001d4c <blink_red_fast>
		while(UartReady != SET){
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <transmit_array+0xac>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d1f8      	bne.n	8001ef0 <transmit_array+0x68>
		}
		UartReady = RESET;
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <transmit_array+0xac>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001f04:	2204      	movs	r2, #4
 8001f06:	490c      	ldr	r1, [pc, #48]	; (8001f38 <transmit_array+0xb0>)
 8001f08:	4808      	ldr	r0, [pc, #32]	; (8001f2c <transmit_array+0xa4>)
 8001f0a:	f003 fe53 	bl	8005bb4 <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001f0e:	e001      	b.n	8001f14 <transmit_array+0x8c>
			blink_red_fast();
 8001f10:	f7ff ff1c 	bl	8001d4c <blink_red_fast>
		while(UartReady != SET){
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <transmit_array+0xac>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d1f8      	bne.n	8001f10 <transmit_array+0x88>
		}
		UartReady = RESET;
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <transmit_array+0xac>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
	}
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	240157c8 	.word	0x240157c8
 8001f30:	0800c8f4 	.word	0x0800c8f4
 8001f34:	240021fd 	.word	0x240021fd
 8001f38:	0800c8f8 	.word	0x0800c8f8

08001f3c <HAL_UART_TxCpltCallback>:
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100);
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <HAL_UART_TxCpltCallback+0x1c>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	240021fd 	.word	0x240021fd

08001f5c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_UART_RxCpltCallback+0x1c>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	240021fd 	.word	0x240021fd

08001f7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_MspInit+0x30>)
 8001f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f98:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_MspInit+0x30>)
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_MspInit+0x30>)
 8001fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	58024400 	.word	0x58024400

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <HardFault_Handler+0x4>

08001fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <MemManage_Handler+0x4>

08001fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <BusFault_Handler+0x4>

08001fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <UsageFault_Handler+0x4>

08001fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002014:	f000 f9e0 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <USART3_IRQHandler+0x10>)
 8002022:	f003 ff23 	bl	8005e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	240157c8 	.word	0x240157c8

08002030 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <_sbrk+0x50>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <_sbrk+0x16>
		heap_end = &end;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <_sbrk+0x50>)
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <_sbrk+0x54>)
 8002044:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <_sbrk+0x50>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <_sbrk+0x50>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	466a      	mov	r2, sp
 8002056:	4293      	cmp	r3, r2
 8002058:	d907      	bls.n	800206a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800205a:	f006 ff7f 	bl	8008f5c <__errno>
 800205e:	4602      	mov	r2, r0
 8002060:	230c      	movs	r3, #12
 8002062:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	e006      	b.n	8002078 <_sbrk+0x48>
	}

	heap_end += incr;
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <_sbrk+0x50>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	4a03      	ldr	r2, [pc, #12]	; (8002080 <_sbrk+0x50>)
 8002074:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	24002200 	.word	0x24002200
 8002084:	24015860 	.word	0x24015860

08002088 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208e:	f107 0310 	add.w	r3, r7, #16
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <MX_TIM2_Init+0x98>)
 80020a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <MX_TIM2_Init+0x98>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_TIM2_Init+0x98>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_TIM2_Init+0x98>)
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <MX_TIM2_Init+0x98>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MX_TIM2_Init+0x98>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020ce:	4814      	ldr	r0, [pc, #80]	; (8002120 <MX_TIM2_Init+0x98>)
 80020d0:	f003 fa0a 	bl	80054e8 <HAL_TIM_Base_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80020da:	f7ff ff4f 	bl	8001f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4619      	mov	r1, r3
 80020ea:	480d      	ldr	r0, [pc, #52]	; (8002120 <MX_TIM2_Init+0x98>)
 80020ec:	f003 fa82 	bl	80055f4 <HAL_TIM_ConfigClockSource>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80020f6:	f7ff ff41 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <MX_TIM2_Init+0x98>)
 8002108:	f003 fc7c 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002112:	f7ff ff33 	bl	8001f7c <Error_Handler>
  }

}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2401577c 	.word	0x2401577c

08002124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 8002138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213c:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 8002148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	58024400 	.word	0x58024400

08002164 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 800216a:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <MX_USART3_UART_Init+0x94>)
 800216c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 8002170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002174:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 800218a:	220c      	movs	r2, #12
 800218c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021ac:	4811      	ldr	r0, [pc, #68]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 80021ae:	f003 fcb1 	bl	8005b14 <HAL_UART_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021b8:	f7ff fee0 	bl	8001f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021bc:	2100      	movs	r1, #0
 80021be:	480d      	ldr	r0, [pc, #52]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 80021c0:	f005 fa6d 	bl	800769e <HAL_UARTEx_SetTxFifoThreshold>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021ca:	f7ff fed7 	bl	8001f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ce:	2100      	movs	r1, #0
 80021d0:	4808      	ldr	r0, [pc, #32]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 80021d2:	f005 faa2 	bl	800771a <HAL_UARTEx_SetRxFifoThreshold>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021dc:	f7ff fece 	bl	8001f7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021e0:	4804      	ldr	r0, [pc, #16]	; (80021f4 <MX_USART3_UART_Init+0x90>)
 80021e2:	f005 fa23 	bl	800762c <HAL_UARTEx_DisableFifoMode>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021ec:	f7ff fec6 	bl	8001f7c <Error_Handler>
  }

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	240157c8 	.word	0x240157c8
 80021f8:	40004800 	.word	0x40004800

080021fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <HAL_UART_MspInit+0x98>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d136      	bne.n	800228c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_UART_MspInit+0x9c>)
 8002220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002224:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <HAL_UART_MspInit+0x9c>)
 8002226:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_UART_MspInit+0x9c>)
 8002230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800223c:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_UART_MspInit+0x9c>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002242:	4a15      	ldr	r2, [pc, #84]	; (8002298 <HAL_UART_MspInit+0x9c>)
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_UART_MspInit+0x9c>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800225a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800226c:	2307      	movs	r3, #7
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	4809      	ldr	r0, [pc, #36]	; (800229c <HAL_UART_MspInit+0xa0>)
 8002278:	f000 fc50 	bl	8002b1c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	2027      	movs	r0, #39	; 0x27
 8002282:	f000 f9d2 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002286:	2027      	movs	r0, #39	; 0x27
 8002288:	f000 f9e9 	bl	800265e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40004800 	.word	0x40004800
 8002298:	58024400 	.word	0x58024400
 800229c:	58020c00 	.word	0x58020c00

080022a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022a6:	e003      	b.n	80022b0 <LoopCopyDataInit>

080022a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022ae:	3104      	adds	r1, #4

080022b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022b0:	480b      	ldr	r0, [pc, #44]	; (80022e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022b8:	d3f6      	bcc.n	80022a8 <CopyDataInit>
  ldr  r2, =_sbss
 80022ba:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022bc:	e002      	b.n	80022c4 <LoopFillZerobss>

080022be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022c0:	f842 3b04 	str.w	r3, [r2], #4

080022c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022c8:	d3f9      	bcc.n	80022be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ca:	f7fe fa41 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ce:	f006 fe4b 	bl	8008f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d2:	f7ff f9fd 	bl	80016d0 <main>
  bx  lr    
 80022d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022dc:	080129d0 	.word	0x080129d0
  ldr  r0, =_sdata
 80022e0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80022e4:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 80022e8:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 80022ec:	2401585c 	.word	0x2401585c

080022f0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC3_IRQHandler>
	...

080022f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fa:	2003      	movs	r0, #3
 80022fc:	f000 f98a 	bl	8002614 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002300:	f001 fc24 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8002304:	4601      	mov	r1, r0
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_Init+0x68>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_Init+0x6c>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa21 f303 	lsr.w	r3, r1, r3
 800231c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_Init+0x68>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <HAL_Init+0x6c>)
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <HAL_Init+0x70>)
 8002336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002338:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <HAL_Init+0x74>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800233e:	2000      	movs	r0, #0
 8002340:	f000 f814 	bl	800236c <HAL_InitTick>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e002      	b.n	8002354 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800234e:	f7ff fe1d 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	58024400 	.word	0x58024400
 8002360:	0800c8e0 	.word	0x0800c8e0
 8002364:	24000004 	.word	0x24000004
 8002368:	24000000 	.word	0x24000000

0800236c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_InitTick+0x60>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e021      	b.n	80023c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_InitTick+0x64>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_InitTick+0x60>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f96f 	bl	800267a <HAL_SYSTICK_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00e      	b.n	80023c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0f      	cmp	r3, #15
 80023aa:	d80a      	bhi.n	80023c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ac:	2200      	movs	r2, #0
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f000 f939 	bl	800262a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <HAL_InitTick+0x68>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	2400000c 	.word	0x2400000c
 80023d0:	24000000 	.word	0x24000000
 80023d4:	24000008 	.word	0x24000008

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	2400000c 	.word	0x2400000c
 80023fc:	24015854 	.word	0x24015854

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	24015854 	.word	0x24015854

08002418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ffee 	bl	8002400 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d005      	beq.n	800243e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_Delay+0x40>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800243e:	bf00      	nop
 8002440:	f7ff ffde 	bl	8002400 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d8f7      	bhi.n	8002440 <HAL_Delay+0x28>
  {
  }
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2400000c 	.word	0x2400000c

0800245c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_GetREVID+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0c1b      	lsrs	r3, r3, #16
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	5c001000 	.word	0x5c001000

08002474 <__NVIC_SetPriorityGrouping>:
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <__NVIC_SetPriorityGrouping+0x40>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a2:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <__NVIC_SetPriorityGrouping+0x40>)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	60d3      	str	r3, [r2, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00
 80024b8:	05fa0000 	.word	0x05fa0000

080024bc <__NVIC_GetPriorityGrouping>:
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <__NVIC_GetPriorityGrouping+0x18>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 0307 	and.w	r3, r3, #7
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_EnableIRQ>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db0b      	blt.n	8002502 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4907      	ldr	r1, [pc, #28]	; (8002510 <__NVIC_EnableIRQ+0x38>)
 80024f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2001      	movs	r0, #1
 80024fa:	fa00 f202 	lsl.w	r2, r0, r2
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e100 	.word	0xe000e100

08002514 <__NVIC_SetPriority>:
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db0a      	blt.n	800253e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	490c      	ldr	r1, [pc, #48]	; (8002560 <__NVIC_SetPriority+0x4c>)
 800252e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	440b      	add	r3, r1
 8002538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800253c:	e00a      	b.n	8002554 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4908      	ldr	r1, [pc, #32]	; (8002564 <__NVIC_SetPriority+0x50>)
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3b04      	subs	r3, #4
 800254c:	0112      	lsls	r2, r2, #4
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	440b      	add	r3, r1
 8002552:	761a      	strb	r2, [r3, #24]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000e100 	.word	0xe000e100
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <NVIC_EncodePriority>:
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f1c3 0307 	rsb	r3, r3, #7
 8002582:	2b04      	cmp	r3, #4
 8002584:	bf28      	it	cs
 8002586:	2304      	movcs	r3, #4
 8002588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3304      	adds	r3, #4
 800258e:	2b06      	cmp	r3, #6
 8002590:	d902      	bls.n	8002598 <NVIC_EncodePriority+0x30>
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3b03      	subs	r3, #3
 8002596:	e000      	b.n	800259a <NVIC_EncodePriority+0x32>
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	f04f 32ff 	mov.w	r2, #4294967295
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43d9      	mvns	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	4313      	orrs	r3, r2
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e0:	d301      	bcc.n	80025e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00f      	b.n	8002606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <SysTick_Config+0x40>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ee:	210f      	movs	r1, #15
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f7ff ff8e 	bl	8002514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <SysTick_Config+0x40>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fe:	4b04      	ldr	r3, [pc, #16]	; (8002610 <SysTick_Config+0x40>)
 8002600:	2207      	movs	r2, #7
 8002602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff29 	bl	8002474 <__NVIC_SetPriorityGrouping>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002638:	f7ff ff40 	bl	80024bc <__NVIC_GetPriorityGrouping>
 800263c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	6978      	ldr	r0, [r7, #20]
 8002644:	f7ff ff90 	bl	8002568 <NVIC_EncodePriority>
 8002648:	4602      	mov	r2, r0
 800264a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff5f 	bl	8002514 <__NVIC_SetPriority>
}
 8002656:	bf00      	nop
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff33 	bl	80024d8 <__NVIC_EnableIRQ>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ffa4 	bl	80025d0 <SysTick_Config>
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e205      	b.n	8002ab2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e1fa      	b.n	8002ab2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a8c      	ldr	r2, [pc, #560]	; (80028f4 <HAL_DMA_Abort_IT+0x260>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d04a      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a8b      	ldr	r2, [pc, #556]	; (80028f8 <HAL_DMA_Abort_IT+0x264>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d045      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a89      	ldr	r2, [pc, #548]	; (80028fc <HAL_DMA_Abort_IT+0x268>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d040      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a88      	ldr	r2, [pc, #544]	; (8002900 <HAL_DMA_Abort_IT+0x26c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d03b      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a86      	ldr	r2, [pc, #536]	; (8002904 <HAL_DMA_Abort_IT+0x270>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d036      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a85      	ldr	r2, [pc, #532]	; (8002908 <HAL_DMA_Abort_IT+0x274>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d031      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a83      	ldr	r2, [pc, #524]	; (800290c <HAL_DMA_Abort_IT+0x278>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02c      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a82      	ldr	r2, [pc, #520]	; (8002910 <HAL_DMA_Abort_IT+0x27c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d027      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a80      	ldr	r2, [pc, #512]	; (8002914 <HAL_DMA_Abort_IT+0x280>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d022      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7f      	ldr	r2, [pc, #508]	; (8002918 <HAL_DMA_Abort_IT+0x284>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d01d      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a7d      	ldr	r2, [pc, #500]	; (800291c <HAL_DMA_Abort_IT+0x288>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d018      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7c      	ldr	r2, [pc, #496]	; (8002920 <HAL_DMA_Abort_IT+0x28c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a7a      	ldr	r2, [pc, #488]	; (8002924 <HAL_DMA_Abort_IT+0x290>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00e      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a79      	ldr	r2, [pc, #484]	; (8002928 <HAL_DMA_Abort_IT+0x294>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d009      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a77      	ldr	r2, [pc, #476]	; (800292c <HAL_DMA_Abort_IT+0x298>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a76      	ldr	r2, [pc, #472]	; (8002930 <HAL_DMA_Abort_IT+0x29c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Abort_IT+0xcc>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_DMA_Abort_IT+0xce>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d065      	beq.n	8002832 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2204      	movs	r2, #4
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a60      	ldr	r2, [pc, #384]	; (80028f4 <HAL_DMA_Abort_IT+0x260>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04a      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a5e      	ldr	r2, [pc, #376]	; (80028f8 <HAL_DMA_Abort_IT+0x264>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d045      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a5d      	ldr	r2, [pc, #372]	; (80028fc <HAL_DMA_Abort_IT+0x268>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d040      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <HAL_DMA_Abort_IT+0x26c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d03b      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5a      	ldr	r2, [pc, #360]	; (8002904 <HAL_DMA_Abort_IT+0x270>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d036      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a58      	ldr	r2, [pc, #352]	; (8002908 <HAL_DMA_Abort_IT+0x274>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a57      	ldr	r2, [pc, #348]	; (800290c <HAL_DMA_Abort_IT+0x278>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02c      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a55      	ldr	r2, [pc, #340]	; (8002910 <HAL_DMA_Abort_IT+0x27c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d027      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a54      	ldr	r2, [pc, #336]	; (8002914 <HAL_DMA_Abort_IT+0x280>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_DMA_Abort_IT+0x284>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a51      	ldr	r2, [pc, #324]	; (800291c <HAL_DMA_Abort_IT+0x288>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a4f      	ldr	r2, [pc, #316]	; (8002920 <HAL_DMA_Abort_IT+0x28c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a4e      	ldr	r2, [pc, #312]	; (8002924 <HAL_DMA_Abort_IT+0x290>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4c      	ldr	r2, [pc, #304]	; (8002928 <HAL_DMA_Abort_IT+0x294>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a4b      	ldr	r2, [pc, #300]	; (800292c <HAL_DMA_Abort_IT+0x298>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_DMA_Abort_IT+0x17a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a49      	ldr	r2, [pc, #292]	; (8002930 <HAL_DMA_Abort_IT+0x29c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <HAL_DMA_Abort_IT+0x18c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e147      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x41c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e13e      	b.n	8002ab0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 020e 	bic.w	r2, r2, #14
 8002840:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <HAL_DMA_Abort_IT+0x260>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d04a      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <HAL_DMA_Abort_IT+0x264>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d045      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a28      	ldr	r2, [pc, #160]	; (80028fc <HAL_DMA_Abort_IT+0x268>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d040      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a26      	ldr	r2, [pc, #152]	; (8002900 <HAL_DMA_Abort_IT+0x26c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d03b      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a25      	ldr	r2, [pc, #148]	; (8002904 <HAL_DMA_Abort_IT+0x270>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d036      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a23      	ldr	r2, [pc, #140]	; (8002908 <HAL_DMA_Abort_IT+0x274>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_DMA_Abort_IT+0x278>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d02c      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a20      	ldr	r2, [pc, #128]	; (8002910 <HAL_DMA_Abort_IT+0x27c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d027      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <HAL_DMA_Abort_IT+0x280>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d022      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_DMA_Abort_IT+0x284>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01d      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <HAL_DMA_Abort_IT+0x288>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_DMA_Abort_IT+0x28c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_DMA_Abort_IT+0x290>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_DMA_Abort_IT+0x294>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_DMA_Abort_IT+0x298>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x24e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <HAL_DMA_Abort_IT+0x29c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d128      	bne.n	8002934 <HAL_DMA_Abort_IT+0x2a0>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e027      	b.n	8002944 <HAL_DMA_Abort_IT+0x2b0>
 80028f4:	40020010 	.word	0x40020010
 80028f8:	40020028 	.word	0x40020028
 80028fc:	40020040 	.word	0x40020040
 8002900:	40020058 	.word	0x40020058
 8002904:	40020070 	.word	0x40020070
 8002908:	40020088 	.word	0x40020088
 800290c:	400200a0 	.word	0x400200a0
 8002910:	400200b8 	.word	0x400200b8
 8002914:	40020410 	.word	0x40020410
 8002918:	40020428 	.word	0x40020428
 800291c:	40020440 	.word	0x40020440
 8002920:	40020458 	.word	0x40020458
 8002924:	40020470 	.word	0x40020470
 8002928:	40020488 	.word	0x40020488
 800292c:	400204a0 	.word	0x400204a0
 8002930:	400204b8 	.word	0x400204b8
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5c      	ldr	r2, [pc, #368]	; (8002abc <HAL_DMA_Abort_IT+0x428>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d072      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a5b      	ldr	r2, [pc, #364]	; (8002ac0 <HAL_DMA_Abort_IT+0x42c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d06d      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a59      	ldr	r2, [pc, #356]	; (8002ac4 <HAL_DMA_Abort_IT+0x430>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d068      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_DMA_Abort_IT+0x434>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d063      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a56      	ldr	r2, [pc, #344]	; (8002acc <HAL_DMA_Abort_IT+0x438>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d05e      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a55      	ldr	r2, [pc, #340]	; (8002ad0 <HAL_DMA_Abort_IT+0x43c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d059      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a53      	ldr	r2, [pc, #332]	; (8002ad4 <HAL_DMA_Abort_IT+0x440>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d054      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_DMA_Abort_IT+0x444>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d04f      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a50      	ldr	r2, [pc, #320]	; (8002adc <HAL_DMA_Abort_IT+0x448>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d04a      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a4f      	ldr	r2, [pc, #316]	; (8002ae0 <HAL_DMA_Abort_IT+0x44c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d045      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a4d      	ldr	r2, [pc, #308]	; (8002ae4 <HAL_DMA_Abort_IT+0x450>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d040      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a4c      	ldr	r2, [pc, #304]	; (8002ae8 <HAL_DMA_Abort_IT+0x454>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d03b      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a4a      	ldr	r2, [pc, #296]	; (8002aec <HAL_DMA_Abort_IT+0x458>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d036      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a49      	ldr	r2, [pc, #292]	; (8002af0 <HAL_DMA_Abort_IT+0x45c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d031      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a47      	ldr	r2, [pc, #284]	; (8002af4 <HAL_DMA_Abort_IT+0x460>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02c      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a46      	ldr	r2, [pc, #280]	; (8002af8 <HAL_DMA_Abort_IT+0x464>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d027      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a44      	ldr	r2, [pc, #272]	; (8002afc <HAL_DMA_Abort_IT+0x468>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d022      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a43      	ldr	r2, [pc, #268]	; (8002b00 <HAL_DMA_Abort_IT+0x46c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d01d      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a41      	ldr	r2, [pc, #260]	; (8002b04 <HAL_DMA_Abort_IT+0x470>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d018      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <HAL_DMA_Abort_IT+0x474>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a3e      	ldr	r2, [pc, #248]	; (8002b0c <HAL_DMA_Abort_IT+0x478>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00e      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a3d      	ldr	r2, [pc, #244]	; (8002b10 <HAL_DMA_Abort_IT+0x47c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d009      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3b      	ldr	r2, [pc, #236]	; (8002b14 <HAL_DMA_Abort_IT+0x480>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d004      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x3a0>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <HAL_DMA_Abort_IT+0x484>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_DMA_Abort_IT+0x3a4>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_DMA_Abort_IT+0x3a6>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d028      	beq.n	8002a90 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40020010 	.word	0x40020010
 8002ac0:	40020028 	.word	0x40020028
 8002ac4:	40020040 	.word	0x40020040
 8002ac8:	40020058 	.word	0x40020058
 8002acc:	40020070 	.word	0x40020070
 8002ad0:	40020088 	.word	0x40020088
 8002ad4:	400200a0 	.word	0x400200a0
 8002ad8:	400200b8 	.word	0x400200b8
 8002adc:	40020410 	.word	0x40020410
 8002ae0:	40020428 	.word	0x40020428
 8002ae4:	40020440 	.word	0x40020440
 8002ae8:	40020458 	.word	0x40020458
 8002aec:	40020470 	.word	0x40020470
 8002af0:	40020488 	.word	0x40020488
 8002af4:	400204a0 	.word	0x400204a0
 8002af8:	400204b8 	.word	0x400204b8
 8002afc:	58025408 	.word	0x58025408
 8002b00:	5802541c 	.word	0x5802541c
 8002b04:	58025430 	.word	0x58025430
 8002b08:	58025444 	.word	0x58025444
 8002b0c:	58025458 	.word	0x58025458
 8002b10:	5802546c 	.word	0x5802546c
 8002b14:	58025480 	.word	0x58025480
 8002b18:	58025494 	.word	0x58025494

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b2a:	4b89      	ldr	r3, [pc, #548]	; (8002d50 <HAL_GPIO_Init+0x234>)
 8002b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b2e:	e194      	b.n	8002e5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2101      	movs	r1, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8186 	beq.w	8002e54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d00b      	beq.n	8002b68 <HAL_GPIO_Init+0x4c>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d007      	beq.n	8002b68 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b5c:	2b11      	cmp	r3, #17
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b12      	cmp	r3, #18
 8002b66:	d130      	bne.n	8002bca <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f003 0201 	and.w	r2, r3, #1
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0xee>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b12      	cmp	r3, #18
 8002c08:	d123      	bne.n	8002c52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	08da      	lsrs	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3208      	adds	r2, #8
 8002c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	220f      	movs	r2, #15
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	69b9      	ldr	r1, [r7, #24]
 8002c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0203 	and.w	r2, r3, #3
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80e0 	beq.w	8002e54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c94:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_GPIO_Init+0x238>)
 8002c96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c9a:	4a2e      	ldr	r2, [pc, #184]	; (8002d54 <HAL_GPIO_Init+0x238>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_GPIO_Init+0x238>)
 8002ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb2:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <HAL_GPIO_Init+0x23c>)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	220f      	movs	r2, #15
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <HAL_GPIO_Init+0x240>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d052      	beq.n	8002d84 <HAL_GPIO_Init+0x268>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1f      	ldr	r2, [pc, #124]	; (8002d60 <HAL_GPIO_Init+0x244>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d031      	beq.n	8002d4a <HAL_GPIO_Init+0x22e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <HAL_GPIO_Init+0x248>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02b      	beq.n	8002d46 <HAL_GPIO_Init+0x22a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <HAL_GPIO_Init+0x24c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d025      	beq.n	8002d42 <HAL_GPIO_Init+0x226>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_GPIO_Init+0x250>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <HAL_GPIO_Init+0x222>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_GPIO_Init+0x254>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d019      	beq.n	8002d3a <HAL_GPIO_Init+0x21e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_GPIO_Init+0x258>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <HAL_GPIO_Init+0x21a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <HAL_GPIO_Init+0x25c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00d      	beq.n	8002d32 <HAL_GPIO_Init+0x216>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_GPIO_Init+0x260>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <HAL_GPIO_Init+0x212>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <HAL_GPIO_Init+0x264>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_GPIO_Init+0x20e>
 8002d26:	2309      	movs	r3, #9
 8002d28:	e02d      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d2a:	230a      	movs	r3, #10
 8002d2c:	e02b      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d2e:	2308      	movs	r3, #8
 8002d30:	e029      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d32:	2307      	movs	r3, #7
 8002d34:	e027      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d36:	2306      	movs	r3, #6
 8002d38:	e025      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	e023      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	e021      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d42:	2303      	movs	r3, #3
 8002d44:	e01f      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e01d      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e01b      	b.n	8002d86 <HAL_GPIO_Init+0x26a>
 8002d4e:	bf00      	nop
 8002d50:	58000080 	.word	0x58000080
 8002d54:	58024400 	.word	0x58024400
 8002d58:	58000400 	.word	0x58000400
 8002d5c:	58020000 	.word	0x58020000
 8002d60:	58020400 	.word	0x58020400
 8002d64:	58020800 	.word	0x58020800
 8002d68:	58020c00 	.word	0x58020c00
 8002d6c:	58021000 	.word	0x58021000
 8002d70:	58021400 	.word	0x58021400
 8002d74:	58021800 	.word	0x58021800
 8002d78:	58021c00 	.word	0x58021c00
 8002d7c:	58022000 	.word	0x58022000
 8002d80:	58022400 	.word	0x58022400
 8002d84:	2300      	movs	r3, #0
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	f002 0203 	and.w	r2, r2, #3
 8002d8c:	0092      	lsls	r2, r2, #2
 8002d8e:	4093      	lsls	r3, r2
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d96:	4938      	ldr	r1, [pc, #224]	; (8002e78 <HAL_GPIO_Init+0x35c>)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3301      	adds	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f47f ae63 	bne.w	8002b30 <HAL_GPIO_Init+0x14>
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	3724      	adds	r7, #36	; 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	58000400 	.word	0x58000400

08002e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e98:	e003      	b.n	8002ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002eb8:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_HSEM_FastTake+0x2c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3320      	adds	r3, #32
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <HAL_HSEM_FastTake+0x30>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	58026400 	.word	0x58026400
 8002ee0:	80000300 	.word	0x80000300

08002ee4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002eee:	4906      	ldr	r1, [pc, #24]	; (8002f08 <HAL_HSEM_Release+0x24>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	58026400 	.word	0x58026400

08002f0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d00a      	beq.n	8002f36 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f20:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e040      	b.n	8002fb4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e03e      	b.n	8002fb4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f36:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002f3e:	491f      	ldr	r1, [pc, #124]	; (8002fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f46:	f7ff fa5b 	bl	8002400 <HAL_GetTick>
 8002f4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f4c:	e009      	b.n	8002f62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f4e:	f7ff fa57 	bl	8002400 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f5c:	d901      	bls.n	8002f62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e028      	b.n	8002fb4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b1e      	cmp	r3, #30
 8002f74:	d008      	beq.n	8002f88 <HAL_PWREx_ConfigSupply+0x7c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b2e      	cmp	r3, #46	; 0x2e
 8002f7a:	d005      	beq.n	8002f88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b1d      	cmp	r3, #29
 8002f80:	d002      	beq.n	8002f88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b2d      	cmp	r3, #45	; 0x2d
 8002f86:	d114      	bne.n	8002fb2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f88:	f7ff fa3a 	bl	8002400 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f8e:	e009      	b.n	8002fa4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f90:	f7ff fa36 	bl	8002400 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f9e:	d901      	bls.n	8002fa4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e007      	b.n	8002fb4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d1ee      	bne.n	8002f90 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	58024800 	.word	0x58024800

08002fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08c      	sub	sp, #48	; 0x30
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e3ff      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8087 	beq.w	80030ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe0:	4b99      	ldr	r3, [pc, #612]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fea:	4b97      	ldr	r3, [pc, #604]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d007      	beq.n	8003006 <HAL_RCC_OscConfig+0x46>
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	2b18      	cmp	r3, #24
 8002ffa:	d110      	bne.n	800301e <HAL_RCC_OscConfig+0x5e>
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d10b      	bne.n	800301e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003006:	4b90      	ldr	r3, [pc, #576]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d06c      	beq.n	80030ec <HAL_RCC_OscConfig+0x12c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d168      	bne.n	80030ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e3d9      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x76>
 8003028:	4b87      	ldr	r3, [pc, #540]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a86      	ldr	r2, [pc, #536]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800302e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	e02e      	b.n	8003094 <HAL_RCC_OscConfig+0xd4>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x98>
 800303e:	4b82      	ldr	r3, [pc, #520]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a81      	ldr	r2, [pc, #516]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b7f      	ldr	r3, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7e      	ldr	r2, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e01d      	b.n	8003094 <HAL_RCC_OscConfig+0xd4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0xbc>
 8003062:	4b79      	ldr	r3, [pc, #484]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a78      	ldr	r2, [pc, #480]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0xd4>
 800307c:	4b72      	ldr	r3, [pc, #456]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a71      	ldr	r2, [pc, #452]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7ff f9b0 	bl	8002400 <HAL_GetTick>
 80030a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7ff f9ac 	bl	8002400 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e38d      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030b6:	4b64      	ldr	r3, [pc, #400]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0xe4>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7ff f99c 	bl	8002400 <HAL_GetTick>
 80030c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7ff f998 	bl	8002400 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e379      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030de:	4b5a      	ldr	r3, [pc, #360]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x10c>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80ae 	beq.w	8003258 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fc:	4b52      	ldr	r3, [pc, #328]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003104:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003106:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_RCC_OscConfig+0x162>
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	2b18      	cmp	r3, #24
 8003116:	d13a      	bne.n	800318e <HAL_RCC_OscConfig+0x1ce>
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d135      	bne.n	800318e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003122:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x17a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e34b      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	f7ff f98f 	bl	800245c <HAL_GetREVID>
 800313e:	4602      	mov	r2, r0
 8003140:	f241 0303 	movw	r3, #4099	; 0x1003
 8003144:	429a      	cmp	r2, r3
 8003146:	d817      	bhi.n	8003178 <HAL_RCC_OscConfig+0x1b8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d108      	bne.n	8003162 <HAL_RCC_OscConfig+0x1a2>
 8003150:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003158:	4a3b      	ldr	r2, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800315a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	e07a      	b.n	8003258 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	031b      	lsls	r3, r3, #12
 8003170:	4935      	ldr	r1, [pc, #212]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003176:	e06f      	b.n	8003258 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b33      	ldr	r3, [pc, #204]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	4930      	ldr	r1, [pc, #192]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800318c:	e064      	b.n	8003258 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d045      	beq.n	8003222 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 0219 	bic.w	r2, r3, #25
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4929      	ldr	r1, [pc, #164]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7ff f92a 	bl	8002400 <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b0:	f7ff f926 	bl	8002400 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e307      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c2:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	f7ff f945 	bl	800245c <HAL_GetREVID>
 80031d2:	4602      	mov	r2, r0
 80031d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80031d8:	429a      	cmp	r2, r3
 80031da:	d817      	bhi.n	800320c <HAL_RCC_OscConfig+0x24c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d108      	bne.n	80031f6 <HAL_RCC_OscConfig+0x236>
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031ec:	4a16      	ldr	r2, [pc, #88]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f2:	6053      	str	r3, [r2, #4]
 80031f4:	e030      	b.n	8003258 <HAL_RCC_OscConfig+0x298>
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	031b      	lsls	r3, r3, #12
 8003204:	4910      	ldr	r1, [pc, #64]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
 800320a:	e025      	b.n	8003258 <HAL_RCC_OscConfig+0x298>
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	490b      	ldr	r1, [pc, #44]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
 8003220:	e01a      	b.n	8003258 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a08      	ldr	r2, [pc, #32]	; (8003248 <HAL_RCC_OscConfig+0x288>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7ff f8e7 	bl	8002400 <HAL_GetTick>
 8003232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003236:	f7ff f8e3 	bl	8002400 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d903      	bls.n	800324c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e2c4      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
 8003248:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800324c:	4ba4      	ldr	r3, [pc, #656]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ee      	bne.n	8003236 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a9 	beq.w	80033b8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003266:	4b9e      	ldr	r3, [pc, #632]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800326e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003270:	4b9b      	ldr	r3, [pc, #620]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d007      	beq.n	800328c <HAL_RCC_OscConfig+0x2cc>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b18      	cmp	r3, #24
 8003280:	d13a      	bne.n	80032f8 <HAL_RCC_OscConfig+0x338>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d135      	bne.n	80032f8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800328c:	4b94      	ldr	r3, [pc, #592]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_OscConfig+0x2e4>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b80      	cmp	r3, #128	; 0x80
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e296      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032a4:	f7ff f8da 	bl	800245c <HAL_GetREVID>
 80032a8:	4602      	mov	r2, r0
 80032aa:	f241 0303 	movw	r3, #4099	; 0x1003
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d817      	bhi.n	80032e2 <HAL_RCC_OscConfig+0x322>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d108      	bne.n	80032cc <HAL_RCC_OscConfig+0x30c>
 80032ba:	4b89      	ldr	r3, [pc, #548]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80032c2:	4a87      	ldr	r2, [pc, #540]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80032c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ca:	e075      	b.n	80033b8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032cc:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	069b      	lsls	r3, r3, #26
 80032da:	4981      	ldr	r1, [pc, #516]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032e0:	e06a      	b.n	80033b8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032e2:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	497b      	ldr	r1, [pc, #492]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032f6:	e05f      	b.n	80033b8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d042      	beq.n	8003386 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003300:	4b77      	ldr	r3, [pc, #476]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a76      	ldr	r2, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7ff f878 	bl	8002400 <HAL_GetTick>
 8003310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003314:	f7ff f874 	bl	8002400 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e255      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003326:	4b6e      	ldr	r3, [pc, #440]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003332:	f7ff f893 	bl	800245c <HAL_GetREVID>
 8003336:	4602      	mov	r2, r0
 8003338:	f241 0303 	movw	r3, #4099	; 0x1003
 800333c:	429a      	cmp	r2, r3
 800333e:	d817      	bhi.n	8003370 <HAL_RCC_OscConfig+0x3b0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	2b20      	cmp	r3, #32
 8003346:	d108      	bne.n	800335a <HAL_RCC_OscConfig+0x39a>
 8003348:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003350:	4a63      	ldr	r2, [pc, #396]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003356:	6053      	str	r3, [r2, #4]
 8003358:	e02e      	b.n	80033b8 <HAL_RCC_OscConfig+0x3f8>
 800335a:	4b61      	ldr	r3, [pc, #388]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	069b      	lsls	r3, r3, #26
 8003368:	495d      	ldr	r1, [pc, #372]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
 800336e:	e023      	b.n	80033b8 <HAL_RCC_OscConfig+0x3f8>
 8003370:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	4958      	ldr	r1, [pc, #352]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003380:	4313      	orrs	r3, r2
 8003382:	60cb      	str	r3, [r1, #12]
 8003384:	e018      	b.n	80033b8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003386:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a55      	ldr	r2, [pc, #340]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 800338c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7ff f835 	bl	8002400 <HAL_GetTick>
 8003396:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800339a:	f7ff f831 	bl	8002400 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e212      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f0      	bne.n	800339a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d036      	beq.n	8003432 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d019      	beq.n	8003400 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033cc:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80033ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d0:	4a43      	ldr	r2, [pc, #268]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7ff f812 	bl	8002400 <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7ff f80e 	bl	8002400 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1ef      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x420>
 80033fe:	e018      	b.n	8003432 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003400:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003404:	4a36      	ldr	r2, [pc, #216]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fe fff8 	bl	8002400 <HAL_GetTick>
 8003410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003414:	f7fe fff4 	bl	8002400 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1d5      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003426:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d036      	beq.n	80034ac <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d019      	beq.n	800347a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 800344c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003450:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003452:	f7fe ffd5 	bl	8002400 <HAL_GetTick>
 8003456:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800345a:	f7fe ffd1 	bl	8002400 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e1b2      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800346c:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x49a>
 8003478:	e018      	b.n	80034ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800347a:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 8003480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003484:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003486:	f7fe ffbb 	bl	8002400 <HAL_GetTick>
 800348a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800348e:	f7fe ffb7 	bl	8002400 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e198      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_RCC_OscConfig+0x520>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8085 	beq.w	80035c4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_RCC_OscConfig+0x524>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <HAL_RCC_OscConfig+0x524>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034c6:	f7fe ff9b 	bl	8002400 <HAL_GetTick>
 80034ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034cc:	e00c      	b.n	80034e8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034ce:	f7fe ff97 	bl	8002400 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b64      	cmp	r3, #100	; 0x64
 80034da:	d905      	bls.n	80034e8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e178      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
 80034e0:	58024400 	.word	0x58024400
 80034e4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e8:	4b96      	ldr	r3, [pc, #600]	; (8003744 <HAL_RCC_OscConfig+0x784>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ec      	beq.n	80034ce <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x54a>
 80034fc:	4b92      	ldr	r3, [pc, #584]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a91      	ldr	r2, [pc, #580]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	e02d      	b.n	8003566 <HAL_RCC_OscConfig+0x5a6>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x56c>
 8003512:	4b8d      	ldr	r3, [pc, #564]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a8c      	ldr	r2, [pc, #560]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	4b8a      	ldr	r3, [pc, #552]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a89      	ldr	r2, [pc, #548]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
 800352a:	e01c      	b.n	8003566 <HAL_RCC_OscConfig+0x5a6>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b05      	cmp	r3, #5
 8003532:	d10c      	bne.n	800354e <HAL_RCC_OscConfig+0x58e>
 8003534:	4b84      	ldr	r3, [pc, #528]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a83      	ldr	r2, [pc, #524]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	4b81      	ldr	r3, [pc, #516]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a80      	ldr	r2, [pc, #512]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	e00b      	b.n	8003566 <HAL_RCC_OscConfig+0x5a6>
 800354e:	4b7e      	ldr	r3, [pc, #504]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a7d      	ldr	r2, [pc, #500]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	4b7b      	ldr	r3, [pc, #492]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a7a      	ldr	r2, [pc, #488]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d015      	beq.n	800359a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe ff47 	bl	8002400 <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fe ff43 	bl	8002400 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e122      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800358c:	4b6e      	ldr	r3, [pc, #440]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ee      	beq.n	8003576 <HAL_RCC_OscConfig+0x5b6>
 8003598:	e014      	b.n	80035c4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fe ff31 	bl	8002400 <HAL_GetTick>
 800359e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe ff2d 	bl	8002400 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e10c      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035b8:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ee      	bne.n	80035a2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8101 	beq.w	80037d0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035ce:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035d6:	2b18      	cmp	r3, #24
 80035d8:	f000 80bc 	beq.w	8003754 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	f040 8095 	bne.w	8003710 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e6:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a57      	ldr	r2, [pc, #348]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80035ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f2:	f7fe ff05 	bl	8002400 <HAL_GetTick>
 80035f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fa:	f7fe ff01 	bl	8002400 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e0e2      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800360c:	4b4e      	ldr	r3, [pc, #312]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003618:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800361a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800361c:	4b4b      	ldr	r3, [pc, #300]	; (800374c <HAL_RCC_OscConfig+0x78c>)
 800361e:	4013      	ands	r3, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	430a      	orrs	r2, r1
 800362c:	4946      	ldr	r1, [pc, #280]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800362e:	4313      	orrs	r3, r2
 8003630:	628b      	str	r3, [r1, #40]	; 0x28
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	3b01      	subs	r3, #1
 8003638:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	3b01      	subs	r3, #1
 8003642:	025b      	lsls	r3, r3, #9
 8003644:	b29b      	uxth	r3, r3
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	3b01      	subs	r3, #1
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	3b01      	subs	r3, #1
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003662:	4939      	ldr	r1, [pc, #228]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003664:	4313      	orrs	r3, r2
 8003666:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003668:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	4a36      	ldr	r2, [pc, #216]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003674:	4b34      	ldr	r3, [pc, #208]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003678:	4b35      	ldr	r3, [pc, #212]	; (8003750 <HAL_RCC_OscConfig+0x790>)
 800367a:	4013      	ands	r3, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003680:	00d2      	lsls	r2, r2, #3
 8003682:	4931      	ldr	r1, [pc, #196]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003684:	4313      	orrs	r3, r2
 8003686:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003688:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f023 020c 	bic.w	r2, r3, #12
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	492c      	ldr	r1, [pc, #176]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003696:	4313      	orrs	r3, r2
 8003698:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f023 0202 	bic.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	4928      	ldr	r1, [pc, #160]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036ac:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 80036e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe fe8a 	bl	8002400 <HAL_GetTick>
 80036ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe fe86 	bl	8002400 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e067      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x730>
 800370e:	e05f      	b.n	80037d0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800371a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fe70 	bl	8002400 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fe6c 	bl	8002400 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e04d      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <HAL_RCC_OscConfig+0x788>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x764>
 8003742:	e045      	b.n	80037d0 <HAL_RCC_OscConfig+0x810>
 8003744:	58024800 	.word	0x58024800
 8003748:	58024400 	.word	0x58024400
 800374c:	fffffc0c 	.word	0xfffffc0c
 8003750:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_RCC_OscConfig+0x81c>)
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_RCC_OscConfig+0x81c>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	2b01      	cmp	r3, #1
 8003766:	d031      	beq.n	80037cc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0203 	and.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d12a      	bne.n	80037cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d122      	bne.n	80037cc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d11a      	bne.n	80037cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	0a5b      	lsrs	r3, r3, #9
 800379a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d111      	bne.n	80037cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	0c1b      	lsrs	r3, r3, #16
 80037ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d108      	bne.n	80037cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0e1b      	lsrs	r3, r3, #24
 80037be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3730      	adds	r7, #48	; 0x30
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	58024400 	.word	0x58024400

080037e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e19c      	b.n	8003b2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f4:	4b8a      	ldr	r3, [pc, #552]	; (8003a20 <HAL_RCC_ClockConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d910      	bls.n	8003824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	4b87      	ldr	r3, [pc, #540]	; (8003a20 <HAL_RCC_ClockConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 020f 	bic.w	r2, r3, #15
 800380a:	4985      	ldr	r1, [pc, #532]	; (8003a20 <HAL_RCC_ClockConfig+0x240>)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b83      	ldr	r3, [pc, #524]	; (8003a20 <HAL_RCC_ClockConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e184      	b.n	8003b2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d010      	beq.n	8003852 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	4b7b      	ldr	r3, [pc, #492]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800383c:	429a      	cmp	r2, r3
 800383e:	d908      	bls.n	8003852 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003840:	4b78      	ldr	r3, [pc, #480]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	4975      	ldr	r1, [pc, #468]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 800384e:	4313      	orrs	r3, r2
 8003850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d010      	beq.n	8003880 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	4b70      	ldr	r3, [pc, #448]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800386a:	429a      	cmp	r2, r3
 800386c:	d908      	bls.n	8003880 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800386e:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	496a      	ldr	r1, [pc, #424]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 800387c:	4313      	orrs	r3, r2
 800387e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d010      	beq.n	80038ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	4b64      	ldr	r3, [pc, #400]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003898:	429a      	cmp	r2, r3
 800389a:	d908      	bls.n	80038ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800389c:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	495e      	ldr	r1, [pc, #376]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d010      	beq.n	80038dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d908      	bls.n	80038dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038ca:	4b56      	ldr	r3, [pc, #344]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	4953      	ldr	r1, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d010      	beq.n	800390a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	4b4d      	ldr	r3, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d908      	bls.n	800390a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f8:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f023 020f 	bic.w	r2, r3, #15
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4947      	ldr	r1, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003906:	4313      	orrs	r3, r2
 8003908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d055      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003916:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	4940      	ldr	r1, [pc, #256]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003924:	4313      	orrs	r3, r2
 8003926:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d107      	bne.n	8003940 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003930:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d121      	bne.n	8003980 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0f6      	b.n	8003b2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d107      	bne.n	8003958 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003948:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d115      	bne.n	8003980 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0ea      	b.n	8003b2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003960:	4b30      	ldr	r3, [pc, #192]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0de      	b.n	8003b2e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003970:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0d6      	b.n	8003b2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003980:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f023 0207 	bic.w	r2, r3, #7
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4925      	ldr	r1, [pc, #148]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 800398e:	4313      	orrs	r3, r2
 8003990:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003992:	f7fe fd35 	bl	8002400 <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399a:	f7fe fd31 	bl	8002400 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e0be      	b.n	8003b2e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b0:	4b1c      	ldr	r3, [pc, #112]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	429a      	cmp	r2, r3
 80039c0:	d1eb      	bne.n	800399a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d010      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	429a      	cmp	r2, r3
 80039dc:	d208      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f023 020f 	bic.w	r2, r3, #15
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x244>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCC_ClockConfig+0x240>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d214      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_RCC_ClockConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 020f 	bic.w	r2, r3, #15
 8003a06:	4906      	ldr	r1, [pc, #24]	; (8003a20 <HAL_RCC_ClockConfig+0x240>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <HAL_RCC_ClockConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e086      	b.n	8003b2e <HAL_RCC_ClockConfig+0x34e>
 8003a20:	52002000 	.word	0x52002000
 8003a24:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d208      	bcs.n	8003a56 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a44:	4b3c      	ldr	r3, [pc, #240]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	4939      	ldr	r1, [pc, #228]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d208      	bcs.n	8003a84 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a72:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	492e      	ldr	r1, [pc, #184]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	4b28      	ldr	r3, [pc, #160]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d208      	bcs.n	8003ab2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	4922      	ldr	r1, [pc, #136]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d208      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4917      	ldr	r1, [pc, #92]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ae0:	f000 f834 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <HAL_RCC_ClockConfig+0x35c>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	fa21 f303 	lsr.w	r3, r1, r3
 8003afc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <HAL_RCC_ClockConfig+0x358>)
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	4a0d      	ldr	r2, [pc, #52]	; (8003b3c <HAL_RCC_ClockConfig+0x35c>)
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
 8003b14:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <HAL_RCC_ClockConfig+0x360>)
 8003b16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b18:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <HAL_RCC_ClockConfig+0x364>)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_RCC_ClockConfig+0x368>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fc22 	bl	800236c <HAL_InitTick>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	0800c8e0 	.word	0x0800c8e0
 8003b40:	24000004 	.word	0x24000004
 8003b44:	24000000 	.word	0x24000000
 8003b48:	24000008 	.word	0x24000008

08003b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b52:	4baf      	ldr	r3, [pc, #700]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b5a:	2b18      	cmp	r3, #24
 8003b5c:	f200 814e 	bhi.w	8003dfc <HAL_RCC_GetSysClockFreq+0x2b0>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003bcd 	.word	0x08003bcd
 8003b6c:	08003dfd 	.word	0x08003dfd
 8003b70:	08003dfd 	.word	0x08003dfd
 8003b74:	08003dfd 	.word	0x08003dfd
 8003b78:	08003dfd 	.word	0x08003dfd
 8003b7c:	08003dfd 	.word	0x08003dfd
 8003b80:	08003dfd 	.word	0x08003dfd
 8003b84:	08003dfd 	.word	0x08003dfd
 8003b88:	08003bf3 	.word	0x08003bf3
 8003b8c:	08003dfd 	.word	0x08003dfd
 8003b90:	08003dfd 	.word	0x08003dfd
 8003b94:	08003dfd 	.word	0x08003dfd
 8003b98:	08003dfd 	.word	0x08003dfd
 8003b9c:	08003dfd 	.word	0x08003dfd
 8003ba0:	08003dfd 	.word	0x08003dfd
 8003ba4:	08003dfd 	.word	0x08003dfd
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003dfd 	.word	0x08003dfd
 8003bb0:	08003dfd 	.word	0x08003dfd
 8003bb4:	08003dfd 	.word	0x08003dfd
 8003bb8:	08003dfd 	.word	0x08003dfd
 8003bbc:	08003dfd 	.word	0x08003dfd
 8003bc0:	08003dfd 	.word	0x08003dfd
 8003bc4:	08003dfd 	.word	0x08003dfd
 8003bc8:	08003bff 	.word	0x08003bff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bcc:	4b90      	ldr	r3, [pc, #576]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bd8:	4b8d      	ldr	r3, [pc, #564]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	08db      	lsrs	r3, r3, #3
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	4a8c      	ldr	r2, [pc, #560]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003bea:	e10a      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bec:	4b89      	ldr	r3, [pc, #548]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003bee:	61bb      	str	r3, [r7, #24]
    break;
 8003bf0:	e107      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003bf2:	4b89      	ldr	r3, [pc, #548]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003bf4:	61bb      	str	r3, [r7, #24]
    break;
 8003bf6:	e104      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003bf8:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003bfa:	61bb      	str	r3, [r7, #24]
    break;
 8003bfc:	e101      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bfe:	4b84      	ldr	r3, [pc, #528]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c08:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c14:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c1e:	4b7c      	ldr	r3, [pc, #496]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c22:	08db      	lsrs	r3, r3, #3
 8003c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80da 	beq.w	8003df6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d05a      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x1b2>
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d302      	bcc.n	8003c52 <HAL_RCC_GetSysClockFreq+0x106>
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d078      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003c50:	e099      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c52:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d02d      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c5e:	4b6c      	ldr	r3, [pc, #432]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	08db      	lsrs	r3, r3, #3
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	4a6a      	ldr	r2, [pc, #424]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c88:	4b61      	ldr	r3, [pc, #388]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c90:	ee07 3a90 	vmov	s15, r3
 8003c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c98:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c9c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003cb8:	e087      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003e24 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ccc:	4b50      	ldr	r3, [pc, #320]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ce0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cfc:	e065      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	ee07 3a90 	vmov	s15, r3
 8003d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d08:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d10:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d20:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d24:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d40:	e043      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003e2c <HAL_RCC_GetSysClockFreq+0x2e0>
 8003d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d64:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d68:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d84:	e021      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	ee07 3a90 	vmov	s15, r3
 8003d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d90:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dac:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dc8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	0a5b      	lsrs	r3, r3, #9
 8003dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dee:	ee17 3a90 	vmov	r3, s15
 8003df2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003df4:	e005      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
    break;
 8003dfa:	e002      	b.n	8003e02 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003dfe:	61bb      	str	r3, [r7, #24]
    break;
 8003e00:	bf00      	nop
  }

  return sysclockfreq;
 8003e02:	69bb      	ldr	r3, [r7, #24]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3724      	adds	r7, #36	; 0x24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	58024400 	.word	0x58024400
 8003e14:	03d09000 	.word	0x03d09000
 8003e18:	003d0900 	.word	0x003d0900
 8003e1c:	02625a00 	.word	0x02625a00
 8003e20:	46000000 	.word	0x46000000
 8003e24:	4c742400 	.word	0x4c742400
 8003e28:	4a742400 	.word	0x4a742400
 8003e2c:	4c189680 	.word	0x4c189680

08003e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e36:	f7ff fe89 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e48:	5cd3      	ldrb	r3, [r2, r3]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e54:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e5e:	5cd3      	ldrb	r3, [r2, r3]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e6e:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	58024400 	.word	0x58024400
 8003e84:	0800c8e0 	.word	0x0800c8e0
 8003e88:	24000004 	.word	0x24000004
 8003e8c:	24000000 	.word	0x24000000

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e94:	f7ff ffcc 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	0800c8e0 	.word	0x0800c8e0

08003ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ec0:	f7ff ffb6 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4601      	mov	r1, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	0800c8e0 	.word	0x0800c8e0

08003ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d03d      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0c:	d013      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f12:	d802      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003f18:	e01f      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f1e:	d013      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003f20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f24:	d01c      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003f26:	e018      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f28:	4baf      	ldr	r3, [pc, #700]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	4aae      	ldr	r2, [pc, #696]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f34:	e015      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f96f 	bl	8005220 <RCCEx_PLL2_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f46:	e00c      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3324      	adds	r3, #36	; 0x24
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 fa18 	bl	8005384 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f58:	e003      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f68:	4b9f      	ldr	r3, [pc, #636]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f74:	499c      	ldr	r1, [pc, #624]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	650b      	str	r3, [r1, #80]	; 0x50
 8003f7a:	e001      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d03d      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d826      	bhi.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003f94:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08003fb1 	.word	0x08003fb1
 8003fa0:	08003fbf 	.word	0x08003fbf
 8003fa4:	08003fd1 	.word	0x08003fd1
 8003fa8:	08003fe9 	.word	0x08003fe9
 8003fac:	08003fe9 	.word	0x08003fe9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb0:	4b8d      	ldr	r3, [pc, #564]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	4a8c      	ldr	r2, [pc, #560]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fbc:	e015      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 f92b 	bl	8005220 <RCCEx_PLL2_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fce:	e00c      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3324      	adds	r3, #36	; 0x24
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 f9d4 	bl	8005384 <RCCEx_PLL3_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fe0:	e003      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff0:	4b7d      	ldr	r3, [pc, #500]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff4:	f023 0207 	bic.w	r2, r3, #7
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	497a      	ldr	r1, [pc, #488]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	650b      	str	r3, [r1, #80]	; 0x50
 8004002:	e001      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004010:	2b00      	cmp	r3, #0
 8004012:	d03e      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d01c      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d804      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d00d      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004028:	e01e      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800402a:	2bc0      	cmp	r3, #192	; 0xc0
 800402c:	d01f      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d01e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004034:	e018      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004036:	4b6c      	ldr	r3, [pc, #432]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	4a6b      	ldr	r2, [pc, #428]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800403c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004042:	e017      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f001 f8e8 	bl	8005220 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004054:	e00e      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3324      	adds	r3, #36	; 0x24
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f001 f991 	bl	8005384 <RCCEx_PLL3_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004066:	e005      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	75fb      	strb	r3, [r7, #23]
      break;
 800406c:	e002      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004074:	7dfb      	ldrb	r3, [r7, #23]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800407a:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800407c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	4958      	ldr	r1, [pc, #352]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004088:	4313      	orrs	r3, r2
 800408a:	650b      	str	r3, [r1, #80]	; 0x50
 800408c:	e001      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	2b00      	cmp	r3, #0
 800409c:	d044      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a8:	d01f      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 80040aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ae:	d805      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040b8:	d00e      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80040ba:	e01f      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x214>
 80040bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040c0:	d01f      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80040c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c6:	d01e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80040c8:	e018      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	4a46      	ldr	r2, [pc, #280]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040d6:	e017      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 f89e 	bl	8005220 <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040e8:	e00e      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3324      	adds	r3, #36	; 0x24
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 f947 	bl	8005384 <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040fa:	e005      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800411c:	4932      	ldr	r1, [pc, #200]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800411e:	4313      	orrs	r3, r2
 8004120:	658b      	str	r3, [r1, #88]	; 0x58
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004130:	2b00      	cmp	r3, #0
 8004132:	d044      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800413a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800413e:	d01f      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004140:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004144:	d805      	bhi.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800414a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800414e:	d00e      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004150:	e01f      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004152:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004156:	d01f      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800415c:	d01e      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800415e:	e018      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004160:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800416c:	e017      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f001 f853 	bl	8005220 <RCCEx_PLL2_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800417e:	e00e      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3324      	adds	r3, #36	; 0x24
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f001 f8fc 	bl	8005384 <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004190:	e005      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
      break;
 8004196:	e002      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004198:	bf00      	nop
 800419a:	e000      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800419c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041b2:	490d      	ldr	r1, [pc, #52]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	658b      	str	r3, [r1, #88]	; 0x58
 80041b8:	e001      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d035      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d00c      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x304>
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d802      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01b      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80041da:	e017      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d00c      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x312>
 80041e0:	2b30      	cmp	r3, #48	; 0x30
 80041e2:	d018      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80041e4:	e012      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80041e6:	bf00      	nop
 80041e8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ec:	4baf      	ldr	r3, [pc, #700]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	4aae      	ldr	r2, [pc, #696]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80041f8:	e00e      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	2102      	movs	r1, #2
 8004200:	4618      	mov	r0, r3
 8004202:	f001 f80d 	bl	8005220 <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800420a:	e005      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	75fb      	strb	r3, [r7, #23]
      break;
 8004210:	e002      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800421e:	4ba3      	ldr	r3, [pc, #652]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	49a0      	ldr	r1, [pc, #640]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004230:	e001      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d042      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424a:	d01f      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800424c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004250:	d805      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425a:	d00e      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800425c:	e01f      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800425e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004262:	d01f      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004268:	d01e      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800426a:	e018      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426c:	4b8f      	ldr	r3, [pc, #572]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	4a8e      	ldr	r2, [pc, #568]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004278:	e017      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f000 ffcd 	bl	8005220 <RCCEx_PLL2_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800428a:	e00e      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3324      	adds	r3, #36	; 0x24
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f001 f876 	bl	8005384 <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800429c:	e005      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
      break;
 80042a2:	e002      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80042a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042b0:	4b7e      	ldr	r3, [pc, #504]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	497b      	ldr	r1, [pc, #492]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	650b      	str	r3, [r1, #80]	; 0x50
 80042c2:	e001      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d042      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042dc:	d01b      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042e2:	d805      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d022      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042ee:	e01b      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80042f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f4:	d01d      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80042f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042fa:	d01c      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80042fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004300:	d01b      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004302:	e011      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f000 ff88 	bl	8005220 <RCCEx_PLL2_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004314:	e012      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3324      	adds	r3, #36	; 0x24
 800431a:	2101      	movs	r1, #1
 800431c:	4618      	mov	r0, r3
 800431e:	f001 f831 	bl	8005384 <RCCEx_PLL3_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004326:	e009      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	75fb      	strb	r3, [r7, #23]
      break;
 800432c:	e006      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800432e:	bf00      	nop
 8004330:	e004      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800433a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004342:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434e:	4957      	ldr	r1, [pc, #348]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004350:	4313      	orrs	r3, r2
 8004352:	650b      	str	r3, [r1, #80]	; 0x50
 8004354:	e001      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d044      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800436c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004370:	d01b      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004376:	d805      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d022      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800437c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004382:	e01b      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d01d      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800438a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800438e:	d01c      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004390:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004394:	d01b      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004396:	e011      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 ff3e 	bl	8005220 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043a8:	e012      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3324      	adds	r3, #36	; 0x24
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 ffe7 	bl	8005384 <RCCEx_PLL3_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043ba:	e009      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	75fb      	strb	r3, [r7, #23]
      break;
 80043c0:	e006      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043c2:	bf00      	nop
 80043c4:	e004      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043d6:	4b35      	ldr	r3, [pc, #212]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043e4:	4931      	ldr	r1, [pc, #196]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	658b      	str	r3, [r1, #88]	; 0x58
 80043ea:	e001      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02d      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004400:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004404:	d005      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800440a:	d009      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004410:	e00f      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004412:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	4a25      	ldr	r2, [pc, #148]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800441e:	e00c      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	2101      	movs	r1, #1
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fefa 	bl	8005220 <RCCEx_PLL2_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
      break;
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444c:	4917      	ldr	r1, [pc, #92]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800444e:	4313      	orrs	r3, r2
 8004450:	650b      	str	r3, [r1, #80]	; 0x50
 8004452:	e001      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d035      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	2b03      	cmp	r3, #3
 800446a:	d81b      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800446c:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	080044b1 	.word	0x080044b1
 8004478:	08004485 	.word	0x08004485
 800447c:	08004493 	.word	0x08004493
 8004480:	080044b1 	.word	0x080044b1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	4a08      	ldr	r2, [pc, #32]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800448a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004490:	e00f      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	2102      	movs	r1, #2
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fec1 	bl	8005220 <RCCEx_PLL2_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044a2:	e006      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
      break;
 80044a8:	e003      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
      break;
 80044b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044b8:	4bba      	ldr	r3, [pc, #744]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044bc:	f023 0203 	bic.w	r2, r3, #3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	49b7      	ldr	r1, [pc, #732]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044ca:	e001      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
 80044ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8086 	beq.w	80045ea <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044de:	4bb2      	ldr	r3, [pc, #712]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4ab1      	ldr	r2, [pc, #708]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ea:	f7fd ff89 	bl	8002400 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f0:	e009      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fd ff85 	bl	8002400 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	; 0x64
 80044fe:	d902      	bls.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	75fb      	strb	r3, [r7, #23]
        break;
 8004504:	e005      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004506:	4ba8      	ldr	r3, [pc, #672]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0ef      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d166      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004518:	4ba2      	ldr	r3, [pc, #648]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800451a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004522:	4053      	eors	r3, r2
 8004524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452c:	4b9d      	ldr	r3, [pc, #628]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004536:	4b9b      	ldr	r3, [pc, #620]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a9a      	ldr	r2, [pc, #616]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004542:	4b98      	ldr	r3, [pc, #608]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a97      	ldr	r2, [pc, #604]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800454e:	4a95      	ldr	r2, [pc, #596]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800455a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455e:	d115      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd ff4e 	bl	8002400 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004566:	e00b      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fd ff4a 	bl	8002400 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d902      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	75fb      	strb	r3, [r7, #23]
            break;
 800457e:	e005      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004580:	4b88      	ldr	r3, [pc, #544]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ed      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d126      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a0:	d10d      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80045a2:	4b80      	ldr	r3, [pc, #512]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045b0:	0919      	lsrs	r1, r3, #4
 80045b2:	4b7e      	ldr	r3, [pc, #504]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80045b4:	400b      	ands	r3, r1
 80045b6:	497b      	ldr	r1, [pc, #492]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	610b      	str	r3, [r1, #16]
 80045bc:	e005      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80045be:	4b79      	ldr	r3, [pc, #484]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	4a78      	ldr	r2, [pc, #480]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045c8:	6113      	str	r3, [r2, #16]
 80045ca:	4b76      	ldr	r3, [pc, #472]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d8:	4972      	ldr	r1, [pc, #456]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	670b      	str	r3, [r1, #112]	; 0x70
 80045de:	e004      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	75bb      	strb	r3, [r7, #22]
 80045e4:	e001      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d07d      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045fa:	2b28      	cmp	r3, #40	; 0x28
 80045fc:	d866      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	080046d3 	.word	0x080046d3
 8004608:	080046cd 	.word	0x080046cd
 800460c:	080046cd 	.word	0x080046cd
 8004610:	080046cd 	.word	0x080046cd
 8004614:	080046cd 	.word	0x080046cd
 8004618:	080046cd 	.word	0x080046cd
 800461c:	080046cd 	.word	0x080046cd
 8004620:	080046cd 	.word	0x080046cd
 8004624:	080046a9 	.word	0x080046a9
 8004628:	080046cd 	.word	0x080046cd
 800462c:	080046cd 	.word	0x080046cd
 8004630:	080046cd 	.word	0x080046cd
 8004634:	080046cd 	.word	0x080046cd
 8004638:	080046cd 	.word	0x080046cd
 800463c:	080046cd 	.word	0x080046cd
 8004640:	080046cd 	.word	0x080046cd
 8004644:	080046bb 	.word	0x080046bb
 8004648:	080046cd 	.word	0x080046cd
 800464c:	080046cd 	.word	0x080046cd
 8004650:	080046cd 	.word	0x080046cd
 8004654:	080046cd 	.word	0x080046cd
 8004658:	080046cd 	.word	0x080046cd
 800465c:	080046cd 	.word	0x080046cd
 8004660:	080046cd 	.word	0x080046cd
 8004664:	080046d3 	.word	0x080046d3
 8004668:	080046cd 	.word	0x080046cd
 800466c:	080046cd 	.word	0x080046cd
 8004670:	080046cd 	.word	0x080046cd
 8004674:	080046cd 	.word	0x080046cd
 8004678:	080046cd 	.word	0x080046cd
 800467c:	080046cd 	.word	0x080046cd
 8004680:	080046cd 	.word	0x080046cd
 8004684:	080046d3 	.word	0x080046d3
 8004688:	080046cd 	.word	0x080046cd
 800468c:	080046cd 	.word	0x080046cd
 8004690:	080046cd 	.word	0x080046cd
 8004694:	080046cd 	.word	0x080046cd
 8004698:	080046cd 	.word	0x080046cd
 800469c:	080046cd 	.word	0x080046cd
 80046a0:	080046cd 	.word	0x080046cd
 80046a4:	080046d3 	.word	0x080046d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	2101      	movs	r1, #1
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fdb6 	bl	8005220 <RCCEx_PLL2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046b8:	e00c      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3324      	adds	r3, #36	; 0x24
 80046be:	2101      	movs	r1, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fe5f 	bl	8005384 <RCCEx_PLL3_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046ca:	e003      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]
      break;
 80046d0:	e000      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80046d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046da:	4b32      	ldr	r3, [pc, #200]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e6:	492f      	ldr	r1, [pc, #188]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	654b      	str	r3, [r1, #84]	; 0x54
 80046ec:	e001      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d037      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004702:	2b05      	cmp	r3, #5
 8004704:	d820      	bhi.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	0800474f 	.word	0x0800474f
 8004710:	08004725 	.word	0x08004725
 8004714:	08004737 	.word	0x08004737
 8004718:	0800474f 	.word	0x0800474f
 800471c:	0800474f 	.word	0x0800474f
 8004720:	0800474f 	.word	0x0800474f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	2101      	movs	r1, #1
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fd78 	bl	8005220 <RCCEx_PLL2_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004734:	e00c      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3324      	adds	r3, #36	; 0x24
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fe21 	bl	8005384 <RCCEx_PLL3_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004746:	e003      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	75fb      	strb	r3, [r7, #23]
      break;
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800474e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004756:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f023 0207 	bic.w	r2, r3, #7
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004762:	4910      	ldr	r1, [pc, #64]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	654b      	str	r3, [r1, #84]	; 0x54
 8004768:	e001      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d040      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	2b05      	cmp	r3, #5
 8004782:	d827      	bhi.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	080047db 	.word	0x080047db
 8004790:	080047b1 	.word	0x080047b1
 8004794:	080047c3 	.word	0x080047c3
 8004798:	080047db 	.word	0x080047db
 800479c:	080047db 	.word	0x080047db
 80047a0:	080047db 	.word	0x080047db
 80047a4:	58024400 	.word	0x58024400
 80047a8:	58024800 	.word	0x58024800
 80047ac:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	2101      	movs	r1, #1
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fd32 	bl	8005220 <RCCEx_PLL2_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047c0:	e00c      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3324      	adds	r3, #36	; 0x24
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fddb 	bl	8005384 <RCCEx_PLL3_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047d2:	e003      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	75fb      	strb	r3, [r7, #23]
      break;
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80047da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047e2:	4bb2      	ldr	r3, [pc, #712]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	f023 0207 	bic.w	r2, r3, #7
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f0:	49ae      	ldr	r1, [pc, #696]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	658b      	str	r3, [r1, #88]	; 0x58
 80047f6:	e001      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d044      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004812:	d01b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004818:	d805      	bhi.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d022      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800481e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004824:	e01b      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482a:	d01d      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800482c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004830:	d01c      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004832:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004836:	d01b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004838:	e011      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fced 	bl	8005220 <RCCEx_PLL2_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800484a:	e012      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3324      	adds	r3, #36	; 0x24
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fd96 	bl	8005384 <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800485c:	e009      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	75fb      	strb	r3, [r7, #23]
      break;
 8004862:	e006      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004864:	bf00      	nop
 8004866:	e004      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004868:	bf00      	nop
 800486a:	e002      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004878:	4b8c      	ldr	r3, [pc, #560]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004886:	4989      	ldr	r1, [pc, #548]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	654b      	str	r3, [r1, #84]	; 0x54
 800488c:	e001      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d044      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a8:	d01b      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ae:	d805      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d022      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80048b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80048ba:	e01b      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80048bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c0:	d01d      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80048c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048c6:	d01c      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80048c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048cc:	d01b      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80048ce:	e011      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fca2 	bl	8005220 <RCCEx_PLL2_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048e0:	e012      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3324      	adds	r3, #36	; 0x24
 80048e6:	2102      	movs	r1, #2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fd4b 	bl	8005384 <RCCEx_PLL3_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048f2:	e009      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	75fb      	strb	r3, [r7, #23]
      break;
 80048f8:	e006      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048fa:	bf00      	nop
 80048fc:	e004      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800490e:	4b67      	ldr	r3, [pc, #412]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800491c:	4963      	ldr	r1, [pc, #396]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	658b      	str	r3, [r1, #88]	; 0x58
 8004922:	e001      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	2b00      	cmp	r3, #0
 8004932:	d044      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800493a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800493e:	d01b      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004944:	d805      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d022      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004950:	e01b      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004956:	d01d      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004958:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800495c:	d01c      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800495e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004962:	d01b      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004964:	e011      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3304      	adds	r3, #4
 800496a:	2100      	movs	r1, #0
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fc57 	bl	8005220 <RCCEx_PLL2_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004976:	e012      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3324      	adds	r3, #36	; 0x24
 800497c:	2102      	movs	r1, #2
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fd00 	bl	8005384 <RCCEx_PLL3_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004988:	e009      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
      break;
 800498e:	e006      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004990:	bf00      	nop
 8004992:	e004      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004994:	bf00      	nop
 8004996:	e002      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004998:	bf00      	nop
 800499a:	e000      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800499c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049a4:	4b41      	ldr	r3, [pc, #260]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b2:	493e      	ldr	r1, [pc, #248]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	658b      	str	r3, [r1, #88]	; 0x58
 80049b8:	e001      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d4:	d10a      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3324      	adds	r3, #36	; 0x24
 80049da:	2102      	movs	r1, #2
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fcd1 	bl	8005384 <RCCEx_PLL3_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049ec:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049fa:	492c      	ldr	r1, [pc, #176]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a16:	d10a      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fcb0 	bl	8005384 <RCCEx_PLL3_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a3c:	491b      	ldr	r1, [pc, #108]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d032      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d00d      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a5e:	d016      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d111      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fbd8 	bl	8005220 <RCCEx_PLL2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a74:	e00c      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3324      	adds	r3, #36	; 0x24
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fc81 	bl	8005384 <RCCEx_PLL3_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a86:	e003      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8c:	e000      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10c      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004aa4:	4901      	ldr	r1, [pc, #4]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	658b      	str	r3, [r1, #88]	; 0x58
 8004aaa:	e003      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
 8004ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02f      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aca:	d00c      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004acc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ad0:	d015      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d10f      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad8:	4b79      	ldr	r3, [pc, #484]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	4a78      	ldr	r2, [pc, #480]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ae4:	e00c      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3324      	adds	r3, #36	; 0x24
 8004aea:	2101      	movs	r1, #1
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fc49 	bl	8005384 <RCCEx_PLL3_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004af6:	e003      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	75fb      	strb	r3, [r7, #23]
      break;
 8004afc:	e000      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b06:	4b6e      	ldr	r3, [pc, #440]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b14:	496a      	ldr	r1, [pc, #424]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	654b      	str	r3, [r1, #84]	; 0x54
 8004b1a:	e001      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d029      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d007      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004b3a:	e00f      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3c:	4b60      	ldr	r3, [pc, #384]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a5f      	ldr	r2, [pc, #380]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b48:	e00b      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2102      	movs	r1, #2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fb65 	bl	8005220 <RCCEx_PLL2_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d109      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b68:	4b55      	ldr	r3, [pc, #340]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b74:	4952      	ldr	r1, [pc, #328]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b7a:	e001      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3324      	adds	r3, #36	; 0x24
 8004b90:	2102      	movs	r1, #2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fbf6 	bl	8005384 <RCCEx_PLL3_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d02f      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb6:	d00c      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbc:	d802      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d011      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004bc2:	e00d      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc8:	d00f      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bce:	d00e      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd2:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	4a3a      	ldr	r2, [pc, #232]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004bde:	e007      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
      break;
 8004be4:	e004      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bf6:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c02:	492f      	ldr	r1, [pc, #188]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	654b      	str	r3, [r1, #84]	; 0x54
 8004c08:	e001      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d008      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c1a:	4b29      	ldr	r3, [pc, #164]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	4926      	ldr	r1, [pc, #152]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c38:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c46:	491e      	ldr	r1, [pc, #120]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c64:	4916      	ldr	r1, [pc, #88]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c76:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	4a11      	ldr	r2, [pc, #68]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c80:	6113      	str	r3, [r2, #16]
 8004c82:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c8c:	490c      	ldr	r1, [pc, #48]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	da08      	bge.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	4906      	ldr	r1, [pc, #24]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004cac:	7dbb      	ldrb	r3, [r7, #22]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	58024400 	.word	0x58024400

08004cc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cc8:	f7ff f8b2 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8004ccc:	4601      	mov	r1, r0
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4a04      	ldr	r2, [pc, #16]	; (8004cec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004cda:	5cd3      	ldrb	r3, [r2, r3]
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	58024400 	.word	0x58024400
 8004cec:	0800c8e0 	.word	0x0800c8e0

08004cf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b089      	sub	sp, #36	; 0x24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cf8:	4b9d      	ldr	r3, [pc, #628]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004d02:	4b9b      	ldr	r3, [pc, #620]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	0b1b      	lsrs	r3, r3, #12
 8004d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d0e:	4b98      	ldr	r3, [pc, #608]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d1a:	4b95      	ldr	r3, [pc, #596]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 810a 	beq.w	8004f52 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d05a      	beq.n	8004dfa <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d302      	bcc.n	8004d4e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d078      	beq.n	8004e3e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004d4c:	e099      	b.n	8004e82 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d4e:	4b88      	ldr	r3, [pc, #544]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02d      	beq.n	8004db6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d5a:	4b85      	ldr	r3, [pc, #532]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	08db      	lsrs	r3, r3, #3
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	4a83      	ldr	r2, [pc, #524]	; (8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d84:	4b7a      	ldr	r3, [pc, #488]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d94:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d98:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004db4:	e087      	b.n	8004ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc8:	4b69      	ldr	r3, [pc, #420]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ddc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004df8:	e065      	b.n	8004ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0c:	4b58      	ldr	r3, [pc, #352]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e20:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e3c:	e043      	b.n	8004ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e50:	4b47      	ldr	r3, [pc, #284]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e58:	ee07 3a90 	vmov	s15, r3
 8004e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e60:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e64:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e80:	e021      	b.n	8004ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004f80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e94:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9c:	ee07 3a90 	vmov	s15, r3
 8004ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ec4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	0a5b      	lsrs	r3, r3, #9
 8004ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eec:	ee17 2a90 	vmov	r2, s15
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1a:	ee17 2a90 	vmov	r2, s15
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	0e1b      	lsrs	r3, r3, #24
 8004f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f48:	ee17 2a90 	vmov	r2, s15
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f50:	e008      	b.n	8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	3724      	adds	r7, #36	; 0x24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	58024400 	.word	0x58024400
 8004f74:	03d09000 	.word	0x03d09000
 8004f78:	46000000 	.word	0x46000000
 8004f7c:	4c742400 	.word	0x4c742400
 8004f80:	4a742400 	.word	0x4a742400
 8004f84:	4c189680 	.word	0x4c189680

08004f88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b089      	sub	sp, #36	; 0x24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f90:	4b9d      	ldr	r3, [pc, #628]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004f9a:	4b9b      	ldr	r3, [pc, #620]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	0d1b      	lsrs	r3, r3, #20
 8004fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fa6:	4b98      	ldr	r3, [pc, #608]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004fb2:	4b95      	ldr	r3, [pc, #596]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	08db      	lsrs	r3, r3, #3
 8004fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 810a 	beq.w	80051ea <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d05a      	beq.n	8005092 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d302      	bcc.n	8004fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d078      	beq.n	80050d6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004fe4:	e099      	b.n	800511a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe6:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02d      	beq.n	800504e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ff2:	4b85      	ldr	r3, [pc, #532]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	08db      	lsrs	r3, r3, #3
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	4a83      	ldr	r2, [pc, #524]	; (800520c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8005002:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	ee07 3a90 	vmov	s15, r3
 8005014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501c:	4b7a      	ldr	r3, [pc, #488]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005030:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005048:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800504c:	e087      	b.n	800515e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	ee07 3a90 	vmov	s15, r3
 8005054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005058:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800505c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005060:	4b69      	ldr	r3, [pc, #420]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005070:	ed97 6a03 	vldr	s12, [r7, #12]
 8005074:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005090:	e065      	b.n	800515e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80050a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a4:	4b58      	ldr	r3, [pc, #352]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80050b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80050bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050d4:	e043      	b.n	800515e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800521c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80050e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e8:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005114:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005118:	e021      	b.n	800515e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005124:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005218 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512c:	4b36      	ldr	r3, [pc, #216]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005134:	ee07 3a90 	vmov	s15, r3
 8005138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005140:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005158:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800515c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800515e:	4b2a      	ldr	r3, [pc, #168]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	0a5b      	lsrs	r3, r3, #9
 8005164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005178:	edd7 6a07 	vldr	s13, [r7, #28]
 800517c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005184:	ee17 2a90 	vmov	r2, s15
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800518c:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	0c1b      	lsrs	r3, r3, #16
 8005192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80051aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051b2:	ee17 2a90 	vmov	r2, s15
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80051ba:	4b13      	ldr	r3, [pc, #76]	; (8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	0e1b      	lsrs	r3, r3, #24
 80051c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e0:	ee17 2a90 	vmov	r2, s15
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051e8:	e008      	b.n	80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	609a      	str	r2, [r3, #8]
}
 80051fc:	bf00      	nop
 80051fe:	3724      	adds	r7, #36	; 0x24
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	58024400 	.word	0x58024400
 800520c:	03d09000 	.word	0x03d09000
 8005210:	46000000 	.word	0x46000000
 8005214:	4c742400 	.word	0x4c742400
 8005218:	4a742400 	.word	0x4a742400
 800521c:	4c189680 	.word	0x4c189680

08005220 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800522e:	4b53      	ldr	r3, [pc, #332]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b03      	cmp	r3, #3
 8005238:	d101      	bne.n	800523e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e099      	b.n	8005372 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800523e:	4b4f      	ldr	r3, [pc, #316]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a4e      	ldr	r2, [pc, #312]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005244:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524a:	f7fd f8d9 	bl	8002400 <HAL_GetTick>
 800524e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005250:	e008      	b.n	8005264 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005252:	f7fd f8d5 	bl	8002400 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e086      	b.n	8005372 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005264:	4b45      	ldr	r3, [pc, #276]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005270:	4b42      	ldr	r3, [pc, #264]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	493f      	ldr	r1, [pc, #252]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005280:	4313      	orrs	r3, r2
 8005282:	628b      	str	r3, [r1, #40]	; 0x28
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	3b01      	subs	r3, #1
 800528a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	3b01      	subs	r3, #1
 8005294:	025b      	lsls	r3, r3, #9
 8005296:	b29b      	uxth	r3, r3
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	3b01      	subs	r3, #1
 80052a0:	041b      	lsls	r3, r3, #16
 80052a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	061b      	lsls	r3, r3, #24
 80052b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052b4:	4931      	ldr	r1, [pc, #196]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	492d      	ldr	r1, [pc, #180]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80052cc:	4b2b      	ldr	r3, [pc, #172]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	f023 0220 	bic.w	r2, r3, #32
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	4928      	ldr	r1, [pc, #160]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80052de:	4b27      	ldr	r3, [pc, #156]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	4a26      	ldr	r2, [pc, #152]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 80052e4:	f023 0310 	bic.w	r3, r3, #16
 80052e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80052ea:	4b24      	ldr	r3, [pc, #144]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 80052ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <RCCEx_PLL2_Config+0x160>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	69d2      	ldr	r2, [r2, #28]
 80052f6:	00d2      	lsls	r2, r2, #3
 80052f8:	4920      	ldr	r1, [pc, #128]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80052fe:	4b1f      	ldr	r3, [pc, #124]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	4a1e      	ldr	r2, [pc, #120]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005304:	f043 0310 	orr.w	r3, r3, #16
 8005308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005310:	4b1a      	ldr	r3, [pc, #104]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	4a19      	ldr	r2, [pc, #100]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800531a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800531c:	e00f      	b.n	800533e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d106      	bne.n	8005332 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4a14      	ldr	r2, [pc, #80]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 800532a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005330:	e005      	b.n	800533e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	4a11      	ldr	r2, [pc, #68]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800533c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800533e:	4b0f      	ldr	r3, [pc, #60]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a0e      	ldr	r2, [pc, #56]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005344:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800534a:	f7fd f859 	bl	8002400 <HAL_GetTick>
 800534e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005350:	e008      	b.n	8005364 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005352:	f7fd f855 	bl	8002400 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e006      	b.n	8005372 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <RCCEx_PLL2_Config+0x15c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	58024400 	.word	0x58024400
 8005380:	ffff0007 	.word	0xffff0007

08005384 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005392:	4b53      	ldr	r3, [pc, #332]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b03      	cmp	r3, #3
 800539c:	d101      	bne.n	80053a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e099      	b.n	80054d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053a2:	4b4f      	ldr	r3, [pc, #316]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a4e      	ldr	r2, [pc, #312]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 80053a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ae:	f7fd f827 	bl	8002400 <HAL_GetTick>
 80053b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053b4:	e008      	b.n	80053c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80053b6:	f7fd f823 	bl	8002400 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e086      	b.n	80054d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053c8:	4b45      	ldr	r3, [pc, #276]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f0      	bne.n	80053b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80053d4:	4b42      	ldr	r3, [pc, #264]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	051b      	lsls	r3, r3, #20
 80053e2:	493f      	ldr	r1, [pc, #252]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	628b      	str	r3, [r1, #40]	; 0x28
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	025b      	lsls	r3, r3, #9
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	3b01      	subs	r3, #1
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	3b01      	subs	r3, #1
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005418:	4931      	ldr	r1, [pc, #196]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 800541a:	4313      	orrs	r3, r2
 800541c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800541e:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	492d      	ldr	r1, [pc, #180]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005430:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	4928      	ldr	r1, [pc, #160]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005442:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800544c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800544e:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005452:	4b24      	ldr	r3, [pc, #144]	; (80054e4 <RCCEx_PLL3_Config+0x160>)
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	69d2      	ldr	r2, [r2, #28]
 800545a:	00d2      	lsls	r2, r2, #3
 800545c:	4920      	ldr	r1, [pc, #128]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 800545e:	4313      	orrs	r3, r2
 8005460:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005462:	4b1f      	ldr	r3, [pc, #124]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005474:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 800547a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800547e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005480:	e00f      	b.n	80054a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d106      	bne.n	8005496 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 800548e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005492:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005494:	e005      	b.n	80054a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	4a11      	ldr	r2, [pc, #68]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 800549c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054a2:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a0e      	ldr	r2, [pc, #56]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 80054a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ae:	f7fc ffa7 	bl	8002400 <HAL_GetTick>
 80054b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054b4:	e008      	b.n	80054c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80054b6:	f7fc ffa3 	bl	8002400 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e006      	b.n	80054d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <RCCEx_PLL3_Config+0x15c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	58024400 	.word	0x58024400
 80054e4:	ffff0007 	.word	0xffff0007

080054e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e049      	b.n	800558e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fe08 	bl	8002124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f000 f934 	bl	8005794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d001      	beq.n	80055b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e019      	b.n	80055e4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <HAL_TIM_Base_Start+0x58>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d00b      	beq.n	80055e2 <HAL_TIM_Base_Start+0x4a>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d0:	d007      	beq.n	80055e2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	00010007 	.word	0x00010007

080055f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_TIM_ConfigClockSource+0x18>
 8005608:	2302      	movs	r3, #2
 800560a:	e0b7      	b.n	800577c <HAL_TIM_ConfigClockSource+0x188>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4b57      	ldr	r3, [pc, #348]	; (8005784 <HAL_TIM_ConfigClockSource+0x190>)
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005632:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b70      	cmp	r3, #112	; 0x70
 8005642:	d02e      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0xae>
 8005644:	2b70      	cmp	r3, #112	; 0x70
 8005646:	d812      	bhi.n	800566e <HAL_TIM_ConfigClockSource+0x7a>
 8005648:	2b30      	cmp	r3, #48	; 0x30
 800564a:	f000 8084 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x162>
 800564e:	2b30      	cmp	r3, #48	; 0x30
 8005650:	d806      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x6c>
 8005652:	2b10      	cmp	r3, #16
 8005654:	d07f      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x162>
 8005656:	2b20      	cmp	r3, #32
 8005658:	d07d      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x162>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d07b      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800565e:	e084      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005660:	2b50      	cmp	r3, #80	; 0x50
 8005662:	d048      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x102>
 8005664:	2b60      	cmp	r3, #96	; 0x60
 8005666:	d056      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x122>
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d064      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800566c:	e07d      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800566e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005672:	d070      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x162>
 8005674:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005678:	d809      	bhi.n	800568e <HAL_TIM_ConfigClockSource+0x9a>
 800567a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567e:	d027      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0xdc>
 8005680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005684:	d067      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x162>
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568a:	d06d      	beq.n	8005768 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800568c:	e06d      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800568e:	4a3e      	ldr	r2, [pc, #248]	; (8005788 <HAL_TIM_ConfigClockSource+0x194>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d060      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x162>
 8005694:	4a3d      	ldr	r2, [pc, #244]	; (800578c <HAL_TIM_ConfigClockSource+0x198>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d05d      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x162>
 800569a:	4a3d      	ldr	r2, [pc, #244]	; (8005790 <HAL_TIM_ConfigClockSource+0x19c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d05a      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80056a0:	e063      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6899      	ldr	r1, [r3, #8]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f000 f987 	bl	80059c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	609a      	str	r2, [r3, #8]
      break;
 80056ce:	e04c      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	6899      	ldr	r1, [r3, #8]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f000 f970 	bl	80059c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f2:	609a      	str	r2, [r3, #8]
      break;
 80056f4:	e039      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	461a      	mov	r2, r3
 8005704:	f000 f8e0 	bl	80058c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2150      	movs	r1, #80	; 0x50
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f93a 	bl	8005988 <TIM_ITRx_SetConfig>
      break;
 8005714:	e029      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6859      	ldr	r1, [r3, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	461a      	mov	r2, r3
 8005724:	f000 f8ff 	bl	8005926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2160      	movs	r1, #96	; 0x60
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f92a 	bl	8005988 <TIM_ITRx_SetConfig>
      break;
 8005734:	e019      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6859      	ldr	r1, [r3, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	461a      	mov	r2, r3
 8005744:	f000 f8c0 	bl	80058c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2140      	movs	r1, #64	; 0x40
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f91a 	bl	8005988 <TIM_ITRx_SetConfig>
      break;
 8005754:	e009      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f000 f911 	bl	8005988 <TIM_ITRx_SetConfig>
      break;
 8005766:	e000      	b.n	800576a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005768:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	ffceff88 	.word	0xffceff88
 8005788:	00100030 	.word	0x00100030
 800578c:	00100040 	.word	0x00100040
 8005790:	00100020 	.word	0x00100020

08005794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a40      	ldr	r2, [pc, #256]	; (80058a8 <TIM_Base_SetConfig+0x114>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b2:	d00f      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a3d      	ldr	r2, [pc, #244]	; (80058ac <TIM_Base_SetConfig+0x118>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00b      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3c      	ldr	r2, [pc, #240]	; (80058b0 <TIM_Base_SetConfig+0x11c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d007      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a3b      	ldr	r2, [pc, #236]	; (80058b4 <TIM_Base_SetConfig+0x120>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a3a      	ldr	r2, [pc, #232]	; (80058b8 <TIM_Base_SetConfig+0x124>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d108      	bne.n	80057e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a2f      	ldr	r2, [pc, #188]	; (80058a8 <TIM_Base_SetConfig+0x114>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01f      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f4:	d01b      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2c      	ldr	r2, [pc, #176]	; (80058ac <TIM_Base_SetConfig+0x118>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d017      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a2b      	ldr	r2, [pc, #172]	; (80058b0 <TIM_Base_SetConfig+0x11c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2a      	ldr	r2, [pc, #168]	; (80058b4 <TIM_Base_SetConfig+0x120>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00f      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a29      	ldr	r2, [pc, #164]	; (80058b8 <TIM_Base_SetConfig+0x124>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00b      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a28      	ldr	r2, [pc, #160]	; (80058bc <TIM_Base_SetConfig+0x128>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a27      	ldr	r2, [pc, #156]	; (80058c0 <TIM_Base_SetConfig+0x12c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <TIM_Base_SetConfig+0x130>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d108      	bne.n	8005840 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a10      	ldr	r2, [pc, #64]	; (80058a8 <TIM_Base_SetConfig+0x114>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00f      	beq.n	800588c <TIM_Base_SetConfig+0xf8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a12      	ldr	r2, [pc, #72]	; (80058b8 <TIM_Base_SetConfig+0x124>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00b      	beq.n	800588c <TIM_Base_SetConfig+0xf8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a11      	ldr	r2, [pc, #68]	; (80058bc <TIM_Base_SetConfig+0x128>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d007      	beq.n	800588c <TIM_Base_SetConfig+0xf8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a10      	ldr	r2, [pc, #64]	; (80058c0 <TIM_Base_SetConfig+0x12c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_Base_SetConfig+0xf8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a0f      	ldr	r2, [pc, #60]	; (80058c4 <TIM_Base_SetConfig+0x130>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d103      	bne.n	8005894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	615a      	str	r2, [r3, #20]
}
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40000c00 	.word	0x40000c00
 80058b8:	40010400 	.word	0x40010400
 80058bc:	40014000 	.word	0x40014000
 80058c0:	40014400 	.word	0x40014400
 80058c4:	40014800 	.word	0x40014800

080058c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 030a 	bic.w	r3, r3, #10
 8005904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0210 	bic.w	r2, r3, #16
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	031b      	lsls	r3, r3, #12
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <TIM_ITRx_SetConfig+0x38>)
 800599c:	4013      	ands	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f043 0307 	orr.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	609a      	str	r2, [r3, #8]
}
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	ffcfff8f 	.word	0xffcfff8f

080059c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	021a      	lsls	r2, r3, #8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	609a      	str	r2, [r3, #8]
}
 80059f8:	bf00      	nop
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e068      	b.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2e      	ldr	r2, [pc, #184]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2d      	ldr	r2, [pc, #180]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d108      	bne.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01d      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d018      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1a      	ldr	r2, [pc, #104]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a14      	ldr	r2, [pc, #80]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10c      	bne.n	8005adc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40010400 	.word	0x40010400
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40001800 	.word	0x40001800

08005b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e042      	b.n	8005bac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fc fb5f 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2224      	movs	r2, #36	; 0x24
 8005b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0201 	bic.w	r2, r2, #1
 8005b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fb12 	bl	8006180 <UART_SetConfig>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e022      	b.n	8005bac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 f8b6 	bl	8006ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 f93d 	bl	8006e24 <UART_CheckIdleState>
 8005baa:	4603      	mov	r3, r0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d168      	bne.n	8005c9e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_UART_Transmit_IT+0x24>
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e061      	b.n	8005ca0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Transmit_IT+0x36>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e05a      	b.n	8005ca0 <HAL_UART_Transmit_IT+0xec>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	88fa      	ldrh	r2, [r7, #6]
 8005bfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2221      	movs	r2, #33	; 0x21
 8005c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c26:	d11c      	bne.n	8005c62 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c30:	d107      	bne.n	8005c42 <HAL_UART_Transmit_IT+0x8e>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4a1b      	ldr	r2, [pc, #108]	; (8005cac <HAL_UART_Transmit_IT+0xf8>)
 8005c3e:	671a      	str	r2, [r3, #112]	; 0x70
 8005c40:	e002      	b.n	8005c48 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a1a      	ldr	r2, [pc, #104]	; (8005cb0 <HAL_UART_Transmit_IT+0xfc>)
 8005c46:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	e01b      	b.n	8005c9a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	d107      	bne.n	8005c7c <HAL_UART_Transmit_IT+0xc8>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d103      	bne.n	8005c7c <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4a0f      	ldr	r2, [pc, #60]	; (8005cb4 <HAL_UART_Transmit_IT+0x100>)
 8005c78:	671a      	str	r2, [r3, #112]	; 0x70
 8005c7a:	e002      	b.n	8005c82 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a0e      	ldr	r2, [pc, #56]	; (8005cb8 <HAL_UART_Transmit_IT+0x104>)
 8005c80:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c98:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e000      	b.n	8005ca0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005c9e:	2302      	movs	r3, #2
  }
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	080071b5 	.word	0x080071b5
 8005cb0:	0800711b 	.word	0x0800711b
 8005cb4:	0800709d 	.word	0x0800709d
 8005cb8:	08007029 	.word	0x08007029

08005cbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	f040 80bc 	bne.w	8005e4e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_UART_Receive_IT+0x26>
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0b4      	b.n	8005e50 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_UART_Receive_IT+0x38>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e0ad      	b.n	8005e50 <HAL_UART_Receive_IT+0x194>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	88fa      	ldrh	r2, [r7, #6]
 8005d0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d20:	d10e      	bne.n	8005d40 <HAL_UART_Receive_IT+0x84>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d105      	bne.n	8005d36 <HAL_UART_Receive_IT+0x7a>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d34:	e02d      	b.n	8005d92 <HAL_UART_Receive_IT+0xd6>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	22ff      	movs	r2, #255	; 0xff
 8005d3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d3e:	e028      	b.n	8005d92 <HAL_UART_Receive_IT+0xd6>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10d      	bne.n	8005d64 <HAL_UART_Receive_IT+0xa8>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d104      	bne.n	8005d5a <HAL_UART_Receive_IT+0x9e>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	22ff      	movs	r2, #255	; 0xff
 8005d54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d58:	e01b      	b.n	8005d92 <HAL_UART_Receive_IT+0xd6>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	227f      	movs	r2, #127	; 0x7f
 8005d5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d62:	e016      	b.n	8005d92 <HAL_UART_Receive_IT+0xd6>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d6c:	d10d      	bne.n	8005d8a <HAL_UART_Receive_IT+0xce>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <HAL_UART_Receive_IT+0xc4>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	227f      	movs	r2, #127	; 0x7f
 8005d7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d7e:	e008      	b.n	8005d92 <HAL_UART_Receive_IT+0xd6>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	223f      	movs	r2, #63	; 0x3f
 8005d84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d88:	e003      	b.n	8005d92 <HAL_UART_Receive_IT+0xd6>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2222      	movs	r2, #34	; 0x22
 8005d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dba:	d12a      	bne.n	8005e12 <HAL_UART_Receive_IT+0x156>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d324      	bcc.n	8005e12 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d107      	bne.n	8005de2 <HAL_UART_Receive_IT+0x126>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d103      	bne.n	8005de2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	; (8005e5c <HAL_UART_Receive_IT+0x1a0>)
 8005dde:	66da      	str	r2, [r3, #108]	; 0x6c
 8005de0:	e002      	b.n	8005de8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <HAL_UART_Receive_IT+0x1a4>)
 8005de6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dfe:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	e01b      	b.n	8005e4a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1a:	d107      	bne.n	8005e2c <HAL_UART_Receive_IT+0x170>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d103      	bne.n	8005e2c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a0f      	ldr	r2, [pc, #60]	; (8005e64 <HAL_UART_Receive_IT+0x1a8>)
 8005e28:	66da      	str	r2, [r3, #108]	; 0x6c
 8005e2a:	e002      	b.n	8005e32 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4a0e      	ldr	r2, [pc, #56]	; (8005e68 <HAL_UART_Receive_IT+0x1ac>)
 8005e30:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005e48:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e000      	b.n	8005e50 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005e4e:	2302      	movs	r3, #2
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	080074e9 	.word	0x080074e9
 8005e60:	080073e1 	.word	0x080073e1
 8005e64:	08007337 	.word	0x08007337
 8005e68:	0800728d 	.word	0x0800728d

08005e6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d118      	bne.n	8005ece <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d013      	beq.n	8005ece <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d104      	bne.n	8005eba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8145 	beq.w	800614e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	4798      	blx	r3
      }
      return;
 8005ecc:	e13f      	b.n	800614e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 80e8 	beq.w	80060a6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4ba1      	ldr	r3, [pc, #644]	; (8006160 <HAL_UART_IRQHandler+0x2f4>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4ba0      	ldr	r3, [pc, #640]	; (8006164 <HAL_UART_IRQHandler+0x2f8>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 80dd 	beq.w	80060a6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d010      	beq.n	8005f18 <HAL_UART_IRQHandler+0xac>
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00b      	beq.n	8005f18 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	f043 0201 	orr.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d010      	beq.n	8005f44 <HAL_UART_IRQHandler+0xd8>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00b      	beq.n	8005f44 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2202      	movs	r2, #2
 8005f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	f043 0204 	orr.w	r2, r3, #4
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d010      	beq.n	8005f70 <HAL_UART_IRQHandler+0x104>
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f043 0202 	orr.w	r2, r3, #2
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d015      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4b76      	ldr	r3, [pc, #472]	; (8006160 <HAL_UART_IRQHandler+0x2f4>)
 8005f88:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2208      	movs	r2, #8
 8005f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9c:	f043 0208 	orr.w	r2, r3, #8
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d011      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x168>
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00c      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f043 0220 	orr.w	r2, r3, #32
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80b9 	beq.w	8006152 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d011      	beq.n	800600e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006014:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d004      	beq.n	800602e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800602a:	2b00      	cmp	r3, #0
 800602c:	d031      	beq.n	8006092 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 ffc0 	bl	8006fb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d123      	bne.n	800608a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006050:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605e:	4a42      	ldr	r2, [pc, #264]	; (8006168 <HAL_UART_IRQHandler+0x2fc>)
 8006060:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006066:	4618      	mov	r0, r3
 8006068:	f7fc fb14 	bl	8002694 <HAL_DMA_Abort_IT>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d017      	beq.n	80060a2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e00f      	b.n	80060a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f872 	bl	800616c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e00b      	b.n	80060a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f86e 	bl	800616c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e007      	b.n	80060a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f86a 	bl	800616c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80060a0:	e057      	b.n	8006152 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a2:	bf00      	nop
    return;
 80060a4:	e055      	b.n	8006152 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00d      	beq.n	80060cc <HAL_UART_IRQHandler+0x260>
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d008      	beq.n	80060cc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fa93 	bl	80075f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060ca:	e045      	b.n	8006158 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d012      	beq.n	80060fc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d031      	beq.n	8006156 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
    }
    return;
 80060fa:	e02c      	b.n	8006156 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_UART_IRQHandler+0x2ac>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 f8a1 	bl	8007258 <UART_EndTransmit_IT>
    return;
 8006116:	e01f      	b.n	8006158 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <HAL_UART_IRQHandler+0x2c8>
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f001 fa73 	bl	8007618 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006132:	e011      	b.n	8006158 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <HAL_UART_IRQHandler+0x2ec>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	da09      	bge.n	8006158 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fa5d 	bl	8007604 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800614a:	bf00      	nop
 800614c:	e004      	b.n	8006158 <HAL_UART_IRQHandler+0x2ec>
      return;
 800614e:	bf00      	nop
 8006150:	e002      	b.n	8006158 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006152:	bf00      	nop
 8006154:	e000      	b.n	8006158 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006156:	bf00      	nop
  }
}
 8006158:	3720      	adds	r7, #32
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	10000001 	.word	0x10000001
 8006164:	04000120 	.word	0x04000120
 8006168:	08006ffd 	.word	0x08006ffd

0800616c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006180:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006184:	b08e      	sub	sp, #56	; 0x38
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ae:	4313      	orrs	r3, r2
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4bc1      	ldr	r3, [pc, #772]	; (80064c0 <UART_SetConfig+0x340>)
 80061ba:	4013      	ands	r3, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061c2:	430b      	orrs	r3, r1
 80061c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4ab7      	ldr	r2, [pc, #732]	; (80064c4 <UART_SetConfig+0x344>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f2:	4313      	orrs	r3, r2
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	4bb2      	ldr	r3, [pc, #712]	; (80064c8 <UART_SetConfig+0x348>)
 80061fe:	4013      	ands	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006206:	430b      	orrs	r3, r1
 8006208:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	f023 010f 	bic.w	r1, r3, #15
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4aa9      	ldr	r2, [pc, #676]	; (80064cc <UART_SetConfig+0x34c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d177      	bne.n	800631a <UART_SetConfig+0x19a>
 800622a:	4ba9      	ldr	r3, [pc, #676]	; (80064d0 <UART_SetConfig+0x350>)
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006232:	2b28      	cmp	r3, #40	; 0x28
 8006234:	d86c      	bhi.n	8006310 <UART_SetConfig+0x190>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0xbc>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	080062e1 	.word	0x080062e1
 8006240:	08006311 	.word	0x08006311
 8006244:	08006311 	.word	0x08006311
 8006248:	08006311 	.word	0x08006311
 800624c:	08006311 	.word	0x08006311
 8006250:	08006311 	.word	0x08006311
 8006254:	08006311 	.word	0x08006311
 8006258:	08006311 	.word	0x08006311
 800625c:	080062e9 	.word	0x080062e9
 8006260:	08006311 	.word	0x08006311
 8006264:	08006311 	.word	0x08006311
 8006268:	08006311 	.word	0x08006311
 800626c:	08006311 	.word	0x08006311
 8006270:	08006311 	.word	0x08006311
 8006274:	08006311 	.word	0x08006311
 8006278:	08006311 	.word	0x08006311
 800627c:	080062f1 	.word	0x080062f1
 8006280:	08006311 	.word	0x08006311
 8006284:	08006311 	.word	0x08006311
 8006288:	08006311 	.word	0x08006311
 800628c:	08006311 	.word	0x08006311
 8006290:	08006311 	.word	0x08006311
 8006294:	08006311 	.word	0x08006311
 8006298:	08006311 	.word	0x08006311
 800629c:	080062f9 	.word	0x080062f9
 80062a0:	08006311 	.word	0x08006311
 80062a4:	08006311 	.word	0x08006311
 80062a8:	08006311 	.word	0x08006311
 80062ac:	08006311 	.word	0x08006311
 80062b0:	08006311 	.word	0x08006311
 80062b4:	08006311 	.word	0x08006311
 80062b8:	08006311 	.word	0x08006311
 80062bc:	08006301 	.word	0x08006301
 80062c0:	08006311 	.word	0x08006311
 80062c4:	08006311 	.word	0x08006311
 80062c8:	08006311 	.word	0x08006311
 80062cc:	08006311 	.word	0x08006311
 80062d0:	08006311 	.word	0x08006311
 80062d4:	08006311 	.word	0x08006311
 80062d8:	08006311 	.word	0x08006311
 80062dc:	08006309 	.word	0x08006309
 80062e0:	2301      	movs	r3, #1
 80062e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062e6:	e233      	b.n	8006750 <UART_SetConfig+0x5d0>
 80062e8:	2304      	movs	r3, #4
 80062ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ee:	e22f      	b.n	8006750 <UART_SetConfig+0x5d0>
 80062f0:	2308      	movs	r3, #8
 80062f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f6:	e22b      	b.n	8006750 <UART_SetConfig+0x5d0>
 80062f8:	2310      	movs	r3, #16
 80062fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fe:	e227      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006300:	2320      	movs	r3, #32
 8006302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006306:	e223      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006308:	2340      	movs	r3, #64	; 0x40
 800630a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630e:	e21f      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006310:	2380      	movs	r3, #128	; 0x80
 8006312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006316:	bf00      	nop
 8006318:	e21a      	b.n	8006750 <UART_SetConfig+0x5d0>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a6d      	ldr	r2, [pc, #436]	; (80064d4 <UART_SetConfig+0x354>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d132      	bne.n	800638a <UART_SetConfig+0x20a>
 8006324:	4b6a      	ldr	r3, [pc, #424]	; (80064d0 <UART_SetConfig+0x350>)
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	2b05      	cmp	r3, #5
 800632e:	d827      	bhi.n	8006380 <UART_SetConfig+0x200>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <UART_SetConfig+0x1b8>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	08006351 	.word	0x08006351
 800633c:	08006359 	.word	0x08006359
 8006340:	08006361 	.word	0x08006361
 8006344:	08006369 	.word	0x08006369
 8006348:	08006371 	.word	0x08006371
 800634c:	08006379 	.word	0x08006379
 8006350:	2300      	movs	r3, #0
 8006352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006356:	e1fb      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006358:	2304      	movs	r3, #4
 800635a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635e:	e1f7      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006360:	2308      	movs	r3, #8
 8006362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006366:	e1f3      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006368:	2310      	movs	r3, #16
 800636a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636e:	e1ef      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006370:	2320      	movs	r3, #32
 8006372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006376:	e1eb      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006378:	2340      	movs	r3, #64	; 0x40
 800637a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800637e:	e1e7      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006386:	bf00      	nop
 8006388:	e1e2      	b.n	8006750 <UART_SetConfig+0x5d0>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a52      	ldr	r2, [pc, #328]	; (80064d8 <UART_SetConfig+0x358>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d132      	bne.n	80063fa <UART_SetConfig+0x27a>
 8006394:	4b4e      	ldr	r3, [pc, #312]	; (80064d0 <UART_SetConfig+0x350>)
 8006396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	2b05      	cmp	r3, #5
 800639e:	d827      	bhi.n	80063f0 <UART_SetConfig+0x270>
 80063a0:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <UART_SetConfig+0x228>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063c1 	.word	0x080063c1
 80063ac:	080063c9 	.word	0x080063c9
 80063b0:	080063d1 	.word	0x080063d1
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063e9 	.word	0x080063e9
 80063c0:	2300      	movs	r3, #0
 80063c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c6:	e1c3      	b.n	8006750 <UART_SetConfig+0x5d0>
 80063c8:	2304      	movs	r3, #4
 80063ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ce:	e1bf      	b.n	8006750 <UART_SetConfig+0x5d0>
 80063d0:	2308      	movs	r3, #8
 80063d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d6:	e1bb      	b.n	8006750 <UART_SetConfig+0x5d0>
 80063d8:	2310      	movs	r3, #16
 80063da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063de:	e1b7      	b.n	8006750 <UART_SetConfig+0x5d0>
 80063e0:	2320      	movs	r3, #32
 80063e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063e6:	e1b3      	b.n	8006750 <UART_SetConfig+0x5d0>
 80063e8:	2340      	movs	r3, #64	; 0x40
 80063ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ee:	e1af      	b.n	8006750 <UART_SetConfig+0x5d0>
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063f6:	bf00      	nop
 80063f8:	e1aa      	b.n	8006750 <UART_SetConfig+0x5d0>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a37      	ldr	r2, [pc, #220]	; (80064dc <UART_SetConfig+0x35c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d132      	bne.n	800646a <UART_SetConfig+0x2ea>
 8006404:	4b32      	ldr	r3, [pc, #200]	; (80064d0 <UART_SetConfig+0x350>)
 8006406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	2b05      	cmp	r3, #5
 800640e:	d827      	bhi.n	8006460 <UART_SetConfig+0x2e0>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <UART_SetConfig+0x298>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	08006431 	.word	0x08006431
 800641c:	08006439 	.word	0x08006439
 8006420:	08006441 	.word	0x08006441
 8006424:	08006449 	.word	0x08006449
 8006428:	08006451 	.word	0x08006451
 800642c:	08006459 	.word	0x08006459
 8006430:	2300      	movs	r3, #0
 8006432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006436:	e18b      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006438:	2304      	movs	r3, #4
 800643a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800643e:	e187      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006440:	2308      	movs	r3, #8
 8006442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006446:	e183      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006448:	2310      	movs	r3, #16
 800644a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800644e:	e17f      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006450:	2320      	movs	r3, #32
 8006452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006456:	e17b      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006458:	2340      	movs	r3, #64	; 0x40
 800645a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800645e:	e177      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006466:	bf00      	nop
 8006468:	e172      	b.n	8006750 <UART_SetConfig+0x5d0>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1c      	ldr	r2, [pc, #112]	; (80064e0 <UART_SetConfig+0x360>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d144      	bne.n	80064fe <UART_SetConfig+0x37e>
 8006474:	4b16      	ldr	r3, [pc, #88]	; (80064d0 <UART_SetConfig+0x350>)
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	2b05      	cmp	r3, #5
 800647e:	d839      	bhi.n	80064f4 <UART_SetConfig+0x374>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <UART_SetConfig+0x308>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064a1 	.word	0x080064a1
 800648c:	080064a9 	.word	0x080064a9
 8006490:	080064b1 	.word	0x080064b1
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064e5 	.word	0x080064e5
 800649c:	080064ed 	.word	0x080064ed
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064a6:	e153      	b.n	8006750 <UART_SetConfig+0x5d0>
 80064a8:	2304      	movs	r3, #4
 80064aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ae:	e14f      	b.n	8006750 <UART_SetConfig+0x5d0>
 80064b0:	2308      	movs	r3, #8
 80064b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b6:	e14b      	b.n	8006750 <UART_SetConfig+0x5d0>
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064be:	e147      	b.n	8006750 <UART_SetConfig+0x5d0>
 80064c0:	cfff69f3 	.word	0xcfff69f3
 80064c4:	58000c00 	.word	0x58000c00
 80064c8:	11fff4ff 	.word	0x11fff4ff
 80064cc:	40011000 	.word	0x40011000
 80064d0:	58024400 	.word	0x58024400
 80064d4:	40004400 	.word	0x40004400
 80064d8:	40004800 	.word	0x40004800
 80064dc:	40004c00 	.word	0x40004c00
 80064e0:	40005000 	.word	0x40005000
 80064e4:	2320      	movs	r3, #32
 80064e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ea:	e131      	b.n	8006750 <UART_SetConfig+0x5d0>
 80064ec:	2340      	movs	r3, #64	; 0x40
 80064ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064f2:	e12d      	b.n	8006750 <UART_SetConfig+0x5d0>
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064fa:	bf00      	nop
 80064fc:	e128      	b.n	8006750 <UART_SetConfig+0x5d0>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4ab6      	ldr	r2, [pc, #728]	; (80067dc <UART_SetConfig+0x65c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d178      	bne.n	80065fa <UART_SetConfig+0x47a>
 8006508:	4bb5      	ldr	r3, [pc, #724]	; (80067e0 <UART_SetConfig+0x660>)
 800650a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006510:	2b28      	cmp	r3, #40	; 0x28
 8006512:	d86d      	bhi.n	80065f0 <UART_SetConfig+0x470>
 8006514:	a201      	add	r2, pc, #4	; (adr r2, 800651c <UART_SetConfig+0x39c>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	080065c1 	.word	0x080065c1
 8006520:	080065f1 	.word	0x080065f1
 8006524:	080065f1 	.word	0x080065f1
 8006528:	080065f1 	.word	0x080065f1
 800652c:	080065f1 	.word	0x080065f1
 8006530:	080065f1 	.word	0x080065f1
 8006534:	080065f1 	.word	0x080065f1
 8006538:	080065f1 	.word	0x080065f1
 800653c:	080065c9 	.word	0x080065c9
 8006540:	080065f1 	.word	0x080065f1
 8006544:	080065f1 	.word	0x080065f1
 8006548:	080065f1 	.word	0x080065f1
 800654c:	080065f1 	.word	0x080065f1
 8006550:	080065f1 	.word	0x080065f1
 8006554:	080065f1 	.word	0x080065f1
 8006558:	080065f1 	.word	0x080065f1
 800655c:	080065d1 	.word	0x080065d1
 8006560:	080065f1 	.word	0x080065f1
 8006564:	080065f1 	.word	0x080065f1
 8006568:	080065f1 	.word	0x080065f1
 800656c:	080065f1 	.word	0x080065f1
 8006570:	080065f1 	.word	0x080065f1
 8006574:	080065f1 	.word	0x080065f1
 8006578:	080065f1 	.word	0x080065f1
 800657c:	080065d9 	.word	0x080065d9
 8006580:	080065f1 	.word	0x080065f1
 8006584:	080065f1 	.word	0x080065f1
 8006588:	080065f1 	.word	0x080065f1
 800658c:	080065f1 	.word	0x080065f1
 8006590:	080065f1 	.word	0x080065f1
 8006594:	080065f1 	.word	0x080065f1
 8006598:	080065f1 	.word	0x080065f1
 800659c:	080065e1 	.word	0x080065e1
 80065a0:	080065f1 	.word	0x080065f1
 80065a4:	080065f1 	.word	0x080065f1
 80065a8:	080065f1 	.word	0x080065f1
 80065ac:	080065f1 	.word	0x080065f1
 80065b0:	080065f1 	.word	0x080065f1
 80065b4:	080065f1 	.word	0x080065f1
 80065b8:	080065f1 	.word	0x080065f1
 80065bc:	080065e9 	.word	0x080065e9
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065c6:	e0c3      	b.n	8006750 <UART_SetConfig+0x5d0>
 80065c8:	2304      	movs	r3, #4
 80065ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ce:	e0bf      	b.n	8006750 <UART_SetConfig+0x5d0>
 80065d0:	2308      	movs	r3, #8
 80065d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065d6:	e0bb      	b.n	8006750 <UART_SetConfig+0x5d0>
 80065d8:	2310      	movs	r3, #16
 80065da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065de:	e0b7      	b.n	8006750 <UART_SetConfig+0x5d0>
 80065e0:	2320      	movs	r3, #32
 80065e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065e6:	e0b3      	b.n	8006750 <UART_SetConfig+0x5d0>
 80065e8:	2340      	movs	r3, #64	; 0x40
 80065ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065ee:	e0af      	b.n	8006750 <UART_SetConfig+0x5d0>
 80065f0:	2380      	movs	r3, #128	; 0x80
 80065f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80065f6:	bf00      	nop
 80065f8:	e0aa      	b.n	8006750 <UART_SetConfig+0x5d0>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a79      	ldr	r2, [pc, #484]	; (80067e4 <UART_SetConfig+0x664>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d132      	bne.n	800666a <UART_SetConfig+0x4ea>
 8006604:	4b76      	ldr	r3, [pc, #472]	; (80067e0 <UART_SetConfig+0x660>)
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	2b05      	cmp	r3, #5
 800660e:	d827      	bhi.n	8006660 <UART_SetConfig+0x4e0>
 8006610:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <UART_SetConfig+0x498>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	08006631 	.word	0x08006631
 800661c:	08006639 	.word	0x08006639
 8006620:	08006641 	.word	0x08006641
 8006624:	08006649 	.word	0x08006649
 8006628:	08006651 	.word	0x08006651
 800662c:	08006659 	.word	0x08006659
 8006630:	2300      	movs	r3, #0
 8006632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006636:	e08b      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006638:	2304      	movs	r3, #4
 800663a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663e:	e087      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006640:	2308      	movs	r3, #8
 8006642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006646:	e083      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006648:	2310      	movs	r3, #16
 800664a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800664e:	e07f      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006650:	2320      	movs	r3, #32
 8006652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006656:	e07b      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006658:	2340      	movs	r3, #64	; 0x40
 800665a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800665e:	e077      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006660:	2380      	movs	r3, #128	; 0x80
 8006662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006666:	bf00      	nop
 8006668:	e072      	b.n	8006750 <UART_SetConfig+0x5d0>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5e      	ldr	r2, [pc, #376]	; (80067e8 <UART_SetConfig+0x668>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d132      	bne.n	80066da <UART_SetConfig+0x55a>
 8006674:	4b5a      	ldr	r3, [pc, #360]	; (80067e0 <UART_SetConfig+0x660>)
 8006676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	2b05      	cmp	r3, #5
 800667e:	d827      	bhi.n	80066d0 <UART_SetConfig+0x550>
 8006680:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0x508>)
 8006682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006686:	bf00      	nop
 8006688:	080066a1 	.word	0x080066a1
 800668c:	080066a9 	.word	0x080066a9
 8006690:	080066b1 	.word	0x080066b1
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066c1 	.word	0x080066c1
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	2300      	movs	r3, #0
 80066a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066a6:	e053      	b.n	8006750 <UART_SetConfig+0x5d0>
 80066a8:	2304      	movs	r3, #4
 80066aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ae:	e04f      	b.n	8006750 <UART_SetConfig+0x5d0>
 80066b0:	2308      	movs	r3, #8
 80066b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066b6:	e04b      	b.n	8006750 <UART_SetConfig+0x5d0>
 80066b8:	2310      	movs	r3, #16
 80066ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066be:	e047      	b.n	8006750 <UART_SetConfig+0x5d0>
 80066c0:	2320      	movs	r3, #32
 80066c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066c6:	e043      	b.n	8006750 <UART_SetConfig+0x5d0>
 80066c8:	2340      	movs	r3, #64	; 0x40
 80066ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ce:	e03f      	b.n	8006750 <UART_SetConfig+0x5d0>
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066d6:	bf00      	nop
 80066d8:	e03a      	b.n	8006750 <UART_SetConfig+0x5d0>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a43      	ldr	r2, [pc, #268]	; (80067ec <UART_SetConfig+0x66c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d132      	bne.n	800674a <UART_SetConfig+0x5ca>
 80066e4:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <UART_SetConfig+0x660>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	2b05      	cmp	r3, #5
 80066ee:	d827      	bhi.n	8006740 <UART_SetConfig+0x5c0>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0x578>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	08006711 	.word	0x08006711
 80066fc:	08006719 	.word	0x08006719
 8006700:	08006721 	.word	0x08006721
 8006704:	08006729 	.word	0x08006729
 8006708:	08006731 	.word	0x08006731
 800670c:	08006739 	.word	0x08006739
 8006710:	2302      	movs	r3, #2
 8006712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006716:	e01b      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006718:	2304      	movs	r3, #4
 800671a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671e:	e017      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006720:	2308      	movs	r3, #8
 8006722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006726:	e013      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006728:	2310      	movs	r3, #16
 800672a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672e:	e00f      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006730:	2320      	movs	r3, #32
 8006732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006736:	e00b      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006738:	2340      	movs	r3, #64	; 0x40
 800673a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800673e:	e007      	b.n	8006750 <UART_SetConfig+0x5d0>
 8006740:	2380      	movs	r3, #128	; 0x80
 8006742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006746:	bf00      	nop
 8006748:	e002      	b.n	8006750 <UART_SetConfig+0x5d0>
 800674a:	2380      	movs	r3, #128	; 0x80
 800674c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a25      	ldr	r2, [pc, #148]	; (80067ec <UART_SetConfig+0x66c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	f040 80b8 	bne.w	80068cc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800675c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006760:	2b08      	cmp	r3, #8
 8006762:	d019      	beq.n	8006798 <UART_SetConfig+0x618>
 8006764:	2b08      	cmp	r3, #8
 8006766:	dc04      	bgt.n	8006772 <UART_SetConfig+0x5f2>
 8006768:	2b02      	cmp	r3, #2
 800676a:	d009      	beq.n	8006780 <UART_SetConfig+0x600>
 800676c:	2b04      	cmp	r3, #4
 800676e:	d00b      	beq.n	8006788 <UART_SetConfig+0x608>
 8006770:	e042      	b.n	80067f8 <UART_SetConfig+0x678>
 8006772:	2b20      	cmp	r3, #32
 8006774:	d02b      	beq.n	80067ce <UART_SetConfig+0x64e>
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d02c      	beq.n	80067d4 <UART_SetConfig+0x654>
 800677a:	2b10      	cmp	r3, #16
 800677c:	d014      	beq.n	80067a8 <UART_SetConfig+0x628>
 800677e:	e03b      	b.n	80067f8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006780:	f7fe faa0 	bl	8004cc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006784:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006786:	e03d      	b.n	8006804 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006788:	f107 0314 	add.w	r3, r7, #20
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe faaf 	bl	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006796:	e035      	b.n	8006804 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006798:	f107 0308 	add.w	r3, r7, #8
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fbf3 	bl	8004f88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a6:	e02d      	b.n	8006804 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a8:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <UART_SetConfig+0x660>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d009      	beq.n	80067c8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <UART_SetConfig+0x660>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	08db      	lsrs	r3, r3, #3
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	4a0c      	ldr	r2, [pc, #48]	; (80067f0 <UART_SetConfig+0x670>)
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067c6:	e01d      	b.n	8006804 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80067c8:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <UART_SetConfig+0x670>)
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067cc:	e01a      	b.n	8006804 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067ce:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <UART_SetConfig+0x674>)
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067d2:	e017      	b.n	8006804 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067da:	e013      	b.n	8006804 <UART_SetConfig+0x684>
 80067dc:	40011400 	.word	0x40011400
 80067e0:	58024400 	.word	0x58024400
 80067e4:	40007800 	.word	0x40007800
 80067e8:	40007c00 	.word	0x40007c00
 80067ec:	58000c00 	.word	0x58000c00
 80067f0:	03d09000 	.word	0x03d09000
 80067f4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006802:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 824d 	beq.w	8006ca6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	4aad      	ldr	r2, [pc, #692]	; (8006ac8 <UART_SetConfig+0x948>)
 8006812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006816:	461a      	mov	r2, r3
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	fbb3 f3f2 	udiv	r3, r3, r2
 800681e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	4613      	mov	r3, r2
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	4413      	add	r3, r2
 800682a:	6a3a      	ldr	r2, [r7, #32]
 800682c:	429a      	cmp	r2, r3
 800682e:	d305      	bcc.n	800683c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006836:	6a3a      	ldr	r2, [r7, #32]
 8006838:	429a      	cmp	r2, r3
 800683a:	d903      	bls.n	8006844 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006842:	e230      	b.n	8006ca6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	4618      	mov	r0, r3
 8006848:	f04f 0100 	mov.w	r1, #0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	4a9d      	ldr	r2, [pc, #628]	; (8006ac8 <UART_SetConfig+0x948>)
 8006852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f04f 0400 	mov.w	r4, #0
 800685c:	461a      	mov	r2, r3
 800685e:	4623      	mov	r3, r4
 8006860:	f7f9 fdf6 	bl	8000450 <__aeabi_uldivmod>
 8006864:	4603      	mov	r3, r0
 8006866:	460c      	mov	r4, r1
 8006868:	4619      	mov	r1, r3
 800686a:	4622      	mov	r2, r4
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	f04f 0400 	mov.w	r4, #0
 8006874:	0214      	lsls	r4, r2, #8
 8006876:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800687a:	020b      	lsls	r3, r1, #8
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6852      	ldr	r2, [r2, #4]
 8006880:	0852      	lsrs	r2, r2, #1
 8006882:	4611      	mov	r1, r2
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	eb13 0b01 	adds.w	fp, r3, r1
 800688c:	eb44 0c02 	adc.w	ip, r4, r2
 8006890:	4658      	mov	r0, fp
 8006892:	4661      	mov	r1, ip
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f04f 0400 	mov.w	r4, #0
 800689c:	461a      	mov	r2, r3
 800689e:	4623      	mov	r3, r4
 80068a0:	f7f9 fdd6 	bl	8000450 <__aeabi_uldivmod>
 80068a4:	4603      	mov	r3, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b0:	d308      	bcc.n	80068c4 <UART_SetConfig+0x744>
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b8:	d204      	bcs.n	80068c4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c0:	60da      	str	r2, [r3, #12]
 80068c2:	e1f0      	b.n	8006ca6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80068ca:	e1ec      	b.n	8006ca6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d4:	f040 8100 	bne.w	8006ad8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80068d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	f200 80b7 	bhi.w	8006a50 <UART_SetConfig+0x8d0>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <UART_SetConfig+0x768>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	080069ed 	.word	0x080069ed
 80068ec:	080069f5 	.word	0x080069f5
 80068f0:	08006a51 	.word	0x08006a51
 80068f4:	08006a51 	.word	0x08006a51
 80068f8:	080069fd 	.word	0x080069fd
 80068fc:	08006a51 	.word	0x08006a51
 8006900:	08006a51 	.word	0x08006a51
 8006904:	08006a51 	.word	0x08006a51
 8006908:	08006a0d 	.word	0x08006a0d
 800690c:	08006a51 	.word	0x08006a51
 8006910:	08006a51 	.word	0x08006a51
 8006914:	08006a51 	.word	0x08006a51
 8006918:	08006a51 	.word	0x08006a51
 800691c:	08006a51 	.word	0x08006a51
 8006920:	08006a51 	.word	0x08006a51
 8006924:	08006a51 	.word	0x08006a51
 8006928:	08006a1d 	.word	0x08006a1d
 800692c:	08006a51 	.word	0x08006a51
 8006930:	08006a51 	.word	0x08006a51
 8006934:	08006a51 	.word	0x08006a51
 8006938:	08006a51 	.word	0x08006a51
 800693c:	08006a51 	.word	0x08006a51
 8006940:	08006a51 	.word	0x08006a51
 8006944:	08006a51 	.word	0x08006a51
 8006948:	08006a51 	.word	0x08006a51
 800694c:	08006a51 	.word	0x08006a51
 8006950:	08006a51 	.word	0x08006a51
 8006954:	08006a51 	.word	0x08006a51
 8006958:	08006a51 	.word	0x08006a51
 800695c:	08006a51 	.word	0x08006a51
 8006960:	08006a51 	.word	0x08006a51
 8006964:	08006a51 	.word	0x08006a51
 8006968:	08006a43 	.word	0x08006a43
 800696c:	08006a51 	.word	0x08006a51
 8006970:	08006a51 	.word	0x08006a51
 8006974:	08006a51 	.word	0x08006a51
 8006978:	08006a51 	.word	0x08006a51
 800697c:	08006a51 	.word	0x08006a51
 8006980:	08006a51 	.word	0x08006a51
 8006984:	08006a51 	.word	0x08006a51
 8006988:	08006a51 	.word	0x08006a51
 800698c:	08006a51 	.word	0x08006a51
 8006990:	08006a51 	.word	0x08006a51
 8006994:	08006a51 	.word	0x08006a51
 8006998:	08006a51 	.word	0x08006a51
 800699c:	08006a51 	.word	0x08006a51
 80069a0:	08006a51 	.word	0x08006a51
 80069a4:	08006a51 	.word	0x08006a51
 80069a8:	08006a51 	.word	0x08006a51
 80069ac:	08006a51 	.word	0x08006a51
 80069b0:	08006a51 	.word	0x08006a51
 80069b4:	08006a51 	.word	0x08006a51
 80069b8:	08006a51 	.word	0x08006a51
 80069bc:	08006a51 	.word	0x08006a51
 80069c0:	08006a51 	.word	0x08006a51
 80069c4:	08006a51 	.word	0x08006a51
 80069c8:	08006a51 	.word	0x08006a51
 80069cc:	08006a51 	.word	0x08006a51
 80069d0:	08006a51 	.word	0x08006a51
 80069d4:	08006a51 	.word	0x08006a51
 80069d8:	08006a51 	.word	0x08006a51
 80069dc:	08006a51 	.word	0x08006a51
 80069e0:	08006a51 	.word	0x08006a51
 80069e4:	08006a51 	.word	0x08006a51
 80069e8:	08006a49 	.word	0x08006a49
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ec:	f7fd fa50 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 80069f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80069f2:	e033      	b.n	8006a5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f4:	f7fd fa62 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 80069f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80069fa:	e02f      	b.n	8006a5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe f975 	bl	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a0a:	e027      	b.n	8006a5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0c:	f107 0308 	add.w	r3, r7, #8
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe fab9 	bl	8004f88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a1a:	e01f      	b.n	8006a5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a1c:	4b2b      	ldr	r3, [pc, #172]	; (8006acc <UART_SetConfig+0x94c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a28:	4b28      	ldr	r3, [pc, #160]	; (8006acc <UART_SetConfig+0x94c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	08db      	lsrs	r3, r3, #3
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	4a27      	ldr	r2, [pc, #156]	; (8006ad0 <UART_SetConfig+0x950>)
 8006a34:	fa22 f303 	lsr.w	r3, r2, r3
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a3a:	e00f      	b.n	8006a5c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006a3c:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <UART_SetConfig+0x950>)
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a40:	e00c      	b.n	8006a5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a42:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <UART_SetConfig+0x954>)
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a46:	e009      	b.n	8006a5c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a4e:	e005      	b.n	8006a5c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006a5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8121 	beq.w	8006ca6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <UART_SetConfig+0x948>)
 8006a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a76:	005a      	lsls	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	441a      	add	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	2b0f      	cmp	r3, #15
 8006a90:	d916      	bls.n	8006ac0 <UART_SetConfig+0x940>
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a98:	d212      	bcs.n	8006ac0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f023 030f 	bic.w	r3, r3, #15
 8006aa2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006abc:	60da      	str	r2, [r3, #12]
 8006abe:	e0f2      	b.n	8006ca6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ac6:	e0ee      	b.n	8006ca6 <UART_SetConfig+0xb26>
 8006ac8:	0800c8fc 	.word	0x0800c8fc
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	03d09000 	.word	0x03d09000
 8006ad4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	f200 80b7 	bhi.w	8006c50 <UART_SetConfig+0xad0>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x968>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006bed 	.word	0x08006bed
 8006aec:	08006bf5 	.word	0x08006bf5
 8006af0:	08006c51 	.word	0x08006c51
 8006af4:	08006c51 	.word	0x08006c51
 8006af8:	08006bfd 	.word	0x08006bfd
 8006afc:	08006c51 	.word	0x08006c51
 8006b00:	08006c51 	.word	0x08006c51
 8006b04:	08006c51 	.word	0x08006c51
 8006b08:	08006c0d 	.word	0x08006c0d
 8006b0c:	08006c51 	.word	0x08006c51
 8006b10:	08006c51 	.word	0x08006c51
 8006b14:	08006c51 	.word	0x08006c51
 8006b18:	08006c51 	.word	0x08006c51
 8006b1c:	08006c51 	.word	0x08006c51
 8006b20:	08006c51 	.word	0x08006c51
 8006b24:	08006c51 	.word	0x08006c51
 8006b28:	08006c1d 	.word	0x08006c1d
 8006b2c:	08006c51 	.word	0x08006c51
 8006b30:	08006c51 	.word	0x08006c51
 8006b34:	08006c51 	.word	0x08006c51
 8006b38:	08006c51 	.word	0x08006c51
 8006b3c:	08006c51 	.word	0x08006c51
 8006b40:	08006c51 	.word	0x08006c51
 8006b44:	08006c51 	.word	0x08006c51
 8006b48:	08006c51 	.word	0x08006c51
 8006b4c:	08006c51 	.word	0x08006c51
 8006b50:	08006c51 	.word	0x08006c51
 8006b54:	08006c51 	.word	0x08006c51
 8006b58:	08006c51 	.word	0x08006c51
 8006b5c:	08006c51 	.word	0x08006c51
 8006b60:	08006c51 	.word	0x08006c51
 8006b64:	08006c51 	.word	0x08006c51
 8006b68:	08006c43 	.word	0x08006c43
 8006b6c:	08006c51 	.word	0x08006c51
 8006b70:	08006c51 	.word	0x08006c51
 8006b74:	08006c51 	.word	0x08006c51
 8006b78:	08006c51 	.word	0x08006c51
 8006b7c:	08006c51 	.word	0x08006c51
 8006b80:	08006c51 	.word	0x08006c51
 8006b84:	08006c51 	.word	0x08006c51
 8006b88:	08006c51 	.word	0x08006c51
 8006b8c:	08006c51 	.word	0x08006c51
 8006b90:	08006c51 	.word	0x08006c51
 8006b94:	08006c51 	.word	0x08006c51
 8006b98:	08006c51 	.word	0x08006c51
 8006b9c:	08006c51 	.word	0x08006c51
 8006ba0:	08006c51 	.word	0x08006c51
 8006ba4:	08006c51 	.word	0x08006c51
 8006ba8:	08006c51 	.word	0x08006c51
 8006bac:	08006c51 	.word	0x08006c51
 8006bb0:	08006c51 	.word	0x08006c51
 8006bb4:	08006c51 	.word	0x08006c51
 8006bb8:	08006c51 	.word	0x08006c51
 8006bbc:	08006c51 	.word	0x08006c51
 8006bc0:	08006c51 	.word	0x08006c51
 8006bc4:	08006c51 	.word	0x08006c51
 8006bc8:	08006c51 	.word	0x08006c51
 8006bcc:	08006c51 	.word	0x08006c51
 8006bd0:	08006c51 	.word	0x08006c51
 8006bd4:	08006c51 	.word	0x08006c51
 8006bd8:	08006c51 	.word	0x08006c51
 8006bdc:	08006c51 	.word	0x08006c51
 8006be0:	08006c51 	.word	0x08006c51
 8006be4:	08006c51 	.word	0x08006c51
 8006be8:	08006c49 	.word	0x08006c49
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bec:	f7fd f950 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8006bf0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006bf2:	e033      	b.n	8006c5c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf4:	f7fd f962 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 8006bf8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006bfa:	e02f      	b.n	8006c5c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfc:	f107 0314 	add.w	r3, r7, #20
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe f875 	bl	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c0a:	e027      	b.n	8006c5c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c0c:	f107 0308 	add.w	r3, r7, #8
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe f9b9 	bl	8004f88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c1a:	e01f      	b.n	8006c5c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c1c:	4b2c      	ldr	r3, [pc, #176]	; (8006cd0 <UART_SetConfig+0xb50>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d009      	beq.n	8006c3c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c28:	4b29      	ldr	r3, [pc, #164]	; (8006cd0 <UART_SetConfig+0xb50>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	08db      	lsrs	r3, r3, #3
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <UART_SetConfig+0xb54>)
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c3a:	e00f      	b.n	8006c5c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006c3c:	4b25      	ldr	r3, [pc, #148]	; (8006cd4 <UART_SetConfig+0xb54>)
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c40:	e00c      	b.n	8006c5c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c42:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <UART_SetConfig+0xb58>)
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c46:	e009      	b.n	8006c5c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c4e:	e005      	b.n	8006c5c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c5a:	bf00      	nop
    }

    if (pclk != 0U)
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d021      	beq.n	8006ca6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	4a1d      	ldr	r2, [pc, #116]	; (8006cdc <UART_SetConfig+0xb5c>)
 8006c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	441a      	add	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	2b0f      	cmp	r3, #15
 8006c8c:	d908      	bls.n	8006ca0 <UART_SetConfig+0xb20>
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c94:	d204      	bcs.n	8006ca0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c9c:	60da      	str	r2, [r3, #12]
 8006c9e:	e002      	b.n	8006ca6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006cc2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3738      	adds	r7, #56	; 0x38
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	03d09000 	.word	0x03d09000
 8006cd8:	003d0900 	.word	0x003d0900
 8006cdc:	0800c8fc 	.word	0x0800c8fc

08006ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01a      	beq.n	8006df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dde:	d10a      	bne.n	8006df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	605a      	str	r2, [r3, #4]
  }
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e34:	f7fb fae4 	bl	8002400 <HAL_GetTick>
 8006e38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d10e      	bne.n	8006e66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f82c 	bl	8006eb4 <UART_WaitOnFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e022      	b.n	8006eac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d10e      	bne.n	8006e92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f816 	bl	8006eb4 <UART_WaitOnFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e00c      	b.n	8006eac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec4:	e062      	b.n	8006f8c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ecc:	d05e      	beq.n	8006f8c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ece:	f7fb fa97 	bl	8002400 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d302      	bcc.n	8006ee4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d11d      	bne.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ef2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e045      	b.n	8006fac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0304 	and.w	r3, r3, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d02e      	beq.n	8006f8c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3c:	d126      	bne.n	8006f8c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f56:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e00f      	b.n	8006fac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69da      	ldr	r2, [r3, #28]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	4013      	ands	r3, r2
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	bf0c      	ite	eq
 8006f9c:	2301      	moveq	r3, #1
 8006f9e:	2300      	movne	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d08d      	beq.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6899      	ldr	r1, [r3, #8]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b08      	ldr	r3, [pc, #32]	; (8006ff8 <UART_EndRxTransfer+0x44>)
 8006fd8:	400b      	ands	r3, r1
 8006fda:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	effffffe 	.word	0xeffffffe

08006ffc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff f8a6 	bl	800616c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007036:	2b21      	cmp	r3, #33	; 0x21
 8007038:	d12a      	bne.n	8007090 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d110      	bne.n	8007068 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007054:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007064:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007066:	e013      	b.n	8007090 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070aa:	2b21      	cmp	r3, #33	; 0x21
 80070ac:	d12f      	bne.n	800710e <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d110      	bne.n	80070dc <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070c8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80070da:	e018      	b.n	800710e <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f6:	1c9a      	adds	r2, r3, #2
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007128:	2b21      	cmp	r3, #33	; 0x21
 800712a:	d13d      	bne.n	80071a8 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007132:	81fb      	strh	r3, [r7, #14]
 8007134:	e035      	b.n	80071a2 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d111      	bne.n	8007166 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007150:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007160:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8007162:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8007164:	e020      	b.n	80071a8 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	d013      	beq.n	800719c <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007178:	781a      	ldrb	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800719c:	89fb      	ldrh	r3, [r7, #14]
 800719e:	3b01      	subs	r3, #1
 80071a0:	81fb      	strh	r3, [r7, #14]
 80071a2:	89fb      	ldrh	r3, [r7, #14]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1c6      	bne.n	8007136 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80071a8:	bf00      	nop
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c2:	2b21      	cmp	r3, #33	; 0x21
 80071c4:	d142      	bne.n	800724c <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071cc:	81fb      	strh	r3, [r7, #14]
 80071ce:	e03a      	b.n	8007246 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d111      	bne.n	8007200 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80071ea:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071fa:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80071fc:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80071fe:	e025      	b.n	800724c <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720a:	2b00      	cmp	r3, #0
 800720c:	d018      	beq.n	8007240 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007212:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007222:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007228:	1c9a      	adds	r2, r3, #2
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007240:	89fb      	ldrh	r3, [r7, #14]
 8007242:	3b01      	subs	r3, #1
 8007244:	81fb      	strh	r3, [r7, #14]
 8007246:	89fb      	ldrh	r3, [r7, #14]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1c1      	bne.n	80071d0 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800726e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fa fe5c 	bl	8001f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800729a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a2:	2b22      	cmp	r3, #34	; 0x22
 80072a4:	d13b      	bne.n	800731e <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072ae:	89bb      	ldrh	r3, [r7, #12]
 80072b0:	b2d9      	uxtb	r1, r3
 80072b2:	89fb      	ldrh	r3, [r7, #14]
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	400a      	ands	r2, r1
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d122      	bne.n	800732e <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072f6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0201 	bic.w	r2, r2, #1
 8007306:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fa fe20 	bl	8001f5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800731c:	e007      	b.n	800732e <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0208 	orr.w	r2, r2, #8
 800732c:	619a      	str	r2, [r3, #24]
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007344:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734c:	2b22      	cmp	r3, #34	; 0x22
 800734e:	d13b      	bne.n	80073c8 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800735e:	89ba      	ldrh	r2, [r7, #12]
 8007360:	89fb      	ldrh	r3, [r7, #14]
 8007362:	4013      	ands	r3, r2
 8007364:	b29a      	uxth	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736e:	1c9a      	adds	r2, r3, #2
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d122      	bne.n	80073d8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073a0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0201 	bic.w	r2, r2, #1
 80073b0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fa fdcb 	bl	8001f5c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073c6:	e007      	b.n	80073d8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	619a      	str	r2, [r3, #24]
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073ee:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f6:	2b22      	cmp	r3, #34	; 0x22
 80073f8:	d166      	bne.n	80074c8 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007400:	81fb      	strh	r3, [r7, #14]
 8007402:	e03d      	b.n	8007480 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800740c:	893b      	ldrh	r3, [r7, #8]
 800740e:	b2d9      	uxtb	r1, r3
 8007410:	89bb      	ldrh	r3, [r7, #12]
 8007412:	b2da      	uxtb	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	400a      	ands	r2, r1
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800742e:	b29b      	uxth	r3, r3
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d119      	bne.n	800747a <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007454:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6899      	ldr	r1, [r3, #8]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8007462:	400b      	ands	r3, r1
 8007464:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7fa fd71 	bl	8001f5c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800747a:	89fb      	ldrh	r3, [r7, #14]
 800747c:	3b01      	subs	r3, #1
 800747e:	81fb      	strh	r3, [r7, #14]
 8007480:	89fb      	ldrh	r3, [r7, #14]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1be      	bne.n	8007404 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800748c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800748e:	897b      	ldrh	r3, [r7, #10]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d021      	beq.n	80074d8 <UART_RxISR_8BIT_FIFOEN+0xf8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800749a:	897a      	ldrh	r2, [r7, #10]
 800749c:	429a      	cmp	r2, r3
 800749e:	d21b      	bcs.n	80074d8 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80074ae:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a0c      	ldr	r2, [pc, #48]	; (80074e4 <UART_RxISR_8BIT_FIFOEN+0x104>)
 80074b4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f042 0220 	orr.w	r2, r2, #32
 80074c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074c6:	e007      	b.n	80074d8 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0208 	orr.w	r2, r2, #8
 80074d6:	619a      	str	r2, [r3, #24]
}
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	effffffe 	.word	0xeffffffe
 80074e4:	0800728d 	.word	0x0800728d

080074e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074f6:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074fe:	2b22      	cmp	r3, #34	; 0x22
 8007500:	d166      	bne.n	80075d0 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007508:	82fb      	strh	r3, [r7, #22]
 800750a:	e03d      	b.n	8007588 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007518:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800751a:	8a3a      	ldrh	r2, [r7, #16]
 800751c:	8abb      	ldrh	r3, [r7, #20]
 800751e:	4013      	ands	r3, r2
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752a:	1c9a      	adds	r2, r3, #2
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007536:	b29b      	uxth	r3, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d119      	bne.n	8007582 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800755c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6899      	ldr	r1, [r3, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	4b1f      	ldr	r3, [pc, #124]	; (80075e8 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800756a:	400b      	ands	r3, r1
 800756c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fa fced 	bl	8001f5c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007582:	8afb      	ldrh	r3, [r7, #22]
 8007584:	3b01      	subs	r3, #1
 8007586:	82fb      	strh	r3, [r7, #22]
 8007588:	8afb      	ldrh	r3, [r7, #22]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1be      	bne.n	800750c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007594:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007596:	8a7b      	ldrh	r3, [r7, #18]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d021      	beq.n	80075e0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80075a2:	8a7a      	ldrh	r2, [r7, #18]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d21b      	bcs.n	80075e0 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80075b6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <UART_RxISR_16BIT_FIFOEN+0x104>)
 80075bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0220 	orr.w	r2, r2, #32
 80075cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075ce:	e007      	b.n	80075e0 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0208 	orr.w	r2, r2, #8
 80075de:	619a      	str	r2, [r3, #24]
}
 80075e0:	bf00      	nop
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	effffffe 	.word	0xeffffffe
 80075ec:	08007337 	.word	0x08007337

080075f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800763a:	2b01      	cmp	r3, #1
 800763c:	d101      	bne.n	8007642 <HAL_UARTEx_DisableFifoMode+0x16>
 800763e:	2302      	movs	r3, #2
 8007640:	e027      	b.n	8007692 <HAL_UARTEx_DisableFifoMode+0x66>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2224      	movs	r2, #36	; 0x24
 800764e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0201 	bic.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007670:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e02d      	b.n	8007712 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2224      	movs	r2, #36	; 0x24
 80076c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0201 	bic.w	r2, r2, #1
 80076dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f850 	bl	8007798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800772e:	2302      	movs	r3, #2
 8007730:	e02d      	b.n	800778e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2224      	movs	r2, #36	; 0x24
 800773e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f812 	bl	8007798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b089      	sub	sp, #36	; 0x24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80077a0:	4a2f      	ldr	r2, [pc, #188]	; (8007860 <UARTEx_SetNbDataToProcess+0xc8>)
 80077a2:	f107 0314 	add.w	r3, r7, #20
 80077a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077aa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80077ae:	4a2d      	ldr	r2, [pc, #180]	; (8007864 <UARTEx_SetNbDataToProcess+0xcc>)
 80077b0:	f107 030c 	add.w	r3, r7, #12
 80077b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077b8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d108      	bne.n	80077d6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077d4:	e03d      	b.n	8007852 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077d6:	2310      	movs	r3, #16
 80077d8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077da:	2310      	movs	r3, #16
 80077dc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	0e5b      	lsrs	r3, r3, #25
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	0f5b      	lsrs	r3, r3, #29
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80077fe:	7fbb      	ldrb	r3, [r7, #30]
 8007800:	7f3a      	ldrb	r2, [r7, #28]
 8007802:	f107 0120 	add.w	r1, r7, #32
 8007806:	440a      	add	r2, r1
 8007808:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800780c:	fb02 f303 	mul.w	r3, r2, r3
 8007810:	7f3a      	ldrb	r2, [r7, #28]
 8007812:	f107 0120 	add.w	r1, r7, #32
 8007816:	440a      	add	r2, r1
 8007818:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800781c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007820:	b29a      	uxth	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007828:	7ffb      	ldrb	r3, [r7, #31]
 800782a:	7f7a      	ldrb	r2, [r7, #29]
 800782c:	f107 0120 	add.w	r1, r7, #32
 8007830:	440a      	add	r2, r1
 8007832:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007836:	fb02 f303 	mul.w	r3, r2, r3
 800783a:	7f7a      	ldrb	r2, [r7, #29]
 800783c:	f107 0120 	add.w	r1, r7, #32
 8007840:	440a      	add	r2, r1
 8007842:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007846:	fb93 f3f2 	sdiv	r3, r3, r2
 800784a:	b29a      	uxth	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007852:	bf00      	nop
 8007854:	3724      	adds	r7, #36	; 0x24
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	0800c8d0 	.word	0x0800c8d0
 8007864:	0800c8d8 	.word	0x0800c8d8

08007868 <arm_fill_f32>:
 8007868:	b410      	push	{r4}
 800786a:	088c      	lsrs	r4, r1, #2
 800786c:	d010      	beq.n	8007890 <arm_fill_f32+0x28>
 800786e:	f100 0310 	add.w	r3, r0, #16
 8007872:	4622      	mov	r2, r4
 8007874:	3a01      	subs	r2, #1
 8007876:	ed03 0a04 	vstr	s0, [r3, #-16]
 800787a:	ed03 0a03 	vstr	s0, [r3, #-12]
 800787e:	f103 0310 	add.w	r3, r3, #16
 8007882:	ed03 0a06 	vstr	s0, [r3, #-24]	; 0xffffffe8
 8007886:	ed03 0a05 	vstr	s0, [r3, #-20]	; 0xffffffec
 800788a:	d1f3      	bne.n	8007874 <arm_fill_f32+0xc>
 800788c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8007890:	f011 0103 	ands.w	r1, r1, #3
 8007894:	d003      	beq.n	800789e <arm_fill_f32+0x36>
 8007896:	3901      	subs	r1, #1
 8007898:	eca0 0a01 	vstmia	r0!, {s0}
 800789c:	d1fb      	bne.n	8007896 <arm_fill_f32+0x2e>
 800789e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <arm_copy_f32>:
 80078a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80078ac:	d01e      	beq.n	80078ec <arm_copy_f32+0x48>
 80078ae:	f100 0410 	add.w	r4, r0, #16
 80078b2:	f101 0310 	add.w	r3, r1, #16
 80078b6:	4645      	mov	r5, r8
 80078b8:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80078bc:	3d01      	subs	r5, #1
 80078be:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 80078c2:	f103 0310 	add.w	r3, r3, #16
 80078c6:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80078ca:	f104 0410 	add.w	r4, r4, #16
 80078ce:	f854 6c14 	ldr.w	r6, [r4, #-20]
 80078d2:	f843 cc20 	str.w	ip, [r3, #-32]
 80078d6:	f843 ec1c 	str.w	lr, [r3, #-28]
 80078da:	f843 7c18 	str.w	r7, [r3, #-24]
 80078de:	f843 6c14 	str.w	r6, [r3, #-20]
 80078e2:	d1e9      	bne.n	80078b8 <arm_copy_f32+0x14>
 80078e4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80078e8:	4440      	add	r0, r8
 80078ea:	4441      	add	r1, r8
 80078ec:	f012 0203 	ands.w	r2, r2, #3
 80078f0:	d005      	beq.n	80078fe <arm_copy_f32+0x5a>
 80078f2:	f850 3b04 	ldr.w	r3, [r0], #4
 80078f6:	3a01      	subs	r2, #1
 80078f8:	f841 3b04 	str.w	r3, [r1], #4
 80078fc:	d1f9      	bne.n	80078f2 <arm_copy_f32+0x4e>
 80078fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007902:	bf00      	nop

08007904 <arm_std_f32>:
 8007904:	2901      	cmp	r1, #1
 8007906:	d065      	beq.n	80079d4 <arm_std_f32+0xd0>
 8007908:	eddf 5a39 	vldr	s11, [pc, #228]	; 80079f0 <arm_std_f32+0xec>
 800790c:	b530      	push	{r4, r5, lr}
 800790e:	088d      	lsrs	r5, r1, #2
 8007910:	b083      	sub	sp, #12
 8007912:	d062      	beq.n	80079da <arm_std_f32+0xd6>
 8007914:	eef0 6a65 	vmov.f32	s13, s11
 8007918:	f100 0310 	add.w	r3, r0, #16
 800791c:	462c      	mov	r4, r5
 800791e:	ed53 7a04 	vldr	s15, [r3, #-16]
 8007922:	3c01      	subs	r4, #1
 8007924:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007928:	f103 0310 	add.w	r3, r3, #16
 800792c:	ee27 4aa7 	vmul.f32	s8, s15, s15
 8007930:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8007934:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007938:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800793c:	ee27 5a07 	vmul.f32	s10, s14, s14
 8007940:	ee74 5a25 	vadd.f32	s11, s8, s11
 8007944:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007948:	ee64 6aa4 	vmul.f32	s13, s9, s9
 800794c:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007950:	ee77 7a24 	vadd.f32	s15, s14, s9
 8007954:	ee26 7a06 	vmul.f32	s14, s12, s12
 8007958:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800795c:	ee77 6a86 	vadd.f32	s13, s15, s12
 8007960:	ee77 5a25 	vadd.f32	s11, s14, s11
 8007964:	d1db      	bne.n	800791e <arm_std_f32+0x1a>
 8007966:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800796a:	f011 0303 	ands.w	r3, r1, #3
 800796e:	d009      	beq.n	8007984 <arm_std_f32+0x80>
 8007970:	ecf0 7a01 	vldmia	r0!, {s15}
 8007974:	3b01      	subs	r3, #1
 8007976:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800797a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800797e:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007982:	d1f5      	bne.n	8007970 <arm_std_f32+0x6c>
 8007984:	ee07 1a90 	vmov	s15, r1
 8007988:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800798c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007994:	ee77 6ac6 	vsub.f32	s13, s15, s12
 8007998:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 800799c:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 80079a0:	ee27 7a07 	vmul.f32	s14, s14, s14
 80079a4:	ee27 7a00 	vmul.f32	s14, s14, s0
 80079a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80079ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80079b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b4:	db0a      	blt.n	80079cc <arm_std_f32+0xc8>
 80079b6:	eeb1 0ac7 	vsqrt.f32	s0, s14
 80079ba:	eeb4 0a40 	vcmp.f32	s0, s0
 80079be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c2:	d10d      	bne.n	80079e0 <arm_std_f32+0xdc>
 80079c4:	ed82 0a00 	vstr	s0, [r2]
 80079c8:	b003      	add	sp, #12
 80079ca:	bd30      	pop	{r4, r5, pc}
 80079cc:	2300      	movs	r3, #0
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	b003      	add	sp, #12
 80079d2:	bd30      	pop	{r4, r5, pc}
 80079d4:	2300      	movs	r3, #0
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	4770      	bx	lr
 80079da:	eef0 6a65 	vmov.f32	s13, s11
 80079de:	e7c4      	b.n	800796a <arm_std_f32+0x66>
 80079e0:	eeb0 0a47 	vmov.f32	s0, s14
 80079e4:	9201      	str	r2, [sp, #4]
 80079e6:	f001 f8df 	bl	8008ba8 <sqrtf>
 80079ea:	9a01      	ldr	r2, [sp, #4]
 80079ec:	e7ea      	b.n	80079c4 <arm_std_f32+0xc0>
 80079ee:	bf00      	nop
 80079f0:	00000000 	.word	0x00000000

080079f4 <arm_mean_f32>:
 80079f4:	b430      	push	{r4, r5}
 80079f6:	088d      	lsrs	r5, r1, #2
 80079f8:	d02d      	beq.n	8007a56 <arm_mean_f32+0x62>
 80079fa:	f100 0310 	add.w	r3, r0, #16
 80079fe:	462c      	mov	r4, r5
 8007a00:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007a5c <arm_mean_f32+0x68>
 8007a04:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007a08:	3c01      	subs	r4, #1
 8007a0a:	ed13 6a03 	vldr	s12, [r3, #-12]
 8007a0e:	f103 0310 	add.w	r3, r3, #16
 8007a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a16:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8007a1a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8007a1e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2a:	d1eb      	bne.n	8007a04 <arm_mean_f32+0x10>
 8007a2c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007a30:	f011 0303 	ands.w	r3, r1, #3
 8007a34:	d005      	beq.n	8007a42 <arm_mean_f32+0x4e>
 8007a36:	ecb0 7a01 	vldmia	r0!, {s14}
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a40:	d1f9      	bne.n	8007a36 <arm_mean_f32+0x42>
 8007a42:	ee07 1a10 	vmov	s14, r1
 8007a46:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007a4a:	bc30      	pop	{r4, r5}
 8007a4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007a50:	edc2 6a00 	vstr	s13, [r2]
 8007a54:	4770      	bx	lr
 8007a56:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007a5c <arm_mean_f32+0x68>
 8007a5a:	e7e9      	b.n	8007a30 <arm_mean_f32+0x3c>
 8007a5c:	00000000 	.word	0x00000000

08007a60 <arm_max_f32>:
 8007a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	1e4d      	subs	r5, r1, #1
 8007a66:	f100 0c04 	add.w	ip, r0, #4
 8007a6a:	edd0 7a00 	vldr	s15, [r0]
 8007a6e:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8007a72:	d056      	beq.n	8007b22 <arm_max_f32+0xc2>
 8007a74:	3014      	adds	r0, #20
 8007a76:	46c8      	mov	r8, r9
 8007a78:	2404      	movs	r4, #4
 8007a7a:	2600      	movs	r6, #0
 8007a7c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007a80:	f1a4 0a03 	sub.w	sl, r4, #3
 8007a84:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007a88:	f1a4 0e02 	sub.w	lr, r4, #2
 8007a8c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007a90:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007a94:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007a98:	1e67      	subs	r7, r4, #1
 8007a9a:	3010      	adds	r0, #16
 8007a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa0:	bfc8      	it	gt
 8007aa2:	eef0 7a46 	vmovgt.f32	s15, s12
 8007aa6:	bfc8      	it	gt
 8007aa8:	4656      	movgt	r6, sl
 8007aaa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab2:	bf48      	it	mi
 8007ab4:	eef0 7a66 	vmovmi.f32	s15, s13
 8007ab8:	bf48      	it	mi
 8007aba:	4676      	movmi	r6, lr
 8007abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac4:	bf48      	it	mi
 8007ac6:	eef0 7a47 	vmovmi.f32	s15, s14
 8007aca:	bf48      	it	mi
 8007acc:	463e      	movmi	r6, r7
 8007ace:	eef4 7ae5 	vcmpe.f32	s15, s11
 8007ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad6:	bf48      	it	mi
 8007ad8:	4626      	movmi	r6, r4
 8007ada:	bf48      	it	mi
 8007adc:	eef0 7a65 	vmovmi.f32	s15, s11
 8007ae0:	f1b8 0801 	subs.w	r8, r8, #1
 8007ae4:	f104 0404 	add.w	r4, r4, #4
 8007ae8:	d1c8      	bne.n	8007a7c <arm_max_f32+0x1c>
 8007aea:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 8007aee:	f015 0003 	ands.w	r0, r5, #3
 8007af2:	d018      	beq.n	8007b26 <arm_max_f32+0xc6>
 8007af4:	1a08      	subs	r0, r1, r0
 8007af6:	ecbc 7a01 	vldmia	ip!, {s14}
 8007afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b02:	bfc8      	it	gt
 8007b04:	4606      	movgt	r6, r0
 8007b06:	f100 0001 	add.w	r0, r0, #1
 8007b0a:	bfd8      	it	le
 8007b0c:	eeb0 7a67 	vmovle.f32	s14, s15
 8007b10:	4281      	cmp	r1, r0
 8007b12:	eef0 7a47 	vmov.f32	s15, s14
 8007b16:	d1ee      	bne.n	8007af6 <arm_max_f32+0x96>
 8007b18:	ed82 7a00 	vstr	s14, [r2]
 8007b1c:	601e      	str	r6, [r3, #0]
 8007b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b22:	464e      	mov	r6, r9
 8007b24:	e7e3      	b.n	8007aee <arm_max_f32+0x8e>
 8007b26:	eeb0 7a67 	vmov.f32	s14, s15
 8007b2a:	e7f5      	b.n	8007b18 <arm_max_f32+0xb8>

08007b2c <arm_cfft_radix8by2_f32>:
 8007b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b30:	4607      	mov	r7, r0
 8007b32:	4608      	mov	r0, r1
 8007b34:	ed2d 8b06 	vpush	{d8-d10}
 8007b38:	f8b7 e000 	ldrh.w	lr, [r7]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8007b42:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8007b46:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8007b4a:	f000 80b0 	beq.w	8007cae <arm_cfft_radix8by2_f32+0x182>
 8007b4e:	008b      	lsls	r3, r1, #2
 8007b50:	3210      	adds	r2, #16
 8007b52:	f100 0610 	add.w	r6, r0, #16
 8007b56:	f108 0510 	add.w	r5, r8, #16
 8007b5a:	3310      	adds	r3, #16
 8007b5c:	18c4      	adds	r4, r0, r3
 8007b5e:	4443      	add	r3, r8
 8007b60:	ed55 6a04 	vldr	s13, [r5, #-16]
 8007b64:	f1be 0e01 	subs.w	lr, lr, #1
 8007b68:	ed56 4a04 	vldr	s9, [r6, #-16]
 8007b6c:	f104 0410 	add.w	r4, r4, #16
 8007b70:	ed15 7a03 	vldr	s14, [r5, #-12]
 8007b74:	f106 0610 	add.w	r6, r6, #16
 8007b78:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8007b7c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8007b80:	ed55 2a01 	vldr	s5, [r5, #-4]
 8007b84:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8007b88:	ed53 0a04 	vldr	s1, [r3, #-16]
 8007b8c:	f102 0210 	add.w	r2, r2, #16
 8007b90:	ed13 5a03 	vldr	s10, [r3, #-12]
 8007b94:	f105 0510 	add.w	r5, r5, #16
 8007b98:	ed13 3a02 	vldr	s6, [r3, #-8]
 8007b9c:	f103 0310 	add.w	r3, r3, #16
 8007ba0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8007ba4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8007ba8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8007bac:	ee33 8a83 	vadd.f32	s16, s7, s6
 8007bb0:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8007bb4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8007bb8:	ee34 0a06 	vadd.f32	s0, s8, s12
 8007bbc:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8007bc0:	ee76 aa87 	vadd.f32	s21, s13, s14
 8007bc4:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8007bc8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007bcc:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8007bd0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8007bd4:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8007bd8:	ee71 8a05 	vadd.f32	s17, s2, s10
 8007bdc:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8007be0:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8007be4:	ee72 9a22 	vadd.f32	s19, s4, s5
 8007be8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007bec:	ee35 5a41 	vsub.f32	s10, s10, s2
 8007bf0:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8007bf4:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8007bf8:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007bfc:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8007c00:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8007c04:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8007c08:	ee72 7a62 	vsub.f32	s15, s4, s5
 8007c0c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8007c10:	ee73 2a63 	vsub.f32	s5, s6, s7
 8007c14:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8007c18:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8007c1c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8007c20:	ee24 3a84 	vmul.f32	s6, s9, s8
 8007c24:	ee27 2a26 	vmul.f32	s4, s14, s13
 8007c28:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8007c2c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8007c30:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007c34:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007c38:	ee65 6a26 	vmul.f32	s13, s10, s13
 8007c3c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8007c40:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007c44:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007c48:	ee33 4a02 	vadd.f32	s8, s6, s4
 8007c4c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007c50:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8007c54:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8007c58:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8007c5c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8007c60:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8007c64:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8007c68:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8007c6c:	ee27 4a87 	vmul.f32	s8, s15, s14
 8007c70:	ee61 5a87 	vmul.f32	s11, s3, s14
 8007c74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c78:	ee22 5a87 	vmul.f32	s10, s5, s14
 8007c7c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007c80:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007c84:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8007c88:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007c8c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007c90:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007c94:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007c98:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8007c9c:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8007ca0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8007ca4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8007ca8:	f47f af5a 	bne.w	8007b60 <arm_cfft_radix8by2_f32+0x34>
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	b28c      	uxth	r4, r1
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	f000 fc84 	bl	80085c0 <arm_radix8_butterfly_f32>
 8007cb8:	4621      	mov	r1, r4
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	ecbd 8b06 	vpop	{d8-d10}
 8007cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc8:	f000 bc7a 	b.w	80085c0 <arm_radix8_butterfly_f32>

08007ccc <arm_cfft_radix8by4_f32>:
 8007ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	ed2d 8b06 	vpush	{d8-d10}
 8007cd4:	8804      	ldrh	r4, [r0, #0]
 8007cd6:	b08f      	sub	sp, #60	; 0x3c
 8007cd8:	ed91 6a00 	vldr	s12, [r1]
 8007cdc:	460a      	mov	r2, r1
 8007cde:	0864      	lsrs	r4, r4, #1
 8007ce0:	ed91 7a01 	vldr	s14, [r1, #4]
 8007ce4:	9101      	str	r1, [sp, #4]
 8007ce6:	00a3      	lsls	r3, r4, #2
 8007ce8:	6841      	ldr	r1, [r0, #4]
 8007cea:	0864      	lsrs	r4, r4, #1
 8007cec:	900c      	str	r0, [sp, #48]	; 0x30
 8007cee:	9205      	str	r2, [sp, #20]
 8007cf0:	f101 0610 	add.w	r6, r1, #16
 8007cf4:	4625      	mov	r5, r4
 8007cf6:	940b      	str	r4, [sp, #44]	; 0x2c
 8007cf8:	f101 0408 	add.w	r4, r1, #8
 8007cfc:	9602      	str	r6, [sp, #8]
 8007cfe:	9407      	str	r4, [sp, #28]
 8007d00:	18d4      	adds	r4, r2, r3
 8007d02:	1eaa      	subs	r2, r5, #2
 8007d04:	f101 0518 	add.w	r5, r1, #24
 8007d08:	18e0      	adds	r0, r4, r3
 8007d0a:	edd4 4a00 	vldr	s9, [r4]
 8007d0e:	ed94 4a01 	vldr	s8, [r4, #4]
 8007d12:	46a6      	mov	lr, r4
 8007d14:	edd0 6a00 	vldr	s13, [r0]
 8007d18:	18c7      	adds	r7, r0, r3
 8007d1a:	edd0 7a01 	vldr	s15, [r0, #4]
 8007d1e:	46a0      	mov	r8, r4
 8007d20:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007d24:	ed97 5a00 	vldr	s10, [r7]
 8007d28:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	9506      	str	r5, [sp, #24]
 8007d30:	4605      	mov	r5, r0
 8007d32:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8007d36:	900a      	str	r0, [sp, #40]	; 0x28
 8007d38:	9801      	ldr	r0, [sp, #4]
 8007d3a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d42:	ed97 3a01 	vldr	s6, [r7, #4]
 8007d46:	ee72 2a85 	vadd.f32	s5, s5, s10
 8007d4a:	46bc      	mov	ip, r7
 8007d4c:	ee76 3a84 	vadd.f32	s7, s13, s8
 8007d50:	9704      	str	r7, [sp, #16]
 8007d52:	ee36 7a44 	vsub.f32	s14, s12, s8
 8007d56:	f8cd e00c 	str.w	lr, [sp, #12]
 8007d5a:	ee12 9a90 	vmov	r9, s5
 8007d5e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8007d62:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8007d66:	1f3e      	subs	r6, r7, #4
 8007d68:	f840 9b08 	str.w	r9, [r0], #8
 8007d6c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8007d70:	edde 2a01 	vldr	s5, [lr, #4]
 8007d74:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8007d78:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8007d7c:	eddc 4a01 	vldr	s9, [ip, #4]
 8007d80:	ee36 6a22 	vadd.f32	s12, s12, s5
 8007d84:	9001      	str	r0, [sp, #4]
 8007d86:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007d8a:	9805      	ldr	r0, [sp, #20]
 8007d8c:	ee13 9a90 	vmov	r9, s7
 8007d90:	ee37 7a43 	vsub.f32	s14, s14, s6
 8007d94:	ee36 6a24 	vadd.f32	s12, s12, s9
 8007d98:	f1ae 0704 	sub.w	r7, lr, #4
 8007d9c:	ee74 4a05 	vadd.f32	s9, s8, s10
 8007da0:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007da4:	ed80 6a01 	vstr	s12, [r0, #4]
 8007da8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007dac:	f848 9b08 	str.w	r9, [r8], #8
 8007db0:	edce 4a01 	vstr	s9, [lr, #4]
 8007db4:	ee15 ea90 	vmov	lr, s11
 8007db8:	f844 eb08 	str.w	lr, [r4], #8
 8007dbc:	ee16 ea90 	vmov	lr, s13
 8007dc0:	9408      	str	r4, [sp, #32]
 8007dc2:	462c      	mov	r4, r5
 8007dc4:	ed85 7a01 	vstr	s14, [r5, #4]
 8007dc8:	9d04      	ldr	r5, [sp, #16]
 8007dca:	f84c eb08 	str.w	lr, [ip], #8
 8007dce:	edc5 7a01 	vstr	s15, [r5, #4]
 8007dd2:	0855      	lsrs	r5, r2, #1
 8007dd4:	9509      	str	r5, [sp, #36]	; 0x24
 8007dd6:	f000 8130 	beq.w	800803a <arm_cfft_radix8by4_f32+0x36e>
 8007dda:	9805      	ldr	r0, [sp, #20]
 8007ddc:	3b08      	subs	r3, #8
 8007dde:	46ab      	mov	fp, r5
 8007de0:	f1a4 020c 	sub.w	r2, r4, #12
 8007de4:	f100 0510 	add.w	r5, r0, #16
 8007de8:	f101 0920 	add.w	r9, r1, #32
 8007dec:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007df0:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007df4:	4433      	add	r3, r6
 8007df6:	3410      	adds	r4, #16
 8007df8:	4660      	mov	r0, ip
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8007e00:	ed54 6a02 	vldr	s13, [r4, #-8]
 8007e04:	f1bb 0b01 	subs.w	fp, fp, #1
 8007e08:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007e0c:	f10a 0a08 	add.w	sl, sl, #8
 8007e10:	edd1 7a00 	vldr	s15, [r1]
 8007e14:	f105 0508 	add.w	r5, r5, #8
 8007e18:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8007e1c:	edd0 2a00 	vldr	s5, [r0]
 8007e20:	ed14 7a01 	vldr	s14, [r4, #-4]
 8007e24:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8007e28:	ed55 6a03 	vldr	s13, [r5, #-12]
 8007e2c:	f1a2 0208 	sub.w	r2, r2, #8
 8007e30:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8007e34:	ed90 2a01 	vldr	s4, [r0, #4]
 8007e38:	ee36 5a87 	vadd.f32	s10, s13, s14
 8007e3c:	ed91 6a01 	vldr	s12, [r1, #4]
 8007e40:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007e44:	f109 0910 	add.w	r9, r9, #16
 8007e48:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8007e4c:	f104 0408 	add.w	r4, r4, #8
 8007e50:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8007e54:	f10e 0e18 	add.w	lr, lr, #24
 8007e58:	ee37 3a67 	vsub.f32	s6, s14, s15
 8007e5c:	f1a3 0308 	sub.w	r3, r3, #8
 8007e60:	ed45 6a04 	vstr	s13, [r5, #-16]
 8007e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e68:	edd1 6a01 	vldr	s13, [r1, #4]
 8007e6c:	ee75 1a86 	vadd.f32	s3, s11, s12
 8007e70:	edd0 4a01 	vldr	s9, [r0, #4]
 8007e74:	ee33 3a22 	vadd.f32	s6, s6, s5
 8007e78:	ee75 6a26 	vadd.f32	s13, s10, s13
 8007e7c:	ee35 5a46 	vsub.f32	s10, s10, s12
 8007e80:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007e84:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007e88:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8007e8c:	ee35 5a42 	vsub.f32	s10, s10, s4
 8007e90:	ed45 6a03 	vstr	s13, [r5, #-12]
 8007e94:	ee36 2a02 	vadd.f32	s4, s12, s4
 8007e98:	edd6 7a00 	vldr	s15, [r6]
 8007e9c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007ea0:	ed97 1a00 	vldr	s2, [r7]
 8007ea4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8007ea8:	ed92 8a04 	vldr	s16, [r2, #16]
 8007eac:	ee71 8a27 	vadd.f32	s17, s2, s15
 8007eb0:	ed93 aa04 	vldr	s20, [r3, #16]
 8007eb4:	ed16 7a01 	vldr	s14, [r6, #-4]
 8007eb8:	ee71 7a67 	vsub.f32	s15, s2, s15
 8007ebc:	ed57 0a01 	vldr	s1, [r7, #-4]
 8007ec0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8007ec4:	ee38 6a88 	vadd.f32	s12, s17, s16
 8007ec8:	edd3 9a03 	vldr	s19, [r3, #12]
 8007ecc:	ee30 0a87 	vadd.f32	s0, s1, s14
 8007ed0:	ed92 9a03 	vldr	s18, [r2, #12]
 8007ed4:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8007ed8:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8007edc:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8007ee0:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8007ee4:	ee16 ca10 	vmov	ip, s12
 8007ee8:	ee30 6a49 	vsub.f32	s12, s0, s18
 8007eec:	ee77 4a01 	vadd.f32	s9, s14, s2
 8007ef0:	f847 c908 	str.w	ip, [r7], #-8
 8007ef4:	ee34 4a29 	vadd.f32	s8, s8, s19
 8007ef8:	edd2 8a03 	vldr	s17, [r2, #12]
 8007efc:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8007f00:	ed93 8a03 	vldr	s16, [r3, #12]
 8007f04:	ee71 0a47 	vsub.f32	s1, s2, s14
 8007f08:	ee30 0a28 	vadd.f32	s0, s0, s17
 8007f0c:	ee39 1a67 	vsub.f32	s2, s18, s15
 8007f10:	ee36 6a69 	vsub.f32	s12, s12, s19
 8007f14:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007f18:	ee75 5aca 	vsub.f32	s11, s11, s20
 8007f1c:	ed87 0a01 	vstr	s0, [r7, #4]
 8007f20:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8007f24:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8007f28:	ee21 8a80 	vmul.f32	s16, s3, s0
 8007f2c:	ee23 7a26 	vmul.f32	s14, s6, s13
 8007f30:	ee64 7a26 	vmul.f32	s15, s8, s13
 8007f34:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8007f38:	ee24 4a00 	vmul.f32	s8, s8, s0
 8007f3c:	ee23 3a00 	vmul.f32	s6, s6, s0
 8007f40:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8007f44:	ee24 0a80 	vmul.f32	s0, s9, s0
 8007f48:	ee38 7a07 	vadd.f32	s14, s16, s14
 8007f4c:	ee76 6a84 	vadd.f32	s13, s13, s8
 8007f50:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007f54:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007f58:	ee17 ca10 	vmov	ip, s14
 8007f5c:	f841 cb08 	str.w	ip, [r1], #8
 8007f60:	ed01 3a01 	vstr	s6, [r1, #-4]
 8007f64:	ed82 0a04 	vstr	s0, [r2, #16]
 8007f68:	edc2 6a03 	vstr	s13, [r2, #12]
 8007f6c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8007f70:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8007f74:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8007f78:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8007f7c:	ee65 4a27 	vmul.f32	s9, s10, s15
 8007f80:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8007f84:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8007f88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007f8c:	ee25 5a26 	vmul.f32	s10, s10, s13
 8007f90:	ee66 6a26 	vmul.f32	s13, s12, s13
 8007f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f98:	ee34 6a24 	vadd.f32	s12, s8, s9
 8007f9c:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8007fa0:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007fa4:	ee17 ca90 	vmov	ip, s15
 8007fa8:	ed04 6a04 	vstr	s12, [r4, #-16]
 8007fac:	ed04 5a03 	vstr	s10, [r4, #-12]
 8007fb0:	f846 c908 	str.w	ip, [r6], #-8
 8007fb4:	edc6 6a01 	vstr	s13, [r6, #4]
 8007fb8:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8007fbc:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8007fc0:	ee62 5a27 	vmul.f32	s11, s4, s15
 8007fc4:	ee22 6a87 	vmul.f32	s12, s5, s14
 8007fc8:	ee22 2a07 	vmul.f32	s4, s4, s14
 8007fcc:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8007fd0:	ee61 6a07 	vmul.f32	s13, s2, s14
 8007fd4:	ee20 7a87 	vmul.f32	s14, s1, s14
 8007fd8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007fdc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8007fe0:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007fe4:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8007fe8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8007fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ff0:	ee16 ca10 	vmov	ip, s12
 8007ff4:	f840 cb08 	str.w	ip, [r0], #8
 8007ff8:	ed40 2a01 	vstr	s5, [r0, #-4]
 8007ffc:	edc3 0a04 	vstr	s1, [r3, #16]
 8008000:	edc3 7a03 	vstr	s15, [r3, #12]
 8008004:	f47f aefc 	bne.w	8007e00 <arm_cfft_radix8by4_f32+0x134>
 8008008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800800a:	9802      	ldr	r0, [sp, #8]
 800800c:	00cb      	lsls	r3, r1, #3
 800800e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8008012:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008016:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800801a:	4498      	add	r8, r3
 800801c:	449c      	add	ip, r3
 800801e:	9102      	str	r1, [sp, #8]
 8008020:	9901      	ldr	r1, [sp, #4]
 8008022:	4419      	add	r1, r3
 8008024:	9101      	str	r1, [sp, #4]
 8008026:	9907      	ldr	r1, [sp, #28]
 8008028:	4419      	add	r1, r3
 800802a:	9107      	str	r1, [sp, #28]
 800802c:	9908      	ldr	r1, [sp, #32]
 800802e:	4419      	add	r1, r3
 8008030:	9b06      	ldr	r3, [sp, #24]
 8008032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008036:	9108      	str	r1, [sp, #32]
 8008038:	9306      	str	r3, [sp, #24]
 800803a:	9a01      	ldr	r2, [sp, #4]
 800803c:	2304      	movs	r3, #4
 800803e:	9e08      	ldr	r6, [sp, #32]
 8008040:	edd2 7a00 	vldr	s15, [r2]
 8008044:	ed96 7a00 	vldr	s14, [r6]
 8008048:	edd8 2a00 	vldr	s5, [r8]
 800804c:	ee77 5a87 	vadd.f32	s11, s15, s14
 8008050:	ed9c 3a00 	vldr	s6, [ip]
 8008054:	ed92 6a01 	vldr	s12, [r2, #4]
 8008058:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800805c:	edd6 6a01 	vldr	s13, [r6, #4]
 8008060:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8008064:	ed9c 2a01 	vldr	s4, [ip, #4]
 8008068:	ee36 5a26 	vadd.f32	s10, s12, s13
 800806c:	edd8 7a01 	vldr	s15, [r8, #4]
 8008070:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008074:	9d02      	ldr	r5, [sp, #8]
 8008076:	ee34 6a83 	vadd.f32	s12, s9, s6
 800807a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800807e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8008082:	9805      	ldr	r0, [sp, #20]
 8008084:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8008088:	4621      	mov	r1, r4
 800808a:	ed82 6a00 	vstr	s12, [r2]
 800808e:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8008092:	edd8 3a01 	vldr	s7, [r8, #4]
 8008096:	ee75 5a67 	vsub.f32	s11, s10, s15
 800809a:	eddc 1a01 	vldr	s3, [ip, #4]
 800809e:	ee34 4a42 	vsub.f32	s8, s8, s4
 80080a2:	ee75 3a23 	vadd.f32	s7, s10, s7
 80080a6:	ee74 4a83 	vadd.f32	s9, s9, s6
 80080aa:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80080ae:	ee33 5aa1 	vadd.f32	s10, s7, s3
 80080b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80080b6:	ee36 6a43 	vsub.f32	s12, s12, s6
 80080ba:	ed82 5a01 	vstr	s10, [r2, #4]
 80080be:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80080c2:	9a07      	ldr	r2, [sp, #28]
 80080c4:	ee77 7a02 	vadd.f32	s15, s14, s4
 80080c8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 80080cc:	edd2 2a00 	vldr	s5, [r2]
 80080d0:	ed92 5a01 	vldr	s10, [r2, #4]
 80080d4:	ee64 3a22 	vmul.f32	s7, s8, s5
 80080d8:	ee24 4a05 	vmul.f32	s8, s8, s10
 80080dc:	ee24 5a85 	vmul.f32	s10, s9, s10
 80080e0:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80080e4:	ee33 5a85 	vadd.f32	s10, s7, s10
 80080e8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80080ec:	ed88 5a00 	vstr	s10, [r8]
 80080f0:	edc8 4a01 	vstr	s9, [r8, #4]
 80080f4:	edd5 4a01 	vldr	s9, [r5, #4]
 80080f8:	edd5 6a00 	vldr	s13, [r5]
 80080fc:	9d06      	ldr	r5, [sp, #24]
 80080fe:	ee26 5a26 	vmul.f32	s10, s12, s13
 8008102:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008106:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800810a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800810e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8008112:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008116:	ed86 6a01 	vstr	s12, [r6, #4]
 800811a:	edc6 5a00 	vstr	s11, [r6]
 800811e:	edd5 5a01 	vldr	s11, [r5, #4]
 8008122:	edd5 6a00 	vldr	s13, [r5]
 8008126:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008128:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800812c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008130:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008134:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008138:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800813c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008140:	edcc 7a01 	vstr	s15, [ip, #4]
 8008144:	ed8c 7a00 	vstr	s14, [ip]
 8008148:	6872      	ldr	r2, [r6, #4]
 800814a:	f000 fa39 	bl	80085c0 <arm_radix8_butterfly_f32>
 800814e:	9803      	ldr	r0, [sp, #12]
 8008150:	4621      	mov	r1, r4
 8008152:	6872      	ldr	r2, [r6, #4]
 8008154:	2304      	movs	r3, #4
 8008156:	f000 fa33 	bl	80085c0 <arm_radix8_butterfly_f32>
 800815a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800815c:	4621      	mov	r1, r4
 800815e:	6872      	ldr	r2, [r6, #4]
 8008160:	2304      	movs	r3, #4
 8008162:	f000 fa2d 	bl	80085c0 <arm_radix8_butterfly_f32>
 8008166:	4621      	mov	r1, r4
 8008168:	6872      	ldr	r2, [r6, #4]
 800816a:	2304      	movs	r3, #4
 800816c:	9804      	ldr	r0, [sp, #16]
 800816e:	b00f      	add	sp, #60	; 0x3c
 8008170:	ecbd 8b06 	vpop	{d8-d10}
 8008174:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	f000 ba22 	b.w	80085c0 <arm_radix8_butterfly_f32>

0800817c <arm_cfft_f32>:
 800817c:	2a01      	cmp	r2, #1
 800817e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008182:	4606      	mov	r6, r0
 8008184:	4617      	mov	r7, r2
 8008186:	460c      	mov	r4, r1
 8008188:	4698      	mov	r8, r3
 800818a:	8805      	ldrh	r5, [r0, #0]
 800818c:	d053      	beq.n	8008236 <arm_cfft_f32+0xba>
 800818e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008192:	d04b      	beq.n	800822c <arm_cfft_f32+0xb0>
 8008194:	d916      	bls.n	80081c4 <arm_cfft_f32+0x48>
 8008196:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800819a:	d01a      	beq.n	80081d2 <arm_cfft_f32+0x56>
 800819c:	d95a      	bls.n	8008254 <arm_cfft_f32+0xd8>
 800819e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80081a2:	d043      	beq.n	800822c <arm_cfft_f32+0xb0>
 80081a4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80081a8:	d105      	bne.n	80081b6 <arm_cfft_f32+0x3a>
 80081aa:	2301      	movs	r3, #1
 80081ac:	6872      	ldr	r2, [r6, #4]
 80081ae:	4629      	mov	r1, r5
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 fa05 	bl	80085c0 <arm_radix8_butterfly_f32>
 80081b6:	f1b8 0f00 	cmp.w	r8, #0
 80081ba:	d111      	bne.n	80081e0 <arm_cfft_f32+0x64>
 80081bc:	2f01      	cmp	r7, #1
 80081be:	d016      	beq.n	80081ee <arm_cfft_f32+0x72>
 80081c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c4:	2d20      	cmp	r5, #32
 80081c6:	d031      	beq.n	800822c <arm_cfft_f32+0xb0>
 80081c8:	d948      	bls.n	800825c <arm_cfft_f32+0xe0>
 80081ca:	2d40      	cmp	r5, #64	; 0x40
 80081cc:	d0ed      	beq.n	80081aa <arm_cfft_f32+0x2e>
 80081ce:	2d80      	cmp	r5, #128	; 0x80
 80081d0:	d1f1      	bne.n	80081b6 <arm_cfft_f32+0x3a>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4630      	mov	r0, r6
 80081d6:	f7ff fca9 	bl	8007b2c <arm_cfft_radix8by2_f32>
 80081da:	f1b8 0f00 	cmp.w	r8, #0
 80081de:	d0ed      	beq.n	80081bc <arm_cfft_f32+0x40>
 80081e0:	68b2      	ldr	r2, [r6, #8]
 80081e2:	4620      	mov	r0, r4
 80081e4:	89b1      	ldrh	r1, [r6, #12]
 80081e6:	f7f8 f87b 	bl	80002e0 <arm_bitreversal_32>
 80081ea:	2f01      	cmp	r7, #1
 80081ec:	d1e8      	bne.n	80081c0 <arm_cfft_f32+0x44>
 80081ee:	ee07 5a90 	vmov	s15, r5
 80081f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80081fe:	2d00      	cmp	r5, #0
 8008200:	d0de      	beq.n	80081c0 <arm_cfft_f32+0x44>
 8008202:	f104 0108 	add.w	r1, r4, #8
 8008206:	2300      	movs	r3, #0
 8008208:	ed11 7a02 	vldr	s14, [r1, #-8]
 800820c:	3301      	adds	r3, #1
 800820e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008212:	3108      	adds	r1, #8
 8008214:	429d      	cmp	r5, r3
 8008216:	ee27 7a26 	vmul.f32	s14, s14, s13
 800821a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800821e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008222:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008226:	d1ef      	bne.n	8008208 <arm_cfft_f32+0x8c>
 8008228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800822c:	4621      	mov	r1, r4
 800822e:	4630      	mov	r0, r6
 8008230:	f7ff fd4c 	bl	8007ccc <arm_cfft_radix8by4_f32>
 8008234:	e7bf      	b.n	80081b6 <arm_cfft_f32+0x3a>
 8008236:	b1a5      	cbz	r5, 8008262 <arm_cfft_f32+0xe6>
 8008238:	f101 030c 	add.w	r3, r1, #12
 800823c:	2200      	movs	r2, #0
 800823e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008242:	3201      	adds	r2, #1
 8008244:	3308      	adds	r3, #8
 8008246:	eef1 7a67 	vneg.f32	s15, s15
 800824a:	4295      	cmp	r5, r2
 800824c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008250:	d1f5      	bne.n	800823e <arm_cfft_f32+0xc2>
 8008252:	e79c      	b.n	800818e <arm_cfft_f32+0x12>
 8008254:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008258:	d0a7      	beq.n	80081aa <arm_cfft_f32+0x2e>
 800825a:	e7ac      	b.n	80081b6 <arm_cfft_f32+0x3a>
 800825c:	2d10      	cmp	r5, #16
 800825e:	d0b8      	beq.n	80081d2 <arm_cfft_f32+0x56>
 8008260:	e7a9      	b.n	80081b6 <arm_cfft_f32+0x3a>
 8008262:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008266:	d896      	bhi.n	8008196 <arm_cfft_f32+0x1a>
 8008268:	e7ac      	b.n	80081c4 <arm_cfft_f32+0x48>
 800826a:	bf00      	nop

0800826c <arm_cmplx_mag_f32>:
 800826c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008270:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008274:	b084      	sub	sp, #16
 8008276:	d07f      	beq.n	8008378 <arm_cmplx_mag_f32+0x10c>
 8008278:	f100 0420 	add.w	r4, r0, #32
 800827c:	f101 0510 	add.w	r5, r1, #16
 8008280:	4646      	mov	r6, r8
 8008282:	2700      	movs	r7, #0
 8008284:	e05a      	b.n	800833c <arm_cmplx_mag_f32+0xd0>
 8008286:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800828a:	eeb4 0a40 	vcmp.f32	s0, s0
 800828e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008292:	f040 80a4 	bne.w	80083de <arm_cmplx_mag_f32+0x172>
 8008296:	ed05 0a04 	vstr	s0, [r5, #-16]
 800829a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800829e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 80082a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80082a6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80082aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80082ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b6:	f2c0 808f 	blt.w	80083d8 <arm_cmplx_mag_f32+0x16c>
 80082ba:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80082be:	eeb4 0a40 	vcmp.f32	s0, s0
 80082c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c6:	f040 80af 	bne.w	8008428 <arm_cmplx_mag_f32+0x1bc>
 80082ca:	ed05 0a03 	vstr	s0, [r5, #-12]
 80082ce:	ed54 7a04 	vldr	s15, [r4, #-16]
 80082d2:	ed14 0a03 	vldr	s0, [r4, #-12]
 80082d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80082da:	ee20 0a00 	vmul.f32	s0, s0, s0
 80082de:	ee77 7a80 	vadd.f32	s15, s15, s0
 80082e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ea:	db72      	blt.n	80083d2 <arm_cmplx_mag_f32+0x166>
 80082ec:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80082f0:	eeb4 0a40 	vcmp.f32	s0, s0
 80082f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f8:	f040 808c 	bne.w	8008414 <arm_cmplx_mag_f32+0x1a8>
 80082fc:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008300:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008304:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008308:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800830c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008310:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831c:	db20      	blt.n	8008360 <arm_cmplx_mag_f32+0xf4>
 800831e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008322:	eeb4 0a40 	vcmp.f32	s0, s0
 8008326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832a:	d169      	bne.n	8008400 <arm_cmplx_mag_f32+0x194>
 800832c:	3e01      	subs	r6, #1
 800832e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008332:	f104 0420 	add.w	r4, r4, #32
 8008336:	f105 0510 	add.w	r5, r5, #16
 800833a:	d019      	beq.n	8008370 <arm_cmplx_mag_f32+0x104>
 800833c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008340:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008344:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008348:	ee20 0a00 	vmul.f32	s0, s0, s0
 800834c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008358:	da95      	bge.n	8008286 <arm_cmplx_mag_f32+0x1a>
 800835a:	f845 7c10 	str.w	r7, [r5, #-16]
 800835e:	e79c      	b.n	800829a <arm_cmplx_mag_f32+0x2e>
 8008360:	3e01      	subs	r6, #1
 8008362:	f845 7c04 	str.w	r7, [r5, #-4]
 8008366:	f104 0420 	add.w	r4, r4, #32
 800836a:	f105 0510 	add.w	r5, r5, #16
 800836e:	d1e5      	bne.n	800833c <arm_cmplx_mag_f32+0xd0>
 8008370:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008374:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008378:	f012 0503 	ands.w	r5, r2, #3
 800837c:	d026      	beq.n	80083cc <arm_cmplx_mag_f32+0x160>
 800837e:	f100 0408 	add.w	r4, r0, #8
 8008382:	2600      	movs	r6, #0
 8008384:	e00c      	b.n	80083a0 <arm_cmplx_mag_f32+0x134>
 8008386:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800838a:	eeb4 0a40 	vcmp.f32	s0, s0
 800838e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008392:	d12e      	bne.n	80083f2 <arm_cmplx_mag_f32+0x186>
 8008394:	3d01      	subs	r5, #1
 8008396:	ed01 0a01 	vstr	s0, [r1, #-4]
 800839a:	f104 0408 	add.w	r4, r4, #8
 800839e:	d015      	beq.n	80083cc <arm_cmplx_mag_f32+0x160>
 80083a0:	ed54 7a02 	vldr	s15, [r4, #-8]
 80083a4:	3104      	adds	r1, #4
 80083a6:	ed14 0a01 	vldr	s0, [r4, #-4]
 80083aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80083ae:	ee20 0a00 	vmul.f32	s0, s0, s0
 80083b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80083b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083be:	dae2      	bge.n	8008386 <arm_cmplx_mag_f32+0x11a>
 80083c0:	3d01      	subs	r5, #1
 80083c2:	f841 6c04 	str.w	r6, [r1, #-4]
 80083c6:	f104 0408 	add.w	r4, r4, #8
 80083ca:	d1e9      	bne.n	80083a0 <arm_cmplx_mag_f32+0x134>
 80083cc:	b004      	add	sp, #16
 80083ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d2:	f845 7c08 	str.w	r7, [r5, #-8]
 80083d6:	e793      	b.n	8008300 <arm_cmplx_mag_f32+0x94>
 80083d8:	f845 7c0c 	str.w	r7, [r5, #-12]
 80083dc:	e777      	b.n	80082ce <arm_cmplx_mag_f32+0x62>
 80083de:	eeb0 0a67 	vmov.f32	s0, s15
 80083e2:	9203      	str	r2, [sp, #12]
 80083e4:	9102      	str	r1, [sp, #8]
 80083e6:	9001      	str	r0, [sp, #4]
 80083e8:	f000 fbde 	bl	8008ba8 <sqrtf>
 80083ec:	a801      	add	r0, sp, #4
 80083ee:	c807      	ldmia	r0, {r0, r1, r2}
 80083f0:	e751      	b.n	8008296 <arm_cmplx_mag_f32+0x2a>
 80083f2:	eeb0 0a67 	vmov.f32	s0, s15
 80083f6:	9101      	str	r1, [sp, #4]
 80083f8:	f000 fbd6 	bl	8008ba8 <sqrtf>
 80083fc:	9901      	ldr	r1, [sp, #4]
 80083fe:	e7c9      	b.n	8008394 <arm_cmplx_mag_f32+0x128>
 8008400:	eeb0 0a67 	vmov.f32	s0, s15
 8008404:	9203      	str	r2, [sp, #12]
 8008406:	9102      	str	r1, [sp, #8]
 8008408:	9001      	str	r0, [sp, #4]
 800840a:	f000 fbcd 	bl	8008ba8 <sqrtf>
 800840e:	a801      	add	r0, sp, #4
 8008410:	c807      	ldmia	r0, {r0, r1, r2}
 8008412:	e78b      	b.n	800832c <arm_cmplx_mag_f32+0xc0>
 8008414:	eeb0 0a67 	vmov.f32	s0, s15
 8008418:	9203      	str	r2, [sp, #12]
 800841a:	9102      	str	r1, [sp, #8]
 800841c:	9001      	str	r0, [sp, #4]
 800841e:	f000 fbc3 	bl	8008ba8 <sqrtf>
 8008422:	a801      	add	r0, sp, #4
 8008424:	c807      	ldmia	r0, {r0, r1, r2}
 8008426:	e769      	b.n	80082fc <arm_cmplx_mag_f32+0x90>
 8008428:	eeb0 0a67 	vmov.f32	s0, s15
 800842c:	9203      	str	r2, [sp, #12]
 800842e:	9102      	str	r1, [sp, #8]
 8008430:	9001      	str	r0, [sp, #4]
 8008432:	f000 fbb9 	bl	8008ba8 <sqrtf>
 8008436:	a801      	add	r0, sp, #4
 8008438:	c807      	ldmia	r0, {r0, r1, r2}
 800843a:	e746      	b.n	80082ca <arm_cmplx_mag_f32+0x5e>

0800843c <arm_sub_f32>:
 800843c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8008442:	d033      	beq.n	80084ac <arm_sub_f32+0x70>
 8008444:	f100 0610 	add.w	r6, r0, #16
 8008448:	f101 0510 	add.w	r5, r1, #16
 800844c:	f102 0410 	add.w	r4, r2, #16
 8008450:	4677      	mov	r7, lr
 8008452:	ed16 7a03 	vldr	s14, [r6, #-12]
 8008456:	3f01      	subs	r7, #1
 8008458:	ed56 7a02 	vldr	s15, [r6, #-8]
 800845c:	f105 0510 	add.w	r5, r5, #16
 8008460:	ed15 6a07 	vldr	s12, [r5, #-28]	; 0xffffffe4
 8008464:	f106 0610 	add.w	r6, r6, #16
 8008468:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800846c:	f104 0410 	add.w	r4, r4, #16
 8008470:	ed15 5a05 	vldr	s10, [r5, #-20]	; 0xffffffec
 8008474:	ee37 6a46 	vsub.f32	s12, s14, s12
 8008478:	ed55 5a08 	vldr	s11, [r5, #-32]	; 0xffffffe0
 800847c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8008480:	ed16 7a05 	vldr	s14, [r6, #-20]	; 0xffffffec
 8008484:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 8008488:	ee37 7a45 	vsub.f32	s14, s14, s10
 800848c:	ed04 6a07 	vstr	s12, [r4, #-28]	; 0xffffffe4
 8008490:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008494:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8008498:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800849c:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 80084a0:	d1d7      	bne.n	8008452 <arm_sub_f32+0x16>
 80084a2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80084a6:	4420      	add	r0, r4
 80084a8:	4421      	add	r1, r4
 80084aa:	4422      	add	r2, r4
 80084ac:	f013 0303 	ands.w	r3, r3, #3
 80084b0:	d009      	beq.n	80084c6 <arm_sub_f32+0x8a>
 80084b2:	ecf0 7a01 	vldmia	r0!, {s15}
 80084b6:	3b01      	subs	r3, #1
 80084b8:	ecb1 7a01 	vldmia	r1!, {s14}
 80084bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084c0:	ece2 7a01 	vstmia	r2!, {s15}
 80084c4:	d1f5      	bne.n	80084b2 <arm_sub_f32+0x76>
 80084c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084c8 <arm_mult_f32>:
 80084c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ca:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80084ce:	d033      	beq.n	8008538 <arm_mult_f32+0x70>
 80084d0:	f100 0610 	add.w	r6, r0, #16
 80084d4:	f101 0510 	add.w	r5, r1, #16
 80084d8:	f102 0410 	add.w	r4, r2, #16
 80084dc:	4677      	mov	r7, lr
 80084de:	ed16 7a04 	vldr	s14, [r6, #-16]
 80084e2:	3f01      	subs	r7, #1
 80084e4:	ed15 6a04 	vldr	s12, [r5, #-16]
 80084e8:	f106 0610 	add.w	r6, r6, #16
 80084ec:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80084f0:	f105 0510 	add.w	r5, r5, #16
 80084f4:	ee27 6a06 	vmul.f32	s12, s14, s12
 80084f8:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 80084fc:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8008500:	f104 0410 	add.w	r4, r4, #16
 8008504:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8008508:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800850c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8008510:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8008514:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008518:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800851c:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8008520:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008524:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 8008528:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800852c:	d1d7      	bne.n	80084de <arm_mult_f32+0x16>
 800852e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008532:	4420      	add	r0, r4
 8008534:	4421      	add	r1, r4
 8008536:	4422      	add	r2, r4
 8008538:	f013 0303 	ands.w	r3, r3, #3
 800853c:	d009      	beq.n	8008552 <arm_mult_f32+0x8a>
 800853e:	ecf0 7a01 	vldmia	r0!, {s15}
 8008542:	3b01      	subs	r3, #1
 8008544:	ecb1 7a01 	vldmia	r1!, {s14}
 8008548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800854c:	ece2 7a01 	vstmia	r2!, {s15}
 8008550:	d1f5      	bne.n	800853e <arm_mult_f32+0x76>
 8008552:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008554 <arm_abs_f32>:
 8008554:	b470      	push	{r4, r5, r6}
 8008556:	0896      	lsrs	r6, r2, #2
 8008558:	d025      	beq.n	80085a6 <arm_abs_f32+0x52>
 800855a:	f100 0410 	add.w	r4, r0, #16
 800855e:	f101 0310 	add.w	r3, r1, #16
 8008562:	4635      	mov	r5, r6
 8008564:	ed14 6a04 	vldr	s12, [r4, #-16]
 8008568:	3d01      	subs	r5, #1
 800856a:	ed54 6a03 	vldr	s13, [r4, #-12]
 800856e:	f103 0310 	add.w	r3, r3, #16
 8008572:	ed14 7a02 	vldr	s14, [r4, #-8]
 8008576:	eeb0 6ac6 	vabs.f32	s12, s12
 800857a:	ed54 7a01 	vldr	s15, [r4, #-4]
 800857e:	eef0 6ae6 	vabs.f32	s13, s13
 8008582:	eeb0 7ac7 	vabs.f32	s14, s14
 8008586:	f104 0410 	add.w	r4, r4, #16
 800858a:	eef0 7ae7 	vabs.f32	s15, s15
 800858e:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
 8008592:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8008596:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 800859a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800859e:	d1e1      	bne.n	8008564 <arm_abs_f32+0x10>
 80085a0:	0136      	lsls	r6, r6, #4
 80085a2:	4430      	add	r0, r6
 80085a4:	4431      	add	r1, r6
 80085a6:	f012 0203 	ands.w	r2, r2, #3
 80085aa:	d007      	beq.n	80085bc <arm_abs_f32+0x68>
 80085ac:	ecf0 7a01 	vldmia	r0!, {s15}
 80085b0:	3a01      	subs	r2, #1
 80085b2:	eef0 7ae7 	vabs.f32	s15, s15
 80085b6:	ece1 7a01 	vstmia	r1!, {s15}
 80085ba:	d1f7      	bne.n	80085ac <arm_abs_f32+0x58>
 80085bc:	bc70      	pop	{r4, r5, r6}
 80085be:	4770      	bx	lr

080085c0 <arm_radix8_butterfly_f32>:
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	469e      	mov	lr, r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	468a      	mov	sl, r1
 80085ca:	468b      	mov	fp, r1
 80085cc:	3304      	adds	r3, #4
 80085ce:	ed2d 8b10 	vpush	{d8-d15}
 80085d2:	469c      	mov	ip, r3
 80085d4:	b09d      	sub	sp, #116	; 0x74
 80085d6:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 80088e4 <arm_radix8_butterfly_f32+0x324>
 80085da:	9019      	str	r0, [sp, #100]	; 0x64
 80085dc:	921a      	str	r2, [sp, #104]	; 0x68
 80085de:	931b      	str	r3, [sp, #108]	; 0x6c
 80085e0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80085e4:	f04f 0800 	mov.w	r8, #0
 80085e8:	461a      	mov	r2, r3
 80085ea:	9311      	str	r3, [sp, #68]	; 0x44
 80085ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085f0:	4611      	mov	r1, r2
 80085f2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	0053      	lsls	r3, r2, #1
 80085fa:	18d5      	adds	r5, r2, r3
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	0113      	lsls	r3, r2, #4
 8008600:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008602:	194c      	adds	r4, r1, r5
 8008604:	eb02 0609 	add.w	r6, r2, r9
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800860e:	4613      	mov	r3, r2
 8008610:	190a      	adds	r2, r1, r4
 8008612:	eb06 0709 	add.w	r7, r6, r9
 8008616:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800861a:	1888      	adds	r0, r1, r2
 800861c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008620:	4401      	add	r1, r0
 8008622:	3204      	adds	r2, #4
 8008624:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008628:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800862c:	9b00      	ldr	r3, [sp, #0]
 800862e:	3104      	adds	r1, #4
 8008630:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8008634:	44d8      	add	r8, fp
 8008636:	ed90 7a00 	vldr	s14, [r0]
 800863a:	ed94 5a00 	vldr	s10, [r4]
 800863e:	45c2      	cmp	sl, r8
 8008640:	edd7 3a00 	vldr	s7, [r7]
 8008644:	ed96 6a00 	vldr	s12, [r6]
 8008648:	ee37 1a85 	vadd.f32	s2, s15, s10
 800864c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8008650:	ee73 4a87 	vadd.f32	s9, s7, s14
 8008654:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8008658:	edd5 7a00 	vldr	s15, [r5]
 800865c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8008660:	ed11 7a01 	vldr	s14, [r1, #-4]
 8008664:	ee36 2a26 	vadd.f32	s4, s12, s13
 8008668:	ee37 4a87 	vadd.f32	s8, s15, s14
 800866c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008670:	ee71 5a24 	vadd.f32	s11, s2, s9
 8008674:	ee32 6a04 	vadd.f32	s12, s4, s8
 8008678:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800867c:	ee31 1a64 	vsub.f32	s2, s2, s9
 8008680:	ee75 4a86 	vadd.f32	s9, s11, s12
 8008684:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8008688:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800868c:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8008690:	ee32 2a44 	vsub.f32	s4, s4, s8
 8008694:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008698:	ed94 0a01 	vldr	s0, [r4, #4]
 800869c:	edc4 5a00 	vstr	s11, [r4]
 80086a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80086a4:	edd6 5a01 	vldr	s11, [r6, #4]
 80086a8:	edd5 2a01 	vldr	s5, [r5, #4]
 80086ac:	ee75 1a27 	vadd.f32	s3, s10, s15
 80086b0:	ed92 4a00 	vldr	s8, [r2]
 80086b4:	ee75 7a67 	vsub.f32	s15, s10, s15
 80086b8:	edd1 4a00 	vldr	s9, [r1]
 80086bc:	ee27 7a09 	vmul.f32	s14, s14, s18
 80086c0:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80086c4:	ed9c 6a00 	vldr	s12, [ip]
 80086c8:	ee72 6ae4 	vsub.f32	s13, s5, s9
 80086cc:	edd0 0a01 	vldr	s1, [r0, #4]
 80086d0:	ed97 5a01 	vldr	s10, [r7, #4]
 80086d4:	ee35 4a84 	vadd.f32	s8, s11, s8
 80086d8:	ee72 4aa4 	vadd.f32	s9, s5, s9
 80086dc:	ee73 5a26 	vadd.f32	s11, s6, s13
 80086e0:	ee76 2a00 	vadd.f32	s5, s12, s0
 80086e4:	ee73 6a66 	vsub.f32	s13, s6, s13
 80086e8:	ee36 6a40 	vsub.f32	s12, s12, s0
 80086ec:	ee35 0a20 	vadd.f32	s0, s10, s1
 80086f0:	ee65 5a89 	vmul.f32	s11, s11, s18
 80086f4:	ee35 5a60 	vsub.f32	s10, s10, s1
 80086f8:	ee32 3a80 	vadd.f32	s6, s5, s0
 80086fc:	ee74 0a24 	vadd.f32	s1, s8, s9
 8008700:	ee66 6a89 	vmul.f32	s13, s13, s18
 8008704:	ee74 4a64 	vsub.f32	s9, s8, s9
 8008708:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800870c:	ee75 2a25 	vadd.f32	s5, s10, s11
 8008710:	ee33 0a20 	vadd.f32	s0, s6, s1
 8008714:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008718:	ee33 3a60 	vsub.f32	s6, s6, s1
 800871c:	ee36 5a26 	vadd.f32	s10, s12, s13
 8008720:	ed8c 0a00 	vstr	s0, [ip]
 8008724:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008728:	449c      	add	ip, r3
 800872a:	ee33 6a87 	vadd.f32	s12, s7, s14
 800872e:	ed84 3a01 	vstr	s6, [r4, #4]
 8008732:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8008736:	441c      	add	r4, r3
 8008738:	ee71 3a24 	vadd.f32	s7, s2, s9
 800873c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008740:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8008744:	edc7 3a00 	vstr	s7, [r7]
 8008748:	ee34 1a42 	vsub.f32	s2, s8, s4
 800874c:	edc0 4a00 	vstr	s9, [r0]
 8008750:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8008754:	ee75 4a46 	vsub.f32	s9, s10, s12
 8008758:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800875c:	ed87 1a01 	vstr	s2, [r7, #4]
 8008760:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8008764:	441f      	add	r7, r3
 8008766:	ee32 4a04 	vadd.f32	s8, s4, s8
 800876a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800876e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8008772:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008776:	ed80 4a01 	vstr	s8, [r0, #4]
 800877a:	ed86 3a00 	vstr	s6, [r6]
 800877e:	4418      	add	r0, r3
 8008780:	ed41 1a01 	vstr	s3, [r1, #-4]
 8008784:	ed42 3a01 	vstr	s7, [r2, #-4]
 8008788:	edc5 7a00 	vstr	s15, [r5]
 800878c:	edc6 4a01 	vstr	s9, [r6, #4]
 8008790:	441e      	add	r6, r3
 8008792:	ed81 6a00 	vstr	s12, [r1]
 8008796:	4419      	add	r1, r3
 8008798:	edc2 5a00 	vstr	s11, [r2]
 800879c:	441a      	add	r2, r3
 800879e:	ed85 7a01 	vstr	s14, [r5, #4]
 80087a2:	441d      	add	r5, r3
 80087a4:	f63f af44 	bhi.w	8008630 <arm_radix8_butterfly_f32+0x70>
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ac:	2b07      	cmp	r3, #7
 80087ae:	f240 81f4 	bls.w	8008b9a <arm_radix8_butterfly_f32+0x5da>
 80087b2:	9901      	ldr	r1, [sp, #4]
 80087b4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80087b8:	9d02      	ldr	r5, [sp, #8]
 80087ba:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 80087be:	3101      	adds	r1, #1
 80087c0:	eb04 000e 	add.w	r0, r4, lr
 80087c4:	00e4      	lsls	r4, r4, #3
 80087c6:	3508      	adds	r5, #8
 80087c8:	4419      	add	r1, r3
 80087ca:	eb00 0c0e 	add.w	ip, r0, lr
 80087ce:	9413      	str	r4, [sp, #76]	; 0x4c
 80087d0:	00c0      	lsls	r0, r0, #3
 80087d2:	185e      	adds	r6, r3, r1
 80087d4:	4617      	mov	r7, r2
 80087d6:	9218      	str	r2, [sp, #96]	; 0x60
 80087d8:	f109 0908 	add.w	r9, r9, #8
 80087dc:	199c      	adds	r4, r3, r6
 80087de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80087e2:	9012      	str	r0, [sp, #72]	; 0x48
 80087e4:	195d      	adds	r5, r3, r5
 80087e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80087e8:	443a      	add	r2, r7
 80087ea:	950c      	str	r5, [sp, #48]	; 0x30
 80087ec:	4698      	mov	r8, r3
 80087ee:	4420      	add	r0, r4
 80087f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80087f2:	19d7      	adds	r7, r2, r7
 80087f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80087f8:	4405      	add	r5, r0
 80087fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80087fe:	9710      	str	r7, [sp, #64]	; 0x40
 8008800:	eb0c 070e 	add.w	r7, ip, lr
 8008804:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008808:	3404      	adds	r4, #4
 800880a:	3004      	adds	r0, #4
 800880c:	44c8      	add	r8, r9
 800880e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8008812:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008814:	940a      	str	r4, [sp, #40]	; 0x28
 8008816:	9009      	str	r0, [sp, #36]	; 0x24
 8008818:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800881c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800881e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008822:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008824:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8008828:	eb07 080e 	add.w	r8, r7, lr
 800882c:	eb04 0900 	add.w	r9, r4, r0
 8008830:	00f8      	lsls	r0, r7, #3
 8008832:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8008836:	3504      	adds	r5, #4
 8008838:	4607      	mov	r7, r0
 800883a:	9017      	str	r0, [sp, #92]	; 0x5c
 800883c:	910b      	str	r1, [sp, #44]	; 0x2c
 800883e:	4618      	mov	r0, r3
 8008840:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8008844:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008846:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800884a:	18e3      	adds	r3, r4, r3
 800884c:	9508      	str	r5, [sp, #32]
 800884e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008850:	910e      	str	r1, [sp, #56]	; 0x38
 8008852:	4621      	mov	r1, r4
 8008854:	eb04 0805 	add.w	r8, r4, r5
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	19e5      	adds	r5, r4, r7
 800885c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8008860:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008862:	9316      	str	r3, [sp, #88]	; 0x58
 8008864:	190b      	adds	r3, r1, r4
 8008866:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008868:	9505      	str	r5, [sp, #20]
 800886a:	9303      	str	r3, [sp, #12]
 800886c:	f100 0308 	add.w	r3, r0, #8
 8008870:	9707      	str	r7, [sp, #28]
 8008872:	4638      	mov	r0, r7
 8008874:	930f      	str	r3, [sp, #60]	; 0x3c
 8008876:	2301      	movs	r3, #1
 8008878:	9306      	str	r3, [sp, #24]
 800887a:	9b00      	ldr	r3, [sp, #0]
 800887c:	ed90 fa00 	vldr	s30, [r0]
 8008880:	edd0 ba01 	vldr	s23, [r0, #4]
 8008884:	9803      	ldr	r0, [sp, #12]
 8008886:	9903      	ldr	r1, [sp, #12]
 8008888:	ed90 ba01 	vldr	s22, [r0, #4]
 800888c:	9804      	ldr	r0, [sp, #16]
 800888e:	edd1 ea00 	vldr	s29, [r1]
 8008892:	edd0 aa01 	vldr	s21, [r0, #4]
 8008896:	9805      	ldr	r0, [sp, #20]
 8008898:	9905      	ldr	r1, [sp, #20]
 800889a:	edd0 7a01 	vldr	s15, [r0, #4]
 800889e:	ed91 da00 	vldr	s26, [r1]
 80088a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088a4:	9c04      	ldr	r4, [sp, #16]
 80088a6:	edcd 7a01 	vstr	s15, [sp, #4]
 80088aa:	edd8 7a01 	vldr	s15, [r8, #4]
 80088ae:	9100      	str	r1, [sp, #0]
 80088b0:	edd2 fa00 	vldr	s31, [r2]
 80088b4:	ed94 ea00 	vldr	s28, [r4]
 80088b8:	ed92 ca01 	vldr	s24, [r2, #4]
 80088bc:	f8dd e020 	ldr.w	lr, [sp, #32]
 80088c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80088c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80088c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80088c6:	edd9 da00 	vldr	s27, [r9]
 80088ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80088cc:	edd8 ca00 	vldr	s25, [r8]
 80088d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80088d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088d4:	f8dd c018 	ldr.w	ip, [sp, #24]
 80088d8:	ed99 aa01 	vldr	s20, [r9, #4]
 80088dc:	edcd 7a02 	vstr	s15, [sp, #8]
 80088e0:	9800      	ldr	r0, [sp, #0]
 80088e2:	e001      	b.n	80088e8 <arm_radix8_butterfly_f32+0x328>
 80088e4:	3f3504f3 	.word	0x3f3504f3
 80088e8:	edd5 3a00 	vldr	s7, [r5]
 80088ec:	44dc      	add	ip, fp
 80088ee:	ed91 7a00 	vldr	s14, [r1]
 80088f2:	edd4 8a00 	vldr	s17, [r4]
 80088f6:	45e2      	cmp	sl, ip
 80088f8:	ed57 7a01 	vldr	s15, [r7, #-4]
 80088fc:	ed90 5a00 	vldr	s10, [r0]
 8008900:	ed56 5a01 	vldr	s11, [r6, #-4]
 8008904:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8008908:	ed92 1a00 	vldr	s2, [r2]
 800890c:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8008910:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8008914:	ee75 9a25 	vadd.f32	s19, s10, s11
 8008918:	ee31 3a07 	vadd.f32	s6, s2, s14
 800891c:	ed92 8a01 	vldr	s16, [r2, #4]
 8008920:	ee73 6a84 	vadd.f32	s13, s7, s8
 8008924:	ee75 5a65 	vsub.f32	s11, s10, s11
 8008928:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800892c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8008930:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8008934:	ee75 7a84 	vadd.f32	s15, s11, s8
 8008938:	ee31 1a47 	vsub.f32	s2, s2, s14
 800893c:	ee31 7a85 	vadd.f32	s14, s3, s10
 8008940:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008944:	ee33 3a46 	vsub.f32	s6, s6, s12
 8008948:	ed82 7a00 	vstr	s14, [r2]
 800894c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8008950:	ed96 6a00 	vldr	s12, [r6]
 8008954:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8008958:	edd5 3a01 	vldr	s7, [r5, #4]
 800895c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8008960:	ed90 7a01 	vldr	s14, [r0, #4]
 8008964:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8008968:	edde 4a00 	vldr	s9, [lr]
 800896c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8008970:	ee77 2a46 	vsub.f32	s5, s14, s12
 8008974:	edd1 6a01 	vldr	s13, [r1, #4]
 8008978:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800897c:	edd7 0a00 	vldr	s1, [r7]
 8008980:	ee77 5a06 	vadd.f32	s11, s14, s12
 8008984:	ed94 7a01 	vldr	s14, [r4, #4]
 8008988:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800898c:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8008990:	ee78 4a66 	vsub.f32	s9, s16, s13
 8008994:	ee78 3a26 	vadd.f32	s7, s16, s13
 8008998:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800899c:	ee77 6a20 	vadd.f32	s13, s14, s1
 80089a0:	ee24 4a09 	vmul.f32	s8, s8, s18
 80089a4:	ee37 7a60 	vsub.f32	s14, s14, s1
 80089a8:	ee20 8a09 	vmul.f32	s16, s0, s18
 80089ac:	ee75 0a86 	vadd.f32	s1, s11, s12
 80089b0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80089b4:	ee62 2a89 	vmul.f32	s5, s5, s18
 80089b8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80089bc:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80089c0:	ee77 7a62 	vsub.f32	s15, s14, s5
 80089c4:	ee74 5a88 	vadd.f32	s11, s9, s16
 80089c8:	ee34 8ac8 	vsub.f32	s16, s9, s16
 80089cc:	ee77 4a22 	vadd.f32	s9, s14, s5
 80089d0:	ee71 2a04 	vadd.f32	s5, s2, s8
 80089d4:	ee31 7a44 	vsub.f32	s14, s2, s8
 80089d8:	ee30 1a60 	vsub.f32	s2, s0, s1
 80089dc:	ee73 1a06 	vadd.f32	s3, s6, s12
 80089e0:	ee33 6a46 	vsub.f32	s12, s6, s12
 80089e4:	ee33 3ae9 	vsub.f32	s6, s7, s19
 80089e8:	ee79 6aa3 	vadd.f32	s13, s19, s7
 80089ec:	ee38 4a68 	vsub.f32	s8, s16, s17
 80089f0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80089f4:	ee72 5a25 	vadd.f32	s11, s4, s11
 80089f8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80089fc:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8008a00:	ee77 2a27 	vadd.f32	s5, s14, s15
 8008a04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a08:	ee78 7a88 	vadd.f32	s15, s17, s16
 8008a0c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8008a10:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8008a14:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8008a18:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8008a1c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8008a20:	ee70 0a20 	vadd.f32	s1, s0, s1
 8008a24:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8008a28:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8008a2c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8008a30:	edc2 0a01 	vstr	s1, [r2, #4]
 8008a34:	ee38 8a88 	vadd.f32	s16, s17, s16
 8008a38:	441a      	add	r2, r3
 8008a3a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8008a3e:	ee31 5a45 	vsub.f32	s10, s2, s10
 8008a42:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8008a46:	ed81 8a00 	vstr	s16, [r1]
 8008a4a:	ee39 0a80 	vadd.f32	s0, s19, s0
 8008a4e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008a52:	ed81 5a01 	vstr	s10, [r1, #4]
 8008a56:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8008a5a:	edcd 3a00 	vstr	s7, [sp]
 8008a5e:	ed9d 5a02 	vldr	s10, [sp, #8]
 8008a62:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8008a66:	eddd 3a01 	vldr	s7, [sp, #4]
 8008a6a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8008a6e:	ed84 0a00 	vstr	s0, [r4]
 8008a72:	ee65 4a24 	vmul.f32	s9, s10, s9
 8008a76:	ed84 3a01 	vstr	s6, [r4, #4]
 8008a7a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8008a7e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008a82:	eddd 3a00 	vldr	s7, [sp]
 8008a86:	ee25 5a25 	vmul.f32	s10, s10, s11
 8008a8a:	4419      	add	r1, r3
 8008a8c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8008a90:	441c      	add	r4, r3
 8008a92:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8008a96:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8008a9a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8008a9e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8008aa2:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8008aa6:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8008aaa:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8008aae:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8008ab2:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8008ab6:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8008aba:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8008abe:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8008ac2:	ee38 8a01 	vadd.f32	s16, s16, s2
 8008ac6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8008aca:	ee39 5a85 	vadd.f32	s10, s19, s10
 8008ace:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8008ad2:	ed07 8a01 	vstr	s16, [r7, #-4]
 8008ad6:	ee30 0a21 	vadd.f32	s0, s0, s3
 8008ada:	ed87 6a00 	vstr	s12, [r7]
 8008ade:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008ae2:	edc0 0a00 	vstr	s1, [r0]
 8008ae6:	ee33 3a28 	vadd.f32	s6, s6, s17
 8008aea:	edc0 3a01 	vstr	s7, [r0, #4]
 8008aee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008af2:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8008af6:	edce 4a00 	vstr	s9, [lr]
 8008afa:	4418      	add	r0, r3
 8008afc:	ed06 0a01 	vstr	s0, [r6, #-4]
 8008b00:	441f      	add	r7, r3
 8008b02:	edc6 2a00 	vstr	s5, [r6]
 8008b06:	449e      	add	lr, r3
 8008b08:	ed85 3a00 	vstr	s6, [r5]
 8008b0c:	441e      	add	r6, r3
 8008b0e:	ed85 7a01 	vstr	s14, [r5, #4]
 8008b12:	441d      	add	r5, r3
 8008b14:	f63f aee8 	bhi.w	80088e8 <arm_radix8_butterfly_f32+0x328>
 8008b18:	9a06      	ldr	r2, [sp, #24]
 8008b1a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008b1c:	3201      	adds	r2, #1
 8008b1e:	4611      	mov	r1, r2
 8008b20:	9206      	str	r2, [sp, #24]
 8008b22:	9a07      	ldr	r2, [sp, #28]
 8008b24:	4402      	add	r2, r0
 8008b26:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008b28:	9207      	str	r2, [sp, #28]
 8008b2a:	9a03      	ldr	r2, [sp, #12]
 8008b2c:	4402      	add	r2, r0
 8008b2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b30:	9203      	str	r2, [sp, #12]
 8008b32:	9a04      	ldr	r2, [sp, #16]
 8008b34:	4402      	add	r2, r0
 8008b36:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b38:	9204      	str	r2, [sp, #16]
 8008b3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b3c:	4491      	add	r9, r2
 8008b3e:	9a05      	ldr	r2, [sp, #20]
 8008b40:	4402      	add	r2, r0
 8008b42:	9205      	str	r2, [sp, #20]
 8008b44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b46:	4490      	add	r8, r2
 8008b48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b4a:	3208      	adds	r2, #8
 8008b4c:	920f      	str	r2, [sp, #60]	; 0x3c
 8008b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b50:	3208      	adds	r2, #8
 8008b52:	920e      	str	r2, [sp, #56]	; 0x38
 8008b54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b56:	3208      	adds	r2, #8
 8008b58:	920d      	str	r2, [sp, #52]	; 0x34
 8008b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b5c:	3208      	adds	r2, #8
 8008b5e:	920c      	str	r2, [sp, #48]	; 0x30
 8008b60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b62:	3208      	adds	r2, #8
 8008b64:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b68:	3208      	adds	r2, #8
 8008b6a:	920a      	str	r2, [sp, #40]	; 0x28
 8008b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6e:	3208      	adds	r2, #8
 8008b70:	9209      	str	r2, [sp, #36]	; 0x24
 8008b72:	9a08      	ldr	r2, [sp, #32]
 8008b74:	3208      	adds	r2, #8
 8008b76:	9208      	str	r2, [sp, #32]
 8008b78:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008b7a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008b7c:	4622      	mov	r2, r4
 8008b7e:	4288      	cmp	r0, r1
 8008b80:	d005      	beq.n	8008b8e <arm_radix8_butterfly_f32+0x5ce>
 8008b82:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008b84:	4621      	mov	r1, r4
 8008b86:	4401      	add	r1, r0
 8008b88:	9807      	ldr	r0, [sp, #28]
 8008b8a:	9110      	str	r1, [sp, #64]	; 0x40
 8008b8c:	e676      	b.n	800887c <arm_radix8_butterfly_f32+0x2bc>
 8008b8e:	4683      	mov	fp, r0
 8008b90:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8008b94:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8008b98:	e522      	b.n	80085e0 <arm_radix8_butterfly_f32+0x20>
 8008b9a:	b01d      	add	sp, #116	; 0x74
 8008b9c:	ecbd 8b10 	vpop	{d8-d15}
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ba4 <atan2f>:
 8008ba4:	f000 b850 	b.w	8008c48 <__ieee754_atan2f>

08008ba8 <sqrtf>:
 8008ba8:	b500      	push	{lr}
 8008baa:	ed2d 8b02 	vpush	{d8}
 8008bae:	b08b      	sub	sp, #44	; 0x2c
 8008bb0:	eeb0 8a40 	vmov.f32	s16, s0
 8008bb4:	f000 f8f2 	bl	8008d9c <__ieee754_sqrtf>
 8008bb8:	4b21      	ldr	r3, [pc, #132]	; (8008c40 <sqrtf+0x98>)
 8008bba:	f993 3000 	ldrsb.w	r3, [r3]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	d028      	beq.n	8008c14 <sqrtf+0x6c>
 8008bc2:	eeb4 8a48 	vcmp.f32	s16, s16
 8008bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bca:	d623      	bvs.n	8008c14 <sqrtf+0x6c>
 8008bcc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd4:	d51e      	bpl.n	8008c14 <sqrtf+0x6c>
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8008bdc:	9200      	str	r2, [sp, #0]
 8008bde:	4a19      	ldr	r2, [pc, #100]	; (8008c44 <sqrtf+0x9c>)
 8008be0:	9201      	str	r2, [sp, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	9208      	str	r2, [sp, #32]
 8008be6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008bea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008bee:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8008c38 <sqrtf+0x90>
 8008bf2:	b9a3      	cbnz	r3, 8008c1e <sqrtf+0x76>
 8008bf4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bf8:	4668      	mov	r0, sp
 8008bfa:	f000 f8d2 	bl	8008da2 <matherr>
 8008bfe:	b1a0      	cbz	r0, 8008c2a <sqrtf+0x82>
 8008c00:	9b08      	ldr	r3, [sp, #32]
 8008c02:	b11b      	cbz	r3, 8008c0c <sqrtf+0x64>
 8008c04:	f000 f9aa 	bl	8008f5c <__errno>
 8008c08:	9b08      	ldr	r3, [sp, #32]
 8008c0a:	6003      	str	r3, [r0, #0]
 8008c0c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8008c10:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008c14:	b00b      	add	sp, #44	; 0x2c
 8008c16:	ecbd 8b02 	vpop	{d8}
 8008c1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8008c24:	ed8d 6b06 	vstr	d6, [sp, #24]
 8008c28:	d1e6      	bne.n	8008bf8 <sqrtf+0x50>
 8008c2a:	f000 f997 	bl	8008f5c <__errno>
 8008c2e:	2321      	movs	r3, #33	; 0x21
 8008c30:	6003      	str	r3, [r0, #0]
 8008c32:	e7e5      	b.n	8008c00 <sqrtf+0x58>
 8008c34:	f3af 8000 	nop.w
	...
 8008c40:	2400000d 	.word	0x2400000d
 8008c44:	080126e4 	.word	0x080126e4

08008c48 <__ieee754_atan2f>:
 8008c48:	ee10 2a90 	vmov	r2, s1
 8008c4c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008c50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008c54:	b510      	push	{r4, lr}
 8008c56:	eef0 7a40 	vmov.f32	s15, s0
 8008c5a:	dc06      	bgt.n	8008c6a <__ieee754_atan2f+0x22>
 8008c5c:	ee10 0a10 	vmov	r0, s0
 8008c60:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008c64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008c68:	dd04      	ble.n	8008c74 <__ieee754_atan2f+0x2c>
 8008c6a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c72:	bd10      	pop	{r4, pc}
 8008c74:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008c78:	d103      	bne.n	8008c82 <__ieee754_atan2f+0x3a>
 8008c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c7e:	f000 b893 	b.w	8008da8 <atanf>
 8008c82:	1794      	asrs	r4, r2, #30
 8008c84:	f004 0402 	and.w	r4, r4, #2
 8008c88:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008c8c:	b93b      	cbnz	r3, 8008c9e <__ieee754_atan2f+0x56>
 8008c8e:	2c02      	cmp	r4, #2
 8008c90:	d06b      	beq.n	8008d6a <__ieee754_atan2f+0x122>
 8008c92:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8008d70 <__ieee754_atan2f+0x128>
 8008c96:	2c03      	cmp	r4, #3
 8008c98:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8008c9c:	e7e7      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008c9e:	b939      	cbnz	r1, 8008cb0 <__ieee754_atan2f+0x68>
 8008ca0:	eddf 7a34 	vldr	s15, [pc, #208]	; 8008d74 <__ieee754_atan2f+0x12c>
 8008ca4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008d78 <__ieee754_atan2f+0x130>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	fe67 7a87 	vselge.f32	s15, s15, s14
 8008cae:	e7de      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008cb0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008cb4:	d121      	bne.n	8008cfa <__ieee754_atan2f+0xb2>
 8008cb6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008cba:	d111      	bne.n	8008ce0 <__ieee754_atan2f+0x98>
 8008cbc:	2c02      	cmp	r4, #2
 8008cbe:	d009      	beq.n	8008cd4 <__ieee754_atan2f+0x8c>
 8008cc0:	2c03      	cmp	r4, #3
 8008cc2:	d00a      	beq.n	8008cda <__ieee754_atan2f+0x92>
 8008cc4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8008d7c <__ieee754_atan2f+0x134>
 8008cc8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8008d80 <__ieee754_atan2f+0x138>
 8008ccc:	2c01      	cmp	r4, #1
 8008cce:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8008cd2:	e7cc      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008cd4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008d84 <__ieee754_atan2f+0x13c>
 8008cd8:	e7c9      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008cda:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008d88 <__ieee754_atan2f+0x140>
 8008cde:	e7c6      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008ce0:	2c02      	cmp	r4, #2
 8008ce2:	d042      	beq.n	8008d6a <__ieee754_atan2f+0x122>
 8008ce4:	2c03      	cmp	r4, #3
 8008ce6:	d005      	beq.n	8008cf4 <__ieee754_atan2f+0xac>
 8008ce8:	2c01      	cmp	r4, #1
 8008cea:	eddf 7a28 	vldr	s15, [pc, #160]	; 8008d8c <__ieee754_atan2f+0x144>
 8008cee:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008d90 <__ieee754_atan2f+0x148>
 8008cf2:	e7ec      	b.n	8008cce <__ieee754_atan2f+0x86>
 8008cf4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008d70 <__ieee754_atan2f+0x128>
 8008cf8:	e7b9      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008cfa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008cfe:	d0cf      	beq.n	8008ca0 <__ieee754_atan2f+0x58>
 8008d00:	1a5b      	subs	r3, r3, r1
 8008d02:	15db      	asrs	r3, r3, #23
 8008d04:	2b3c      	cmp	r3, #60	; 0x3c
 8008d06:	dc1a      	bgt.n	8008d3e <__ieee754_atan2f+0xf6>
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	da01      	bge.n	8008d10 <__ieee754_atan2f+0xc8>
 8008d0c:	333c      	adds	r3, #60	; 0x3c
 8008d0e:	db19      	blt.n	8008d44 <__ieee754_atan2f+0xfc>
 8008d10:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008d14:	f000 f91a 	bl	8008f4c <fabsf>
 8008d18:	f000 f846 	bl	8008da8 <atanf>
 8008d1c:	eef0 7a40 	vmov.f32	s15, s0
 8008d20:	2c01      	cmp	r4, #1
 8008d22:	d012      	beq.n	8008d4a <__ieee754_atan2f+0x102>
 8008d24:	2c02      	cmp	r4, #2
 8008d26:	d017      	beq.n	8008d58 <__ieee754_atan2f+0x110>
 8008d28:	2c00      	cmp	r4, #0
 8008d2a:	d0a0      	beq.n	8008c6e <__ieee754_atan2f+0x26>
 8008d2c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008d94 <__ieee754_atan2f+0x14c>
 8008d30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d34:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008d98 <__ieee754_atan2f+0x150>
 8008d38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d3c:	e797      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008d3e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008d74 <__ieee754_atan2f+0x12c>
 8008d42:	e7ed      	b.n	8008d20 <__ieee754_atan2f+0xd8>
 8008d44:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008d90 <__ieee754_atan2f+0x148>
 8008d48:	e7ea      	b.n	8008d20 <__ieee754_atan2f+0xd8>
 8008d4a:	ee17 3a90 	vmov	r3, s15
 8008d4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	e78a      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008d58:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8008d94 <__ieee754_atan2f+0x14c>
 8008d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d60:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008d98 <__ieee754_atan2f+0x150>
 8008d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d68:	e781      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008d6a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008d98 <__ieee754_atan2f+0x150>
 8008d6e:	e77e      	b.n	8008c6e <__ieee754_atan2f+0x26>
 8008d70:	c0490fdb 	.word	0xc0490fdb
 8008d74:	3fc90fdb 	.word	0x3fc90fdb
 8008d78:	bfc90fdb 	.word	0xbfc90fdb
 8008d7c:	bf490fdb 	.word	0xbf490fdb
 8008d80:	3f490fdb 	.word	0x3f490fdb
 8008d84:	4016cbe4 	.word	0x4016cbe4
 8008d88:	c016cbe4 	.word	0xc016cbe4
 8008d8c:	80000000 	.word	0x80000000
 8008d90:	00000000 	.word	0x00000000
 8008d94:	33bbbd2e 	.word	0x33bbbd2e
 8008d98:	40490fdb 	.word	0x40490fdb

08008d9c <__ieee754_sqrtf>:
 8008d9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008da0:	4770      	bx	lr

08008da2 <matherr>:
 8008da2:	2000      	movs	r0, #0
 8008da4:	4770      	bx	lr
	...

08008da8 <atanf>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	ee10 5a10 	vmov	r5, s0
 8008dae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008db2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008db6:	eef0 7a40 	vmov.f32	s15, s0
 8008dba:	db0f      	blt.n	8008ddc <atanf+0x34>
 8008dbc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008dc0:	dd04      	ble.n	8008dcc <atanf+0x24>
 8008dc2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008f00 <atanf+0x158>
 8008dd0:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8008f04 <atanf+0x15c>
 8008dd4:	2d00      	cmp	r5, #0
 8008dd6:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8008dda:	e7f4      	b.n	8008dc6 <atanf+0x1e>
 8008ddc:	4b4a      	ldr	r3, [pc, #296]	; (8008f08 <atanf+0x160>)
 8008dde:	429c      	cmp	r4, r3
 8008de0:	dc10      	bgt.n	8008e04 <atanf+0x5c>
 8008de2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008de6:	da0a      	bge.n	8008dfe <atanf+0x56>
 8008de8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008f0c <atanf+0x164>
 8008dec:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008df4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfc:	dce3      	bgt.n	8008dc6 <atanf+0x1e>
 8008dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008e02:	e013      	b.n	8008e2c <atanf+0x84>
 8008e04:	f000 f8a2 	bl	8008f4c <fabsf>
 8008e08:	4b41      	ldr	r3, [pc, #260]	; (8008f10 <atanf+0x168>)
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	dc4f      	bgt.n	8008eae <atanf+0x106>
 8008e0e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008e12:	429c      	cmp	r4, r3
 8008e14:	dc41      	bgt.n	8008e9a <atanf+0xf2>
 8008e16:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008e1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008e1e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008e22:	2300      	movs	r3, #0
 8008e24:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008e28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008e32:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008f14 <atanf+0x16c>
 8008e36:	eddf 5a38 	vldr	s11, [pc, #224]	; 8008f18 <atanf+0x170>
 8008e3a:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008f1c <atanf+0x174>
 8008e3e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008e42:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008e46:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008f20 <atanf+0x178>
 8008e4a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008e4e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008f24 <atanf+0x17c>
 8008e52:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008e56:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008f28 <atanf+0x180>
 8008e5a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008e5e:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008f2c <atanf+0x184>
 8008e62:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008e66:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008f30 <atanf+0x188>
 8008e6a:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008e6e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008f34 <atanf+0x18c>
 8008e72:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008e76:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008f38 <atanf+0x190>
 8008e7a:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008e7e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008f3c <atanf+0x194>
 8008e82:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008e86:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008e8a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008e8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e92:	d121      	bne.n	8008ed8 <atanf+0x130>
 8008e94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e98:	e795      	b.n	8008dc6 <atanf+0x1e>
 8008e9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008e9e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008ea2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008eac:	e7be      	b.n	8008e2c <atanf+0x84>
 8008eae:	4b24      	ldr	r3, [pc, #144]	; (8008f40 <atanf+0x198>)
 8008eb0:	429c      	cmp	r4, r3
 8008eb2:	dc0b      	bgt.n	8008ecc <atanf+0x124>
 8008eb4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ebc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eca:	e7af      	b.n	8008e2c <atanf+0x84>
 8008ecc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008ed0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e7a9      	b.n	8008e2c <atanf+0x84>
 8008ed8:	4a1a      	ldr	r2, [pc, #104]	; (8008f44 <atanf+0x19c>)
 8008eda:	491b      	ldr	r1, [pc, #108]	; (8008f48 <atanf+0x1a0>)
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	441a      	add	r2, r3
 8008ee0:	440b      	add	r3, r1
 8008ee2:	edd3 6a00 	vldr	s13, [r3]
 8008ee6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008eea:	2d00      	cmp	r5, #0
 8008eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ef0:	ed92 7a00 	vldr	s14, [r2]
 8008ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ef8:	bfb8      	it	lt
 8008efa:	eef1 7a67 	vneglt.f32	s15, s15
 8008efe:	e762      	b.n	8008dc6 <atanf+0x1e>
 8008f00:	bfc90fdb 	.word	0xbfc90fdb
 8008f04:	3fc90fdb 	.word	0x3fc90fdb
 8008f08:	3edfffff 	.word	0x3edfffff
 8008f0c:	7149f2ca 	.word	0x7149f2ca
 8008f10:	3f97ffff 	.word	0x3f97ffff
 8008f14:	3c8569d7 	.word	0x3c8569d7
 8008f18:	3d4bda59 	.word	0x3d4bda59
 8008f1c:	bd6ef16b 	.word	0xbd6ef16b
 8008f20:	3d886b35 	.word	0x3d886b35
 8008f24:	3dba2e6e 	.word	0x3dba2e6e
 8008f28:	3e124925 	.word	0x3e124925
 8008f2c:	3eaaaaab 	.word	0x3eaaaaab
 8008f30:	bd15a221 	.word	0xbd15a221
 8008f34:	bd9d8795 	.word	0xbd9d8795
 8008f38:	bde38e38 	.word	0xbde38e38
 8008f3c:	be4ccccd 	.word	0xbe4ccccd
 8008f40:	401bffff 	.word	0x401bffff
 8008f44:	080126ec 	.word	0x080126ec
 8008f48:	080126fc 	.word	0x080126fc

08008f4c <fabsf>:
 8008f4c:	ee10 3a10 	vmov	r3, s0
 8008f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f54:	ee00 3a10 	vmov	s0, r3
 8008f58:	4770      	bx	lr
	...

08008f5c <__errno>:
 8008f5c:	4b01      	ldr	r3, [pc, #4]	; (8008f64 <__errno+0x8>)
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	24000010 	.word	0x24000010

08008f68 <__libc_init_array>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4e0d      	ldr	r6, [pc, #52]	; (8008fa0 <__libc_init_array+0x38>)
 8008f6c:	4c0d      	ldr	r4, [pc, #52]	; (8008fa4 <__libc_init_array+0x3c>)
 8008f6e:	1ba4      	subs	r4, r4, r6
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	2500      	movs	r5, #0
 8008f74:	42a5      	cmp	r5, r4
 8008f76:	d109      	bne.n	8008f8c <__libc_init_array+0x24>
 8008f78:	4e0b      	ldr	r6, [pc, #44]	; (8008fa8 <__libc_init_array+0x40>)
 8008f7a:	4c0c      	ldr	r4, [pc, #48]	; (8008fac <__libc_init_array+0x44>)
 8008f7c:	f003 fc9c 	bl	800c8b8 <_init>
 8008f80:	1ba4      	subs	r4, r4, r6
 8008f82:	10a4      	asrs	r4, r4, #2
 8008f84:	2500      	movs	r5, #0
 8008f86:	42a5      	cmp	r5, r4
 8008f88:	d105      	bne.n	8008f96 <__libc_init_array+0x2e>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f90:	4798      	blx	r3
 8008f92:	3501      	adds	r5, #1
 8008f94:	e7ee      	b.n	8008f74 <__libc_init_array+0xc>
 8008f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f9a:	4798      	blx	r3
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	e7f2      	b.n	8008f86 <__libc_init_array+0x1e>
 8008fa0:	080129c8 	.word	0x080129c8
 8008fa4:	080129c8 	.word	0x080129c8
 8008fa8:	080129c8 	.word	0x080129c8
 8008fac:	080129cc 	.word	0x080129cc

08008fb0 <malloc>:
 8008fb0:	4b02      	ldr	r3, [pc, #8]	; (8008fbc <malloc+0xc>)
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	6818      	ldr	r0, [r3, #0]
 8008fb6:	f000 b86d 	b.w	8009094 <_malloc_r>
 8008fba:	bf00      	nop
 8008fbc:	24000010 	.word	0x24000010

08008fc0 <free>:
 8008fc0:	4b02      	ldr	r3, [pc, #8]	; (8008fcc <free+0xc>)
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	f000 b817 	b.w	8008ff8 <_free_r>
 8008fca:	bf00      	nop
 8008fcc:	24000010 	.word	0x24000010

08008fd0 <memcpy>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	1e43      	subs	r3, r0, #1
 8008fd4:	440a      	add	r2, r1
 8008fd6:	4291      	cmp	r1, r2
 8008fd8:	d100      	bne.n	8008fdc <memcpy+0xc>
 8008fda:	bd10      	pop	{r4, pc}
 8008fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fe4:	e7f7      	b.n	8008fd6 <memcpy+0x6>

08008fe6 <memset>:
 8008fe6:	4402      	add	r2, r0
 8008fe8:	4603      	mov	r3, r0
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d100      	bne.n	8008ff0 <memset+0xa>
 8008fee:	4770      	bx	lr
 8008ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff4:	e7f9      	b.n	8008fea <memset+0x4>
	...

08008ff8 <_free_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d045      	beq.n	800908c <_free_r+0x94>
 8009000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009004:	1f0c      	subs	r4, r1, #4
 8009006:	2b00      	cmp	r3, #0
 8009008:	bfb8      	it	lt
 800900a:	18e4      	addlt	r4, r4, r3
 800900c:	f002 fe8c 	bl	800bd28 <__malloc_lock>
 8009010:	4a1f      	ldr	r2, [pc, #124]	; (8009090 <_free_r+0x98>)
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	4610      	mov	r0, r2
 8009016:	b933      	cbnz	r3, 8009026 <_free_r+0x2e>
 8009018:	6063      	str	r3, [r4, #4]
 800901a:	6014      	str	r4, [r2, #0]
 800901c:	4628      	mov	r0, r5
 800901e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009022:	f002 be82 	b.w	800bd2a <__malloc_unlock>
 8009026:	42a3      	cmp	r3, r4
 8009028:	d90c      	bls.n	8009044 <_free_r+0x4c>
 800902a:	6821      	ldr	r1, [r4, #0]
 800902c:	1862      	adds	r2, r4, r1
 800902e:	4293      	cmp	r3, r2
 8009030:	bf04      	itt	eq
 8009032:	681a      	ldreq	r2, [r3, #0]
 8009034:	685b      	ldreq	r3, [r3, #4]
 8009036:	6063      	str	r3, [r4, #4]
 8009038:	bf04      	itt	eq
 800903a:	1852      	addeq	r2, r2, r1
 800903c:	6022      	streq	r2, [r4, #0]
 800903e:	6004      	str	r4, [r0, #0]
 8009040:	e7ec      	b.n	800901c <_free_r+0x24>
 8009042:	4613      	mov	r3, r2
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	b10a      	cbz	r2, 800904c <_free_r+0x54>
 8009048:	42a2      	cmp	r2, r4
 800904a:	d9fa      	bls.n	8009042 <_free_r+0x4a>
 800904c:	6819      	ldr	r1, [r3, #0]
 800904e:	1858      	adds	r0, r3, r1
 8009050:	42a0      	cmp	r0, r4
 8009052:	d10b      	bne.n	800906c <_free_r+0x74>
 8009054:	6820      	ldr	r0, [r4, #0]
 8009056:	4401      	add	r1, r0
 8009058:	1858      	adds	r0, r3, r1
 800905a:	4282      	cmp	r2, r0
 800905c:	6019      	str	r1, [r3, #0]
 800905e:	d1dd      	bne.n	800901c <_free_r+0x24>
 8009060:	6810      	ldr	r0, [r2, #0]
 8009062:	6852      	ldr	r2, [r2, #4]
 8009064:	605a      	str	r2, [r3, #4]
 8009066:	4401      	add	r1, r0
 8009068:	6019      	str	r1, [r3, #0]
 800906a:	e7d7      	b.n	800901c <_free_r+0x24>
 800906c:	d902      	bls.n	8009074 <_free_r+0x7c>
 800906e:	230c      	movs	r3, #12
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	e7d3      	b.n	800901c <_free_r+0x24>
 8009074:	6820      	ldr	r0, [r4, #0]
 8009076:	1821      	adds	r1, r4, r0
 8009078:	428a      	cmp	r2, r1
 800907a:	bf04      	itt	eq
 800907c:	6811      	ldreq	r1, [r2, #0]
 800907e:	6852      	ldreq	r2, [r2, #4]
 8009080:	6062      	str	r2, [r4, #4]
 8009082:	bf04      	itt	eq
 8009084:	1809      	addeq	r1, r1, r0
 8009086:	6021      	streq	r1, [r4, #0]
 8009088:	605c      	str	r4, [r3, #4]
 800908a:	e7c7      	b.n	800901c <_free_r+0x24>
 800908c:	bd38      	pop	{r3, r4, r5, pc}
 800908e:	bf00      	nop
 8009090:	24002204 	.word	0x24002204

08009094 <_malloc_r>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	1ccd      	adds	r5, r1, #3
 8009098:	f025 0503 	bic.w	r5, r5, #3
 800909c:	3508      	adds	r5, #8
 800909e:	2d0c      	cmp	r5, #12
 80090a0:	bf38      	it	cc
 80090a2:	250c      	movcc	r5, #12
 80090a4:	2d00      	cmp	r5, #0
 80090a6:	4606      	mov	r6, r0
 80090a8:	db01      	blt.n	80090ae <_malloc_r+0x1a>
 80090aa:	42a9      	cmp	r1, r5
 80090ac:	d903      	bls.n	80090b6 <_malloc_r+0x22>
 80090ae:	230c      	movs	r3, #12
 80090b0:	6033      	str	r3, [r6, #0]
 80090b2:	2000      	movs	r0, #0
 80090b4:	bd70      	pop	{r4, r5, r6, pc}
 80090b6:	f002 fe37 	bl	800bd28 <__malloc_lock>
 80090ba:	4a21      	ldr	r2, [pc, #132]	; (8009140 <_malloc_r+0xac>)
 80090bc:	6814      	ldr	r4, [r2, #0]
 80090be:	4621      	mov	r1, r4
 80090c0:	b991      	cbnz	r1, 80090e8 <_malloc_r+0x54>
 80090c2:	4c20      	ldr	r4, [pc, #128]	; (8009144 <_malloc_r+0xb0>)
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	b91b      	cbnz	r3, 80090d0 <_malloc_r+0x3c>
 80090c8:	4630      	mov	r0, r6
 80090ca:	f000 fe51 	bl	8009d70 <_sbrk_r>
 80090ce:	6020      	str	r0, [r4, #0]
 80090d0:	4629      	mov	r1, r5
 80090d2:	4630      	mov	r0, r6
 80090d4:	f000 fe4c 	bl	8009d70 <_sbrk_r>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d124      	bne.n	8009126 <_malloc_r+0x92>
 80090dc:	230c      	movs	r3, #12
 80090de:	6033      	str	r3, [r6, #0]
 80090e0:	4630      	mov	r0, r6
 80090e2:	f002 fe22 	bl	800bd2a <__malloc_unlock>
 80090e6:	e7e4      	b.n	80090b2 <_malloc_r+0x1e>
 80090e8:	680b      	ldr	r3, [r1, #0]
 80090ea:	1b5b      	subs	r3, r3, r5
 80090ec:	d418      	bmi.n	8009120 <_malloc_r+0x8c>
 80090ee:	2b0b      	cmp	r3, #11
 80090f0:	d90f      	bls.n	8009112 <_malloc_r+0x7e>
 80090f2:	600b      	str	r3, [r1, #0]
 80090f4:	50cd      	str	r5, [r1, r3]
 80090f6:	18cc      	adds	r4, r1, r3
 80090f8:	4630      	mov	r0, r6
 80090fa:	f002 fe16 	bl	800bd2a <__malloc_unlock>
 80090fe:	f104 000b 	add.w	r0, r4, #11
 8009102:	1d23      	adds	r3, r4, #4
 8009104:	f020 0007 	bic.w	r0, r0, #7
 8009108:	1ac3      	subs	r3, r0, r3
 800910a:	d0d3      	beq.n	80090b4 <_malloc_r+0x20>
 800910c:	425a      	negs	r2, r3
 800910e:	50e2      	str	r2, [r4, r3]
 8009110:	e7d0      	b.n	80090b4 <_malloc_r+0x20>
 8009112:	428c      	cmp	r4, r1
 8009114:	684b      	ldr	r3, [r1, #4]
 8009116:	bf16      	itet	ne
 8009118:	6063      	strne	r3, [r4, #4]
 800911a:	6013      	streq	r3, [r2, #0]
 800911c:	460c      	movne	r4, r1
 800911e:	e7eb      	b.n	80090f8 <_malloc_r+0x64>
 8009120:	460c      	mov	r4, r1
 8009122:	6849      	ldr	r1, [r1, #4]
 8009124:	e7cc      	b.n	80090c0 <_malloc_r+0x2c>
 8009126:	1cc4      	adds	r4, r0, #3
 8009128:	f024 0403 	bic.w	r4, r4, #3
 800912c:	42a0      	cmp	r0, r4
 800912e:	d005      	beq.n	800913c <_malloc_r+0xa8>
 8009130:	1a21      	subs	r1, r4, r0
 8009132:	4630      	mov	r0, r6
 8009134:	f000 fe1c 	bl	8009d70 <_sbrk_r>
 8009138:	3001      	adds	r0, #1
 800913a:	d0cf      	beq.n	80090dc <_malloc_r+0x48>
 800913c:	6025      	str	r5, [r4, #0]
 800913e:	e7db      	b.n	80090f8 <_malloc_r+0x64>
 8009140:	24002204 	.word	0x24002204
 8009144:	24002208 	.word	0x24002208

08009148 <__cvt>:
 8009148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800914a:	ed2d 8b02 	vpush	{d8}
 800914e:	eeb0 8b40 	vmov.f64	d8, d0
 8009152:	b085      	sub	sp, #20
 8009154:	4617      	mov	r7, r2
 8009156:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009158:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800915a:	ee18 2a90 	vmov	r2, s17
 800915e:	f025 0520 	bic.w	r5, r5, #32
 8009162:	2a00      	cmp	r2, #0
 8009164:	bfb6      	itet	lt
 8009166:	222d      	movlt	r2, #45	; 0x2d
 8009168:	2200      	movge	r2, #0
 800916a:	eeb1 8b40 	vneglt.f64	d8, d0
 800916e:	2d46      	cmp	r5, #70	; 0x46
 8009170:	460c      	mov	r4, r1
 8009172:	701a      	strb	r2, [r3, #0]
 8009174:	d004      	beq.n	8009180 <__cvt+0x38>
 8009176:	2d45      	cmp	r5, #69	; 0x45
 8009178:	d100      	bne.n	800917c <__cvt+0x34>
 800917a:	3401      	adds	r4, #1
 800917c:	2102      	movs	r1, #2
 800917e:	e000      	b.n	8009182 <__cvt+0x3a>
 8009180:	2103      	movs	r1, #3
 8009182:	ab03      	add	r3, sp, #12
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	ab02      	add	r3, sp, #8
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	4622      	mov	r2, r4
 800918c:	4633      	mov	r3, r6
 800918e:	eeb0 0b48 	vmov.f64	d0, d8
 8009192:	f001 fd31 	bl	800abf8 <_dtoa_r>
 8009196:	2d47      	cmp	r5, #71	; 0x47
 8009198:	d101      	bne.n	800919e <__cvt+0x56>
 800919a:	07fb      	lsls	r3, r7, #31
 800919c:	d51e      	bpl.n	80091dc <__cvt+0x94>
 800919e:	2d46      	cmp	r5, #70	; 0x46
 80091a0:	eb00 0304 	add.w	r3, r0, r4
 80091a4:	d10c      	bne.n	80091c0 <__cvt+0x78>
 80091a6:	7802      	ldrb	r2, [r0, #0]
 80091a8:	2a30      	cmp	r2, #48	; 0x30
 80091aa:	d107      	bne.n	80091bc <__cvt+0x74>
 80091ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80091b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b4:	bf1c      	itt	ne
 80091b6:	f1c4 0401 	rsbne	r4, r4, #1
 80091ba:	6034      	strne	r4, [r6, #0]
 80091bc:	6832      	ldr	r2, [r6, #0]
 80091be:	4413      	add	r3, r2
 80091c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80091c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c8:	d007      	beq.n	80091da <__cvt+0x92>
 80091ca:	2130      	movs	r1, #48	; 0x30
 80091cc:	9a03      	ldr	r2, [sp, #12]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d204      	bcs.n	80091dc <__cvt+0x94>
 80091d2:	1c54      	adds	r4, r2, #1
 80091d4:	9403      	str	r4, [sp, #12]
 80091d6:	7011      	strb	r1, [r2, #0]
 80091d8:	e7f8      	b.n	80091cc <__cvt+0x84>
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091e0:	1a1b      	subs	r3, r3, r0
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	b005      	add	sp, #20
 80091e6:	ecbd 8b02 	vpop	{d8}
 80091ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091ec <__exponent>:
 80091ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ee:	2900      	cmp	r1, #0
 80091f0:	4604      	mov	r4, r0
 80091f2:	bfba      	itte	lt
 80091f4:	4249      	neglt	r1, r1
 80091f6:	232d      	movlt	r3, #45	; 0x2d
 80091f8:	232b      	movge	r3, #43	; 0x2b
 80091fa:	2909      	cmp	r1, #9
 80091fc:	f804 2b02 	strb.w	r2, [r4], #2
 8009200:	7043      	strb	r3, [r0, #1]
 8009202:	dd20      	ble.n	8009246 <__exponent+0x5a>
 8009204:	f10d 0307 	add.w	r3, sp, #7
 8009208:	461f      	mov	r7, r3
 800920a:	260a      	movs	r6, #10
 800920c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009210:	fb06 1115 	mls	r1, r6, r5, r1
 8009214:	3130      	adds	r1, #48	; 0x30
 8009216:	2d09      	cmp	r5, #9
 8009218:	f803 1c01 	strb.w	r1, [r3, #-1]
 800921c:	f103 32ff 	add.w	r2, r3, #4294967295
 8009220:	4629      	mov	r1, r5
 8009222:	dc09      	bgt.n	8009238 <__exponent+0x4c>
 8009224:	3130      	adds	r1, #48	; 0x30
 8009226:	3b02      	subs	r3, #2
 8009228:	f802 1c01 	strb.w	r1, [r2, #-1]
 800922c:	42bb      	cmp	r3, r7
 800922e:	4622      	mov	r2, r4
 8009230:	d304      	bcc.n	800923c <__exponent+0x50>
 8009232:	1a10      	subs	r0, r2, r0
 8009234:	b003      	add	sp, #12
 8009236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009238:	4613      	mov	r3, r2
 800923a:	e7e7      	b.n	800920c <__exponent+0x20>
 800923c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009240:	f804 2b01 	strb.w	r2, [r4], #1
 8009244:	e7f2      	b.n	800922c <__exponent+0x40>
 8009246:	2330      	movs	r3, #48	; 0x30
 8009248:	4419      	add	r1, r3
 800924a:	7083      	strb	r3, [r0, #2]
 800924c:	1d02      	adds	r2, r0, #4
 800924e:	70c1      	strb	r1, [r0, #3]
 8009250:	e7ef      	b.n	8009232 <__exponent+0x46>
 8009252:	0000      	movs	r0, r0
 8009254:	0000      	movs	r0, r0
	...

08009258 <_printf_float>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	b08d      	sub	sp, #52	; 0x34
 800925e:	460c      	mov	r4, r1
 8009260:	4616      	mov	r6, r2
 8009262:	461f      	mov	r7, r3
 8009264:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009268:	4605      	mov	r5, r0
 800926a:	f002 fd3d 	bl	800bce8 <_localeconv_r>
 800926e:	f8d0 b000 	ldr.w	fp, [r0]
 8009272:	4658      	mov	r0, fp
 8009274:	f7f7 f894 	bl	80003a0 <strlen>
 8009278:	2300      	movs	r3, #0
 800927a:	930a      	str	r3, [sp, #40]	; 0x28
 800927c:	f8d8 3000 	ldr.w	r3, [r8]
 8009280:	9005      	str	r0, [sp, #20]
 8009282:	3307      	adds	r3, #7
 8009284:	f023 0307 	bic.w	r3, r3, #7
 8009288:	f103 0108 	add.w	r1, r3, #8
 800928c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009290:	6822      	ldr	r2, [r4, #0]
 8009292:	f8c8 1000 	str.w	r1, [r8]
 8009296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800929a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800929e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8009528 <_printf_float+0x2d0>
 80092a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80092a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80092aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80092ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b2:	dd24      	ble.n	80092fe <_printf_float+0xa6>
 80092b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80092b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092bc:	d502      	bpl.n	80092c4 <_printf_float+0x6c>
 80092be:	232d      	movs	r3, #45	; 0x2d
 80092c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c4:	499a      	ldr	r1, [pc, #616]	; (8009530 <_printf_float+0x2d8>)
 80092c6:	4b9b      	ldr	r3, [pc, #620]	; (8009534 <_printf_float+0x2dc>)
 80092c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80092cc:	bf8c      	ite	hi
 80092ce:	4688      	movhi	r8, r1
 80092d0:	4698      	movls	r8, r3
 80092d2:	f022 0204 	bic.w	r2, r2, #4
 80092d6:	2303      	movs	r3, #3
 80092d8:	6123      	str	r3, [r4, #16]
 80092da:	6022      	str	r2, [r4, #0]
 80092dc:	f04f 0a00 	mov.w	sl, #0
 80092e0:	9700      	str	r7, [sp, #0]
 80092e2:	4633      	mov	r3, r6
 80092e4:	aa0b      	add	r2, sp, #44	; 0x2c
 80092e6:	4621      	mov	r1, r4
 80092e8:	4628      	mov	r0, r5
 80092ea:	f000 f9e1 	bl	80096b0 <_printf_common>
 80092ee:	3001      	adds	r0, #1
 80092f0:	f040 8089 	bne.w	8009406 <_printf_float+0x1ae>
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	b00d      	add	sp, #52	; 0x34
 80092fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8009302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009306:	d702      	bvc.n	800930e <_printf_float+0xb6>
 8009308:	498b      	ldr	r1, [pc, #556]	; (8009538 <_printf_float+0x2e0>)
 800930a:	4b8c      	ldr	r3, [pc, #560]	; (800953c <_printf_float+0x2e4>)
 800930c:	e7dc      	b.n	80092c8 <_printf_float+0x70>
 800930e:	6861      	ldr	r1, [r4, #4]
 8009310:	1c4b      	adds	r3, r1, #1
 8009312:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009316:	ab0a      	add	r3, sp, #40	; 0x28
 8009318:	a809      	add	r0, sp, #36	; 0x24
 800931a:	d13b      	bne.n	8009394 <_printf_float+0x13c>
 800931c:	2106      	movs	r1, #6
 800931e:	6061      	str	r1, [r4, #4]
 8009320:	f04f 0c00 	mov.w	ip, #0
 8009324:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8009328:	e9cd 0900 	strd	r0, r9, [sp]
 800932c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009330:	6022      	str	r2, [r4, #0]
 8009332:	6861      	ldr	r1, [r4, #4]
 8009334:	4628      	mov	r0, r5
 8009336:	f7ff ff07 	bl	8009148 <__cvt>
 800933a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800933e:	2b47      	cmp	r3, #71	; 0x47
 8009340:	4680      	mov	r8, r0
 8009342:	d109      	bne.n	8009358 <_printf_float+0x100>
 8009344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009346:	1cd8      	adds	r0, r3, #3
 8009348:	db02      	blt.n	8009350 <_printf_float+0xf8>
 800934a:	6862      	ldr	r2, [r4, #4]
 800934c:	4293      	cmp	r3, r2
 800934e:	dd47      	ble.n	80093e0 <_printf_float+0x188>
 8009350:	f1a9 0902 	sub.w	r9, r9, #2
 8009354:	fa5f f989 	uxtb.w	r9, r9
 8009358:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800935c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800935e:	d824      	bhi.n	80093aa <_printf_float+0x152>
 8009360:	3901      	subs	r1, #1
 8009362:	464a      	mov	r2, r9
 8009364:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009368:	9109      	str	r1, [sp, #36]	; 0x24
 800936a:	f7ff ff3f 	bl	80091ec <__exponent>
 800936e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009370:	1813      	adds	r3, r2, r0
 8009372:	2a01      	cmp	r2, #1
 8009374:	4682      	mov	sl, r0
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	dc02      	bgt.n	8009380 <_printf_float+0x128>
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	07d1      	lsls	r1, r2, #31
 800937e:	d501      	bpl.n	8009384 <_printf_float+0x12c>
 8009380:	3301      	adds	r3, #1
 8009382:	6123      	str	r3, [r4, #16]
 8009384:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0a9      	beq.n	80092e0 <_printf_float+0x88>
 800938c:	232d      	movs	r3, #45	; 0x2d
 800938e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009392:	e7a5      	b.n	80092e0 <_printf_float+0x88>
 8009394:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8009398:	f000 8178 	beq.w	800968c <_printf_float+0x434>
 800939c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80093a0:	d1be      	bne.n	8009320 <_printf_float+0xc8>
 80093a2:	2900      	cmp	r1, #0
 80093a4:	d1bc      	bne.n	8009320 <_printf_float+0xc8>
 80093a6:	2101      	movs	r1, #1
 80093a8:	e7b9      	b.n	800931e <_printf_float+0xc6>
 80093aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80093ae:	d119      	bne.n	80093e4 <_printf_float+0x18c>
 80093b0:	2900      	cmp	r1, #0
 80093b2:	6863      	ldr	r3, [r4, #4]
 80093b4:	dd0c      	ble.n	80093d0 <_printf_float+0x178>
 80093b6:	6121      	str	r1, [r4, #16]
 80093b8:	b913      	cbnz	r3, 80093c0 <_printf_float+0x168>
 80093ba:	6822      	ldr	r2, [r4, #0]
 80093bc:	07d2      	lsls	r2, r2, #31
 80093be:	d502      	bpl.n	80093c6 <_printf_float+0x16e>
 80093c0:	3301      	adds	r3, #1
 80093c2:	440b      	add	r3, r1
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80093ca:	f04f 0a00 	mov.w	sl, #0
 80093ce:	e7d9      	b.n	8009384 <_printf_float+0x12c>
 80093d0:	b913      	cbnz	r3, 80093d8 <_printf_float+0x180>
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	07d0      	lsls	r0, r2, #31
 80093d6:	d501      	bpl.n	80093dc <_printf_float+0x184>
 80093d8:	3302      	adds	r3, #2
 80093da:	e7f3      	b.n	80093c4 <_printf_float+0x16c>
 80093dc:	2301      	movs	r3, #1
 80093de:	e7f1      	b.n	80093c4 <_printf_float+0x16c>
 80093e0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80093e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80093e8:	4293      	cmp	r3, r2
 80093ea:	db05      	blt.n	80093f8 <_printf_float+0x1a0>
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	07d1      	lsls	r1, r2, #31
 80093f2:	d5e8      	bpl.n	80093c6 <_printf_float+0x16e>
 80093f4:	3301      	adds	r3, #1
 80093f6:	e7e5      	b.n	80093c4 <_printf_float+0x16c>
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfd4      	ite	le
 80093fc:	f1c3 0302 	rsble	r3, r3, #2
 8009400:	2301      	movgt	r3, #1
 8009402:	4413      	add	r3, r2
 8009404:	e7de      	b.n	80093c4 <_printf_float+0x16c>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	055a      	lsls	r2, r3, #21
 800940a:	d407      	bmi.n	800941c <_printf_float+0x1c4>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	4642      	mov	r2, r8
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	d12a      	bne.n	8009470 <_printf_float+0x218>
 800941a:	e76b      	b.n	80092f4 <_printf_float+0x9c>
 800941c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009420:	f240 80de 	bls.w	80095e0 <_printf_float+0x388>
 8009424:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009428:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009430:	d133      	bne.n	800949a <_printf_float+0x242>
 8009432:	2301      	movs	r3, #1
 8009434:	4a42      	ldr	r2, [pc, #264]	; (8009540 <_printf_float+0x2e8>)
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	f43f af59 	beq.w	80092f4 <_printf_float+0x9c>
 8009442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009446:	429a      	cmp	r2, r3
 8009448:	db02      	blt.n	8009450 <_printf_float+0x1f8>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	07d8      	lsls	r0, r3, #31
 800944e:	d50f      	bpl.n	8009470 <_printf_float+0x218>
 8009450:	9b05      	ldr	r3, [sp, #20]
 8009452:	465a      	mov	r2, fp
 8009454:	4631      	mov	r1, r6
 8009456:	4628      	mov	r0, r5
 8009458:	47b8      	blx	r7
 800945a:	3001      	adds	r0, #1
 800945c:	f43f af4a 	beq.w	80092f4 <_printf_float+0x9c>
 8009460:	f04f 0800 	mov.w	r8, #0
 8009464:	f104 091a 	add.w	r9, r4, #26
 8009468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800946a:	3b01      	subs	r3, #1
 800946c:	4543      	cmp	r3, r8
 800946e:	dc09      	bgt.n	8009484 <_printf_float+0x22c>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	079b      	lsls	r3, r3, #30
 8009474:	f100 8105 	bmi.w	8009682 <_printf_float+0x42a>
 8009478:	68e0      	ldr	r0, [r4, #12]
 800947a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800947c:	4298      	cmp	r0, r3
 800947e:	bfb8      	it	lt
 8009480:	4618      	movlt	r0, r3
 8009482:	e739      	b.n	80092f8 <_printf_float+0xa0>
 8009484:	2301      	movs	r3, #1
 8009486:	464a      	mov	r2, r9
 8009488:	4631      	mov	r1, r6
 800948a:	4628      	mov	r0, r5
 800948c:	47b8      	blx	r7
 800948e:	3001      	adds	r0, #1
 8009490:	f43f af30 	beq.w	80092f4 <_printf_float+0x9c>
 8009494:	f108 0801 	add.w	r8, r8, #1
 8009498:	e7e6      	b.n	8009468 <_printf_float+0x210>
 800949a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800949c:	2b00      	cmp	r3, #0
 800949e:	dc2b      	bgt.n	80094f8 <_printf_float+0x2a0>
 80094a0:	2301      	movs	r3, #1
 80094a2:	4a27      	ldr	r2, [pc, #156]	; (8009540 <_printf_float+0x2e8>)
 80094a4:	4631      	mov	r1, r6
 80094a6:	4628      	mov	r0, r5
 80094a8:	47b8      	blx	r7
 80094aa:	3001      	adds	r0, #1
 80094ac:	f43f af22 	beq.w	80092f4 <_printf_float+0x9c>
 80094b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b2:	b923      	cbnz	r3, 80094be <_printf_float+0x266>
 80094b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b6:	b913      	cbnz	r3, 80094be <_printf_float+0x266>
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	07d9      	lsls	r1, r3, #31
 80094bc:	d5d8      	bpl.n	8009470 <_printf_float+0x218>
 80094be:	9b05      	ldr	r3, [sp, #20]
 80094c0:	465a      	mov	r2, fp
 80094c2:	4631      	mov	r1, r6
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b8      	blx	r7
 80094c8:	3001      	adds	r0, #1
 80094ca:	f43f af13 	beq.w	80092f4 <_printf_float+0x9c>
 80094ce:	f04f 0900 	mov.w	r9, #0
 80094d2:	f104 0a1a 	add.w	sl, r4, #26
 80094d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d8:	425b      	negs	r3, r3
 80094da:	454b      	cmp	r3, r9
 80094dc:	dc01      	bgt.n	80094e2 <_printf_float+0x28a>
 80094de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e0:	e795      	b.n	800940e <_printf_float+0x1b6>
 80094e2:	2301      	movs	r3, #1
 80094e4:	4652      	mov	r2, sl
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	f43f af01 	beq.w	80092f4 <_printf_float+0x9c>
 80094f2:	f109 0901 	add.w	r9, r9, #1
 80094f6:	e7ee      	b.n	80094d6 <_printf_float+0x27e>
 80094f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094fc:	429a      	cmp	r2, r3
 80094fe:	bfa8      	it	ge
 8009500:	461a      	movge	r2, r3
 8009502:	2a00      	cmp	r2, #0
 8009504:	4691      	mov	r9, r2
 8009506:	dd07      	ble.n	8009518 <_printf_float+0x2c0>
 8009508:	4613      	mov	r3, r2
 800950a:	4631      	mov	r1, r6
 800950c:	4642      	mov	r2, r8
 800950e:	4628      	mov	r0, r5
 8009510:	47b8      	blx	r7
 8009512:	3001      	adds	r0, #1
 8009514:	f43f aeee 	beq.w	80092f4 <_printf_float+0x9c>
 8009518:	f104 031a 	add.w	r3, r4, #26
 800951c:	f04f 0a00 	mov.w	sl, #0
 8009520:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009524:	9307      	str	r3, [sp, #28]
 8009526:	e017      	b.n	8009558 <_printf_float+0x300>
 8009528:	ffffffff 	.word	0xffffffff
 800952c:	7fefffff 	.word	0x7fefffff
 8009530:	08012710 	.word	0x08012710
 8009534:	0801270c 	.word	0x0801270c
 8009538:	08012718 	.word	0x08012718
 800953c:	08012714 	.word	0x08012714
 8009540:	0801271c 	.word	0x0801271c
 8009544:	2301      	movs	r3, #1
 8009546:	9a07      	ldr	r2, [sp, #28]
 8009548:	4631      	mov	r1, r6
 800954a:	4628      	mov	r0, r5
 800954c:	47b8      	blx	r7
 800954e:	3001      	adds	r0, #1
 8009550:	f43f aed0 	beq.w	80092f4 <_printf_float+0x9c>
 8009554:	f10a 0a01 	add.w	sl, sl, #1
 8009558:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800955a:	9306      	str	r3, [sp, #24]
 800955c:	eba3 0309 	sub.w	r3, r3, r9
 8009560:	4553      	cmp	r3, sl
 8009562:	dcef      	bgt.n	8009544 <_printf_float+0x2ec>
 8009564:	9b06      	ldr	r3, [sp, #24]
 8009566:	4498      	add	r8, r3
 8009568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800956c:	429a      	cmp	r2, r3
 800956e:	db15      	blt.n	800959c <_printf_float+0x344>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	07da      	lsls	r2, r3, #31
 8009574:	d412      	bmi.n	800959c <_printf_float+0x344>
 8009576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009578:	9a06      	ldr	r2, [sp, #24]
 800957a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800957c:	1a9a      	subs	r2, r3, r2
 800957e:	eba3 0a01 	sub.w	sl, r3, r1
 8009582:	4592      	cmp	sl, r2
 8009584:	bfa8      	it	ge
 8009586:	4692      	movge	sl, r2
 8009588:	f1ba 0f00 	cmp.w	sl, #0
 800958c:	dc0e      	bgt.n	80095ac <_printf_float+0x354>
 800958e:	f04f 0800 	mov.w	r8, #0
 8009592:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009596:	f104 091a 	add.w	r9, r4, #26
 800959a:	e019      	b.n	80095d0 <_printf_float+0x378>
 800959c:	9b05      	ldr	r3, [sp, #20]
 800959e:	465a      	mov	r2, fp
 80095a0:	4631      	mov	r1, r6
 80095a2:	4628      	mov	r0, r5
 80095a4:	47b8      	blx	r7
 80095a6:	3001      	adds	r0, #1
 80095a8:	d1e5      	bne.n	8009576 <_printf_float+0x31e>
 80095aa:	e6a3      	b.n	80092f4 <_printf_float+0x9c>
 80095ac:	4653      	mov	r3, sl
 80095ae:	4642      	mov	r2, r8
 80095b0:	4631      	mov	r1, r6
 80095b2:	4628      	mov	r0, r5
 80095b4:	47b8      	blx	r7
 80095b6:	3001      	adds	r0, #1
 80095b8:	d1e9      	bne.n	800958e <_printf_float+0x336>
 80095ba:	e69b      	b.n	80092f4 <_printf_float+0x9c>
 80095bc:	2301      	movs	r3, #1
 80095be:	464a      	mov	r2, r9
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	f43f ae94 	beq.w	80092f4 <_printf_float+0x9c>
 80095cc:	f108 0801 	add.w	r8, r8, #1
 80095d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095d4:	1a9b      	subs	r3, r3, r2
 80095d6:	eba3 030a 	sub.w	r3, r3, sl
 80095da:	4543      	cmp	r3, r8
 80095dc:	dcee      	bgt.n	80095bc <_printf_float+0x364>
 80095de:	e747      	b.n	8009470 <_printf_float+0x218>
 80095e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095e2:	2a01      	cmp	r2, #1
 80095e4:	dc01      	bgt.n	80095ea <_printf_float+0x392>
 80095e6:	07db      	lsls	r3, r3, #31
 80095e8:	d539      	bpl.n	800965e <_printf_float+0x406>
 80095ea:	2301      	movs	r3, #1
 80095ec:	4642      	mov	r2, r8
 80095ee:	4631      	mov	r1, r6
 80095f0:	4628      	mov	r0, r5
 80095f2:	47b8      	blx	r7
 80095f4:	3001      	adds	r0, #1
 80095f6:	f43f ae7d 	beq.w	80092f4 <_printf_float+0x9c>
 80095fa:	9b05      	ldr	r3, [sp, #20]
 80095fc:	465a      	mov	r2, fp
 80095fe:	4631      	mov	r1, r6
 8009600:	4628      	mov	r0, r5
 8009602:	47b8      	blx	r7
 8009604:	3001      	adds	r0, #1
 8009606:	f108 0801 	add.w	r8, r8, #1
 800960a:	f43f ae73 	beq.w	80092f4 <_printf_float+0x9c>
 800960e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009614:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009620:	d018      	beq.n	8009654 <_printf_float+0x3fc>
 8009622:	4642      	mov	r2, r8
 8009624:	4631      	mov	r1, r6
 8009626:	4628      	mov	r0, r5
 8009628:	47b8      	blx	r7
 800962a:	3001      	adds	r0, #1
 800962c:	d10e      	bne.n	800964c <_printf_float+0x3f4>
 800962e:	e661      	b.n	80092f4 <_printf_float+0x9c>
 8009630:	2301      	movs	r3, #1
 8009632:	464a      	mov	r2, r9
 8009634:	4631      	mov	r1, r6
 8009636:	4628      	mov	r0, r5
 8009638:	47b8      	blx	r7
 800963a:	3001      	adds	r0, #1
 800963c:	f43f ae5a 	beq.w	80092f4 <_printf_float+0x9c>
 8009640:	f108 0801 	add.w	r8, r8, #1
 8009644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009646:	3b01      	subs	r3, #1
 8009648:	4543      	cmp	r3, r8
 800964a:	dcf1      	bgt.n	8009630 <_printf_float+0x3d8>
 800964c:	4653      	mov	r3, sl
 800964e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009652:	e6dd      	b.n	8009410 <_printf_float+0x1b8>
 8009654:	f04f 0800 	mov.w	r8, #0
 8009658:	f104 091a 	add.w	r9, r4, #26
 800965c:	e7f2      	b.n	8009644 <_printf_float+0x3ec>
 800965e:	2301      	movs	r3, #1
 8009660:	e7df      	b.n	8009622 <_printf_float+0x3ca>
 8009662:	2301      	movs	r3, #1
 8009664:	464a      	mov	r2, r9
 8009666:	4631      	mov	r1, r6
 8009668:	4628      	mov	r0, r5
 800966a:	47b8      	blx	r7
 800966c:	3001      	adds	r0, #1
 800966e:	f43f ae41 	beq.w	80092f4 <_printf_float+0x9c>
 8009672:	f108 0801 	add.w	r8, r8, #1
 8009676:	68e3      	ldr	r3, [r4, #12]
 8009678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800967a:	1a9b      	subs	r3, r3, r2
 800967c:	4543      	cmp	r3, r8
 800967e:	dcf0      	bgt.n	8009662 <_printf_float+0x40a>
 8009680:	e6fa      	b.n	8009478 <_printf_float+0x220>
 8009682:	f04f 0800 	mov.w	r8, #0
 8009686:	f104 0919 	add.w	r9, r4, #25
 800968a:	e7f4      	b.n	8009676 <_printf_float+0x41e>
 800968c:	2900      	cmp	r1, #0
 800968e:	f43f ae8a 	beq.w	80093a6 <_printf_float+0x14e>
 8009692:	f04f 0c00 	mov.w	ip, #0
 8009696:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800969a:	e9cd 0900 	strd	r0, r9, [sp]
 800969e:	6022      	str	r2, [r4, #0]
 80096a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80096a4:	4628      	mov	r0, r5
 80096a6:	f7ff fd4f 	bl	8009148 <__cvt>
 80096aa:	4680      	mov	r8, r0
 80096ac:	e64a      	b.n	8009344 <_printf_float+0xec>
 80096ae:	bf00      	nop

080096b0 <_printf_common>:
 80096b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	4691      	mov	r9, r2
 80096b6:	461f      	mov	r7, r3
 80096b8:	688a      	ldr	r2, [r1, #8]
 80096ba:	690b      	ldr	r3, [r1, #16]
 80096bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096c0:	4293      	cmp	r3, r2
 80096c2:	bfb8      	it	lt
 80096c4:	4613      	movlt	r3, r2
 80096c6:	f8c9 3000 	str.w	r3, [r9]
 80096ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096ce:	4606      	mov	r6, r0
 80096d0:	460c      	mov	r4, r1
 80096d2:	b112      	cbz	r2, 80096da <_printf_common+0x2a>
 80096d4:	3301      	adds	r3, #1
 80096d6:	f8c9 3000 	str.w	r3, [r9]
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	0699      	lsls	r1, r3, #26
 80096de:	bf42      	ittt	mi
 80096e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096e4:	3302      	addmi	r3, #2
 80096e6:	f8c9 3000 	strmi.w	r3, [r9]
 80096ea:	6825      	ldr	r5, [r4, #0]
 80096ec:	f015 0506 	ands.w	r5, r5, #6
 80096f0:	d107      	bne.n	8009702 <_printf_common+0x52>
 80096f2:	f104 0a19 	add.w	sl, r4, #25
 80096f6:	68e3      	ldr	r3, [r4, #12]
 80096f8:	f8d9 2000 	ldr.w	r2, [r9]
 80096fc:	1a9b      	subs	r3, r3, r2
 80096fe:	42ab      	cmp	r3, r5
 8009700:	dc28      	bgt.n	8009754 <_printf_common+0xa4>
 8009702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	3300      	adds	r3, #0
 800970a:	bf18      	it	ne
 800970c:	2301      	movne	r3, #1
 800970e:	0692      	lsls	r2, r2, #26
 8009710:	d42d      	bmi.n	800976e <_printf_common+0xbe>
 8009712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009716:	4639      	mov	r1, r7
 8009718:	4630      	mov	r0, r6
 800971a:	47c0      	blx	r8
 800971c:	3001      	adds	r0, #1
 800971e:	d020      	beq.n	8009762 <_printf_common+0xb2>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	68e5      	ldr	r5, [r4, #12]
 8009724:	f8d9 2000 	ldr.w	r2, [r9]
 8009728:	f003 0306 	and.w	r3, r3, #6
 800972c:	2b04      	cmp	r3, #4
 800972e:	bf08      	it	eq
 8009730:	1aad      	subeq	r5, r5, r2
 8009732:	68a3      	ldr	r3, [r4, #8]
 8009734:	6922      	ldr	r2, [r4, #16]
 8009736:	bf0c      	ite	eq
 8009738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800973c:	2500      	movne	r5, #0
 800973e:	4293      	cmp	r3, r2
 8009740:	bfc4      	itt	gt
 8009742:	1a9b      	subgt	r3, r3, r2
 8009744:	18ed      	addgt	r5, r5, r3
 8009746:	f04f 0900 	mov.w	r9, #0
 800974a:	341a      	adds	r4, #26
 800974c:	454d      	cmp	r5, r9
 800974e:	d11a      	bne.n	8009786 <_printf_common+0xd6>
 8009750:	2000      	movs	r0, #0
 8009752:	e008      	b.n	8009766 <_printf_common+0xb6>
 8009754:	2301      	movs	r3, #1
 8009756:	4652      	mov	r2, sl
 8009758:	4639      	mov	r1, r7
 800975a:	4630      	mov	r0, r6
 800975c:	47c0      	blx	r8
 800975e:	3001      	adds	r0, #1
 8009760:	d103      	bne.n	800976a <_printf_common+0xba>
 8009762:	f04f 30ff 	mov.w	r0, #4294967295
 8009766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800976a:	3501      	adds	r5, #1
 800976c:	e7c3      	b.n	80096f6 <_printf_common+0x46>
 800976e:	18e1      	adds	r1, r4, r3
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	2030      	movs	r0, #48	; 0x30
 8009774:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009778:	4422      	add	r2, r4
 800977a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800977e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009782:	3302      	adds	r3, #2
 8009784:	e7c5      	b.n	8009712 <_printf_common+0x62>
 8009786:	2301      	movs	r3, #1
 8009788:	4622      	mov	r2, r4
 800978a:	4639      	mov	r1, r7
 800978c:	4630      	mov	r0, r6
 800978e:	47c0      	blx	r8
 8009790:	3001      	adds	r0, #1
 8009792:	d0e6      	beq.n	8009762 <_printf_common+0xb2>
 8009794:	f109 0901 	add.w	r9, r9, #1
 8009798:	e7d8      	b.n	800974c <_printf_common+0x9c>
	...

0800979c <_printf_i>:
 800979c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80097a4:	460c      	mov	r4, r1
 80097a6:	7e09      	ldrb	r1, [r1, #24]
 80097a8:	b085      	sub	sp, #20
 80097aa:	296e      	cmp	r1, #110	; 0x6e
 80097ac:	4617      	mov	r7, r2
 80097ae:	4606      	mov	r6, r0
 80097b0:	4698      	mov	r8, r3
 80097b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097b4:	f000 80b3 	beq.w	800991e <_printf_i+0x182>
 80097b8:	d822      	bhi.n	8009800 <_printf_i+0x64>
 80097ba:	2963      	cmp	r1, #99	; 0x63
 80097bc:	d036      	beq.n	800982c <_printf_i+0x90>
 80097be:	d80a      	bhi.n	80097d6 <_printf_i+0x3a>
 80097c0:	2900      	cmp	r1, #0
 80097c2:	f000 80b9 	beq.w	8009938 <_printf_i+0x19c>
 80097c6:	2958      	cmp	r1, #88	; 0x58
 80097c8:	f000 8083 	beq.w	80098d2 <_printf_i+0x136>
 80097cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80097d4:	e032      	b.n	800983c <_printf_i+0xa0>
 80097d6:	2964      	cmp	r1, #100	; 0x64
 80097d8:	d001      	beq.n	80097de <_printf_i+0x42>
 80097da:	2969      	cmp	r1, #105	; 0x69
 80097dc:	d1f6      	bne.n	80097cc <_printf_i+0x30>
 80097de:	6820      	ldr	r0, [r4, #0]
 80097e0:	6813      	ldr	r3, [r2, #0]
 80097e2:	0605      	lsls	r5, r0, #24
 80097e4:	f103 0104 	add.w	r1, r3, #4
 80097e8:	d52a      	bpl.n	8009840 <_printf_i+0xa4>
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6011      	str	r1, [r2, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	da03      	bge.n	80097fa <_printf_i+0x5e>
 80097f2:	222d      	movs	r2, #45	; 0x2d
 80097f4:	425b      	negs	r3, r3
 80097f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097fa:	486f      	ldr	r0, [pc, #444]	; (80099b8 <_printf_i+0x21c>)
 80097fc:	220a      	movs	r2, #10
 80097fe:	e039      	b.n	8009874 <_printf_i+0xd8>
 8009800:	2973      	cmp	r1, #115	; 0x73
 8009802:	f000 809d 	beq.w	8009940 <_printf_i+0x1a4>
 8009806:	d808      	bhi.n	800981a <_printf_i+0x7e>
 8009808:	296f      	cmp	r1, #111	; 0x6f
 800980a:	d020      	beq.n	800984e <_printf_i+0xb2>
 800980c:	2970      	cmp	r1, #112	; 0x70
 800980e:	d1dd      	bne.n	80097cc <_printf_i+0x30>
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	f043 0320 	orr.w	r3, r3, #32
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	e003      	b.n	8009822 <_printf_i+0x86>
 800981a:	2975      	cmp	r1, #117	; 0x75
 800981c:	d017      	beq.n	800984e <_printf_i+0xb2>
 800981e:	2978      	cmp	r1, #120	; 0x78
 8009820:	d1d4      	bne.n	80097cc <_printf_i+0x30>
 8009822:	2378      	movs	r3, #120	; 0x78
 8009824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009828:	4864      	ldr	r0, [pc, #400]	; (80099bc <_printf_i+0x220>)
 800982a:	e055      	b.n	80098d8 <_printf_i+0x13c>
 800982c:	6813      	ldr	r3, [r2, #0]
 800982e:	1d19      	adds	r1, r3, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6011      	str	r1, [r2, #0]
 8009834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800983c:	2301      	movs	r3, #1
 800983e:	e08c      	b.n	800995a <_printf_i+0x1be>
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6011      	str	r1, [r2, #0]
 8009844:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009848:	bf18      	it	ne
 800984a:	b21b      	sxthne	r3, r3
 800984c:	e7cf      	b.n	80097ee <_printf_i+0x52>
 800984e:	6813      	ldr	r3, [r2, #0]
 8009850:	6825      	ldr	r5, [r4, #0]
 8009852:	1d18      	adds	r0, r3, #4
 8009854:	6010      	str	r0, [r2, #0]
 8009856:	0628      	lsls	r0, r5, #24
 8009858:	d501      	bpl.n	800985e <_printf_i+0xc2>
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	e002      	b.n	8009864 <_printf_i+0xc8>
 800985e:	0668      	lsls	r0, r5, #25
 8009860:	d5fb      	bpl.n	800985a <_printf_i+0xbe>
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	4854      	ldr	r0, [pc, #336]	; (80099b8 <_printf_i+0x21c>)
 8009866:	296f      	cmp	r1, #111	; 0x6f
 8009868:	bf14      	ite	ne
 800986a:	220a      	movne	r2, #10
 800986c:	2208      	moveq	r2, #8
 800986e:	2100      	movs	r1, #0
 8009870:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009874:	6865      	ldr	r5, [r4, #4]
 8009876:	60a5      	str	r5, [r4, #8]
 8009878:	2d00      	cmp	r5, #0
 800987a:	f2c0 8095 	blt.w	80099a8 <_printf_i+0x20c>
 800987e:	6821      	ldr	r1, [r4, #0]
 8009880:	f021 0104 	bic.w	r1, r1, #4
 8009884:	6021      	str	r1, [r4, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d13d      	bne.n	8009906 <_printf_i+0x16a>
 800988a:	2d00      	cmp	r5, #0
 800988c:	f040 808e 	bne.w	80099ac <_printf_i+0x210>
 8009890:	4665      	mov	r5, ip
 8009892:	2a08      	cmp	r2, #8
 8009894:	d10b      	bne.n	80098ae <_printf_i+0x112>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	07db      	lsls	r3, r3, #31
 800989a:	d508      	bpl.n	80098ae <_printf_i+0x112>
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	6862      	ldr	r2, [r4, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	bfde      	ittt	le
 80098a4:	2330      	movle	r3, #48	; 0x30
 80098a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098ae:	ebac 0305 	sub.w	r3, ip, r5
 80098b2:	6123      	str	r3, [r4, #16]
 80098b4:	f8cd 8000 	str.w	r8, [sp]
 80098b8:	463b      	mov	r3, r7
 80098ba:	aa03      	add	r2, sp, #12
 80098bc:	4621      	mov	r1, r4
 80098be:	4630      	mov	r0, r6
 80098c0:	f7ff fef6 	bl	80096b0 <_printf_common>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d14d      	bne.n	8009964 <_printf_i+0x1c8>
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	b005      	add	sp, #20
 80098ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098d2:	4839      	ldr	r0, [pc, #228]	; (80099b8 <_printf_i+0x21c>)
 80098d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80098d8:	6813      	ldr	r3, [r2, #0]
 80098da:	6821      	ldr	r1, [r4, #0]
 80098dc:	1d1d      	adds	r5, r3, #4
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6015      	str	r5, [r2, #0]
 80098e2:	060a      	lsls	r2, r1, #24
 80098e4:	d50b      	bpl.n	80098fe <_printf_i+0x162>
 80098e6:	07ca      	lsls	r2, r1, #31
 80098e8:	bf44      	itt	mi
 80098ea:	f041 0120 	orrmi.w	r1, r1, #32
 80098ee:	6021      	strmi	r1, [r4, #0]
 80098f0:	b91b      	cbnz	r3, 80098fa <_printf_i+0x15e>
 80098f2:	6822      	ldr	r2, [r4, #0]
 80098f4:	f022 0220 	bic.w	r2, r2, #32
 80098f8:	6022      	str	r2, [r4, #0]
 80098fa:	2210      	movs	r2, #16
 80098fc:	e7b7      	b.n	800986e <_printf_i+0xd2>
 80098fe:	064d      	lsls	r5, r1, #25
 8009900:	bf48      	it	mi
 8009902:	b29b      	uxthmi	r3, r3
 8009904:	e7ef      	b.n	80098e6 <_printf_i+0x14a>
 8009906:	4665      	mov	r5, ip
 8009908:	fbb3 f1f2 	udiv	r1, r3, r2
 800990c:	fb02 3311 	mls	r3, r2, r1, r3
 8009910:	5cc3      	ldrb	r3, [r0, r3]
 8009912:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009916:	460b      	mov	r3, r1
 8009918:	2900      	cmp	r1, #0
 800991a:	d1f5      	bne.n	8009908 <_printf_i+0x16c>
 800991c:	e7b9      	b.n	8009892 <_printf_i+0xf6>
 800991e:	6813      	ldr	r3, [r2, #0]
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	6961      	ldr	r1, [r4, #20]
 8009924:	1d18      	adds	r0, r3, #4
 8009926:	6010      	str	r0, [r2, #0]
 8009928:	0628      	lsls	r0, r5, #24
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	d501      	bpl.n	8009932 <_printf_i+0x196>
 800992e:	6019      	str	r1, [r3, #0]
 8009930:	e002      	b.n	8009938 <_printf_i+0x19c>
 8009932:	066a      	lsls	r2, r5, #25
 8009934:	d5fb      	bpl.n	800992e <_printf_i+0x192>
 8009936:	8019      	strh	r1, [r3, #0]
 8009938:	2300      	movs	r3, #0
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	4665      	mov	r5, ip
 800993e:	e7b9      	b.n	80098b4 <_printf_i+0x118>
 8009940:	6813      	ldr	r3, [r2, #0]
 8009942:	1d19      	adds	r1, r3, #4
 8009944:	6011      	str	r1, [r2, #0]
 8009946:	681d      	ldr	r5, [r3, #0]
 8009948:	6862      	ldr	r2, [r4, #4]
 800994a:	2100      	movs	r1, #0
 800994c:	4628      	mov	r0, r5
 800994e:	f7f6 fd2f 	bl	80003b0 <memchr>
 8009952:	b108      	cbz	r0, 8009958 <_printf_i+0x1bc>
 8009954:	1b40      	subs	r0, r0, r5
 8009956:	6060      	str	r0, [r4, #4]
 8009958:	6863      	ldr	r3, [r4, #4]
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	2300      	movs	r3, #0
 800995e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009962:	e7a7      	b.n	80098b4 <_printf_i+0x118>
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	462a      	mov	r2, r5
 8009968:	4639      	mov	r1, r7
 800996a:	4630      	mov	r0, r6
 800996c:	47c0      	blx	r8
 800996e:	3001      	adds	r0, #1
 8009970:	d0aa      	beq.n	80098c8 <_printf_i+0x12c>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	079b      	lsls	r3, r3, #30
 8009976:	d413      	bmi.n	80099a0 <_printf_i+0x204>
 8009978:	68e0      	ldr	r0, [r4, #12]
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	4298      	cmp	r0, r3
 800997e:	bfb8      	it	lt
 8009980:	4618      	movlt	r0, r3
 8009982:	e7a3      	b.n	80098cc <_printf_i+0x130>
 8009984:	2301      	movs	r3, #1
 8009986:	464a      	mov	r2, r9
 8009988:	4639      	mov	r1, r7
 800998a:	4630      	mov	r0, r6
 800998c:	47c0      	blx	r8
 800998e:	3001      	adds	r0, #1
 8009990:	d09a      	beq.n	80098c8 <_printf_i+0x12c>
 8009992:	3501      	adds	r5, #1
 8009994:	68e3      	ldr	r3, [r4, #12]
 8009996:	9a03      	ldr	r2, [sp, #12]
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	42ab      	cmp	r3, r5
 800999c:	dcf2      	bgt.n	8009984 <_printf_i+0x1e8>
 800999e:	e7eb      	b.n	8009978 <_printf_i+0x1dc>
 80099a0:	2500      	movs	r5, #0
 80099a2:	f104 0919 	add.w	r9, r4, #25
 80099a6:	e7f5      	b.n	8009994 <_printf_i+0x1f8>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1ac      	bne.n	8009906 <_printf_i+0x16a>
 80099ac:	7803      	ldrb	r3, [r0, #0]
 80099ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b6:	e76c      	b.n	8009892 <_printf_i+0xf6>
 80099b8:	0801271e 	.word	0x0801271e
 80099bc:	0801272f 	.word	0x0801272f

080099c0 <_scanf_float>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	469a      	mov	sl, r3
 80099c6:	688b      	ldr	r3, [r1, #8]
 80099c8:	4616      	mov	r6, r2
 80099ca:	1e5a      	subs	r2, r3, #1
 80099cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80099d0:	b087      	sub	sp, #28
 80099d2:	bf83      	ittte	hi
 80099d4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80099d8:	189b      	addhi	r3, r3, r2
 80099da:	9301      	strhi	r3, [sp, #4]
 80099dc:	2300      	movls	r3, #0
 80099de:	bf86      	itte	hi
 80099e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80099e4:	608b      	strhi	r3, [r1, #8]
 80099e6:	9301      	strls	r3, [sp, #4]
 80099e8:	680b      	ldr	r3, [r1, #0]
 80099ea:	4688      	mov	r8, r1
 80099ec:	f04f 0b00 	mov.w	fp, #0
 80099f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80099f4:	f848 3b1c 	str.w	r3, [r8], #28
 80099f8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80099fc:	4607      	mov	r7, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	4645      	mov	r5, r8
 8009a02:	465a      	mov	r2, fp
 8009a04:	46d9      	mov	r9, fp
 8009a06:	f8cd b008 	str.w	fp, [sp, #8]
 8009a0a:	68a1      	ldr	r1, [r4, #8]
 8009a0c:	b181      	cbz	r1, 8009a30 <_scanf_float+0x70>
 8009a0e:	6833      	ldr	r3, [r6, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b49      	cmp	r3, #73	; 0x49
 8009a14:	d071      	beq.n	8009afa <_scanf_float+0x13a>
 8009a16:	d84d      	bhi.n	8009ab4 <_scanf_float+0xf4>
 8009a18:	2b39      	cmp	r3, #57	; 0x39
 8009a1a:	d840      	bhi.n	8009a9e <_scanf_float+0xde>
 8009a1c:	2b31      	cmp	r3, #49	; 0x31
 8009a1e:	f080 8088 	bcs.w	8009b32 <_scanf_float+0x172>
 8009a22:	2b2d      	cmp	r3, #45	; 0x2d
 8009a24:	f000 8090 	beq.w	8009b48 <_scanf_float+0x188>
 8009a28:	d815      	bhi.n	8009a56 <_scanf_float+0x96>
 8009a2a:	2b2b      	cmp	r3, #43	; 0x2b
 8009a2c:	f000 808c 	beq.w	8009b48 <_scanf_float+0x188>
 8009a30:	f1b9 0f00 	cmp.w	r9, #0
 8009a34:	d003      	beq.n	8009a3e <_scanf_float+0x7e>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	3a01      	subs	r2, #1
 8009a40:	2a01      	cmp	r2, #1
 8009a42:	f200 80ea 	bhi.w	8009c1a <_scanf_float+0x25a>
 8009a46:	4545      	cmp	r5, r8
 8009a48:	f200 80dc 	bhi.w	8009c04 <_scanf_float+0x244>
 8009a4c:	2601      	movs	r6, #1
 8009a4e:	4630      	mov	r0, r6
 8009a50:	b007      	add	sp, #28
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a56:	2b2e      	cmp	r3, #46	; 0x2e
 8009a58:	f000 809f 	beq.w	8009b9a <_scanf_float+0x1da>
 8009a5c:	2b30      	cmp	r3, #48	; 0x30
 8009a5e:	d1e7      	bne.n	8009a30 <_scanf_float+0x70>
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009a66:	d064      	beq.n	8009b32 <_scanf_float+0x172>
 8009a68:	9b01      	ldr	r3, [sp, #4]
 8009a6a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009a6e:	6020      	str	r0, [r4, #0]
 8009a70:	f109 0901 	add.w	r9, r9, #1
 8009a74:	b11b      	cbz	r3, 8009a7e <_scanf_float+0xbe>
 8009a76:	3b01      	subs	r3, #1
 8009a78:	3101      	adds	r1, #1
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	60a1      	str	r1, [r4, #8]
 8009a7e:	68a3      	ldr	r3, [r4, #8]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	60a3      	str	r3, [r4, #8]
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	3301      	adds	r3, #1
 8009a88:	6123      	str	r3, [r4, #16]
 8009a8a:	6873      	ldr	r3, [r6, #4]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	6073      	str	r3, [r6, #4]
 8009a92:	f340 80ac 	ble.w	8009bee <_scanf_float+0x22e>
 8009a96:	6833      	ldr	r3, [r6, #0]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	6033      	str	r3, [r6, #0]
 8009a9c:	e7b5      	b.n	8009a0a <_scanf_float+0x4a>
 8009a9e:	2b45      	cmp	r3, #69	; 0x45
 8009aa0:	f000 8085 	beq.w	8009bae <_scanf_float+0x1ee>
 8009aa4:	2b46      	cmp	r3, #70	; 0x46
 8009aa6:	d06a      	beq.n	8009b7e <_scanf_float+0x1be>
 8009aa8:	2b41      	cmp	r3, #65	; 0x41
 8009aaa:	d1c1      	bne.n	8009a30 <_scanf_float+0x70>
 8009aac:	2a01      	cmp	r2, #1
 8009aae:	d1bf      	bne.n	8009a30 <_scanf_float+0x70>
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	e046      	b.n	8009b42 <_scanf_float+0x182>
 8009ab4:	2b65      	cmp	r3, #101	; 0x65
 8009ab6:	d07a      	beq.n	8009bae <_scanf_float+0x1ee>
 8009ab8:	d818      	bhi.n	8009aec <_scanf_float+0x12c>
 8009aba:	2b54      	cmp	r3, #84	; 0x54
 8009abc:	d066      	beq.n	8009b8c <_scanf_float+0x1cc>
 8009abe:	d811      	bhi.n	8009ae4 <_scanf_float+0x124>
 8009ac0:	2b4e      	cmp	r3, #78	; 0x4e
 8009ac2:	d1b5      	bne.n	8009a30 <_scanf_float+0x70>
 8009ac4:	2a00      	cmp	r2, #0
 8009ac6:	d146      	bne.n	8009b56 <_scanf_float+0x196>
 8009ac8:	f1b9 0f00 	cmp.w	r9, #0
 8009acc:	d145      	bne.n	8009b5a <_scanf_float+0x19a>
 8009ace:	6821      	ldr	r1, [r4, #0]
 8009ad0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009ad4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009ad8:	d13f      	bne.n	8009b5a <_scanf_float+0x19a>
 8009ada:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009ade:	6021      	str	r1, [r4, #0]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	e02e      	b.n	8009b42 <_scanf_float+0x182>
 8009ae4:	2b59      	cmp	r3, #89	; 0x59
 8009ae6:	d01e      	beq.n	8009b26 <_scanf_float+0x166>
 8009ae8:	2b61      	cmp	r3, #97	; 0x61
 8009aea:	e7de      	b.n	8009aaa <_scanf_float+0xea>
 8009aec:	2b6e      	cmp	r3, #110	; 0x6e
 8009aee:	d0e9      	beq.n	8009ac4 <_scanf_float+0x104>
 8009af0:	d815      	bhi.n	8009b1e <_scanf_float+0x15e>
 8009af2:	2b66      	cmp	r3, #102	; 0x66
 8009af4:	d043      	beq.n	8009b7e <_scanf_float+0x1be>
 8009af6:	2b69      	cmp	r3, #105	; 0x69
 8009af8:	d19a      	bne.n	8009a30 <_scanf_float+0x70>
 8009afa:	f1bb 0f00 	cmp.w	fp, #0
 8009afe:	d138      	bne.n	8009b72 <_scanf_float+0x1b2>
 8009b00:	f1b9 0f00 	cmp.w	r9, #0
 8009b04:	d197      	bne.n	8009a36 <_scanf_float+0x76>
 8009b06:	6821      	ldr	r1, [r4, #0]
 8009b08:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009b0c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009b10:	d195      	bne.n	8009a3e <_scanf_float+0x7e>
 8009b12:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009b16:	6021      	str	r1, [r4, #0]
 8009b18:	f04f 0b01 	mov.w	fp, #1
 8009b1c:	e011      	b.n	8009b42 <_scanf_float+0x182>
 8009b1e:	2b74      	cmp	r3, #116	; 0x74
 8009b20:	d034      	beq.n	8009b8c <_scanf_float+0x1cc>
 8009b22:	2b79      	cmp	r3, #121	; 0x79
 8009b24:	d184      	bne.n	8009a30 <_scanf_float+0x70>
 8009b26:	f1bb 0f07 	cmp.w	fp, #7
 8009b2a:	d181      	bne.n	8009a30 <_scanf_float+0x70>
 8009b2c:	f04f 0b08 	mov.w	fp, #8
 8009b30:	e007      	b.n	8009b42 <_scanf_float+0x182>
 8009b32:	eb12 0f0b 	cmn.w	r2, fp
 8009b36:	f47f af7b 	bne.w	8009a30 <_scanf_float+0x70>
 8009b3a:	6821      	ldr	r1, [r4, #0]
 8009b3c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009b40:	6021      	str	r1, [r4, #0]
 8009b42:	702b      	strb	r3, [r5, #0]
 8009b44:	3501      	adds	r5, #1
 8009b46:	e79a      	b.n	8009a7e <_scanf_float+0xbe>
 8009b48:	6821      	ldr	r1, [r4, #0]
 8009b4a:	0608      	lsls	r0, r1, #24
 8009b4c:	f57f af70 	bpl.w	8009a30 <_scanf_float+0x70>
 8009b50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009b54:	e7f4      	b.n	8009b40 <_scanf_float+0x180>
 8009b56:	2a02      	cmp	r2, #2
 8009b58:	d047      	beq.n	8009bea <_scanf_float+0x22a>
 8009b5a:	f1bb 0f01 	cmp.w	fp, #1
 8009b5e:	d003      	beq.n	8009b68 <_scanf_float+0x1a8>
 8009b60:	f1bb 0f04 	cmp.w	fp, #4
 8009b64:	f47f af64 	bne.w	8009a30 <_scanf_float+0x70>
 8009b68:	f10b 0b01 	add.w	fp, fp, #1
 8009b6c:	fa5f fb8b 	uxtb.w	fp, fp
 8009b70:	e7e7      	b.n	8009b42 <_scanf_float+0x182>
 8009b72:	f1bb 0f03 	cmp.w	fp, #3
 8009b76:	d0f7      	beq.n	8009b68 <_scanf_float+0x1a8>
 8009b78:	f1bb 0f05 	cmp.w	fp, #5
 8009b7c:	e7f2      	b.n	8009b64 <_scanf_float+0x1a4>
 8009b7e:	f1bb 0f02 	cmp.w	fp, #2
 8009b82:	f47f af55 	bne.w	8009a30 <_scanf_float+0x70>
 8009b86:	f04f 0b03 	mov.w	fp, #3
 8009b8a:	e7da      	b.n	8009b42 <_scanf_float+0x182>
 8009b8c:	f1bb 0f06 	cmp.w	fp, #6
 8009b90:	f47f af4e 	bne.w	8009a30 <_scanf_float+0x70>
 8009b94:	f04f 0b07 	mov.w	fp, #7
 8009b98:	e7d3      	b.n	8009b42 <_scanf_float+0x182>
 8009b9a:	6821      	ldr	r1, [r4, #0]
 8009b9c:	0588      	lsls	r0, r1, #22
 8009b9e:	f57f af47 	bpl.w	8009a30 <_scanf_float+0x70>
 8009ba2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009ba6:	6021      	str	r1, [r4, #0]
 8009ba8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009bac:	e7c9      	b.n	8009b42 <_scanf_float+0x182>
 8009bae:	6821      	ldr	r1, [r4, #0]
 8009bb0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009bb4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009bb8:	d006      	beq.n	8009bc8 <_scanf_float+0x208>
 8009bba:	0548      	lsls	r0, r1, #21
 8009bbc:	f57f af38 	bpl.w	8009a30 <_scanf_float+0x70>
 8009bc0:	f1b9 0f00 	cmp.w	r9, #0
 8009bc4:	f43f af3b 	beq.w	8009a3e <_scanf_float+0x7e>
 8009bc8:	0588      	lsls	r0, r1, #22
 8009bca:	bf58      	it	pl
 8009bcc:	9802      	ldrpl	r0, [sp, #8]
 8009bce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009bd2:	bf58      	it	pl
 8009bd4:	eba9 0000 	subpl.w	r0, r9, r0
 8009bd8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009bdc:	bf58      	it	pl
 8009bde:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009be2:	6021      	str	r1, [r4, #0]
 8009be4:	f04f 0900 	mov.w	r9, #0
 8009be8:	e7ab      	b.n	8009b42 <_scanf_float+0x182>
 8009bea:	2203      	movs	r2, #3
 8009bec:	e7a9      	b.n	8009b42 <_scanf_float+0x182>
 8009bee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009bf2:	9205      	str	r2, [sp, #20]
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	4798      	blx	r3
 8009bfa:	9a05      	ldr	r2, [sp, #20]
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	f43f af04 	beq.w	8009a0a <_scanf_float+0x4a>
 8009c02:	e715      	b.n	8009a30 <_scanf_float+0x70>
 8009c04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	4638      	mov	r0, r7
 8009c10:	4798      	blx	r3
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	6123      	str	r3, [r4, #16]
 8009c18:	e715      	b.n	8009a46 <_scanf_float+0x86>
 8009c1a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009c1e:	2b06      	cmp	r3, #6
 8009c20:	d80a      	bhi.n	8009c38 <_scanf_float+0x278>
 8009c22:	f1bb 0f02 	cmp.w	fp, #2
 8009c26:	d966      	bls.n	8009cf6 <_scanf_float+0x336>
 8009c28:	f1ab 0b03 	sub.w	fp, fp, #3
 8009c2c:	fa5f fb8b 	uxtb.w	fp, fp
 8009c30:	eba5 0b0b 	sub.w	fp, r5, fp
 8009c34:	455d      	cmp	r5, fp
 8009c36:	d149      	bne.n	8009ccc <_scanf_float+0x30c>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	05da      	lsls	r2, r3, #23
 8009c3c:	d51f      	bpl.n	8009c7e <_scanf_float+0x2be>
 8009c3e:	055b      	lsls	r3, r3, #21
 8009c40:	d466      	bmi.n	8009d10 <_scanf_float+0x350>
 8009c42:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	2965      	cmp	r1, #101	; 0x65
 8009c4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c4e:	f105 3bff 	add.w	fp, r5, #4294967295
 8009c52:	6123      	str	r3, [r4, #16]
 8009c54:	d00d      	beq.n	8009c72 <_scanf_float+0x2b2>
 8009c56:	2945      	cmp	r1, #69	; 0x45
 8009c58:	d00b      	beq.n	8009c72 <_scanf_float+0x2b2>
 8009c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c5e:	4632      	mov	r2, r6
 8009c60:	4638      	mov	r0, r7
 8009c62:	4798      	blx	r3
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	f1a5 0b02 	sub.w	fp, r5, #2
 8009c70:	6123      	str	r3, [r4, #16]
 8009c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c76:	4632      	mov	r2, r6
 8009c78:	4638      	mov	r0, r7
 8009c7a:	4798      	blx	r3
 8009c7c:	465d      	mov	r5, fp
 8009c7e:	6826      	ldr	r6, [r4, #0]
 8009c80:	f016 0610 	ands.w	r6, r6, #16
 8009c84:	d170      	bne.n	8009d68 <_scanf_float+0x3a8>
 8009c86:	702e      	strb	r6, [r5, #0]
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c92:	d140      	bne.n	8009d16 <_scanf_float+0x356>
 8009c94:	9b02      	ldr	r3, [sp, #8]
 8009c96:	eba9 0303 	sub.w	r3, r9, r3
 8009c9a:	425a      	negs	r2, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d147      	bne.n	8009d30 <_scanf_float+0x370>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	4641      	mov	r1, r8
 8009ca6:	f000 fe7b 	bl	800a9a0 <_strtod_r>
 8009caa:	6820      	ldr	r0, [r4, #0]
 8009cac:	f8da 3000 	ldr.w	r3, [sl]
 8009cb0:	f010 0f02 	tst.w	r0, #2
 8009cb4:	f103 0204 	add.w	r2, r3, #4
 8009cb8:	f8ca 2000 	str.w	r2, [sl]
 8009cbc:	d043      	beq.n	8009d46 <_scanf_float+0x386>
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	ed83 0b00 	vstr	d0, [r3]
 8009cc4:	68e3      	ldr	r3, [r4, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60e3      	str	r3, [r4, #12]
 8009cca:	e6c0      	b.n	8009a4e <_scanf_float+0x8e>
 8009ccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	4798      	blx	r3
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	e7a8      	b.n	8009c34 <_scanf_float+0x274>
 8009ce2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ce6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009cea:	4632      	mov	r2, r6
 8009cec:	4638      	mov	r0, r7
 8009cee:	4798      	blx	r3
 8009cf0:	6923      	ldr	r3, [r4, #16]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	6123      	str	r3, [r4, #16]
 8009cf6:	4545      	cmp	r5, r8
 8009cf8:	d8f3      	bhi.n	8009ce2 <_scanf_float+0x322>
 8009cfa:	e6a7      	b.n	8009a4c <_scanf_float+0x8c>
 8009cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009d04:	4632      	mov	r2, r6
 8009d06:	4638      	mov	r0, r7
 8009d08:	4798      	blx	r3
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	4545      	cmp	r5, r8
 8009d12:	d8f3      	bhi.n	8009cfc <_scanf_float+0x33c>
 8009d14:	e69a      	b.n	8009a4c <_scanf_float+0x8c>
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0c1      	beq.n	8009ca0 <_scanf_float+0x2e0>
 8009d1c:	9904      	ldr	r1, [sp, #16]
 8009d1e:	230a      	movs	r3, #10
 8009d20:	4632      	mov	r2, r6
 8009d22:	3101      	adds	r1, #1
 8009d24:	4638      	mov	r0, r7
 8009d26:	f000 fec7 	bl	800aab8 <_strtol_r>
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	9d04      	ldr	r5, [sp, #16]
 8009d2e:	1ac2      	subs	r2, r0, r3
 8009d30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009d34:	429d      	cmp	r5, r3
 8009d36:	bf28      	it	cs
 8009d38:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009d3c:	490b      	ldr	r1, [pc, #44]	; (8009d6c <_scanf_float+0x3ac>)
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f82c 	bl	8009d9c <siprintf>
 8009d44:	e7ac      	b.n	8009ca0 <_scanf_float+0x2e0>
 8009d46:	f010 0004 	ands.w	r0, r0, #4
 8009d4a:	d1b8      	bne.n	8009cbe <_scanf_float+0x2fe>
 8009d4c:	eeb4 0b40 	vcmp.f64	d0, d0
 8009d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d54:	681d      	ldr	r5, [r3, #0]
 8009d56:	d704      	bvc.n	8009d62 <_scanf_float+0x3a2>
 8009d58:	f000 f81a 	bl	8009d90 <nanf>
 8009d5c:	ed85 0a00 	vstr	s0, [r5]
 8009d60:	e7b0      	b.n	8009cc4 <_scanf_float+0x304>
 8009d62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009d66:	e7f9      	b.n	8009d5c <_scanf_float+0x39c>
 8009d68:	2600      	movs	r6, #0
 8009d6a:	e670      	b.n	8009a4e <_scanf_float+0x8e>
 8009d6c:	08012740 	.word	0x08012740

08009d70 <_sbrk_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4c06      	ldr	r4, [pc, #24]	; (8009d8c <_sbrk_r+0x1c>)
 8009d74:	2300      	movs	r3, #0
 8009d76:	4605      	mov	r5, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	f7f8 f958 	bl	8002030 <_sbrk>
 8009d80:	1c43      	adds	r3, r0, #1
 8009d82:	d102      	bne.n	8009d8a <_sbrk_r+0x1a>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	b103      	cbz	r3, 8009d8a <_sbrk_r+0x1a>
 8009d88:	602b      	str	r3, [r5, #0]
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
 8009d8c:	24015858 	.word	0x24015858

08009d90 <nanf>:
 8009d90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d98 <nanf+0x8>
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	7fc00000 	.word	0x7fc00000

08009d9c <siprintf>:
 8009d9c:	b40e      	push	{r1, r2, r3}
 8009d9e:	b500      	push	{lr}
 8009da0:	b09c      	sub	sp, #112	; 0x70
 8009da2:	ab1d      	add	r3, sp, #116	; 0x74
 8009da4:	9002      	str	r0, [sp, #8]
 8009da6:	9006      	str	r0, [sp, #24]
 8009da8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009dac:	4809      	ldr	r0, [pc, #36]	; (8009dd4 <siprintf+0x38>)
 8009dae:	9107      	str	r1, [sp, #28]
 8009db0:	9104      	str	r1, [sp, #16]
 8009db2:	4909      	ldr	r1, [pc, #36]	; (8009dd8 <siprintf+0x3c>)
 8009db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db8:	9105      	str	r1, [sp, #20]
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	a902      	add	r1, sp, #8
 8009dc0:	f002 fc1c 	bl	800c5fc <_svfiprintf_r>
 8009dc4:	9b02      	ldr	r3, [sp, #8]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
 8009dca:	b01c      	add	sp, #112	; 0x70
 8009dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd0:	b003      	add	sp, #12
 8009dd2:	4770      	bx	lr
 8009dd4:	24000010 	.word	0x24000010
 8009dd8:	ffff0208 	.word	0xffff0208

08009ddc <sulp>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	4604      	mov	r4, r0
 8009de0:	460d      	mov	r5, r1
 8009de2:	4616      	mov	r6, r2
 8009de4:	ec45 4b10 	vmov	d0, r4, r5
 8009de8:	f002 fa6c 	bl	800c2c4 <__ulp>
 8009dec:	b17e      	cbz	r6, 8009e0e <sulp+0x32>
 8009dee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009df2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	dd09      	ble.n	8009e0e <sulp+0x32>
 8009dfa:	051b      	lsls	r3, r3, #20
 8009dfc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009e00:	2000      	movs	r0, #0
 8009e02:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009e06:	ec41 0b17 	vmov	d7, r0, r1
 8009e0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}

08009e10 <_strtod_l>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	ed2d 8b0c 	vpush	{d8-d13}
 8009e18:	4698      	mov	r8, r3
 8009e1a:	b09d      	sub	sp, #116	; 0x74
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4640      	mov	r0, r8
 8009e22:	460e      	mov	r6, r1
 8009e24:	9214      	str	r2, [sp, #80]	; 0x50
 8009e26:	9318      	str	r3, [sp, #96]	; 0x60
 8009e28:	f001 ff5b 	bl	800bce2 <__localeconv_l>
 8009e2c:	4681      	mov	r9, r0
 8009e2e:	6800      	ldr	r0, [r0, #0]
 8009e30:	f7f6 fab6 	bl	80003a0 <strlen>
 8009e34:	f04f 0a00 	mov.w	sl, #0
 8009e38:	4607      	mov	r7, r0
 8009e3a:	f04f 0b00 	mov.w	fp, #0
 8009e3e:	9617      	str	r6, [sp, #92]	; 0x5c
 8009e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e42:	781a      	ldrb	r2, [r3, #0]
 8009e44:	2a0d      	cmp	r2, #13
 8009e46:	d834      	bhi.n	8009eb2 <_strtod_l+0xa2>
 8009e48:	2a09      	cmp	r2, #9
 8009e4a:	d238      	bcs.n	8009ebe <_strtod_l+0xae>
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	d040      	beq.n	8009ed2 <_strtod_l+0xc2>
 8009e50:	2300      	movs	r3, #0
 8009e52:	930d      	str	r3, [sp, #52]	; 0x34
 8009e54:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009e56:	782b      	ldrb	r3, [r5, #0]
 8009e58:	2b30      	cmp	r3, #48	; 0x30
 8009e5a:	f040 80b3 	bne.w	8009fc4 <_strtod_l+0x1b4>
 8009e5e:	786b      	ldrb	r3, [r5, #1]
 8009e60:	2b58      	cmp	r3, #88	; 0x58
 8009e62:	d001      	beq.n	8009e68 <_strtod_l+0x58>
 8009e64:	2b78      	cmp	r3, #120	; 0x78
 8009e66:	d169      	bne.n	8009f3c <_strtod_l+0x12c>
 8009e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	ab18      	add	r3, sp, #96	; 0x60
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	f8cd 8008 	str.w	r8, [sp, #8]
 8009e74:	ab19      	add	r3, sp, #100	; 0x64
 8009e76:	4a8f      	ldr	r2, [pc, #572]	; (800a0b4 <_strtod_l+0x2a4>)
 8009e78:	a917      	add	r1, sp, #92	; 0x5c
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f001 fc57 	bl	800b72e <__gethex>
 8009e80:	f010 0607 	ands.w	r6, r0, #7
 8009e84:	4607      	mov	r7, r0
 8009e86:	d005      	beq.n	8009e94 <_strtod_l+0x84>
 8009e88:	2e06      	cmp	r6, #6
 8009e8a:	d12c      	bne.n	8009ee6 <_strtod_l+0xd6>
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	2300      	movs	r3, #0
 8009e90:	9517      	str	r5, [sp, #92]	; 0x5c
 8009e92:	930d      	str	r3, [sp, #52]	; 0x34
 8009e94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f040 855e 	bne.w	800a958 <_strtod_l+0xb48>
 8009e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e9e:	b1eb      	cbz	r3, 8009edc <_strtod_l+0xcc>
 8009ea0:	ec4b ab17 	vmov	d7, sl, fp
 8009ea4:	eeb1 0b47 	vneg.f64	d0, d7
 8009ea8:	b01d      	add	sp, #116	; 0x74
 8009eaa:	ecbd 8b0c 	vpop	{d8-d13}
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	2a2b      	cmp	r2, #43	; 0x2b
 8009eb4:	d015      	beq.n	8009ee2 <_strtod_l+0xd2>
 8009eb6:	2a2d      	cmp	r2, #45	; 0x2d
 8009eb8:	d004      	beq.n	8009ec4 <_strtod_l+0xb4>
 8009eba:	2a20      	cmp	r2, #32
 8009ebc:	d1c8      	bne.n	8009e50 <_strtod_l+0x40>
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ec2:	e7bd      	b.n	8009e40 <_strtod_l+0x30>
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	920d      	str	r2, [sp, #52]	; 0x34
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ecc:	785b      	ldrb	r3, [r3, #1]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1c0      	bne.n	8009e54 <_strtod_l+0x44>
 8009ed2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ed4:	9617      	str	r6, [sp, #92]	; 0x5c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f040 853c 	bne.w	800a954 <_strtod_l+0xb44>
 8009edc:	ec4b ab10 	vmov	d0, sl, fp
 8009ee0:	e7e2      	b.n	8009ea8 <_strtod_l+0x98>
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	e7ef      	b.n	8009ec6 <_strtod_l+0xb6>
 8009ee6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ee8:	b13a      	cbz	r2, 8009efa <_strtod_l+0xea>
 8009eea:	2135      	movs	r1, #53	; 0x35
 8009eec:	a81a      	add	r0, sp, #104	; 0x68
 8009eee:	f002 fae2 	bl	800c4b6 <__copybits>
 8009ef2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f001 ff4d 	bl	800bd94 <_Bfree>
 8009efa:	3e01      	subs	r6, #1
 8009efc:	2e04      	cmp	r6, #4
 8009efe:	d806      	bhi.n	8009f0e <_strtod_l+0xfe>
 8009f00:	e8df f006 	tbb	[pc, r6]
 8009f04:	1714030a 	.word	0x1714030a
 8009f08:	0a          	.byte	0x0a
 8009f09:	00          	.byte	0x00
 8009f0a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009f0e:	073b      	lsls	r3, r7, #28
 8009f10:	d5c0      	bpl.n	8009e94 <_strtod_l+0x84>
 8009f12:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009f16:	e7bd      	b.n	8009e94 <_strtod_l+0x84>
 8009f18:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009f1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009f22:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f26:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f2a:	e7f0      	b.n	8009f0e <_strtod_l+0xfe>
 8009f2c:	f8df b188 	ldr.w	fp, [pc, #392]	; 800a0b8 <_strtod_l+0x2a8>
 8009f30:	e7ed      	b.n	8009f0e <_strtod_l+0xfe>
 8009f32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009f36:	f04f 3aff 	mov.w	sl, #4294967295
 8009f3a:	e7e8      	b.n	8009f0e <_strtod_l+0xfe>
 8009f3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f42:	785b      	ldrb	r3, [r3, #1]
 8009f44:	2b30      	cmp	r3, #48	; 0x30
 8009f46:	d0f9      	beq.n	8009f3c <_strtod_l+0x12c>
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d0a3      	beq.n	8009e94 <_strtod_l+0x84>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f52:	930c      	str	r3, [sp, #48]	; 0x30
 8009f54:	2300      	movs	r3, #0
 8009f56:	9306      	str	r3, [sp, #24]
 8009f58:	9308      	str	r3, [sp, #32]
 8009f5a:	461d      	mov	r5, r3
 8009f5c:	220a      	movs	r2, #10
 8009f5e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009f60:	f890 8000 	ldrb.w	r8, [r0]
 8009f64:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8009f68:	b2d9      	uxtb	r1, r3
 8009f6a:	2909      	cmp	r1, #9
 8009f6c:	d92c      	bls.n	8009fc8 <_strtod_l+0x1b8>
 8009f6e:	463a      	mov	r2, r7
 8009f70:	f8d9 1000 	ldr.w	r1, [r9]
 8009f74:	f002 fc3a 	bl	800c7ec <strncmp>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d035      	beq.n	8009fe8 <_strtod_l+0x1d8>
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	4642      	mov	r2, r8
 8009f80:	462b      	mov	r3, r5
 8009f82:	4601      	mov	r1, r0
 8009f84:	9004      	str	r0, [sp, #16]
 8009f86:	2a65      	cmp	r2, #101	; 0x65
 8009f88:	d001      	beq.n	8009f8e <_strtod_l+0x17e>
 8009f8a:	2a45      	cmp	r2, #69	; 0x45
 8009f8c:	d117      	bne.n	8009fbe <_strtod_l+0x1ae>
 8009f8e:	b923      	cbnz	r3, 8009f9a <_strtod_l+0x18a>
 8009f90:	b910      	cbnz	r0, 8009f98 <_strtod_l+0x188>
 8009f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d09c      	beq.n	8009ed2 <_strtod_l+0xc2>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009f9c:	1c72      	adds	r2, r6, #1
 8009f9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009fa0:	7872      	ldrb	r2, [r6, #1]
 8009fa2:	2a2b      	cmp	r2, #43	; 0x2b
 8009fa4:	f000 8082 	beq.w	800a0ac <_strtod_l+0x29c>
 8009fa8:	2a2d      	cmp	r2, #45	; 0x2d
 8009faa:	d079      	beq.n	800a0a0 <_strtod_l+0x290>
 8009fac:	f04f 0e00 	mov.w	lr, #0
 8009fb0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009fb4:	f1bc 0f09 	cmp.w	ip, #9
 8009fb8:	f240 8086 	bls.w	800a0c8 <_strtod_l+0x2b8>
 8009fbc:	9617      	str	r6, [sp, #92]	; 0x5c
 8009fbe:	f04f 0800 	mov.w	r8, #0
 8009fc2:	e0a8      	b.n	800a116 <_strtod_l+0x306>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e7c2      	b.n	8009f4e <_strtod_l+0x13e>
 8009fc8:	2d08      	cmp	r5, #8
 8009fca:	bfd5      	itete	le
 8009fcc:	9908      	ldrle	r1, [sp, #32]
 8009fce:	9906      	ldrgt	r1, [sp, #24]
 8009fd0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009fd4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009fd8:	f100 0001 	add.w	r0, r0, #1
 8009fdc:	bfd4      	ite	le
 8009fde:	9308      	strle	r3, [sp, #32]
 8009fe0:	9306      	strgt	r3, [sp, #24]
 8009fe2:	3501      	adds	r5, #1
 8009fe4:	9017      	str	r0, [sp, #92]	; 0x5c
 8009fe6:	e7ba      	b.n	8009f5e <_strtod_l+0x14e>
 8009fe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fea:	19da      	adds	r2, r3, r7
 8009fec:	9217      	str	r2, [sp, #92]	; 0x5c
 8009fee:	5dda      	ldrb	r2, [r3, r7]
 8009ff0:	2d00      	cmp	r5, #0
 8009ff2:	d038      	beq.n	800a066 <_strtod_l+0x256>
 8009ff4:	4601      	mov	r1, r0
 8009ff6:	462b      	mov	r3, r5
 8009ff8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8009ffc:	2f09      	cmp	r7, #9
 8009ffe:	d913      	bls.n	800a028 <_strtod_l+0x218>
 800a000:	2701      	movs	r7, #1
 800a002:	9704      	str	r7, [sp, #16]
 800a004:	e7bf      	b.n	8009f86 <_strtod_l+0x176>
 800a006:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	9217      	str	r2, [sp, #92]	; 0x5c
 800a00c:	785a      	ldrb	r2, [r3, #1]
 800a00e:	3001      	adds	r0, #1
 800a010:	2a30      	cmp	r2, #48	; 0x30
 800a012:	d0f8      	beq.n	800a006 <_strtod_l+0x1f6>
 800a014:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a018:	2b08      	cmp	r3, #8
 800a01a:	f200 84a2 	bhi.w	800a962 <_strtod_l+0xb52>
 800a01e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a020:	930c      	str	r3, [sp, #48]	; 0x30
 800a022:	4601      	mov	r1, r0
 800a024:	2000      	movs	r0, #0
 800a026:	4603      	mov	r3, r0
 800a028:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800a02c:	f100 0701 	add.w	r7, r0, #1
 800a030:	d013      	beq.n	800a05a <_strtod_l+0x24a>
 800a032:	4439      	add	r1, r7
 800a034:	eb00 0e03 	add.w	lr, r0, r3
 800a038:	461f      	mov	r7, r3
 800a03a:	f04f 0c0a 	mov.w	ip, #10
 800a03e:	45be      	cmp	lr, r7
 800a040:	d113      	bne.n	800a06a <_strtod_l+0x25a>
 800a042:	181f      	adds	r7, r3, r0
 800a044:	2f08      	cmp	r7, #8
 800a046:	f103 0301 	add.w	r3, r3, #1
 800a04a:	4403      	add	r3, r0
 800a04c:	dc1d      	bgt.n	800a08a <_strtod_l+0x27a>
 800a04e:	9a08      	ldr	r2, [sp, #32]
 800a050:	200a      	movs	r0, #10
 800a052:	fb00 8202 	mla	r2, r0, r2, r8
 800a056:	9208      	str	r2, [sp, #32]
 800a058:	2700      	movs	r7, #0
 800a05a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a05c:	1c50      	adds	r0, r2, #1
 800a05e:	9017      	str	r0, [sp, #92]	; 0x5c
 800a060:	7852      	ldrb	r2, [r2, #1]
 800a062:	4638      	mov	r0, r7
 800a064:	e7c8      	b.n	8009ff8 <_strtod_l+0x1e8>
 800a066:	4628      	mov	r0, r5
 800a068:	e7d2      	b.n	800a010 <_strtod_l+0x200>
 800a06a:	2f08      	cmp	r7, #8
 800a06c:	f107 0701 	add.w	r7, r7, #1
 800a070:	dc04      	bgt.n	800a07c <_strtod_l+0x26c>
 800a072:	9a08      	ldr	r2, [sp, #32]
 800a074:	fb0c f202 	mul.w	r2, ip, r2
 800a078:	9208      	str	r2, [sp, #32]
 800a07a:	e7e0      	b.n	800a03e <_strtod_l+0x22e>
 800a07c:	2f10      	cmp	r7, #16
 800a07e:	bfde      	ittt	le
 800a080:	9a06      	ldrle	r2, [sp, #24]
 800a082:	fb0c f202 	mulle.w	r2, ip, r2
 800a086:	9206      	strle	r2, [sp, #24]
 800a088:	e7d9      	b.n	800a03e <_strtod_l+0x22e>
 800a08a:	2b10      	cmp	r3, #16
 800a08c:	bfdf      	itttt	le
 800a08e:	9a06      	ldrle	r2, [sp, #24]
 800a090:	200a      	movle	r0, #10
 800a092:	fb00 8202 	mlale	r2, r0, r2, r8
 800a096:	9206      	strle	r2, [sp, #24]
 800a098:	e7de      	b.n	800a058 <_strtod_l+0x248>
 800a09a:	2301      	movs	r3, #1
 800a09c:	9304      	str	r3, [sp, #16]
 800a09e:	e777      	b.n	8009f90 <_strtod_l+0x180>
 800a0a0:	f04f 0e01 	mov.w	lr, #1
 800a0a4:	1cb2      	adds	r2, r6, #2
 800a0a6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0a8:	78b2      	ldrb	r2, [r6, #2]
 800a0aa:	e781      	b.n	8009fb0 <_strtod_l+0x1a0>
 800a0ac:	f04f 0e00 	mov.w	lr, #0
 800a0b0:	e7f8      	b.n	800a0a4 <_strtod_l+0x294>
 800a0b2:	bf00      	nop
 800a0b4:	08012748 	.word	0x08012748
 800a0b8:	7ff00000 	.word	0x7ff00000
 800a0bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a0be:	f102 0c01 	add.w	ip, r2, #1
 800a0c2:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800a0c6:	7852      	ldrb	r2, [r2, #1]
 800a0c8:	2a30      	cmp	r2, #48	; 0x30
 800a0ca:	d0f7      	beq.n	800a0bc <_strtod_l+0x2ac>
 800a0cc:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800a0d0:	f1bc 0f08 	cmp.w	ip, #8
 800a0d4:	f63f af73 	bhi.w	8009fbe <_strtod_l+0x1ae>
 800a0d8:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800a0dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a0de:	920e      	str	r2, [sp, #56]	; 0x38
 800a0e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a0e2:	f102 0c01 	add.w	ip, r2, #1
 800a0e6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800a0ea:	7852      	ldrb	r2, [r2, #1]
 800a0ec:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800a0f0:	f1b9 0f09 	cmp.w	r9, #9
 800a0f4:	d939      	bls.n	800a16a <_strtod_l+0x35a>
 800a0f6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a0f8:	ebac 0c07 	sub.w	ip, ip, r7
 800a0fc:	f1bc 0f08 	cmp.w	ip, #8
 800a100:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800a104:	dc37      	bgt.n	800a176 <_strtod_l+0x366>
 800a106:	45e0      	cmp	r8, ip
 800a108:	bfa8      	it	ge
 800a10a:	46e0      	movge	r8, ip
 800a10c:	f1be 0f00 	cmp.w	lr, #0
 800a110:	d001      	beq.n	800a116 <_strtod_l+0x306>
 800a112:	f1c8 0800 	rsb	r8, r8, #0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d151      	bne.n	800a1be <_strtod_l+0x3ae>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	f47f aeba 	bne.w	8009e94 <_strtod_l+0x84>
 800a120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a122:	2b00      	cmp	r3, #0
 800a124:	f47f aeb6 	bne.w	8009e94 <_strtod_l+0x84>
 800a128:	9b04      	ldr	r3, [sp, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f47f aed1 	bne.w	8009ed2 <_strtod_l+0xc2>
 800a130:	2a4e      	cmp	r2, #78	; 0x4e
 800a132:	d027      	beq.n	800a184 <_strtod_l+0x374>
 800a134:	dc21      	bgt.n	800a17a <_strtod_l+0x36a>
 800a136:	2a49      	cmp	r2, #73	; 0x49
 800a138:	f47f aecb 	bne.w	8009ed2 <_strtod_l+0xc2>
 800a13c:	499a      	ldr	r1, [pc, #616]	; (800a3a8 <_strtod_l+0x598>)
 800a13e:	a817      	add	r0, sp, #92	; 0x5c
 800a140:	f001 fd28 	bl	800bb94 <__match>
 800a144:	2800      	cmp	r0, #0
 800a146:	f43f aec4 	beq.w	8009ed2 <_strtod_l+0xc2>
 800a14a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a14c:	4997      	ldr	r1, [pc, #604]	; (800a3ac <_strtod_l+0x59c>)
 800a14e:	3b01      	subs	r3, #1
 800a150:	a817      	add	r0, sp, #92	; 0x5c
 800a152:	9317      	str	r3, [sp, #92]	; 0x5c
 800a154:	f001 fd1e 	bl	800bb94 <__match>
 800a158:	b910      	cbnz	r0, 800a160 <_strtod_l+0x350>
 800a15a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a15c:	3301      	adds	r3, #1
 800a15e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a160:	f8df b260 	ldr.w	fp, [pc, #608]	; 800a3c4 <_strtod_l+0x5b4>
 800a164:	f04f 0a00 	mov.w	sl, #0
 800a168:	e694      	b.n	8009e94 <_strtod_l+0x84>
 800a16a:	270a      	movs	r7, #10
 800a16c:	fb07 2808 	mla	r8, r7, r8, r2
 800a170:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800a174:	e7b4      	b.n	800a0e0 <_strtod_l+0x2d0>
 800a176:	46e0      	mov	r8, ip
 800a178:	e7c8      	b.n	800a10c <_strtod_l+0x2fc>
 800a17a:	2a69      	cmp	r2, #105	; 0x69
 800a17c:	d0de      	beq.n	800a13c <_strtod_l+0x32c>
 800a17e:	2a6e      	cmp	r2, #110	; 0x6e
 800a180:	f47f aea7 	bne.w	8009ed2 <_strtod_l+0xc2>
 800a184:	498a      	ldr	r1, [pc, #552]	; (800a3b0 <_strtod_l+0x5a0>)
 800a186:	a817      	add	r0, sp, #92	; 0x5c
 800a188:	f001 fd04 	bl	800bb94 <__match>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	f43f aea0 	beq.w	8009ed2 <_strtod_l+0xc2>
 800a192:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	2b28      	cmp	r3, #40	; 0x28
 800a198:	d10e      	bne.n	800a1b8 <_strtod_l+0x3a8>
 800a19a:	aa1a      	add	r2, sp, #104	; 0x68
 800a19c:	4985      	ldr	r1, [pc, #532]	; (800a3b4 <_strtod_l+0x5a4>)
 800a19e:	a817      	add	r0, sp, #92	; 0x5c
 800a1a0:	f001 fd0c 	bl	800bbbc <__hexnan>
 800a1a4:	2805      	cmp	r0, #5
 800a1a6:	d107      	bne.n	800a1b8 <_strtod_l+0x3a8>
 800a1a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1aa:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a1ae:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a1b2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a1b6:	e66d      	b.n	8009e94 <_strtod_l+0x84>
 800a1b8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800a3c8 <_strtod_l+0x5b8>
 800a1bc:	e7d2      	b.n	800a164 <_strtod_l+0x354>
 800a1be:	eddd 7a08 	vldr	s15, [sp, #32]
 800a1c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a1c6:	eba8 0201 	sub.w	r2, r8, r1
 800a1ca:	2d00      	cmp	r5, #0
 800a1cc:	bf08      	it	eq
 800a1ce:	461d      	moveq	r5, r3
 800a1d0:	2b10      	cmp	r3, #16
 800a1d2:	9204      	str	r2, [sp, #16]
 800a1d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a1d8:	461a      	mov	r2, r3
 800a1da:	bfa8      	it	ge
 800a1dc:	2210      	movge	r2, #16
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a1e4:	dc14      	bgt.n	800a210 <_strtod_l+0x400>
 800a1e6:	9904      	ldr	r1, [sp, #16]
 800a1e8:	2900      	cmp	r1, #0
 800a1ea:	f43f ae53 	beq.w	8009e94 <_strtod_l+0x84>
 800a1ee:	9904      	ldr	r1, [sp, #16]
 800a1f0:	dd72      	ble.n	800a2d8 <_strtod_l+0x4c8>
 800a1f2:	2916      	cmp	r1, #22
 800a1f4:	dc5a      	bgt.n	800a2ac <_strtod_l+0x49c>
 800a1f6:	4970      	ldr	r1, [pc, #448]	; (800a3b8 <_strtod_l+0x5a8>)
 800a1f8:	9b04      	ldr	r3, [sp, #16]
 800a1fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1fe:	ed91 7b00 	vldr	d7, [r1]
 800a202:	ec4b ab16 	vmov	d6, sl, fp
 800a206:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a20a:	ec5b ab17 	vmov	sl, fp, d7
 800a20e:	e641      	b.n	8009e94 <_strtod_l+0x84>
 800a210:	4969      	ldr	r1, [pc, #420]	; (800a3b8 <_strtod_l+0x5a8>)
 800a212:	eddd 7a06 	vldr	s15, [sp, #24]
 800a216:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a21a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800a21e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a222:	2b0f      	cmp	r3, #15
 800a224:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a228:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a22c:	ec5b ab17 	vmov	sl, fp, d7
 800a230:	ddd9      	ble.n	800a1e6 <_strtod_l+0x3d6>
 800a232:	9904      	ldr	r1, [sp, #16]
 800a234:	1a9a      	subs	r2, r3, r2
 800a236:	440a      	add	r2, r1
 800a238:	2a00      	cmp	r2, #0
 800a23a:	f340 8096 	ble.w	800a36a <_strtod_l+0x55a>
 800a23e:	f012 000f 	ands.w	r0, r2, #15
 800a242:	d00a      	beq.n	800a25a <_strtod_l+0x44a>
 800a244:	495c      	ldr	r1, [pc, #368]	; (800a3b8 <_strtod_l+0x5a8>)
 800a246:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a24a:	ed91 7b00 	vldr	d7, [r1]
 800a24e:	ec4b ab16 	vmov	d6, sl, fp
 800a252:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a256:	ec5b ab17 	vmov	sl, fp, d7
 800a25a:	f032 020f 	bics.w	r2, r2, #15
 800a25e:	d072      	beq.n	800a346 <_strtod_l+0x536>
 800a260:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800a264:	dd45      	ble.n	800a2f2 <_strtod_l+0x4e2>
 800a266:	2500      	movs	r5, #0
 800a268:	46a8      	mov	r8, r5
 800a26a:	9506      	str	r5, [sp, #24]
 800a26c:	46a9      	mov	r9, r5
 800a26e:	2322      	movs	r3, #34	; 0x22
 800a270:	f8df b150 	ldr.w	fp, [pc, #336]	; 800a3c4 <_strtod_l+0x5b4>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	f04f 0a00 	mov.w	sl, #0
 800a27a:	9b06      	ldr	r3, [sp, #24]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f43f ae09 	beq.w	8009e94 <_strtod_l+0x84>
 800a282:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a284:	4620      	mov	r0, r4
 800a286:	f001 fd85 	bl	800bd94 <_Bfree>
 800a28a:	4649      	mov	r1, r9
 800a28c:	4620      	mov	r0, r4
 800a28e:	f001 fd81 	bl	800bd94 <_Bfree>
 800a292:	4641      	mov	r1, r8
 800a294:	4620      	mov	r0, r4
 800a296:	f001 fd7d 	bl	800bd94 <_Bfree>
 800a29a:	9906      	ldr	r1, [sp, #24]
 800a29c:	4620      	mov	r0, r4
 800a29e:	f001 fd79 	bl	800bd94 <_Bfree>
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f001 fd75 	bl	800bd94 <_Bfree>
 800a2aa:	e5f3      	b.n	8009e94 <_strtod_l+0x84>
 800a2ac:	9804      	ldr	r0, [sp, #16]
 800a2ae:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800a2b2:	4281      	cmp	r1, r0
 800a2b4:	dbbd      	blt.n	800a232 <_strtod_l+0x422>
 800a2b6:	4a40      	ldr	r2, [pc, #256]	; (800a3b8 <_strtod_l+0x5a8>)
 800a2b8:	f1c3 030f 	rsb	r3, r3, #15
 800a2bc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a2c0:	ed91 7b00 	vldr	d7, [r1]
 800a2c4:	ec4b ab16 	vmov	d6, sl, fp
 800a2c8:	1ac3      	subs	r3, r0, r3
 800a2ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a2ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a2d2:	ed92 6b00 	vldr	d6, [r2]
 800a2d6:	e796      	b.n	800a206 <_strtod_l+0x3f6>
 800a2d8:	3116      	adds	r1, #22
 800a2da:	dbaa      	blt.n	800a232 <_strtod_l+0x422>
 800a2dc:	4936      	ldr	r1, [pc, #216]	; (800a3b8 <_strtod_l+0x5a8>)
 800a2de:	9b04      	ldr	r3, [sp, #16]
 800a2e0:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800a2e4:	ed91 7b00 	vldr	d7, [r1]
 800a2e8:	ec4b ab16 	vmov	d6, sl, fp
 800a2ec:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a2f0:	e78b      	b.n	800a20a <_strtod_l+0x3fa>
 800a2f2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	4e30      	ldr	r6, [pc, #192]	; (800a3bc <_strtod_l+0x5ac>)
 800a2fa:	1112      	asrs	r2, r2, #4
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	2a01      	cmp	r2, #1
 800a300:	dc23      	bgt.n	800a34a <_strtod_l+0x53a>
 800a302:	b108      	cbz	r0, 800a308 <_strtod_l+0x4f8>
 800a304:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800a308:	4a2c      	ldr	r2, [pc, #176]	; (800a3bc <_strtod_l+0x5ac>)
 800a30a:	482d      	ldr	r0, [pc, #180]	; (800a3c0 <_strtod_l+0x5b0>)
 800a30c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800a310:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a314:	ed91 7b00 	vldr	d7, [r1]
 800a318:	ec4b ab16 	vmov	d6, sl, fp
 800a31c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a320:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a324:	9907      	ldr	r1, [sp, #28]
 800a326:	4a27      	ldr	r2, [pc, #156]	; (800a3c4 <_strtod_l+0x5b4>)
 800a328:	400a      	ands	r2, r1
 800a32a:	4282      	cmp	r2, r0
 800a32c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800a330:	d899      	bhi.n	800a266 <_strtod_l+0x456>
 800a332:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800a336:	4282      	cmp	r2, r0
 800a338:	bf86      	itte	hi
 800a33a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800a3cc <_strtod_l+0x5bc>
 800a33e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a342:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800a346:	2700      	movs	r7, #0
 800a348:	e070      	b.n	800a42c <_strtod_l+0x61c>
 800a34a:	07d7      	lsls	r7, r2, #31
 800a34c:	d50a      	bpl.n	800a364 <_strtod_l+0x554>
 800a34e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800a352:	ed90 7b00 	vldr	d7, [r0]
 800a356:	ed9d 6b06 	vldr	d6, [sp, #24]
 800a35a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a35e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a362:	2001      	movs	r0, #1
 800a364:	3101      	adds	r1, #1
 800a366:	1052      	asrs	r2, r2, #1
 800a368:	e7c9      	b.n	800a2fe <_strtod_l+0x4ee>
 800a36a:	d0ec      	beq.n	800a346 <_strtod_l+0x536>
 800a36c:	4252      	negs	r2, r2
 800a36e:	f012 000f 	ands.w	r0, r2, #15
 800a372:	d00a      	beq.n	800a38a <_strtod_l+0x57a>
 800a374:	4910      	ldr	r1, [pc, #64]	; (800a3b8 <_strtod_l+0x5a8>)
 800a376:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a37a:	ed91 7b00 	vldr	d7, [r1]
 800a37e:	ec4b ab16 	vmov	d6, sl, fp
 800a382:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a386:	ec5b ab17 	vmov	sl, fp, d7
 800a38a:	1112      	asrs	r2, r2, #4
 800a38c:	d0db      	beq.n	800a346 <_strtod_l+0x536>
 800a38e:	2a1f      	cmp	r2, #31
 800a390:	dd1e      	ble.n	800a3d0 <_strtod_l+0x5c0>
 800a392:	2500      	movs	r5, #0
 800a394:	46a8      	mov	r8, r5
 800a396:	9506      	str	r5, [sp, #24]
 800a398:	46a9      	mov	r9, r5
 800a39a:	2322      	movs	r3, #34	; 0x22
 800a39c:	f04f 0a00 	mov.w	sl, #0
 800a3a0:	f04f 0b00 	mov.w	fp, #0
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	e768      	b.n	800a27a <_strtod_l+0x46a>
 800a3a8:	08012711 	.word	0x08012711
 800a3ac:	0801279b 	.word	0x0801279b
 800a3b0:	08012719 	.word	0x08012719
 800a3b4:	0801275c 	.word	0x0801275c
 800a3b8:	080127d8 	.word	0x080127d8
 800a3bc:	080127b0 	.word	0x080127b0
 800a3c0:	7ca00000 	.word	0x7ca00000
 800a3c4:	7ff00000 	.word	0x7ff00000
 800a3c8:	fff80000 	.word	0xfff80000
 800a3cc:	7fefffff 	.word	0x7fefffff
 800a3d0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a3d4:	f012 0710 	ands.w	r7, r2, #16
 800a3d8:	49ab      	ldr	r1, [pc, #684]	; (800a688 <_strtod_l+0x878>)
 800a3da:	bf18      	it	ne
 800a3dc:	276a      	movne	r7, #106	; 0x6a
 800a3de:	2000      	movs	r0, #0
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	f300 8113 	bgt.w	800a60c <_strtod_l+0x7fc>
 800a3e6:	b108      	cbz	r0, 800a3ec <_strtod_l+0x5dc>
 800a3e8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800a3ec:	b1bf      	cbz	r7, 800a41e <_strtod_l+0x60e>
 800a3ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a3f2:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800a3f6:	2a00      	cmp	r2, #0
 800a3f8:	4659      	mov	r1, fp
 800a3fa:	dd10      	ble.n	800a41e <_strtod_l+0x60e>
 800a3fc:	2a1f      	cmp	r2, #31
 800a3fe:	f340 8113 	ble.w	800a628 <_strtod_l+0x818>
 800a402:	2a34      	cmp	r2, #52	; 0x34
 800a404:	bfde      	ittt	le
 800a406:	3a20      	suble	r2, #32
 800a408:	f04f 30ff 	movle.w	r0, #4294967295
 800a40c:	fa00 f202 	lslle.w	r2, r0, r2
 800a410:	f04f 0a00 	mov.w	sl, #0
 800a414:	bfcc      	ite	gt
 800a416:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a41a:	ea02 0b01 	andle.w	fp, r2, r1
 800a41e:	ec4b ab17 	vmov	d7, sl, fp
 800a422:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42a:	d0b2      	beq.n	800a392 <_strtod_l+0x582>
 800a42c:	9a08      	ldr	r2, [sp, #32]
 800a42e:	9200      	str	r2, [sp, #0]
 800a430:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a432:	462a      	mov	r2, r5
 800a434:	4620      	mov	r0, r4
 800a436:	f001 fcff 	bl	800be38 <__s2b>
 800a43a:	9006      	str	r0, [sp, #24]
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f43f af12 	beq.w	800a266 <_strtod_l+0x456>
 800a442:	9a04      	ldr	r2, [sp, #16]
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	2a00      	cmp	r2, #0
 800a448:	f1c3 0300 	rsb	r3, r3, #0
 800a44c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800a670 <_strtod_l+0x860>
 800a450:	bfa8      	it	ge
 800a452:	2300      	movge	r3, #0
 800a454:	ed9f ab88 	vldr	d10, [pc, #544]	; 800a678 <_strtod_l+0x868>
 800a458:	ed9f bb89 	vldr	d11, [pc, #548]	; 800a680 <_strtod_l+0x870>
 800a45c:	930e      	str	r3, [sp, #56]	; 0x38
 800a45e:	2500      	movs	r5, #0
 800a460:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a464:	9310      	str	r3, [sp, #64]	; 0x40
 800a466:	46a8      	mov	r8, r5
 800a468:	9b06      	ldr	r3, [sp, #24]
 800a46a:	4620      	mov	r0, r4
 800a46c:	6859      	ldr	r1, [r3, #4]
 800a46e:	f001 fc5d 	bl	800bd2c <_Balloc>
 800a472:	4681      	mov	r9, r0
 800a474:	2800      	cmp	r0, #0
 800a476:	f43f aefa 	beq.w	800a26e <_strtod_l+0x45e>
 800a47a:	9b06      	ldr	r3, [sp, #24]
 800a47c:	691a      	ldr	r2, [r3, #16]
 800a47e:	3202      	adds	r2, #2
 800a480:	f103 010c 	add.w	r1, r3, #12
 800a484:	0092      	lsls	r2, r2, #2
 800a486:	300c      	adds	r0, #12
 800a488:	f7fe fda2 	bl	8008fd0 <memcpy>
 800a48c:	aa1a      	add	r2, sp, #104	; 0x68
 800a48e:	a919      	add	r1, sp, #100	; 0x64
 800a490:	ec4b ab10 	vmov	d0, sl, fp
 800a494:	4620      	mov	r0, r4
 800a496:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a49a:	f001 ff89 	bl	800c3b0 <__d2b>
 800a49e:	9018      	str	r0, [sp, #96]	; 0x60
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	f43f aee4 	beq.w	800a26e <_strtod_l+0x45e>
 800a4a6:	2101      	movs	r1, #1
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f001 fd51 	bl	800bf50 <__i2b>
 800a4ae:	4680      	mov	r8, r0
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f43f aedc 	beq.w	800a26e <_strtod_l+0x45e>
 800a4b6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a4b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a4ba:	2e00      	cmp	r6, #0
 800a4bc:	bfb1      	iteee	lt
 800a4be:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800a4c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a4c2:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800a4c4:	18f3      	addge	r3, r6, r3
 800a4c6:	bfba      	itte	lt
 800a4c8:	1b98      	sublt	r0, r3, r6
 800a4ca:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a4cc:	9308      	strge	r3, [sp, #32]
 800a4ce:	eba6 0607 	sub.w	r6, r6, r7
 800a4d2:	bfb8      	it	lt
 800a4d4:	9308      	strlt	r3, [sp, #32]
 800a4d6:	4416      	add	r6, r2
 800a4d8:	4b6c      	ldr	r3, [pc, #432]	; (800a68c <_strtod_l+0x87c>)
 800a4da:	3e01      	subs	r6, #1
 800a4dc:	429e      	cmp	r6, r3
 800a4de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a4e2:	f280 80b4 	bge.w	800a64e <_strtod_l+0x83e>
 800a4e6:	1b9b      	subs	r3, r3, r6
 800a4e8:	2b1f      	cmp	r3, #31
 800a4ea:	eba2 0203 	sub.w	r2, r2, r3
 800a4ee:	f04f 0101 	mov.w	r1, #1
 800a4f2:	f300 80a0 	bgt.w	800a636 <_strtod_l+0x826>
 800a4f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4fa:	9311      	str	r3, [sp, #68]	; 0x44
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a500:	9b08      	ldr	r3, [sp, #32]
 800a502:	4413      	add	r3, r2
 800a504:	4402      	add	r2, r0
 800a506:	18be      	adds	r6, r7, r2
 800a508:	9a08      	ldr	r2, [sp, #32]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	bfa8      	it	ge
 800a50e:	461a      	movge	r2, r3
 800a510:	42b2      	cmp	r2, r6
 800a512:	bfa8      	it	ge
 800a514:	4632      	movge	r2, r6
 800a516:	2a00      	cmp	r2, #0
 800a518:	dd04      	ble.n	800a524 <_strtod_l+0x714>
 800a51a:	9908      	ldr	r1, [sp, #32]
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	1ab6      	subs	r6, r6, r2
 800a520:	1a8a      	subs	r2, r1, r2
 800a522:	9208      	str	r2, [sp, #32]
 800a524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a526:	b1c2      	cbz	r2, 800a55a <_strtod_l+0x74a>
 800a528:	4641      	mov	r1, r8
 800a52a:	4620      	mov	r0, r4
 800a52c:	9315      	str	r3, [sp, #84]	; 0x54
 800a52e:	f001 fdaf 	bl	800c090 <__pow5mult>
 800a532:	4680      	mov	r8, r0
 800a534:	2800      	cmp	r0, #0
 800a536:	f43f ae9a 	beq.w	800a26e <_strtod_l+0x45e>
 800a53a:	4601      	mov	r1, r0
 800a53c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a53e:	4620      	mov	r0, r4
 800a540:	f001 fd0f 	bl	800bf62 <__multiply>
 800a544:	900c      	str	r0, [sp, #48]	; 0x30
 800a546:	2800      	cmp	r0, #0
 800a548:	f43f ae91 	beq.w	800a26e <_strtod_l+0x45e>
 800a54c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a54e:	4620      	mov	r0, r4
 800a550:	f001 fc20 	bl	800bd94 <_Bfree>
 800a554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a558:	9218      	str	r2, [sp, #96]	; 0x60
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	dc7c      	bgt.n	800a658 <_strtod_l+0x848>
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	dd08      	ble.n	800a576 <_strtod_l+0x766>
 800a564:	4649      	mov	r1, r9
 800a566:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a568:	4620      	mov	r0, r4
 800a56a:	f001 fd91 	bl	800c090 <__pow5mult>
 800a56e:	4681      	mov	r9, r0
 800a570:	2800      	cmp	r0, #0
 800a572:	f43f ae7c 	beq.w	800a26e <_strtod_l+0x45e>
 800a576:	2e00      	cmp	r6, #0
 800a578:	dd08      	ble.n	800a58c <_strtod_l+0x77c>
 800a57a:	4649      	mov	r1, r9
 800a57c:	4632      	mov	r2, r6
 800a57e:	4620      	mov	r0, r4
 800a580:	f001 fdd4 	bl	800c12c <__lshift>
 800a584:	4681      	mov	r9, r0
 800a586:	2800      	cmp	r0, #0
 800a588:	f43f ae71 	beq.w	800a26e <_strtod_l+0x45e>
 800a58c:	9b08      	ldr	r3, [sp, #32]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	dd08      	ble.n	800a5a4 <_strtod_l+0x794>
 800a592:	4641      	mov	r1, r8
 800a594:	461a      	mov	r2, r3
 800a596:	4620      	mov	r0, r4
 800a598:	f001 fdc8 	bl	800c12c <__lshift>
 800a59c:	4680      	mov	r8, r0
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f43f ae65 	beq.w	800a26e <_strtod_l+0x45e>
 800a5a4:	464a      	mov	r2, r9
 800a5a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f001 fe2d 	bl	800c208 <__mdiff>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	f43f ae5c 	beq.w	800a26e <_strtod_l+0x45e>
 800a5b6:	68c3      	ldr	r3, [r0, #12]
 800a5b8:	930c      	str	r3, [sp, #48]	; 0x30
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60c3      	str	r3, [r0, #12]
 800a5be:	4641      	mov	r1, r8
 800a5c0:	f001 fe08 	bl	800c1d4 <__mcmp>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	da63      	bge.n	800a690 <_strtod_l+0x880>
 800a5c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5ca:	b9e3      	cbnz	r3, 800a606 <_strtod_l+0x7f6>
 800a5cc:	f1ba 0f00 	cmp.w	sl, #0
 800a5d0:	d119      	bne.n	800a606 <_strtod_l+0x7f6>
 800a5d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5d6:	b9b3      	cbnz	r3, 800a606 <_strtod_l+0x7f6>
 800a5d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a5dc:	0d1b      	lsrs	r3, r3, #20
 800a5de:	051b      	lsls	r3, r3, #20
 800a5e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a5e4:	d90f      	bls.n	800a606 <_strtod_l+0x7f6>
 800a5e6:	696b      	ldr	r3, [r5, #20]
 800a5e8:	b913      	cbnz	r3, 800a5f0 <_strtod_l+0x7e0>
 800a5ea:	692b      	ldr	r3, [r5, #16]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	dd0a      	ble.n	800a606 <_strtod_l+0x7f6>
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f001 fd99 	bl	800c12c <__lshift>
 800a5fa:	4641      	mov	r1, r8
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	f001 fde9 	bl	800c1d4 <__mcmp>
 800a602:	2800      	cmp	r0, #0
 800a604:	dc75      	bgt.n	800a6f2 <_strtod_l+0x8e2>
 800a606:	2f00      	cmp	r7, #0
 800a608:	d17f      	bne.n	800a70a <_strtod_l+0x8fa>
 800a60a:	e63a      	b.n	800a282 <_strtod_l+0x472>
 800a60c:	07d6      	lsls	r6, r2, #31
 800a60e:	d508      	bpl.n	800a622 <_strtod_l+0x812>
 800a610:	ed9d 6b06 	vldr	d6, [sp, #24]
 800a614:	ed91 7b00 	vldr	d7, [r1]
 800a618:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a61c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a620:	2001      	movs	r0, #1
 800a622:	1052      	asrs	r2, r2, #1
 800a624:	3108      	adds	r1, #8
 800a626:	e6db      	b.n	800a3e0 <_strtod_l+0x5d0>
 800a628:	f04f 31ff 	mov.w	r1, #4294967295
 800a62c:	fa01 f202 	lsl.w	r2, r1, r2
 800a630:	ea02 0a0a 	and.w	sl, r2, sl
 800a634:	e6f3      	b.n	800a41e <_strtod_l+0x60e>
 800a636:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a63a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a63e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a642:	36e2      	adds	r6, #226	; 0xe2
 800a644:	fa01 f306 	lsl.w	r3, r1, r6
 800a648:	930f      	str	r3, [sp, #60]	; 0x3c
 800a64a:	9111      	str	r1, [sp, #68]	; 0x44
 800a64c:	e758      	b.n	800a500 <_strtod_l+0x6f0>
 800a64e:	2300      	movs	r3, #0
 800a650:	930f      	str	r3, [sp, #60]	; 0x3c
 800a652:	2301      	movs	r3, #1
 800a654:	9311      	str	r3, [sp, #68]	; 0x44
 800a656:	e753      	b.n	800a500 <_strtod_l+0x6f0>
 800a658:	461a      	mov	r2, r3
 800a65a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a65c:	4620      	mov	r0, r4
 800a65e:	f001 fd65 	bl	800c12c <__lshift>
 800a662:	9018      	str	r0, [sp, #96]	; 0x60
 800a664:	2800      	cmp	r0, #0
 800a666:	f47f af7a 	bne.w	800a55e <_strtod_l+0x74e>
 800a66a:	e600      	b.n	800a26e <_strtod_l+0x45e>
 800a66c:	f3af 8000 	nop.w
 800a670:	94a03595 	.word	0x94a03595
 800a674:	3fdfffff 	.word	0x3fdfffff
 800a678:	35afe535 	.word	0x35afe535
 800a67c:	3fe00000 	.word	0x3fe00000
 800a680:	94a03595 	.word	0x94a03595
 800a684:	3fcfffff 	.word	0x3fcfffff
 800a688:	08012770 	.word	0x08012770
 800a68c:	fffffc02 	.word	0xfffffc02
 800a690:	f8cd b020 	str.w	fp, [sp, #32]
 800a694:	f040 8085 	bne.w	800a7a2 <_strtod_l+0x992>
 800a698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a69a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a69e:	b322      	cbz	r2, 800a6ea <_strtod_l+0x8da>
 800a6a0:	4ab7      	ldr	r2, [pc, #732]	; (800a980 <_strtod_l+0xb70>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d154      	bne.n	800a750 <_strtod_l+0x940>
 800a6a6:	4651      	mov	r1, sl
 800a6a8:	b1e7      	cbz	r7, 800a6e4 <_strtod_l+0x8d4>
 800a6aa:	4bb6      	ldr	r3, [pc, #728]	; (800a984 <_strtod_l+0xb74>)
 800a6ac:	465a      	mov	r2, fp
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b8:	d803      	bhi.n	800a6c2 <_strtod_l+0x8b2>
 800a6ba:	0d1b      	lsrs	r3, r3, #20
 800a6bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a6c0:	409a      	lsls	r2, r3
 800a6c2:	4291      	cmp	r1, r2
 800a6c4:	d144      	bne.n	800a750 <_strtod_l+0x940>
 800a6c6:	4bb0      	ldr	r3, [pc, #704]	; (800a988 <_strtod_l+0xb78>)
 800a6c8:	9a08      	ldr	r2, [sp, #32]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d102      	bne.n	800a6d4 <_strtod_l+0x8c4>
 800a6ce:	3101      	adds	r1, #1
 800a6d0:	f43f adcd 	beq.w	800a26e <_strtod_l+0x45e>
 800a6d4:	4bab      	ldr	r3, [pc, #684]	; (800a984 <_strtod_l+0xb74>)
 800a6d6:	9a08      	ldr	r2, [sp, #32]
 800a6d8:	401a      	ands	r2, r3
 800a6da:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800a6de:	f04f 0a00 	mov.w	sl, #0
 800a6e2:	e790      	b.n	800a606 <_strtod_l+0x7f6>
 800a6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e8:	e7eb      	b.n	800a6c2 <_strtod_l+0x8b2>
 800a6ea:	bb8b      	cbnz	r3, 800a750 <_strtod_l+0x940>
 800a6ec:	f1ba 0f00 	cmp.w	sl, #0
 800a6f0:	d12e      	bne.n	800a750 <_strtod_l+0x940>
 800a6f2:	465b      	mov	r3, fp
 800a6f4:	4aa3      	ldr	r2, [pc, #652]	; (800a984 <_strtod_l+0xb74>)
 800a6f6:	b30f      	cbz	r7, 800a73c <_strtod_l+0x92c>
 800a6f8:	ea02 010b 	and.w	r1, r2, fp
 800a6fc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a700:	dc1c      	bgt.n	800a73c <_strtod_l+0x92c>
 800a702:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a706:	f77f ae48 	ble.w	800a39a <_strtod_l+0x58a>
 800a70a:	4aa0      	ldr	r2, [pc, #640]	; (800a98c <_strtod_l+0xb7c>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800a712:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800a716:	ec4b ab17 	vmov	d7, sl, fp
 800a71a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a71e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a722:	9b05      	ldr	r3, [sp, #20]
 800a724:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f47f adaa 	bne.w	800a282 <_strtod_l+0x472>
 800a72e:	9b04      	ldr	r3, [sp, #16]
 800a730:	2b00      	cmp	r3, #0
 800a732:	f47f ada6 	bne.w	800a282 <_strtod_l+0x472>
 800a736:	2322      	movs	r3, #34	; 0x22
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	e5a2      	b.n	800a282 <_strtod_l+0x472>
 800a73c:	4013      	ands	r3, r2
 800a73e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a742:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a746:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a74a:	f04f 3aff 	mov.w	sl, #4294967295
 800a74e:	e75a      	b.n	800a606 <_strtod_l+0x7f6>
 800a750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a752:	b18b      	cbz	r3, 800a778 <_strtod_l+0x968>
 800a754:	9a08      	ldr	r2, [sp, #32]
 800a756:	4213      	tst	r3, r2
 800a758:	f43f af55 	beq.w	800a606 <_strtod_l+0x7f6>
 800a75c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a75e:	463a      	mov	r2, r7
 800a760:	4650      	mov	r0, sl
 800a762:	4659      	mov	r1, fp
 800a764:	b163      	cbz	r3, 800a780 <_strtod_l+0x970>
 800a766:	f7ff fb39 	bl	8009ddc <sulp>
 800a76a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800a76e:	ee37 7b00 	vadd.f64	d7, d7, d0
 800a772:	ec5b ab17 	vmov	sl, fp, d7
 800a776:	e746      	b.n	800a606 <_strtod_l+0x7f6>
 800a778:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a77a:	ea13 0f0a 	tst.w	r3, sl
 800a77e:	e7eb      	b.n	800a758 <_strtod_l+0x948>
 800a780:	f7ff fb2c 	bl	8009ddc <sulp>
 800a784:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800a788:	ee37 7b40 	vsub.f64	d7, d7, d0
 800a78c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a790:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a798:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a79c:	f43f adfd 	beq.w	800a39a <_strtod_l+0x58a>
 800a7a0:	e731      	b.n	800a606 <_strtod_l+0x7f6>
 800a7a2:	4641      	mov	r1, r8
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f001 fe52 	bl	800c44e <__ratio>
 800a7aa:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a7ae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b6:	d869      	bhi.n	800a88c <_strtod_l+0xa7c>
 800a7b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d045      	beq.n	800a84a <_strtod_l+0xa3a>
 800a7be:	4b74      	ldr	r3, [pc, #464]	; (800a990 <_strtod_l+0xb80>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800a7c6:	9808      	ldr	r0, [sp, #32]
 800a7c8:	496e      	ldr	r1, [pc, #440]	; (800a984 <_strtod_l+0xb74>)
 800a7ca:	ea00 0601 	and.w	r6, r0, r1
 800a7ce:	4871      	ldr	r0, [pc, #452]	; (800a994 <_strtod_l+0xb84>)
 800a7d0:	4286      	cmp	r6, r0
 800a7d2:	f040 8089 	bne.w	800a8e8 <_strtod_l+0xad8>
 800a7d6:	910f      	str	r1, [sp, #60]	; 0x3c
 800a7d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7dc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800a7e0:	9908      	ldr	r1, [sp, #32]
 800a7e2:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800a7e6:	ec4b ab10 	vmov	d0, sl, fp
 800a7ea:	ec43 2b1c 	vmov	d12, r2, r3
 800a7ee:	f001 fd69 	bl	800c2c4 <__ulp>
 800a7f2:	ec4b ab1d 	vmov	d13, sl, fp
 800a7f6:	eeac db00 	vfma.f64	d13, d12, d0
 800a7fa:	ed8d db08 	vstr	d13, [sp, #32]
 800a7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a800:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a802:	4a65      	ldr	r2, [pc, #404]	; (800a998 <_strtod_l+0xb88>)
 800a804:	4019      	ands	r1, r3
 800a806:	4291      	cmp	r1, r2
 800a808:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800a80c:	d948      	bls.n	800a8a0 <_strtod_l+0xa90>
 800a80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a810:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a814:	4293      	cmp	r3, r2
 800a816:	d103      	bne.n	800a820 <_strtod_l+0xa10>
 800a818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81a:	3301      	adds	r3, #1
 800a81c:	f43f ad27 	beq.w	800a26e <_strtod_l+0x45e>
 800a820:	f8df b164 	ldr.w	fp, [pc, #356]	; 800a988 <_strtod_l+0xb78>
 800a824:	f04f 3aff 	mov.w	sl, #4294967295
 800a828:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a82a:	4620      	mov	r0, r4
 800a82c:	f001 fab2 	bl	800bd94 <_Bfree>
 800a830:	4649      	mov	r1, r9
 800a832:	4620      	mov	r0, r4
 800a834:	f001 faae 	bl	800bd94 <_Bfree>
 800a838:	4641      	mov	r1, r8
 800a83a:	4620      	mov	r0, r4
 800a83c:	f001 faaa 	bl	800bd94 <_Bfree>
 800a840:	4629      	mov	r1, r5
 800a842:	4620      	mov	r0, r4
 800a844:	f001 faa6 	bl	800bd94 <_Bfree>
 800a848:	e60e      	b.n	800a468 <_strtod_l+0x658>
 800a84a:	f1ba 0f00 	cmp.w	sl, #0
 800a84e:	d113      	bne.n	800a878 <_strtod_l+0xa68>
 800a850:	9b08      	ldr	r3, [sp, #32]
 800a852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a856:	b9b3      	cbnz	r3, 800a886 <_strtod_l+0xa76>
 800a858:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a85c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a864:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a868:	d401      	bmi.n	800a86e <_strtod_l+0xa5e>
 800a86a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a86e:	eeb1 7b48 	vneg.f64	d7, d8
 800a872:	ec53 2b17 	vmov	r2, r3, d7
 800a876:	e7a6      	b.n	800a7c6 <_strtod_l+0x9b6>
 800a878:	f1ba 0f01 	cmp.w	sl, #1
 800a87c:	d103      	bne.n	800a886 <_strtod_l+0xa76>
 800a87e:	9b08      	ldr	r3, [sp, #32]
 800a880:	2b00      	cmp	r3, #0
 800a882:	f43f ad8a 	beq.w	800a39a <_strtod_l+0x58a>
 800a886:	2200      	movs	r2, #0
 800a888:	4b44      	ldr	r3, [pc, #272]	; (800a99c <_strtod_l+0xb8c>)
 800a88a:	e79a      	b.n	800a7c2 <_strtod_l+0x9b2>
 800a88c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a88e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a892:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a896:	2b00      	cmp	r3, #0
 800a898:	d0e9      	beq.n	800a86e <_strtod_l+0xa5e>
 800a89a:	ec53 2b18 	vmov	r2, r3, d8
 800a89e:	e792      	b.n	800a7c6 <_strtod_l+0x9b6>
 800a8a0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a8a4:	2f00      	cmp	r7, #0
 800a8a6:	d1bf      	bne.n	800a828 <_strtod_l+0xa18>
 800a8a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a8ac:	0d1b      	lsrs	r3, r3, #20
 800a8ae:	051b      	lsls	r3, r3, #20
 800a8b0:	429e      	cmp	r6, r3
 800a8b2:	d1b9      	bne.n	800a828 <_strtod_l+0xa18>
 800a8b4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800a8b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ba:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800a8be:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a8c2:	b92b      	cbnz	r3, 800a8d0 <_strtod_l+0xac0>
 800a8c4:	f1ba 0f00 	cmp.w	sl, #0
 800a8c8:	d102      	bne.n	800a8d0 <_strtod_l+0xac0>
 800a8ca:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800a8ce:	b3d2      	cbz	r2, 800a946 <_strtod_l+0xb36>
 800a8d0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d8:	f53f acd3 	bmi.w	800a282 <_strtod_l+0x472>
 800a8dc:	eeb4 8bca 	vcmpe.f64	d8, d10
 800a8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e4:	dda0      	ble.n	800a828 <_strtod_l+0xa18>
 800a8e6:	e4cc      	b.n	800a282 <_strtod_l+0x472>
 800a8e8:	b1ef      	cbz	r7, 800a926 <_strtod_l+0xb16>
 800a8ea:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800a8ee:	d81a      	bhi.n	800a926 <_strtod_l+0xb16>
 800a8f0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a978 <_strtod_l+0xb68>
 800a8f4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fc:	d810      	bhi.n	800a920 <_strtod_l+0xb10>
 800a8fe:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800a902:	ee17 3a90 	vmov	r3, s15
 800a906:	2b00      	cmp	r3, #0
 800a908:	bf08      	it	eq
 800a90a:	2301      	moveq	r3, #1
 800a90c:	ee07 3a90 	vmov	s15, r3
 800a910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a912:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800a916:	b99b      	cbnz	r3, 800a940 <_strtod_l+0xb30>
 800a918:	eeb1 7b48 	vneg.f64	d7, d8
 800a91c:	ec53 2b17 	vmov	r2, r3, d7
 800a920:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800a924:	1b8b      	subs	r3, r1, r6
 800a926:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a92a:	ec43 2b1c 	vmov	d12, r2, r3
 800a92e:	f001 fcc9 	bl	800c2c4 <__ulp>
 800a932:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800a936:	eeac 7b00 	vfma.f64	d7, d12, d0
 800a93a:	ec5b ab17 	vmov	sl, fp, d7
 800a93e:	e7b1      	b.n	800a8a4 <_strtod_l+0xa94>
 800a940:	ec53 2b18 	vmov	r2, r3, d8
 800a944:	e7ec      	b.n	800a920 <_strtod_l+0xb10>
 800a946:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94e:	f57f af6b 	bpl.w	800a828 <_strtod_l+0xa18>
 800a952:	e496      	b.n	800a282 <_strtod_l+0x472>
 800a954:	2300      	movs	r3, #0
 800a956:	930d      	str	r3, [sp, #52]	; 0x34
 800a958:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a95a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	f7ff ba9d 	b.w	8009e9c <_strtod_l+0x8c>
 800a962:	2a65      	cmp	r2, #101	; 0x65
 800a964:	f04f 0100 	mov.w	r1, #0
 800a968:	f43f ab97 	beq.w	800a09a <_strtod_l+0x28a>
 800a96c:	2701      	movs	r7, #1
 800a96e:	460b      	mov	r3, r1
 800a970:	9704      	str	r7, [sp, #16]
 800a972:	f7ff bb0a 	b.w	8009f8a <_strtod_l+0x17a>
 800a976:	bf00      	nop
 800a978:	ffc00000 	.word	0xffc00000
 800a97c:	41dfffff 	.word	0x41dfffff
 800a980:	000fffff 	.word	0x000fffff
 800a984:	7ff00000 	.word	0x7ff00000
 800a988:	7fefffff 	.word	0x7fefffff
 800a98c:	39500000 	.word	0x39500000
 800a990:	3ff00000 	.word	0x3ff00000
 800a994:	7fe00000 	.word	0x7fe00000
 800a998:	7c9fffff 	.word	0x7c9fffff
 800a99c:	bff00000 	.word	0xbff00000

0800a9a0 <_strtod_r>:
 800a9a0:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <_strtod_r+0x18>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	b410      	push	{r4}
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	4c04      	ldr	r4, [pc, #16]	; (800a9bc <_strtod_r+0x1c>)
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	bf08      	it	eq
 800a9ae:	4623      	moveq	r3, r4
 800a9b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9b4:	f7ff ba2c 	b.w	8009e10 <_strtod_l>
 800a9b8:	24000010 	.word	0x24000010
 800a9bc:	24000074 	.word	0x24000074

0800a9c0 <_strtol_l.isra.0>:
 800a9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c4:	4680      	mov	r8, r0
 800a9c6:	4689      	mov	r9, r1
 800a9c8:	4692      	mov	sl, r2
 800a9ca:	461e      	mov	r6, r3
 800a9cc:	460f      	mov	r7, r1
 800a9ce:	463d      	mov	r5, r7
 800a9d0:	9808      	ldr	r0, [sp, #32]
 800a9d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9d6:	f001 f981 	bl	800bcdc <__locale_ctype_ptr_l>
 800a9da:	4420      	add	r0, r4
 800a9dc:	7843      	ldrb	r3, [r0, #1]
 800a9de:	f013 0308 	ands.w	r3, r3, #8
 800a9e2:	d132      	bne.n	800aa4a <_strtol_l.isra.0+0x8a>
 800a9e4:	2c2d      	cmp	r4, #45	; 0x2d
 800a9e6:	d132      	bne.n	800aa4e <_strtol_l.isra.0+0x8e>
 800a9e8:	787c      	ldrb	r4, [r7, #1]
 800a9ea:	1cbd      	adds	r5, r7, #2
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	2e00      	cmp	r6, #0
 800a9f0:	d05d      	beq.n	800aaae <_strtol_l.isra.0+0xee>
 800a9f2:	2e10      	cmp	r6, #16
 800a9f4:	d109      	bne.n	800aa0a <_strtol_l.isra.0+0x4a>
 800a9f6:	2c30      	cmp	r4, #48	; 0x30
 800a9f8:	d107      	bne.n	800aa0a <_strtol_l.isra.0+0x4a>
 800a9fa:	782b      	ldrb	r3, [r5, #0]
 800a9fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa00:	2b58      	cmp	r3, #88	; 0x58
 800aa02:	d14f      	bne.n	800aaa4 <_strtol_l.isra.0+0xe4>
 800aa04:	786c      	ldrb	r4, [r5, #1]
 800aa06:	2610      	movs	r6, #16
 800aa08:	3502      	adds	r5, #2
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	bf14      	ite	ne
 800aa0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aa12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800aa16:	2700      	movs	r7, #0
 800aa18:	fbb1 fcf6 	udiv	ip, r1, r6
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800aa22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800aa26:	2b09      	cmp	r3, #9
 800aa28:	d817      	bhi.n	800aa5a <_strtol_l.isra.0+0x9a>
 800aa2a:	461c      	mov	r4, r3
 800aa2c:	42a6      	cmp	r6, r4
 800aa2e:	dd23      	ble.n	800aa78 <_strtol_l.isra.0+0xb8>
 800aa30:	1c7b      	adds	r3, r7, #1
 800aa32:	d007      	beq.n	800aa44 <_strtol_l.isra.0+0x84>
 800aa34:	4584      	cmp	ip, r0
 800aa36:	d31c      	bcc.n	800aa72 <_strtol_l.isra.0+0xb2>
 800aa38:	d101      	bne.n	800aa3e <_strtol_l.isra.0+0x7e>
 800aa3a:	45a6      	cmp	lr, r4
 800aa3c:	db19      	blt.n	800aa72 <_strtol_l.isra.0+0xb2>
 800aa3e:	fb00 4006 	mla	r0, r0, r6, r4
 800aa42:	2701      	movs	r7, #1
 800aa44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa48:	e7eb      	b.n	800aa22 <_strtol_l.isra.0+0x62>
 800aa4a:	462f      	mov	r7, r5
 800aa4c:	e7bf      	b.n	800a9ce <_strtol_l.isra.0+0xe>
 800aa4e:	2c2b      	cmp	r4, #43	; 0x2b
 800aa50:	bf04      	itt	eq
 800aa52:	1cbd      	addeq	r5, r7, #2
 800aa54:	787c      	ldrbeq	r4, [r7, #1]
 800aa56:	461a      	mov	r2, r3
 800aa58:	e7c9      	b.n	800a9ee <_strtol_l.isra.0+0x2e>
 800aa5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aa5e:	2b19      	cmp	r3, #25
 800aa60:	d801      	bhi.n	800aa66 <_strtol_l.isra.0+0xa6>
 800aa62:	3c37      	subs	r4, #55	; 0x37
 800aa64:	e7e2      	b.n	800aa2c <_strtol_l.isra.0+0x6c>
 800aa66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aa6a:	2b19      	cmp	r3, #25
 800aa6c:	d804      	bhi.n	800aa78 <_strtol_l.isra.0+0xb8>
 800aa6e:	3c57      	subs	r4, #87	; 0x57
 800aa70:	e7dc      	b.n	800aa2c <_strtol_l.isra.0+0x6c>
 800aa72:	f04f 37ff 	mov.w	r7, #4294967295
 800aa76:	e7e5      	b.n	800aa44 <_strtol_l.isra.0+0x84>
 800aa78:	1c7b      	adds	r3, r7, #1
 800aa7a:	d108      	bne.n	800aa8e <_strtol_l.isra.0+0xce>
 800aa7c:	2322      	movs	r3, #34	; 0x22
 800aa7e:	f8c8 3000 	str.w	r3, [r8]
 800aa82:	4608      	mov	r0, r1
 800aa84:	f1ba 0f00 	cmp.w	sl, #0
 800aa88:	d107      	bne.n	800aa9a <_strtol_l.isra.0+0xda>
 800aa8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8e:	b102      	cbz	r2, 800aa92 <_strtol_l.isra.0+0xd2>
 800aa90:	4240      	negs	r0, r0
 800aa92:	f1ba 0f00 	cmp.w	sl, #0
 800aa96:	d0f8      	beq.n	800aa8a <_strtol_l.isra.0+0xca>
 800aa98:	b10f      	cbz	r7, 800aa9e <_strtol_l.isra.0+0xde>
 800aa9a:	f105 39ff 	add.w	r9, r5, #4294967295
 800aa9e:	f8ca 9000 	str.w	r9, [sl]
 800aaa2:	e7f2      	b.n	800aa8a <_strtol_l.isra.0+0xca>
 800aaa4:	2430      	movs	r4, #48	; 0x30
 800aaa6:	2e00      	cmp	r6, #0
 800aaa8:	d1af      	bne.n	800aa0a <_strtol_l.isra.0+0x4a>
 800aaaa:	2608      	movs	r6, #8
 800aaac:	e7ad      	b.n	800aa0a <_strtol_l.isra.0+0x4a>
 800aaae:	2c30      	cmp	r4, #48	; 0x30
 800aab0:	d0a3      	beq.n	800a9fa <_strtol_l.isra.0+0x3a>
 800aab2:	260a      	movs	r6, #10
 800aab4:	e7a9      	b.n	800aa0a <_strtol_l.isra.0+0x4a>
	...

0800aab8 <_strtol_r>:
 800aab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaba:	4c06      	ldr	r4, [pc, #24]	; (800aad4 <_strtol_r+0x1c>)
 800aabc:	4d06      	ldr	r5, [pc, #24]	; (800aad8 <_strtol_r+0x20>)
 800aabe:	6824      	ldr	r4, [r4, #0]
 800aac0:	6a24      	ldr	r4, [r4, #32]
 800aac2:	2c00      	cmp	r4, #0
 800aac4:	bf08      	it	eq
 800aac6:	462c      	moveq	r4, r5
 800aac8:	9400      	str	r4, [sp, #0]
 800aaca:	f7ff ff79 	bl	800a9c0 <_strtol_l.isra.0>
 800aace:	b003      	add	sp, #12
 800aad0:	bd30      	pop	{r4, r5, pc}
 800aad2:	bf00      	nop
 800aad4:	24000010 	.word	0x24000010
 800aad8:	24000074 	.word	0x24000074

0800aadc <quorem>:
 800aadc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae0:	6903      	ldr	r3, [r0, #16]
 800aae2:	690c      	ldr	r4, [r1, #16]
 800aae4:	42a3      	cmp	r3, r4
 800aae6:	4680      	mov	r8, r0
 800aae8:	f2c0 8082 	blt.w	800abf0 <quorem+0x114>
 800aaec:	3c01      	subs	r4, #1
 800aaee:	f101 0714 	add.w	r7, r1, #20
 800aaf2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800aaf6:	f100 0614 	add.w	r6, r0, #20
 800aafa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800aafe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ab02:	eb06 030c 	add.w	r3, r6, ip
 800ab06:	3501      	adds	r5, #1
 800ab08:	eb07 090c 	add.w	r9, r7, ip
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	fbb0 f5f5 	udiv	r5, r0, r5
 800ab12:	b395      	cbz	r5, 800ab7a <quorem+0x9e>
 800ab14:	f04f 0a00 	mov.w	sl, #0
 800ab18:	4638      	mov	r0, r7
 800ab1a:	46b6      	mov	lr, r6
 800ab1c:	46d3      	mov	fp, sl
 800ab1e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab22:	b293      	uxth	r3, r2
 800ab24:	fb05 a303 	mla	r3, r5, r3, sl
 800ab28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	ebab 0303 	sub.w	r3, fp, r3
 800ab32:	0c12      	lsrs	r2, r2, #16
 800ab34:	f8de b000 	ldr.w	fp, [lr]
 800ab38:	fb05 a202 	mla	r2, r5, r2, sl
 800ab3c:	fa13 f38b 	uxtah	r3, r3, fp
 800ab40:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ab44:	fa1f fb82 	uxth.w	fp, r2
 800ab48:	f8de 2000 	ldr.w	r2, [lr]
 800ab4c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ab50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab5a:	4581      	cmp	r9, r0
 800ab5c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ab60:	f84e 3b04 	str.w	r3, [lr], #4
 800ab64:	d2db      	bcs.n	800ab1e <quorem+0x42>
 800ab66:	f856 300c 	ldr.w	r3, [r6, ip]
 800ab6a:	b933      	cbnz	r3, 800ab7a <quorem+0x9e>
 800ab6c:	9b01      	ldr	r3, [sp, #4]
 800ab6e:	3b04      	subs	r3, #4
 800ab70:	429e      	cmp	r6, r3
 800ab72:	461a      	mov	r2, r3
 800ab74:	d330      	bcc.n	800abd8 <quorem+0xfc>
 800ab76:	f8c8 4010 	str.w	r4, [r8, #16]
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	f001 fb2a 	bl	800c1d4 <__mcmp>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	db25      	blt.n	800abd0 <quorem+0xf4>
 800ab84:	3501      	adds	r5, #1
 800ab86:	4630      	mov	r0, r6
 800ab88:	f04f 0c00 	mov.w	ip, #0
 800ab8c:	f857 2b04 	ldr.w	r2, [r7], #4
 800ab90:	f8d0 e000 	ldr.w	lr, [r0]
 800ab94:	b293      	uxth	r3, r2
 800ab96:	ebac 0303 	sub.w	r3, ip, r3
 800ab9a:	0c12      	lsrs	r2, r2, #16
 800ab9c:	fa13 f38e 	uxtah	r3, r3, lr
 800aba0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abae:	45b9      	cmp	r9, r7
 800abb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800abb4:	f840 3b04 	str.w	r3, [r0], #4
 800abb8:	d2e8      	bcs.n	800ab8c <quorem+0xb0>
 800abba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800abbe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800abc2:	b92a      	cbnz	r2, 800abd0 <quorem+0xf4>
 800abc4:	3b04      	subs	r3, #4
 800abc6:	429e      	cmp	r6, r3
 800abc8:	461a      	mov	r2, r3
 800abca:	d30b      	bcc.n	800abe4 <quorem+0x108>
 800abcc:	f8c8 4010 	str.w	r4, [r8, #16]
 800abd0:	4628      	mov	r0, r5
 800abd2:	b003      	add	sp, #12
 800abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd8:	6812      	ldr	r2, [r2, #0]
 800abda:	3b04      	subs	r3, #4
 800abdc:	2a00      	cmp	r2, #0
 800abde:	d1ca      	bne.n	800ab76 <quorem+0x9a>
 800abe0:	3c01      	subs	r4, #1
 800abe2:	e7c5      	b.n	800ab70 <quorem+0x94>
 800abe4:	6812      	ldr	r2, [r2, #0]
 800abe6:	3b04      	subs	r3, #4
 800abe8:	2a00      	cmp	r2, #0
 800abea:	d1ef      	bne.n	800abcc <quorem+0xf0>
 800abec:	3c01      	subs	r4, #1
 800abee:	e7ea      	b.n	800abc6 <quorem+0xea>
 800abf0:	2000      	movs	r0, #0
 800abf2:	e7ee      	b.n	800abd2 <quorem+0xf6>
 800abf4:	0000      	movs	r0, r0
	...

0800abf8 <_dtoa_r>:
 800abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfc:	ec57 6b10 	vmov	r6, r7, d0
 800ac00:	b095      	sub	sp, #84	; 0x54
 800ac02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac04:	9108      	str	r1, [sp, #32]
 800ac06:	4604      	mov	r4, r0
 800ac08:	920a      	str	r2, [sp, #40]	; 0x28
 800ac0a:	9311      	str	r3, [sp, #68]	; 0x44
 800ac0c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800ac10:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ac14:	b93d      	cbnz	r5, 800ac26 <_dtoa_r+0x2e>
 800ac16:	2010      	movs	r0, #16
 800ac18:	f7fe f9ca 	bl	8008fb0 <malloc>
 800ac1c:	6260      	str	r0, [r4, #36]	; 0x24
 800ac1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac22:	6005      	str	r5, [r0, #0]
 800ac24:	60c5      	str	r5, [r0, #12]
 800ac26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac28:	6819      	ldr	r1, [r3, #0]
 800ac2a:	b151      	cbz	r1, 800ac42 <_dtoa_r+0x4a>
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	604a      	str	r2, [r1, #4]
 800ac30:	2301      	movs	r3, #1
 800ac32:	4093      	lsls	r3, r2
 800ac34:	608b      	str	r3, [r1, #8]
 800ac36:	4620      	mov	r0, r4
 800ac38:	f001 f8ac 	bl	800bd94 <_Bfree>
 800ac3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	1e3b      	subs	r3, r7, #0
 800ac44:	bfb9      	ittee	lt
 800ac46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ac4a:	9303      	strlt	r3, [sp, #12]
 800ac4c:	2300      	movge	r3, #0
 800ac4e:	f8c8 3000 	strge.w	r3, [r8]
 800ac52:	9d03      	ldr	r5, [sp, #12]
 800ac54:	4bac      	ldr	r3, [pc, #688]	; (800af08 <_dtoa_r+0x310>)
 800ac56:	bfbc      	itt	lt
 800ac58:	2201      	movlt	r2, #1
 800ac5a:	f8c8 2000 	strlt.w	r2, [r8]
 800ac5e:	43ab      	bics	r3, r5
 800ac60:	d11b      	bne.n	800ac9a <_dtoa_r+0xa2>
 800ac62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ac64:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	9b02      	ldr	r3, [sp, #8]
 800ac6c:	b923      	cbnz	r3, 800ac78 <_dtoa_r+0x80>
 800ac6e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ac72:	2d00      	cmp	r5, #0
 800ac74:	f000 84dd 	beq.w	800b632 <_dtoa_r+0xa3a>
 800ac78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac7a:	b953      	cbnz	r3, 800ac92 <_dtoa_r+0x9a>
 800ac7c:	4ba3      	ldr	r3, [pc, #652]	; (800af0c <_dtoa_r+0x314>)
 800ac7e:	e020      	b.n	800acc2 <_dtoa_r+0xca>
 800ac80:	4ba3      	ldr	r3, [pc, #652]	; (800af10 <_dtoa_r+0x318>)
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	3308      	adds	r3, #8
 800ac86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	9804      	ldr	r0, [sp, #16]
 800ac8c:	b015      	add	sp, #84	; 0x54
 800ac8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac92:	4b9e      	ldr	r3, [pc, #632]	; (800af0c <_dtoa_r+0x314>)
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	3303      	adds	r3, #3
 800ac98:	e7f5      	b.n	800ac86 <_dtoa_r+0x8e>
 800ac9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800acaa:	d10c      	bne.n	800acc6 <_dtoa_r+0xce>
 800acac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800acae:	2301      	movs	r3, #1
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 84b9 	beq.w	800b62c <_dtoa_r+0xa34>
 800acba:	4b96      	ldr	r3, [pc, #600]	; (800af14 <_dtoa_r+0x31c>)
 800acbc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800acbe:	6013      	str	r3, [r2, #0]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	9304      	str	r3, [sp, #16]
 800acc4:	e7e1      	b.n	800ac8a <_dtoa_r+0x92>
 800acc6:	a913      	add	r1, sp, #76	; 0x4c
 800acc8:	aa12      	add	r2, sp, #72	; 0x48
 800acca:	ed9d 0b04 	vldr	d0, [sp, #16]
 800acce:	4620      	mov	r0, r4
 800acd0:	f001 fb6e 	bl	800c3b0 <__d2b>
 800acd4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800acd8:	9001      	str	r0, [sp, #4]
 800acda:	9912      	ldr	r1, [sp, #72]	; 0x48
 800acdc:	2e00      	cmp	r6, #0
 800acde:	d046      	beq.n	800ad6e <_dtoa_r+0x176>
 800ace0:	9805      	ldr	r0, [sp, #20]
 800ace2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800ace6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acea:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800acee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800acf2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800acf6:	2700      	movs	r7, #0
 800acf8:	ee07 aa90 	vmov	s15, sl
 800acfc:	ec43 2b16 	vmov	d6, r2, r3
 800ad00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ad04:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800aef0 <_dtoa_r+0x2f8>
 800ad08:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ad0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ad10:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800aef8 <_dtoa_r+0x300>
 800ad14:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ad18:	eeb0 7b46 	vmov.f64	d7, d6
 800ad1c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800af00 <_dtoa_r+0x308>
 800ad20:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ad24:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ad28:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ad2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad30:	ee16 ba90 	vmov	fp, s13
 800ad34:	d508      	bpl.n	800ad48 <_dtoa_r+0x150>
 800ad36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ad3a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ad3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad42:	bf18      	it	ne
 800ad44:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ad48:	f1bb 0f16 	cmp.w	fp, #22
 800ad4c:	d834      	bhi.n	800adb8 <_dtoa_r+0x1c0>
 800ad4e:	4b72      	ldr	r3, [pc, #456]	; (800af18 <_dtoa_r+0x320>)
 800ad50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad54:	ed93 7b00 	vldr	d7, [r3]
 800ad58:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ad5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ad60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad64:	dd01      	ble.n	800ad6a <_dtoa_r+0x172>
 800ad66:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e025      	b.n	800adba <_dtoa_r+0x1c2>
 800ad6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad70:	eb01 0a03 	add.w	sl, r1, r3
 800ad74:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800ad78:	2b20      	cmp	r3, #32
 800ad7a:	dd17      	ble.n	800adac <_dtoa_r+0x1b4>
 800ad7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ad80:	9a02      	ldr	r2, [sp, #8]
 800ad82:	409d      	lsls	r5, r3
 800ad84:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800ad88:	fa22 f303 	lsr.w	r3, r2, r3
 800ad8c:	432b      	orrs	r3, r5
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ad96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ad9e:	9805      	ldr	r0, [sp, #20]
 800ada0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ada4:	2701      	movs	r7, #1
 800ada6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800adaa:	e7a5      	b.n	800acf8 <_dtoa_r+0x100>
 800adac:	9a02      	ldr	r2, [sp, #8]
 800adae:	f1c3 0320 	rsb	r3, r3, #32
 800adb2:	fa02 f303 	lsl.w	r3, r2, r3
 800adb6:	e7ea      	b.n	800ad8e <_dtoa_r+0x196>
 800adb8:	2301      	movs	r3, #1
 800adba:	eba1 0a0a 	sub.w	sl, r1, sl
 800adbe:	9310      	str	r3, [sp, #64]	; 0x40
 800adc0:	f1ba 0301 	subs.w	r3, sl, #1
 800adc4:	9307      	str	r3, [sp, #28]
 800adc6:	bf43      	ittte	mi
 800adc8:	2300      	movmi	r3, #0
 800adca:	f1ca 0a01 	rsbmi	sl, sl, #1
 800adce:	9307      	strmi	r3, [sp, #28]
 800add0:	f04f 0a00 	movpl.w	sl, #0
 800add4:	f1bb 0f00 	cmp.w	fp, #0
 800add8:	db19      	blt.n	800ae0e <_dtoa_r+0x216>
 800adda:	9b07      	ldr	r3, [sp, #28]
 800addc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ade0:	445b      	add	r3, fp
 800ade2:	9307      	str	r3, [sp, #28]
 800ade4:	f04f 0800 	mov.w	r8, #0
 800ade8:	9b08      	ldr	r3, [sp, #32]
 800adea:	2b09      	cmp	r3, #9
 800adec:	d866      	bhi.n	800aebc <_dtoa_r+0x2c4>
 800adee:	2b05      	cmp	r3, #5
 800adf0:	bfc4      	itt	gt
 800adf2:	3b04      	subgt	r3, #4
 800adf4:	9308      	strgt	r3, [sp, #32]
 800adf6:	9b08      	ldr	r3, [sp, #32]
 800adf8:	f1a3 0302 	sub.w	r3, r3, #2
 800adfc:	bfcc      	ite	gt
 800adfe:	2500      	movgt	r5, #0
 800ae00:	2501      	movle	r5, #1
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d866      	bhi.n	800aed4 <_dtoa_r+0x2dc>
 800ae06:	e8df f003 	tbb	[pc, r3]
 800ae0a:	5755      	.short	0x5755
 800ae0c:	4909      	.short	0x4909
 800ae0e:	2300      	movs	r3, #0
 800ae10:	ebaa 0a0b 	sub.w	sl, sl, fp
 800ae14:	f1cb 0800 	rsb	r8, fp, #0
 800ae18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae1a:	e7e5      	b.n	800ade8 <_dtoa_r+0x1f0>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dd59      	ble.n	800aeda <_dtoa_r+0x2e2>
 800ae26:	9306      	str	r3, [sp, #24]
 800ae28:	4699      	mov	r9, r3
 800ae2a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	6072      	str	r2, [r6, #4]
 800ae30:	2204      	movs	r2, #4
 800ae32:	f102 0014 	add.w	r0, r2, #20
 800ae36:	4298      	cmp	r0, r3
 800ae38:	6871      	ldr	r1, [r6, #4]
 800ae3a:	d953      	bls.n	800aee4 <_dtoa_r+0x2ec>
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f000 ff75 	bl	800bd2c <_Balloc>
 800ae42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae44:	6030      	str	r0, [r6, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	9304      	str	r3, [sp, #16]
 800ae4a:	f1b9 0f0e 	cmp.w	r9, #14
 800ae4e:	f200 80c2 	bhi.w	800afd6 <_dtoa_r+0x3de>
 800ae52:	2d00      	cmp	r5, #0
 800ae54:	f000 80bf 	beq.w	800afd6 <_dtoa_r+0x3de>
 800ae58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae5c:	f1bb 0f00 	cmp.w	fp, #0
 800ae60:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800ae64:	f340 80e6 	ble.w	800b034 <_dtoa_r+0x43c>
 800ae68:	4a2b      	ldr	r2, [pc, #172]	; (800af18 <_dtoa_r+0x320>)
 800ae6a:	f00b 030f 	and.w	r3, fp, #15
 800ae6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae72:	ed93 7b00 	vldr	d7, [r3]
 800ae76:	ea4f 132b 	mov.w	r3, fp, asr #4
 800ae7a:	06da      	lsls	r2, r3, #27
 800ae7c:	f140 80d8 	bpl.w	800b030 <_dtoa_r+0x438>
 800ae80:	4a26      	ldr	r2, [pc, #152]	; (800af1c <_dtoa_r+0x324>)
 800ae82:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800ae86:	ed92 6b08 	vldr	d6, [r2, #32]
 800ae8a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ae8e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ae92:	f003 030f 	and.w	r3, r3, #15
 800ae96:	2203      	movs	r2, #3
 800ae98:	4920      	ldr	r1, [pc, #128]	; (800af1c <_dtoa_r+0x324>)
 800ae9a:	e04a      	b.n	800af32 <_dtoa_r+0x33a>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	9309      	str	r3, [sp, #36]	; 0x24
 800aea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea2:	445b      	add	r3, fp
 800aea4:	f103 0901 	add.w	r9, r3, #1
 800aea8:	9306      	str	r3, [sp, #24]
 800aeaa:	464b      	mov	r3, r9
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	bfb8      	it	lt
 800aeb0:	2301      	movlt	r3, #1
 800aeb2:	e7ba      	b.n	800ae2a <_dtoa_r+0x232>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e7b2      	b.n	800ae1e <_dtoa_r+0x226>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	e7f0      	b.n	800ae9e <_dtoa_r+0x2a6>
 800aebc:	2501      	movs	r5, #1
 800aebe:	2300      	movs	r3, #0
 800aec0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800aec4:	f04f 33ff 	mov.w	r3, #4294967295
 800aec8:	9306      	str	r3, [sp, #24]
 800aeca:	4699      	mov	r9, r3
 800aecc:	2200      	movs	r2, #0
 800aece:	2312      	movs	r3, #18
 800aed0:	920a      	str	r2, [sp, #40]	; 0x28
 800aed2:	e7aa      	b.n	800ae2a <_dtoa_r+0x232>
 800aed4:	2301      	movs	r3, #1
 800aed6:	9309      	str	r3, [sp, #36]	; 0x24
 800aed8:	e7f4      	b.n	800aec4 <_dtoa_r+0x2cc>
 800aeda:	2301      	movs	r3, #1
 800aedc:	9306      	str	r3, [sp, #24]
 800aede:	4699      	mov	r9, r3
 800aee0:	461a      	mov	r2, r3
 800aee2:	e7f5      	b.n	800aed0 <_dtoa_r+0x2d8>
 800aee4:	3101      	adds	r1, #1
 800aee6:	6071      	str	r1, [r6, #4]
 800aee8:	0052      	lsls	r2, r2, #1
 800aeea:	e7a2      	b.n	800ae32 <_dtoa_r+0x23a>
 800aeec:	f3af 8000 	nop.w
 800aef0:	636f4361 	.word	0x636f4361
 800aef4:	3fd287a7 	.word	0x3fd287a7
 800aef8:	8b60c8b3 	.word	0x8b60c8b3
 800aefc:	3fc68a28 	.word	0x3fc68a28
 800af00:	509f79fb 	.word	0x509f79fb
 800af04:	3fd34413 	.word	0x3fd34413
 800af08:	7ff00000 	.word	0x7ff00000
 800af0c:	080127a1 	.word	0x080127a1
 800af10:	08012798 	.word	0x08012798
 800af14:	0801271d 	.word	0x0801271d
 800af18:	080127d8 	.word	0x080127d8
 800af1c:	080127b0 	.word	0x080127b0
 800af20:	07de      	lsls	r6, r3, #31
 800af22:	d504      	bpl.n	800af2e <_dtoa_r+0x336>
 800af24:	ed91 6b00 	vldr	d6, [r1]
 800af28:	3201      	adds	r2, #1
 800af2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af2e:	105b      	asrs	r3, r3, #1
 800af30:	3108      	adds	r1, #8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1f4      	bne.n	800af20 <_dtoa_r+0x328>
 800af36:	ed9d 6b02 	vldr	d6, [sp, #8]
 800af3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800af3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 80a7 	beq.w	800b098 <_dtoa_r+0x4a0>
 800af4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800af4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800af56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af5a:	f140 809d 	bpl.w	800b098 <_dtoa_r+0x4a0>
 800af5e:	f1b9 0f00 	cmp.w	r9, #0
 800af62:	f000 8099 	beq.w	800b098 <_dtoa_r+0x4a0>
 800af66:	9b06      	ldr	r3, [sp, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dd30      	ble.n	800afce <_dtoa_r+0x3d6>
 800af6c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800af70:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af78:	9d06      	ldr	r5, [sp, #24]
 800af7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800af7e:	3201      	adds	r2, #1
 800af80:	ed9d 6b02 	vldr	d6, [sp, #8]
 800af84:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800af88:	ee07 2a90 	vmov	s15, r2
 800af8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af90:	eea7 5b06 	vfma.f64	d5, d7, d6
 800af94:	ed8d 5b02 	vstr	d5, [sp, #8]
 800af98:	9a03      	ldr	r2, [sp, #12]
 800af9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af9e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800afa2:	2d00      	cmp	r5, #0
 800afa4:	d17b      	bne.n	800b09e <_dtoa_r+0x4a6>
 800afa6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800afaa:	ee36 6b47 	vsub.f64	d6, d6, d7
 800afae:	ec41 0b17 	vmov	d7, r0, r1
 800afb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800afb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afba:	f300 8253 	bgt.w	800b464 <_dtoa_r+0x86c>
 800afbe:	eeb1 7b47 	vneg.f64	d7, d7
 800afc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800afc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afca:	f100 8249 	bmi.w	800b460 <_dtoa_r+0x868>
 800afce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800afd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f2c0 8119 	blt.w	800b210 <_dtoa_r+0x618>
 800afde:	f1bb 0f0e 	cmp.w	fp, #14
 800afe2:	f300 8115 	bgt.w	800b210 <_dtoa_r+0x618>
 800afe6:	4bc3      	ldr	r3, [pc, #780]	; (800b2f4 <_dtoa_r+0x6fc>)
 800afe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800afec:	ed93 6b00 	vldr	d6, [r3]
 800aff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f280 80ba 	bge.w	800b16c <_dtoa_r+0x574>
 800aff8:	f1b9 0f00 	cmp.w	r9, #0
 800affc:	f300 80b6 	bgt.w	800b16c <_dtoa_r+0x574>
 800b000:	f040 822d 	bne.w	800b45e <_dtoa_r+0x866>
 800b004:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b008:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b00c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b010:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b018:	464d      	mov	r5, r9
 800b01a:	464f      	mov	r7, r9
 800b01c:	f280 8204 	bge.w	800b428 <_dtoa_r+0x830>
 800b020:	9b04      	ldr	r3, [sp, #16]
 800b022:	9a04      	ldr	r2, [sp, #16]
 800b024:	1c5e      	adds	r6, r3, #1
 800b026:	2331      	movs	r3, #49	; 0x31
 800b028:	7013      	strb	r3, [r2, #0]
 800b02a:	f10b 0b01 	add.w	fp, fp, #1
 800b02e:	e1ff      	b.n	800b430 <_dtoa_r+0x838>
 800b030:	2202      	movs	r2, #2
 800b032:	e731      	b.n	800ae98 <_dtoa_r+0x2a0>
 800b034:	d02e      	beq.n	800b094 <_dtoa_r+0x49c>
 800b036:	f1cb 0300 	rsb	r3, fp, #0
 800b03a:	4aae      	ldr	r2, [pc, #696]	; (800b2f4 <_dtoa_r+0x6fc>)
 800b03c:	f003 010f 	and.w	r1, r3, #15
 800b040:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b044:	ed92 7b00 	vldr	d7, [r2]
 800b048:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800b04c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b050:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b054:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800b058:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b05c:	49a6      	ldr	r1, [pc, #664]	; (800b2f8 <_dtoa_r+0x700>)
 800b05e:	111b      	asrs	r3, r3, #4
 800b060:	2000      	movs	r0, #0
 800b062:	2202      	movs	r2, #2
 800b064:	b93b      	cbnz	r3, 800b076 <_dtoa_r+0x47e>
 800b066:	2800      	cmp	r0, #0
 800b068:	f43f af6b 	beq.w	800af42 <_dtoa_r+0x34a>
 800b06c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b074:	e765      	b.n	800af42 <_dtoa_r+0x34a>
 800b076:	07dd      	lsls	r5, r3, #31
 800b078:	d509      	bpl.n	800b08e <_dtoa_r+0x496>
 800b07a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800b07e:	ed91 7b00 	vldr	d7, [r1]
 800b082:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b086:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b08a:	3201      	adds	r2, #1
 800b08c:	2001      	movs	r0, #1
 800b08e:	105b      	asrs	r3, r3, #1
 800b090:	3108      	adds	r1, #8
 800b092:	e7e7      	b.n	800b064 <_dtoa_r+0x46c>
 800b094:	2202      	movs	r2, #2
 800b096:	e754      	b.n	800af42 <_dtoa_r+0x34a>
 800b098:	465b      	mov	r3, fp
 800b09a:	464d      	mov	r5, r9
 800b09c:	e770      	b.n	800af80 <_dtoa_r+0x388>
 800b09e:	4a95      	ldr	r2, [pc, #596]	; (800b2f4 <_dtoa_r+0x6fc>)
 800b0a0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800b0a4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b0a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0aa:	ec41 0b17 	vmov	d7, r0, r1
 800b0ae:	b35a      	cbz	r2, 800b108 <_dtoa_r+0x510>
 800b0b0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b0b4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b0b8:	9e04      	ldr	r6, [sp, #16]
 800b0ba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b0be:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b0c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b0c6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b0ca:	ee14 2a90 	vmov	r2, s9
 800b0ce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b0d2:	3230      	adds	r2, #48	; 0x30
 800b0d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b0d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e0:	f806 2b01 	strb.w	r2, [r6], #1
 800b0e4:	d43b      	bmi.n	800b15e <_dtoa_r+0x566>
 800b0e6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b0ea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f2:	d472      	bmi.n	800b1da <_dtoa_r+0x5e2>
 800b0f4:	9a04      	ldr	r2, [sp, #16]
 800b0f6:	1ab2      	subs	r2, r6, r2
 800b0f8:	4295      	cmp	r5, r2
 800b0fa:	f77f af68 	ble.w	800afce <_dtoa_r+0x3d6>
 800b0fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b102:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b106:	e7de      	b.n	800b0c6 <_dtoa_r+0x4ce>
 800b108:	9a04      	ldr	r2, [sp, #16]
 800b10a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b10e:	1956      	adds	r6, r2, r5
 800b110:	4611      	mov	r1, r2
 800b112:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b116:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b11a:	ee14 2a90 	vmov	r2, s9
 800b11e:	3230      	adds	r2, #48	; 0x30
 800b120:	f801 2b01 	strb.w	r2, [r1], #1
 800b124:	42b1      	cmp	r1, r6
 800b126:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b12a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b12e:	d11a      	bne.n	800b166 <_dtoa_r+0x56e>
 800b130:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b134:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b138:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b140:	dc4b      	bgt.n	800b1da <_dtoa_r+0x5e2>
 800b142:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b146:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14e:	f57f af3e 	bpl.w	800afce <_dtoa_r+0x3d6>
 800b152:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b156:	2a30      	cmp	r2, #48	; 0x30
 800b158:	f106 31ff 	add.w	r1, r6, #4294967295
 800b15c:	d001      	beq.n	800b162 <_dtoa_r+0x56a>
 800b15e:	469b      	mov	fp, r3
 800b160:	e02a      	b.n	800b1b8 <_dtoa_r+0x5c0>
 800b162:	460e      	mov	r6, r1
 800b164:	e7f5      	b.n	800b152 <_dtoa_r+0x55a>
 800b166:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b16a:	e7d4      	b.n	800b116 <_dtoa_r+0x51e>
 800b16c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b170:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b174:	9e04      	ldr	r6, [sp, #16]
 800b176:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b17a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b17e:	ee15 3a10 	vmov	r3, s10
 800b182:	3330      	adds	r3, #48	; 0x30
 800b184:	f806 3b01 	strb.w	r3, [r6], #1
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	1af3      	subs	r3, r6, r3
 800b18c:	4599      	cmp	r9, r3
 800b18e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b192:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b196:	d133      	bne.n	800b200 <_dtoa_r+0x608>
 800b198:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b19c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a4:	dc18      	bgt.n	800b1d8 <_dtoa_r+0x5e0>
 800b1a6:	eeb4 7b46 	vcmp.f64	d7, d6
 800b1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ae:	d103      	bne.n	800b1b8 <_dtoa_r+0x5c0>
 800b1b0:	ee15 3a10 	vmov	r3, s10
 800b1b4:	07db      	lsls	r3, r3, #31
 800b1b6:	d40f      	bmi.n	800b1d8 <_dtoa_r+0x5e0>
 800b1b8:	9901      	ldr	r1, [sp, #4]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fdea 	bl	800bd94 <_Bfree>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1c4:	7033      	strb	r3, [r6, #0]
 800b1c6:	f10b 0301 	add.w	r3, fp, #1
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f43f ad5b 	beq.w	800ac8a <_dtoa_r+0x92>
 800b1d4:	601e      	str	r6, [r3, #0]
 800b1d6:	e558      	b.n	800ac8a <_dtoa_r+0x92>
 800b1d8:	465b      	mov	r3, fp
 800b1da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b1de:	2939      	cmp	r1, #57	; 0x39
 800b1e0:	f106 32ff 	add.w	r2, r6, #4294967295
 800b1e4:	d106      	bne.n	800b1f4 <_dtoa_r+0x5fc>
 800b1e6:	9904      	ldr	r1, [sp, #16]
 800b1e8:	4291      	cmp	r1, r2
 800b1ea:	d107      	bne.n	800b1fc <_dtoa_r+0x604>
 800b1ec:	2230      	movs	r2, #48	; 0x30
 800b1ee:	700a      	strb	r2, [r1, #0]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	460a      	mov	r2, r1
 800b1f4:	7811      	ldrb	r1, [r2, #0]
 800b1f6:	3101      	adds	r1, #1
 800b1f8:	7011      	strb	r1, [r2, #0]
 800b1fa:	e7b0      	b.n	800b15e <_dtoa_r+0x566>
 800b1fc:	4616      	mov	r6, r2
 800b1fe:	e7ec      	b.n	800b1da <_dtoa_r+0x5e2>
 800b200:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b204:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b20c:	d1b3      	bne.n	800b176 <_dtoa_r+0x57e>
 800b20e:	e7d3      	b.n	800b1b8 <_dtoa_r+0x5c0>
 800b210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b212:	2a00      	cmp	r2, #0
 800b214:	f000 808d 	beq.w	800b332 <_dtoa_r+0x73a>
 800b218:	9a08      	ldr	r2, [sp, #32]
 800b21a:	2a01      	cmp	r2, #1
 800b21c:	dc72      	bgt.n	800b304 <_dtoa_r+0x70c>
 800b21e:	2f00      	cmp	r7, #0
 800b220:	d06c      	beq.n	800b2fc <_dtoa_r+0x704>
 800b222:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b226:	4645      	mov	r5, r8
 800b228:	4656      	mov	r6, sl
 800b22a:	9a07      	ldr	r2, [sp, #28]
 800b22c:	2101      	movs	r1, #1
 800b22e:	441a      	add	r2, r3
 800b230:	4620      	mov	r0, r4
 800b232:	449a      	add	sl, r3
 800b234:	9207      	str	r2, [sp, #28]
 800b236:	f000 fe8b 	bl	800bf50 <__i2b>
 800b23a:	4607      	mov	r7, r0
 800b23c:	2e00      	cmp	r6, #0
 800b23e:	dd0b      	ble.n	800b258 <_dtoa_r+0x660>
 800b240:	9b07      	ldr	r3, [sp, #28]
 800b242:	2b00      	cmp	r3, #0
 800b244:	dd08      	ble.n	800b258 <_dtoa_r+0x660>
 800b246:	42b3      	cmp	r3, r6
 800b248:	9a07      	ldr	r2, [sp, #28]
 800b24a:	bfa8      	it	ge
 800b24c:	4633      	movge	r3, r6
 800b24e:	ebaa 0a03 	sub.w	sl, sl, r3
 800b252:	1af6      	subs	r6, r6, r3
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	9307      	str	r3, [sp, #28]
 800b258:	f1b8 0f00 	cmp.w	r8, #0
 800b25c:	d01d      	beq.n	800b29a <_dtoa_r+0x6a2>
 800b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b260:	2b00      	cmp	r3, #0
 800b262:	d06a      	beq.n	800b33a <_dtoa_r+0x742>
 800b264:	b18d      	cbz	r5, 800b28a <_dtoa_r+0x692>
 800b266:	4639      	mov	r1, r7
 800b268:	462a      	mov	r2, r5
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 ff10 	bl	800c090 <__pow5mult>
 800b270:	9a01      	ldr	r2, [sp, #4]
 800b272:	4601      	mov	r1, r0
 800b274:	4607      	mov	r7, r0
 800b276:	4620      	mov	r0, r4
 800b278:	f000 fe73 	bl	800bf62 <__multiply>
 800b27c:	9901      	ldr	r1, [sp, #4]
 800b27e:	900c      	str	r0, [sp, #48]	; 0x30
 800b280:	4620      	mov	r0, r4
 800b282:	f000 fd87 	bl	800bd94 <_Bfree>
 800b286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	ebb8 0205 	subs.w	r2, r8, r5
 800b28e:	d004      	beq.n	800b29a <_dtoa_r+0x6a2>
 800b290:	9901      	ldr	r1, [sp, #4]
 800b292:	4620      	mov	r0, r4
 800b294:	f000 fefc 	bl	800c090 <__pow5mult>
 800b298:	9001      	str	r0, [sp, #4]
 800b29a:	2101      	movs	r1, #1
 800b29c:	4620      	mov	r0, r4
 800b29e:	f000 fe57 	bl	800bf50 <__i2b>
 800b2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f000 81ca 	beq.w	800b640 <_dtoa_r+0xa48>
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 feed 	bl	800c090 <__pow5mult>
 800b2b6:	9b08      	ldr	r3, [sp, #32]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	dc44      	bgt.n	800b348 <_dtoa_r+0x750>
 800b2be:	9b02      	ldr	r3, [sp, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d13c      	bne.n	800b33e <_dtoa_r+0x746>
 800b2c4:	9b03      	ldr	r3, [sp, #12]
 800b2c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d137      	bne.n	800b33e <_dtoa_r+0x746>
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2d4:	0d1b      	lsrs	r3, r3, #20
 800b2d6:	051b      	lsls	r3, r3, #20
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d033      	beq.n	800b344 <_dtoa_r+0x74c>
 800b2dc:	9b07      	ldr	r3, [sp, #28]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	f10a 0a01 	add.w	sl, sl, #1
 800b2e4:	9307      	str	r3, [sp, #28]
 800b2e6:	f04f 0801 	mov.w	r8, #1
 800b2ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ec:	bb73      	cbnz	r3, 800b34c <_dtoa_r+0x754>
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	e034      	b.n	800b35c <_dtoa_r+0x764>
 800b2f2:	bf00      	nop
 800b2f4:	080127d8 	.word	0x080127d8
 800b2f8:	080127b0 	.word	0x080127b0
 800b2fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b302:	e790      	b.n	800b226 <_dtoa_r+0x62e>
 800b304:	f109 35ff 	add.w	r5, r9, #4294967295
 800b308:	45a8      	cmp	r8, r5
 800b30a:	bfbf      	itttt	lt
 800b30c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800b30e:	eba5 0808 	sublt.w	r8, r5, r8
 800b312:	4443      	addlt	r3, r8
 800b314:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800b316:	bfb6      	itet	lt
 800b318:	46a8      	movlt	r8, r5
 800b31a:	eba8 0505 	subge.w	r5, r8, r5
 800b31e:	2500      	movlt	r5, #0
 800b320:	f1b9 0f00 	cmp.w	r9, #0
 800b324:	bfb9      	ittee	lt
 800b326:	ebaa 0609 	sublt.w	r6, sl, r9
 800b32a:	2300      	movlt	r3, #0
 800b32c:	4656      	movge	r6, sl
 800b32e:	464b      	movge	r3, r9
 800b330:	e77b      	b.n	800b22a <_dtoa_r+0x632>
 800b332:	4645      	mov	r5, r8
 800b334:	4656      	mov	r6, sl
 800b336:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b338:	e780      	b.n	800b23c <_dtoa_r+0x644>
 800b33a:	4642      	mov	r2, r8
 800b33c:	e7a8      	b.n	800b290 <_dtoa_r+0x698>
 800b33e:	f04f 0800 	mov.w	r8, #0
 800b342:	e7d2      	b.n	800b2ea <_dtoa_r+0x6f2>
 800b344:	4698      	mov	r8, r3
 800b346:	e7d0      	b.n	800b2ea <_dtoa_r+0x6f2>
 800b348:	f04f 0800 	mov.w	r8, #0
 800b34c:	692b      	ldr	r3, [r5, #16]
 800b34e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b352:	6918      	ldr	r0, [r3, #16]
 800b354:	f000 fdae 	bl	800beb4 <__hi0bits>
 800b358:	f1c0 0020 	rsb	r0, r0, #32
 800b35c:	9b07      	ldr	r3, [sp, #28]
 800b35e:	4418      	add	r0, r3
 800b360:	f010 001f 	ands.w	r0, r0, #31
 800b364:	d047      	beq.n	800b3f6 <_dtoa_r+0x7fe>
 800b366:	f1c0 0320 	rsb	r3, r0, #32
 800b36a:	2b04      	cmp	r3, #4
 800b36c:	dd3b      	ble.n	800b3e6 <_dtoa_r+0x7ee>
 800b36e:	9b07      	ldr	r3, [sp, #28]
 800b370:	f1c0 001c 	rsb	r0, r0, #28
 800b374:	4482      	add	sl, r0
 800b376:	4406      	add	r6, r0
 800b378:	4403      	add	r3, r0
 800b37a:	9307      	str	r3, [sp, #28]
 800b37c:	f1ba 0f00 	cmp.w	sl, #0
 800b380:	dd05      	ble.n	800b38e <_dtoa_r+0x796>
 800b382:	4652      	mov	r2, sl
 800b384:	9901      	ldr	r1, [sp, #4]
 800b386:	4620      	mov	r0, r4
 800b388:	f000 fed0 	bl	800c12c <__lshift>
 800b38c:	9001      	str	r0, [sp, #4]
 800b38e:	9b07      	ldr	r3, [sp, #28]
 800b390:	2b00      	cmp	r3, #0
 800b392:	dd05      	ble.n	800b3a0 <_dtoa_r+0x7a8>
 800b394:	4629      	mov	r1, r5
 800b396:	461a      	mov	r2, r3
 800b398:	4620      	mov	r0, r4
 800b39a:	f000 fec7 	bl	800c12c <__lshift>
 800b39e:	4605      	mov	r5, r0
 800b3a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3a2:	b353      	cbz	r3, 800b3fa <_dtoa_r+0x802>
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	9801      	ldr	r0, [sp, #4]
 800b3a8:	f000 ff14 	bl	800c1d4 <__mcmp>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	da24      	bge.n	800b3fa <_dtoa_r+0x802>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	220a      	movs	r2, #10
 800b3b4:	9901      	ldr	r1, [sp, #4]
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f000 fd03 	bl	800bdc2 <__multadd>
 800b3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3be:	9001      	str	r0, [sp, #4]
 800b3c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 8142 	beq.w	800b64e <_dtoa_r+0xa56>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	220a      	movs	r2, #10
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 fcf6 	bl	800bdc2 <__multadd>
 800b3d6:	9b06      	ldr	r3, [sp, #24]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	4607      	mov	r7, r0
 800b3dc:	dc4b      	bgt.n	800b476 <_dtoa_r+0x87e>
 800b3de:	9b08      	ldr	r3, [sp, #32]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	dd48      	ble.n	800b476 <_dtoa_r+0x87e>
 800b3e4:	e011      	b.n	800b40a <_dtoa_r+0x812>
 800b3e6:	d0c9      	beq.n	800b37c <_dtoa_r+0x784>
 800b3e8:	9a07      	ldr	r2, [sp, #28]
 800b3ea:	331c      	adds	r3, #28
 800b3ec:	441a      	add	r2, r3
 800b3ee:	449a      	add	sl, r3
 800b3f0:	441e      	add	r6, r3
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	e7c1      	b.n	800b37a <_dtoa_r+0x782>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	e7f6      	b.n	800b3e8 <_dtoa_r+0x7f0>
 800b3fa:	f1b9 0f00 	cmp.w	r9, #0
 800b3fe:	dc34      	bgt.n	800b46a <_dtoa_r+0x872>
 800b400:	9b08      	ldr	r3, [sp, #32]
 800b402:	2b02      	cmp	r3, #2
 800b404:	dd31      	ble.n	800b46a <_dtoa_r+0x872>
 800b406:	f8cd 9018 	str.w	r9, [sp, #24]
 800b40a:	9b06      	ldr	r3, [sp, #24]
 800b40c:	b963      	cbnz	r3, 800b428 <_dtoa_r+0x830>
 800b40e:	4629      	mov	r1, r5
 800b410:	2205      	movs	r2, #5
 800b412:	4620      	mov	r0, r4
 800b414:	f000 fcd5 	bl	800bdc2 <__multadd>
 800b418:	4601      	mov	r1, r0
 800b41a:	4605      	mov	r5, r0
 800b41c:	9801      	ldr	r0, [sp, #4]
 800b41e:	f000 fed9 	bl	800c1d4 <__mcmp>
 800b422:	2800      	cmp	r0, #0
 800b424:	f73f adfc 	bgt.w	800b020 <_dtoa_r+0x428>
 800b428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b42a:	9e04      	ldr	r6, [sp, #16]
 800b42c:	ea6f 0b03 	mvn.w	fp, r3
 800b430:	f04f 0900 	mov.w	r9, #0
 800b434:	4629      	mov	r1, r5
 800b436:	4620      	mov	r0, r4
 800b438:	f000 fcac 	bl	800bd94 <_Bfree>
 800b43c:	2f00      	cmp	r7, #0
 800b43e:	f43f aebb 	beq.w	800b1b8 <_dtoa_r+0x5c0>
 800b442:	f1b9 0f00 	cmp.w	r9, #0
 800b446:	d005      	beq.n	800b454 <_dtoa_r+0x85c>
 800b448:	45b9      	cmp	r9, r7
 800b44a:	d003      	beq.n	800b454 <_dtoa_r+0x85c>
 800b44c:	4649      	mov	r1, r9
 800b44e:	4620      	mov	r0, r4
 800b450:	f000 fca0 	bl	800bd94 <_Bfree>
 800b454:	4639      	mov	r1, r7
 800b456:	4620      	mov	r0, r4
 800b458:	f000 fc9c 	bl	800bd94 <_Bfree>
 800b45c:	e6ac      	b.n	800b1b8 <_dtoa_r+0x5c0>
 800b45e:	2500      	movs	r5, #0
 800b460:	462f      	mov	r7, r5
 800b462:	e7e1      	b.n	800b428 <_dtoa_r+0x830>
 800b464:	469b      	mov	fp, r3
 800b466:	462f      	mov	r7, r5
 800b468:	e5da      	b.n	800b020 <_dtoa_r+0x428>
 800b46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46c:	f8cd 9018 	str.w	r9, [sp, #24]
 800b470:	2b00      	cmp	r3, #0
 800b472:	f000 80f3 	beq.w	800b65c <_dtoa_r+0xa64>
 800b476:	2e00      	cmp	r6, #0
 800b478:	dd05      	ble.n	800b486 <_dtoa_r+0x88e>
 800b47a:	4639      	mov	r1, r7
 800b47c:	4632      	mov	r2, r6
 800b47e:	4620      	mov	r0, r4
 800b480:	f000 fe54 	bl	800c12c <__lshift>
 800b484:	4607      	mov	r7, r0
 800b486:	f1b8 0f00 	cmp.w	r8, #0
 800b48a:	d04c      	beq.n	800b526 <_dtoa_r+0x92e>
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 fc4c 	bl	800bd2c <_Balloc>
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	3202      	adds	r2, #2
 800b498:	4606      	mov	r6, r0
 800b49a:	0092      	lsls	r2, r2, #2
 800b49c:	f107 010c 	add.w	r1, r7, #12
 800b4a0:	300c      	adds	r0, #12
 800b4a2:	f7fd fd95 	bl	8008fd0 <memcpy>
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	4631      	mov	r1, r6
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f000 fe3e 	bl	800c12c <__lshift>
 800b4b0:	9b02      	ldr	r3, [sp, #8]
 800b4b2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	46b9      	mov	r9, r7
 800b4bc:	9307      	str	r3, [sp, #28]
 800b4be:	4607      	mov	r7, r0
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	9801      	ldr	r0, [sp, #4]
 800b4c4:	f7ff fb0a 	bl	800aadc <quorem>
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b4d0:	9801      	ldr	r0, [sp, #4]
 800b4d2:	f000 fe7f 	bl	800c1d4 <__mcmp>
 800b4d6:	463a      	mov	r2, r7
 800b4d8:	9002      	str	r0, [sp, #8]
 800b4da:	4629      	mov	r1, r5
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f000 fe93 	bl	800c208 <__mdiff>
 800b4e2:	68c3      	ldr	r3, [r0, #12]
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	bb03      	cbnz	r3, 800b52a <_dtoa_r+0x932>
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	9009      	str	r0, [sp, #36]	; 0x24
 800b4ec:	9801      	ldr	r0, [sp, #4]
 800b4ee:	f000 fe71 	bl	800c1d4 <__mcmp>
 800b4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b4fc:	f000 fc4a 	bl	800bd94 <_Bfree>
 800b500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b502:	b9a3      	cbnz	r3, 800b52e <_dtoa_r+0x936>
 800b504:	9a08      	ldr	r2, [sp, #32]
 800b506:	b992      	cbnz	r2, 800b52e <_dtoa_r+0x936>
 800b508:	9a07      	ldr	r2, [sp, #28]
 800b50a:	b982      	cbnz	r2, 800b52e <_dtoa_r+0x936>
 800b50c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b510:	d029      	beq.n	800b566 <_dtoa_r+0x96e>
 800b512:	9b02      	ldr	r3, [sp, #8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	dd01      	ble.n	800b51c <_dtoa_r+0x924>
 800b518:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800b51c:	f10a 0601 	add.w	r6, sl, #1
 800b520:	f88a 8000 	strb.w	r8, [sl]
 800b524:	e786      	b.n	800b434 <_dtoa_r+0x83c>
 800b526:	4638      	mov	r0, r7
 800b528:	e7c2      	b.n	800b4b0 <_dtoa_r+0x8b8>
 800b52a:	2301      	movs	r3, #1
 800b52c:	e7e3      	b.n	800b4f6 <_dtoa_r+0x8fe>
 800b52e:	9a02      	ldr	r2, [sp, #8]
 800b530:	2a00      	cmp	r2, #0
 800b532:	db04      	blt.n	800b53e <_dtoa_r+0x946>
 800b534:	d124      	bne.n	800b580 <_dtoa_r+0x988>
 800b536:	9a08      	ldr	r2, [sp, #32]
 800b538:	bb12      	cbnz	r2, 800b580 <_dtoa_r+0x988>
 800b53a:	9a07      	ldr	r2, [sp, #28]
 800b53c:	bb02      	cbnz	r2, 800b580 <_dtoa_r+0x988>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	ddec      	ble.n	800b51c <_dtoa_r+0x924>
 800b542:	2201      	movs	r2, #1
 800b544:	9901      	ldr	r1, [sp, #4]
 800b546:	4620      	mov	r0, r4
 800b548:	f000 fdf0 	bl	800c12c <__lshift>
 800b54c:	4629      	mov	r1, r5
 800b54e:	9001      	str	r0, [sp, #4]
 800b550:	f000 fe40 	bl	800c1d4 <__mcmp>
 800b554:	2800      	cmp	r0, #0
 800b556:	dc03      	bgt.n	800b560 <_dtoa_r+0x968>
 800b558:	d1e0      	bne.n	800b51c <_dtoa_r+0x924>
 800b55a:	f018 0f01 	tst.w	r8, #1
 800b55e:	d0dd      	beq.n	800b51c <_dtoa_r+0x924>
 800b560:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b564:	d1d8      	bne.n	800b518 <_dtoa_r+0x920>
 800b566:	2339      	movs	r3, #57	; 0x39
 800b568:	f10a 0601 	add.w	r6, sl, #1
 800b56c:	f88a 3000 	strb.w	r3, [sl]
 800b570:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b574:	2b39      	cmp	r3, #57	; 0x39
 800b576:	f106 32ff 	add.w	r2, r6, #4294967295
 800b57a:	d04c      	beq.n	800b616 <_dtoa_r+0xa1e>
 800b57c:	3301      	adds	r3, #1
 800b57e:	e051      	b.n	800b624 <_dtoa_r+0xa2c>
 800b580:	2b00      	cmp	r3, #0
 800b582:	f10a 0601 	add.w	r6, sl, #1
 800b586:	dd05      	ble.n	800b594 <_dtoa_r+0x99c>
 800b588:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b58c:	d0eb      	beq.n	800b566 <_dtoa_r+0x96e>
 800b58e:	f108 0801 	add.w	r8, r8, #1
 800b592:	e7c5      	b.n	800b520 <_dtoa_r+0x928>
 800b594:	9b04      	ldr	r3, [sp, #16]
 800b596:	9a06      	ldr	r2, [sp, #24]
 800b598:	f806 8c01 	strb.w	r8, [r6, #-1]
 800b59c:	1af3      	subs	r3, r6, r3
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d021      	beq.n	800b5e6 <_dtoa_r+0x9ee>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	220a      	movs	r2, #10
 800b5a6:	9901      	ldr	r1, [sp, #4]
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fc0a 	bl	800bdc2 <__multadd>
 800b5ae:	45b9      	cmp	r9, r7
 800b5b0:	9001      	str	r0, [sp, #4]
 800b5b2:	f04f 0300 	mov.w	r3, #0
 800b5b6:	f04f 020a 	mov.w	r2, #10
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	4620      	mov	r0, r4
 800b5be:	d105      	bne.n	800b5cc <_dtoa_r+0x9d4>
 800b5c0:	f000 fbff 	bl	800bdc2 <__multadd>
 800b5c4:	4681      	mov	r9, r0
 800b5c6:	4607      	mov	r7, r0
 800b5c8:	46b2      	mov	sl, r6
 800b5ca:	e779      	b.n	800b4c0 <_dtoa_r+0x8c8>
 800b5cc:	f000 fbf9 	bl	800bdc2 <__multadd>
 800b5d0:	4639      	mov	r1, r7
 800b5d2:	4681      	mov	r9, r0
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	220a      	movs	r2, #10
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 fbf2 	bl	800bdc2 <__multadd>
 800b5de:	4607      	mov	r7, r0
 800b5e0:	e7f2      	b.n	800b5c8 <_dtoa_r+0x9d0>
 800b5e2:	f04f 0900 	mov.w	r9, #0
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	9901      	ldr	r1, [sp, #4]
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 fd9e 	bl	800c12c <__lshift>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	9001      	str	r0, [sp, #4]
 800b5f4:	f000 fdee 	bl	800c1d4 <__mcmp>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	dcb9      	bgt.n	800b570 <_dtoa_r+0x978>
 800b5fc:	d102      	bne.n	800b604 <_dtoa_r+0xa0c>
 800b5fe:	f018 0f01 	tst.w	r8, #1
 800b602:	d1b5      	bne.n	800b570 <_dtoa_r+0x978>
 800b604:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b608:	2b30      	cmp	r3, #48	; 0x30
 800b60a:	f106 32ff 	add.w	r2, r6, #4294967295
 800b60e:	f47f af11 	bne.w	800b434 <_dtoa_r+0x83c>
 800b612:	4616      	mov	r6, r2
 800b614:	e7f6      	b.n	800b604 <_dtoa_r+0xa0c>
 800b616:	9b04      	ldr	r3, [sp, #16]
 800b618:	4293      	cmp	r3, r2
 800b61a:	d105      	bne.n	800b628 <_dtoa_r+0xa30>
 800b61c:	9a04      	ldr	r2, [sp, #16]
 800b61e:	f10b 0b01 	add.w	fp, fp, #1
 800b622:	2331      	movs	r3, #49	; 0x31
 800b624:	7013      	strb	r3, [r2, #0]
 800b626:	e705      	b.n	800b434 <_dtoa_r+0x83c>
 800b628:	4616      	mov	r6, r2
 800b62a:	e7a1      	b.n	800b570 <_dtoa_r+0x978>
 800b62c:	4b16      	ldr	r3, [pc, #88]	; (800b688 <_dtoa_r+0xa90>)
 800b62e:	f7ff bb48 	b.w	800acc2 <_dtoa_r+0xca>
 800b632:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b634:	2b00      	cmp	r3, #0
 800b636:	f47f ab23 	bne.w	800ac80 <_dtoa_r+0x88>
 800b63a:	4b14      	ldr	r3, [pc, #80]	; (800b68c <_dtoa_r+0xa94>)
 800b63c:	f7ff bb41 	b.w	800acc2 <_dtoa_r+0xca>
 800b640:	9b08      	ldr	r3, [sp, #32]
 800b642:	2b01      	cmp	r3, #1
 800b644:	f77f ae3b 	ble.w	800b2be <_dtoa_r+0x6c6>
 800b648:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b64c:	e64f      	b.n	800b2ee <_dtoa_r+0x6f6>
 800b64e:	9b06      	ldr	r3, [sp, #24]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dc03      	bgt.n	800b65c <_dtoa_r+0xa64>
 800b654:	9b08      	ldr	r3, [sp, #32]
 800b656:	2b02      	cmp	r3, #2
 800b658:	f73f aed7 	bgt.w	800b40a <_dtoa_r+0x812>
 800b65c:	9e04      	ldr	r6, [sp, #16]
 800b65e:	9801      	ldr	r0, [sp, #4]
 800b660:	4629      	mov	r1, r5
 800b662:	f7ff fa3b 	bl	800aadc <quorem>
 800b666:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b66a:	f806 8b01 	strb.w	r8, [r6], #1
 800b66e:	9b04      	ldr	r3, [sp, #16]
 800b670:	9a06      	ldr	r2, [sp, #24]
 800b672:	1af3      	subs	r3, r6, r3
 800b674:	429a      	cmp	r2, r3
 800b676:	ddb4      	ble.n	800b5e2 <_dtoa_r+0x9ea>
 800b678:	2300      	movs	r3, #0
 800b67a:	220a      	movs	r2, #10
 800b67c:	9901      	ldr	r1, [sp, #4]
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 fb9f 	bl	800bdc2 <__multadd>
 800b684:	9001      	str	r0, [sp, #4]
 800b686:	e7ea      	b.n	800b65e <_dtoa_r+0xa66>
 800b688:	0801271c 	.word	0x0801271c
 800b68c:	08012798 	.word	0x08012798

0800b690 <rshift>:
 800b690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b692:	6906      	ldr	r6, [r0, #16]
 800b694:	114b      	asrs	r3, r1, #5
 800b696:	429e      	cmp	r6, r3
 800b698:	f100 0414 	add.w	r4, r0, #20
 800b69c:	dd30      	ble.n	800b700 <rshift+0x70>
 800b69e:	f011 011f 	ands.w	r1, r1, #31
 800b6a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b6a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b6aa:	d108      	bne.n	800b6be <rshift+0x2e>
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	42b2      	cmp	r2, r6
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	d211      	bcs.n	800b6d8 <rshift+0x48>
 800b6b4:	f852 3b04 	ldr.w	r3, [r2], #4
 800b6b8:	f841 3b04 	str.w	r3, [r1], #4
 800b6bc:	e7f7      	b.n	800b6ae <rshift+0x1e>
 800b6be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b6c2:	f1c1 0c20 	rsb	ip, r1, #32
 800b6c6:	40cd      	lsrs	r5, r1
 800b6c8:	3204      	adds	r2, #4
 800b6ca:	4623      	mov	r3, r4
 800b6cc:	42b2      	cmp	r2, r6
 800b6ce:	4617      	mov	r7, r2
 800b6d0:	d30c      	bcc.n	800b6ec <rshift+0x5c>
 800b6d2:	601d      	str	r5, [r3, #0]
 800b6d4:	b105      	cbz	r5, 800b6d8 <rshift+0x48>
 800b6d6:	3304      	adds	r3, #4
 800b6d8:	1b1a      	subs	r2, r3, r4
 800b6da:	42a3      	cmp	r3, r4
 800b6dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b6e0:	bf08      	it	eq
 800b6e2:	2300      	moveq	r3, #0
 800b6e4:	6102      	str	r2, [r0, #16]
 800b6e6:	bf08      	it	eq
 800b6e8:	6143      	streq	r3, [r0, #20]
 800b6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ec:	683f      	ldr	r7, [r7, #0]
 800b6ee:	fa07 f70c 	lsl.w	r7, r7, ip
 800b6f2:	433d      	orrs	r5, r7
 800b6f4:	f843 5b04 	str.w	r5, [r3], #4
 800b6f8:	f852 5b04 	ldr.w	r5, [r2], #4
 800b6fc:	40cd      	lsrs	r5, r1
 800b6fe:	e7e5      	b.n	800b6cc <rshift+0x3c>
 800b700:	4623      	mov	r3, r4
 800b702:	e7e9      	b.n	800b6d8 <rshift+0x48>

0800b704 <__hexdig_fun>:
 800b704:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b708:	2b09      	cmp	r3, #9
 800b70a:	d802      	bhi.n	800b712 <__hexdig_fun+0xe>
 800b70c:	3820      	subs	r0, #32
 800b70e:	b2c0      	uxtb	r0, r0
 800b710:	4770      	bx	lr
 800b712:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b716:	2b05      	cmp	r3, #5
 800b718:	d801      	bhi.n	800b71e <__hexdig_fun+0x1a>
 800b71a:	3847      	subs	r0, #71	; 0x47
 800b71c:	e7f7      	b.n	800b70e <__hexdig_fun+0xa>
 800b71e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b722:	2b05      	cmp	r3, #5
 800b724:	d801      	bhi.n	800b72a <__hexdig_fun+0x26>
 800b726:	3827      	subs	r0, #39	; 0x27
 800b728:	e7f1      	b.n	800b70e <__hexdig_fun+0xa>
 800b72a:	2000      	movs	r0, #0
 800b72c:	4770      	bx	lr

0800b72e <__gethex>:
 800b72e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b732:	b08b      	sub	sp, #44	; 0x2c
 800b734:	468a      	mov	sl, r1
 800b736:	9002      	str	r0, [sp, #8]
 800b738:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b73a:	9306      	str	r3, [sp, #24]
 800b73c:	4690      	mov	r8, r2
 800b73e:	f000 fad0 	bl	800bce2 <__localeconv_l>
 800b742:	6803      	ldr	r3, [r0, #0]
 800b744:	9303      	str	r3, [sp, #12]
 800b746:	4618      	mov	r0, r3
 800b748:	f7f4 fe2a 	bl	80003a0 <strlen>
 800b74c:	9b03      	ldr	r3, [sp, #12]
 800b74e:	9001      	str	r0, [sp, #4]
 800b750:	4403      	add	r3, r0
 800b752:	f04f 0b00 	mov.w	fp, #0
 800b756:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	f8da 3000 	ldr.w	r3, [sl]
 800b760:	3302      	adds	r3, #2
 800b762:	461f      	mov	r7, r3
 800b764:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b768:	2830      	cmp	r0, #48	; 0x30
 800b76a:	d06c      	beq.n	800b846 <__gethex+0x118>
 800b76c:	f7ff ffca 	bl	800b704 <__hexdig_fun>
 800b770:	4604      	mov	r4, r0
 800b772:	2800      	cmp	r0, #0
 800b774:	d16a      	bne.n	800b84c <__gethex+0x11e>
 800b776:	9a01      	ldr	r2, [sp, #4]
 800b778:	9903      	ldr	r1, [sp, #12]
 800b77a:	4638      	mov	r0, r7
 800b77c:	f001 f836 	bl	800c7ec <strncmp>
 800b780:	2800      	cmp	r0, #0
 800b782:	d166      	bne.n	800b852 <__gethex+0x124>
 800b784:	9b01      	ldr	r3, [sp, #4]
 800b786:	5cf8      	ldrb	r0, [r7, r3]
 800b788:	18fe      	adds	r6, r7, r3
 800b78a:	f7ff ffbb 	bl	800b704 <__hexdig_fun>
 800b78e:	2800      	cmp	r0, #0
 800b790:	d062      	beq.n	800b858 <__gethex+0x12a>
 800b792:	4633      	mov	r3, r6
 800b794:	7818      	ldrb	r0, [r3, #0]
 800b796:	2830      	cmp	r0, #48	; 0x30
 800b798:	461f      	mov	r7, r3
 800b79a:	f103 0301 	add.w	r3, r3, #1
 800b79e:	d0f9      	beq.n	800b794 <__gethex+0x66>
 800b7a0:	f7ff ffb0 	bl	800b704 <__hexdig_fun>
 800b7a4:	fab0 f580 	clz	r5, r0
 800b7a8:	096d      	lsrs	r5, r5, #5
 800b7aa:	4634      	mov	r4, r6
 800b7ac:	f04f 0b01 	mov.w	fp, #1
 800b7b0:	463a      	mov	r2, r7
 800b7b2:	4616      	mov	r6, r2
 800b7b4:	3201      	adds	r2, #1
 800b7b6:	7830      	ldrb	r0, [r6, #0]
 800b7b8:	f7ff ffa4 	bl	800b704 <__hexdig_fun>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d1f8      	bne.n	800b7b2 <__gethex+0x84>
 800b7c0:	9a01      	ldr	r2, [sp, #4]
 800b7c2:	9903      	ldr	r1, [sp, #12]
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f001 f811 	bl	800c7ec <strncmp>
 800b7ca:	b950      	cbnz	r0, 800b7e2 <__gethex+0xb4>
 800b7cc:	b954      	cbnz	r4, 800b7e4 <__gethex+0xb6>
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	18f4      	adds	r4, r6, r3
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	4616      	mov	r6, r2
 800b7d6:	3201      	adds	r2, #1
 800b7d8:	7830      	ldrb	r0, [r6, #0]
 800b7da:	f7ff ff93 	bl	800b704 <__hexdig_fun>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d1f8      	bne.n	800b7d4 <__gethex+0xa6>
 800b7e2:	b10c      	cbz	r4, 800b7e8 <__gethex+0xba>
 800b7e4:	1ba4      	subs	r4, r4, r6
 800b7e6:	00a4      	lsls	r4, r4, #2
 800b7e8:	7833      	ldrb	r3, [r6, #0]
 800b7ea:	2b50      	cmp	r3, #80	; 0x50
 800b7ec:	d001      	beq.n	800b7f2 <__gethex+0xc4>
 800b7ee:	2b70      	cmp	r3, #112	; 0x70
 800b7f0:	d140      	bne.n	800b874 <__gethex+0x146>
 800b7f2:	7873      	ldrb	r3, [r6, #1]
 800b7f4:	2b2b      	cmp	r3, #43	; 0x2b
 800b7f6:	d031      	beq.n	800b85c <__gethex+0x12e>
 800b7f8:	2b2d      	cmp	r3, #45	; 0x2d
 800b7fa:	d033      	beq.n	800b864 <__gethex+0x136>
 800b7fc:	1c71      	adds	r1, r6, #1
 800b7fe:	f04f 0900 	mov.w	r9, #0
 800b802:	7808      	ldrb	r0, [r1, #0]
 800b804:	f7ff ff7e 	bl	800b704 <__hexdig_fun>
 800b808:	1e43      	subs	r3, r0, #1
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b18      	cmp	r3, #24
 800b80e:	d831      	bhi.n	800b874 <__gethex+0x146>
 800b810:	f1a0 0210 	sub.w	r2, r0, #16
 800b814:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b818:	f7ff ff74 	bl	800b704 <__hexdig_fun>
 800b81c:	1e43      	subs	r3, r0, #1
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b18      	cmp	r3, #24
 800b822:	d922      	bls.n	800b86a <__gethex+0x13c>
 800b824:	f1b9 0f00 	cmp.w	r9, #0
 800b828:	d000      	beq.n	800b82c <__gethex+0xfe>
 800b82a:	4252      	negs	r2, r2
 800b82c:	4414      	add	r4, r2
 800b82e:	f8ca 1000 	str.w	r1, [sl]
 800b832:	b30d      	cbz	r5, 800b878 <__gethex+0x14a>
 800b834:	f1bb 0f00 	cmp.w	fp, #0
 800b838:	bf0c      	ite	eq
 800b83a:	2706      	moveq	r7, #6
 800b83c:	2700      	movne	r7, #0
 800b83e:	4638      	mov	r0, r7
 800b840:	b00b      	add	sp, #44	; 0x2c
 800b842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b846:	f10b 0b01 	add.w	fp, fp, #1
 800b84a:	e78a      	b.n	800b762 <__gethex+0x34>
 800b84c:	2500      	movs	r5, #0
 800b84e:	462c      	mov	r4, r5
 800b850:	e7ae      	b.n	800b7b0 <__gethex+0x82>
 800b852:	463e      	mov	r6, r7
 800b854:	2501      	movs	r5, #1
 800b856:	e7c7      	b.n	800b7e8 <__gethex+0xba>
 800b858:	4604      	mov	r4, r0
 800b85a:	e7fb      	b.n	800b854 <__gethex+0x126>
 800b85c:	f04f 0900 	mov.w	r9, #0
 800b860:	1cb1      	adds	r1, r6, #2
 800b862:	e7ce      	b.n	800b802 <__gethex+0xd4>
 800b864:	f04f 0901 	mov.w	r9, #1
 800b868:	e7fa      	b.n	800b860 <__gethex+0x132>
 800b86a:	230a      	movs	r3, #10
 800b86c:	fb03 0202 	mla	r2, r3, r2, r0
 800b870:	3a10      	subs	r2, #16
 800b872:	e7cf      	b.n	800b814 <__gethex+0xe6>
 800b874:	4631      	mov	r1, r6
 800b876:	e7da      	b.n	800b82e <__gethex+0x100>
 800b878:	1bf3      	subs	r3, r6, r7
 800b87a:	3b01      	subs	r3, #1
 800b87c:	4629      	mov	r1, r5
 800b87e:	2b07      	cmp	r3, #7
 800b880:	dc49      	bgt.n	800b916 <__gethex+0x1e8>
 800b882:	9802      	ldr	r0, [sp, #8]
 800b884:	f000 fa52 	bl	800bd2c <_Balloc>
 800b888:	9b01      	ldr	r3, [sp, #4]
 800b88a:	f100 0914 	add.w	r9, r0, #20
 800b88e:	f04f 0b00 	mov.w	fp, #0
 800b892:	f1c3 0301 	rsb	r3, r3, #1
 800b896:	4605      	mov	r5, r0
 800b898:	f8cd 9010 	str.w	r9, [sp, #16]
 800b89c:	46da      	mov	sl, fp
 800b89e:	9308      	str	r3, [sp, #32]
 800b8a0:	42b7      	cmp	r7, r6
 800b8a2:	d33b      	bcc.n	800b91c <__gethex+0x1ee>
 800b8a4:	9804      	ldr	r0, [sp, #16]
 800b8a6:	f840 ab04 	str.w	sl, [r0], #4
 800b8aa:	eba0 0009 	sub.w	r0, r0, r9
 800b8ae:	1080      	asrs	r0, r0, #2
 800b8b0:	6128      	str	r0, [r5, #16]
 800b8b2:	0147      	lsls	r7, r0, #5
 800b8b4:	4650      	mov	r0, sl
 800b8b6:	f000 fafd 	bl	800beb4 <__hi0bits>
 800b8ba:	f8d8 6000 	ldr.w	r6, [r8]
 800b8be:	1a3f      	subs	r7, r7, r0
 800b8c0:	42b7      	cmp	r7, r6
 800b8c2:	dd64      	ble.n	800b98e <__gethex+0x260>
 800b8c4:	1bbf      	subs	r7, r7, r6
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	f000 fe0e 	bl	800c4ea <__any_on>
 800b8ce:	4682      	mov	sl, r0
 800b8d0:	b178      	cbz	r0, 800b8f2 <__gethex+0x1c4>
 800b8d2:	1e7b      	subs	r3, r7, #1
 800b8d4:	1159      	asrs	r1, r3, #5
 800b8d6:	f003 021f 	and.w	r2, r3, #31
 800b8da:	f04f 0a01 	mov.w	sl, #1
 800b8de:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b8e2:	fa0a f202 	lsl.w	r2, sl, r2
 800b8e6:	420a      	tst	r2, r1
 800b8e8:	d003      	beq.n	800b8f2 <__gethex+0x1c4>
 800b8ea:	4553      	cmp	r3, sl
 800b8ec:	dc46      	bgt.n	800b97c <__gethex+0x24e>
 800b8ee:	f04f 0a02 	mov.w	sl, #2
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f7ff fecb 	bl	800b690 <rshift>
 800b8fa:	443c      	add	r4, r7
 800b8fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b900:	42a3      	cmp	r3, r4
 800b902:	da52      	bge.n	800b9aa <__gethex+0x27c>
 800b904:	4629      	mov	r1, r5
 800b906:	9802      	ldr	r0, [sp, #8]
 800b908:	f000 fa44 	bl	800bd94 <_Bfree>
 800b90c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b90e:	2300      	movs	r3, #0
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	27a3      	movs	r7, #163	; 0xa3
 800b914:	e793      	b.n	800b83e <__gethex+0x110>
 800b916:	3101      	adds	r1, #1
 800b918:	105b      	asrs	r3, r3, #1
 800b91a:	e7b0      	b.n	800b87e <__gethex+0x150>
 800b91c:	1e73      	subs	r3, r6, #1
 800b91e:	9305      	str	r3, [sp, #20]
 800b920:	9a07      	ldr	r2, [sp, #28]
 800b922:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b926:	4293      	cmp	r3, r2
 800b928:	d018      	beq.n	800b95c <__gethex+0x22e>
 800b92a:	f1bb 0f20 	cmp.w	fp, #32
 800b92e:	d107      	bne.n	800b940 <__gethex+0x212>
 800b930:	9b04      	ldr	r3, [sp, #16]
 800b932:	f8c3 a000 	str.w	sl, [r3]
 800b936:	3304      	adds	r3, #4
 800b938:	f04f 0a00 	mov.w	sl, #0
 800b93c:	9304      	str	r3, [sp, #16]
 800b93e:	46d3      	mov	fp, sl
 800b940:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b944:	f7ff fede 	bl	800b704 <__hexdig_fun>
 800b948:	f000 000f 	and.w	r0, r0, #15
 800b94c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b950:	ea4a 0a00 	orr.w	sl, sl, r0
 800b954:	f10b 0b04 	add.w	fp, fp, #4
 800b958:	9b05      	ldr	r3, [sp, #20]
 800b95a:	e00d      	b.n	800b978 <__gethex+0x24a>
 800b95c:	9b05      	ldr	r3, [sp, #20]
 800b95e:	9a08      	ldr	r2, [sp, #32]
 800b960:	4413      	add	r3, r2
 800b962:	42bb      	cmp	r3, r7
 800b964:	d3e1      	bcc.n	800b92a <__gethex+0x1fc>
 800b966:	4618      	mov	r0, r3
 800b968:	9a01      	ldr	r2, [sp, #4]
 800b96a:	9903      	ldr	r1, [sp, #12]
 800b96c:	9309      	str	r3, [sp, #36]	; 0x24
 800b96e:	f000 ff3d 	bl	800c7ec <strncmp>
 800b972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b974:	2800      	cmp	r0, #0
 800b976:	d1d8      	bne.n	800b92a <__gethex+0x1fc>
 800b978:	461e      	mov	r6, r3
 800b97a:	e791      	b.n	800b8a0 <__gethex+0x172>
 800b97c:	1eb9      	subs	r1, r7, #2
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 fdb3 	bl	800c4ea <__any_on>
 800b984:	2800      	cmp	r0, #0
 800b986:	d0b2      	beq.n	800b8ee <__gethex+0x1c0>
 800b988:	f04f 0a03 	mov.w	sl, #3
 800b98c:	e7b1      	b.n	800b8f2 <__gethex+0x1c4>
 800b98e:	da09      	bge.n	800b9a4 <__gethex+0x276>
 800b990:	1bf7      	subs	r7, r6, r7
 800b992:	4629      	mov	r1, r5
 800b994:	463a      	mov	r2, r7
 800b996:	9802      	ldr	r0, [sp, #8]
 800b998:	f000 fbc8 	bl	800c12c <__lshift>
 800b99c:	1be4      	subs	r4, r4, r7
 800b99e:	4605      	mov	r5, r0
 800b9a0:	f100 0914 	add.w	r9, r0, #20
 800b9a4:	f04f 0a00 	mov.w	sl, #0
 800b9a8:	e7a8      	b.n	800b8fc <__gethex+0x1ce>
 800b9aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b9ae:	42a0      	cmp	r0, r4
 800b9b0:	dd6a      	ble.n	800ba88 <__gethex+0x35a>
 800b9b2:	1b04      	subs	r4, r0, r4
 800b9b4:	42a6      	cmp	r6, r4
 800b9b6:	dc2e      	bgt.n	800ba16 <__gethex+0x2e8>
 800b9b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d022      	beq.n	800ba06 <__gethex+0x2d8>
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d024      	beq.n	800ba0e <__gethex+0x2e0>
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d115      	bne.n	800b9f4 <__gethex+0x2c6>
 800b9c8:	42a6      	cmp	r6, r4
 800b9ca:	d113      	bne.n	800b9f4 <__gethex+0x2c6>
 800b9cc:	2e01      	cmp	r6, #1
 800b9ce:	dc0b      	bgt.n	800b9e8 <__gethex+0x2ba>
 800b9d0:	9a06      	ldr	r2, [sp, #24]
 800b9d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	2301      	movs	r3, #1
 800b9da:	612b      	str	r3, [r5, #16]
 800b9dc:	f8c9 3000 	str.w	r3, [r9]
 800b9e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9e2:	2762      	movs	r7, #98	; 0x62
 800b9e4:	601d      	str	r5, [r3, #0]
 800b9e6:	e72a      	b.n	800b83e <__gethex+0x110>
 800b9e8:	1e71      	subs	r1, r6, #1
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f000 fd7d 	bl	800c4ea <__any_on>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d1ed      	bne.n	800b9d0 <__gethex+0x2a2>
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	9802      	ldr	r0, [sp, #8]
 800b9f8:	f000 f9cc 	bl	800bd94 <_Bfree>
 800b9fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9fe:	2300      	movs	r3, #0
 800ba00:	6013      	str	r3, [r2, #0]
 800ba02:	2750      	movs	r7, #80	; 0x50
 800ba04:	e71b      	b.n	800b83e <__gethex+0x110>
 800ba06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0e1      	beq.n	800b9d0 <__gethex+0x2a2>
 800ba0c:	e7f2      	b.n	800b9f4 <__gethex+0x2c6>
 800ba0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1dd      	bne.n	800b9d0 <__gethex+0x2a2>
 800ba14:	e7ee      	b.n	800b9f4 <__gethex+0x2c6>
 800ba16:	1e67      	subs	r7, r4, #1
 800ba18:	f1ba 0f00 	cmp.w	sl, #0
 800ba1c:	d131      	bne.n	800ba82 <__gethex+0x354>
 800ba1e:	b127      	cbz	r7, 800ba2a <__gethex+0x2fc>
 800ba20:	4639      	mov	r1, r7
 800ba22:	4628      	mov	r0, r5
 800ba24:	f000 fd61 	bl	800c4ea <__any_on>
 800ba28:	4682      	mov	sl, r0
 800ba2a:	117a      	asrs	r2, r7, #5
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	f007 071f 	and.w	r7, r7, #31
 800ba32:	fa03 f707 	lsl.w	r7, r3, r7
 800ba36:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ba3a:	4621      	mov	r1, r4
 800ba3c:	421f      	tst	r7, r3
 800ba3e:	4628      	mov	r0, r5
 800ba40:	bf18      	it	ne
 800ba42:	f04a 0a02 	orrne.w	sl, sl, #2
 800ba46:	1b36      	subs	r6, r6, r4
 800ba48:	f7ff fe22 	bl	800b690 <rshift>
 800ba4c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ba50:	2702      	movs	r7, #2
 800ba52:	f1ba 0f00 	cmp.w	sl, #0
 800ba56:	d048      	beq.n	800baea <__gethex+0x3bc>
 800ba58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d015      	beq.n	800ba8c <__gethex+0x35e>
 800ba60:	2b03      	cmp	r3, #3
 800ba62:	d017      	beq.n	800ba94 <__gethex+0x366>
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d109      	bne.n	800ba7c <__gethex+0x34e>
 800ba68:	f01a 0f02 	tst.w	sl, #2
 800ba6c:	d006      	beq.n	800ba7c <__gethex+0x34e>
 800ba6e:	f8d9 3000 	ldr.w	r3, [r9]
 800ba72:	ea4a 0a03 	orr.w	sl, sl, r3
 800ba76:	f01a 0f01 	tst.w	sl, #1
 800ba7a:	d10e      	bne.n	800ba9a <__gethex+0x36c>
 800ba7c:	f047 0710 	orr.w	r7, r7, #16
 800ba80:	e033      	b.n	800baea <__gethex+0x3bc>
 800ba82:	f04f 0a01 	mov.w	sl, #1
 800ba86:	e7d0      	b.n	800ba2a <__gethex+0x2fc>
 800ba88:	2701      	movs	r7, #1
 800ba8a:	e7e2      	b.n	800ba52 <__gethex+0x324>
 800ba8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba8e:	f1c3 0301 	rsb	r3, r3, #1
 800ba92:	9315      	str	r3, [sp, #84]	; 0x54
 800ba94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d0f0      	beq.n	800ba7c <__gethex+0x34e>
 800ba9a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ba9e:	f105 0314 	add.w	r3, r5, #20
 800baa2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800baa6:	eb03 010a 	add.w	r1, r3, sl
 800baaa:	f04f 0c00 	mov.w	ip, #0
 800baae:	4618      	mov	r0, r3
 800bab0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bab8:	d01c      	beq.n	800baf4 <__gethex+0x3c6>
 800baba:	3201      	adds	r2, #1
 800babc:	6002      	str	r2, [r0, #0]
 800babe:	2f02      	cmp	r7, #2
 800bac0:	f105 0314 	add.w	r3, r5, #20
 800bac4:	d138      	bne.n	800bb38 <__gethex+0x40a>
 800bac6:	f8d8 2000 	ldr.w	r2, [r8]
 800baca:	3a01      	subs	r2, #1
 800bacc:	42b2      	cmp	r2, r6
 800bace:	d10a      	bne.n	800bae6 <__gethex+0x3b8>
 800bad0:	1171      	asrs	r1, r6, #5
 800bad2:	2201      	movs	r2, #1
 800bad4:	f006 061f 	and.w	r6, r6, #31
 800bad8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800badc:	fa02 f606 	lsl.w	r6, r2, r6
 800bae0:	421e      	tst	r6, r3
 800bae2:	bf18      	it	ne
 800bae4:	4617      	movne	r7, r2
 800bae6:	f047 0720 	orr.w	r7, r7, #32
 800baea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800baec:	601d      	str	r5, [r3, #0]
 800baee:	9b06      	ldr	r3, [sp, #24]
 800baf0:	601c      	str	r4, [r3, #0]
 800baf2:	e6a4      	b.n	800b83e <__gethex+0x110>
 800baf4:	4299      	cmp	r1, r3
 800baf6:	f843 cc04 	str.w	ip, [r3, #-4]
 800bafa:	d8d8      	bhi.n	800baae <__gethex+0x380>
 800bafc:	68ab      	ldr	r3, [r5, #8]
 800bafe:	4599      	cmp	r9, r3
 800bb00:	db12      	blt.n	800bb28 <__gethex+0x3fa>
 800bb02:	6869      	ldr	r1, [r5, #4]
 800bb04:	9802      	ldr	r0, [sp, #8]
 800bb06:	3101      	adds	r1, #1
 800bb08:	f000 f910 	bl	800bd2c <_Balloc>
 800bb0c:	692a      	ldr	r2, [r5, #16]
 800bb0e:	3202      	adds	r2, #2
 800bb10:	f105 010c 	add.w	r1, r5, #12
 800bb14:	4683      	mov	fp, r0
 800bb16:	0092      	lsls	r2, r2, #2
 800bb18:	300c      	adds	r0, #12
 800bb1a:	f7fd fa59 	bl	8008fd0 <memcpy>
 800bb1e:	4629      	mov	r1, r5
 800bb20:	9802      	ldr	r0, [sp, #8]
 800bb22:	f000 f937 	bl	800bd94 <_Bfree>
 800bb26:	465d      	mov	r5, fp
 800bb28:	692b      	ldr	r3, [r5, #16]
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bb30:	612a      	str	r2, [r5, #16]
 800bb32:	2201      	movs	r2, #1
 800bb34:	615a      	str	r2, [r3, #20]
 800bb36:	e7c2      	b.n	800babe <__gethex+0x390>
 800bb38:	692a      	ldr	r2, [r5, #16]
 800bb3a:	454a      	cmp	r2, r9
 800bb3c:	dd0b      	ble.n	800bb56 <__gethex+0x428>
 800bb3e:	2101      	movs	r1, #1
 800bb40:	4628      	mov	r0, r5
 800bb42:	f7ff fda5 	bl	800b690 <rshift>
 800bb46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb4a:	3401      	adds	r4, #1
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	f6ff aed9 	blt.w	800b904 <__gethex+0x1d6>
 800bb52:	2701      	movs	r7, #1
 800bb54:	e7c7      	b.n	800bae6 <__gethex+0x3b8>
 800bb56:	f016 061f 	ands.w	r6, r6, #31
 800bb5a:	d0fa      	beq.n	800bb52 <__gethex+0x424>
 800bb5c:	449a      	add	sl, r3
 800bb5e:	f1c6 0620 	rsb	r6, r6, #32
 800bb62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bb66:	f000 f9a5 	bl	800beb4 <__hi0bits>
 800bb6a:	42b0      	cmp	r0, r6
 800bb6c:	dbe7      	blt.n	800bb3e <__gethex+0x410>
 800bb6e:	e7f0      	b.n	800bb52 <__gethex+0x424>

0800bb70 <L_shift>:
 800bb70:	f1c2 0208 	rsb	r2, r2, #8
 800bb74:	0092      	lsls	r2, r2, #2
 800bb76:	b570      	push	{r4, r5, r6, lr}
 800bb78:	f1c2 0620 	rsb	r6, r2, #32
 800bb7c:	6843      	ldr	r3, [r0, #4]
 800bb7e:	6804      	ldr	r4, [r0, #0]
 800bb80:	fa03 f506 	lsl.w	r5, r3, r6
 800bb84:	432c      	orrs	r4, r5
 800bb86:	40d3      	lsrs	r3, r2
 800bb88:	6004      	str	r4, [r0, #0]
 800bb8a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb8e:	4288      	cmp	r0, r1
 800bb90:	d3f4      	bcc.n	800bb7c <L_shift+0xc>
 800bb92:	bd70      	pop	{r4, r5, r6, pc}

0800bb94 <__match>:
 800bb94:	b530      	push	{r4, r5, lr}
 800bb96:	6803      	ldr	r3, [r0, #0]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb9e:	b914      	cbnz	r4, 800bba6 <__match+0x12>
 800bba0:	6003      	str	r3, [r0, #0]
 800bba2:	2001      	movs	r0, #1
 800bba4:	bd30      	pop	{r4, r5, pc}
 800bba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bbae:	2d19      	cmp	r5, #25
 800bbb0:	bf98      	it	ls
 800bbb2:	3220      	addls	r2, #32
 800bbb4:	42a2      	cmp	r2, r4
 800bbb6:	d0f0      	beq.n	800bb9a <__match+0x6>
 800bbb8:	2000      	movs	r0, #0
 800bbba:	e7f3      	b.n	800bba4 <__match+0x10>

0800bbbc <__hexnan>:
 800bbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	680b      	ldr	r3, [r1, #0]
 800bbc2:	6801      	ldr	r1, [r0, #0]
 800bbc4:	115f      	asrs	r7, r3, #5
 800bbc6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800bbca:	f013 031f 	ands.w	r3, r3, #31
 800bbce:	b087      	sub	sp, #28
 800bbd0:	bf18      	it	ne
 800bbd2:	3704      	addne	r7, #4
 800bbd4:	2500      	movs	r5, #0
 800bbd6:	1f3e      	subs	r6, r7, #4
 800bbd8:	4682      	mov	sl, r0
 800bbda:	4690      	mov	r8, r2
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	f847 5c04 	str.w	r5, [r7, #-4]
 800bbe2:	46b1      	mov	r9, r6
 800bbe4:	4634      	mov	r4, r6
 800bbe6:	9502      	str	r5, [sp, #8]
 800bbe8:	46ab      	mov	fp, r5
 800bbea:	784a      	ldrb	r2, [r1, #1]
 800bbec:	1c4b      	adds	r3, r1, #1
 800bbee:	9303      	str	r3, [sp, #12]
 800bbf0:	b342      	cbz	r2, 800bc44 <__hexnan+0x88>
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	9105      	str	r1, [sp, #20]
 800bbf6:	9204      	str	r2, [sp, #16]
 800bbf8:	f7ff fd84 	bl	800b704 <__hexdig_fun>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d143      	bne.n	800bc88 <__hexnan+0xcc>
 800bc00:	9a04      	ldr	r2, [sp, #16]
 800bc02:	9905      	ldr	r1, [sp, #20]
 800bc04:	2a20      	cmp	r2, #32
 800bc06:	d818      	bhi.n	800bc3a <__hexnan+0x7e>
 800bc08:	9b02      	ldr	r3, [sp, #8]
 800bc0a:	459b      	cmp	fp, r3
 800bc0c:	dd13      	ble.n	800bc36 <__hexnan+0x7a>
 800bc0e:	454c      	cmp	r4, r9
 800bc10:	d206      	bcs.n	800bc20 <__hexnan+0x64>
 800bc12:	2d07      	cmp	r5, #7
 800bc14:	dc04      	bgt.n	800bc20 <__hexnan+0x64>
 800bc16:	462a      	mov	r2, r5
 800bc18:	4649      	mov	r1, r9
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f7ff ffa8 	bl	800bb70 <L_shift>
 800bc20:	4544      	cmp	r4, r8
 800bc22:	d944      	bls.n	800bcae <__hexnan+0xf2>
 800bc24:	2300      	movs	r3, #0
 800bc26:	f1a4 0904 	sub.w	r9, r4, #4
 800bc2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc2e:	f8cd b008 	str.w	fp, [sp, #8]
 800bc32:	464c      	mov	r4, r9
 800bc34:	461d      	mov	r5, r3
 800bc36:	9903      	ldr	r1, [sp, #12]
 800bc38:	e7d7      	b.n	800bbea <__hexnan+0x2e>
 800bc3a:	2a29      	cmp	r2, #41	; 0x29
 800bc3c:	d14a      	bne.n	800bcd4 <__hexnan+0x118>
 800bc3e:	3102      	adds	r1, #2
 800bc40:	f8ca 1000 	str.w	r1, [sl]
 800bc44:	f1bb 0f00 	cmp.w	fp, #0
 800bc48:	d044      	beq.n	800bcd4 <__hexnan+0x118>
 800bc4a:	454c      	cmp	r4, r9
 800bc4c:	d206      	bcs.n	800bc5c <__hexnan+0xa0>
 800bc4e:	2d07      	cmp	r5, #7
 800bc50:	dc04      	bgt.n	800bc5c <__hexnan+0xa0>
 800bc52:	462a      	mov	r2, r5
 800bc54:	4649      	mov	r1, r9
 800bc56:	4620      	mov	r0, r4
 800bc58:	f7ff ff8a 	bl	800bb70 <L_shift>
 800bc5c:	4544      	cmp	r4, r8
 800bc5e:	d928      	bls.n	800bcb2 <__hexnan+0xf6>
 800bc60:	4643      	mov	r3, r8
 800bc62:	f854 2b04 	ldr.w	r2, [r4], #4
 800bc66:	f843 2b04 	str.w	r2, [r3], #4
 800bc6a:	42a6      	cmp	r6, r4
 800bc6c:	d2f9      	bcs.n	800bc62 <__hexnan+0xa6>
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f843 2b04 	str.w	r2, [r3], #4
 800bc74:	429e      	cmp	r6, r3
 800bc76:	d2fb      	bcs.n	800bc70 <__hexnan+0xb4>
 800bc78:	6833      	ldr	r3, [r6, #0]
 800bc7a:	b91b      	cbnz	r3, 800bc84 <__hexnan+0xc8>
 800bc7c:	4546      	cmp	r6, r8
 800bc7e:	d127      	bne.n	800bcd0 <__hexnan+0x114>
 800bc80:	2301      	movs	r3, #1
 800bc82:	6033      	str	r3, [r6, #0]
 800bc84:	2005      	movs	r0, #5
 800bc86:	e026      	b.n	800bcd6 <__hexnan+0x11a>
 800bc88:	3501      	adds	r5, #1
 800bc8a:	2d08      	cmp	r5, #8
 800bc8c:	f10b 0b01 	add.w	fp, fp, #1
 800bc90:	dd06      	ble.n	800bca0 <__hexnan+0xe4>
 800bc92:	4544      	cmp	r4, r8
 800bc94:	d9cf      	bls.n	800bc36 <__hexnan+0x7a>
 800bc96:	2300      	movs	r3, #0
 800bc98:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc9c:	2501      	movs	r5, #1
 800bc9e:	3c04      	subs	r4, #4
 800bca0:	6822      	ldr	r2, [r4, #0]
 800bca2:	f000 000f 	and.w	r0, r0, #15
 800bca6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bcaa:	6020      	str	r0, [r4, #0]
 800bcac:	e7c3      	b.n	800bc36 <__hexnan+0x7a>
 800bcae:	2508      	movs	r5, #8
 800bcb0:	e7c1      	b.n	800bc36 <__hexnan+0x7a>
 800bcb2:	9b01      	ldr	r3, [sp, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d0df      	beq.n	800bc78 <__hexnan+0xbc>
 800bcb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbc:	f1c3 0320 	rsb	r3, r3, #32
 800bcc0:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800bcc8:	401a      	ands	r2, r3
 800bcca:	f847 2c04 	str.w	r2, [r7, #-4]
 800bcce:	e7d3      	b.n	800bc78 <__hexnan+0xbc>
 800bcd0:	3e04      	subs	r6, #4
 800bcd2:	e7d1      	b.n	800bc78 <__hexnan+0xbc>
 800bcd4:	2004      	movs	r0, #4
 800bcd6:	b007      	add	sp, #28
 800bcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcdc <__locale_ctype_ptr_l>:
 800bcdc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bce0:	4770      	bx	lr

0800bce2 <__localeconv_l>:
 800bce2:	30f0      	adds	r0, #240	; 0xf0
 800bce4:	4770      	bx	lr
	...

0800bce8 <_localeconv_r>:
 800bce8:	4b04      	ldr	r3, [pc, #16]	; (800bcfc <_localeconv_r+0x14>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6a18      	ldr	r0, [r3, #32]
 800bcee:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <_localeconv_r+0x18>)
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	bf08      	it	eq
 800bcf4:	4618      	moveq	r0, r3
 800bcf6:	30f0      	adds	r0, #240	; 0xf0
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	24000010 	.word	0x24000010
 800bd00:	24000074 	.word	0x24000074

0800bd04 <__ascii_mbtowc>:
 800bd04:	b082      	sub	sp, #8
 800bd06:	b901      	cbnz	r1, 800bd0a <__ascii_mbtowc+0x6>
 800bd08:	a901      	add	r1, sp, #4
 800bd0a:	b142      	cbz	r2, 800bd1e <__ascii_mbtowc+0x1a>
 800bd0c:	b14b      	cbz	r3, 800bd22 <__ascii_mbtowc+0x1e>
 800bd0e:	7813      	ldrb	r3, [r2, #0]
 800bd10:	600b      	str	r3, [r1, #0]
 800bd12:	7812      	ldrb	r2, [r2, #0]
 800bd14:	1c10      	adds	r0, r2, #0
 800bd16:	bf18      	it	ne
 800bd18:	2001      	movne	r0, #1
 800bd1a:	b002      	add	sp, #8
 800bd1c:	4770      	bx	lr
 800bd1e:	4610      	mov	r0, r2
 800bd20:	e7fb      	b.n	800bd1a <__ascii_mbtowc+0x16>
 800bd22:	f06f 0001 	mvn.w	r0, #1
 800bd26:	e7f8      	b.n	800bd1a <__ascii_mbtowc+0x16>

0800bd28 <__malloc_lock>:
 800bd28:	4770      	bx	lr

0800bd2a <__malloc_unlock>:
 800bd2a:	4770      	bx	lr

0800bd2c <_Balloc>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd30:	4604      	mov	r4, r0
 800bd32:	460e      	mov	r6, r1
 800bd34:	b93d      	cbnz	r5, 800bd46 <_Balloc+0x1a>
 800bd36:	2010      	movs	r0, #16
 800bd38:	f7fd f93a 	bl	8008fb0 <malloc>
 800bd3c:	6260      	str	r0, [r4, #36]	; 0x24
 800bd3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd42:	6005      	str	r5, [r0, #0]
 800bd44:	60c5      	str	r5, [r0, #12]
 800bd46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bd48:	68eb      	ldr	r3, [r5, #12]
 800bd4a:	b183      	cbz	r3, 800bd6e <_Balloc+0x42>
 800bd4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bd54:	b9b8      	cbnz	r0, 800bd86 <_Balloc+0x5a>
 800bd56:	2101      	movs	r1, #1
 800bd58:	fa01 f506 	lsl.w	r5, r1, r6
 800bd5c:	1d6a      	adds	r2, r5, #5
 800bd5e:	0092      	lsls	r2, r2, #2
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 fbe3 	bl	800c52c <_calloc_r>
 800bd66:	b160      	cbz	r0, 800bd82 <_Balloc+0x56>
 800bd68:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bd6c:	e00e      	b.n	800bd8c <_Balloc+0x60>
 800bd6e:	2221      	movs	r2, #33	; 0x21
 800bd70:	2104      	movs	r1, #4
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 fbda 	bl	800c52c <_calloc_r>
 800bd78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd7a:	60e8      	str	r0, [r5, #12]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1e4      	bne.n	800bd4c <_Balloc+0x20>
 800bd82:	2000      	movs	r0, #0
 800bd84:	bd70      	pop	{r4, r5, r6, pc}
 800bd86:	6802      	ldr	r2, [r0, #0]
 800bd88:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd92:	e7f7      	b.n	800bd84 <_Balloc+0x58>

0800bd94 <_Bfree>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bd98:	4606      	mov	r6, r0
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	b93c      	cbnz	r4, 800bdae <_Bfree+0x1a>
 800bd9e:	2010      	movs	r0, #16
 800bda0:	f7fd f906 	bl	8008fb0 <malloc>
 800bda4:	6270      	str	r0, [r6, #36]	; 0x24
 800bda6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdaa:	6004      	str	r4, [r0, #0]
 800bdac:	60c4      	str	r4, [r0, #12]
 800bdae:	b13d      	cbz	r5, 800bdc0 <_Bfree+0x2c>
 800bdb0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bdb2:	686a      	ldr	r2, [r5, #4]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdba:	6029      	str	r1, [r5, #0]
 800bdbc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bdc0:	bd70      	pop	{r4, r5, r6, pc}

0800bdc2 <__multadd>:
 800bdc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc6:	690d      	ldr	r5, [r1, #16]
 800bdc8:	461f      	mov	r7, r3
 800bdca:	4606      	mov	r6, r0
 800bdcc:	460c      	mov	r4, r1
 800bdce:	f101 0c14 	add.w	ip, r1, #20
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f8dc 0000 	ldr.w	r0, [ip]
 800bdd8:	b281      	uxth	r1, r0
 800bdda:	fb02 7101 	mla	r1, r2, r1, r7
 800bdde:	0c0f      	lsrs	r7, r1, #16
 800bde0:	0c00      	lsrs	r0, r0, #16
 800bde2:	fb02 7000 	mla	r0, r2, r0, r7
 800bde6:	b289      	uxth	r1, r1
 800bde8:	3301      	adds	r3, #1
 800bdea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bdee:	429d      	cmp	r5, r3
 800bdf0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bdf4:	f84c 1b04 	str.w	r1, [ip], #4
 800bdf8:	dcec      	bgt.n	800bdd4 <__multadd+0x12>
 800bdfa:	b1d7      	cbz	r7, 800be32 <__multadd+0x70>
 800bdfc:	68a3      	ldr	r3, [r4, #8]
 800bdfe:	42ab      	cmp	r3, r5
 800be00:	dc12      	bgt.n	800be28 <__multadd+0x66>
 800be02:	6861      	ldr	r1, [r4, #4]
 800be04:	4630      	mov	r0, r6
 800be06:	3101      	adds	r1, #1
 800be08:	f7ff ff90 	bl	800bd2c <_Balloc>
 800be0c:	6922      	ldr	r2, [r4, #16]
 800be0e:	3202      	adds	r2, #2
 800be10:	f104 010c 	add.w	r1, r4, #12
 800be14:	4680      	mov	r8, r0
 800be16:	0092      	lsls	r2, r2, #2
 800be18:	300c      	adds	r0, #12
 800be1a:	f7fd f8d9 	bl	8008fd0 <memcpy>
 800be1e:	4621      	mov	r1, r4
 800be20:	4630      	mov	r0, r6
 800be22:	f7ff ffb7 	bl	800bd94 <_Bfree>
 800be26:	4644      	mov	r4, r8
 800be28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be2c:	3501      	adds	r5, #1
 800be2e:	615f      	str	r7, [r3, #20]
 800be30:	6125      	str	r5, [r4, #16]
 800be32:	4620      	mov	r0, r4
 800be34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800be38 <__s2b>:
 800be38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be3c:	460c      	mov	r4, r1
 800be3e:	4615      	mov	r5, r2
 800be40:	461f      	mov	r7, r3
 800be42:	2209      	movs	r2, #9
 800be44:	3308      	adds	r3, #8
 800be46:	4606      	mov	r6, r0
 800be48:	fb93 f3f2 	sdiv	r3, r3, r2
 800be4c:	2100      	movs	r1, #0
 800be4e:	2201      	movs	r2, #1
 800be50:	429a      	cmp	r2, r3
 800be52:	db20      	blt.n	800be96 <__s2b+0x5e>
 800be54:	4630      	mov	r0, r6
 800be56:	f7ff ff69 	bl	800bd2c <_Balloc>
 800be5a:	9b08      	ldr	r3, [sp, #32]
 800be5c:	6143      	str	r3, [r0, #20]
 800be5e:	2d09      	cmp	r5, #9
 800be60:	f04f 0301 	mov.w	r3, #1
 800be64:	6103      	str	r3, [r0, #16]
 800be66:	dd19      	ble.n	800be9c <__s2b+0x64>
 800be68:	f104 0809 	add.w	r8, r4, #9
 800be6c:	46c1      	mov	r9, r8
 800be6e:	442c      	add	r4, r5
 800be70:	f819 3b01 	ldrb.w	r3, [r9], #1
 800be74:	4601      	mov	r1, r0
 800be76:	3b30      	subs	r3, #48	; 0x30
 800be78:	220a      	movs	r2, #10
 800be7a:	4630      	mov	r0, r6
 800be7c:	f7ff ffa1 	bl	800bdc2 <__multadd>
 800be80:	45a1      	cmp	r9, r4
 800be82:	d1f5      	bne.n	800be70 <__s2b+0x38>
 800be84:	eb08 0405 	add.w	r4, r8, r5
 800be88:	3c08      	subs	r4, #8
 800be8a:	1b2d      	subs	r5, r5, r4
 800be8c:	1963      	adds	r3, r4, r5
 800be8e:	42bb      	cmp	r3, r7
 800be90:	db07      	blt.n	800bea2 <__s2b+0x6a>
 800be92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be96:	0052      	lsls	r2, r2, #1
 800be98:	3101      	adds	r1, #1
 800be9a:	e7d9      	b.n	800be50 <__s2b+0x18>
 800be9c:	340a      	adds	r4, #10
 800be9e:	2509      	movs	r5, #9
 800bea0:	e7f3      	b.n	800be8a <__s2b+0x52>
 800bea2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bea6:	4601      	mov	r1, r0
 800bea8:	3b30      	subs	r3, #48	; 0x30
 800beaa:	220a      	movs	r2, #10
 800beac:	4630      	mov	r0, r6
 800beae:	f7ff ff88 	bl	800bdc2 <__multadd>
 800beb2:	e7eb      	b.n	800be8c <__s2b+0x54>

0800beb4 <__hi0bits>:
 800beb4:	0c02      	lsrs	r2, r0, #16
 800beb6:	0412      	lsls	r2, r2, #16
 800beb8:	4603      	mov	r3, r0
 800beba:	b9b2      	cbnz	r2, 800beea <__hi0bits+0x36>
 800bebc:	0403      	lsls	r3, r0, #16
 800bebe:	2010      	movs	r0, #16
 800bec0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bec4:	bf04      	itt	eq
 800bec6:	021b      	lsleq	r3, r3, #8
 800bec8:	3008      	addeq	r0, #8
 800beca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bece:	bf04      	itt	eq
 800bed0:	011b      	lsleq	r3, r3, #4
 800bed2:	3004      	addeq	r0, #4
 800bed4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bed8:	bf04      	itt	eq
 800beda:	009b      	lsleq	r3, r3, #2
 800bedc:	3002      	addeq	r0, #2
 800bede:	2b00      	cmp	r3, #0
 800bee0:	db06      	blt.n	800bef0 <__hi0bits+0x3c>
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	d503      	bpl.n	800beee <__hi0bits+0x3a>
 800bee6:	3001      	adds	r0, #1
 800bee8:	4770      	bx	lr
 800beea:	2000      	movs	r0, #0
 800beec:	e7e8      	b.n	800bec0 <__hi0bits+0xc>
 800beee:	2020      	movs	r0, #32
 800bef0:	4770      	bx	lr

0800bef2 <__lo0bits>:
 800bef2:	6803      	ldr	r3, [r0, #0]
 800bef4:	f013 0207 	ands.w	r2, r3, #7
 800bef8:	4601      	mov	r1, r0
 800befa:	d00b      	beq.n	800bf14 <__lo0bits+0x22>
 800befc:	07da      	lsls	r2, r3, #31
 800befe:	d423      	bmi.n	800bf48 <__lo0bits+0x56>
 800bf00:	0798      	lsls	r0, r3, #30
 800bf02:	bf49      	itett	mi
 800bf04:	085b      	lsrmi	r3, r3, #1
 800bf06:	089b      	lsrpl	r3, r3, #2
 800bf08:	2001      	movmi	r0, #1
 800bf0a:	600b      	strmi	r3, [r1, #0]
 800bf0c:	bf5c      	itt	pl
 800bf0e:	600b      	strpl	r3, [r1, #0]
 800bf10:	2002      	movpl	r0, #2
 800bf12:	4770      	bx	lr
 800bf14:	b298      	uxth	r0, r3
 800bf16:	b9a8      	cbnz	r0, 800bf44 <__lo0bits+0x52>
 800bf18:	0c1b      	lsrs	r3, r3, #16
 800bf1a:	2010      	movs	r0, #16
 800bf1c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bf20:	bf04      	itt	eq
 800bf22:	0a1b      	lsreq	r3, r3, #8
 800bf24:	3008      	addeq	r0, #8
 800bf26:	071a      	lsls	r2, r3, #28
 800bf28:	bf04      	itt	eq
 800bf2a:	091b      	lsreq	r3, r3, #4
 800bf2c:	3004      	addeq	r0, #4
 800bf2e:	079a      	lsls	r2, r3, #30
 800bf30:	bf04      	itt	eq
 800bf32:	089b      	lsreq	r3, r3, #2
 800bf34:	3002      	addeq	r0, #2
 800bf36:	07da      	lsls	r2, r3, #31
 800bf38:	d402      	bmi.n	800bf40 <__lo0bits+0x4e>
 800bf3a:	085b      	lsrs	r3, r3, #1
 800bf3c:	d006      	beq.n	800bf4c <__lo0bits+0x5a>
 800bf3e:	3001      	adds	r0, #1
 800bf40:	600b      	str	r3, [r1, #0]
 800bf42:	4770      	bx	lr
 800bf44:	4610      	mov	r0, r2
 800bf46:	e7e9      	b.n	800bf1c <__lo0bits+0x2a>
 800bf48:	2000      	movs	r0, #0
 800bf4a:	4770      	bx	lr
 800bf4c:	2020      	movs	r0, #32
 800bf4e:	4770      	bx	lr

0800bf50 <__i2b>:
 800bf50:	b510      	push	{r4, lr}
 800bf52:	460c      	mov	r4, r1
 800bf54:	2101      	movs	r1, #1
 800bf56:	f7ff fee9 	bl	800bd2c <_Balloc>
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	6144      	str	r4, [r0, #20]
 800bf5e:	6102      	str	r2, [r0, #16]
 800bf60:	bd10      	pop	{r4, pc}

0800bf62 <__multiply>:
 800bf62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf66:	4614      	mov	r4, r2
 800bf68:	690a      	ldr	r2, [r1, #16]
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	bfb8      	it	lt
 800bf70:	460b      	movlt	r3, r1
 800bf72:	4688      	mov	r8, r1
 800bf74:	bfbc      	itt	lt
 800bf76:	46a0      	movlt	r8, r4
 800bf78:	461c      	movlt	r4, r3
 800bf7a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bf82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf86:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf8a:	eb07 0609 	add.w	r6, r7, r9
 800bf8e:	42b3      	cmp	r3, r6
 800bf90:	bfb8      	it	lt
 800bf92:	3101      	addlt	r1, #1
 800bf94:	f7ff feca 	bl	800bd2c <_Balloc>
 800bf98:	f100 0514 	add.w	r5, r0, #20
 800bf9c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bfa0:	462b      	mov	r3, r5
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4573      	cmp	r3, lr
 800bfa6:	d316      	bcc.n	800bfd6 <__multiply+0x74>
 800bfa8:	f104 0214 	add.w	r2, r4, #20
 800bfac:	f108 0114 	add.w	r1, r8, #20
 800bfb0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bfb4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	9b00      	ldr	r3, [sp, #0]
 800bfbc:	9201      	str	r2, [sp, #4]
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d80c      	bhi.n	800bfdc <__multiply+0x7a>
 800bfc2:	2e00      	cmp	r6, #0
 800bfc4:	dd03      	ble.n	800bfce <__multiply+0x6c>
 800bfc6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d05d      	beq.n	800c08a <__multiply+0x128>
 800bfce:	6106      	str	r6, [r0, #16]
 800bfd0:	b003      	add	sp, #12
 800bfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd6:	f843 2b04 	str.w	r2, [r3], #4
 800bfda:	e7e3      	b.n	800bfa4 <__multiply+0x42>
 800bfdc:	f8b2 b000 	ldrh.w	fp, [r2]
 800bfe0:	f1bb 0f00 	cmp.w	fp, #0
 800bfe4:	d023      	beq.n	800c02e <__multiply+0xcc>
 800bfe6:	4689      	mov	r9, r1
 800bfe8:	46ac      	mov	ip, r5
 800bfea:	f04f 0800 	mov.w	r8, #0
 800bfee:	f859 4b04 	ldr.w	r4, [r9], #4
 800bff2:	f8dc a000 	ldr.w	sl, [ip]
 800bff6:	b2a3      	uxth	r3, r4
 800bff8:	fa1f fa8a 	uxth.w	sl, sl
 800bffc:	fb0b a303 	mla	r3, fp, r3, sl
 800c000:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c004:	f8dc 4000 	ldr.w	r4, [ip]
 800c008:	4443      	add	r3, r8
 800c00a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c00e:	fb0b 840a 	mla	r4, fp, sl, r8
 800c012:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c016:	46e2      	mov	sl, ip
 800c018:	b29b      	uxth	r3, r3
 800c01a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c01e:	454f      	cmp	r7, r9
 800c020:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c024:	f84a 3b04 	str.w	r3, [sl], #4
 800c028:	d82b      	bhi.n	800c082 <__multiply+0x120>
 800c02a:	f8cc 8004 	str.w	r8, [ip, #4]
 800c02e:	9b01      	ldr	r3, [sp, #4]
 800c030:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c034:	3204      	adds	r2, #4
 800c036:	f1ba 0f00 	cmp.w	sl, #0
 800c03a:	d020      	beq.n	800c07e <__multiply+0x11c>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	4689      	mov	r9, r1
 800c040:	46a8      	mov	r8, r5
 800c042:	f04f 0b00 	mov.w	fp, #0
 800c046:	f8b9 c000 	ldrh.w	ip, [r9]
 800c04a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c04e:	fb0a 440c 	mla	r4, sl, ip, r4
 800c052:	445c      	add	r4, fp
 800c054:	46c4      	mov	ip, r8
 800c056:	b29b      	uxth	r3, r3
 800c058:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c05c:	f84c 3b04 	str.w	r3, [ip], #4
 800c060:	f859 3b04 	ldr.w	r3, [r9], #4
 800c064:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c068:	0c1b      	lsrs	r3, r3, #16
 800c06a:	fb0a b303 	mla	r3, sl, r3, fp
 800c06e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c072:	454f      	cmp	r7, r9
 800c074:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c078:	d805      	bhi.n	800c086 <__multiply+0x124>
 800c07a:	f8c8 3004 	str.w	r3, [r8, #4]
 800c07e:	3504      	adds	r5, #4
 800c080:	e79b      	b.n	800bfba <__multiply+0x58>
 800c082:	46d4      	mov	ip, sl
 800c084:	e7b3      	b.n	800bfee <__multiply+0x8c>
 800c086:	46e0      	mov	r8, ip
 800c088:	e7dd      	b.n	800c046 <__multiply+0xe4>
 800c08a:	3e01      	subs	r6, #1
 800c08c:	e799      	b.n	800bfc2 <__multiply+0x60>
	...

0800c090 <__pow5mult>:
 800c090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c094:	4615      	mov	r5, r2
 800c096:	f012 0203 	ands.w	r2, r2, #3
 800c09a:	4606      	mov	r6, r0
 800c09c:	460f      	mov	r7, r1
 800c09e:	d007      	beq.n	800c0b0 <__pow5mult+0x20>
 800c0a0:	3a01      	subs	r2, #1
 800c0a2:	4c21      	ldr	r4, [pc, #132]	; (800c128 <__pow5mult+0x98>)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0aa:	f7ff fe8a 	bl	800bdc2 <__multadd>
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	10ad      	asrs	r5, r5, #2
 800c0b2:	d035      	beq.n	800c120 <__pow5mult+0x90>
 800c0b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c0b6:	b93c      	cbnz	r4, 800c0c8 <__pow5mult+0x38>
 800c0b8:	2010      	movs	r0, #16
 800c0ba:	f7fc ff79 	bl	8008fb0 <malloc>
 800c0be:	6270      	str	r0, [r6, #36]	; 0x24
 800c0c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0c4:	6004      	str	r4, [r0, #0]
 800c0c6:	60c4      	str	r4, [r0, #12]
 800c0c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c0cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0d0:	b94c      	cbnz	r4, 800c0e6 <__pow5mult+0x56>
 800c0d2:	f240 2171 	movw	r1, #625	; 0x271
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	f7ff ff3a 	bl	800bf50 <__i2b>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	6003      	str	r3, [r0, #0]
 800c0e6:	f04f 0800 	mov.w	r8, #0
 800c0ea:	07eb      	lsls	r3, r5, #31
 800c0ec:	d50a      	bpl.n	800c104 <__pow5mult+0x74>
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	4622      	mov	r2, r4
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f7ff ff35 	bl	800bf62 <__multiply>
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	4681      	mov	r9, r0
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7ff fe49 	bl	800bd94 <_Bfree>
 800c102:	464f      	mov	r7, r9
 800c104:	106d      	asrs	r5, r5, #1
 800c106:	d00b      	beq.n	800c120 <__pow5mult+0x90>
 800c108:	6820      	ldr	r0, [r4, #0]
 800c10a:	b938      	cbnz	r0, 800c11c <__pow5mult+0x8c>
 800c10c:	4622      	mov	r2, r4
 800c10e:	4621      	mov	r1, r4
 800c110:	4630      	mov	r0, r6
 800c112:	f7ff ff26 	bl	800bf62 <__multiply>
 800c116:	6020      	str	r0, [r4, #0]
 800c118:	f8c0 8000 	str.w	r8, [r0]
 800c11c:	4604      	mov	r4, r0
 800c11e:	e7e4      	b.n	800c0ea <__pow5mult+0x5a>
 800c120:	4638      	mov	r0, r7
 800c122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c126:	bf00      	nop
 800c128:	080128a0 	.word	0x080128a0

0800c12c <__lshift>:
 800c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c130:	460c      	mov	r4, r1
 800c132:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c136:	6923      	ldr	r3, [r4, #16]
 800c138:	6849      	ldr	r1, [r1, #4]
 800c13a:	eb0a 0903 	add.w	r9, sl, r3
 800c13e:	68a3      	ldr	r3, [r4, #8]
 800c140:	4607      	mov	r7, r0
 800c142:	4616      	mov	r6, r2
 800c144:	f109 0501 	add.w	r5, r9, #1
 800c148:	42ab      	cmp	r3, r5
 800c14a:	db32      	blt.n	800c1b2 <__lshift+0x86>
 800c14c:	4638      	mov	r0, r7
 800c14e:	f7ff fded 	bl	800bd2c <_Balloc>
 800c152:	2300      	movs	r3, #0
 800c154:	4680      	mov	r8, r0
 800c156:	f100 0114 	add.w	r1, r0, #20
 800c15a:	461a      	mov	r2, r3
 800c15c:	4553      	cmp	r3, sl
 800c15e:	db2b      	blt.n	800c1b8 <__lshift+0x8c>
 800c160:	6920      	ldr	r0, [r4, #16]
 800c162:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c166:	f104 0314 	add.w	r3, r4, #20
 800c16a:	f016 021f 	ands.w	r2, r6, #31
 800c16e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c172:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c176:	d025      	beq.n	800c1c4 <__lshift+0x98>
 800c178:	f1c2 0e20 	rsb	lr, r2, #32
 800c17c:	2000      	movs	r0, #0
 800c17e:	681e      	ldr	r6, [r3, #0]
 800c180:	468a      	mov	sl, r1
 800c182:	4096      	lsls	r6, r2
 800c184:	4330      	orrs	r0, r6
 800c186:	f84a 0b04 	str.w	r0, [sl], #4
 800c18a:	f853 0b04 	ldr.w	r0, [r3], #4
 800c18e:	459c      	cmp	ip, r3
 800c190:	fa20 f00e 	lsr.w	r0, r0, lr
 800c194:	d814      	bhi.n	800c1c0 <__lshift+0x94>
 800c196:	6048      	str	r0, [r1, #4]
 800c198:	b108      	cbz	r0, 800c19e <__lshift+0x72>
 800c19a:	f109 0502 	add.w	r5, r9, #2
 800c19e:	3d01      	subs	r5, #1
 800c1a0:	4638      	mov	r0, r7
 800c1a2:	f8c8 5010 	str.w	r5, [r8, #16]
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	f7ff fdf4 	bl	800bd94 <_Bfree>
 800c1ac:	4640      	mov	r0, r8
 800c1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b2:	3101      	adds	r1, #1
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	e7c7      	b.n	800c148 <__lshift+0x1c>
 800c1b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	e7cd      	b.n	800c15c <__lshift+0x30>
 800c1c0:	4651      	mov	r1, sl
 800c1c2:	e7dc      	b.n	800c17e <__lshift+0x52>
 800c1c4:	3904      	subs	r1, #4
 800c1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1ce:	459c      	cmp	ip, r3
 800c1d0:	d8f9      	bhi.n	800c1c6 <__lshift+0x9a>
 800c1d2:	e7e4      	b.n	800c19e <__lshift+0x72>

0800c1d4 <__mcmp>:
 800c1d4:	6903      	ldr	r3, [r0, #16]
 800c1d6:	690a      	ldr	r2, [r1, #16]
 800c1d8:	1a9b      	subs	r3, r3, r2
 800c1da:	b530      	push	{r4, r5, lr}
 800c1dc:	d10c      	bne.n	800c1f8 <__mcmp+0x24>
 800c1de:	0092      	lsls	r2, r2, #2
 800c1e0:	3014      	adds	r0, #20
 800c1e2:	3114      	adds	r1, #20
 800c1e4:	1884      	adds	r4, r0, r2
 800c1e6:	4411      	add	r1, r2
 800c1e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c1ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c1f0:	4295      	cmp	r5, r2
 800c1f2:	d003      	beq.n	800c1fc <__mcmp+0x28>
 800c1f4:	d305      	bcc.n	800c202 <__mcmp+0x2e>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	bd30      	pop	{r4, r5, pc}
 800c1fc:	42a0      	cmp	r0, r4
 800c1fe:	d3f3      	bcc.n	800c1e8 <__mcmp+0x14>
 800c200:	e7fa      	b.n	800c1f8 <__mcmp+0x24>
 800c202:	f04f 33ff 	mov.w	r3, #4294967295
 800c206:	e7f7      	b.n	800c1f8 <__mcmp+0x24>

0800c208 <__mdiff>:
 800c208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c20c:	460d      	mov	r5, r1
 800c20e:	4607      	mov	r7, r0
 800c210:	4611      	mov	r1, r2
 800c212:	4628      	mov	r0, r5
 800c214:	4614      	mov	r4, r2
 800c216:	f7ff ffdd 	bl	800c1d4 <__mcmp>
 800c21a:	1e06      	subs	r6, r0, #0
 800c21c:	d108      	bne.n	800c230 <__mdiff+0x28>
 800c21e:	4631      	mov	r1, r6
 800c220:	4638      	mov	r0, r7
 800c222:	f7ff fd83 	bl	800bd2c <_Balloc>
 800c226:	2301      	movs	r3, #1
 800c228:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c230:	bfa4      	itt	ge
 800c232:	4623      	movge	r3, r4
 800c234:	462c      	movge	r4, r5
 800c236:	4638      	mov	r0, r7
 800c238:	6861      	ldr	r1, [r4, #4]
 800c23a:	bfa6      	itte	ge
 800c23c:	461d      	movge	r5, r3
 800c23e:	2600      	movge	r6, #0
 800c240:	2601      	movlt	r6, #1
 800c242:	f7ff fd73 	bl	800bd2c <_Balloc>
 800c246:	692b      	ldr	r3, [r5, #16]
 800c248:	60c6      	str	r6, [r0, #12]
 800c24a:	6926      	ldr	r6, [r4, #16]
 800c24c:	f105 0914 	add.w	r9, r5, #20
 800c250:	f104 0214 	add.w	r2, r4, #20
 800c254:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c258:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c25c:	f100 0514 	add.w	r5, r0, #20
 800c260:	f04f 0e00 	mov.w	lr, #0
 800c264:	f852 ab04 	ldr.w	sl, [r2], #4
 800c268:	f859 4b04 	ldr.w	r4, [r9], #4
 800c26c:	fa1e f18a 	uxtah	r1, lr, sl
 800c270:	b2a3      	uxth	r3, r4
 800c272:	1ac9      	subs	r1, r1, r3
 800c274:	0c23      	lsrs	r3, r4, #16
 800c276:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c27a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c27e:	b289      	uxth	r1, r1
 800c280:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c284:	45c8      	cmp	r8, r9
 800c286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c28a:	4694      	mov	ip, r2
 800c28c:	f845 3b04 	str.w	r3, [r5], #4
 800c290:	d8e8      	bhi.n	800c264 <__mdiff+0x5c>
 800c292:	45bc      	cmp	ip, r7
 800c294:	d304      	bcc.n	800c2a0 <__mdiff+0x98>
 800c296:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c29a:	b183      	cbz	r3, 800c2be <__mdiff+0xb6>
 800c29c:	6106      	str	r6, [r0, #16]
 800c29e:	e7c5      	b.n	800c22c <__mdiff+0x24>
 800c2a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c2a4:	fa1e f381 	uxtah	r3, lr, r1
 800c2a8:	141a      	asrs	r2, r3, #16
 800c2aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c2b8:	f845 3b04 	str.w	r3, [r5], #4
 800c2bc:	e7e9      	b.n	800c292 <__mdiff+0x8a>
 800c2be:	3e01      	subs	r6, #1
 800c2c0:	e7e9      	b.n	800c296 <__mdiff+0x8e>
	...

0800c2c4 <__ulp>:
 800c2c4:	4b12      	ldr	r3, [pc, #72]	; (800c310 <__ulp+0x4c>)
 800c2c6:	ee10 2a90 	vmov	r2, s1
 800c2ca:	401a      	ands	r2, r3
 800c2cc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	dd04      	ble.n	800c2de <__ulp+0x1a>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	ec41 0b10 	vmov	d0, r0, r1
 800c2dc:	4770      	bx	lr
 800c2de:	425b      	negs	r3, r3
 800c2e0:	151b      	asrs	r3, r3, #20
 800c2e2:	2b13      	cmp	r3, #19
 800c2e4:	f04f 0000 	mov.w	r0, #0
 800c2e8:	f04f 0100 	mov.w	r1, #0
 800c2ec:	dc04      	bgt.n	800c2f8 <__ulp+0x34>
 800c2ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c2f2:	fa42 f103 	asr.w	r1, r2, r3
 800c2f6:	e7ef      	b.n	800c2d8 <__ulp+0x14>
 800c2f8:	3b14      	subs	r3, #20
 800c2fa:	2b1e      	cmp	r3, #30
 800c2fc:	f04f 0201 	mov.w	r2, #1
 800c300:	bfda      	itte	le
 800c302:	f1c3 031f 	rsble	r3, r3, #31
 800c306:	fa02 f303 	lslle.w	r3, r2, r3
 800c30a:	4613      	movgt	r3, r2
 800c30c:	4618      	mov	r0, r3
 800c30e:	e7e3      	b.n	800c2d8 <__ulp+0x14>
 800c310:	7ff00000 	.word	0x7ff00000

0800c314 <__b2d>:
 800c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c316:	6905      	ldr	r5, [r0, #16]
 800c318:	f100 0714 	add.w	r7, r0, #20
 800c31c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c320:	1f2e      	subs	r6, r5, #4
 800c322:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c326:	4620      	mov	r0, r4
 800c328:	f7ff fdc4 	bl	800beb4 <__hi0bits>
 800c32c:	f1c0 0320 	rsb	r3, r0, #32
 800c330:	280a      	cmp	r0, #10
 800c332:	600b      	str	r3, [r1, #0]
 800c334:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c3ac <__b2d+0x98>
 800c338:	dc14      	bgt.n	800c364 <__b2d+0x50>
 800c33a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c33e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c342:	42b7      	cmp	r7, r6
 800c344:	ea41 030c 	orr.w	r3, r1, ip
 800c348:	bf34      	ite	cc
 800c34a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c34e:	2100      	movcs	r1, #0
 800c350:	3015      	adds	r0, #21
 800c352:	fa04 f000 	lsl.w	r0, r4, r0
 800c356:	fa21 f10e 	lsr.w	r1, r1, lr
 800c35a:	ea40 0201 	orr.w	r2, r0, r1
 800c35e:	ec43 2b10 	vmov	d0, r2, r3
 800c362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c364:	42b7      	cmp	r7, r6
 800c366:	bf3a      	itte	cc
 800c368:	f1a5 0608 	subcc.w	r6, r5, #8
 800c36c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c370:	2100      	movcs	r1, #0
 800c372:	380b      	subs	r0, #11
 800c374:	d015      	beq.n	800c3a2 <__b2d+0x8e>
 800c376:	4084      	lsls	r4, r0
 800c378:	f1c0 0520 	rsb	r5, r0, #32
 800c37c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c380:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c384:	42be      	cmp	r6, r7
 800c386:	fa21 fc05 	lsr.w	ip, r1, r5
 800c38a:	ea44 030c 	orr.w	r3, r4, ip
 800c38e:	bf8c      	ite	hi
 800c390:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c394:	2400      	movls	r4, #0
 800c396:	fa01 f000 	lsl.w	r0, r1, r0
 800c39a:	40ec      	lsrs	r4, r5
 800c39c:	ea40 0204 	orr.w	r2, r0, r4
 800c3a0:	e7dd      	b.n	800c35e <__b2d+0x4a>
 800c3a2:	ea44 030c 	orr.w	r3, r4, ip
 800c3a6:	460a      	mov	r2, r1
 800c3a8:	e7d9      	b.n	800c35e <__b2d+0x4a>
 800c3aa:	bf00      	nop
 800c3ac:	3ff00000 	.word	0x3ff00000

0800c3b0 <__d2b>:
 800c3b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3b4:	460e      	mov	r6, r1
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	ec59 8b10 	vmov	r8, r9, d0
 800c3bc:	4615      	mov	r5, r2
 800c3be:	f7ff fcb5 	bl	800bd2c <_Balloc>
 800c3c2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c3c6:	4607      	mov	r7, r0
 800c3c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3cc:	bb34      	cbnz	r4, 800c41c <__d2b+0x6c>
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	f1b8 0300 	subs.w	r3, r8, #0
 800c3d4:	d027      	beq.n	800c426 <__d2b+0x76>
 800c3d6:	a802      	add	r0, sp, #8
 800c3d8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c3dc:	f7ff fd89 	bl	800bef2 <__lo0bits>
 800c3e0:	9900      	ldr	r1, [sp, #0]
 800c3e2:	b1f0      	cbz	r0, 800c422 <__d2b+0x72>
 800c3e4:	9a01      	ldr	r2, [sp, #4]
 800c3e6:	f1c0 0320 	rsb	r3, r0, #32
 800c3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ee:	430b      	orrs	r3, r1
 800c3f0:	40c2      	lsrs	r2, r0
 800c3f2:	617b      	str	r3, [r7, #20]
 800c3f4:	9201      	str	r2, [sp, #4]
 800c3f6:	9b01      	ldr	r3, [sp, #4]
 800c3f8:	61bb      	str	r3, [r7, #24]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	bf14      	ite	ne
 800c3fe:	2102      	movne	r1, #2
 800c400:	2101      	moveq	r1, #1
 800c402:	6139      	str	r1, [r7, #16]
 800c404:	b1c4      	cbz	r4, 800c438 <__d2b+0x88>
 800c406:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c40a:	4404      	add	r4, r0
 800c40c:	6034      	str	r4, [r6, #0]
 800c40e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c412:	6028      	str	r0, [r5, #0]
 800c414:	4638      	mov	r0, r7
 800c416:	b003      	add	sp, #12
 800c418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c41c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c420:	e7d5      	b.n	800c3ce <__d2b+0x1e>
 800c422:	6179      	str	r1, [r7, #20]
 800c424:	e7e7      	b.n	800c3f6 <__d2b+0x46>
 800c426:	a801      	add	r0, sp, #4
 800c428:	f7ff fd63 	bl	800bef2 <__lo0bits>
 800c42c:	9b01      	ldr	r3, [sp, #4]
 800c42e:	617b      	str	r3, [r7, #20]
 800c430:	2101      	movs	r1, #1
 800c432:	6139      	str	r1, [r7, #16]
 800c434:	3020      	adds	r0, #32
 800c436:	e7e5      	b.n	800c404 <__d2b+0x54>
 800c438:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c43c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c440:	6030      	str	r0, [r6, #0]
 800c442:	6918      	ldr	r0, [r3, #16]
 800c444:	f7ff fd36 	bl	800beb4 <__hi0bits>
 800c448:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c44c:	e7e1      	b.n	800c412 <__d2b+0x62>

0800c44e <__ratio>:
 800c44e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c452:	4688      	mov	r8, r1
 800c454:	4669      	mov	r1, sp
 800c456:	4681      	mov	r9, r0
 800c458:	f7ff ff5c 	bl	800c314 <__b2d>
 800c45c:	a901      	add	r1, sp, #4
 800c45e:	4640      	mov	r0, r8
 800c460:	ec57 6b10 	vmov	r6, r7, d0
 800c464:	ee10 4a10 	vmov	r4, s0
 800c468:	f7ff ff54 	bl	800c314 <__b2d>
 800c46c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c470:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c474:	eba3 0c02 	sub.w	ip, r3, r2
 800c478:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c47c:	1a9b      	subs	r3, r3, r2
 800c47e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c482:	ec51 0b10 	vmov	r0, r1, d0
 800c486:	2b00      	cmp	r3, #0
 800c488:	ee10 aa10 	vmov	sl, s0
 800c48c:	bfce      	itee	gt
 800c48e:	463a      	movgt	r2, r7
 800c490:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c494:	460a      	movle	r2, r1
 800c496:	463d      	mov	r5, r7
 800c498:	468b      	mov	fp, r1
 800c49a:	bfcc      	ite	gt
 800c49c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c4a0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c4a4:	ec45 4b17 	vmov	d7, r4, r5
 800c4a8:	ec4b ab16 	vmov	d6, sl, fp
 800c4ac:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800c4b0:	b003      	add	sp, #12
 800c4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4b6 <__copybits>:
 800c4b6:	3901      	subs	r1, #1
 800c4b8:	b510      	push	{r4, lr}
 800c4ba:	1149      	asrs	r1, r1, #5
 800c4bc:	6914      	ldr	r4, [r2, #16]
 800c4be:	3101      	adds	r1, #1
 800c4c0:	f102 0314 	add.w	r3, r2, #20
 800c4c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	d303      	bcc.n	800c4da <__copybits+0x24>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	428a      	cmp	r2, r1
 800c4d6:	d305      	bcc.n	800c4e4 <__copybits+0x2e>
 800c4d8:	bd10      	pop	{r4, pc}
 800c4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4de:	f840 2b04 	str.w	r2, [r0], #4
 800c4e2:	e7f3      	b.n	800c4cc <__copybits+0x16>
 800c4e4:	f842 3b04 	str.w	r3, [r2], #4
 800c4e8:	e7f4      	b.n	800c4d4 <__copybits+0x1e>

0800c4ea <__any_on>:
 800c4ea:	f100 0214 	add.w	r2, r0, #20
 800c4ee:	6900      	ldr	r0, [r0, #16]
 800c4f0:	114b      	asrs	r3, r1, #5
 800c4f2:	4298      	cmp	r0, r3
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	db11      	blt.n	800c51c <__any_on+0x32>
 800c4f8:	dd0a      	ble.n	800c510 <__any_on+0x26>
 800c4fa:	f011 011f 	ands.w	r1, r1, #31
 800c4fe:	d007      	beq.n	800c510 <__any_on+0x26>
 800c500:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c504:	fa24 f001 	lsr.w	r0, r4, r1
 800c508:	fa00 f101 	lsl.w	r1, r0, r1
 800c50c:	428c      	cmp	r4, r1
 800c50e:	d10b      	bne.n	800c528 <__any_on+0x3e>
 800c510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c514:	4293      	cmp	r3, r2
 800c516:	d803      	bhi.n	800c520 <__any_on+0x36>
 800c518:	2000      	movs	r0, #0
 800c51a:	bd10      	pop	{r4, pc}
 800c51c:	4603      	mov	r3, r0
 800c51e:	e7f7      	b.n	800c510 <__any_on+0x26>
 800c520:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c524:	2900      	cmp	r1, #0
 800c526:	d0f5      	beq.n	800c514 <__any_on+0x2a>
 800c528:	2001      	movs	r0, #1
 800c52a:	e7f6      	b.n	800c51a <__any_on+0x30>

0800c52c <_calloc_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	fb02 f401 	mul.w	r4, r2, r1
 800c532:	4621      	mov	r1, r4
 800c534:	f7fc fdae 	bl	8009094 <_malloc_r>
 800c538:	4605      	mov	r5, r0
 800c53a:	b118      	cbz	r0, 800c544 <_calloc_r+0x18>
 800c53c:	4622      	mov	r2, r4
 800c53e:	2100      	movs	r1, #0
 800c540:	f7fc fd51 	bl	8008fe6 <memset>
 800c544:	4628      	mov	r0, r5
 800c546:	bd38      	pop	{r3, r4, r5, pc}

0800c548 <__ssputs_r>:
 800c548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c54c:	688e      	ldr	r6, [r1, #8]
 800c54e:	429e      	cmp	r6, r3
 800c550:	4682      	mov	sl, r0
 800c552:	460c      	mov	r4, r1
 800c554:	4690      	mov	r8, r2
 800c556:	4699      	mov	r9, r3
 800c558:	d837      	bhi.n	800c5ca <__ssputs_r+0x82>
 800c55a:	898a      	ldrh	r2, [r1, #12]
 800c55c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c560:	d031      	beq.n	800c5c6 <__ssputs_r+0x7e>
 800c562:	6825      	ldr	r5, [r4, #0]
 800c564:	6909      	ldr	r1, [r1, #16]
 800c566:	1a6f      	subs	r7, r5, r1
 800c568:	6965      	ldr	r5, [r4, #20]
 800c56a:	2302      	movs	r3, #2
 800c56c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c570:	fb95 f5f3 	sdiv	r5, r5, r3
 800c574:	f109 0301 	add.w	r3, r9, #1
 800c578:	443b      	add	r3, r7
 800c57a:	429d      	cmp	r5, r3
 800c57c:	bf38      	it	cc
 800c57e:	461d      	movcc	r5, r3
 800c580:	0553      	lsls	r3, r2, #21
 800c582:	d530      	bpl.n	800c5e6 <__ssputs_r+0x9e>
 800c584:	4629      	mov	r1, r5
 800c586:	f7fc fd85 	bl	8009094 <_malloc_r>
 800c58a:	4606      	mov	r6, r0
 800c58c:	b950      	cbnz	r0, 800c5a4 <__ssputs_r+0x5c>
 800c58e:	230c      	movs	r3, #12
 800c590:	f8ca 3000 	str.w	r3, [sl]
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c59a:	81a3      	strh	r3, [r4, #12]
 800c59c:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5a4:	463a      	mov	r2, r7
 800c5a6:	6921      	ldr	r1, [r4, #16]
 800c5a8:	f7fc fd12 	bl	8008fd0 <memcpy>
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	6126      	str	r6, [r4, #16]
 800c5ba:	6165      	str	r5, [r4, #20]
 800c5bc:	443e      	add	r6, r7
 800c5be:	1bed      	subs	r5, r5, r7
 800c5c0:	6026      	str	r6, [r4, #0]
 800c5c2:	60a5      	str	r5, [r4, #8]
 800c5c4:	464e      	mov	r6, r9
 800c5c6:	454e      	cmp	r6, r9
 800c5c8:	d900      	bls.n	800c5cc <__ssputs_r+0x84>
 800c5ca:	464e      	mov	r6, r9
 800c5cc:	4632      	mov	r2, r6
 800c5ce:	4641      	mov	r1, r8
 800c5d0:	6820      	ldr	r0, [r4, #0]
 800c5d2:	f000 f92a 	bl	800c82a <memmove>
 800c5d6:	68a3      	ldr	r3, [r4, #8]
 800c5d8:	1b9b      	subs	r3, r3, r6
 800c5da:	60a3      	str	r3, [r4, #8]
 800c5dc:	6823      	ldr	r3, [r4, #0]
 800c5de:	441e      	add	r6, r3
 800c5e0:	6026      	str	r6, [r4, #0]
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	e7dc      	b.n	800c5a0 <__ssputs_r+0x58>
 800c5e6:	462a      	mov	r2, r5
 800c5e8:	f000 f938 	bl	800c85c <_realloc_r>
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d1e2      	bne.n	800c5b8 <__ssputs_r+0x70>
 800c5f2:	6921      	ldr	r1, [r4, #16]
 800c5f4:	4650      	mov	r0, sl
 800c5f6:	f7fc fcff 	bl	8008ff8 <_free_r>
 800c5fa:	e7c8      	b.n	800c58e <__ssputs_r+0x46>

0800c5fc <_svfiprintf_r>:
 800c5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c600:	461d      	mov	r5, r3
 800c602:	898b      	ldrh	r3, [r1, #12]
 800c604:	061f      	lsls	r7, r3, #24
 800c606:	b09d      	sub	sp, #116	; 0x74
 800c608:	4680      	mov	r8, r0
 800c60a:	460c      	mov	r4, r1
 800c60c:	4616      	mov	r6, r2
 800c60e:	d50f      	bpl.n	800c630 <_svfiprintf_r+0x34>
 800c610:	690b      	ldr	r3, [r1, #16]
 800c612:	b96b      	cbnz	r3, 800c630 <_svfiprintf_r+0x34>
 800c614:	2140      	movs	r1, #64	; 0x40
 800c616:	f7fc fd3d 	bl	8009094 <_malloc_r>
 800c61a:	6020      	str	r0, [r4, #0]
 800c61c:	6120      	str	r0, [r4, #16]
 800c61e:	b928      	cbnz	r0, 800c62c <_svfiprintf_r+0x30>
 800c620:	230c      	movs	r3, #12
 800c622:	f8c8 3000 	str.w	r3, [r8]
 800c626:	f04f 30ff 	mov.w	r0, #4294967295
 800c62a:	e0c8      	b.n	800c7be <_svfiprintf_r+0x1c2>
 800c62c:	2340      	movs	r3, #64	; 0x40
 800c62e:	6163      	str	r3, [r4, #20]
 800c630:	2300      	movs	r3, #0
 800c632:	9309      	str	r3, [sp, #36]	; 0x24
 800c634:	2320      	movs	r3, #32
 800c636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c63a:	2330      	movs	r3, #48	; 0x30
 800c63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c640:	9503      	str	r5, [sp, #12]
 800c642:	f04f 0b01 	mov.w	fp, #1
 800c646:	4637      	mov	r7, r6
 800c648:	463d      	mov	r5, r7
 800c64a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c64e:	b10b      	cbz	r3, 800c654 <_svfiprintf_r+0x58>
 800c650:	2b25      	cmp	r3, #37	; 0x25
 800c652:	d13e      	bne.n	800c6d2 <_svfiprintf_r+0xd6>
 800c654:	ebb7 0a06 	subs.w	sl, r7, r6
 800c658:	d00b      	beq.n	800c672 <_svfiprintf_r+0x76>
 800c65a:	4653      	mov	r3, sl
 800c65c:	4632      	mov	r2, r6
 800c65e:	4621      	mov	r1, r4
 800c660:	4640      	mov	r0, r8
 800c662:	f7ff ff71 	bl	800c548 <__ssputs_r>
 800c666:	3001      	adds	r0, #1
 800c668:	f000 80a4 	beq.w	800c7b4 <_svfiprintf_r+0x1b8>
 800c66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c66e:	4453      	add	r3, sl
 800c670:	9309      	str	r3, [sp, #36]	; 0x24
 800c672:	783b      	ldrb	r3, [r7, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	f000 809d 	beq.w	800c7b4 <_svfiprintf_r+0x1b8>
 800c67a:	2300      	movs	r3, #0
 800c67c:	f04f 32ff 	mov.w	r2, #4294967295
 800c680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c684:	9304      	str	r3, [sp, #16]
 800c686:	9307      	str	r3, [sp, #28]
 800c688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c68c:	931a      	str	r3, [sp, #104]	; 0x68
 800c68e:	462f      	mov	r7, r5
 800c690:	2205      	movs	r2, #5
 800c692:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c696:	4850      	ldr	r0, [pc, #320]	; (800c7d8 <_svfiprintf_r+0x1dc>)
 800c698:	f7f3 fe8a 	bl	80003b0 <memchr>
 800c69c:	9b04      	ldr	r3, [sp, #16]
 800c69e:	b9d0      	cbnz	r0, 800c6d6 <_svfiprintf_r+0xda>
 800c6a0:	06d9      	lsls	r1, r3, #27
 800c6a2:	bf44      	itt	mi
 800c6a4:	2220      	movmi	r2, #32
 800c6a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c6aa:	071a      	lsls	r2, r3, #28
 800c6ac:	bf44      	itt	mi
 800c6ae:	222b      	movmi	r2, #43	; 0x2b
 800c6b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c6b4:	782a      	ldrb	r2, [r5, #0]
 800c6b6:	2a2a      	cmp	r2, #42	; 0x2a
 800c6b8:	d015      	beq.n	800c6e6 <_svfiprintf_r+0xea>
 800c6ba:	9a07      	ldr	r2, [sp, #28]
 800c6bc:	462f      	mov	r7, r5
 800c6be:	2000      	movs	r0, #0
 800c6c0:	250a      	movs	r5, #10
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6c8:	3b30      	subs	r3, #48	; 0x30
 800c6ca:	2b09      	cmp	r3, #9
 800c6cc:	d94d      	bls.n	800c76a <_svfiprintf_r+0x16e>
 800c6ce:	b1b8      	cbz	r0, 800c700 <_svfiprintf_r+0x104>
 800c6d0:	e00f      	b.n	800c6f2 <_svfiprintf_r+0xf6>
 800c6d2:	462f      	mov	r7, r5
 800c6d4:	e7b8      	b.n	800c648 <_svfiprintf_r+0x4c>
 800c6d6:	4a40      	ldr	r2, [pc, #256]	; (800c7d8 <_svfiprintf_r+0x1dc>)
 800c6d8:	1a80      	subs	r0, r0, r2
 800c6da:	fa0b f000 	lsl.w	r0, fp, r0
 800c6de:	4318      	orrs	r0, r3
 800c6e0:	9004      	str	r0, [sp, #16]
 800c6e2:	463d      	mov	r5, r7
 800c6e4:	e7d3      	b.n	800c68e <_svfiprintf_r+0x92>
 800c6e6:	9a03      	ldr	r2, [sp, #12]
 800c6e8:	1d11      	adds	r1, r2, #4
 800c6ea:	6812      	ldr	r2, [r2, #0]
 800c6ec:	9103      	str	r1, [sp, #12]
 800c6ee:	2a00      	cmp	r2, #0
 800c6f0:	db01      	blt.n	800c6f6 <_svfiprintf_r+0xfa>
 800c6f2:	9207      	str	r2, [sp, #28]
 800c6f4:	e004      	b.n	800c700 <_svfiprintf_r+0x104>
 800c6f6:	4252      	negs	r2, r2
 800c6f8:	f043 0302 	orr.w	r3, r3, #2
 800c6fc:	9207      	str	r2, [sp, #28]
 800c6fe:	9304      	str	r3, [sp, #16]
 800c700:	783b      	ldrb	r3, [r7, #0]
 800c702:	2b2e      	cmp	r3, #46	; 0x2e
 800c704:	d10c      	bne.n	800c720 <_svfiprintf_r+0x124>
 800c706:	787b      	ldrb	r3, [r7, #1]
 800c708:	2b2a      	cmp	r3, #42	; 0x2a
 800c70a:	d133      	bne.n	800c774 <_svfiprintf_r+0x178>
 800c70c:	9b03      	ldr	r3, [sp, #12]
 800c70e:	1d1a      	adds	r2, r3, #4
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	9203      	str	r2, [sp, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	bfb8      	it	lt
 800c718:	f04f 33ff 	movlt.w	r3, #4294967295
 800c71c:	3702      	adds	r7, #2
 800c71e:	9305      	str	r3, [sp, #20]
 800c720:	4d2e      	ldr	r5, [pc, #184]	; (800c7dc <_svfiprintf_r+0x1e0>)
 800c722:	7839      	ldrb	r1, [r7, #0]
 800c724:	2203      	movs	r2, #3
 800c726:	4628      	mov	r0, r5
 800c728:	f7f3 fe42 	bl	80003b0 <memchr>
 800c72c:	b138      	cbz	r0, 800c73e <_svfiprintf_r+0x142>
 800c72e:	2340      	movs	r3, #64	; 0x40
 800c730:	1b40      	subs	r0, r0, r5
 800c732:	fa03 f000 	lsl.w	r0, r3, r0
 800c736:	9b04      	ldr	r3, [sp, #16]
 800c738:	4303      	orrs	r3, r0
 800c73a:	3701      	adds	r7, #1
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	7839      	ldrb	r1, [r7, #0]
 800c740:	4827      	ldr	r0, [pc, #156]	; (800c7e0 <_svfiprintf_r+0x1e4>)
 800c742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c746:	2206      	movs	r2, #6
 800c748:	1c7e      	adds	r6, r7, #1
 800c74a:	f7f3 fe31 	bl	80003b0 <memchr>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d038      	beq.n	800c7c4 <_svfiprintf_r+0x1c8>
 800c752:	4b24      	ldr	r3, [pc, #144]	; (800c7e4 <_svfiprintf_r+0x1e8>)
 800c754:	bb13      	cbnz	r3, 800c79c <_svfiprintf_r+0x1a0>
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	3307      	adds	r3, #7
 800c75a:	f023 0307 	bic.w	r3, r3, #7
 800c75e:	3308      	adds	r3, #8
 800c760:	9303      	str	r3, [sp, #12]
 800c762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c764:	444b      	add	r3, r9
 800c766:	9309      	str	r3, [sp, #36]	; 0x24
 800c768:	e76d      	b.n	800c646 <_svfiprintf_r+0x4a>
 800c76a:	fb05 3202 	mla	r2, r5, r2, r3
 800c76e:	2001      	movs	r0, #1
 800c770:	460f      	mov	r7, r1
 800c772:	e7a6      	b.n	800c6c2 <_svfiprintf_r+0xc6>
 800c774:	2300      	movs	r3, #0
 800c776:	3701      	adds	r7, #1
 800c778:	9305      	str	r3, [sp, #20]
 800c77a:	4619      	mov	r1, r3
 800c77c:	250a      	movs	r5, #10
 800c77e:	4638      	mov	r0, r7
 800c780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c784:	3a30      	subs	r2, #48	; 0x30
 800c786:	2a09      	cmp	r2, #9
 800c788:	d903      	bls.n	800c792 <_svfiprintf_r+0x196>
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d0c8      	beq.n	800c720 <_svfiprintf_r+0x124>
 800c78e:	9105      	str	r1, [sp, #20]
 800c790:	e7c6      	b.n	800c720 <_svfiprintf_r+0x124>
 800c792:	fb05 2101 	mla	r1, r5, r1, r2
 800c796:	2301      	movs	r3, #1
 800c798:	4607      	mov	r7, r0
 800c79a:	e7f0      	b.n	800c77e <_svfiprintf_r+0x182>
 800c79c:	ab03      	add	r3, sp, #12
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	4622      	mov	r2, r4
 800c7a2:	4b11      	ldr	r3, [pc, #68]	; (800c7e8 <_svfiprintf_r+0x1ec>)
 800c7a4:	a904      	add	r1, sp, #16
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	f7fc fd56 	bl	8009258 <_printf_float>
 800c7ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c7b0:	4681      	mov	r9, r0
 800c7b2:	d1d6      	bne.n	800c762 <_svfiprintf_r+0x166>
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	065b      	lsls	r3, r3, #25
 800c7b8:	f53f af35 	bmi.w	800c626 <_svfiprintf_r+0x2a>
 800c7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7be:	b01d      	add	sp, #116	; 0x74
 800c7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c4:	ab03      	add	r3, sp, #12
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	4b07      	ldr	r3, [pc, #28]	; (800c7e8 <_svfiprintf_r+0x1ec>)
 800c7cc:	a904      	add	r1, sp, #16
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	f7fc ffe4 	bl	800979c <_printf_i>
 800c7d4:	e7ea      	b.n	800c7ac <_svfiprintf_r+0x1b0>
 800c7d6:	bf00      	nop
 800c7d8:	080128ac 	.word	0x080128ac
 800c7dc:	080128b2 	.word	0x080128b2
 800c7e0:	080128b6 	.word	0x080128b6
 800c7e4:	08009259 	.word	0x08009259
 800c7e8:	0800c549 	.word	0x0800c549

0800c7ec <strncmp>:
 800c7ec:	b510      	push	{r4, lr}
 800c7ee:	b16a      	cbz	r2, 800c80c <strncmp+0x20>
 800c7f0:	3901      	subs	r1, #1
 800c7f2:	1884      	adds	r4, r0, r2
 800c7f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c7f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d103      	bne.n	800c808 <strncmp+0x1c>
 800c800:	42a0      	cmp	r0, r4
 800c802:	d001      	beq.n	800c808 <strncmp+0x1c>
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1f5      	bne.n	800c7f4 <strncmp+0x8>
 800c808:	1a98      	subs	r0, r3, r2
 800c80a:	bd10      	pop	{r4, pc}
 800c80c:	4610      	mov	r0, r2
 800c80e:	e7fc      	b.n	800c80a <strncmp+0x1e>

0800c810 <__ascii_wctomb>:
 800c810:	b149      	cbz	r1, 800c826 <__ascii_wctomb+0x16>
 800c812:	2aff      	cmp	r2, #255	; 0xff
 800c814:	bf85      	ittet	hi
 800c816:	238a      	movhi	r3, #138	; 0x8a
 800c818:	6003      	strhi	r3, [r0, #0]
 800c81a:	700a      	strbls	r2, [r1, #0]
 800c81c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c820:	bf98      	it	ls
 800c822:	2001      	movls	r0, #1
 800c824:	4770      	bx	lr
 800c826:	4608      	mov	r0, r1
 800c828:	4770      	bx	lr

0800c82a <memmove>:
 800c82a:	4288      	cmp	r0, r1
 800c82c:	b510      	push	{r4, lr}
 800c82e:	eb01 0302 	add.w	r3, r1, r2
 800c832:	d807      	bhi.n	800c844 <memmove+0x1a>
 800c834:	1e42      	subs	r2, r0, #1
 800c836:	4299      	cmp	r1, r3
 800c838:	d00a      	beq.n	800c850 <memmove+0x26>
 800c83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c83e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c842:	e7f8      	b.n	800c836 <memmove+0xc>
 800c844:	4283      	cmp	r3, r0
 800c846:	d9f5      	bls.n	800c834 <memmove+0xa>
 800c848:	1881      	adds	r1, r0, r2
 800c84a:	1ad2      	subs	r2, r2, r3
 800c84c:	42d3      	cmn	r3, r2
 800c84e:	d100      	bne.n	800c852 <memmove+0x28>
 800c850:	bd10      	pop	{r4, pc}
 800c852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c856:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c85a:	e7f7      	b.n	800c84c <memmove+0x22>

0800c85c <_realloc_r>:
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85e:	4607      	mov	r7, r0
 800c860:	4614      	mov	r4, r2
 800c862:	460e      	mov	r6, r1
 800c864:	b921      	cbnz	r1, 800c870 <_realloc_r+0x14>
 800c866:	4611      	mov	r1, r2
 800c868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c86c:	f7fc bc12 	b.w	8009094 <_malloc_r>
 800c870:	b922      	cbnz	r2, 800c87c <_realloc_r+0x20>
 800c872:	f7fc fbc1 	bl	8008ff8 <_free_r>
 800c876:	4625      	mov	r5, r4
 800c878:	4628      	mov	r0, r5
 800c87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c87c:	f000 f814 	bl	800c8a8 <_malloc_usable_size_r>
 800c880:	42a0      	cmp	r0, r4
 800c882:	d20f      	bcs.n	800c8a4 <_realloc_r+0x48>
 800c884:	4621      	mov	r1, r4
 800c886:	4638      	mov	r0, r7
 800c888:	f7fc fc04 	bl	8009094 <_malloc_r>
 800c88c:	4605      	mov	r5, r0
 800c88e:	2800      	cmp	r0, #0
 800c890:	d0f2      	beq.n	800c878 <_realloc_r+0x1c>
 800c892:	4631      	mov	r1, r6
 800c894:	4622      	mov	r2, r4
 800c896:	f7fc fb9b 	bl	8008fd0 <memcpy>
 800c89a:	4631      	mov	r1, r6
 800c89c:	4638      	mov	r0, r7
 800c89e:	f7fc fbab 	bl	8008ff8 <_free_r>
 800c8a2:	e7e9      	b.n	800c878 <_realloc_r+0x1c>
 800c8a4:	4635      	mov	r5, r6
 800c8a6:	e7e7      	b.n	800c878 <_realloc_r+0x1c>

0800c8a8 <_malloc_usable_size_r>:
 800c8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8ac:	1f18      	subs	r0, r3, #4
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bfbc      	itt	lt
 800c8b2:	580b      	ldrlt	r3, [r1, r0]
 800c8b4:	18c0      	addlt	r0, r0, r3
 800c8b6:	4770      	bx	lr

0800c8b8 <_init>:
 800c8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ba:	bf00      	nop
 800c8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8be:	bc08      	pop	{r3}
 800c8c0:	469e      	mov	lr, r3
 800c8c2:	4770      	bx	lr

0800c8c4 <_fini>:
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	bf00      	nop
 800c8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ca:	bc08      	pop	{r3}
 800c8cc:	469e      	mov	lr, r3
 800c8ce:	4770      	bx	lr
