
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08007190  08007190  00017190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08007528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006140  200001e4  0800770c  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20006324  0800770c  00026324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027579  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004140  00000000  00000000  0004778b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000104c3  00000000  00000000  0004b8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ed8  00000000  00000000  0005bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000023b0  00000000  00000000  0005cc66  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003b055  00000000  00000000  0005f016  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00012e3b  00000000  00000000  0009a06b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00184038  00000000  00000000  000acea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000e9  00000000  00000000  00230ede  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003e74  00000000  00000000  00230fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e4 	.word	0x200001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007174 	.word	0x08007174

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001e8 	.word	0x200001e8
 80002dc:	08007174 	.word	0x08007174

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	491d      	ldr	r1, [pc, #116]	; (8000708 <SystemInit+0x78>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000692:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <SystemInit+0x7c>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <SystemInit+0x80>)
{
 8000698:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800069a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4d1d      	ldr	r5, [pc, #116]	; (8000714 <SystemInit+0x84>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a0:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a4:	4e1c      	ldr	r6, [pc, #112]	; (8000718 <SystemInit+0x88>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a6:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006aa:	690c      	ldr	r4, [r1, #16]
 80006ac:	f044 0404 	orr.w	r4, r4, #4
 80006b0:	610c      	str	r4, [r1, #16]
  RCC->CR |= RCC_CR_HSION;
 80006b2:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b4:	4919      	ldr	r1, [pc, #100]	; (800071c <SystemInit+0x8c>)
  RCC->CR |= RCC_CR_HSION;
 80006b6:	f044 0401 	orr.w	r4, r4, #1
 80006ba:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 80006bc:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	681c      	ldr	r4, [r3, #0]
 80006c0:	4020      	ands	r0, r4
 80006c2:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 80006c4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80006c6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80006c8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 80006d4:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 80006d6:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 80006d8:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80006e0:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80006e2:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 80006e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	626b      	str	r3, [r5, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ec:	6833      	ldr	r3, [r6, #0]
 80006ee:	4019      	ands	r1, r3
 80006f0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80006f4:	d202      	bcs.n	80006fc <SystemInit+0x6c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <SystemInit+0x90>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <SystemInit+0x78>)
 80006fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000702:	bc70      	pop	{r4, r5, r6}
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000704:	609a      	str	r2, [r3, #8]
}
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	58024400 	.word	0x58024400
 8000710:	eaf6ed7f 	.word	0xeaf6ed7f
 8000714:	580000c0 	.word	0x580000c0
 8000718:	5c001000 	.word	0x5c001000
 800071c:	ffff0000 	.word	0xffff0000
 8000720:	51008108 	.word	0x51008108

08000724 <inst_absolute>:
static float32_t pi = 3.141592654f;
extern uint16_t frameSize;

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
 8000724:	b5a0      	push	{r5, r7, lr}
	int j = 0;
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000726:	4f18      	ldr	r7, [pc, #96]	; (8000788 <inst_absolute+0x64>)
 8000728:	883b      	ldrh	r3, [r7, #0]
void inst_absolute(float32_t in[], float32_t out[]){
 800072a:	ed2d 8b02 	vpush	{d8}
 800072e:	b083      	sub	sp, #12
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000730:	b1b3      	cbz	r3, 8000760 <inst_absolute+0x3c>
 8000732:	2500      	movs	r5, #0
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000734:	ed90 0a01 	vldr	s0, [r0, #4]
 8000738:	edd0 7a00 	vldr	s15, [r0]
 800073c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000740:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8000744:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000748:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000750:	d40a      	bmi.n	8000768 <inst_absolute+0x44>
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000752:	3502      	adds	r5, #2
 8000754:	3008      	adds	r0, #8
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000756:	eca1 8a01 	vstmia	r1!, {s16}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800075a:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 800075e:	dbe9      	blt.n	8000734 <inst_absolute+0x10>
		j++;
	}
}
 8000760:	b003      	add	sp, #12
 8000762:	ecbd 8b02 	vpop	{d8}
 8000766:	bda0      	pop	{r5, r7, pc}
 8000768:	e9cd 0100 	strd	r0, r1, [sp]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800076c:	3502      	adds	r5, #2
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 800076e:	f006 fac3 	bl	8006cf8 <sqrtf>
 8000772:	883b      	ldrh	r3, [r7, #0]
 8000774:	9800      	ldr	r0, [sp, #0]
 8000776:	9901      	ldr	r1, [sp, #4]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000778:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 800077c:	f100 0008 	add.w	r0, r0, #8
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000780:	eca1 8a01 	vstmia	r1!, {s16}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000784:	dbd6      	blt.n	8000734 <inst_absolute+0x10>
 8000786:	e7eb      	b.n	8000760 <inst_absolute+0x3c>
 8000788:	080071a0 	.word	0x080071a0

0800078c <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int j = 0;
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800078e:	4f0d      	ldr	r7, [pc, #52]	; (80007c4 <inst_phase+0x38>)
 8000790:	883b      	ldrh	r3, [r7, #0]
 8000792:	b1b3      	cbz	r3, 80007c2 <inst_phase+0x36>
 8000794:	4604      	mov	r4, r0
 8000796:	460e      	mov	r6, r1
 8000798:	2500      	movs	r5, #0
		out[j] = atan2(in[i+1], in[i]);
 800079a:	ed94 1a00 	vldr	s2, [r4]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800079e:	3502      	adds	r5, #2
		out[j] = atan2(in[i+1], in[i]);
 80007a0:	ed94 0a01 	vldr	s0, [r4, #4]
 80007a4:	3408      	adds	r4, #8
 80007a6:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 80007aa:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80007ae:	f006 faa1 	bl	8006cf4 <atan2>
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007b2:	883b      	ldrh	r3, [r7, #0]
		out[j] = atan2(in[i+1], in[i]);
 80007b4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007b8:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
		out[j] = atan2(in[i+1], in[i]);
 80007bc:	eca6 0a01 	vstmia	r6!, {s0}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007c0:	dbeb      	blt.n	800079a <inst_phase+0xe>
		j++;
	}
}
 80007c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c4:	080071a0 	.word	0x080071a0

080007c8 <unwrap>:
	end
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
	float32_t alpha = pi;
	for(int i = 0; i < (frameSize - 1); i++){
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <unwrap+0x90>)
void unwrap(float32_t in[], float32_t out[]){
 80007ca:	b4f0      	push	{r4, r5, r6, r7}
	for(int i = 0; i < (frameSize - 1); i++){
 80007cc:	881f      	ldrh	r7, [r3, #0]
 80007ce:	2f01      	cmp	r7, #1
 80007d0:	d93f      	bls.n	8000852 <unwrap+0x8a>
 80007d2:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 80007d6:	4602      	mov	r2, r0
 80007d8:	460d      	mov	r5, r1
	uint16_t k = 0;
 80007da:	2400      	movs	r4, #0
 80007dc:	3e04      	subs	r6, #4
 80007de:	eddf 5a1f 	vldr	s11, [pc, #124]	; 800085c <unwrap+0x94>
		out[i] = in[i] + 2*pi*k;
 80007e2:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8000860 <unwrap+0x98>
 80007e6:	ee25 7a85 	vmul.f32	s14, s11, s10
 80007ea:	edd2 7a00 	vldr	s15, [r2]
 80007ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007f2:	ece5 7a01 	vstmia	r5!, {s15}
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 80007f6:	ed92 6a01 	vldr	s12, [r2, #4]
 80007fa:	ecf2 6a01 	vldmia	r2!, {s13}
 80007fe:	ee76 7a66 	vsub.f32	s15, s12, s13
 8000802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000806:	ee17 3a90 	vmov	r3, s15
 800080a:	2b00      	cmp	r3, #0
 800080c:	bfb8      	it	lt
 800080e:	425b      	neglt	r3, r3
 8000810:	2b03      	cmp	r3, #3
 8000812:	dd0e      	ble.n	8000832 <unwrap+0x6a>
			if(in[i+1] < in[i]){
 8000814:	eeb4 6ae6 	vcmpe.f32	s12, s13
				k++;
			} else {
				k--;
 8000818:	1e63      	subs	r3, r4, #1
				k++;
 800081a:	3401      	adds	r4, #1
			if(in[i+1] < in[i]){
 800081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				k++;
 8000820:	bf4c      	ite	mi
 8000822:	b2a4      	uxthmi	r4, r4
				k--;
 8000824:	b29c      	uxthpl	r4, r3
 8000826:	ee07 4a90 	vmov	s15, r4
 800082a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800082e:	ee25 7a85 	vmul.f32	s14, s11, s10
	for(int i = 0; i < (frameSize - 1); i++){
 8000832:	4296      	cmp	r6, r2
 8000834:	d1d7      	bne.n	80007e6 <unwrap+0x1e>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 8000836:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800083a:	443b      	add	r3, r7
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4418      	add	r0, r3
 8000840:	440b      	add	r3, r1
 8000842:	edd0 7a00 	vldr	s15, [r0]
 8000846:	ee37 7a87 	vadd.f32	s14, s15, s14
}
 800084a:	bcf0      	pop	{r4, r5, r6, r7}
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 800084c:	ed83 7a00 	vstr	s14, [r3]
}
 8000850:	4770      	bx	lr
	for(int i = 0; i < (frameSize - 1); i++){
 8000852:	ed9f 7a02 	vldr	s14, [pc, #8]	; 800085c <unwrap+0x94>
 8000856:	e7ee      	b.n	8000836 <unwrap+0x6e>
 8000858:	080071a0 	.word	0x080071a0
 800085c:	00000000 	.word	0x00000000
 8000860:	40c90fdb 	.word	0x40c90fdb

08000864 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float32_t *inst_phase, *unwrapped_phase;
	inst_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000868:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8000a14 <inst_frequency+0x1b0>
void inst_frequency(float32_t in[], float32_t out[]){
 800086c:	4607      	mov	r7, r0
 800086e:	460e      	mov	r6, r1
	inst_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000870:	f8b9 8000 	ldrh.w	r8, [r9]
 8000874:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8000878:	4620      	mov	r0, r4
 800087a:	f004 fa79 	bl	8004d70 <malloc>
 800087e:	4605      	mov	r5, r0
	unwrapped_phase = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000880:	4620      	mov	r0, r4
 8000882:	f004 fa75 	bl	8004d70 <malloc>
 8000886:	4604      	mov	r4, r0
	int j = 0;
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000888:	f1b8 0f00 	cmp.w	r8, #0
 800088c:	f000 80b0 	beq.w	80009f0 <inst_frequency+0x18c>
 8000890:	46aa      	mov	sl, r5
 8000892:	f04f 0800 	mov.w	r8, #0
		inst_phase[j] = atan2(in[i], in[i+1]);
 8000896:	463b      	mov	r3, r7
 8000898:	ed97 1a01 	vldr	s2, [r7, #4]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800089c:	f108 0802 	add.w	r8, r8, #2
		inst_phase[j] = atan2(in[i], in[i+1]);
 80008a0:	3708      	adds	r7, #8
 80008a2:	ed93 0a00 	vldr	s0, [r3]
 80008a6:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
 80008aa:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80008ae:	f006 fa21 	bl	8006cf4 <atan2>
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80008b2:	f8b9 2000 	ldrh.w	r2, [r9]
		inst_phase[j] = atan2(in[i], in[i+1]);
 80008b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80008ba:	ebb8 0f42 	cmp.w	r8, r2, lsl #1
		inst_phase[j] = atan2(in[i], in[i+1]);
 80008be:	ecaa 0a01 	vstmia	sl!, {s0}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80008c2:	dbe8      	blt.n	8000896 <inst_frequency+0x32>
 80008c4:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
	for(int i = 0; i < (frameSize - 1); i++){
 80008c8:	1e57      	subs	r7, r2, #1
 80008ca:	4410      	add	r0, r2
 80008cc:	2f00      	cmp	r7, #0
 80008ce:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80008d2:	eb05 0300 	add.w	r3, r5, r0
 80008d6:	ed93 4a00 	vldr	s8, [r3]
 80008da:	f340 808d 	ble.w	80009f8 <inst_frequency+0x194>
 80008de:	46a8      	mov	r8, r5
 80008e0:	f1a4 0904 	sub.w	r9, r4, #4
 80008e4:	46a6      	mov	lr, r4
 80008e6:	4621      	mov	r1, r4
 80008e8:	ecb8 7a01 	vldmia	r8!, {s14}
 80008ec:	eb09 0982 	add.w	r9, r9, r2, lsl #2
	uint16_t k = 0;
 80008f0:	f04f 0c00 	mov.w	ip, #0
 80008f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8000a08 <inst_frequency+0x1a4>
		out[i] = in[i] + 2*pi*k;
 80008f8:	eddf 4a44 	vldr	s9, [pc, #272]	; 8000a0c <inst_frequency+0x1a8>
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 80008fc:	ecf8 6a01 	vldmia	r8!, {s13}
		out[i] = in[i] + 2*pi*k;
 8000900:	ee25 6aa4 	vmul.f32	s12, s11, s9
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 8000904:	ee76 7ac7 	vsub.f32	s15, s13, s14
		out[i] = in[i] + 2*pi*k;
 8000908:	ee36 5a07 	vadd.f32	s10, s12, s14
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 800090c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		out[i] = in[i] + 2*pi*k;
 8000910:	eca1 5a01 	vstmia	r1!, {s10}
		if(abs(in[i+1] - in[i]) > abs(alpha)){
 8000914:	ee17 3a90 	vmov	r3, s15
 8000918:	2b00      	cmp	r3, #0
 800091a:	bfb8      	it	lt
 800091c:	425b      	neglt	r3, r3
 800091e:	2b03      	cmp	r3, #3
 8000920:	dd12      	ble.n	8000948 <inst_frequency+0xe4>
			if(in[i+1] < in[i]){
 8000922:	eef4 6ac7 	vcmpe.f32	s13, s14
				k--;
 8000926:	f10c 33ff 	add.w	r3, ip, #4294967295
				k++;
 800092a:	f10c 0c01 	add.w	ip, ip, #1
			if(in[i+1] < in[i]){
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				k++;
 8000932:	bf4c      	ite	mi
 8000934:	fa1f fc8c 	uxthmi.w	ip, ip
				k--;
 8000938:	fa1f fc83 	uxthpl.w	ip, r3
 800093c:	ee07 ca90 	vmov	s15, ip
 8000940:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8000944:	ee25 6aa4 	vmul.f32	s12, s11, s9
	for(int i = 0; i < (frameSize - 1); i++){
 8000948:	4549      	cmp	r1, r9
 800094a:	eeb0 7a66 	vmov.f32	s14, s13
 800094e:	d1d5      	bne.n	80008fc <inst_frequency+0x98>
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 8000950:	ee34 5a06 	vadd.f32	s10, s8, s12
 8000954:	1823      	adds	r3, r4, r0
 8000956:	2a03      	cmp	r2, #3
 8000958:	ed83 5a00 	vstr	s10, [r3]
 800095c:	dd51      	ble.n	8000a02 <inst_frequency+0x19e>
 800095e:	3a04      	subs	r2, #4
 8000960:	edd4 6a00 	vldr	s13, [r4]
 8000964:	4631      	mov	r1, r6
		j++;
	}
	unwrap(inst_phase, unwrapped_phase);
	for(int i = 0; i < frameSize - 1; i++){
 8000966:	2300      	movs	r3, #0
 8000968:	f022 0201 	bic.w	r2, r2, #1
		out[i] = (1/(2*pi))*(unwrapped_phase[i+1] - unwrapped_phase[i]);
 800096c:	eddf 5a28 	vldr	s11, [pc, #160]	; 8000a10 <inst_frequency+0x1ac>
 8000970:	3202      	adds	r2, #2
 8000972:	edde 7a01 	vldr	s15, [lr, #4]
 8000976:	f10e 0e08 	add.w	lr, lr, #8
 800097a:	3302      	adds	r3, #2
 800097c:	3108      	adds	r1, #8
 800097e:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8000982:	edde 6a00 	vldr	s13, [lr]
 8000986:	429a      	cmp	r2, r3
 8000988:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800098c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8000990:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000994:	ed01 7a02 	vstr	s14, [r1, #-8]
 8000998:	ed41 7a01 	vstr	s15, [r1, #-4]
 800099c:	d1e9      	bne.n	8000972 <inst_frequency+0x10e>
 800099e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80009a2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000a10 <inst_frequency+0x1ac>
 80009a6:	eb04 010c 	add.w	r1, r4, ip
 80009aa:	44b4      	add	ip, r6
 80009ac:	460a      	mov	r2, r1
 80009ae:	edd1 7a01 	vldr	s15, [r1, #4]
	for(int i = 0; i < frameSize - 1; i++){
 80009b2:	3301      	adds	r3, #1
		out[i] = (1/(2*pi))*(unwrapped_phase[i+1] - unwrapped_phase[i]);
 80009b4:	3104      	adds	r1, #4
 80009b6:	ed92 7a00 	vldr	s14, [r2]
	for(int i = 0; i < frameSize - 1; i++){
 80009ba:	429f      	cmp	r7, r3
		out[i] = (1/(2*pi))*(unwrapped_phase[i+1] - unwrapped_phase[i]);
 80009bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009c4:	ecec 7a01 	vstmia	ip!, {s15}
	for(int i = 0; i < frameSize - 1; i++){
 80009c8:	dcf0      	bgt.n	80009ac <inst_frequency+0x148>
	}
	out[frameSize - 1] = (1/(2*pi))*(0 - unwrapped_phase[frameSize - 1]);
 80009ca:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 8000a08 <inst_frequency+0x1a4>
 80009ce:	4406      	add	r6, r0
 80009d0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000a10 <inst_frequency+0x1ac>
	free(inst_phase);
 80009d4:	4628      	mov	r0, r5
	out[frameSize - 1] = (1/(2*pi))*(0 - unwrapped_phase[frameSize - 1]);
 80009d6:	ee36 6a45 	vsub.f32	s12, s12, s10
 80009da:	ee26 6a27 	vmul.f32	s12, s12, s15
 80009de:	ed86 6a00 	vstr	s12, [r6]
	free(inst_phase);
 80009e2:	f004 f9cd 	bl	8004d80 <free>
	free(unwrapped_phase);
 80009e6:	4620      	mov	r0, r4
}
 80009e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free(unwrapped_phase);
 80009ec:	f004 b9c8 	b.w	8004d80 <free>
 80009f0:	f06f 0003 	mvn.w	r0, #3
 80009f4:	ed15 4a01 	vldr	s8, [r5, #-4]
	out[frameSize-1] = in[frameSize-1] + 2*pi*k;
 80009f8:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8000a08 <inst_frequency+0x1a4>
 80009fc:	ee34 5a06 	vadd.f32	s10, s8, s12
 8000a00:	e7e3      	b.n	80009ca <inst_frequency+0x166>
 8000a02:	2300      	movs	r3, #0
 8000a04:	e7cb      	b.n	800099e <inst_frequency+0x13a>
 8000a06:	bf00      	nop
 8000a08:	00000000 	.word	0x00000000
 8000a0c:	40c90fdb 	.word	0x40c90fdb
 8000a10:	3e22f983 	.word	0x3e22f983
 8000a14:	080071a0 	.word	0x080071a0

08000a18 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float32_t mean = 0, max = 0;
	uint32_t max_index = 0;
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a1c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8000b0c <inst_centralized_normalized_absolute+0xf4>
	float32_t mean = 0, max = 0;
 8000a20:	2300      	movs	r3, #0
	uint32_t max_index = 0;
 8000a22:	2500      	movs	r5, #0
void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000a24:	4604      	mov	r4, r0
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a26:	f8b9 b000 	ldrh.w	fp, [r9]
void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000a2a:	460e      	mov	r6, r1
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a2c:	ea4f 078b 	mov.w	r7, fp, lsl #2
void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000a30:	ed2d 8b02 	vpush	{d8}
 8000a34:	b085      	sub	sp, #20
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a36:	4638      	mov	r0, r7
	float32_t mean = 0, max = 0;
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	9302      	str	r3, [sp, #8]
	uint32_t max_index = 0;
 8000a3c:	9503      	str	r5, [sp, #12]
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a3e:	f004 f997 	bl	8004d70 <malloc>
 8000a42:	4680      	mov	r8, r0
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a44:	4638      	mov	r0, r7
 8000a46:	f004 f993 	bl	8004d70 <malloc>
 8000a4a:	4607      	mov	r7, r0
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a4c:	f1bb 0f00 	cmp.w	fp, #0
 8000a50:	d017      	beq.n	8000a82 <inst_centralized_normalized_absolute+0x6a>
 8000a52:	46c2      	mov	sl, r8
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000a54:	ed94 0a01 	vldr	s0, [r4, #4]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a58:	3502      	adds	r5, #2
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000a5a:	edd4 7a00 	vldr	s15, [r4]
 8000a5e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000a62:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8000a66:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000a6a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8000a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a72:	d440      	bmi.n	8000af6 <inst_centralized_normalized_absolute+0xde>
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a74:	ebb5 0f4b 	cmp.w	r5, fp, lsl #1
 8000a78:	f104 0408 	add.w	r4, r4, #8
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000a7c:	ecaa 8a01 	vstmia	sl!, {s16}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a80:	dbe8      	blt.n	8000a54 <inst_centralized_normalized_absolute+0x3c>
	inst_absolute(in, &absolute[0]);
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000a82:	4659      	mov	r1, fp
 8000a84:	ab03      	add	r3, sp, #12
 8000a86:	aa02      	add	r2, sp, #8
 8000a88:	4640      	mov	r0, r8
 8000a8a:	f004 f8e1 	bl	8004c50 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000a8e:	f8b9 1000 	ldrh.w	r1, [r9]
 8000a92:	b169      	cbz	r1, 8000ab0 <inst_centralized_normalized_absolute+0x98>
		normalized[a] = absolute[a] / max;
 8000a94:	eddd 6a02 	vldr	s13, [sp, #8]
 8000a98:	4643      	mov	r3, r8
 8000a9a:	463a      	mov	r2, r7
 8000a9c:	eb08 0081 	add.w	r0, r8, r1, lsl #2
 8000aa0:	ecb3 7a01 	vldmia	r3!, {s14}
 8000aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	for(int a = 0; a < frameSize; a++){
 8000aa8:	4298      	cmp	r0, r3
		normalized[a] = absolute[a] / max;
 8000aaa:	ece2 7a01 	vstmia	r2!, {s15}
	for(int a = 0; a < frameSize; a++){
 8000aae:	d1f7      	bne.n	8000aa0 <inst_centralized_normalized_absolute+0x88>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000ab0:	aa01      	add	r2, sp, #4
 8000ab2:	4638      	mov	r0, r7
 8000ab4:	f004 f896 	bl	8004be4 <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000ab8:	f8b9 2000 	ldrh.w	r2, [r9]
 8000abc:	b182      	cbz	r2, 8000ae0 <inst_centralized_normalized_absolute+0xc8>
		out[i] = normalized[i] / mean - 1;
 8000abe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ac2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8000ac6:	eddd 6a01 	vldr	s13, [sp, #4]
 8000aca:	463b      	mov	r3, r7
 8000acc:	ecb3 7a01 	vldmia	r3!, {s14}
 8000ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	for(int i = 0; i < frameSize; i++){
 8000ad4:	4293      	cmp	r3, r2
		out[i] = normalized[i] / mean - 1;
 8000ad6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000ada:	ece6 7a01 	vstmia	r6!, {s15}
	for(int i = 0; i < frameSize; i++){
 8000ade:	d1f5      	bne.n	8000acc <inst_centralized_normalized_absolute+0xb4>
	}
	free(absolute);
 8000ae0:	4640      	mov	r0, r8
 8000ae2:	f004 f94d 	bl	8004d80 <free>
	free(normalized);
 8000ae6:	4638      	mov	r0, r7
}
 8000ae8:	b005      	add	sp, #20
 8000aea:	ecbd 8b02 	vpop	{d8}
 8000aee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	free(normalized);
 8000af2:	f004 b945 	b.w	8004d80 <free>
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000af6:	f006 f8ff 	bl	8006cf8 <sqrtf>
 8000afa:	f8b9 b000 	ldrh.w	fp, [r9]
 8000afe:	3408      	adds	r4, #8
 8000b00:	ecaa 8a01 	vstmia	sl!, {s16}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000b04:	ebb5 0f4b 	cmp.w	r5, fp, lsl #1
 8000b08:	dba4      	blt.n	8000a54 <inst_centralized_normalized_absolute+0x3c>
 8000b0a:	e7ba      	b.n	8000a82 <inst_centralized_normalized_absolute+0x6a>
 8000b0c:	080071a0 	.word	0x080071a0

08000b10 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <MX_GPIO_Init+0xfc>)
{
 8000b14:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	2400      	movs	r4, #0
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b1a:	4f3d      	ldr	r7, [pc, #244]	; (8000c10 <MX_GPIO_Init+0x100>)
 8000b1c:	f244 0101 	movw	r1, #16385	; 0x4001
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	9408      	str	r4, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b22:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	9407      	str	r4, [sp, #28]
 8000b26:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b28:	4e3a      	ldr	r6, [pc, #232]	; (8000c14 <MX_GPIO_Init+0x104>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b32:	f040 0004 	orr.w	r0, r0, #4
 8000b36:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000b3a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b3e:	f000 0004 	and.w	r0, r0, #4
 8000b42:	9001      	str	r0, [sp, #4]
 8000b44:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b4a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8000b4e:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000b52:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b56:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000b5a:	9002      	str	r0, [sp, #8]
 8000b5c:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b62:	f040 0002 	orr.w	r0, r0, #2
 8000b66:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000b6a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b6e:	f000 0002 	and.w	r0, r0, #2
 8000b72:	9003      	str	r0, [sp, #12]
 8000b74:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b7a:	f040 0008 	orr.w	r0, r0, #8
 8000b7e:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000b82:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b86:	f000 0008 	and.w	r0, r0, #8
 8000b8a:	9004      	str	r0, [sp, #16]
 8000b8c:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b92:	4328      	orrs	r0, r5
 8000b94:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000b98:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b9c:	4028      	ands	r0, r5
 8000b9e:	9005      	str	r0, [sp, #20]
 8000ba0:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000ba6:	f040 0010 	orr.w	r0, r0, #16
 8000baa:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bae:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	9306      	str	r3, [sp, #24]
 8000bba:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bbc:	f000 ff68 	bl	8001a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc0:	4622      	mov	r2, r4
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	f000 ff63 	bl	8001a90 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bca:	f244 0301 	movw	r3, #16385	; 0x4001
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	4638      	mov	r0, r7
 8000bd0:	a907      	add	r1, sp, #28

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f000 fe34 	bl	8001848 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000be0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000be4:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	a907      	add	r1, sp, #28
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <MX_GPIO_Init+0x108>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bea:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bec:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f000 fe28 	bl	8001848 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	a907      	add	r1, sp, #28
 8000bfa:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bfc:	e9cd 7507 	strd	r7, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f000 fe20 	bl	8001848 <HAL_GPIO_Init>

}
 8000c08:	b00d      	add	sp, #52	; 0x34
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	58020400 	.word	0x58020400
 8000c14:	58021000 	.word	0x58021000
 8000c18:	58020000 	.word	0x58020000

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c20:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	224c      	movs	r2, #76	; 0x4c
 8000c24:	2100      	movs	r1, #0
 8000c26:	a80a      	add	r0, sp, #40	; 0x28
 8000c28:	f004 f8bd 	bl	8004da6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	2100      	movs	r1, #0
 8000c30:	a802      	add	r0, sp, #8
 8000c32:	f004 f8b8 	bl	8004da6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c36:	22bc      	movs	r2, #188	; 0xbc
 8000c38:	2100      	movs	r1, #0
 8000c3a:	a81d      	add	r0, sp, #116	; 0x74
 8000c3c:	f004 f8b3 	bl	8004da6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c40:	2004      	movs	r0, #4
 8000c42:	f000 ff3f 	bl	8001ac4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <SystemClock_Config+0xc4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4926      	ldr	r1, [pc, #152]	; (8000ce4 <SystemClock_Config+0xc8>)
 8000c4c:	9201      	str	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c4e:	461a      	mov	r2, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c50:	6998      	ldr	r0, [r3, #24]
 8000c52:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000c56:	6198      	str	r0, [r3, #24]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	62cb      	str	r3, [r1, #44]	; 0x2c
 8000c68:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c72:	6993      	ldr	r3, [r2, #24]
 8000c74:	049b      	lsls	r3, r3, #18
 8000c76:	d5fc      	bpl.n	8000c72 <SystemClock_Config+0x56>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c78:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7a:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7c:	2600      	movs	r6, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c7e:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c80:	f04f 0804 	mov.w	r8, #4
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c84:	223c      	movs	r2, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c86:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c8a:	910d      	str	r1, [sp, #52]	; 0x34
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8c:	2703      	movs	r7, #3
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c8e:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c90:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c94:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c96:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c98:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c9a:	e9cd 8215 	strd	r8, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c9e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ca2:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f000 ff4d 	bl	8001b44 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000caa:	2208      	movs	r2, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cb4:	4641      	mov	r1, r8
 8000cb6:	eb0d 0002 	add.w	r0, sp, r2
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cba:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cbc:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	9604      	str	r6, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cc0:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cc2:	9507      	str	r5, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cc4:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc6:	e9cd c702 	strd	ip, r7, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cca:	f001 fabf 	bl	800224c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cce:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cd0:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8000cd2:	973a      	str	r7, [sp, #232]	; 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd4:	f001 fee4 	bl	8002aa0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000cd8:	b04c      	add	sp, #304	; 0x130
 8000cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cde:	bf00      	nop
 8000ce0:	58024800 	.word	0x58024800
 8000ce4:	58000400 	.word	0x58000400

08000ce8 <byte2float>:
void resetDataBuffer(uint8_t *dataBuffer){
	for(uint16_t i = 1; i < 8192; i++){
		dataBuffer[i] = 0;
	}
}
void byte2float(uint8_t *rxDataBuffer, float *processedData){
 8000ce8:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
void byte2float(uint8_t *rxDataBuffer, float *processedData){
 8000cec:	4605      	mov	r5, r0
 8000cee:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <byte2float+0x48>)
 8000cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf6:	f000 fecb 	bl	8001a90 <HAL_GPIO_WritePin>
	for(int i = 0; i < 2*frameSize; i = i + 4){
 8000cfa:	2300      	movs	r3, #0
		memcpy(&processedData[i / 4], &rxDataBuffer[i], 4);
 8000cfc:	58e9      	ldr	r1, [r5, r3]
 8000cfe:	109a      	asrs	r2, r3, #2
	for(int i = 0; i < 2*frameSize; i = i + 4){
 8000d00:	3304      	adds	r3, #4
		memcpy(&processedData[i / 4], &rxDataBuffer[i], 4);
 8000d02:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for(int i = 0; i < 2*frameSize; i = i + 4){
 8000d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d0a:	d1f7      	bne.n	8000cfc <byte2float+0x14>
	}
	processed = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	4909      	ldr	r1, [pc, #36]	; (8000d34 <byte2float+0x4c>)
	received = 1;
 8000d10:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <byte2float+0x50>)
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 8000d12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	processed = 1;
 8000d16:	700b      	strb	r3, [r1, #0]
	received = 1;
 8000d18:	7013      	strb	r3, [r2, #0]
	HAL_Delay(500);
 8000d1a:	f000 fc3f 	bl	800159c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <byte2float+0x48>)
}
 8000d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000d2a:	f000 beb1 	b.w	8001a90 <HAL_GPIO_WritePin>
 8000d2e:	bf00      	nop
 8000d30:	58020400 	.word	0x58020400
 8000d34:	20000201 	.word	0x20000201
 8000d38:	20000202 	.word	0x20000202

08000d3c <float2byte>:
void float2byte(uint8_t *txDataBuffer, float *processedData){
 8000d3c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
void float2byte(uint8_t *txDataBuffer, float *processedData){
 8000d40:	4605      	mov	r5, r0
 8000d42:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000d44:	480f      	ldr	r0, [pc, #60]	; (8000d84 <float2byte+0x48>)
 8000d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4a:	f000 fea1 	bl	8001a90 <HAL_GPIO_WritePin>
	for(int i = 0; i < 2*frameSize; i = i + 4){
 8000d4e:	2300      	movs	r3, #0
		memcpy(&txDataBuffer[i], &processedData[i / 4], 4);
 8000d50:	109a      	asrs	r2, r3, #2
 8000d52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000d56:	50ea      	str	r2, [r5, r3]
	for(int i = 0; i < 2*frameSize; i = i + 4){
 8000d58:	3304      	adds	r3, #4
 8000d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d5e:	d1f7      	bne.n	8000d50 <float2byte+0x14>
	}
	processed = 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	4909      	ldr	r1, [pc, #36]	; (8000d88 <float2byte+0x4c>)
	received = 1;
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <float2byte+0x50>)
	// memcpy(&processedBuffer[0], &receiveBuffer[0], 4);
	HAL_Delay(500);
 8000d66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	processed = 1;
 8000d6a:	700b      	strb	r3, [r1, #0]
	received = 1;
 8000d6c:	7013      	strb	r3, [r2, #0]
	HAL_Delay(500);
 8000d6e:	f000 fc15 	bl	800159c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <float2byte+0x48>)
}
 8000d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000d7e:	f000 be87 	b.w	8001a90 <HAL_GPIO_WritePin>
 8000d82:	bf00      	nop
 8000d84:	58020400 	.word	0x58020400
 8000d88:	20000201 	.word	0x20000201
 8000d8c:	20000202 	.word	0x20000202

08000d90 <main>:
{
 8000d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d92:	f5ad 4da0 	sub.w	sp, sp, #20480	; 0x5000
 8000d96:	b083      	sub	sp, #12
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d9c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000da0:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <main+0xd4>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000da8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000db6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000db8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dbc:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000dc0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dc8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dcc:	f643 77e0 	movw	r7, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dd0:	f3c2 05c9 	ubfx	r5, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dd4:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000dd8:	07ae      	lsls	r6, r5, #30
 8000dda:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ddc:	ea02 0c07 	and.w	ip, r2, r7
 8000de0:	4630      	mov	r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000de2:	4629      	mov	r1, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000de4:	ea40 040c 	orr.w	r4, r0, ip
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000de8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dea:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 8000dee:	f8c3 4260 	str.w	r4, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000df2:	1c4c      	adds	r4, r1, #1
 8000df4:	d1f6      	bne.n	8000de4 <main+0x54>
 8000df6:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8000df8:	f112 0f20 	cmn.w	r2, #32
 8000dfc:	d1ee      	bne.n	8000ddc <main+0x4c>
 8000dfe:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e02:	695a      	ldr	r2, [r3, #20]
 8000e04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e0e:	f3bf 8f6f 	isb	sy
 8000e12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <main+0xd8>)
 8000e18:	e001      	b.n	8000e1e <main+0x8e>
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	d002      	beq.n	8000e24 <main+0x94>
 8000e1e:	6811      	ldr	r1, [r2, #0]
 8000e20:	0409      	lsls	r1, r1, #16
 8000e22:	d4fa      	bmi.n	8000e1a <main+0x8a>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e24:	4c10      	ldr	r4, [pc, #64]	; (8000e68 <main+0xd8>)
  HAL_Init();
 8000e26:	f000 fb75 	bl	8001514 <HAL_Init>
  SystemClock_Config();
 8000e2a:	f7ff fef7 	bl	8000c1c <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e2e:	f245 0108 	movw	r1, #20488	; 0x5008
 8000e32:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e36:	2000      	movs	r0, #0
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e38:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <main+0xdc>)
 8000e3a:	4469      	add	r1, sp
 8000e3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e40:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4c:	508b      	str	r3, [r1, r2]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	589b      	ldr	r3, [r3, r2]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e52:	f000 fe21 	bl	8001a98 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	4608      	mov	r0, r1
 8000e5a:	f000 fe2b 	bl	8001ab4 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e62:	e007      	b.n	8000e74 <main+0xe4>
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	ffffaffc 	.word	0xffffaffc
 8000e70:	3b01      	subs	r3, #1
 8000e72:	d002      	beq.n	8000e7a <main+0xea>
 8000e74:	6822      	ldr	r2, [r4, #0]
 8000e76:	0412      	lsls	r2, r2, #16
 8000e78:	d5fa      	bpl.n	8000e70 <main+0xe0>
  while (UartReady != SET)
 8000e7a:	4dba      	ldr	r5, [pc, #744]	; (8001164 <main+0x3d4>)
  MX_GPIO_Init();
 8000e7c:	f7ff fe48 	bl	8000b10 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e80:	f000 fa7e 	bl	8001380 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000e84:	f000 fa2e 	bl	80012e4 <MX_TIM2_Init>
  if(HAL_UART_Receive_IT(&huart3, &rxDataBuffer[0], bufferSize) != HAL_OK)
 8000e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8c:	49b6      	ldr	r1, [pc, #728]	; (8001168 <main+0x3d8>)
 8000e8e:	48b7      	ldr	r0, [pc, #732]	; (800116c <main+0x3dc>)
 8000e90:	f002 ff28 	bl	8003ce4 <HAL_UART_Receive_IT>
  while (UartReady != SET)
 8000e94:	782b      	ldrb	r3, [r5, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d024      	beq.n	8000ee4 <main+0x154>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e9a:	4cb5      	ldr	r4, [pc, #724]	; (8001170 <main+0x3e0>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	f000 fdf5 	bl	8001a90 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000ea6:	2064      	movs	r0, #100	; 0x64
 8000ea8:	f000 fb78 	bl	800159c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f000 fded 	bl	8001a90 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000eb6:	2064      	movs	r0, #100	; 0x64
 8000eb8:	f000 fb70 	bl	800159c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	f000 fde5 	bl	8001a90 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000ec6:	2064      	movs	r0, #100	; 0x64
 8000ec8:	f000 fb68 	bl	800159c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f000 fddd 	bl	8001a90 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eda:	f000 fb5f 	bl	800159c <HAL_Delay>
  while (UartReady != SET)
 8000ede:	782b      	ldrb	r3, [r5, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d1db      	bne.n	8000e9c <main+0x10c>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
  UartReady = RESET;
 8000ee6:	2300      	movs	r3, #0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ee8:	48a1      	ldr	r0, [pc, #644]	; (8001170 <main+0x3e0>)
 8000eea:	4611      	mov	r1, r2
  UartReady = RESET;
 8000eec:	702b      	strb	r3, [r5, #0]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000eee:	f000 fdcf 	bl	8001a90 <HAL_GPIO_WritePin>
  if(rxDataBuffer[8191] != 0 && (processed == 0)){
 8000ef2:	489d      	ldr	r0, [pc, #628]	; (8001168 <main+0x3d8>)
 8000ef4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ef8:	5cc3      	ldrb	r3, [r0, r3]
 8000efa:	b12b      	cbz	r3, 8000f08 <main+0x178>
 8000efc:	4b9d      	ldr	r3, [pc, #628]	; (8001174 <main+0x3e4>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b913      	cbnz	r3, 8000f08 <main+0x178>
	  byte2float(rxDataBuffer, processedData);
 8000f02:	499d      	ldr	r1, [pc, #628]	; (8001178 <main+0x3e8>)
 8000f04:	f7ff fef0 	bl	8000ce8 <byte2float>
  __HAL_TIM_ENABLE(&htim2);
 8000f08:	4e9c      	ldr	r6, [pc, #624]	; (800117c <main+0x3ec>)
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f0a:	2400      	movs	r4, #0
  __HAL_TIM_ENABLE(&htim2);
 8000f0c:	6833      	ldr	r3, [r6, #0]
  HAL_TIM_Base_Start(&htim2);
 8000f0e:	4630      	mov	r0, r6
  __HAL_TIM_ENABLE(&htim2);
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
  __HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f1e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8000f20:	f002 fcee 	bl	8003900 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f24:	6833      	ldr	r3, [r6, #0]
	inst_absolute(&processedData[0], &instAbs[0]);
 8000f26:	a902      	add	r1, sp, #8
 8000f28:	4893      	ldr	r0, [pc, #588]	; (8001178 <main+0x3e8>)
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f2a:	625c      	str	r4, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f2c:	625c      	str	r4, [r3, #36]	; 0x24
	inst_absolute(&processedData[0], &instAbs[0]);
 8000f2e:	f7ff fbf9 	bl	8000724 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000f32:	6833      	ldr	r3, [r6, #0]
 8000f34:	4621      	mov	r1, r4
 8000f36:	2231      	movs	r2, #49	; 0x31
 8000f38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000f3a:	4891      	ldr	r0, [pc, #580]	; (8001180 <main+0x3f0>)
 8000f3c:	f003 ff33 	bl	8004da6 <memset>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter);
 8000f40:	4622      	mov	r2, r4
 8000f42:	4990      	ldr	r1, [pc, #576]	; (8001184 <main+0x3f4>)
 8000f44:	4890      	ldr	r0, [pc, #576]	; (8001188 <main+0x3f8>)
 8000f46:	f004 fc2b 	bl	80057a0 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f4a:	4888      	ldr	r0, [pc, #544]	; (800116c <main+0x3dc>)
 8000f4c:	f003 fd1e 	bl	800498c <UART_CheckIdleState>
 8000f50:	b928      	cbnz	r0, 8000f5e <main+0x1ce>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	2232      	movs	r2, #50	; 0x32
 8000f56:	498c      	ldr	r1, [pc, #560]	; (8001188 <main+0x3f8>)
 8000f58:	4884      	ldr	r0, [pc, #528]	; (800116c <main+0x3dc>)
 8000f5a:	f002 fe07 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000f5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f62:	f000 fb1b 	bl	800159c <HAL_Delay>
 8000f66:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4887      	ldr	r0, [pc, #540]	; (800118c <main+0x3fc>)
 8000f6e:	f003 ff1a 	bl	8004da6 <memset>
	float2byte(txDataBuffer, instAbs);
 8000f72:	4887      	ldr	r0, [pc, #540]	; (8001190 <main+0x400>)
 8000f74:	a902      	add	r1, sp, #8
 8000f76:	f7ff fee1 	bl	8000d3c <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f7a:	487c      	ldr	r0, [pc, #496]	; (800116c <main+0x3dc>)
 8000f7c:	f003 fd06 	bl	800498c <UART_CheckIdleState>
 8000f80:	b998      	cbnz	r0, 8000faa <main+0x21a>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	2204      	movs	r2, #4
 8000f86:	4983      	ldr	r1, [pc, #524]	; (8001194 <main+0x404>)
 8000f88:	4878      	ldr	r0, [pc, #480]	; (800116c <main+0x3dc>)
 8000f8a:	f002 fdef 	bl	8003b6c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8000f8e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f96:	497e      	ldr	r1, [pc, #504]	; (8001190 <main+0x400>)
 8000f98:	4874      	ldr	r0, [pc, #464]	; (800116c <main+0x3dc>)
 8000f9a:	f002 fde7 	bl	8003b6c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	497d      	ldr	r1, [pc, #500]	; (8001198 <main+0x408>)
 8000fa4:	4871      	ldr	r0, [pc, #452]	; (800116c <main+0x3dc>)
 8000fa6:	f002 fde1 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(2000);
 8000faa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fae:	2400      	movs	r4, #0
	HAL_Delay(2000);
 8000fb0:	f000 faf4 	bl	800159c <HAL_Delay>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fb4:	6833      	ldr	r3, [r6, #0]
	inst_phase(&processedData[0], &instPhase[0]);
 8000fb6:	f241 0108 	movw	r1, #4104	; 0x1008
 8000fba:	486f      	ldr	r0, [pc, #444]	; (8001178 <main+0x3e8>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fbc:	625c      	str	r4, [r3, #36]	; 0x24
	inst_phase(&processedData[0], &instPhase[0]);
 8000fbe:	4469      	add	r1, sp
 8000fc0:	f7ff fbe4 	bl	800078c <inst_phase>
	unwrap(&instPhase[0], &unwrappedPhase[0]);
 8000fc4:	f241 0008 	movw	r0, #4104	; 0x1008
 8000fc8:	f244 0108 	movw	r1, #16392	; 0x4008
 8000fcc:	4468      	add	r0, sp
 8000fce:	4469      	add	r1, sp
 8000fd0:	f7ff fbfa 	bl	80007c8 <unwrap>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000fd4:	6833      	ldr	r3, [r6, #0]
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	2231      	movs	r2, #49	; 0x31
 8000fda:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000fdc:	4868      	ldr	r0, [pc, #416]	; (8001180 <main+0x3f0>)
 8000fde:	f003 fee2 	bl	8004da6 <memset>
	sprintf(&txStringBuffer[0], "Inst phase counter = %ld\r\n", counter);
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	496d      	ldr	r1, [pc, #436]	; (800119c <main+0x40c>)
 8000fe6:	4868      	ldr	r0, [pc, #416]	; (8001188 <main+0x3f8>)
 8000fe8:	f004 fbda 	bl	80057a0 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000fec:	485f      	ldr	r0, [pc, #380]	; (800116c <main+0x3dc>)
 8000fee:	f003 fccd 	bl	800498c <UART_CheckIdleState>
 8000ff2:	b928      	cbnz	r0, 8001000 <main+0x270>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	2232      	movs	r2, #50	; 0x32
 8000ff8:	4963      	ldr	r1, [pc, #396]	; (8001188 <main+0x3f8>)
 8000ffa:	485c      	ldr	r0, [pc, #368]	; (800116c <main+0x3dc>)
 8000ffc:	f002 fdb6 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(2000);
 8001000:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001004:	f000 faca 	bl	800159c <HAL_Delay>
 8001008:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800100c:	2100      	movs	r1, #0
 800100e:	485f      	ldr	r0, [pc, #380]	; (800118c <main+0x3fc>)
 8001010:	f003 fec9 	bl	8004da6 <memset>
	float2byte(txDataBuffer, instPhase);
 8001014:	f241 0108 	movw	r1, #4104	; 0x1008
 8001018:	485d      	ldr	r0, [pc, #372]	; (8001190 <main+0x400>)
 800101a:	4469      	add	r1, sp
 800101c:	f7ff fe8e 	bl	8000d3c <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001020:	4852      	ldr	r0, [pc, #328]	; (800116c <main+0x3dc>)
 8001022:	f003 fcb3 	bl	800498c <UART_CheckIdleState>
 8001026:	b998      	cbnz	r0, 8001050 <main+0x2c0>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2204      	movs	r2, #4
 800102c:	4959      	ldr	r1, [pc, #356]	; (8001194 <main+0x404>)
 800102e:	484f      	ldr	r0, [pc, #316]	; (800116c <main+0x3dc>)
 8001030:	f002 fd9c 	bl	8003b6c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 8001034:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800103c:	4954      	ldr	r1, [pc, #336]	; (8001190 <main+0x400>)
 800103e:	484b      	ldr	r0, [pc, #300]	; (800116c <main+0x3dc>)
 8001040:	f002 fd94 	bl	8003b6c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	2204      	movs	r2, #4
 8001048:	4953      	ldr	r1, [pc, #332]	; (8001198 <main+0x408>)
 800104a:	4848      	ldr	r0, [pc, #288]	; (800116c <main+0x3dc>)
 800104c:	f002 fd8e 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(2000);
 8001050:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001054:	2400      	movs	r4, #0
	HAL_Delay(2000);
 8001056:	f000 faa1 	bl	800159c <HAL_Delay>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800105a:	6833      	ldr	r3, [r6, #0]
	inst_frequency(&processedData[0], &instFreq[0]);
 800105c:	f242 0108 	movw	r1, #8200	; 0x2008
 8001060:	4845      	ldr	r0, [pc, #276]	; (8001178 <main+0x3e8>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001062:	625c      	str	r4, [r3, #36]	; 0x24
	inst_frequency(&processedData[0], &instFreq[0]);
 8001064:	4469      	add	r1, sp
 8001066:	f7ff fbfd 	bl	8000864 <inst_frequency>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800106a:	6833      	ldr	r3, [r6, #0]
 800106c:	4621      	mov	r1, r4
 800106e:	2231      	movs	r2, #49	; 0x31
 8001070:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001072:	4843      	ldr	r0, [pc, #268]	; (8001180 <main+0x3f0>)
 8001074:	f003 fe97 	bl	8004da6 <memset>
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n", counter);
 8001078:	4622      	mov	r2, r4
 800107a:	4949      	ldr	r1, [pc, #292]	; (80011a0 <main+0x410>)
 800107c:	4842      	ldr	r0, [pc, #264]	; (8001188 <main+0x3f8>)
 800107e:	f004 fb8f 	bl	80057a0 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001082:	483a      	ldr	r0, [pc, #232]	; (800116c <main+0x3dc>)
 8001084:	f003 fc82 	bl	800498c <UART_CheckIdleState>
 8001088:	b928      	cbnz	r0, 8001096 <main+0x306>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	2232      	movs	r2, #50	; 0x32
 800108e:	493e      	ldr	r1, [pc, #248]	; (8001188 <main+0x3f8>)
 8001090:	4836      	ldr	r0, [pc, #216]	; (800116c <main+0x3dc>)
 8001092:	f002 fd6b 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(2000);
 8001096:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800109a:	f000 fa7f 	bl	800159c <HAL_Delay>
 800109e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80010a2:	2100      	movs	r1, #0
 80010a4:	4839      	ldr	r0, [pc, #228]	; (800118c <main+0x3fc>)
 80010a6:	f003 fe7e 	bl	8004da6 <memset>
	float2byte(txDataBuffer, instFreq);
 80010aa:	f242 0108 	movw	r1, #8200	; 0x2008
 80010ae:	4838      	ldr	r0, [pc, #224]	; (8001190 <main+0x400>)
 80010b0:	4469      	add	r1, sp
 80010b2:	f7ff fe43 	bl	8000d3c <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80010b6:	482d      	ldr	r0, [pc, #180]	; (800116c <main+0x3dc>)
 80010b8:	f003 fc68 	bl	800498c <UART_CheckIdleState>
 80010bc:	b998      	cbnz	r0, 80010e6 <main+0x356>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	2204      	movs	r2, #4
 80010c2:	4934      	ldr	r1, [pc, #208]	; (8001194 <main+0x404>)
 80010c4:	4829      	ldr	r0, [pc, #164]	; (800116c <main+0x3dc>)
 80010c6:	f002 fd51 	bl	8003b6c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 80010ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d2:	492f      	ldr	r1, [pc, #188]	; (8001190 <main+0x400>)
 80010d4:	4825      	ldr	r0, [pc, #148]	; (800116c <main+0x3dc>)
 80010d6:	f002 fd49 	bl	8003b6c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 80010da:	2364      	movs	r3, #100	; 0x64
 80010dc:	2204      	movs	r2, #4
 80010de:	492e      	ldr	r1, [pc, #184]	; (8001198 <main+0x408>)
 80010e0:	4822      	ldr	r0, [pc, #136]	; (800116c <main+0x3dc>)
 80010e2:	f002 fd43 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(2000);
 80010e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010ea:	2400      	movs	r4, #0
	HAL_Delay(2000);
 80010ec:	f000 fa56 	bl	800159c <HAL_Delay>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010f0:	6833      	ldr	r3, [r6, #0]
	inst_centralized_normalized_absolute(&processedData[0], &instCNA[0]);
 80010f2:	f243 0108 	movw	r1, #12296	; 0x3008
 80010f6:	4820      	ldr	r0, [pc, #128]	; (8001178 <main+0x3e8>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010f8:	625c      	str	r4, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&processedData[0], &instCNA[0]);
 80010fa:	4469      	add	r1, sp
 80010fc:	f7ff fc8c 	bl	8000a18 <inst_centralized_normalized_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001100:	6833      	ldr	r3, [r6, #0]
 8001102:	4621      	mov	r1, r4
 8001104:	2231      	movs	r2, #49	; 0x31
 8001106:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <main+0x3f0>)
 800110a:	f003 fe4c 	bl	8004da6 <memset>
	sprintf(&txStringBuffer[0], "Inst CNA counter = %ld\r\n&", counter);
 800110e:	4622      	mov	r2, r4
 8001110:	4924      	ldr	r1, [pc, #144]	; (80011a4 <main+0x414>)
 8001112:	481d      	ldr	r0, [pc, #116]	; (8001188 <main+0x3f8>)
 8001114:	f004 fb44 	bl	80057a0 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <main+0x3dc>)
 800111a:	f003 fc37 	bl	800498c <UART_CheckIdleState>
 800111e:	b928      	cbnz	r0, 800112c <main+0x39c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txStringBuffer[0], sizeof(txStringBuffer), 100);
 8001120:	2364      	movs	r3, #100	; 0x64
 8001122:	2232      	movs	r2, #50	; 0x32
 8001124:	4918      	ldr	r1, [pc, #96]	; (8001188 <main+0x3f8>)
 8001126:	4811      	ldr	r0, [pc, #68]	; (800116c <main+0x3dc>)
 8001128:	f002 fd20 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(2000);
 800112c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001130:	f000 fa34 	bl	800159c <HAL_Delay>
 8001134:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001138:	2100      	movs	r1, #0
 800113a:	4814      	ldr	r0, [pc, #80]	; (800118c <main+0x3fc>)
 800113c:	f003 fe33 	bl	8004da6 <memset>
	float2byte(txDataBuffer, instCNA);
 8001140:	f243 0108 	movw	r1, #12296	; 0x3008
 8001144:	4812      	ldr	r0, [pc, #72]	; (8001190 <main+0x400>)
 8001146:	4469      	add	r1, sp
 8001148:	f7ff fdf8 	bl	8000d3c <float2byte>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <main+0x3dc>)
 800114e:	f003 fc1d 	bl	800498c <UART_CheckIdleState>
 8001152:	2800      	cmp	r0, #0
 8001154:	d136      	bne.n	80011c4 <main+0x434>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txHead[0], 4, 100);
 8001156:	2364      	movs	r3, #100	; 0x64
 8001158:	2204      	movs	r2, #4
 800115a:	490e      	ldr	r1, [pc, #56]	; (8001194 <main+0x404>)
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <main+0x3dc>)
 800115e:	f002 fd05 	bl	8003b6c <HAL_UART_Transmit>
 8001162:	e021      	b.n	80011a8 <main+0x418>
 8001164:	20000200 	.word	0x20000200
 8001168:	20004244 	.word	0x20004244
 800116c:	20006290 	.word	0x20006290
 8001170:	58020400 	.word	0x58020400
 8001174:	20000201 	.word	0x20000201
 8001178:	20000244 	.word	0x20000244
 800117c:	20006244 	.word	0x20006244
 8001180:	20000205 	.word	0x20000205
 8001184:	080071a4 	.word	0x080071a4
 8001188:	20000204 	.word	0x20000204
 800118c:	20002245 	.word	0x20002245
 8001190:	20002244 	.word	0x20002244
 8001194:	08007214 	.word	0x08007214
 8001198:	08007218 	.word	0x08007218
 800119c:	080071c0 	.word	0x080071c0
 80011a0:	080071dc 	.word	0x080071dc
 80011a4:	080071f8 	.word	0x080071f8
		HAL_UART_Transmit(&huart3, (uint8_t*) &txDataBuffer[0], 4096, 2000);
 80011a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b0:	491b      	ldr	r1, [pc, #108]	; (8001220 <main+0x490>)
 80011b2:	481c      	ldr	r0, [pc, #112]	; (8001224 <main+0x494>)
 80011b4:	f002 fcda 	bl	8003b6c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) &txTail[0], 4, 100);
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	2204      	movs	r2, #4
 80011bc:	491a      	ldr	r1, [pc, #104]	; (8001228 <main+0x498>)
 80011be:	4819      	ldr	r0, [pc, #100]	; (8001224 <main+0x494>)
 80011c0:	f002 fcd4 	bl	8003b6c <HAL_UART_Transmit>
	HAL_Delay(2000);
 80011c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80011c8:	2400      	movs	r4, #0
	HAL_Delay(2000);
 80011ca:	f000 f9e7 	bl	800159c <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80011ce:	6833      	ldr	r3, [r6, #0]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80011d0:	4622      	mov	r2, r4
 80011d2:	2101      	movs	r1, #1
  __HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80011d4:	625c      	str	r4, [r3, #36]	; 0x24
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80011d6:	4627      	mov	r7, r4
  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80011d8:	4814      	ldr	r0, [pc, #80]	; (800122c <main+0x49c>)
 80011da:	f000 fc59 	bl	8001a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80011de:	4622      	mov	r2, r4
 80011e0:	2102      	movs	r1, #2
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <main+0x4a0>)
 80011e4:	f000 fc54 	bl	8001a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80011e8:	4622      	mov	r2, r4
 80011ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ee:	480f      	ldr	r0, [pc, #60]	; (800122c <main+0x49c>)
 80011f0:	f000 fc4e 	bl	8001a90 <HAL_GPIO_WritePin>
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 80011f4:	4c0f      	ldr	r4, [pc, #60]	; (8001234 <main+0x4a4>)
 80011f6:	6832      	ldr	r2, [r6, #0]
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 80011f8:	4d0d      	ldr	r5, [pc, #52]	; (8001230 <main+0x4a0>)
	if(__HAL_TIM_GET_COUNTER(&htim2) >= 240000000){
 80011fa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80011fc:	42a3      	cmp	r3, r4
 80011fe:	d9fc      	bls.n	80011fa <main+0x46a>
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 8001200:	2102      	movs	r1, #2
 8001202:	4628      	mov	r0, r5
 8001204:	f000 fc3e 	bl	8001a84 <HAL_GPIO_ReadPin>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2102      	movs	r1, #2
		if((HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin))){
 800120c:	b908      	cbnz	r0, 8001212 <main+0x482>
			HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	2102      	movs	r1, #2
 8001212:	4628      	mov	r0, r5
 8001214:	f000 fc3c 	bl	8001a90 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001218:	6832      	ldr	r2, [r6, #0]
 800121a:	6257      	str	r7, [r2, #36]	; 0x24
 800121c:	e7ed      	b.n	80011fa <main+0x46a>
 800121e:	bf00      	nop
 8001220:	20002244 	.word	0x20002244
 8001224:	20006290 	.word	0x20006290
 8001228:	08007218 	.word	0x08007218
 800122c:	58020400 	.word	0x58020400
 8001230:	58021000 	.word	0x58021000
 8001234:	0e4e1bff 	.word	0x0e4e1bff

08001238 <HAL_UART_TxCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3)
{
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8001238:	4b01      	ldr	r3, [pc, #4]	; (8001240 <HAL_UART_TxCpltCallback+0x8>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	4770      	bx	lr
 8001240:	20000200 	.word	0x20000200

08001244 <HAL_UART_RxCpltCallback>:
 8001244:	4b01      	ldr	r3, [pc, #4]	; (800124c <HAL_UART_RxCpltCallback+0x8>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	4770      	bx	lr
 800124c:	20000200 	.word	0x20000200

08001250 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop

08001254 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_MspInit+0x20>)
{
 8001256:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001258:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800125c:	f042 0202 	orr.w	r2, r2, #2
 8001260:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001270:	b002      	add	sp, #8
 8001272:	4770      	bx	lr
 8001274:	58024400 	.word	0x58024400

08001278 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	e7fe      	b.n	800127c <HardFault_Handler>
 800127e:	bf00      	nop

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler>
 8001282:	bf00      	nop

08001284 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001284:	e7fe      	b.n	8001284 <BusFault_Handler>
 8001286:	bf00      	nop

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler>
 800128a:	bf00      	nop

0800128c <SVC_Handler>:
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop

08001290 <DebugMon_Handler>:
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <PendSV_Handler>:
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 b96e 	b.w	8001578 <HAL_IncTick>

0800129c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800129c:	4801      	ldr	r0, [pc, #4]	; (80012a4 <USART3_IRQHandler+0x8>)
 800129e:	f002 bed7 	b.w	8004050 <HAL_UART_IRQHandler>
 80012a2:	bf00      	nop
 80012a4:	20006290 	.word	0x20006290

080012a8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012a8:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <_sbrk+0x34>)
{
 80012aa:	b508      	push	{r3, lr}
	if (heap_end == 0)
 80012ac:	6813      	ldr	r3, [r2, #0]
 80012ae:	b133      	cbz	r3, 80012be <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80012b0:	4418      	add	r0, r3
 80012b2:	4669      	mov	r1, sp
 80012b4:	4288      	cmp	r0, r1
 80012b6:	d809      	bhi.n	80012cc <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80012b8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <_sbrk+0x38>)
 80012c0:	460b      	mov	r3, r1
 80012c2:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80012c4:	4669      	mov	r1, sp
 80012c6:	4418      	add	r0, r3
 80012c8:	4288      	cmp	r0, r1
 80012ca:	d9f5      	bls.n	80012b8 <_sbrk+0x10>
		errno = ENOMEM;
 80012cc:	f003 fd26 	bl	8004d1c <__errno>
 80012d0:	220c      	movs	r2, #12
		return (caddr_t) -1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 80012d6:	6002      	str	r2, [r0, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	bd08      	pop	{r3, pc}
 80012dc:	20000238 	.word	0x20000238
 80012e0:	20006328 	.word	0x20006328

080012e4 <MX_TIM2_Init>:
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <MX_TIM2_Init+0x68>)
 80012e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
{
 80012f0:	b500      	push	{lr}
 80012f2:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80012f4:	6010      	str	r0, [r2, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f6:	4610      	mov	r0, r2
  htim2.Init.Period = 4294967295;
 80012f8:	60d1      	str	r1, [r2, #12]
  htim2.Init.Prescaler = 0;
 80012fa:	6053      	str	r3, [r2, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fc:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fe:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	6093      	str	r3, [r2, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	6113      	str	r3, [r2, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	9307      	str	r3, [sp, #28]
 8001308:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001310:	f002 fa64 	bl	80037dc <HAL_TIM_Base_Init>
 8001314:	b9b8      	cbnz	r0, 8001346 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131a:	a904      	add	r1, sp, #16
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001320:	f002 fb0a 	bl	8003938 <HAL_TIM_ConfigClockSource>
 8001324:	b960      	cbnz	r0, 8001340 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001326:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001328:	a901      	add	r1, sp, #4
 800132a:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001330:	f002 fbc2 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	b108      	cbz	r0, 800133a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001336:	f7ff ff8b 	bl	8001250 <Error_Handler>
  }

}
 800133a:	b009      	add	sp, #36	; 0x24
 800133c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001340:	f7ff ff86 	bl	8001250 <Error_Handler>
 8001344:	e7ef      	b.n	8001326 <MX_TIM2_Init+0x42>
    Error_Handler();
 8001346:	f7ff ff83 	bl	8001250 <Error_Handler>
 800134a:	e7e4      	b.n	8001316 <MX_TIM2_Init+0x32>
 800134c:	20006244 	.word	0x20006244

08001350 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001350:	6803      	ldr	r3, [r0, #0]
 8001352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001356:	d000      	beq.n	800135a <HAL_TIM_Base_MspInit+0xa>
 8001358:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_TIM_Base_MspInit+0x2c>)
{
 800135c:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800136a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001376:	b002      	add	sp, #8
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	58024400 	.word	0x58024400

08001380 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001380:	b538      	push	{r3, r4, r5, lr}

  huart3.Instance = USART3;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_USART3_UART_Init+0x64>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001384:	2200      	movs	r2, #0
  huart3.Init.BaudRate = 115200;
 8001386:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart3.Instance = USART3;
 800138a:	4d17      	ldr	r5, [pc, #92]	; (80013e8 <MX_USART3_UART_Init+0x68>)
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800138c:	210c      	movs	r1, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138e:	4618      	mov	r0, r3
  huart3.Init.Parity = UART_PARITY_NONE;
 8001390:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001392:	6159      	str	r1, [r3, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 8001396:	e9c3 5400 	strd	r5, r4, [r3]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800139a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800139e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a2:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a6:	f002 ffb1 	bl	800430c <HAL_UART_Init>
 80013aa:	b9c0      	cbnz	r0, 80013de <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ac:	2100      	movs	r1, #0
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_USART3_UART_Init+0x64>)
 80013b0:	f003 fb74 	bl	8004a9c <HAL_UARTEx_SetTxFifoThreshold>
 80013b4:	b980      	cbnz	r0, 80013d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <MX_USART3_UART_Init+0x64>)
 80013ba:	f003 fbc1 	bl	8004b40 <HAL_UARTEx_SetRxFifoThreshold>
 80013be:	b940      	cbnz	r0, 80013d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <MX_USART3_UART_Init+0x64>)
 80013c2:	f003 fb4d 	bl	8004a60 <HAL_UARTEx_DisableFifoMode>
 80013c6:	b900      	cbnz	r0, 80013ca <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
  }

}
 80013c8:	bd38      	pop	{r3, r4, r5, pc}
 80013ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80013ce:	f7ff bf3f 	b.w	8001250 <Error_Handler>
    Error_Handler();
 80013d2:	f7ff ff3d 	bl	8001250 <Error_Handler>
 80013d6:	e7f3      	b.n	80013c0 <MX_USART3_UART_Init+0x40>
    Error_Handler();
 80013d8:	f7ff ff3a 	bl	8001250 <Error_Handler>
 80013dc:	e7eb      	b.n	80013b6 <MX_USART3_UART_Init+0x36>
    Error_Handler();
 80013de:	f7ff ff37 	bl	8001250 <Error_Handler>
 80013e2:	e7e3      	b.n	80013ac <MX_USART3_UART_Init+0x2c>
 80013e4:	20006290 	.word	0x20006290
 80013e8:	40004800 	.word	0x40004800

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART3)
 80013ec:	6802      	ldr	r2, [r0, #0]
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_UART_MspInit+0x7c>)
{
 80013f0:	b570      	push	{r4, r5, r6, lr}
  if(uartHandle->Instance==USART3)
 80013f2:	429a      	cmp	r2, r3
{
 80013f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f04f 0400 	mov.w	r4, #0
 80013fa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80013fe:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001402:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART3)
 8001404:	d001      	beq.n	800140a <HAL_UART_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001406:	b008      	add	sp, #32
 8001408:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800140c:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001412:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8001414:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 800141a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800141e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001422:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001426:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001432:	f042 0208 	orr.w	r2, r2, #8
 8001436:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800143e:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001440:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800144c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f000 f9fb 	bl	8001848 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001452:	4622      	mov	r2, r4
 8001454:	4621      	mov	r1, r4
 8001456:	2027      	movs	r0, #39	; 0x27
 8001458:	f000 f8cc 	bl	80015f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800145c:	2027      	movs	r0, #39	; 0x27
 800145e:	f000 f8ff 	bl	8001660 <HAL_NVIC_EnableIRQ>
}
 8001462:	b008      	add	sp, #32
 8001464:	bd70      	pop	{r4, r5, r6, pc}
 8001466:	bf00      	nop
 8001468:	40004800 	.word	0x40004800
 800146c:	58024400 	.word	0x58024400
 8001470:	58020c00 	.word	0x58020c00

08001474 <Reset_Handler>:
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ac <LoopFillZerobss+0x14>
 8001478:	2100      	movs	r1, #0
 800147a:	e003      	b.n	8001484 <LoopCopyDataInit>

0800147c <CopyDataInit>:
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <LoopFillZerobss+0x18>)
 800147e:	585b      	ldr	r3, [r3, r1]
 8001480:	5043      	str	r3, [r0, r1]
 8001482:	3104      	adds	r1, #4

08001484 <LoopCopyDataInit>:
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <LoopFillZerobss+0x1c>)
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <LoopFillZerobss+0x20>)
 8001488:	1842      	adds	r2, r0, r1
 800148a:	429a      	cmp	r2, r3
 800148c:	d3f6      	bcc.n	800147c <CopyDataInit>
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <LoopFillZerobss+0x24>)
 8001490:	e002      	b.n	8001498 <LoopFillZerobss>

08001492 <FillZerobss>:
 8001492:	2300      	movs	r3, #0
 8001494:	f842 3b04 	str.w	r3, [r2], #4

08001498 <LoopFillZerobss>:
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <LoopFillZerobss+0x28>)
 800149a:	429a      	cmp	r2, r3
 800149c:	d3f9      	bcc.n	8001492 <FillZerobss>
 800149e:	f7ff f8f7 	bl	8000690 <SystemInit>
 80014a2:	f003 fc41 	bl	8004d28 <__libc_init_array>
 80014a6:	f7ff fc73 	bl	8000d90 <main>
 80014aa:	4770      	bx	lr
 80014ac:	20020000 	.word	0x20020000
 80014b0:	08007528 	.word	0x08007528
 80014b4:	20000000 	.word	0x20000000
 80014b8:	200001e4 	.word	0x200001e4
 80014bc:	200001e4 	.word	0x200001e4
 80014c0:	20006324 	.word	0x20006324

080014c4 <ADC3_IRQHandler>:
 80014c4:	e7fe      	b.n	80014c4 <ADC3_IRQHandler>
	...

080014c8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_InitTick+0x40>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b90b      	cbnz	r3, 80014d2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014d0:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d6:	490d      	ldr	r1, [pc, #52]	; (800150c <HAL_InitTick+0x44>)
 80014d8:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80014dc:	b510      	push	{r4, lr}
 80014de:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014e0:	6808      	ldr	r0, [r1, #0]
 80014e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80014e6:	f000 f8c9 	bl	800167c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	2c0f      	cmp	r4, #15
 80014ec:	d800      	bhi.n	80014f0 <HAL_InitTick+0x28>
 80014ee:	b108      	cbz	r0, 80014f4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80014f0:	2001      	movs	r0, #1
}
 80014f2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	4621      	mov	r1, r4
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 f87a 	bl	80015f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_InitTick+0x48>)
 8001502:	2000      	movs	r0, #0
 8001504:	601c      	str	r4, [r3, #0]
}
 8001506:	bd10      	pop	{r4, pc}
 8001508:	20000008 	.word	0x20000008
 800150c:	20000000 	.word	0x20000000
 8001510:	2000000c 	.word	0x2000000c

08001514 <HAL_Init>:
{
 8001514:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001516:	2003      	movs	r0, #3
{
 8001518:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151a:	f000 f857 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800151e:	4c12      	ldr	r4, [pc, #72]	; (8001568 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001520:	f000 fe08 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_Init+0x58>)
 8001526:	4912      	ldr	r1, [pc, #72]	; (8001570 <HAL_Init+0x5c>)
 8001528:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800152a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800152c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8001530:	4d10      	ldr	r5, [pc, #64]	; (8001574 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001532:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001536:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001538:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800153a:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800153e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001542:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001546:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001548:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800154c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154e:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001550:	f7ff ffba 	bl	80014c8 <HAL_InitTick>
 8001554:	b110      	cbz	r0, 800155c <HAL_Init+0x48>
    return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
}
 8001558:	b003      	add	sp, #12
 800155a:	bd30      	pop	{r4, r5, pc}
 800155c:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800155e:	f7ff fe79 	bl	8001254 <HAL_MspInit>
  return HAL_OK;
 8001562:	9801      	ldr	r0, [sp, #4]
}
 8001564:	b003      	add	sp, #12
 8001566:	bd30      	pop	{r4, r5, pc}
 8001568:	20000004 	.word	0x20000004
 800156c:	58024400 	.word	0x58024400
 8001570:	08007190 	.word	0x08007190
 8001574:	20000000 	.word	0x20000000

08001578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4a03      	ldr	r2, [pc, #12]	; (8001588 <HAL_IncTick+0x10>)
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_IncTick+0x14>)
 800157c:	6811      	ldr	r1, [r2, #0]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	440b      	add	r3, r1
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2000631c 	.word	0x2000631c
 800158c:	20000008 	.word	0x20000008

08001590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001590:	4b01      	ldr	r3, [pc, #4]	; (8001598 <HAL_GetTick+0x8>)
 8001592:	6818      	ldr	r0, [r3, #0]
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2000631c 	.word	0x2000631c

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fff6 	bl	8001590 <HAL_GetTick>
 80015a4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	1c63      	adds	r3, r4, #1
 80015a8:	d002      	beq.n	80015b0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <HAL_Delay+0x20>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b0:	f7ff ffee 	bl	8001590 <HAL_GetTick>
 80015b4:	1b40      	subs	r0, r0, r5
 80015b6:	42a0      	cmp	r0, r4
 80015b8:	d3fa      	bcc.n	80015b0 <HAL_Delay+0x14>
  {
  }
}
 80015ba:	bd38      	pop	{r3, r4, r5, pc}
 80015bc:	20000008 	.word	0x20000008

080015c0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80015c0:	4b01      	ldr	r3, [pc, #4]	; (80015c8 <HAL_GetREVID+0x8>)
 80015c2:	6818      	ldr	r0, [r3, #0]
}
 80015c4:	0c00      	lsrs	r0, r0, #16
 80015c6:	4770      	bx	lr
 80015c8:	5c001000 	.word	0x5c001000

080015cc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4907      	ldr	r1, [pc, #28]	; (80015ec <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ce:	0200      	lsls	r0, r0, #8
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80015de:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80015e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015e4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e6:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80015e8:	60c8      	str	r0, [r1, #12]
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	05fa0000 	.word	0x05fa0000

080015f4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_NVIC_SetPriority+0x60>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fe:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	2d04      	cmp	r5, #4
 8001606:	bf28      	it	cs
 8001608:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	2c06      	cmp	r4, #6
 800160c:	d918      	bls.n	8001640 <HAL_NVIC_SetPriority+0x4c>
 800160e:	3b03      	subs	r3, #3
 8001610:	f04f 34ff 	mov.w	r4, #4294967295
 8001614:	409c      	lsls	r4, r3
 8001616:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161a:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800161e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	fa02 f205 	lsl.w	r2, r2, r5
 8001624:	ea21 0102 	bic.w	r1, r1, r2
 8001628:	fa01 f203 	lsl.w	r2, r1, r3
 800162c:	ea42 0204 	orr.w	r2, r2, r4
 8001630:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001634:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8001636:	db06      	blt.n	8001646 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_NVIC_SetPriority+0x64>)
 800163a:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800163c:	bc30      	pop	{r4, r5}
 800163e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001640:	2400      	movs	r4, #0
 8001642:	4623      	mov	r3, r4
 8001644:	e7e9      	b.n	800161a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	f000 000f 	and.w	r0, r0, #15
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <HAL_NVIC_SetPriority+0x68>)
 800164c:	541a      	strb	r2, [r3, r0]
 800164e:	bc30      	pop	{r4, r5}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	e000e400 	.word	0xe000e400
 800165c:	e000ed14 	.word	0xe000ed14

08001660 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001660:	2800      	cmp	r0, #0
 8001662:	db07      	blt.n	8001674 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001664:	f000 011f 	and.w	r1, r0, #31
 8001668:	2301      	movs	r3, #1
 800166a:	0940      	lsrs	r0, r0, #5
 800166c:	4a02      	ldr	r2, [pc, #8]	; (8001678 <HAL_NVIC_EnableIRQ+0x18>)
 800166e:	408b      	lsls	r3, r1
 8001670:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	3801      	subs	r0, #1
 800167e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001682:	d20d      	bcs.n	80016a0 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001686:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001688:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	25f0      	movs	r5, #240	; 0xf0
 800168e:	4c06      	ldr	r4, [pc, #24]	; (80016a8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001690:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001692:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800169c:	bc30      	pop	{r4, r5}
 800169e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016a0:	2001      	movs	r0, #1
 80016a2:	4770      	bx	lr
 80016a4:	e000e010 	.word	0xe000e010
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d060      	beq.n	8001772 <HAL_DMA_Abort_IT+0xc6>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80016b4:	2a02      	cmp	r2, #2
{
 80016b6:	b538      	push	{r3, r4, r5, lr}
 80016b8:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_Abort_IT+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80016be:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  return HAL_OK;
}
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016c4:	6801      	ldr	r1, [r0, #0]
 80016c6:	4a57      	ldr	r2, [pc, #348]	; (8001824 <HAL_DMA_Abort_IT+0x178>)
 80016c8:	4291      	cmp	r1, r2
 80016ca:	d049      	beq.n	8001760 <HAL_DMA_Abort_IT+0xb4>
 80016cc:	3218      	adds	r2, #24
 80016ce:	4291      	cmp	r1, r2
 80016d0:	d046      	beq.n	8001760 <HAL_DMA_Abort_IT+0xb4>
 80016d2:	3230      	adds	r2, #48	; 0x30
 80016d4:	4854      	ldr	r0, [pc, #336]	; (8001828 <HAL_DMA_Abort_IT+0x17c>)
 80016d6:	4c55      	ldr	r4, [pc, #340]	; (800182c <HAL_DMA_Abort_IT+0x180>)
 80016d8:	4281      	cmp	r1, r0
 80016da:	bf18      	it	ne
 80016dc:	4291      	cmpne	r1, r2
 80016de:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80016e2:	4d53      	ldr	r5, [pc, #332]	; (8001830 <HAL_DMA_Abort_IT+0x184>)
 80016e4:	bf0c      	ite	eq
 80016e6:	2201      	moveq	r2, #1
 80016e8:	2200      	movne	r2, #0
 80016ea:	42a1      	cmp	r1, r4
 80016ec:	bf08      	it	eq
 80016ee:	f042 0201 	orreq.w	r2, r2, #1
 80016f2:	3448      	adds	r4, #72	; 0x48
 80016f4:	4281      	cmp	r1, r0
 80016f6:	bf08      	it	eq
 80016f8:	f042 0201 	orreq.w	r2, r2, #1
 80016fc:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8001700:	42a9      	cmp	r1, r5
 8001702:	bf08      	it	eq
 8001704:	f042 0201 	orreq.w	r2, r2, #1
 8001708:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800170c:	42a1      	cmp	r1, r4
 800170e:	bf08      	it	eq
 8001710:	f042 0201 	orreq.w	r2, r2, #1
 8001714:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8001718:	4281      	cmp	r1, r0
 800171a:	bf08      	it	eq
 800171c:	f042 0201 	orreq.w	r2, r2, #1
 8001720:	3048      	adds	r0, #72	; 0x48
 8001722:	42a9      	cmp	r1, r5
 8001724:	bf08      	it	eq
 8001726:	f042 0201 	orreq.w	r2, r2, #1
 800172a:	3548      	adds	r5, #72	; 0x48
 800172c:	42a1      	cmp	r1, r4
 800172e:	bf08      	it	eq
 8001730:	f042 0201 	orreq.w	r2, r2, #1
 8001734:	3448      	adds	r4, #72	; 0x48
 8001736:	4281      	cmp	r1, r0
 8001738:	bf08      	it	eq
 800173a:	f042 0201 	orreq.w	r2, r2, #1
 800173e:	3048      	adds	r0, #72	; 0x48
 8001740:	42a9      	cmp	r1, r5
 8001742:	bf08      	it	eq
 8001744:	f042 0201 	orreq.w	r2, r2, #1
 8001748:	42a1      	cmp	r1, r4
 800174a:	bf08      	it	eq
 800174c:	f042 0201 	orreq.w	r2, r2, #1
 8001750:	4281      	cmp	r1, r0
 8001752:	bf08      	it	eq
 8001754:	f042 0201 	orreq.w	r2, r2, #1
 8001758:	b912      	cbnz	r2, 8001760 <HAL_DMA_Abort_IT+0xb4>
 800175a:	4a36      	ldr	r2, [pc, #216]	; (8001834 <HAL_DMA_Abort_IT+0x188>)
 800175c:	4291      	cmp	r1, r2
 800175e:	d10a      	bne.n	8001776 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001760:	2204      	movs	r2, #4
  return HAL_OK;
 8001762:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001768:	680b      	ldr	r3, [r1, #0]
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	600b      	str	r3, [r1, #0]
}
 8001770:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001772:	2001      	movs	r0, #1
}
 8001774:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001776:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_DMA_Abort_IT+0x18c>)
 800177c:	482f      	ldr	r0, [pc, #188]	; (800183c <HAL_DMA_Abort_IT+0x190>)
 800177e:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 8001782:	4d2f      	ldr	r5, [pc, #188]	; (8001840 <HAL_DMA_Abort_IT+0x194>)
 8001784:	42a1      	cmp	r1, r4
 8001786:	bf18      	it	ne
 8001788:	4291      	cmpne	r1, r2
 800178a:	f104 0450 	add.w	r4, r4, #80	; 0x50
 800178e:	bf0c      	ite	eq
 8001790:	2201      	moveq	r2, #1
 8001792:	2200      	movne	r2, #0
 8001794:	4281      	cmp	r1, r0
 8001796:	bf08      	it	eq
 8001798:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800179c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800179e:	42a9      	cmp	r1, r5
 80017a0:	bf08      	it	eq
 80017a2:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80017a6:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017aa:	3528      	adds	r5, #40	; 0x28
 80017ac:	42a1      	cmp	r1, r4
 80017ae:	bf08      	it	eq
 80017b0:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80017b4:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017b6:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 80017b8:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017ba:	42a9      	cmp	r1, r5
 80017bc:	bf08      	it	eq
 80017be:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80017c2:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017c6:	42a1      	cmp	r1, r4
 80017c8:	bf08      	it	eq
 80017ca:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80017ce:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017d0:	b912      	cbnz	r2, 80017d8 <HAL_DMA_Abort_IT+0x12c>
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <HAL_DMA_Abort_IT+0x198>)
 80017d4:	4291      	cmp	r1, r2
 80017d6:	d117      	bne.n	8001808 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017d8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80017da:	2101      	movs	r1, #1
 80017dc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017de:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80017e0:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80017ea:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017ec:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017ee:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 80017f0:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80017f4:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017f6:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80017f8:	b132      	cbz	r2, 8001808 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017fa:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80017fe:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001800:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001804:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001806:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8001808:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800180a:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800180c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800180e:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001812:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8001816:	b11a      	cbz	r2, 8001820 <HAL_DMA_Abort_IT+0x174>
 8001818:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 800181a:	4790      	blx	r2
  return HAL_OK;
 800181c:	4620      	mov	r0, r4
}
 800181e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001820:	4610      	mov	r0, r2
}
 8001822:	bd38      	pop	{r3, r4, r5, pc}
 8001824:	40020010 	.word	0x40020010
 8001828:	40020040 	.word	0x40020040
 800182c:	40020070 	.word	0x40020070
 8001830:	400200a0 	.word	0x400200a0
 8001834:	400204b8 	.word	0x400204b8
 8001838:	5802541c 	.word	0x5802541c
 800183c:	58025430 	.word	0x58025430
 8001840:	58025444 	.word	0x58025444
 8001844:	58025494 	.word	0x58025494

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800184c:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800184e:	6809      	ldr	r1, [r1, #0]
{
 8001850:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001852:	2900      	cmp	r1, #0
 8001854:	f000 80cd 	beq.w	80019f2 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 8001858:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800185a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8001a70 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800185e:	2301      	movs	r3, #1
 8001860:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 8001862:	ea13 0501 	ands.w	r5, r3, r1
 8001866:	f000 80bf 	beq.w	80019e8 <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800186a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800186e:	0077      	lsls	r7, r6, #1
 8001870:	f04f 0c03 	mov.w	ip, #3
 8001874:	f022 0910 	bic.w	r9, r2, #16
 8001878:	fa0c fc07 	lsl.w	ip, ip, r7
 800187c:	f109 34ff 	add.w	r4, r9, #4294967295
 8001880:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001884:	2c01      	cmp	r4, #1
 8001886:	d812      	bhi.n	80018ae <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8001888:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800188a:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800188e:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001892:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001896:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189a:	40bc      	lsls	r4, r7
 800189c:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 80018a0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80018a2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018a4:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018a8:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 80018ac:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80018ae:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b0:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b4:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b8:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018bc:	fa04 f407 	lsl.w	r4, r4, r7
 80018c0:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 80018c4:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c6:	d115      	bne.n	80018f4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 80018c8:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018ca:	f006 0907 	and.w	r9, r6, #7
 80018ce:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018d2:	f8de 4010 	ldr.w	r4, [lr, #16]
 80018d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018da:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80018de:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018e2:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e6:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018ea:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ee:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80018f2:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 80018f4:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f6:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018fa:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fe:	40bb      	lsls	r3, r7
 8001900:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 8001904:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001906:	00d3      	lsls	r3, r2, #3
 8001908:	d56e      	bpl.n	80019e8 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_GPIO_Init+0x210>)
 800190c:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001910:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001916:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	f047 0c02 	orr.w	ip, r7, #2
 800191e:	4f4f      	ldr	r7, [pc, #316]	; (8001a5c <HAL_GPIO_Init+0x214>)
 8001920:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001922:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001928:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192c:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 8001930:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001934:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800193c:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	f8cd c004 	str.w	ip, [sp, #4]
 8001942:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001946:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800194a:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800194e:	d026      	beq.n	800199e <HAL_GPIO_Init+0x156>
 8001950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001954:	4298      	cmp	r0, r3
 8001956:	d055      	beq.n	8001a04 <HAL_GPIO_Init+0x1bc>
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_GPIO_Init+0x218>)
 800195a:	4298      	cmp	r0, r3
 800195c:	d04c      	beq.n	80019f8 <HAL_GPIO_Init+0x1b0>
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_GPIO_Init+0x21c>)
 8001960:	4298      	cmp	r0, r3
 8001962:	d05b      	beq.n	8001a1c <HAL_GPIO_Init+0x1d4>
 8001964:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_GPIO_Init+0x220>)
 8001966:	4298      	cmp	r0, r3
 8001968:	d05e      	beq.n	8001a28 <HAL_GPIO_Init+0x1e0>
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <HAL_GPIO_Init+0x224>)
 800196c:	4298      	cmp	r0, r3
 800196e:	d04f      	beq.n	8001a10 <HAL_GPIO_Init+0x1c8>
 8001970:	f8df c100 	ldr.w	ip, [pc, #256]	; 8001a74 <HAL_GPIO_Init+0x22c>
 8001974:	4560      	cmp	r0, ip
 8001976:	d05d      	beq.n	8001a34 <HAL_GPIO_Init+0x1ec>
 8001978:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8001a78 <HAL_GPIO_Init+0x230>
 800197c:	4560      	cmp	r0, ip
 800197e:	d05f      	beq.n	8001a40 <HAL_GPIO_Init+0x1f8>
 8001980:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8001a7c <HAL_GPIO_Init+0x234>
 8001984:	4560      	cmp	r0, ip
 8001986:	d061      	beq.n	8001a4c <HAL_GPIO_Init+0x204>
 8001988:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8001a80 <HAL_GPIO_Init+0x238>
 800198c:	4560      	cmp	r0, ip
 800198e:	bf0c      	ite	eq
 8001990:	f04f 0c09 	moveq.w	ip, #9
 8001994:	f04f 0c0a 	movne.w	ip, #10
 8001998:	fa0c f309 	lsl.w	r3, ip, r9
 800199c:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 800199e:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 80019a0:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 80019a2:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a6:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 80019a8:	bf4c      	ite	mi
 80019aa:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80019ac:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ae:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 80019b4:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 80019b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 80019bc:	bf4c      	ite	mi
 80019be:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80019c0:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 80019c2:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 80019c6:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c8:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80019ca:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 80019ce:	bf4c      	ite	mi
 80019d0:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80019d2:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d4:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80019d6:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 80019d8:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 80019da:	bf54      	ite	pl
 80019dc:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 80019e0:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 80019e8:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ea:	fa31 f306 	lsrs.w	r3, r1, r6
 80019ee:	f47f af36 	bne.w	800185e <HAL_GPIO_Init+0x16>
  }
}
 80019f2:	b003      	add	sp, #12
 80019f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019f8:	f04f 0c02 	mov.w	ip, #2
 80019fc:	fa0c f309 	lsl.w	r3, ip, r9
 8001a00:	431c      	orrs	r4, r3
 8001a02:	e7cc      	b.n	800199e <HAL_GPIO_Init+0x156>
 8001a04:	f04f 0c01 	mov.w	ip, #1
 8001a08:	fa0c f309 	lsl.w	r3, ip, r9
 8001a0c:	431c      	orrs	r4, r3
 8001a0e:	e7c6      	b.n	800199e <HAL_GPIO_Init+0x156>
 8001a10:	f04f 0c05 	mov.w	ip, #5
 8001a14:	fa0c f309 	lsl.w	r3, ip, r9
 8001a18:	431c      	orrs	r4, r3
 8001a1a:	e7c0      	b.n	800199e <HAL_GPIO_Init+0x156>
 8001a1c:	f04f 0c03 	mov.w	ip, #3
 8001a20:	fa0c f309 	lsl.w	r3, ip, r9
 8001a24:	431c      	orrs	r4, r3
 8001a26:	e7ba      	b.n	800199e <HAL_GPIO_Init+0x156>
 8001a28:	f04f 0c04 	mov.w	ip, #4
 8001a2c:	fa0c f309 	lsl.w	r3, ip, r9
 8001a30:	431c      	orrs	r4, r3
 8001a32:	e7b4      	b.n	800199e <HAL_GPIO_Init+0x156>
 8001a34:	f04f 0c06 	mov.w	ip, #6
 8001a38:	fa0c f309 	lsl.w	r3, ip, r9
 8001a3c:	431c      	orrs	r4, r3
 8001a3e:	e7ae      	b.n	800199e <HAL_GPIO_Init+0x156>
 8001a40:	f04f 0c07 	mov.w	ip, #7
 8001a44:	fa0c f309 	lsl.w	r3, ip, r9
 8001a48:	431c      	orrs	r4, r3
 8001a4a:	e7a8      	b.n	800199e <HAL_GPIO_Init+0x156>
 8001a4c:	f04f 0c08 	mov.w	ip, #8
 8001a50:	fa0c f309 	lsl.w	r3, ip, r9
 8001a54:	431c      	orrs	r4, r3
 8001a56:	e7a2      	b.n	800199e <HAL_GPIO_Init+0x156>
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58000400 	.word	0x58000400
 8001a60:	58020800 	.word	0x58020800
 8001a64:	58020c00 	.word	0x58020c00
 8001a68:	58021000 	.word	0x58021000
 8001a6c:	58021400 	.word	0x58021400
 8001a70:	58000080 	.word	0x58000080
 8001a74:	58021800 	.word	0x58021800
 8001a78:	58021c00 	.word	0x58021c00
 8001a7c:	58022000 	.word	0x58022000
 8001a80:	58022400 	.word	0x58022400

08001a84 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a84:	6903      	ldr	r3, [r0, #16]
 8001a86:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001a88:	bf14      	ite	ne
 8001a8a:	2001      	movne	r0, #1
 8001a8c:	2000      	moveq	r0, #0
 8001a8e:	4770      	bx	lr

08001a90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a90:	b902      	cbnz	r2, 8001a94 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a92:	0409      	lsls	r1, r1, #16
 8001a94:	6181      	str	r1, [r0, #24]
  }
}
 8001a96:	4770      	bx	lr

08001a98 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_HSEM_FastTake+0x14>)
 8001a9a:	3020      	adds	r0, #32
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <HAL_HSEM_FastTake+0x18>)
 8001a9e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8001aa2:	1ac0      	subs	r0, r0, r3
 8001aa4:	bf18      	it	ne
 8001aa6:	2001      	movne	r0, #1
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	58026400 	.word	0x58026400
 8001ab0:	80000300 	.word	0x80000300

08001ab4 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001ab4:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8001ab8:	4b01      	ldr	r3, [pc, #4]	; (8001ac0 <HAL_HSEM_Release+0xc>)
 8001aba:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8001abe:	4770      	bx	lr
 8001ac0:	58026400 	.word	0x58026400

08001ac4 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ac4:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <HAL_PWREx_ConfigSupply+0x7c>)
 8001ac6:	68d3      	ldr	r3, [r2, #12]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d006      	beq.n	8001ade <HAL_PWREx_ConfigSupply+0x1a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ad0:	68d3      	ldr	r3, [r2, #12]
 8001ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ad6:	1a18      	subs	r0, r3, r0
 8001ad8:	bf18      	it	ne
 8001ada:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8001adc:	4770      	bx	lr
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ade:	68d3      	ldr	r3, [r2, #12]
 8001ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae4:	4303      	orrs	r3, r0
{
 8001ae6:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ae8:	60d3      	str	r3, [r2, #12]
 8001aea:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aec:	4615      	mov	r5, r2
  tickstart = HAL_GetTick ();
 8001aee:	f7ff fd4f 	bl	8001590 <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001af4:	e005      	b.n	8001b02 <HAL_PWREx_ConfigSupply+0x3e>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001af6:	f7ff fd4b 	bl	8001590 <HAL_GetTick>
 8001afa:	1b80      	subs	r0, r0, r6
 8001afc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b00:	d81b      	bhi.n	8001b3a <HAL_PWREx_ConfigSupply+0x76>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b02:	686b      	ldr	r3, [r5, #4]
 8001b04:	049a      	lsls	r2, r3, #18
 8001b06:	d5f6      	bpl.n	8001af6 <HAL_PWREx_ConfigSupply+0x32>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b08:	f1a4 031d 	sub.w	r3, r4, #29
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d905      	bls.n	8001b1c <HAL_PWREx_ConfigSupply+0x58>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8001b10:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b14:	2801      	cmp	r0, #1
 8001b16:	d901      	bls.n	8001b1c <HAL_PWREx_ConfigSupply+0x58>
  return HAL_OK;
 8001b18:	2000      	movs	r0, #0
}
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8001b1c:	f7ff fd38 	bl	8001590 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b20:	4c07      	ldr	r4, [pc, #28]	; (8001b40 <HAL_PWREx_ConfigSupply+0x7c>)
    tickstart = HAL_GetTick ();
 8001b22:	4605      	mov	r5, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b24:	e005      	b.n	8001b32 <HAL_PWREx_ConfigSupply+0x6e>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b26:	f7ff fd33 	bl	8001590 <HAL_GetTick>
 8001b2a:	1b40      	subs	r0, r0, r5
 8001b2c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b30:	d803      	bhi.n	8001b3a <HAL_PWREx_ConfigSupply+0x76>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b32:	68e3      	ldr	r3, [r4, #12]
 8001b34:	03db      	lsls	r3, r3, #15
 8001b36:	d5f6      	bpl.n	8001b26 <HAL_PWREx_ConfigSupply+0x62>
 8001b38:	e7ee      	b.n	8001b18 <HAL_PWREx_ConfigSupply+0x54>
      return HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1
}
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
 8001b3e:	bf00      	nop
 8001b40:	58024800 	.word	0x58024800

08001b44 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b44:	2800      	cmp	r0, #0
 8001b46:	f000 819d 	beq.w	8001e84 <HAL_RCC_OscConfig+0x340>
{
 8001b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4c:	6803      	ldr	r3, [r0, #0]
 8001b4e:	4604      	mov	r4, r0
 8001b50:	07d9      	lsls	r1, r3, #31
 8001b52:	d533      	bpl.n	8001bbc <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b54:	49a7      	ldr	r1, [pc, #668]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001b56:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b58:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b5e:	2a10      	cmp	r2, #16
 8001b60:	f000 8112 	beq.w	8001d88 <HAL_RCC_OscConfig+0x244>
 8001b64:	2a18      	cmp	r2, #24
 8001b66:	f000 810a 	beq.w	8001d7e <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6a:	6863      	ldr	r3, [r4, #4]
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b70:	d010      	beq.n	8001b94 <HAL_RCC_OscConfig+0x50>
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 816f 	beq.w	8001e56 <HAL_RCC_OscConfig+0x312>
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	4b9d      	ldr	r3, [pc, #628]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	f000 81e4 	beq.w	8001f4c <HAL_RCC_OscConfig+0x408>
 8001b84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e004      	b.n	8001b9e <HAL_RCC_OscConfig+0x5a>
 8001b94:	4a97      	ldr	r2, [pc, #604]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001b96:	6813      	ldr	r3, [r2, #0]
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fcf7 	bl	8001590 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba2:	4d94      	ldr	r5, [pc, #592]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8001ba4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba6:	e005      	b.n	8001bb4 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fcf2 	bl	8001590 <HAL_GetTick>
 8001bac:	1b80      	subs	r0, r0, r6
 8001bae:	2864      	cmp	r0, #100	; 0x64
 8001bb0:	f200 814f 	bhi.w	8001e52 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	039f      	lsls	r7, r3, #14
 8001bb8:	d5f6      	bpl.n	8001ba8 <HAL_RCC_OscConfig+0x64>
 8001bba:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbc:	0799      	lsls	r1, r3, #30
 8001bbe:	f100 808e 	bmi.w	8001cde <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bc2:	06d9      	lsls	r1, r3, #27
 8001bc4:	d534      	bpl.n	8001c30 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bc6:	4a8b      	ldr	r2, [pc, #556]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001bc8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bca:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	f000 80e9 	beq.w	8001da8 <HAL_RCC_OscConfig+0x264>
 8001bd6:	2b18      	cmp	r3, #24
 8001bd8:	f000 80e1 	beq.w	8001d9e <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001bdc:	69e3      	ldr	r3, [r4, #28]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8178 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x390>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001be4:	4b83      	ldr	r3, [pc, #524]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001be6:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001be8:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8001bea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fcce 	bl	8001590 <HAL_GetTick>
 8001bf4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bf6:	e005      	b.n	8001c04 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fcca 	bl	8001590 <HAL_GetTick>
 8001bfc:	1b80      	subs	r0, r0, r6
 8001bfe:	2802      	cmp	r0, #2
 8001c00:	f200 8127 	bhi.w	8001e52 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	05db      	lsls	r3, r3, #23
 8001c08:	d5f6      	bpl.n	8001bf8 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c0a:	f7ff fcd9 	bl	80015c0 <HAL_GetREVID>
 8001c0e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c12:	4298      	cmp	r0, r3
 8001c14:	f200 825d 	bhi.w	80020d2 <HAL_RCC_OscConfig+0x58e>
 8001c18:	6a22      	ldr	r2, [r4, #32]
 8001c1a:	686b      	ldr	r3, [r5, #4]
 8001c1c:	2a20      	cmp	r2, #32
 8001c1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c22:	bf0c      	ite	eq
 8001c24:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001c28:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8001c2c:	606b      	str	r3, [r5, #4]
 8001c2e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c30:	071d      	lsls	r5, r3, #28
 8001c32:	d517      	bpl.n	8001c64 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c34:	6963      	ldr	r3, [r4, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8126 	beq.w	8001e88 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3c:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001c3e:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c40:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001c48:	f7ff fca2 	bl	8001590 <HAL_GetTick>
 8001c4c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c4e:	e005      	b.n	8001c5c <HAL_RCC_OscConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fc9e 	bl	8001590 <HAL_GetTick>
 8001c54:	1b80      	subs	r0, r0, r6
 8001c56:	2802      	cmp	r0, #2
 8001c58:	f200 80fb 	bhi.w	8001e52 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c5e:	0798      	lsls	r0, r3, #30
 8001c60:	d5f6      	bpl.n	8001c50 <HAL_RCC_OscConfig+0x10c>
 8001c62:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c64:	069a      	lsls	r2, r3, #26
 8001c66:	d517      	bpl.n	8001c98 <HAL_RCC_OscConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c68:	69a3      	ldr	r3, [r4, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 811f 	beq.w	8001eae <HAL_RCC_OscConfig+0x36a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c70:	4b60      	ldr	r3, [pc, #384]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001c72:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c74:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8001c76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fc88 	bl	8001590 <HAL_GetTick>
 8001c80:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c82:	e005      	b.n	8001c90 <HAL_RCC_OscConfig+0x14c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c84:	f7ff fc84 	bl	8001590 <HAL_GetTick>
 8001c88:	1b80      	subs	r0, r0, r6
 8001c8a:	2802      	cmp	r0, #2
 8001c8c:	f200 80e1 	bhi.w	8001e52 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c90:	682b      	ldr	r3, [r5, #0]
 8001c92:	049f      	lsls	r7, r3, #18
 8001c94:	d5f6      	bpl.n	8001c84 <HAL_RCC_OscConfig+0x140>
 8001c96:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c98:	0759      	lsls	r1, r3, #29
 8001c9a:	f100 80a0 	bmi.w	8001dde <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ca0:	b1d8      	cbz	r0, 8001cda <HAL_RCC_OscConfig+0x196>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ca2:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001caa:	2a18      	cmp	r2, #24
 8001cac:	f000 81c9 	beq.w	8002042 <HAL_RCC_OscConfig+0x4fe>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb0:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb4:	f000 815b 	beq.w	8001f6e <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cbc:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fc66 	bl	8001590 <HAL_GetTick>
 8001cc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff fc62 	bl	8001590 <HAL_GetTick>
 8001ccc:	1b40      	subs	r0, r0, r5
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	f200 80bf 	bhi.w	8001e52 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	019b      	lsls	r3, r3, #6
 8001cd8:	d4f6      	bmi.n	8001cc8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001cda:	2000      	movs	r0, #0
}
 8001cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	4a45      	ldr	r2, [pc, #276]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001ce0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ce2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ce4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8001ce8:	d02f      	beq.n	8001d4a <HAL_RCC_OscConfig+0x206>
 8001cea:	2b18      	cmp	r3, #24
 8001cec:	d02b      	beq.n	8001d46 <HAL_RCC_OscConfig+0x202>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cee:	68e2      	ldr	r2, [r4, #12]
 8001cf0:	2a00      	cmp	r2, #0
 8001cf2:	f000 8103 	beq.w	8001efc <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cf6:	493f      	ldr	r1, [pc, #252]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001cf8:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cfa:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cfc:	f023 0319 	bic.w	r3, r3, #25
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001d04:	f7ff fc44 	bl	8001590 <HAL_GetTick>
 8001d08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d0a:	e005      	b.n	8001d18 <HAL_RCC_OscConfig+0x1d4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fc40 	bl	8001590 <HAL_GetTick>
 8001d10:	1b80      	subs	r0, r0, r6
 8001d12:	2802      	cmp	r0, #2
 8001d14:	f200 809d 	bhi.w	8001e52 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	075f      	lsls	r7, r3, #29
 8001d1c:	d5f6      	bpl.n	8001d0c <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	f7ff fc4f 	bl	80015c0 <HAL_GetREVID>
 8001d22:	f241 0303 	movw	r3, #4099	; 0x1003
 8001d26:	4298      	cmp	r0, r3
 8001d28:	f200 81e2 	bhi.w	80020f0 <HAL_RCC_OscConfig+0x5ac>
 8001d2c:	6922      	ldr	r2, [r4, #16]
 8001d2e:	686b      	ldr	r3, [r5, #4]
 8001d30:	2a40      	cmp	r2, #64	; 0x40
 8001d32:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d36:	bf0c      	ite	eq
 8001d38:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8001d3c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8001d40:	606b      	str	r3, [r5, #4]
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	e73d      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d46:	0792      	lsls	r2, r2, #30
 8001d48:	d1d1      	bne.n	8001cee <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	075b      	lsls	r3, r3, #29
 8001d50:	d501      	bpl.n	8001d56 <HAL_RCC_OscConfig+0x212>
 8001d52:	68e3      	ldr	r3, [r4, #12]
 8001d54:	b30b      	cbz	r3, 8001d9a <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	f7ff fc33 	bl	80015c0 <HAL_GetREVID>
 8001d5a:	f241 0303 	movw	r3, #4099	; 0x1003
 8001d5e:	4298      	cmp	r0, r3
 8001d60:	f200 80e0 	bhi.w	8001f24 <HAL_RCC_OscConfig+0x3e0>
 8001d64:	6922      	ldr	r2, [r4, #16]
 8001d66:	2a40      	cmp	r2, #64	; 0x40
 8001d68:	f000 80f8 	beq.w	8001f5c <HAL_RCC_OscConfig+0x418>
 8001d6c:	4921      	ldr	r1, [pc, #132]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001d6e:	684b      	ldr	r3, [r1, #4]
 8001d70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d74:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001d78:	604b      	str	r3, [r1, #4]
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	e721      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d7e:	f001 0103 	and.w	r1, r1, #3
 8001d82:	2902      	cmp	r1, #2
 8001d84:	f47f aef1 	bne.w	8001b6a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	0392      	lsls	r2, r2, #14
 8001d8e:	f57f af15 	bpl.w	8001bbc <HAL_RCC_OscConfig+0x78>
 8001d92:	6862      	ldr	r2, [r4, #4]
 8001d94:	2a00      	cmp	r2, #0
 8001d96:	f47f af11 	bne.w	8001bbc <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 8001d9a:	2001      	movs	r0, #1
}
 8001d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	2a01      	cmp	r2, #1
 8001da4:	f47f af1a 	bne.w	8001bdc <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	05da      	lsls	r2, r3, #23
 8001dae:	d502      	bpl.n	8001db6 <HAL_RCC_OscConfig+0x272>
 8001db0:	69e3      	ldr	r3, [r4, #28]
 8001db2:	2b80      	cmp	r3, #128	; 0x80
 8001db4:	d1f1      	bne.n	8001d9a <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001db6:	f7ff fc03 	bl	80015c0 <HAL_GetREVID>
 8001dba:	f241 0303 	movw	r3, #4099	; 0x1003
 8001dbe:	4298      	cmp	r0, r3
 8001dc0:	f200 80ba 	bhi.w	8001f38 <HAL_RCC_OscConfig+0x3f4>
 8001dc4:	6a22      	ldr	r2, [r4, #32]
 8001dc6:	2a20      	cmp	r2, #32
 8001dc8:	f000 81a1 	beq.w	800210e <HAL_RCC_OscConfig+0x5ca>
 8001dcc:	4909      	ldr	r1, [pc, #36]	; (8001df4 <HAL_RCC_OscConfig+0x2b0>)
 8001dce:	684b      	ldr	r3, [r1, #4]
 8001dd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dd4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001dd8:	604b      	str	r3, [r1, #4]
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	e728      	b.n	8001c30 <HAL_RCC_OscConfig+0xec>
    PWR->CR1 |= PWR_CR1_DBP;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_OscConfig+0x2b4>)
 8001de0:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de2:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8001de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001dea:	f7ff fbd1 	bl	8001590 <HAL_GetTick>
 8001dee:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001df0:	e009      	b.n	8001e06 <HAL_RCC_OscConfig+0x2c2>
 8001df2:	bf00      	nop
 8001df4:	58024400 	.word	0x58024400
 8001df8:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dfc:	f7ff fbc8 	bl	8001590 <HAL_GetTick>
 8001e00:	1b80      	subs	r0, r0, r6
 8001e02:	2864      	cmp	r0, #100	; 0x64
 8001e04:	d825      	bhi.n	8001e52 <HAL_RCC_OscConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e06:	682b      	ldr	r3, [r5, #0]
 8001e08:	05da      	lsls	r2, r3, #23
 8001e0a:	d5f7      	bpl.n	8001dfc <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	68a3      	ldr	r3, [r4, #8]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	f000 8177 	beq.w	8002102 <HAL_RCC_OscConfig+0x5be>
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8142 	beq.w	800209e <HAL_RCC_OscConfig+0x55a>
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	4bb1      	ldr	r3, [pc, #708]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
 8001e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e20:	f000 817e 	beq.w	8002120 <HAL_RCC_OscConfig+0x5dc>
 8001e24:	f022 0201 	bic.w	r2, r2, #1
 8001e28:	671a      	str	r2, [r3, #112]	; 0x70
 8001e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e2c:	f022 0204 	bic.w	r2, r2, #4
 8001e30:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001e32:	f7ff fbad 	bl	8001590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e36:	4dab      	ldr	r5, [pc, #684]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
      tickstart = HAL_GetTick();
 8001e38:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e3e:	e004      	b.n	8001e4a <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7ff fba6 	bl	8001590 <HAL_GetTick>
 8001e44:	1bc0      	subs	r0, r0, r7
 8001e46:	42b0      	cmp	r0, r6
 8001e48:	d803      	bhi.n	8001e52 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e4c:	079b      	lsls	r3, r3, #30
 8001e4e:	d5f7      	bpl.n	8001e40 <HAL_RCC_OscConfig+0x2fc>
 8001e50:	e725      	b.n	8001c9e <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8001e52:	2003      	movs	r0, #3
}
 8001e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	4ba3      	ldr	r3, [pc, #652]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
 8001e58:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e5a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb91 	bl	8001590 <HAL_GetTick>
 8001e6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e70:	e004      	b.n	8001e7c <HAL_RCC_OscConfig+0x338>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e72:	f7ff fb8d 	bl	8001590 <HAL_GetTick>
 8001e76:	1b80      	subs	r0, r0, r6
 8001e78:	2864      	cmp	r0, #100	; 0x64
 8001e7a:	d8ea      	bhi.n	8001e52 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e7c:	682b      	ldr	r3, [r5, #0]
 8001e7e:	0398      	lsls	r0, r3, #14
 8001e80:	d4f7      	bmi.n	8001e72 <HAL_RCC_OscConfig+0x32e>
 8001e82:	e69a      	b.n	8001bba <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 8001e84:	2001      	movs	r0, #1
}
 8001e86:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8001e88:	4b96      	ldr	r3, [pc, #600]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
 8001e8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e8c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001e94:	f7ff fb7c 	bl	8001590 <HAL_GetTick>
 8001e98:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e9a:	e004      	b.n	8001ea6 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fb78 	bl	8001590 <HAL_GetTick>
 8001ea0:	1b80      	subs	r0, r0, r6
 8001ea2:	2802      	cmp	r0, #2
 8001ea4:	d8d5      	bhi.n	8001e52 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ea6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ea8:	0799      	lsls	r1, r3, #30
 8001eaa:	d4f7      	bmi.n	8001e9c <HAL_RCC_OscConfig+0x358>
 8001eac:	e6d9      	b.n	8001c62 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSI48_DISABLE();
 8001eae:	4b8d      	ldr	r3, [pc, #564]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eb2:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8001eb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eb8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001eba:	f7ff fb69 	bl	8001590 <HAL_GetTick>
 8001ebe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ec0:	e004      	b.n	8001ecc <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ec2:	f7ff fb65 	bl	8001590 <HAL_GetTick>
 8001ec6:	1b80      	subs	r0, r0, r6
 8001ec8:	2802      	cmp	r0, #2
 8001eca:	d8c2      	bhi.n	8001e52 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	0498      	lsls	r0, r3, #18
 8001ed0:	d4f7      	bmi.n	8001ec2 <HAL_RCC_OscConfig+0x37e>
 8001ed2:	e6e0      	b.n	8001c96 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_DISABLE();
 8001ed4:	4b83      	ldr	r3, [pc, #524]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ed8:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8001eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ede:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fb56 	bl	8001590 <HAL_GetTick>
 8001ee4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ee6:	e004      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fb52 	bl	8001590 <HAL_GetTick>
 8001eec:	1b80      	subs	r0, r0, r6
 8001eee:	2802      	cmp	r0, #2
 8001ef0:	d8af      	bhi.n	8001e52 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ef2:	682b      	ldr	r3, [r5, #0]
 8001ef4:	05df      	lsls	r7, r3, #23
 8001ef6:	d4f7      	bmi.n	8001ee8 <HAL_RCC_OscConfig+0x3a4>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	e699      	b.n	8001c30 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8001efc:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
 8001efe:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f00:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f08:	f7ff fb42 	bl	8001590 <HAL_GetTick>
 8001f0c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f0e:	e004      	b.n	8001f1a <HAL_RCC_OscConfig+0x3d6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff fb3e 	bl	8001590 <HAL_GetTick>
 8001f14:	1b80      	subs	r0, r0, r6
 8001f16:	2802      	cmp	r0, #2
 8001f18:	d89b      	bhi.n	8001e52 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f1a:	682b      	ldr	r3, [r5, #0]
 8001f1c:	0758      	lsls	r0, r3, #29
 8001f1e:	d4f7      	bmi.n	8001f10 <HAL_RCC_OscConfig+0x3cc>
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	e64e      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4a6f      	ldr	r2, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
 8001f26:	6921      	ldr	r1, [r4, #16]
 8001f28:	6853      	ldr	r3, [r2, #4]
 8001f2a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001f2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f32:	6053      	str	r3, [r2, #4]
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	e644      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
 8001f3a:	6a21      	ldr	r1, [r4, #32]
 8001f3c:	68d3      	ldr	r3, [r2, #12]
 8001f3e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8001f42:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f46:	60d3      	str	r3, [r2, #12]
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	e671      	b.n	8001c30 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e620      	b.n	8001b9e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4a61      	ldr	r2, [pc, #388]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
 8001f5e:	6853      	ldr	r3, [r2, #4]
 8001f60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f68:	6053      	str	r3, [r2, #4]
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	e629      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f72:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8001f74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f76:	f7ff fb0b 	bl	8001590 <HAL_GetTick>
 8001f7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f7c:	e005      	b.n	8001f8a <HAL_RCC_OscConfig+0x446>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7ff fb07 	bl	8001590 <HAL_GetTick>
 8001f82:	1b80      	subs	r0, r0, r6
 8001f84:	2802      	cmp	r0, #2
 8001f86:	f63f af64 	bhi.w	8001e52 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f8a:	682b      	ldr	r3, [r5, #0]
 8001f8c:	0199      	lsls	r1, r3, #6
 8001f8e:	d4f6      	bmi.n	8001f7e <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001f92:	4b55      	ldr	r3, [pc, #340]	; (80020e8 <HAL_RCC_OscConfig+0x5a4>)
 8001f94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f96:	4013      	ands	r3, r2
 8001f98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f9a:	4954      	ldr	r1, [pc, #336]	; (80020ec <HAL_RCC_OscConfig+0x5a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f9e:	4e51      	ldr	r6, [pc, #324]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001fa4:	62ab      	str	r3, [r5, #40]	; 0x28
 8001fa6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8001fa8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8001fac:	3f01      	subs	r7, #1
 8001fae:	1e50      	subs	r0, r2, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001fb4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	0400      	lsls	r0, r0, #16
 8001fbc:	3a01      	subs	r2, #1
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8001fc4:	0612      	lsls	r2, r2, #24
 8001fc6:	4303      	orrs	r3, r0
 8001fc8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8001fd2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fda:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001fdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fde:	4011      	ands	r1, r2
 8001fe0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8001fe4:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fe6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001fe8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fea:	f023 030c 	bic.w	r3, r3, #12
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ff2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001ff4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ff6:	f023 0302 	bic.w	r3, r3, #2
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ffe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002006:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800200e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002014:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002016:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800201e:	682b      	ldr	r3, [r5, #0]
 8002020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002024:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002026:	f7ff fab3 	bl	8001590 <HAL_GetTick>
 800202a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800202c:	e005      	b.n	800203a <HAL_RCC_OscConfig+0x4f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff faaf 	bl	8001590 <HAL_GetTick>
 8002032:	1b00      	subs	r0, r0, r4
 8002034:	2802      	cmp	r0, #2
 8002036:	f63f af0c 	bhi.w	8001e52 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800203a:	6833      	ldr	r3, [r6, #0]
 800203c:	019a      	lsls	r2, r3, #6
 800203e:	d5f6      	bpl.n	800202e <HAL_RCC_OscConfig+0x4ea>
 8002040:	e64b      	b.n	8001cda <HAL_RCC_OscConfig+0x196>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002042:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002046:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002048:	f43f ae48 	beq.w	8001cdc <HAL_RCC_OscConfig+0x198>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002050:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002052:	428b      	cmp	r3, r1
 8002054:	f47f aea1 	bne.w	8001d9a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002058:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800205e:	429a      	cmp	r2, r3
 8002060:	f47f ae9b 	bne.w	8001d9a <HAL_RCC_OscConfig+0x256>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002064:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002066:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800206a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	f47f ae94 	bne.w	8001d9a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002074:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8002078:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	f47f ae8d 	bne.w	8001d9a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002080:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002082:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8002086:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	f47f ae86 	bne.w	8001d9a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800208e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002090:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8002094:	3801      	subs	r0, #1
    return HAL_ERROR;
 8002096:	1a28      	subs	r0, r5, r0
 8002098:	bf18      	it	ne
 800209a:	2001      	movne	r0, #1
 800209c:	e61e      	b.n	8001cdc <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_RCC_OscConfig+0x5a0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020a6:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	671a      	str	r2, [r3, #112]	; 0x70
 80020ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020b0:	f022 0204 	bic.w	r2, r2, #4
 80020b4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80020b6:	f7ff fa6b 	bl	8001590 <HAL_GetTick>
 80020ba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020bc:	e005      	b.n	80020ca <HAL_RCC_OscConfig+0x586>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fa67 	bl	8001590 <HAL_GetTick>
 80020c2:	1b80      	subs	r0, r0, r6
 80020c4:	42b8      	cmp	r0, r7
 80020c6:	f63f aec4 	bhi.w	8001e52 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020cc:	0798      	lsls	r0, r3, #30
 80020ce:	d4f6      	bmi.n	80020be <HAL_RCC_OscConfig+0x57a>
 80020d0:	e5e5      	b.n	8001c9e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020d2:	68eb      	ldr	r3, [r5, #12]
 80020d4:	6a22      	ldr	r2, [r4, #32]
 80020d6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80020da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80020de:	60eb      	str	r3, [r5, #12]
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	e5a5      	b.n	8001c30 <HAL_RCC_OscConfig+0xec>
 80020e4:	58024400 	.word	0x58024400
 80020e8:	fffffc0c 	.word	0xfffffc0c
 80020ec:	ffff0007 	.word	0xffff0007
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	686b      	ldr	r3, [r5, #4]
 80020f2:	6922      	ldr	r2, [r4, #16]
 80020f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80020f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80020fc:	606b      	str	r3, [r5, #4]
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	e55f      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <HAL_RCC_OscConfig+0x5ec>)
 8002104:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	e691      	b.n	8001e32 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x5ec>)
 8002110:	6853      	ldr	r3, [r2, #4]
 8002112:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002116:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800211a:	6053      	str	r3, [r2, #4]
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	e587      	b.n	8001c30 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	f042 0204 	orr.w	r2, r2, #4
 8002124:	671a      	str	r2, [r3, #112]	; 0x70
 8002126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	671a      	str	r2, [r3, #112]	; 0x70
 800212e:	e680      	b.n	8001e32 <HAL_RCC_OscConfig+0x2ee>
 8002130:	58024400 	.word	0x58024400

08002134 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002134:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002136:	6913      	ldr	r3, [r2, #16]
 8002138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800213c:	2b10      	cmp	r3, #16
 800213e:	d04f      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0xac>
 8002140:	2b18      	cmp	r3, #24
 8002142:	d00b      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x28>
 8002144:	b10b      	cbz	r3, 800214a <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002146:	483b      	ldr	r0, [pc, #236]	; (8002234 <HAL_RCC_GetSysClockFreq+0x100>)
 8002148:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800214a:	6813      	ldr	r3, [r2, #0]
 800214c:	0699      	lsls	r1, r3, #26
 800214e:	d549      	bpl.n	80021e4 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002150:	6813      	ldr	r3, [r2, #0]
 8002152:	4839      	ldr	r0, [pc, #228]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 8002154:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002158:	40d8      	lsrs	r0, r3
 800215a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800215c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800215e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002160:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002162:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8002166:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002168:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 800216a:	b3b0      	cbz	r0, 80021da <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800216c:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002170:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002174:	f001 0103 	and.w	r1, r1, #3
 8002178:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800217c:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8002180:	2901      	cmp	r1, #1
 8002182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002186:	ee07 3a10 	vmov	s14, r3
 800218a:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 800218e:	d002      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x62>
 8002190:	d32d      	bcc.n	80021ee <HAL_RCC_GetSysClockFreq+0xba>
 8002192:	2902      	cmp	r1, #2
 8002194:	d028      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002196:	eddf 5a29 	vldr	s11, [pc, #164]	; 800223c <HAL_RCC_GetSysClockFreq+0x108>
 800219a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800219e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80021a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80021ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80021b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80021b8:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80021c4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80021da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021de:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80021e0:	4817      	ldr	r0, [pc, #92]	; (8002240 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021e2:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021e4:	4814      	ldr	r0, [pc, #80]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80021e6:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021e8:	eddf 5a16 	vldr	s11, [pc, #88]	; 8002244 <HAL_RCC_GetSysClockFreq+0x110>
 80021ec:	e7d5      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	069b      	lsls	r3, r3, #26
 80021f2:	d51a      	bpl.n	800222a <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021f4:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021f6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021fa:	490f      	ldr	r1, [pc, #60]	; (8002238 <HAL_RCC_GetSysClockFreq+0x104>)
 80021fc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002200:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002202:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002208:	ee06 1a90 	vmov	s13, r1
 800220c:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8002210:	ee06 3a90 	vmov	s13, r3
 8002214:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8002218:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800221c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8002220:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002224:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002228:	e7c8      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800222a:	eddf 5a07 	vldr	s11, [pc, #28]	; 8002248 <HAL_RCC_GetSysClockFreq+0x114>
 800222e:	e7b4      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x66>
 8002230:	58024400 	.word	0x58024400
 8002234:	003d0900 	.word	0x003d0900
 8002238:	03d09000 	.word	0x03d09000
 800223c:	4a742400 	.word	0x4a742400
 8002240:	02625a00 	.word	0x02625a00
 8002244:	4c189680 	.word	0x4c189680
 8002248:	4c742400 	.word	0x4c742400

0800224c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800224c:	b178      	cbz	r0, 800226e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800224e:	4a8e      	ldr	r2, [pc, #568]	; (8002488 <HAL_RCC_ClockConfig+0x23c>)
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	428b      	cmp	r3, r1
 8002258:	d20b      	bcs.n	8002272 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	6813      	ldr	r3, [r2, #0]
 800225c:	f023 030f 	bic.w	r3, r3, #15
 8002260:	430b      	orrs	r3, r1
 8002262:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	428b      	cmp	r3, r1
 800226c:	d001      	beq.n	8002272 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800226e:	2001      	movs	r0, #1
}
 8002270:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002272:	6803      	ldr	r3, [r0, #0]
{
 8002274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002278:	075d      	lsls	r5, r3, #29
 800227a:	d50b      	bpl.n	8002294 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800227c:	4c83      	ldr	r4, [pc, #524]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 800227e:	6905      	ldr	r5, [r0, #16]
 8002280:	69a2      	ldr	r2, [r4, #24]
 8002282:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002286:	4295      	cmp	r5, r2
 8002288:	d904      	bls.n	8002294 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800228a:	69a2      	ldr	r2, [r4, #24]
 800228c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002290:	432a      	orrs	r2, r5
 8002292:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	071c      	lsls	r4, r3, #28
 8002296:	d50b      	bpl.n	80022b0 <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002298:	4c7c      	ldr	r4, [pc, #496]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 800229a:	6945      	ldr	r5, [r0, #20]
 800229c:	69e2      	ldr	r2, [r4, #28]
 800229e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80022a2:	4295      	cmp	r5, r2
 80022a4:	d904      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022a6:	69e2      	ldr	r2, [r4, #28]
 80022a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022ac:	432a      	orrs	r2, r5
 80022ae:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	06da      	lsls	r2, r3, #27
 80022b2:	d50b      	bpl.n	80022cc <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022b4:	4c75      	ldr	r4, [pc, #468]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 80022b6:	6985      	ldr	r5, [r0, #24]
 80022b8:	69e2      	ldr	r2, [r4, #28]
 80022ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80022be:	4295      	cmp	r5, r2
 80022c0:	d904      	bls.n	80022cc <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022c2:	69e2      	ldr	r2, [r4, #28]
 80022c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022c8:	432a      	orrs	r2, r5
 80022ca:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022cc:	069f      	lsls	r7, r3, #26
 80022ce:	d50b      	bpl.n	80022e8 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022d0:	4c6e      	ldr	r4, [pc, #440]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 80022d2:	69c5      	ldr	r5, [r0, #28]
 80022d4:	6a22      	ldr	r2, [r4, #32]
 80022d6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80022da:	4295      	cmp	r5, r2
 80022dc:	d904      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022de:	6a22      	ldr	r2, [r4, #32]
 80022e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022e4:	432a      	orrs	r2, r5
 80022e6:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	079e      	lsls	r6, r3, #30
 80022ea:	4604      	mov	r4, r0
 80022ec:	460d      	mov	r5, r1
 80022ee:	f003 0201 	and.w	r2, r3, #1
 80022f2:	d55d      	bpl.n	80023b0 <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022f4:	4e65      	ldr	r6, [pc, #404]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 80022f6:	68c0      	ldr	r0, [r0, #12]
 80022f8:	69b1      	ldr	r1, [r6, #24]
 80022fa:	f001 010f 	and.w	r1, r1, #15
 80022fe:	4288      	cmp	r0, r1
 8002300:	d904      	bls.n	800230c <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002302:	69b1      	ldr	r1, [r6, #24]
 8002304:	f021 010f 	bic.w	r1, r1, #15
 8002308:	4301      	orrs	r1, r0
 800230a:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230c:	2a00      	cmp	r2, #0
 800230e:	d031      	beq.n	8002374 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002310:	4a5e      	ldr	r2, [pc, #376]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 8002312:	68a1      	ldr	r1, [r4, #8]
 8002314:	6993      	ldr	r3, [r2, #24]
 8002316:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800231a:	430b      	orrs	r3, r1
 800231c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231e:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002320:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	2b02      	cmp	r3, #2
 8002324:	f000 80a2 	beq.w	800246c <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002328:	2b03      	cmp	r3, #3
 800232a:	f000 80a5 	beq.w	8002478 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800232e:	2b01      	cmp	r3, #1
 8002330:	f000 80a6 	beq.w	8002480 <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002334:	0757      	lsls	r7, r2, #29
 8002336:	d538      	bpl.n	80023aa <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002338:	4954      	ldr	r1, [pc, #336]	; (800248c <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800233e:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002340:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002342:	f022 0207 	bic.w	r2, r2, #7
 8002346:	4313      	orrs	r3, r2
 8002348:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800234a:	f7ff f921 	bl	8001590 <HAL_GetTick>
 800234e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002350:	e005      	b.n	800235e <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002352:	f7ff f91d 	bl	8001590 <HAL_GetTick>
 8002356:	1bc0      	subs	r0, r0, r7
 8002358:	4540      	cmp	r0, r8
 800235a:	f200 808b 	bhi.w	8002474 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	6933      	ldr	r3, [r6, #16]
 8002360:	6862      	ldr	r2, [r4, #4]
 8002362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002366:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800236a:	d1f2      	bne.n	8002352 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	079e      	lsls	r6, r3, #30
 8002370:	d50b      	bpl.n	800238a <HAL_RCC_ClockConfig+0x13e>
 8002372:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002374:	4945      	ldr	r1, [pc, #276]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 8002376:	698a      	ldr	r2, [r1, #24]
 8002378:	f002 020f 	and.w	r2, r2, #15
 800237c:	4282      	cmp	r2, r0
 800237e:	d904      	bls.n	800238a <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	698a      	ldr	r2, [r1, #24]
 8002382:	f022 020f 	bic.w	r2, r2, #15
 8002386:	4310      	orrs	r0, r2
 8002388:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238a:	493f      	ldr	r1, [pc, #252]	; (8002488 <HAL_RCC_ClockConfig+0x23c>)
 800238c:	680a      	ldr	r2, [r1, #0]
 800238e:	f002 020f 	and.w	r2, r2, #15
 8002392:	42aa      	cmp	r2, r5
 8002394:	d914      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	680a      	ldr	r2, [r1, #0]
 8002398:	f022 020f 	bic.w	r2, r2, #15
 800239c:	432a      	orrs	r2, r5
 800239e:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a0:	680a      	ldr	r2, [r1, #0]
 80023a2:	f002 020f 	and.w	r2, r2, #15
 80023a6:	42aa      	cmp	r2, r5
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 80023aa:	2001      	movs	r0, #1
}
 80023ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d1ad      	bne.n	8002310 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b4:	4934      	ldr	r1, [pc, #208]	; (8002488 <HAL_RCC_ClockConfig+0x23c>)
 80023b6:	680a      	ldr	r2, [r1, #0]
 80023b8:	f002 020f 	and.w	r2, r2, #15
 80023bc:	42aa      	cmp	r2, r5
 80023be:	d8ea      	bhi.n	8002396 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023c0:	0758      	lsls	r0, r3, #29
 80023c2:	d50b      	bpl.n	80023dc <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023c4:	4931      	ldr	r1, [pc, #196]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 80023c6:	6920      	ldr	r0, [r4, #16]
 80023c8:	698a      	ldr	r2, [r1, #24]
 80023ca:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80023ce:	4290      	cmp	r0, r2
 80023d0:	d204      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023d2:	698a      	ldr	r2, [r1, #24]
 80023d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023d8:	4302      	orrs	r2, r0
 80023da:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	0719      	lsls	r1, r3, #28
 80023de:	d50b      	bpl.n	80023f8 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023e0:	492a      	ldr	r1, [pc, #168]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 80023e2:	6960      	ldr	r0, [r4, #20]
 80023e4:	69ca      	ldr	r2, [r1, #28]
 80023e6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80023ea:	4290      	cmp	r0, r2
 80023ec:	d204      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023ee:	69ca      	ldr	r2, [r1, #28]
 80023f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023f4:	4302      	orrs	r2, r0
 80023f6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	06da      	lsls	r2, r3, #27
 80023fa:	d50b      	bpl.n	8002414 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023fc:	4923      	ldr	r1, [pc, #140]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 80023fe:	69a0      	ldr	r0, [r4, #24]
 8002400:	69ca      	ldr	r2, [r1, #28]
 8002402:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002406:	4290      	cmp	r0, r2
 8002408:	d204      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800240a:	69ca      	ldr	r2, [r1, #28]
 800240c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002410:	4302      	orrs	r2, r0
 8002412:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002414:	069b      	lsls	r3, r3, #26
 8002416:	d50b      	bpl.n	8002430 <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 800241a:	69e1      	ldr	r1, [r4, #28]
 800241c:	6a13      	ldr	r3, [r2, #32]
 800241e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002422:	4299      	cmp	r1, r3
 8002424:	d204      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002426:	6a13      	ldr	r3, [r2, #32]
 8002428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242c:	430b      	orrs	r3, r1
 800242e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002430:	f7ff fe80 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8002434:	4a15      	ldr	r2, [pc, #84]	; (800248c <HAL_RCC_ClockConfig+0x240>)
 8002436:	4916      	ldr	r1, [pc, #88]	; (8002490 <HAL_RCC_ClockConfig+0x244>)
 8002438:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800243a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800243c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8002440:	4d14      	ldr	r5, [pc, #80]	; (8002494 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002442:	f002 020f 	and.w	r2, r2, #15
 8002446:	4c14      	ldr	r4, [pc, #80]	; (8002498 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002448:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800244a:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800244c:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8002450:	4912      	ldr	r1, [pc, #72]	; (800249c <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002452:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002456:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 800245a:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800245c:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8002460:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002462:	6022      	str	r2, [r4, #0]
}
 8002464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002468:	f7ff b82e 	b.w	80014c8 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800246c:	0390      	lsls	r0, r2, #14
 800246e:	f53f af63 	bmi.w	8002338 <HAL_RCC_ClockConfig+0xec>
 8002472:	e79a      	b.n	80023aa <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 8002474:	2003      	movs	r0, #3
 8002476:	e799      	b.n	80023ac <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002478:	0191      	lsls	r1, r2, #6
 800247a:	f53f af5d 	bmi.w	8002338 <HAL_RCC_ClockConfig+0xec>
 800247e:	e794      	b.n	80023aa <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002480:	05d2      	lsls	r2, r2, #23
 8002482:	f53f af59 	bmi.w	8002338 <HAL_RCC_ClockConfig+0xec>
 8002486:	e790      	b.n	80023aa <HAL_RCC_ClockConfig+0x15e>
 8002488:	52002000 	.word	0x52002000
 800248c:	58024400 	.word	0x58024400
 8002490:	08007190 	.word	0x08007190
 8002494:	2000000c 	.word	0x2000000c
 8002498:	20000004 	.word	0x20000004
 800249c:	20000000 	.word	0x20000000

080024a0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a0:	4a49      	ldr	r2, [pc, #292]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x128>)
 80024a2:	6913      	ldr	r3, [r2, #16]
 80024a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024a8:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024aa:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ac:	d064      	beq.n	8002578 <HAL_RCC_GetHCLKFreq+0xd8>
 80024ae:	2b18      	cmp	r3, #24
 80024b0:	d022      	beq.n	80024f8 <HAL_RCC_GetHCLKFreq+0x58>
 80024b2:	b1bb      	cbz	r3, 80024e4 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 80024b4:	4b45      	ldr	r3, [pc, #276]	; (80025cc <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024b6:	4944      	ldr	r1, [pc, #272]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x128>)
 80024b8:	4845      	ldr	r0, [pc, #276]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x130>)
 80024ba:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024bc:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024be:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024c2:	4c44      	ldr	r4, [pc, #272]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x134>)
 80024c4:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024c8:	4d43      	ldr	r5, [pc, #268]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024ca:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024cc:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024ce:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024d2:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80024d6:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024d8:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80024dc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024de:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80024e0:	bc30      	pop	{r4, r5}
 80024e2:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	0699      	lsls	r1, r3, #26
 80024e8:	d548      	bpl.n	800257c <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	4a3b      	ldr	r2, [pc, #236]	; (80025dc <HAL_RCC_GetHCLKFreq+0x13c>)
 80024ee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	e7de      	b.n	80024b6 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024f8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80024fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80024fe:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002502:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0d6      	beq.n	80024b6 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002508:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800250c:	f001 0101 	and.w	r1, r1, #1
 8002510:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002514:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002518:	fb01 f304 	mul.w	r3, r1, r4
 800251c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8002520:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 800252a:	d002      	beq.n	8002532 <HAL_RCC_GetHCLKFreq+0x92>
 800252c:	d32b      	bcc.n	8002586 <HAL_RCC_GetHCLKFreq+0xe6>
 800252e:	2802      	cmp	r0, #2
 8002530:	d026      	beq.n	8002580 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002532:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80025e0 <HAL_RCC_GetHCLKFreq+0x140>
 8002536:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800253a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	ee07 3a10 	vmov	s14, r3
 8002544:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002548:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002554:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x128>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002560:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002562:	ee07 3a10 	vmov	s14, r3
 8002566:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800256a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800256e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002572:	ee17 3a90 	vmov	r3, s15
 8002576:	e79e      	b.n	80024b6 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_GetHCLKFreq+0x144>)
 800257a:	e79c      	b.n	80024b6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_RCC_GetHCLKFreq+0x13c>)
 800257e:	e79a      	b.n	80024b6 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002580:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80025e8 <HAL_RCC_GetHCLKFreq+0x148>
 8002584:	e7d7      	b.n	8002536 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	069b      	lsls	r3, r3, #26
 800258a:	d51a      	bpl.n	80025c2 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800258c:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800258e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002592:	4912      	ldr	r1, [pc, #72]	; (80025dc <HAL_RCC_GetHCLKFreq+0x13c>)
 8002594:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002598:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800259a:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800259c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a0:	ee07 1a10 	vmov	s14, r1
 80025a4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80025a8:	ee07 3a10 	vmov	s14, r3
 80025ac:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80025b0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80025b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80025b8:	ee77 7a85 	vadd.f32	s15, s15, s10
 80025bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c0:	e7ca      	b.n	8002558 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025c2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80025ec <HAL_RCC_GetHCLKFreq+0x14c>
 80025c6:	e7b6      	b.n	8002536 <HAL_RCC_GetHCLKFreq+0x96>
 80025c8:	58024400 	.word	0x58024400
 80025cc:	003d0900 	.word	0x003d0900
 80025d0:	08007190 	.word	0x08007190
 80025d4:	20000004 	.word	0x20000004
 80025d8:	20000000 	.word	0x20000000
 80025dc:	03d09000 	.word	0x03d09000
 80025e0:	4a742400 	.word	0x4a742400
 80025e4:	02625a00 	.word	0x02625a00
 80025e8:	4c189680 	.word	0x4c189680
 80025ec:	4c742400 	.word	0x4c742400

080025f0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f0:	494d      	ldr	r1, [pc, #308]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x138>)
 80025f2:	690b      	ldr	r3, [r1, #16]
 80025f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f8:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025fa:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fc:	d06b      	beq.n	80026d6 <HAL_RCC_GetPCLK1Freq+0xe6>
 80025fe:	2b18      	cmp	r3, #24
 8002600:	d029      	beq.n	8002656 <HAL_RCC_GetPCLK1Freq+0x66>
 8002602:	b1fb      	cbz	r3, 8002644 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002606:	4848      	ldr	r0, [pc, #288]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x138>)
 8002608:	4949      	ldr	r1, [pc, #292]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x140>)
 800260a:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800260c:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800260e:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8002612:	4d48      	ldr	r5, [pc, #288]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002614:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002618:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800261a:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800261c:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002620:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002624:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002626:	4c44      	ldr	r4, [pc, #272]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x148>)
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800262c:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800262e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002630:	69c2      	ldr	r2, [r0, #28]
 8002632:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002636:	5c88      	ldrb	r0, [r1, r2]
 8002638:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800263c:	bc30      	pop	{r4, r5}
 800263e:	fa23 f000 	lsr.w	r0, r3, r0
 8002642:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002644:	680b      	ldr	r3, [r1, #0]
 8002646:	069a      	lsls	r2, r3, #26
 8002648:	d547      	bpl.n	80026da <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800264a:	680b      	ldr	r3, [r1, #0]
 800264c:	4a3b      	ldr	r2, [pc, #236]	; (800273c <HAL_RCC_GetPCLK1Freq+0x14c>)
 800264e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002652:	40da      	lsrs	r2, r3
 8002654:	e7d7      	b.n	8002606 <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002656:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002658:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800265a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800265c:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002660:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 8002662:	2a00      	cmp	r2, #0
 8002664:	d0cf      	beq.n	8002606 <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002666:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002672:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002676:	fb03 f304 	mul.w	r3, r3, r4
 800267a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800267e:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002680:	ee07 3a90 	vmov	s15, r3
 8002684:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8002688:	d002      	beq.n	8002690 <HAL_RCC_GetPCLK1Freq+0xa0>
 800268a:	d32b      	bcc.n	80026e4 <HAL_RCC_GetPCLK1Freq+0xf4>
 800268c:	2802      	cmp	r0, #2
 800268e:	d026      	beq.n	80026de <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002690:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002740 <HAL_RCC_GetPCLK1Freq+0x150>
 8002694:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8002698:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800269a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269e:	ee07 3a10 	vmov	s14, r3
 80026a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80026a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80026b2:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x138>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80026be:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80026c0:	ee07 3a10 	vmov	s14, r3
 80026c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80026c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026cc:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80026d0:	ee17 2a90 	vmov	r2, s15
 80026d4:	e797      	b.n	8002606 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x154>)
 80026d8:	e795      	b.n	8002606 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026da:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_RCC_GetPCLK1Freq+0x14c>)
 80026dc:	e793      	b.n	8002606 <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026de:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002748 <HAL_RCC_GetPCLK1Freq+0x158>
 80026e2:	e7d7      	b.n	8002694 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026e4:	680b      	ldr	r3, [r1, #0]
 80026e6:	069b      	lsls	r3, r3, #26
 80026e8:	d51a      	bpl.n	8002720 <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026ea:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026ec:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026f0:	4a12      	ldr	r2, [pc, #72]	; (800273c <HAL_RCC_GetPCLK1Freq+0x14c>)
 80026f2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026f6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026f8:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fe:	ee07 2a10 	vmov	s14, r2
 8002702:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002706:	ee07 3a10 	vmov	s14, r3
 800270a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800270e:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002712:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002716:	ee77 7a85 	vadd.f32	s15, s15, s10
 800271a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271e:	e7ca      	b.n	80026b6 <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002720:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800274c <HAL_RCC_GetPCLK1Freq+0x15c>
 8002724:	e7b6      	b.n	8002694 <HAL_RCC_GetPCLK1Freq+0xa4>
 8002726:	bf00      	nop
 8002728:	58024400 	.word	0x58024400
 800272c:	003d0900 	.word	0x003d0900
 8002730:	08007190 	.word	0x08007190
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004
 800273c:	03d09000 	.word	0x03d09000
 8002740:	4a742400 	.word	0x4a742400
 8002744:	02625a00 	.word	0x02625a00
 8002748:	4c189680 	.word	0x4c189680
 800274c:	4c742400 	.word	0x4c742400

08002750 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002750:	494d      	ldr	r1, [pc, #308]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x138>)
 8002752:	690b      	ldr	r3, [r1, #16]
 8002754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002758:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800275a:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800275c:	d06b      	beq.n	8002836 <HAL_RCC_GetPCLK2Freq+0xe6>
 800275e:	2b18      	cmp	r3, #24
 8002760:	d029      	beq.n	80027b6 <HAL_RCC_GetPCLK2Freq+0x66>
 8002762:	b1fb      	cbz	r3, 80027a4 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8002764:	4a49      	ldr	r2, [pc, #292]	; (800288c <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002766:	4848      	ldr	r0, [pc, #288]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x138>)
 8002768:	4949      	ldr	r1, [pc, #292]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x140>)
 800276a:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800276c:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800276e:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8002772:	4d48      	ldr	r5, [pc, #288]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002774:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002778:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800277a:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800277c:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002780:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002784:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002786:	4c44      	ldr	r4, [pc, #272]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x148>)
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800278c:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800278e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002790:	69c2      	ldr	r2, [r0, #28]
 8002792:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8002796:	5c88      	ldrb	r0, [r1, r2]
 8002798:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800279c:	bc30      	pop	{r4, r5}
 800279e:	fa23 f000 	lsr.w	r0, r3, r0
 80027a2:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027a4:	680b      	ldr	r3, [r1, #0]
 80027a6:	069a      	lsls	r2, r3, #26
 80027a8:	d547      	bpl.n	800283a <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027aa:	680b      	ldr	r3, [r1, #0]
 80027ac:	4a3b      	ldr	r2, [pc, #236]	; (800289c <HAL_RCC_GetPCLK2Freq+0x14c>)
 80027ae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	e7d7      	b.n	8002766 <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027b6:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80027b8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027ba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80027bc:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80027c0:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	d0cf      	beq.n	8002766 <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80027c6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027d2:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80027d6:	fb03 f304 	mul.w	r3, r3, r4
 80027da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80027de:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetPCLK2Freq+0xa0>
 80027ea:	d32b      	bcc.n	8002844 <HAL_RCC_GetPCLK2Freq+0xf4>
 80027ec:	2802      	cmp	r0, #2
 80027ee:	d026      	beq.n	800283e <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027f0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80028a0 <HAL_RCC_GetPCLK2Freq+0x150>
 80027f4:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80027f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80027fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fe:	ee07 3a10 	vmov	s14, r3
 8002802:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002806:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800280a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002812:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x138>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800281e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002820:	ee07 3a10 	vmov	s14, r3
 8002824:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002828:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800282c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002830:	ee17 2a90 	vmov	r2, s15
 8002834:	e797      	b.n	8002766 <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8002836:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x154>)
 8002838:	e795      	b.n	8002766 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800283a:	4a18      	ldr	r2, [pc, #96]	; (800289c <HAL_RCC_GetPCLK2Freq+0x14c>)
 800283c:	e793      	b.n	8002766 <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800283e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80028a8 <HAL_RCC_GetPCLK2Freq+0x158>
 8002842:	e7d7      	b.n	80027f4 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002844:	680b      	ldr	r3, [r1, #0]
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	d51a      	bpl.n	8002880 <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800284a:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800284c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002850:	4a12      	ldr	r2, [pc, #72]	; (800289c <HAL_RCC_GetPCLK2Freq+0x14c>)
 8002852:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002856:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002858:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800285a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285e:	ee07 2a10 	vmov	s14, r2
 8002862:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002866:	ee07 3a10 	vmov	s14, r3
 800286a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800286e:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002872:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002876:	ee77 7a85 	vadd.f32	s15, s15, s10
 800287a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287e:	e7ca      	b.n	8002816 <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002880:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80028ac <HAL_RCC_GetPCLK2Freq+0x15c>
 8002884:	e7b6      	b.n	80027f4 <HAL_RCC_GetPCLK2Freq+0xa4>
 8002886:	bf00      	nop
 8002888:	58024400 	.word	0x58024400
 800288c:	003d0900 	.word	0x003d0900
 8002890:	08007190 	.word	0x08007190
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004
 800289c:	03d09000 	.word	0x03d09000
 80028a0:	4a742400 	.word	0x4a742400
 80028a4:	02625a00 	.word	0x02625a00
 80028a8:	4c189680 	.word	0x4c189680
 80028ac:	4c742400 	.word	0x4c742400

080028b0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80028b0:	4a3b      	ldr	r2, [pc, #236]	; (80029a0 <RCCEx_PLL2_Config+0xf0>)
{
 80028b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80028b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d067      	beq.n	800298e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80028be:	6813      	ldr	r3, [r2, #0]
 80028c0:	460f      	mov	r7, r1
 80028c2:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80028c4:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80028c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028ca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80028cc:	f7fe fe60 	bl	8001590 <HAL_GetTick>
 80028d0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80028d2:	e004      	b.n	80028de <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80028d4:	f7fe fe5c 	bl	8001590 <HAL_GetTick>
 80028d8:	1b80      	subs	r0, r0, r6
 80028da:	2802      	cmp	r0, #2
 80028dc:	d859      	bhi.n	8002992 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80028de:	6823      	ldr	r3, [r4, #0]
 80028e0:	011a      	lsls	r2, r3, #4
 80028e2:	d4f7      	bmi.n	80028d4 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80028e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028e6:	682a      	ldr	r2, [r5, #0]
 80028e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80028ec:	492d      	ldr	r1, [pc, #180]	; (80029a4 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80028ee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80028f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80028f4:	686e      	ldr	r6, [r5, #4]
 80028f6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80028fa:	3e01      	subs	r6, #1
 80028fc:	1e50      	subs	r0, r2, #1
 80028fe:	3b01      	subs	r3, #1
 8002900:	692a      	ldr	r2, [r5, #16]
 8002902:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8002906:	025b      	lsls	r3, r3, #9
 8002908:	0400      	lsls	r0, r0, #16
 800290a:	3a01      	subs	r2, #1
 800290c:	b29b      	uxth	r3, r3
 800290e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002912:	0612      	lsls	r2, r2, #24
 8002914:	4303      	orrs	r3, r0
 8002916:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800291a:	4333      	orrs	r3, r6
 800291c:	4313      	orrs	r3, r2
 800291e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002920:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002922:	696a      	ldr	r2, [r5, #20]
 8002924:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002928:	4313      	orrs	r3, r2
 800292a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800292c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800292e:	69aa      	ldr	r2, [r5, #24]
 8002930:	f023 0320 	bic.w	r3, r3, #32
 8002934:	4313      	orrs	r3, r2
 8002936:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002938:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800293a:	f023 0310 	bic.w	r3, r3, #16
 800293e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002940:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002942:	69eb      	ldr	r3, [r5, #28]
 8002944:	4011      	ands	r1, r2
 8002946:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800294a:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800294c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800294e:	f043 0310 	orr.w	r3, r3, #16
 8002952:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002954:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002956:	b1f7      	cbz	r7, 8002996 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002958:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800295a:	bf0c      	ite	eq
 800295c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002960:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8002964:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <RCCEx_PLL2_Config+0xf0>)
 8002968:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800296a:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 800296c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002970:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002972:	f7fe fe0d 	bl	8001590 <HAL_GetTick>
 8002976:	4605      	mov	r5, r0
 8002978:	e004      	b.n	8002984 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800297a:	f7fe fe09 	bl	8001590 <HAL_GetTick>
 800297e:	1b40      	subs	r0, r0, r5
 8002980:	2802      	cmp	r0, #2
 8002982:	d806      	bhi.n	8002992 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	d5f7      	bpl.n	800297a <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800298a:	2000      	movs	r0, #0
}
 800298c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800298e:	2001      	movs	r0, #1
}
 8002990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002992:	2003      	movs	r0, #3
}
 8002994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800299a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800299c:	e7e3      	b.n	8002966 <RCCEx_PLL2_Config+0xb6>
 800299e:	bf00      	nop
 80029a0:	58024400 	.word	0x58024400
 80029a4:	ffff0007 	.word	0xffff0007

080029a8 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80029a8:	4a3b      	ldr	r2, [pc, #236]	; (8002a98 <RCCEx_PLL3_Config+0xf0>)
{
 80029aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80029ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d067      	beq.n	8002a86 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80029b6:	6813      	ldr	r3, [r2, #0]
 80029b8:	460f      	mov	r7, r1
 80029ba:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80029bc:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 80029be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80029c4:	f7fe fde4 	bl	8001590 <HAL_GetTick>
 80029c8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80029ca:	e004      	b.n	80029d6 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80029cc:	f7fe fde0 	bl	8001590 <HAL_GetTick>
 80029d0:	1b80      	subs	r0, r0, r6
 80029d2:	2802      	cmp	r0, #2
 80029d4:	d859      	bhi.n	8002a8a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	009a      	lsls	r2, r3, #2
 80029da:	d4f7      	bmi.n	80029cc <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80029dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029de:	682a      	ldr	r2, [r5, #0]
 80029e0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80029e4:	492d      	ldr	r1, [pc, #180]	; (8002a9c <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80029e6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80029ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80029ec:	686e      	ldr	r6, [r5, #4]
 80029ee:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80029f2:	3e01      	subs	r6, #1
 80029f4:	1e50      	subs	r0, r2, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	692a      	ldr	r2, [r5, #16]
 80029fa:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80029fe:	025b      	lsls	r3, r3, #9
 8002a00:	0400      	lsls	r0, r0, #16
 8002a02:	3a01      	subs	r2, #1
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8002a0a:	0612      	lsls	r2, r2, #24
 8002a0c:	4303      	orrs	r3, r0
 8002a0e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002a12:	4333      	orrs	r3, r6
 8002a14:	4313      	orrs	r3, r2
 8002a16:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002a18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a1a:	696a      	ldr	r2, [r5, #20]
 8002a1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a20:	4313      	orrs	r3, r2
 8002a22:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a26:	69aa      	ldr	r2, [r5, #24]
 8002a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002a30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a36:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002a38:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002a3a:	69eb      	ldr	r3, [r5, #28]
 8002a3c:	4011      	ands	r1, r2
 8002a3e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002a42:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002a44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002a4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002a4e:	b1f7      	cbz	r7, 8002a8e <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002a50:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002a52:	bf0c      	ite	eq
 8002a54:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002a58:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <RCCEx_PLL3_Config+0xf0>)
 8002a60:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002a62:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8002a64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a68:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002a6a:	f7fe fd91 	bl	8001590 <HAL_GetTick>
 8002a6e:	4605      	mov	r5, r0
 8002a70:	e004      	b.n	8002a7c <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002a72:	f7fe fd8d 	bl	8001590 <HAL_GetTick>
 8002a76:	1b40      	subs	r0, r0, r5
 8002a78:	2802      	cmp	r0, #2
 8002a7a:	d806      	bhi.n	8002a8a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	d5f7      	bpl.n	8002a72 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8002a82:	2000      	movs	r0, #0
}
 8002a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002a86:	2001      	movs	r0, #1
}
 8002a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002a8a:	2003      	movs	r0, #3
}
 8002a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002a8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a94:	e7e3      	b.n	8002a5e <RCCEx_PLL3_Config+0xb6>
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	ffff0007 	.word	0xffff0007

08002aa0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aa4:	6803      	ldr	r3, [r0, #0]
{
 8002aa6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aa8:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8002aac:	d015      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002aae:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8002ab0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002ab4:	f000 844e 	beq.w	8003354 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8002ab8:	f240 8501 	bls.w	80034be <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002abc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002ac0:	f000 8461 	beq.w	8003386 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8002ac4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002ac8:	f040 8512 	bne.w	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002acc:	48a2      	ldr	r0, [pc, #648]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002ace:	2600      	movs	r6, #0
 8002ad0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002ad2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ada:	05dd      	lsls	r5, r3, #23
 8002adc:	d50a      	bpl.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ade:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002ae0:	2a04      	cmp	r2, #4
 8002ae2:	d806      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ae4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002ae8:	03e403dd 	.word	0x03e403dd
 8002aec:	039e03d2 	.word	0x039e03d2
 8002af0:	039e      	.short	0x039e
      ret = HAL_ERROR;
 8002af2:	2601      	movs	r6, #1
 8002af4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002af6:	0598      	lsls	r0, r3, #22
 8002af8:	d51b      	bpl.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 8002afa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002afc:	2a80      	cmp	r2, #128	; 0x80
 8002afe:	f000 8405 	beq.w	800330c <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8002b02:	f200 84d1 	bhi.w	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	f000 8443 	beq.w	8003392 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8002b0c:	2a40      	cmp	r2, #64	; 0x40
 8002b0e:	f040 84d2 	bne.w	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b12:	2100      	movs	r1, #0
 8002b14:	1d20      	adds	r0, r4, #4
 8002b16:	f7ff fecb 	bl	80028b0 <RCCEx_PLL2_Config>
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002b1e:	2d00      	cmp	r5, #0
 8002b20:	f040 83fe 	bne.w	8003320 <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b24:	498c      	ldr	r1, [pc, #560]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002b26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b28:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002b2a:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8002b2e:	4302      	orrs	r2, r0
 8002b30:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b32:	0559      	lsls	r1, r3, #21
 8002b34:	d51f      	bpl.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002b36:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8002b3a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002b3e:	f000 83d4 	beq.w	80032ea <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8002b42:	f200 8499 	bhi.w	8003478 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8002b46:	2a00      	cmp	r2, #0
 8002b48:	f000 8410 	beq.w	800336c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8002b4c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002b50:	f040 849a 	bne.w	8003488 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b54:	2100      	movs	r1, #0
 8002b56:	1d20      	adds	r0, r4, #4
 8002b58:	f7ff feaa 	bl	80028b0 <RCCEx_PLL2_Config>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	f040 83cc 	bne.w	80032fe <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b66:	497c      	ldr	r1, [pc, #496]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002b68:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8002b6c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002b6e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8002b72:	4302      	orrs	r2, r0
 8002b74:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b76:	051a      	lsls	r2, r3, #20
 8002b78:	d51f      	bpl.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b7a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8002b7e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8002b82:	f000 83cf 	beq.w	8003324 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8002b86:	f200 8483 	bhi.w	8003490 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	f000 8408 	beq.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8002b90:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8002b94:	f040 8484 	bne.w	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b98:	2100      	movs	r1, #0
 8002b9a:	1d20      	adds	r0, r4, #4
 8002b9c:	f7ff fe88 	bl	80028b0 <RCCEx_PLL2_Config>
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002ba4:	2d00      	cmp	r5, #0
 8002ba6:	f040 83c7 	bne.w	8003338 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002baa:	496b      	ldr	r1, [pc, #428]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002bac:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8002bb0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002bb2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8002bb6:	4302      	orrs	r2, r0
 8002bb8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bba:	019f      	lsls	r7, r3, #6
 8002bbc:	d50d      	bpl.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 8002bbe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002bc0:	2a10      	cmp	r2, #16
 8002bc2:	f000 830c 	beq.w	80031de <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002bc6:	f240 848e 	bls.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8002bca:	2a20      	cmp	r2, #32
 8002bcc:	f000 8349 	beq.w	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8002bd0:	2a30      	cmp	r2, #48	; 0x30
 8002bd2:	f000 8309 	beq.w	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      ret = HAL_ERROR;
 8002bd6:	2601      	movs	r6, #1
 8002bd8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002bda:	04d8      	lsls	r0, r3, #19
 8002bdc:	d51d      	bpl.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002bde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002be0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002be4:	f000 83aa 	beq.w	800333c <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8002be8:	f200 8471 	bhi.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8002bec:	2a00      	cmp	r2, #0
 8002bee:	f000 83c4 	beq.w	800337a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8002bf2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002bf6:	f040 8472 	bne.w	80034de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	1d20      	adds	r0, r4, #4
 8002bfe:	f7ff fe57 	bl	80028b0 <RCCEx_PLL2_Config>
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002c06:	2d00      	cmp	r5, #0
 8002c08:	f040 83a2 	bne.w	8003350 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c0c:	4952      	ldr	r1, [pc, #328]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002c0e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002c10:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002c12:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002c16:	4302      	orrs	r2, r0
 8002c18:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c1a:	0499      	lsls	r1, r3, #18
 8002c1c:	d51b      	bpl.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c1e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002c20:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002c24:	f000 8309 	beq.w	800323a <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8002c28:	f200 8407 	bhi.w	800343a <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8002c2c:	b14a      	cbz	r2, 8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002c2e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002c32:	f040 840e 	bne.w	8003452 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c36:	2101      	movs	r1, #1
 8002c38:	1d20      	adds	r0, r4, #4
 8002c3a:	f7ff fe39 	bl	80028b0 <RCCEx_PLL2_Config>
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	f040 8271 	bne.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c48:	4943      	ldr	r1, [pc, #268]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002c4a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002c4c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002c4e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002c52:	4302      	orrs	r2, r0
 8002c54:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c56:	045a      	lsls	r2, r3, #17
 8002c58:	d51d      	bpl.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c5a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8002c5e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002c62:	f000 82b2 	beq.w	80031ca <HAL_RCCEx_PeriphCLKConfig+0x72a>
 8002c66:	f200 83f8 	bhi.w	800345a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002c6a:	b14a      	cbz	r2, 8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8002c6c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002c70:	f040 83ff 	bne.w	8003472 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c74:	2101      	movs	r1, #1
 8002c76:	1d20      	adds	r0, r4, #4
 8002c78:	f7ff fe1a 	bl	80028b0 <RCCEx_PLL2_Config>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002c80:	2d00      	cmp	r5, #0
 8002c82:	f040 8250 	bne.w	8003126 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c86:	4934      	ldr	r1, [pc, #208]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002c88:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8002c8c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002c8e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8002c92:	4302      	orrs	r2, r0
 8002c94:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c96:	041f      	lsls	r7, r3, #16
 8002c98:	d50d      	bpl.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 8002c9a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002c9c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002ca0:	f000 82d6 	beq.w	8003250 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8002ca4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002ca8:	f000 81ad 	beq.w	8003006 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002cac:	2a00      	cmp	r2, #0
 8002cae:	f000 81b0 	beq.w	8003012 <HAL_RCCEx_PeriphCLKConfig+0x572>
      ret = HAL_ERROR;
 8002cb2:	2601      	movs	r6, #1
 8002cb4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cb6:	01d8      	lsls	r0, r3, #7
 8002cb8:	d519      	bpl.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 8002cba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002cbc:	2a03      	cmp	r2, #3
 8002cbe:	f200 8442 	bhi.w	8003546 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 8002cc2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002cc6:	000a      	.short	0x000a
 8002cc8:	00040264 	.word	0x00040264
 8002ccc:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cce:	2102      	movs	r1, #2
 8002cd0:	1d20      	adds	r0, r4, #4
 8002cd2:	f7ff fded 	bl	80028b0 <RCCEx_PLL2_Config>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002cda:	2d00      	cmp	r5, #0
 8002cdc:	f040 821b 	bne.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ce0:	491d      	ldr	r1, [pc, #116]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002ce2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002ce4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002ce6:	f022 0203 	bic.w	r2, r2, #3
 8002cea:	4302      	orrs	r2, r0
 8002cec:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cee:	0259      	lsls	r1, r3, #9
 8002cf0:	f100 81cb 	bmi.w	800308a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002cf4:	07df      	lsls	r7, r3, #31
 8002cf6:	d542      	bpl.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002cf8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002cfa:	2a28      	cmp	r2, #40	; 0x28
 8002cfc:	f200 8369 	bhi.w	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8002d00:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002d04:	03670033 	.word	0x03670033
 8002d08:	03670367 	.word	0x03670367
 8002d0c:	03670367 	.word	0x03670367
 8002d10:	03670367 	.word	0x03670367
 8002d14:	03670256 	.word	0x03670256
 8002d18:	03670367 	.word	0x03670367
 8002d1c:	03670367 	.word	0x03670367
 8002d20:	03670367 	.word	0x03670367
 8002d24:	0367002c 	.word	0x0367002c
 8002d28:	03670367 	.word	0x03670367
 8002d2c:	03670367 	.word	0x03670367
 8002d30:	03670367 	.word	0x03670367
 8002d34:	03670033 	.word	0x03670033
 8002d38:	03670367 	.word	0x03670367
 8002d3c:	03670367 	.word	0x03670367
 8002d40:	03670367 	.word	0x03670367
 8002d44:	03670033 	.word	0x03670033
 8002d48:	03670367 	.word	0x03670367
 8002d4c:	03670367 	.word	0x03670367
 8002d50:	03670367 	.word	0x03670367
 8002d54:	0033      	.short	0x0033
 8002d56:	bf00      	nop
 8002d58:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d62:	f7ff fe21 	bl	80029a8 <RCCEx_PLL3_Config>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	f040 81d1 	bne.w	8003112 <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d70:	49ad      	ldr	r1, [pc, #692]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002d72:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002d74:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002d76:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002d7a:	4302      	orrs	r2, r0
 8002d7c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d7e:	0798      	lsls	r0, r3, #30
 8002d80:	d51c      	bpl.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d82:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002d84:	2a05      	cmp	r2, #5
 8002d86:	f200 83d8 	bhi.w	800353a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8002d8a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002d8e:	000d      	.short	0x000d
 8002d90:	000601f7 	.word	0x000601f7
 8002d94:	000d000d 	.word	0x000d000d
 8002d98:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002da0:	f7ff fe02 	bl	80029a8 <RCCEx_PLL3_Config>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002da8:	2d00      	cmp	r5, #0
 8002daa:	f040 81b6 	bne.w	800311a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dae:	499e      	ldr	r1, [pc, #632]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002db0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002db2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002db4:	f022 0207 	bic.w	r2, r2, #7
 8002db8:	4302      	orrs	r2, r0
 8002dba:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dbc:	0759      	lsls	r1, r3, #29
 8002dbe:	d51e      	bpl.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002dc0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002dc4:	2a05      	cmp	r2, #5
 8002dc6:	f200 83bb 	bhi.w	8003540 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8002dca:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002dce:	000d      	.short	0x000d
 8002dd0:	000601e8 	.word	0x000601e8
 8002dd4:	000d000d 	.word	0x000d000d
 8002dd8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dda:	2101      	movs	r1, #1
 8002ddc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002de0:	f7ff fde2 	bl	80029a8 <RCCEx_PLL3_Config>
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002de8:	2d00      	cmp	r5, #0
 8002dea:	f040 8198 	bne.w	800311e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dee:	498e      	ldr	r1, [pc, #568]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002df0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002df4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002df6:	f022 0207 	bic.w	r2, r2, #7
 8002dfa:	4302      	orrs	r2, r0
 8002dfc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dfe:	069a      	lsls	r2, r3, #26
 8002e00:	d51d      	bpl.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e02:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002e06:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002e0a:	f000 81f7 	beq.w	80031fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002e0e:	f200 82e7 	bhi.w	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002e12:	b14a      	cbz	r2, 8002e28 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002e14:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002e18:	f040 82ee 	bne.w	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x958>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	1d20      	adds	r0, r4, #4
 8002e20:	f7ff fd46 	bl	80028b0 <RCCEx_PLL2_Config>
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002e28:	2d00      	cmp	r5, #0
 8002e2a:	f040 817a 	bne.w	8003122 <HAL_RCCEx_PeriphCLKConfig+0x682>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e2e:	497e      	ldr	r1, [pc, #504]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002e30:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002e34:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8002e36:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8002e3a:	4302      	orrs	r2, r0
 8002e3c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e3e:	065f      	lsls	r7, r3, #25
 8002e40:	d51d      	bpl.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002e42:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8002e46:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002e4a:	f000 81e1 	beq.w	8003210 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002e4e:	f200 82d6 	bhi.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8002e52:	b14a      	cbz	r2, 8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8002e54:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002e58:	f040 82dd 	bne.w	8003416 <HAL_RCCEx_PeriphCLKConfig+0x976>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	1d20      	adds	r0, r4, #4
 8002e60:	f7ff fd26 	bl	80028b0 <RCCEx_PLL2_Config>
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002e68:	2d00      	cmp	r5, #0
 8002e6a:	f040 8162 	bne.w	8003132 <HAL_RCCEx_PeriphCLKConfig+0x692>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e6e:	496e      	ldr	r1, [pc, #440]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002e70:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8002e74:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002e76:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002e7a:	4302      	orrs	r2, r0
 8002e7c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e7e:	0618      	lsls	r0, r3, #24
 8002e80:	d51d      	bpl.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002e82:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8002e86:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002e8a:	f000 81f4 	beq.w	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8002e8e:	f200 82c5 	bhi.w	800341c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002e92:	b14a      	cbz	r2, 8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002e94:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002e98:	f040 82cc 	bne.w	8003434 <HAL_RCCEx_PeriphCLKConfig+0x994>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	1d20      	adds	r0, r4, #4
 8002ea0:	f7ff fd06 	bl	80028b0 <RCCEx_PLL2_Config>
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002ea8:	2d00      	cmp	r5, #0
 8002eaa:	f040 8144 	bne.w	8003136 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002eae:	495e      	ldr	r1, [pc, #376]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002eb0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8002eb4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8002eb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eba:	4302      	orrs	r2, r0
 8002ebc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ebe:	0719      	lsls	r1, r3, #28
 8002ec0:	d50b      	bpl.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002ec2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002ec6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002eca:	f000 81f8 	beq.w	80032be <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002ece:	4856      	ldr	r0, [pc, #344]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002ed0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002ed2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eda:	06da      	lsls	r2, r3, #27
 8002edc:	d50b      	bpl.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002ede:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002ee2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002ee6:	f000 81f5 	beq.w	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eea:	484f      	ldr	r0, [pc, #316]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002eec:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002eee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ef6:	031f      	lsls	r7, r3, #12
 8002ef8:	d50e      	bpl.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 8002efa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002efe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002f02:	f000 8093 	beq.w	800302c <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8002f06:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002f0a:	f000 8096 	beq.w	800303a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002f0e:	2900      	cmp	r1, #0
 8002f10:	f000 824d 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x90e>
      ret = HAL_ERROR;
 8002f14:	2601      	movs	r6, #1
 8002f16:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f18:	0358      	lsls	r0, r3, #13
 8002f1a:	d50f      	bpl.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 8002f1c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002f20:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002f24:	f000 8094 	beq.w	8003050 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8002f28:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002f2c:	f000 8097 	beq.w	800305e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002f30:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002f34:	f000 8244 	beq.w	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x920>
      ret = HAL_ERROR;
 8002f38:	2601      	movs	r6, #1
 8002f3a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f3c:	03d9      	lsls	r1, r3, #15
 8002f3e:	d517      	bpl.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002f40:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002f42:	2a00      	cmp	r2, #0
 8002f44:	f000 8110 	beq.w	8003168 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8002f48:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002f4c:	f040 80f7 	bne.w	800313e <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f50:	2102      	movs	r1, #2
 8002f52:	1d20      	adds	r0, r4, #4
 8002f54:	f7ff fcac 	bl	80028b0 <RCCEx_PLL2_Config>
 8002f58:	4605      	mov	r5, r0
 8002f5a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002f5c:	2d00      	cmp	r5, #0
 8002f5e:	f040 810b 	bne.w	8003178 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002f62:	4931      	ldr	r1, [pc, #196]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002f64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002f66:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002f68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f6c:	4302      	orrs	r2, r0
 8002f6e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	d47f      	bmi.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002f74:	039f      	lsls	r7, r3, #14
 8002f76:	d435      	bmi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8002f78:	1c30      	adds	r0, r6, #0
 8002f7a:	bf18      	it	ne
 8002f7c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f7e:	02de      	lsls	r6, r3, #11
 8002f80:	d506      	bpl.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f82:	4929      	ldr	r1, [pc, #164]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002f84:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8002f86:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002f88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002f90:	00dd      	lsls	r5, r3, #3
 8002f92:	d507      	bpl.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002f94:	4924      	ldr	r1, [pc, #144]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002f96:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8002f9a:	690a      	ldr	r2, [r1, #16]
 8002f9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fa0:	432a      	orrs	r2, r5
 8002fa2:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fa4:	0299      	lsls	r1, r3, #10
 8002fa6:	d506      	bpl.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fa8:	491f      	ldr	r1, [pc, #124]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002faa:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8002fac:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002fae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002fb2:	432a      	orrs	r2, r5
 8002fb4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002fb6:	005a      	lsls	r2, r3, #1
 8002fb8:	d509      	bpl.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fba:	4a1b      	ldr	r2, [pc, #108]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002fbc:	6911      	ldr	r1, [r2, #16]
 8002fbe:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002fc2:	6111      	str	r1, [r2, #16]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8002fca:	4329      	orrs	r1, r5
 8002fcc:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da06      	bge.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002fd2:	4a15      	ldr	r2, [pc, #84]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002fd4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002fd6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002fd8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8002fe4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002fe6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002fea:	f000 80ab 	beq.w	8003144 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8002fee:	f240 80e8 	bls.w	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x722>
 8002ff2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002ff6:	f000 80aa 	beq.w	800314e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8002ffa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002ffe:	f000 80a6 	beq.w	800314e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8003002:	2001      	movs	r0, #1
 8003004:	e7bb      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003006:	2101      	movs	r1, #1
 8003008:	1d20      	adds	r0, r4, #4
 800300a:	f7ff fc51 	bl	80028b0 <RCCEx_PLL2_Config>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003012:	2d00      	cmp	r5, #0
 8003014:	f040 808b 	bne.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003018:	4903      	ldr	r1, [pc, #12]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800301a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800301c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800301e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003022:	4302      	orrs	r2, r0
 8003024:	650a      	str	r2, [r1, #80]	; 0x50
 8003026:	e646      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8003028:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800302c:	2102      	movs	r1, #2
 800302e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003032:	f7ff fcb9 	bl	80029a8 <RCCEx_PLL3_Config>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800303a:	2d00      	cmp	r5, #0
 800303c:	d17d      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x69a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800303e:	49b1      	ldr	r1, [pc, #708]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003040:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003044:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003046:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800304a:	4302      	orrs	r2, r0
 800304c:	658a      	str	r2, [r1, #88]	; 0x58
 800304e:	e763      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003050:	2101      	movs	r1, #1
 8003052:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003056:	f7ff fca7 	bl	80029a8 <RCCEx_PLL3_Config>
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800305e:	2d00      	cmp	r5, #0
 8003060:	d155      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003062:	49a8      	ldr	r1, [pc, #672]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003064:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003068:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800306a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800306e:	4302      	orrs	r2, r0
 8003070:	654a      	str	r2, [r1, #84]	; 0x54
 8003072:	e763      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003074:	2102      	movs	r1, #2
 8003076:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800307a:	f7ff fc95 	bl	80029a8 <RCCEx_PLL3_Config>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	2800      	cmp	r0, #0
 8003082:	f43f af77 	beq.w	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      status=HAL_ERROR;
 8003086:	2601      	movs	r6, #1
 8003088:	e774      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800308a:	4b9f      	ldr	r3, [pc, #636]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x868>)
 800308c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800308e:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003094:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003096:	f7fe fa7b 	bl	8001590 <HAL_GetTick>
 800309a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800309c:	e006      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309e:	f7fe fa77 	bl	8001590 <HAL_GetTick>
 80030a2:	eba0 0008 	sub.w	r0, r0, r8
 80030a6:	2864      	cmp	r0, #100	; 0x64
 80030a8:	f200 8196 	bhi.w	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x938>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	05da      	lsls	r2, r3, #23
 80030b0:	d5f5      	bpl.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    if(ret == HAL_OK)
 80030b2:	2d00      	cmp	r5, #0
 80030b4:	f040 823d 	bne.w	8003532 <HAL_RCCEx_PeriphCLKConfig+0xa92>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030b8:	4a92      	ldr	r2, [pc, #584]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80030ba:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80030be:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80030c0:	4059      	eors	r1, r3
 80030c2:	f411 7f40 	tst.w	r1, #768	; 0x300
 80030c6:	d00b      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030c8:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ca:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030cc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80030d0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80030d4:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030d6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80030d8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80030dc:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80030de:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80030e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e4:	f000 8207 	beq.w	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80030ec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80030f0:	f000 8215 	beq.w	800351e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80030f4:	4983      	ldr	r1, [pc, #524]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80030f6:	690a      	ldr	r2, [r1, #16]
 80030f8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80030fc:	610a      	str	r2, [r1, #16]
 80030fe:	4a81      	ldr	r2, [pc, #516]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003106:	430b      	orrs	r3, r1
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	e5f2      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800310e:	462e      	mov	r6, r5
 8003110:	e714      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003112:	462e      	mov	r6, r5
 8003114:	e633      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003116:	462e      	mov	r6, r5
 8003118:	e5e9      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800311a:	462e      	mov	r6, r5
 800311c:	e64e      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800311e:	462e      	mov	r6, r5
 8003120:	e66d      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003122:	462e      	mov	r6, r5
 8003124:	e68b      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8003126:	462e      	mov	r6, r5
 8003128:	e5b5      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800312a:	462e      	mov	r6, r5
 800312c:	e593      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800312e:	462e      	mov	r6, r5
 8003130:	e5c1      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8003132:	462e      	mov	r6, r5
 8003134:	e6a3      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003136:	462e      	mov	r6, r5
 8003138:	e6c1      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800313a:	462e      	mov	r6, r5
 800313c:	e6ec      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 800313e:	2601      	movs	r6, #1
 8003140:	4635      	mov	r5, r6
 8003142:	e715      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003144:	486f      	ldr	r0, [pc, #444]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003146:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003148:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800314c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800314e:	2d00      	cmp	r5, #0
 8003150:	f47f af57 	bne.w	8003002 <HAL_RCCEx_PeriphCLKConfig+0x562>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003154:	4d6b      	ldr	r5, [pc, #428]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003156:	1c30      	adds	r0, r6, #0
 8003158:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800315a:	bf18      	it	ne
 800315c:	2001      	movne	r0, #1
 800315e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003162:	430a      	orrs	r2, r1
 8003164:	656a      	str	r2, [r5, #84]	; 0x54
 8003166:	e70a      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003168:	4966      	ldr	r1, [pc, #408]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800316a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800316c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003170:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003172:	2d00      	cmp	r5, #0
 8003174:	f43f aef5 	beq.w	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003178:	462e      	mov	r6, r5
 800317a:	e6f9      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800317c:	2101      	movs	r1, #1
 800317e:	1d20      	adds	r0, r4, #4
 8003180:	f7ff fb96 	bl	80028b0 <RCCEx_PLL2_Config>
 8003184:	4605      	mov	r5, r0
 8003186:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003188:	2d00      	cmp	r5, #0
 800318a:	d1c6      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800318c:	e60f      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800318e:	495d      	ldr	r1, [pc, #372]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003190:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003192:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003196:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003198:	2d00      	cmp	r5, #0
 800319a:	d1bc      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800319c:	e5a0      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800319e:	2101      	movs	r1, #1
 80031a0:	1d20      	adds	r0, r4, #4
 80031a2:	f7ff fb85 	bl	80028b0 <RCCEx_PLL2_Config>
 80031a6:	4605      	mov	r5, r0
 80031a8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80031aa:	2d00      	cmp	r5, #0
 80031ac:	d1b7      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80031ae:	e61e      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031b0:	2101      	movs	r1, #1
 80031b2:	1d20      	adds	r0, r4, #4
 80031b4:	f7ff fb7c 	bl	80028b0 <RCCEx_PLL2_Config>
 80031b8:	4605      	mov	r5, r0
 80031ba:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80031bc:	2d00      	cmp	r5, #0
 80031be:	d1a8      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80031c0:	e5d6      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	f47f af1d 	bne.w	8003002 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80031c8:	e7c1      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031ca:	2101      	movs	r1, #1
 80031cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80031d0:	f7ff fbea 	bl	80029a8 <RCCEx_PLL3_Config>
 80031d4:	4605      	mov	r5, r0
 80031d6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80031d8:	2d00      	cmp	r5, #0
 80031da:	d1a4      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x686>
 80031dc:	e553      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031de:	4949      	ldr	r1, [pc, #292]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80031e0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80031e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031e6:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80031e8:	2d00      	cmp	r5, #0
 80031ea:	d142      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80031ec:	4945      	ldr	r1, [pc, #276]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80031ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80031f0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80031f2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80031f6:	4302      	orrs	r2, r0
 80031f8:	64ca      	str	r2, [r1, #76]	; 0x4c
 80031fa:	e4ee      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031fc:	2102      	movs	r1, #2
 80031fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003202:	f7ff fbd1 	bl	80029a8 <RCCEx_PLL3_Config>
 8003206:	4605      	mov	r5, r0
 8003208:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800320a:	2d00      	cmp	r5, #0
 800320c:	d189      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800320e:	e60e      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003210:	2102      	movs	r1, #2
 8003212:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003216:	f7ff fbc7 	bl	80029a8 <RCCEx_PLL3_Config>
 800321a:	4605      	mov	r5, r0
 800321c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800321e:	2d00      	cmp	r5, #0
 8003220:	d187      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8003222:	e624      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003224:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8003226:	2d00      	cmp	r5, #0
 8003228:	d139      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800322a:	4936      	ldr	r1, [pc, #216]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800322c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800322e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003230:	f022 0207 	bic.w	r2, r2, #7
 8003234:	4302      	orrs	r2, r0
 8003236:	650a      	str	r2, [r1, #80]	; 0x50
 8003238:	e45d      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800323a:	2101      	movs	r1, #1
 800323c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003240:	f7ff fbb2 	bl	80029a8 <RCCEx_PLL3_Config>
 8003244:	4605      	mov	r5, r0
 8003246:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003248:	2d00      	cmp	r5, #0
 800324a:	f47f af6e 	bne.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x68a>
 800324e:	e4fb      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003250:	492c      	ldr	r1, [pc, #176]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003252:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003254:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003258:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800325a:	2d00      	cmp	r5, #0
 800325c:	f47f af67 	bne.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003260:	e6da      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x578>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003262:	2102      	movs	r1, #2
 8003264:	1d20      	adds	r0, r4, #4
 8003266:	f7ff fb23 	bl	80028b0 <RCCEx_PLL2_Config>
 800326a:	4605      	mov	r5, r0
 800326c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800326e:	2d00      	cmp	r5, #0
 8003270:	d0bc      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003272:	462e      	mov	r6, r5
 8003274:	e4b1      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003276:	2102      	movs	r1, #2
 8003278:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800327c:	f7ff fb94 	bl	80029a8 <RCCEx_PLL3_Config>
 8003280:	4605      	mov	r5, r0
 8003282:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003284:	2d00      	cmp	r5, #0
 8003286:	f47f af56 	bne.w	8003136 <HAL_RCCEx_PeriphCLKConfig+0x696>
 800328a:	e610      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800328c:	2100      	movs	r1, #0
 800328e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003292:	f7ff fb89 	bl	80029a8 <RCCEx_PLL3_Config>
 8003296:	4605      	mov	r5, r0
 8003298:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800329a:	2d00      	cmp	r5, #0
 800329c:	d0c5      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800329e:	462e      	mov	r6, r5
 80032a0:	e429      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a2:	4918      	ldr	r1, [pc, #96]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x864>)
      break;
 80032a4:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80032a8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80032ac:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80032ae:	e7ba      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x786>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032b0:	2100      	movs	r1, #0
 80032b2:	1d20      	adds	r0, r4, #4
 80032b4:	f7ff fafc 	bl	80028b0 <RCCEx_PLL2_Config>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	4605      	mov	r5, r0
      break;
 80032bc:	e7b3      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x786>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032be:	2102      	movs	r1, #2
 80032c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032c4:	f7ff fb70 	bl	80029a8 <RCCEx_PLL3_Config>
 80032c8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80032cc:	b100      	cbz	r0, 80032d0 <HAL_RCCEx_PeriphCLKConfig+0x830>
          status = HAL_ERROR;
 80032ce:	2601      	movs	r6, #1
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	e5fc      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032d4:	2102      	movs	r1, #2
 80032d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032da:	f7ff fb65 	bl	80029a8 <RCCEx_PLL3_Config>
 80032de:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80032e2:	b100      	cbz	r0, 80032e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
        status = HAL_ERROR;
 80032e4:	2601      	movs	r6, #1
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	e5ff      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032ea:	2100      	movs	r1, #0
 80032ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032f0:	f7ff fb5a 	bl	80029a8 <RCCEx_PLL3_Config>
 80032f4:	4605      	mov	r5, r0
 80032f6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80032f8:	2d00      	cmp	r5, #0
 80032fa:	f43f ac34 	beq.w	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80032fe:	462e      	mov	r6, r5
 8003300:	e439      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8003302:	bf00      	nop
 8003304:	58024400 	.word	0x58024400
 8003308:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800330c:	2100      	movs	r1, #0
 800330e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003312:	f7ff fb49 	bl	80029a8 <RCCEx_PLL3_Config>
 8003316:	4605      	mov	r5, r0
 8003318:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800331a:	2d00      	cmp	r5, #0
 800331c:	f43f ac02 	beq.w	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003320:	462e      	mov	r6, r5
 8003322:	e406      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003324:	2100      	movs	r1, #0
 8003326:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800332a:	f7ff fb3d 	bl	80029a8 <RCCEx_PLL3_Config>
 800332e:	4605      	mov	r5, r0
 8003330:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003332:	2d00      	cmp	r5, #0
 8003334:	f43f ac39 	beq.w	8002baa <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8003338:	462e      	mov	r6, r5
 800333a:	e43e      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800333c:	2100      	movs	r1, #0
 800333e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003342:	f7ff fb31 	bl	80029a8 <RCCEx_PLL3_Config>
 8003346:	4605      	mov	r5, r0
 8003348:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800334a:	2d00      	cmp	r5, #0
 800334c:	f43f ac5e 	beq.w	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003350:	462e      	mov	r6, r5
 8003352:	e462      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003354:	2102      	movs	r1, #2
 8003356:	3004      	adds	r0, #4
 8003358:	f7ff faaa 	bl	80028b0 <RCCEx_PLL2_Config>
 800335c:	4606      	mov	r6, r0
 800335e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003360:	2e00      	cmp	r6, #0
 8003362:	f47f abba 	bne.w	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003368:	f7ff bbb0 	b.w	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800336c:	4978      	ldr	r1, [pc, #480]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800336e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003370:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003374:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8003376:	f7ff bbf3 	b.w	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337a:	4975      	ldr	r1, [pc, #468]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800337c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800337e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003382:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8003384:	e43f      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003386:	2102      	movs	r1, #2
 8003388:	3024      	adds	r0, #36	; 0x24
 800338a:	f7ff fb0d 	bl	80029a8 <RCCEx_PLL3_Config>
 800338e:	4606      	mov	r6, r0
      break;
 8003390:	e7e5      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003392:	496f      	ldr	r1, [pc, #444]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003394:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003396:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800339a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800339c:	f7ff bbbf 	b.w	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a0:	496b      	ldr	r1, [pc, #428]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80033a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80033a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033a8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80033aa:	f7ff bbfb 	b.w	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ae:	1d20      	adds	r0, r4, #4
 80033b0:	f7ff fa7e 	bl	80028b0 <RCCEx_PLL2_Config>
 80033b4:	4605      	mov	r5, r0
 80033b6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80033b8:	2d00      	cmp	r5, #0
 80033ba:	f47f aebe 	bne.w	800313a <HAL_RCCEx_PeriphCLKConfig+0x69a>
 80033be:	e63e      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c0:	4963      	ldr	r1, [pc, #396]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80033c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80033c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033c8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80033ca:	2d00      	cmp	r5, #0
 80033cc:	f47f ae9f 	bne.w	800310e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80033d0:	e647      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      ret = HAL_ERROR;
 80033d2:	2601      	movs	r6, #1
 80033d4:	4635      	mov	r5, r6
 80033d6:	e4d2      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 80033d8:	2603      	movs	r6, #3
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	4635      	mov	r5, r6
 80033de:	e489      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80033e0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80033e4:	f43f ad20 	beq.w	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80033e8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80033ec:	f43f ad1c 	beq.w	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80033f0:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80033f4:	f43f ad18 	beq.w	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 80033f8:	2601      	movs	r6, #1
 80033fa:	4635      	mov	r5, r6
 80033fc:	e51f      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80033fe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003402:	f43f ad31 	beq.w	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003406:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 800340a:	f43f ad2d 	beq.w	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800340e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003412:	f43f ad29 	beq.w	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 8003416:	2601      	movs	r6, #1
 8003418:	4635      	mov	r5, r6
 800341a:	e530      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800341c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003420:	f43f ad42 	beq.w	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003424:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8003428:	f43f ad3e 	beq.w	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800342c:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8003430:	f43f ad3a 	beq.w	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 8003434:	2601      	movs	r6, #1
 8003436:	4635      	mov	r5, r6
 8003438:	e541      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 800343a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800343e:	f43f ac00 	beq.w	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003442:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003446:	f43f abfc 	beq.w	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800344a:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800344e:	f43f abf8 	beq.w	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 8003452:	2601      	movs	r6, #1
 8003454:	4635      	mov	r5, r6
 8003456:	f7ff bbfe 	b.w	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 800345a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800345e:	f43f ac0f 	beq.w	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8003462:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003466:	f43f ac0b 	beq.w	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800346a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800346e:	f43f ac07 	beq.w	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 8003472:	2601      	movs	r6, #1
 8003474:	4635      	mov	r5, r6
 8003476:	e40e      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003478:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800347c:	f43f ab70 	beq.w	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003480:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003484:	f43f ab6c 	beq.w	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 8003488:	2601      	movs	r6, #1
 800348a:	4635      	mov	r5, r6
 800348c:	f7ff bb73 	b.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003490:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8003494:	f43f ab86 	beq.w	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003498:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800349c:	f43f ab82 	beq.w	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 80034a0:	2601      	movs	r6, #1
 80034a2:	4635      	mov	r5, r6
 80034a4:	f7ff bb89 	b.w	8002bba <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 80034a8:	2ac0      	cmp	r2, #192	; 0xc0
 80034aa:	f43f ab38 	beq.w	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80034ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80034b2:	f43f ab34 	beq.w	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 80034b6:	2601      	movs	r6, #1
 80034b8:	4635      	mov	r5, r6
 80034ba:	f7ff bb3a 	b.w	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80034be:	b9ba      	cbnz	r2, 80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c0:	4823      	ldr	r0, [pc, #140]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80034c2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80034c4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80034c8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80034ca:	f7ff baff 	b.w	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80034ce:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80034d2:	f43f ab98 	beq.w	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034d6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80034da:	f43f ab94 	beq.w	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 80034de:	2601      	movs	r6, #1
 80034e0:	4635      	mov	r5, r6
 80034e2:	f7ff bb9a 	b.w	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	f43f ae7e 	beq.w	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80034ec:	f7ff bb73 	b.w	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 80034f0:	2601      	movs	r6, #1
 80034f2:	f7ff baf2 	b.w	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80034f6:	f7fe f84b 	bl	8001590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034fa:	4f15      	ldr	r7, [pc, #84]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
        tickstart = HAL_GetTick();
 80034fc:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003502:	e006      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xa72>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe f844 	bl	8001590 <HAL_GetTick>
 8003508:	eba0 0009 	sub.w	r0, r0, r9
 800350c:	4540      	cmp	r0, r8
 800350e:	f63f af63 	bhi.w	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x938>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003514:	079b      	lsls	r3, r3, #30
 8003516:	d5f5      	bpl.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xa64>
 8003518:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800351c:	e5e4      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351e:	480c      	ldr	r0, [pc, #48]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003520:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0xab4>)
 8003522:	6901      	ldr	r1, [r0, #16]
 8003524:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8003528:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800352c:	430a      	orrs	r2, r1
 800352e:	6102      	str	r2, [r0, #16]
 8003530:	e5e5      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8003532:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003534:	462e      	mov	r6, r5
 8003536:	f7ff bbdd 	b.w	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 800353a:	2601      	movs	r6, #1
 800353c:	4635      	mov	r5, r6
 800353e:	e43d      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 8003540:	2601      	movs	r6, #1
 8003542:	4635      	mov	r5, r6
 8003544:	e45b      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 8003546:	2601      	movs	r6, #1
 8003548:	4635      	mov	r5, r6
 800354a:	f7ff bbd0 	b.w	8002cee <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800354e:	bf00      	nop
 8003550:	58024400 	.word	0x58024400
 8003554:	00ffffcf 	.word	0x00ffffcf

08003558 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8003558:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800355a:	f7fe ffa1 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003560:	4a05      	ldr	r2, [pc, #20]	; (8003578 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003568:	5cd3      	ldrb	r3, [r2, r3]
 800356a:	f003 031f 	and.w	r3, r3, #31
}
 800356e:	40d8      	lsrs	r0, r3
 8003570:	bd08      	pop	{r3, pc}
 8003572:	bf00      	nop
 8003574:	58024400 	.word	0x58024400
 8003578:	08007190 	.word	0x08007190

0800357c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800357c:	4a46      	ldr	r2, [pc, #280]	; (8003698 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 800357e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003580:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003582:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003584:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003586:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800358a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800358c:	2b00      	cmp	r3, #0
 800358e:	d059      	beq.n	8003644 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003590:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003594:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003598:	f004 0403 	and.w	r4, r4, #3
 800359c:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80035a0:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80035a4:	2c01      	cmp	r4, #1
 80035a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035aa:	ee06 1a90 	vmov	s13, r1
 80035ae:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80035b2:	d002      	beq.n	80035ba <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 80035b4:	d34e      	bcc.n	8003654 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80035b6:	2c02      	cmp	r4, #2
 80035b8:	d049      	beq.n	800364e <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035ba:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800369c <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 80035be:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80035c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80035c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80035d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035d4:	ee77 7a26 	vadd.f32	s15, s14, s13
 80035d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80035dc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80035e0:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 80035e2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80035e6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80035e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80035ec:	ee06 3a90 	vmov	s13, r3
 80035f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80035f4:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80035f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80035fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035fe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003602:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003606:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003608:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800360c:	ee06 3a90 	vmov	s13, r3
 8003610:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003614:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003618:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800361c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003620:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003624:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003626:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800362a:	ee07 3a10 	vmov	s14, r3
 800362e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003632:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003636:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800363a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800363e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8003642:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003644:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003648:	6083      	str	r3, [r0, #8]
}
 800364a:	bc30      	pop	{r4, r5}
 800364c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800364e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80036a0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8003652:	e7b4      	b.n	80035be <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003654:	6813      	ldr	r3, [r2, #0]
 8003656:	069b      	lsls	r3, r3, #26
 8003658:	d51a      	bpl.n	8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800365a:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800365c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003660:	4910      	ldr	r1, [pc, #64]	; (80036a4 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8003662:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003666:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003668:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800366a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800366e:	ee07 1a10 	vmov	s14, r1
 8003672:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003676:	ee07 3a10 	vmov	s14, r3
 800367a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800367e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8003682:	ee76 7a26 	vadd.f32	s15, s12, s13
 8003686:	ee77 7a85 	vadd.f32	s15, s15, s10
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	e7a7      	b.n	80035e0 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003690:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80036a8 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8003694:	e793      	b.n	80035be <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8003696:	bf00      	nop
 8003698:	58024400 	.word	0x58024400
 800369c:	4a742400 	.word	0x4a742400
 80036a0:	4c189680 	.word	0x4c189680
 80036a4:	03d09000 	.word	0x03d09000
 80036a8:	4c742400 	.word	0x4c742400

080036ac <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ac:	4a46      	ldr	r2, [pc, #280]	; (80037c8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 80036ae:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036b0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80036b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80036b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80036b6:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036ba:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d059      	beq.n	8003774 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036c0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80036c4:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036c8:	f004 0403 	and.w	r4, r4, #3
 80036cc:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036d0:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80036d4:	2c01      	cmp	r4, #1
 80036d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036da:	ee06 1a90 	vmov	s13, r1
 80036de:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80036e2:	d002      	beq.n	80036ea <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 80036e4:	d34e      	bcc.n	8003784 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80036e6:	2c02      	cmp	r4, #2
 80036e8:	d049      	beq.n	800377e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036ea:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80037cc <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 80036ee:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80036f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80036f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003704:	ee77 7a26 	vadd.f32	s15, s14, s13
 8003708:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800370c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003710:	4a2d      	ldr	r2, [pc, #180]	; (80037c8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8003712:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003716:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003718:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800371c:	ee06 3a90 	vmov	s13, r3
 8003720:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8003724:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003726:	ee76 6a86 	vadd.f32	s13, s13, s12
 800372a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800372e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003732:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003736:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003738:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800373c:	ee06 3a90 	vmov	s13, r3
 8003740:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003744:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800374c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003750:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003754:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003756:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800375a:	ee07 3a10 	vmov	s14, r3
 800375e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003762:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800376a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800376e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8003772:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003774:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003778:	6083      	str	r3, [r0, #8]
}
 800377a:	bc30      	pop	{r4, r5}
 800377c:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800377e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8003782:	e7b4      	b.n	80036ee <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003784:	6813      	ldr	r3, [r2, #0]
 8003786:	069b      	lsls	r3, r3, #26
 8003788:	d51a      	bpl.n	80037c0 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800378a:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800378c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003790:	4910      	ldr	r1, [pc, #64]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8003792:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003796:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003798:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379e:	ee07 1a10 	vmov	s14, r1
 80037a2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80037a6:	ee07 3a10 	vmov	s14, r3
 80037aa:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80037ae:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80037b2:	ee76 7a26 	vadd.f32	s15, s12, s13
 80037b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80037ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037be:	e7a7      	b.n	8003710 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037c0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80037c4:	e793      	b.n	80036ee <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80037c6:	bf00      	nop
 80037c8:	58024400 	.word	0x58024400
 80037cc:	4a742400 	.word	0x4a742400
 80037d0:	4c189680 	.word	0x4c189680
 80037d4:	03d09000 	.word	0x03d09000
 80037d8:	4c742400 	.word	0x4c742400

080037dc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	2800      	cmp	r0, #0
 80037de:	d076      	beq.n	80038ce <HAL_TIM_Base_Init+0xf2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80037e4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037ea:	4604      	mov	r4, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d069      	beq.n	80038c4 <HAL_TIM_Base_Init+0xe8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f0:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80037f2:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f4:	493c      	ldr	r1, [pc, #240]	; (80038e8 <HAL_TIM_Base_Init+0x10c>)
 80037f6:	4e3d      	ldr	r6, [pc, #244]	; (80038ec <HAL_TIM_Base_Init+0x110>)
 80037f8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80037fc:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003804:	eba2 0606 	sub.w	r6, r2, r6
  tmpcr1 = TIMx->CR1;
 8003808:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800380a:	fab1 f181 	clz	r1, r1
 800380e:	fab6 f686 	clz	r6, r6
 8003812:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8003816:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800381a:	d018      	beq.n	800384e <HAL_TIM_Base_Init+0x72>
 800381c:	b9b9      	cbnz	r1, 800384e <HAL_TIM_Base_Init+0x72>
 800381e:	4834      	ldr	r0, [pc, #208]	; (80038f0 <HAL_TIM_Base_Init+0x114>)
 8003820:	4282      	cmp	r2, r0
 8003822:	d014      	beq.n	800384e <HAL_TIM_Base_Init+0x72>
 8003824:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003828:	4282      	cmp	r2, r0
 800382a:	d010      	beq.n	800384e <HAL_TIM_Base_Init+0x72>
 800382c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003830:	4282      	cmp	r2, r0
 8003832:	d04e      	beq.n	80038d2 <HAL_TIM_Base_Init+0xf6>
 8003834:	2e00      	cmp	r6, #0
 8003836:	d14c      	bne.n	80038d2 <HAL_TIM_Base_Init+0xf6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003838:	4d2e      	ldr	r5, [pc, #184]	; (80038f4 <HAL_TIM_Base_Init+0x118>)
 800383a:	482f      	ldr	r0, [pc, #188]	; (80038f8 <HAL_TIM_Base_Init+0x11c>)
 800383c:	4282      	cmp	r2, r0
 800383e:	bf18      	it	ne
 8003840:	42aa      	cmpne	r2, r5
 8003842:	d008      	beq.n	8003856 <HAL_TIM_Base_Init+0x7a>
 8003844:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003848:	4282      	cmp	r2, r0
 800384a:	d108      	bne.n	800385e <HAL_TIM_Base_Init+0x82>
 800384c:	e003      	b.n	8003856 <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003852:	68a0      	ldr	r0, [r4, #8]
 8003854:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800385a:	6920      	ldr	r0, [r4, #16]
 800385c:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800385e:	69a0      	ldr	r0, [r4, #24]
 8003860:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003864:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003866:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003868:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800386a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800386c:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800386e:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003870:	b951      	cbnz	r1, 8003888 <HAL_TIM_Base_Init+0xac>
 8003872:	b94e      	cbnz	r6, 8003888 <HAL_TIM_Base_Init+0xac>
 8003874:	491f      	ldr	r1, [pc, #124]	; (80038f4 <HAL_TIM_Base_Init+0x118>)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_TIM_Base_Init+0x11c>)
 8003878:	429a      	cmp	r2, r3
 800387a:	bf18      	it	ne
 800387c:	428a      	cmpne	r2, r1
 800387e:	d003      	beq.n	8003888 <HAL_TIM_Base_Init+0xac>
 8003880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003884:	429a      	cmp	r2, r3
 8003886:	d101      	bne.n	800388c <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003888:	6963      	ldr	r3, [r4, #20]
 800388a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800388c:	2301      	movs	r3, #1
  return HAL_OK;
 800388e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003890:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003892:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003896:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800389a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800389e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80038a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80038a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80038b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80038ba:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80038be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80038c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80038c8:	f7fd fd42 	bl	8001350 <HAL_TIM_Base_MspInit>
 80038cc:	e790      	b.n	80037f0 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
}
 80038d0:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	480a      	ldr	r0, [pc, #40]	; (80038fc <HAL_TIM_Base_Init+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038d8:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038da:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 80038dc:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e0:	d0b9      	beq.n	8003856 <HAL_TIM_Base_Init+0x7a>
 80038e2:	2e00      	cmp	r6, #0
 80038e4:	d1b7      	bne.n	8003856 <HAL_TIM_Base_Init+0x7a>
 80038e6:	e7a7      	b.n	8003838 <HAL_TIM_Base_Init+0x5c>
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40010400 	.word	0x40010400
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400
 80038fc:	40000c00 	.word	0x40000c00

08003900 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003900:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 8003908:	2001      	movs	r0, #1
 800390a:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390e:	6802      	ldr	r2, [r0, #0]
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_TIM_Base_Start+0x34>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003912:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003916:	6891      	ldr	r1, [r2, #8]
 8003918:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391a:	2b06      	cmp	r3, #6
 800391c:	d008      	beq.n	8003930 <HAL_TIM_Base_Start+0x30>
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003922:	d005      	beq.n	8003930 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8003924:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8003926:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4770      	bx	lr
  return HAL_OK;
 8003930:	2000      	movs	r0, #0
}
 8003932:	4770      	bx	lr
 8003934:	00010007 	.word	0x00010007

08003938 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003938:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	f000 8081 	beq.w	8003a44 <HAL_TIM_ConfigClockSource+0x10c>
 8003942:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR;
 8003946:	6813      	ldr	r3, [r2, #0]
{
 8003948:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800394a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800394e:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8003950:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003952:	4c56      	ldr	r4, [pc, #344]	; (8003aac <HAL_TIM_ConfigClockSource+0x174>)
  __HAL_LOCK(htim);
 8003954:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003958:	4004      	ands	r4, r0
  switch (sClockSourceConfig->ClockSource)
 800395a:	6808      	ldr	r0, [r1, #0]
 800395c:	2860      	cmp	r0, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800395e:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003960:	d072      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0x110>
 8003962:	d91f      	bls.n	80039a4 <HAL_TIM_ConfigClockSource+0x6c>
 8003964:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 8003968:	f000 808a 	beq.w	8003a80 <HAL_TIM_ConfigClockSource+0x148>
 800396c:	f200 8090 	bhi.w	8003a90 <HAL_TIM_ConfigClockSource+0x158>
 8003970:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003974:	d03d      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0xba>
 8003976:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 800397a:	f000 8081 	beq.w	8003a80 <HAL_TIM_ConfigClockSource+0x148>
 800397e:	2870      	cmp	r0, #112	; 0x70
 8003980:	d12e      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003982:	68cc      	ldr	r4, [r1, #12]
 8003984:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 8003988:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 800398c:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800398e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003992:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003996:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003998:	6099      	str	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800399a:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800399c:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80039a0:	6099      	str	r1, [r3, #8]
      break;
 80039a2:	e01d      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 80039a4:	2820      	cmp	r0, #32
 80039a6:	d06b      	beq.n	8003a80 <HAL_TIM_ConfigClockSource+0x148>
 80039a8:	d967      	bls.n	8003a7a <HAL_TIM_ConfigClockSource+0x142>
 80039aa:	2840      	cmp	r0, #64	; 0x40
 80039ac:	d032      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0xdc>
 80039ae:	2850      	cmp	r0, #80	; 0x50
 80039b0:	d178      	bne.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
  tmpccer = TIMx->CCER;
 80039b2:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b4:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b6:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b8:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039bc:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c0:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80039c2:	4334      	orrs	r4, r6
  tmpsmcr &= ~TIM_SMCR_TS;
 80039c4:	493a      	ldr	r1, [pc, #232]	; (8003ab0 <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c8:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ca:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039ce:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80039d2:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d4:	621c      	str	r4, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80039d6:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039d8:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039da:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80039de:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 80039e0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80039e2:	2101      	movs	r1, #1
  return HAL_OK;
 80039e4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80039e6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80039ea:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80039ee:	bcf0      	pop	{r4, r5, r6, r7}
 80039f0:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f2:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80039f6:	68cc      	ldr	r4, [r1, #12]
 80039f8:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80039fc:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039fe:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a02:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a06:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8003a08:	6099      	str	r1, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a0a:	6899      	ldr	r1, [r3, #8]
 8003a0c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003a10:	6099      	str	r1, [r3, #8]
      break;
 8003a12:	e7e5      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0xa8>
  tmpccer = TIMx->CCER;
 8003a14:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a16:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a18:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a1a:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1e:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a22:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003a24:	4334      	orrs	r4, r6
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a26:	4922      	ldr	r1, [pc, #136]	; (8003ab0 <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a28:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2a:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a2c:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a30:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003a34:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a36:	621c      	str	r4, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003a38:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3a:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a3c:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003a40:	6099      	str	r1, [r3, #8]
 8003a42:	e7cd      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0xa8>
  __HAL_LOCK(htim);
 8003a44:	2002      	movs	r0, #2
}
 8003a46:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a48:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a4a:	684e      	ldr	r6, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4c:	f025 0510 	bic.w	r5, r5, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a50:	68cf      	ldr	r7, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a52:	4917      	ldr	r1, [pc, #92]	; (8003ab0 <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a54:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a56:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 8003a58:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a5a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a5e:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a62:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a66:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003a6a:	619c      	str	r4, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a6c:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003a6e:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a70:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a72:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003a76:	6099      	str	r1, [r3, #8]
 8003a78:	e7b2      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8003a7a:	b108      	cbz	r0, 8003a80 <HAL_TIM_ConfigClockSource+0x148>
 8003a7c:	2810      	cmp	r0, #16
 8003a7e:	d1af      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0xa8>
  tmpsmcr = TIMx->SMCR;
 8003a80:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a82:	f040 0007 	orr.w	r0, r0, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a86:	490a      	ldr	r1, [pc, #40]	; (8003ab0 <HAL_TIM_ConfigClockSource+0x178>)
 8003a88:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8a:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8003a8c:	6098      	str	r0, [r3, #8]
 8003a8e:	e7a7      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8003a90:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <HAL_TIM_ConfigClockSource+0x17c>)
 8003a92:	4288      	cmp	r0, r1
 8003a94:	d0f4      	beq.n	8003a80 <HAL_TIM_ConfigClockSource+0x148>
 8003a96:	3110      	adds	r1, #16
 8003a98:	4288      	cmp	r0, r1
 8003a9a:	d0f1      	beq.n	8003a80 <HAL_TIM_ConfigClockSource+0x148>
 8003a9c:	3920      	subs	r1, #32
 8003a9e:	4288      	cmp	r0, r1
 8003aa0:	d19e      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0xa8>
 8003aa2:	e7ed      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x148>
 8003aa4:	2830      	cmp	r0, #48	; 0x30
 8003aa6:	d19b      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0xa8>
 8003aa8:	e7ea      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x148>
 8003aaa:	bf00      	nop
 8003aac:	ffce0088 	.word	0xffce0088
 8003ab0:	ffcfff8f 	.word	0xffcfff8f
 8003ab4:	00100030 	.word	0x00100030

08003ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d045      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac0:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ac2:	4a24      	ldr	r2, [pc, #144]	; (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 8003ac4:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ac6:	4e24      	ldr	r6, [pc, #144]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 8003aca:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003acc:	4293      	cmp	r3, r2
 8003ace:	bf18      	it	ne
 8003ad0:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad2:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003ad6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ada:	bf08      	it	eq
 8003adc:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8003ade:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae0:	bf18      	it	ne
 8003ae2:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 8003ae4:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae6:	d103      	bne.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ae8:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aec:	684a      	ldr	r2, [r1, #4]
 8003aee:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af0:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af6:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af8:	4293      	cmp	r3, r2
 8003afa:	bf18      	it	ne
 8003afc:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8003b00:	f8df c064 	ldr.w	ip, [pc, #100]	; 8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b04:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b08:	4f15      	ldr	r7, [pc, #84]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2201      	moveq	r2, #1
 8003b0e:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8003b10:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b12:	4563      	cmp	r3, ip
 8003b14:	bf08      	it	eq
 8003b16:	f042 0201 	orreq.w	r2, r2, #1
 8003b1a:	4c12      	ldr	r4, [pc, #72]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b1c:	42bb      	cmp	r3, r7
 8003b1e:	bf08      	it	eq
 8003b20:	f042 0201 	orreq.w	r2, r2, #1
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	bf08      	it	eq
 8003b28:	f042 0201 	orreq.w	r2, r2, #1
 8003b2c:	b902      	cbnz	r2, 8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8003b2e:	b126      	cbz	r6, 8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b30:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b32:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b36:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b38:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003b3a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8003b3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003b42:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	bcf0      	pop	{r4, r5, r6, r7}
 8003b4a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003b4c:	2202      	movs	r2, #2
}
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40010400 	.word	0x40010400
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	40001800 	.word	0x40001800
 8003b68:	40000800 	.word	0x40000800

08003b6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b70:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b72:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8003b76:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d14a      	bne.n	8003c12 <HAL_UART_Transmit+0xa6>
 8003b7c:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7e:	2900      	cmp	r1, #0
 8003b80:	d04b      	beq.n	8003c1a <HAL_UART_Transmit+0xae>
 8003b82:	fab2 f782 	clz	r7, r2
 8003b86:	9201      	str	r2, [sp, #4]
 8003b88:	097f      	lsrs	r7, r7, #5
 8003b8a:	2f00      	cmp	r7, #0
 8003b8c:	d145      	bne.n	8003c1a <HAL_UART_Transmit+0xae>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8003b8e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003b92:	4605      	mov	r5, r0
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d03c      	beq.n	8003c12 <HAL_UART_Transmit+0xa6>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b98:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8003b9a:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 8003ba0:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ba8:	f7fd fcf2 	bl	8001590 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bac:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8003bae:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8003bb0:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8003bb6:	f8a5 2054 	strh.w	r2, [r5, #84]	; 0x54
    huart->TxXferCount = Size;
 8003bba:	f8a5 2056 	strh.w	r2, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bbe:	f000 8089 	beq.w	8003cd4 <HAL_UART_Transmit+0x168>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 8003bc2:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 8003bca:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8003bcc:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 8003bd0:	b1ab      	cbz	r3, 8003bfe <HAL_UART_Transmit+0x92>
 8003bd2:	1c71      	adds	r1, r6, #1
 8003bd4:	d125      	bne.n	8003c22 <HAL_UART_Transmit+0xb6>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd6:	69e2      	ldr	r2, [r4, #28]
 8003bd8:	0612      	lsls	r2, r2, #24
 8003bda:	d5fc      	bpl.n	8003bd6 <HAL_UART_Transmit+0x6a>
      if (pdata8bits == NULL)
 8003bdc:	f1b9 0f00 	cmp.w	r9, #0
 8003be0:	d035      	beq.n	8003c4e <HAL_UART_Transmit+0xe2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8003be6:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8003be8:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003bf4:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e9      	bne.n	8003bd2 <HAL_UART_Transmit+0x66>
 8003bfe:	1c71      	adds	r1, r6, #1
 8003c00:	d12a      	bne.n	8003c58 <HAL_UART_Transmit+0xec>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c02:	69e3      	ldr	r3, [r4, #28]
 8003c04:	065a      	lsls	r2, r3, #25
 8003c06:	d5fc      	bpl.n	8003c02 <HAL_UART_Transmit+0x96>
    huart->gState = HAL_UART_STATE_READY;
 8003c08:	2320      	movs	r3, #32
    return HAL_OK;
 8003c0a:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8003c0c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    return HAL_OK;
 8003c10:	e000      	b.n	8003c14 <HAL_UART_Transmit+0xa8>
    return HAL_BUSY;
 8003c12:	2002      	movs	r0, #2
}
 8003c14:	b003      	add	sp, #12
 8003c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003c1a:	2001      	movs	r0, #1
}
 8003c1c:	b003      	add	sp, #12
 8003c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c22:	69e3      	ldr	r3, [r4, #28]
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	d4d9      	bmi.n	8003bdc <HAL_UART_Transmit+0x70>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fd fcb2 	bl	8001590 <HAL_GetTick>
 8003c2c:	eba0 0008 	sub.w	r0, r0, r8
 8003c30:	4286      	cmp	r6, r0
 8003c32:	d33c      	bcc.n	8003cae <HAL_UART_Transmit+0x142>
 8003c34:	fab6 f386 	clz	r3, r6
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d137      	bne.n	8003cae <HAL_UART_Transmit+0x142>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c3e:	682c      	ldr	r4, [r5, #0]
 8003c40:	6822      	ldr	r2, [r4, #0]
 8003c42:	0752      	lsls	r2, r2, #29
 8003c44:	d5c5      	bpl.n	8003bd2 <HAL_UART_Transmit+0x66>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c46:	69e2      	ldr	r2, [r4, #28]
 8003c48:	0510      	lsls	r0, r2, #20
 8003c4a:	d5c2      	bpl.n	8003bd2 <HAL_UART_Transmit+0x66>
 8003c4c:	e019      	b.n	8003c82 <HAL_UART_Transmit+0x116>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c4e:	f837 3b02 	ldrh.w	r3, [r7], #2
 8003c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c56:	e7c6      	b.n	8003be6 <HAL_UART_Transmit+0x7a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c58:	69e3      	ldr	r3, [r4, #28]
 8003c5a:	065b      	lsls	r3, r3, #25
 8003c5c:	d4d4      	bmi.n	8003c08 <HAL_UART_Transmit+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5e:	f7fd fc97 	bl	8001590 <HAL_GetTick>
 8003c62:	eba0 0008 	sub.w	r0, r0, r8
 8003c66:	fab6 f386 	clz	r3, r6
 8003c6a:	4286      	cmp	r6, r0
 8003c6c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8003c70:	d31d      	bcc.n	8003cae <HAL_UART_Transmit+0x142>
 8003c72:	b9e3      	cbnz	r3, 8003cae <HAL_UART_Transmit+0x142>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c74:	682c      	ldr	r4, [r5, #0]
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	0757      	lsls	r7, r2, #29
 8003c7a:	d5c0      	bpl.n	8003bfe <HAL_UART_Transmit+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c7c:	69e2      	ldr	r2, [r4, #28]
 8003c7e:	0510      	lsls	r0, r2, #20
 8003c80:	d5bd      	bpl.n	8003bfe <HAL_UART_Transmit+0x92>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c82:	f44f 6100 	mov.w	r1, #2048	; 0x800

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8003c86:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8003c88:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c8a:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c8c:	6821      	ldr	r1, [r4, #0]
 8003c8e:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8003c92:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	68a1      	ldr	r1, [r4, #8]
 8003c96:	f021 0101 	bic.w	r1, r1, #1
 8003c9a:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003c9c:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ca0:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ca8:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 8003cac:	e7b2      	b.n	8003c14 <HAL_UART_Transmit+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003cae:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8003cb0:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8003cb2:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 8003cb4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003cc6:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8003cca:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003cce:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8003cd2:	e79f      	b.n	8003c14 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd4:	692b      	ldr	r3, [r5, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f47f af73 	bne.w	8003bc2 <HAL_UART_Transmit+0x56>
 8003cdc:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 8003cde:	4699      	mov	r9, r3
 8003ce0:	e76f      	b.n	8003bc2 <HAL_UART_Transmit+0x56>
 8003ce2:	bf00      	nop

08003ce4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ce4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d13d      	bne.n	8003d68 <HAL_UART_Receive_IT+0x84>
    if ((pData == NULL) || (Size == 0U))
 8003cec:	2900      	cmp	r1, #0
 8003cee:	d039      	beq.n	8003d64 <HAL_UART_Receive_IT+0x80>
 8003cf0:	fab2 f382 	clz	r3, r2
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d134      	bne.n	8003d64 <HAL_UART_Receive_IT+0x80>
{
 8003cfa:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(huart);
 8003cfc:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8003d00:	2c01      	cmp	r4, #1
 8003d02:	d062      	beq.n	8003dca <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 8003d04:	6884      	ldr	r4, [r0, #8]
    __HAL_LOCK(huart);
 8003d06:	2501      	movs	r5, #1
    huart->pRxBuffPtr  = pData;
 8003d08:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003d0a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    __HAL_LOCK(huart);
 8003d0e:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize  = Size;
 8003d12:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003d16:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8003d1a:	66c3      	str	r3, [r0, #108]	; 0x6c
 8003d1c:	6801      	ldr	r1, [r0, #0]
 8003d1e:	6e45      	ldr	r5, [r0, #100]	; 0x64
    UART_MASK_COMPUTATION(huart);
 8003d20:	d024      	beq.n	8003d6c <HAL_UART_Receive_IT+0x88>
 8003d22:	2c00      	cmp	r4, #0
 8003d24:	d146      	bne.n	8003db4 <HAL_UART_Receive_IT+0xd0>
 8003d26:	6903      	ldr	r3, [r0, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d066      	beq.n	8003dfa <HAL_UART_Receive_IT+0x116>
 8003d2c:	237f      	movs	r3, #127	; 0x7f
 8003d2e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d32:	2400      	movs	r4, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d34:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d3a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3e:	688b      	ldr	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003d40:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003d4a:	d020      	beq.n	8003d8e <HAL_UART_Receive_IT+0xaa>
        huart->RxISR = UART_RxISR_8BIT;
 8003d4c:	4c31      	ldr	r4, [pc, #196]	; (8003e14 <HAL_UART_Receive_IT+0x130>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003d4e:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8003d50:	2300      	movs	r3, #0
 8003d52:	66c4      	str	r4, [r0, #108]	; 0x6c
 8003d54:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003d58:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return HAL_OK;
 8003d5c:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003d5e:	600a      	str	r2, [r1, #0]
}
 8003d60:	bc70      	pop	{r4, r5, r6}
 8003d62:	4770      	bx	lr
      return HAL_ERROR;
 8003d64:	2001      	movs	r0, #1
}
 8003d66:	4770      	bx	lr
    return HAL_BUSY;
 8003d68:	2002      	movs	r0, #2
 8003d6a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8003d6c:	6904      	ldr	r4, [r0, #16]
 8003d6e:	b374      	cbz	r4, 8003dce <HAL_UART_Receive_IT+0xea>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d70:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d72:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8003d76:	24ff      	movs	r4, #255	; 0xff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003d78:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d7c:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d80:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8003d82:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003d8c:	d1de      	bne.n	8003d4c <HAL_UART_Receive_IT+0x68>
 8003d8e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d8da      	bhi.n	8003d4c <HAL_UART_Receive_IT+0x68>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003d96:	4c20      	ldr	r4, [pc, #128]	; (8003e18 <HAL_UART_Receive_IT+0x134>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d98:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	66c4      	str	r4, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8003da2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    return HAL_OK;
 8003da6:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003da8:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003daa:	688b      	ldr	r3, [r1, #8]
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	608b      	str	r3, [r1, #8]
 8003db2:	e7d5      	b.n	8003d60 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 8003db4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8003db8:	d023      	beq.n	8003e02 <HAL_UART_Receive_IT+0x11e>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dba:	2422      	movs	r4, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8003dc0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dc4:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 8003dc8:	e7b9      	b.n	8003d3e <HAL_UART_Receive_IT+0x5a>
    return HAL_BUSY;
 8003dca:	2002      	movs	r0, #2
 8003dcc:	e7c8      	b.n	8003d60 <HAL_UART_Receive_IT+0x7c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dce:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003dd4:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 8003dd8:	f240 14ff 	movw	r4, #511	; 0x1ff
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ddc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de0:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8003de2:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003dec:	d103      	bne.n	8003df6 <HAL_UART_Receive_IT+0x112>
 8003dee:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d90c      	bls.n	8003e10 <HAL_UART_Receive_IT+0x12c>
        huart->RxISR = UART_RxISR_16BIT;
 8003df6:	4c09      	ldr	r4, [pc, #36]	; (8003e1c <HAL_UART_Receive_IT+0x138>)
 8003df8:	e7a9      	b.n	8003d4e <HAL_UART_Receive_IT+0x6a>
    UART_MASK_COMPUTATION(huart);
 8003dfa:	23ff      	movs	r3, #255	; 0xff
 8003dfc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8003e00:	e797      	b.n	8003d32 <HAL_UART_Receive_IT+0x4e>
 8003e02:	6903      	ldr	r3, [r0, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d091      	beq.n	8003d2c <HAL_UART_Receive_IT+0x48>
 8003e08:	233f      	movs	r3, #63	; 0x3f
 8003e0a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8003e0e:	e790      	b.n	8003d32 <HAL_UART_Receive_IT+0x4e>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003e10:	4c03      	ldr	r4, [pc, #12]	; (8003e20 <HAL_UART_Receive_IT+0x13c>)
 8003e12:	e7c1      	b.n	8003d98 <HAL_UART_Receive_IT+0xb4>
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003ee1 	.word	0x08003ee1
 8003e1c:	08003e85 	.word	0x08003e85
 8003e20:	08003f99 	.word	0x08003f99

08003e24 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e24:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8003e28:	6802      	ldr	r2, [r0, #0]
 8003e2a:	2922      	cmp	r1, #34	; 0x22
{
 8003e2c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e2e:	d004      	beq.n	8003e3a <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e30:	6993      	ldr	r3, [r2, #24]
 8003e32:	f043 0308 	orr.w	r3, r3, #8
 8003e36:	6193      	str	r3, [r2, #24]
  }
}
 8003e38:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e3c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8003e40:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003e42:	4022      	ands	r2, r4
 8003e44:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8003e46:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8003e4a:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003e4c:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 8003e4e:	3101      	adds	r1, #1
    huart->RxXferCount--;
 8003e50:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8003e52:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003e54:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8003e58:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	2a00      	cmp	r2, #0
 8003e60:	d1ea      	bne.n	8003e38 <UART_RxISR_8BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e62:	6801      	ldr	r1, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8003e64:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e66:	680c      	ldr	r4, [r1, #0]
 8003e68:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8003e6c:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6e:	688c      	ldr	r4, [r1, #8]
 8003e70:	f024 0401 	bic.w	r4, r4, #1
 8003e74:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 8003e76:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8003e78:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8003e7c:	f7fd f9e2 	bl	8001244 <HAL_UART_RxCpltCallback>
}
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
 8003e82:	bf00      	nop

08003e84 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e84:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8003e88:	6802      	ldr	r2, [r0, #0]
 8003e8a:	2922      	cmp	r1, #34	; 0x22
{
 8003e8c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e8e:	d004      	beq.n	8003e9a <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e90:	6993      	ldr	r3, [r2, #24]
 8003e92:	f043 0308 	orr.w	r3, r3, #8
 8003e96:	6193      	str	r3, [r2, #24]
  }
}
 8003e98:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e9a:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e9c:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 8003ea0:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003ea2:	4029      	ands	r1, r5
 8003ea4:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 8003ea8:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8003eac:	6584      	str	r4, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003eae:	3901      	subs	r1, #1
 8003eb0:	b289      	uxth	r1, r1
 8003eb2:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8003eb6:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8003eba:	b289      	uxth	r1, r1
 8003ebc:	2900      	cmp	r1, #0
 8003ebe:	d1eb      	bne.n	8003e98 <UART_RxISR_16BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec0:	6814      	ldr	r4, [r2, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec4:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8003ec8:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	6894      	ldr	r4, [r2, #8]
 8003ecc:	f024 0401 	bic.w	r4, r4, #1
 8003ed0:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 8003ed2:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8003ed8:	f7fd f9b4 	bl	8001244 <HAL_UART_RxCpltCallback>
}
 8003edc:	bd38      	pop	{r3, r4, r5, pc}
 8003ede:	bf00      	nop

08003ee0 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ee0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003ee4:	2b22      	cmp	r3, #34	; 0x22
 8003ee6:	d005      	beq.n	8003ef4 <UART_RxISR_8BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ee8:	6802      	ldr	r2, [r0, #0]
 8003eea:	6993      	ldr	r3, [r2, #24]
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	6193      	str	r3, [r2, #24]
 8003ef2:	4770      	bx	lr
{
 8003ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003ef8:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8003efc:	2d00      	cmp	r5, #0
 8003efe:	d043      	beq.n	8003f88 <UART_RxISR_8BIT_FIFOEN+0xa8>
 8003f00:	4604      	mov	r4, r0
 8003f02:	f890 8060 	ldrb.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8003f06:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f08:	4e21      	ldr	r6, [pc, #132]	; (8003f90 <UART_RxISR_8BIT_FIFOEN+0xb0>)
 8003f0a:	e002      	b.n	8003f12 <UART_RxISR_8BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003f0c:	3d01      	subs	r5, #1
 8003f0e:	b2ad      	uxth	r5, r5
 8003f10:	b32d      	cbz	r5, 8003f5e <UART_RxISR_8BIT_FIFOEN+0x7e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f12:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f14:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f18:	ea08 0303 	and.w	r3, r8, r3
 8003f1c:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8003f1e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 8003f22:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8003f24:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 8003f26:	3201      	adds	r2, #1
      huart->RxXferCount--;
 8003f28:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 8003f2a:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8003f2c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8003f30:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e8      	bne.n	8003f0c <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f3a:	6822      	ldr	r2, [r4, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003f3c:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8003f3e:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f40:	6811      	ldr	r1, [r2, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003f42:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f44:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003f48:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f4a:	6891      	ldr	r1, [r2, #8]
 8003f4c:	4031      	ands	r1, r6
 8003f4e:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8003f50:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8003f54:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8003f56:	f7fd f975 	bl	8001244 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003f5a:	2d00      	cmp	r5, #0
 8003f5c:	d1d9      	bne.n	8003f12 <UART_RxISR_8BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 8003f5e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003f62:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003f64:	b173      	cbz	r3, 8003f84 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8003f66:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d90a      	bls.n	8003f84 <UART_RxISR_8BIT_FIFOEN+0xa4>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003f6e:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8003f70:	4908      	ldr	r1, [pc, #32]	; (8003f94 <UART_RxISR_8BIT_FIFOEN+0xb4>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003f78:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003f7a:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8003f7c:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003f7e:	f042 0220 	orr.w	r2, r2, #32
 8003f82:	601a      	str	r2, [r3, #0]
  }
}
 8003f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8003f88:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8003f8c:	e7fa      	b.n	8003f84 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8003f8e:	bf00      	nop
 8003f90:	effffffe 	.word	0xeffffffe
 8003f94:	08003e25 	.word	0x08003e25

08003f98 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f98:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003f9c:	2b22      	cmp	r3, #34	; 0x22
 8003f9e:	d005      	beq.n	8003fac <UART_RxISR_16BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fa0:	6802      	ldr	r2, [r0, #0]
 8003fa2:	6993      	ldr	r3, [r2, #24]
 8003fa4:	f043 0308 	orr.w	r3, r3, #8
 8003fa8:	6193      	str	r3, [r2, #24]
 8003faa:	4770      	bx	lr
{
 8003fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003fb0:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8003fb4:	2d00      	cmp	r5, #0
 8003fb6:	d041      	beq.n	800403c <UART_RxISR_16BIT_FIFOEN+0xa4>
 8003fb8:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 8003fba:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8003fbe:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fc0:	4e20      	ldr	r6, [pc, #128]	; (8004044 <UART_RxISR_16BIT_FIFOEN+0xac>)
 8003fc2:	e002      	b.n	8003fca <UART_RxISR_16BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003fc4:	3d01      	subs	r5, #1
 8003fc6:	b2ad      	uxth	r5, r5
 8003fc8:	b31d      	cbz	r5, 8004012 <UART_RxISR_16BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fca:	6821      	ldr	r1, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003fcc:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fce:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8003fd0:	ea08 0303 	and.w	r3, r8, r3
 8003fd4:	f822 3b02 	strh.w	r3, [r2], #2
      huart->RxXferCount--;
 8003fd8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8003fdc:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8003fe6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e9      	bne.n	8003fc4 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff0:	680a      	ldr	r2, [r1, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003ff2:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8003ff4:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003ffa:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ffc:	600a      	str	r2, [r1, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ffe:	688a      	ldr	r2, [r1, #8]
 8004000:	4032      	ands	r2, r6
 8004002:	608a      	str	r2, [r1, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8004004:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8004008:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800400a:	f7fd f91b 	bl	8001244 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800400e:	2d00      	cmp	r5, #0
 8004010:	d1db      	bne.n	8003fca <UART_RxISR_16BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 8004012:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004016:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004018:	b173      	cbz	r3, 8004038 <UART_RxISR_16BIT_FIFOEN+0xa0>
 800401a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800401e:	429a      	cmp	r2, r3
 8004020:	d90a      	bls.n	8004038 <UART_RxISR_16BIT_FIFOEN+0xa0>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004022:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8004024:	4908      	ldr	r1, [pc, #32]	; (8004048 <UART_RxISR_16BIT_FIFOEN+0xb0>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800402c:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800402e:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8004030:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004032:	f042 0220 	orr.w	r2, r2, #32
 8004036:	601a      	str	r2, [r3, #0]
  }
}
 8004038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 800403c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004040:	e7fa      	b.n	8004038 <UART_RxISR_16BIT_FIFOEN+0xa0>
 8004042:	bf00      	nop
 8004044:	effffffe 	.word	0xeffffffe
 8004048:	08003e85 	.word	0x08003e85

0800404c <HAL_UART_ErrorCallback>:
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop

08004050 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004050:	6802      	ldr	r2, [r0, #0]
{
 8004052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004056:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004058:	f640 050f 	movw	r5, #2063	; 0x80f
{
 800405c:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800405e:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 8004060:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004062:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8004064:	d070      	beq.n	8004148 <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004066:	4d73      	ldr	r5, [pc, #460]	; (8004234 <HAL_UART_IRQHandler+0x1e4>)
 8004068:	400d      	ands	r5, r1
 800406a:	f000 808f 	beq.w	800418c <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800406e:	07df      	lsls	r7, r3, #31
 8004070:	d509      	bpl.n	8004086 <HAL_UART_IRQHandler+0x36>
 8004072:	05c6      	lsls	r6, r0, #23
 8004074:	d507      	bpl.n	8004086 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004076:	2601      	movs	r6, #1
 8004078:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800407a:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800407e:	f046 0601 	orr.w	r6, r6, #1
 8004082:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004086:	079f      	lsls	r7, r3, #30
 8004088:	f003 0604 	and.w	r6, r3, #4
 800408c:	f140 8093 	bpl.w	80041b6 <HAL_UART_IRQHandler+0x166>
 8004090:	07cf      	lsls	r7, r1, #31
 8004092:	d50a      	bpl.n	80040aa <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004094:	2702      	movs	r7, #2
 8004096:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004098:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 800409c:	f047 0704 	orr.w	r7, r7, #4
 80040a0:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040a4:	2e00      	cmp	r6, #0
 80040a6:	f040 808c 	bne.w	80041c2 <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040aa:	071f      	lsls	r7, r3, #28
 80040ac:	d505      	bpl.n	80040ba <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040ae:	0686      	lsls	r6, r0, #26
 80040b0:	f100 8097 	bmi.w	80041e2 <HAL_UART_IRQHandler+0x192>
 80040b4:	2d00      	cmp	r5, #0
 80040b6:	f040 8094 	bne.w	80041e2 <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040ba:	051f      	lsls	r7, r3, #20
 80040bc:	d50a      	bpl.n	80040d4 <HAL_UART_IRQHandler+0x84>
 80040be:	0146      	lsls	r6, r0, #5
 80040c0:	d508      	bpl.n	80040d4 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80040c6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040c8:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80040cc:	f045 0520 	orr.w	r5, r5, #32
 80040d0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040d4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80040d8:	2d00      	cmp	r5, #0
 80040da:	d06a      	beq.n	80041b2 <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040dc:	069d      	lsls	r5, r3, #26
 80040de:	d507      	bpl.n	80040f0 <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040e0:	0680      	lsls	r0, r0, #26
 80040e2:	f140 808b 	bpl.w	80041fc <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 80040e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80040e8:	b113      	cbz	r3, 80040f0 <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 80040ea:	4620      	mov	r0, r4
 80040ec:	4798      	blx	r3
 80040ee:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80040f0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040f4:	6891      	ldr	r1, [r2, #8]
 80040f6:	064f      	lsls	r7, r1, #25
 80040f8:	d403      	bmi.n	8004102 <HAL_UART_IRQHandler+0xb2>
 80040fa:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80040fe:	f000 8093 	beq.w	8004228 <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004102:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004104:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004106:	4b4c      	ldr	r3, [pc, #304]	; (8004238 <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 8004108:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800410a:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800410e:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004110:	6891      	ldr	r1, [r2, #8]
 8004112:	400b      	ands	r3, r1
 8004114:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004116:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411a:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 800411c:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411e:	065e      	lsls	r6, r3, #25
 8004120:	d568      	bpl.n	80041f4 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8004124:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412a:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800412c:	2900      	cmp	r1, #0
 800412e:	d061      	beq.n	80041f4 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004130:	4b42      	ldr	r3, [pc, #264]	; (800423c <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004132:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004134:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004136:	f7fd fab9 	bl	80016ac <HAL_DMA_Abort_IT>
 800413a:	2800      	cmp	r0, #0
 800413c:	d039      	beq.n	80041b2 <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800413e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8004140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004144:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004146:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004148:	069f      	lsls	r7, r3, #26
 800414a:	d509      	bpl.n	8004160 <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800414c:	0686      	lsls	r6, r0, #26
 800414e:	d505      	bpl.n	800415c <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 8004150:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004152:	b373      	cbz	r3, 80041b2 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8004154:	4620      	mov	r0, r4
}
 8004156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800415a:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800415c:	00cd      	lsls	r5, r1, #3
 800415e:	d4f7      	bmi.n	8004150 <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004160:	02dd      	lsls	r5, r3, #11
 8004162:	d409      	bmi.n	8004178 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004164:	061e      	lsls	r6, r3, #24
 8004166:	d51a      	bpl.n	800419e <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004168:	0605      	lsls	r5, r0, #24
 800416a:	d516      	bpl.n	800419a <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 800416c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800416e:	b303      	cbz	r3, 80041b2 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8004170:	4620      	mov	r0, r4
}
 8004172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8004176:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004178:	024f      	lsls	r7, r1, #9
 800417a:	d5f3      	bpl.n	8004164 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800417c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004180:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004182:	6213      	str	r3, [r2, #32]
}
 8004184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004188:	f000 bc64 	b.w	8004a54 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800418c:	4e2c      	ldr	r6, [pc, #176]	; (8004240 <HAL_UART_IRQHandler+0x1f0>)
 800418e:	4230      	tst	r0, r6
 8004190:	d0e6      	beq.n	8004160 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004192:	07df      	lsls	r7, r3, #31
 8004194:	f57f af77 	bpl.w	8004086 <HAL_UART_IRQHandler+0x36>
 8004198:	e76b      	b.n	8004072 <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800419a:	020f      	lsls	r7, r1, #8
 800419c:	d4e6      	bmi.n	800416c <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800419e:	065e      	lsls	r6, r3, #25
 80041a0:	d501      	bpl.n	80041a6 <HAL_UART_IRQHandler+0x156>
 80041a2:	0645      	lsls	r5, r0, #25
 80041a4:	d42e      	bmi.n	8004204 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041a6:	0219      	lsls	r1, r3, #8
 80041a8:	d414      	bmi.n	80041d4 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041aa:	01db      	lsls	r3, r3, #7
 80041ac:	d501      	bpl.n	80041b2 <HAL_UART_IRQHandler+0x162>
 80041ae:	2800      	cmp	r0, #0
 80041b0:	db35      	blt.n	800421e <HAL_UART_IRQHandler+0x1ce>
}
 80041b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041b6:	2e00      	cmp	r6, #0
 80041b8:	f43f af77 	beq.w	80040aa <HAL_UART_IRQHandler+0x5a>
 80041bc:	07ce      	lsls	r6, r1, #31
 80041be:	f57f af74 	bpl.w	80040aa <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041c2:	2604      	movs	r6, #4
 80041c4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041c6:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80041ca:	f046 0602 	orr.w	r6, r6, #2
 80041ce:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 80041d2:	e76a      	b.n	80040aa <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041d4:	0042      	lsls	r2, r0, #1
 80041d6:	d5e8      	bpl.n	80041aa <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041d8:	4620      	mov	r0, r4
}
 80041da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041de:	f000 bc3d 	b.w	8004a5c <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041e2:	2508      	movs	r5, #8
 80041e4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80041ea:	f045 0508 	orr.w	r5, r5, #8
 80041ee:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80041f2:	e762      	b.n	80040ba <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff ff29 	bl	800404c <HAL_UART_ErrorCallback>
 80041fa:	e7da      	b.n	80041b2 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041fc:	00cb      	lsls	r3, r1, #3
 80041fe:	f57f af77 	bpl.w	80040f0 <HAL_UART_IRQHandler+0xa0>
 8004202:	e770      	b.n	80040e6 <HAL_UART_IRQHandler+0x96>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004204:	6813      	ldr	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004206:	2520      	movs	r5, #32
  huart->TxISR = NULL;
 8004208:	2100      	movs	r1, #0
  HAL_UART_TxCpltCallback(huart);
 800420a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800420c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004210:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004212:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8004216:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8004218:	f7fd f80e 	bl	8001238 <HAL_UART_TxCpltCallback>
 800421c:	e7c9      	b.n	80041b2 <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800421e:	4620      	mov	r0, r4
}
 8004220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004224:	f000 bc18 	b.w	8004a58 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8004228:	4620      	mov	r0, r4
 800422a:	f7ff ff0f 	bl	800404c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8004232:	e7be      	b.n	80041b2 <HAL_UART_IRQHandler+0x162>
 8004234:	10000001 	.word	0x10000001
 8004238:	effffffe 	.word	0xeffffffe
 800423c:	08004245 	.word	0x08004245
 8004240:	04000120 	.word	0x04000120

08004244 <UART_DMAAbortOnError>:
{
 8004244:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8004246:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004248:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800424a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 800424e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8004250:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8004254:	f7ff fefa 	bl	800404c <HAL_UART_ErrorCallback>
}
 8004258:	bd08      	pop	{r3, pc}
 800425a:	bf00      	nop

0800425c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800425c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800425e:	07da      	lsls	r2, r3, #31
{
 8004260:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004262:	d506      	bpl.n	8004272 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004264:	6801      	ldr	r1, [r0, #0]
 8004266:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004268:	684a      	ldr	r2, [r1, #4]
 800426a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800426e:	4322      	orrs	r2, r4
 8004270:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004272:	079c      	lsls	r4, r3, #30
 8004274:	d506      	bpl.n	8004284 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004276:	6801      	ldr	r1, [r0, #0]
 8004278:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800427a:	684a      	ldr	r2, [r1, #4]
 800427c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004280:	4322      	orrs	r2, r4
 8004282:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004284:	0759      	lsls	r1, r3, #29
 8004286:	d506      	bpl.n	8004296 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004288:	6801      	ldr	r1, [r0, #0]
 800428a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800428c:	684a      	ldr	r2, [r1, #4]
 800428e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004292:	4322      	orrs	r2, r4
 8004294:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004296:	071a      	lsls	r2, r3, #28
 8004298:	d506      	bpl.n	80042a8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800429a:	6801      	ldr	r1, [r0, #0]
 800429c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800429e:	684a      	ldr	r2, [r1, #4]
 80042a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a4:	4322      	orrs	r2, r4
 80042a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042a8:	06dc      	lsls	r4, r3, #27
 80042aa:	d506      	bpl.n	80042ba <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ac:	6801      	ldr	r1, [r0, #0]
 80042ae:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80042b0:	688a      	ldr	r2, [r1, #8]
 80042b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042b6:	4322      	orrs	r2, r4
 80042b8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ba:	0699      	lsls	r1, r3, #26
 80042bc:	d506      	bpl.n	80042cc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042be:	6801      	ldr	r1, [r0, #0]
 80042c0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80042c2:	688a      	ldr	r2, [r1, #8]
 80042c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042c8:	4322      	orrs	r2, r4
 80042ca:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042cc:	065a      	lsls	r2, r3, #25
 80042ce:	d50a      	bpl.n	80042e6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d0:	6801      	ldr	r1, [r0, #0]
 80042d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80042d4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042d6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042da:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80042de:	ea42 0204 	orr.w	r2, r2, r4
 80042e2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042e4:	d00b      	beq.n	80042fe <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	d506      	bpl.n	80042f8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ea:	6802      	ldr	r2, [r0, #0]
 80042ec:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80042ee:	6853      	ldr	r3, [r2, #4]
 80042f0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6053      	str	r3, [r2, #4]
}
 80042f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042fc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042fe:	684a      	ldr	r2, [r1, #4]
 8004300:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004302:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004306:	4322      	orrs	r2, r4
 8004308:	604a      	str	r2, [r1, #4]
 800430a:	e7ec      	b.n	80042e6 <UART_AdvFeatureConfig+0x8a>

0800430c <HAL_UART_Init>:
  if (huart == NULL)
 800430c:	2800      	cmp	r0, #0
 800430e:	f000 80d2 	beq.w	80044b6 <HAL_UART_Init+0x1aa>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004312:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8004316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800431a:	4604      	mov	r4, r0
 800431c:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	2b00      	cmp	r3, #0
 8004320:	d058      	beq.n	80043d4 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 8004322:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004324:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004326:	6921      	ldr	r1, [r4, #16]
 8004328:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800432a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800432e:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 8004330:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004332:	6960      	ldr	r0, [r4, #20]
 8004334:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8004336:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800433a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800433c:	48a1      	ldr	r0, [pc, #644]	; (80045c4 <HAL_UART_Init+0x2b8>)
  __HAL_UART_DISABLE(huart);
 800433e:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004340:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004342:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004344:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004346:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 800434a:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800434c:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004350:	4e9d      	ldr	r6, [pc, #628]	; (80045c8 <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004352:	4302      	orrs	r2, r0
 8004354:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004356:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004358:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004360:	ea42 0207 	orr.w	r2, r2, r7
 8004364:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004366:	f000 808b 	beq.w	8004480 <HAL_UART_Init+0x174>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800436a:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800436c:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800436e:	4897      	ldr	r0, [pc, #604]	; (80045cc <HAL_UART_Init+0x2c0>)
    tmpreg |= huart->Init.OneBitSampling;
 8004370:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004374:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004376:	4e96      	ldr	r6, [pc, #600]	; (80045d0 <HAL_UART_Init+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004378:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800437a:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800437c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	f022 020f 	bic.w	r2, r2, #15
 8004384:	ea42 0205 	orr.w	r2, r2, r5
 8004388:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800438a:	d028      	beq.n	80043de <HAL_UART_Init+0xd2>
 800438c:	4a91      	ldr	r2, [pc, #580]	; (80045d4 <HAL_UART_Init+0x2c8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	f000 810e 	beq.w	80045b0 <HAL_UART_Init+0x2a4>
 8004394:	4a90      	ldr	r2, [pc, #576]	; (80045d8 <HAL_UART_Init+0x2cc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	f000 8100 	beq.w	800459c <HAL_UART_Init+0x290>
 800439c:	4a8f      	ldr	r2, [pc, #572]	; (80045dc <HAL_UART_Init+0x2d0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f000 829e 	beq.w	80048e0 <HAL_UART_Init+0x5d4>
 80043a4:	4a8e      	ldr	r2, [pc, #568]	; (80045e0 <HAL_UART_Init+0x2d4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f000 82a4 	beq.w	80048f4 <HAL_UART_Init+0x5e8>
 80043ac:	4a8d      	ldr	r2, [pc, #564]	; (80045e4 <HAL_UART_Init+0x2d8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	f000 82aa 	beq.w	8004908 <HAL_UART_Init+0x5fc>
 80043b4:	4a8c      	ldr	r2, [pc, #560]	; (80045e8 <HAL_UART_Init+0x2dc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	f000 82c5 	beq.w	8004946 <HAL_UART_Init+0x63a>
 80043bc:	4a8b      	ldr	r2, [pc, #556]	; (80045ec <HAL_UART_Init+0x2e0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d16f      	bne.n	80044a2 <HAL_UART_Init+0x196>
 80043c2:	4b8b      	ldr	r3, [pc, #556]	; (80045f0 <HAL_UART_Init+0x2e4>)
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d869      	bhi.n	80044a2 <HAL_UART_Init+0x196>
 80043ce:	4a89      	ldr	r2, [pc, #548]	; (80045f4 <HAL_UART_Init+0x2e8>)
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	e00c      	b.n	80043ee <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 80043d4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80043d8:	f7fd f808 	bl	80013ec <HAL_UART_MspInit>
 80043dc:	e7a1      	b.n	8004322 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043de:	4b84      	ldr	r3, [pc, #528]	; (80045f0 <HAL_UART_Init+0x2e4>)
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043e6:	2b28      	cmp	r3, #40	; 0x28
 80043e8:	d85b      	bhi.n	80044a2 <HAL_UART_Init+0x196>
 80043ea:	4a83      	ldr	r2, [pc, #524]	; (80045f8 <HAL_UART_Init+0x2ec>)
 80043ec:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80043f2:	f000 810f 	beq.w	8004614 <HAL_UART_Init+0x308>
    switch (clocksource)
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d853      	bhi.n	80044a2 <HAL_UART_Init+0x196>
 80043fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80043fe:	0209      	.short	0x0209
 8004400:	0052020c 	.word	0x0052020c
 8004404:	02040052 	.word	0x02040052
 8004408:	00520052 	.word	0x00520052
 800440c:	01fc0052 	.word	0x01fc0052
 8004410:	00520052 	.word	0x00520052
 8004414:	00520052 	.word	0x00520052
 8004418:	00520052 	.word	0x00520052
 800441c:	01d00052 	.word	0x01d00052
 8004420:	00520052 	.word	0x00520052
 8004424:	00520052 	.word	0x00520052
 8004428:	00520052 	.word	0x00520052
 800442c:	00520052 	.word	0x00520052
 8004430:	00520052 	.word	0x00520052
 8004434:	00520052 	.word	0x00520052
 8004438:	00520052 	.word	0x00520052
 800443c:	02120052 	.word	0x02120052
 8004440:	00520052 	.word	0x00520052
 8004444:	00520052 	.word	0x00520052
 8004448:	00520052 	.word	0x00520052
 800444c:	00520052 	.word	0x00520052
 8004450:	00520052 	.word	0x00520052
 8004454:	00520052 	.word	0x00520052
 8004458:	00520052 	.word	0x00520052
 800445c:	00520052 	.word	0x00520052
 8004460:	00520052 	.word	0x00520052
 8004464:	00520052 	.word	0x00520052
 8004468:	00520052 	.word	0x00520052
 800446c:	00520052 	.word	0x00520052
 8004470:	00520052 	.word	0x00520052
 8004474:	00520052 	.word	0x00520052
 8004478:	00520052 	.word	0x00520052
 800447c:	020f0052 	.word	0x020f0052
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004480:	6898      	ldr	r0, [r3, #8]
 8004482:	4a52      	ldr	r2, [pc, #328]	; (80045cc <HAL_UART_Init+0x2c0>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004484:	495a      	ldr	r1, [pc, #360]	; (80045f0 <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004486:	4002      	ands	r2, r0
 8004488:	ea42 020c 	orr.w	r2, r2, ip
 800448c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	f022 020f 	bic.w	r2, r2, #15
 8004494:	432a      	orrs	r2, r5
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004498:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	2b05      	cmp	r3, #5
 80044a0:	d90b      	bls.n	80044ba <HAL_UART_Init+0x1ae>
  huart->RxISR = NULL;
 80044a2:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80044a4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 80044a8:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 80044aa:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80044ac:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 80044b0:	b007      	add	sp, #28
 80044b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 80044b6:	2001      	movs	r0, #1
}
 80044b8:	4770      	bx	lr
    switch (clocksource)
 80044ba:	4a50      	ldr	r2, [pc, #320]	; (80045fc <HAL_UART_Init+0x2f0>)
 80044bc:	5cd3      	ldrb	r3, [r2, r3]
 80044be:	2b08      	cmp	r3, #8
 80044c0:	f000 823c 	beq.w	800493c <HAL_UART_Init+0x630>
 80044c4:	f240 822a 	bls.w	800491c <HAL_UART_Init+0x610>
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	f000 81ac 	beq.w	8004826 <HAL_UART_Init+0x51a>
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	f000 8245 	beq.w	800495e <HAL_UART_Init+0x652>
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d1e4      	bne.n	80044a2 <HAL_UART_Init+0x196>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	069f      	lsls	r7, r3, #26
 80044dc:	f140 8242 	bpl.w	8004964 <HAL_UART_Init+0x658>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80044e0:	680b      	ldr	r3, [r1, #0]
 80044e2:	4847      	ldr	r0, [pc, #284]	; (8004600 <HAL_UART_Init+0x2f4>)
 80044e4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80044e8:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044ea:	4b46      	ldr	r3, [pc, #280]	; (8004604 <HAL_UART_Init+0x2f8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044ec:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044ee:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044f2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044f6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044fa:	428b      	cmp	r3, r1
 80044fc:	d3d1      	bcc.n	80044a2 <HAL_UART_Init+0x196>
 80044fe:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8004502:	d8ce      	bhi.n	80044a2 <HAL_UART_Init+0x196>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004504:	2500      	movs	r5, #0
 8004506:	2300      	movs	r3, #0
 8004508:	0877      	lsrs	r7, r6, #1
 800450a:	4629      	mov	r1, r5
 800450c:	f7fb ff40 	bl	8000390 <__aeabi_uldivmod>
 8004510:	4632      	mov	r2, r6
 8004512:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8004516:	462b      	mov	r3, r5
 8004518:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800451c:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8004520:	eb18 0007 	adds.w	r0, r8, r7
 8004524:	f149 0100 	adc.w	r1, r9, #0
 8004528:	f7fb ff32 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800452c:	4b36      	ldr	r3, [pc, #216]	; (8004608 <HAL_UART_Init+0x2fc>)
 800452e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004532:	429a      	cmp	r2, r3
 8004534:	d8b5      	bhi.n	80044a2 <HAL_UART_Init+0x196>
          huart->Instance->BRR = usartdiv;
 8004536:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8004538:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800453c:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 800453e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004540:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004544:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 8151 	bne.w	80047ee <HAL_UART_Init+0x4e2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454c:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454e:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800455e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 800456c:	f7fd f810 	bl	8001590 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004570:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004572:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	0711      	lsls	r1, r2, #28
 8004578:	f100 80d4 	bmi.w	8004724 <HAL_UART_Init+0x418>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	0750      	lsls	r0, r2, #29
 8004580:	f100 80f9 	bmi.w	8004776 <HAL_UART_Init+0x46a>
  __HAL_UNLOCK(huart);
 8004584:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004586:	2220      	movs	r2, #32
  return HAL_OK;
 8004588:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800458a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800458e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004592:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8004596:	b007      	add	sp, #28
 8004598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <HAL_UART_Init+0x2e4>)
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	f63f af7c 	bhi.w	80044a2 <HAL_UART_Init+0x196>
 80045aa:	4a18      	ldr	r2, [pc, #96]	; (800460c <HAL_UART_Init+0x300>)
 80045ac:	5cd3      	ldrb	r3, [r2, r3]
 80045ae:	e71e      	b.n	80043ee <HAL_UART_Init+0xe2>
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <HAL_UART_Init+0x2e4>)
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	f63f af72 	bhi.w	80044a2 <HAL_UART_Init+0x196>
 80045be:	4a14      	ldr	r2, [pc, #80]	; (8004610 <HAL_UART_Init+0x304>)
 80045c0:	5cd3      	ldrb	r3, [r2, r3]
 80045c2:	e714      	b.n	80043ee <HAL_UART_Init+0xe2>
 80045c4:	cfff69f3 	.word	0xcfff69f3
 80045c8:	58000c00 	.word	0x58000c00
 80045cc:	11fff4ff 	.word	0x11fff4ff
 80045d0:	40011000 	.word	0x40011000
 80045d4:	40004400 	.word	0x40004400
 80045d8:	40004800 	.word	0x40004800
 80045dc:	40004c00 	.word	0x40004c00
 80045e0:	40005000 	.word	0x40005000
 80045e4:	40011400 	.word	0x40011400
 80045e8:	40007800 	.word	0x40007800
 80045ec:	40007c00 	.word	0x40007c00
 80045f0:	58024400 	.word	0x58024400
 80045f4:	08007248 	.word	0x08007248
 80045f8:	0800721c 	.word	0x0800721c
 80045fc:	08007250 	.word	0x08007250
 8004600:	03d09000 	.word	0x03d09000
 8004604:	08007258 	.word	0x08007258
 8004608:	000ffcff 	.word	0x000ffcff
 800460c:	08007248 	.word	0x08007248
 8004610:	08007248 	.word	0x08007248
    switch (clocksource)
 8004614:	2b40      	cmp	r3, #64	; 0x40
 8004616:	f63f af44 	bhi.w	80044a2 <HAL_UART_Init+0x196>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_UART_Init+0x314>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004897 	.word	0x08004897
 8004624:	08004891 	.word	0x08004891
 8004628:	080044a3 	.word	0x080044a3
 800462c:	080044a3 	.word	0x080044a3
 8004630:	0800489d 	.word	0x0800489d
 8004634:	080044a3 	.word	0x080044a3
 8004638:	080044a3 	.word	0x080044a3
 800463c:	080044a3 	.word	0x080044a3
 8004640:	08004883 	.word	0x08004883
 8004644:	080044a3 	.word	0x080044a3
 8004648:	080044a3 	.word	0x080044a3
 800464c:	080044a3 	.word	0x080044a3
 8004650:	080044a3 	.word	0x080044a3
 8004654:	080044a3 	.word	0x080044a3
 8004658:	080044a3 	.word	0x080044a3
 800465c:	080044a3 	.word	0x080044a3
 8004660:	0800482b 	.word	0x0800482b
 8004664:	080044a3 	.word	0x080044a3
 8004668:	080044a3 	.word	0x080044a3
 800466c:	080044a3 	.word	0x080044a3
 8004670:	080044a3 	.word	0x080044a3
 8004674:	080044a3 	.word	0x080044a3
 8004678:	080044a3 	.word	0x080044a3
 800467c:	080044a3 	.word	0x080044a3
 8004680:	080044a3 	.word	0x080044a3
 8004684:	080044a3 	.word	0x080044a3
 8004688:	080044a3 	.word	0x080044a3
 800468c:	080044a3 	.word	0x080044a3
 8004690:	080044a3 	.word	0x080044a3
 8004694:	080044a3 	.word	0x080044a3
 8004698:	080044a3 	.word	0x080044a3
 800469c:	080044a3 	.word	0x080044a3
 80046a0:	080048a7 	.word	0x080048a7
 80046a4:	080044a3 	.word	0x080044a3
 80046a8:	080044a3 	.word	0x080044a3
 80046ac:	080044a3 	.word	0x080044a3
 80046b0:	080044a3 	.word	0x080044a3
 80046b4:	080044a3 	.word	0x080044a3
 80046b8:	080044a3 	.word	0x080044a3
 80046bc:	080044a3 	.word	0x080044a3
 80046c0:	080044a3 	.word	0x080044a3
 80046c4:	080044a3 	.word	0x080044a3
 80046c8:	080044a3 	.word	0x080044a3
 80046cc:	080044a3 	.word	0x080044a3
 80046d0:	080044a3 	.word	0x080044a3
 80046d4:	080044a3 	.word	0x080044a3
 80046d8:	080044a3 	.word	0x080044a3
 80046dc:	080044a3 	.word	0x080044a3
 80046e0:	080044a3 	.word	0x080044a3
 80046e4:	080044a3 	.word	0x080044a3
 80046e8:	080044a3 	.word	0x080044a3
 80046ec:	080044a3 	.word	0x080044a3
 80046f0:	080044a3 	.word	0x080044a3
 80046f4:	080044a3 	.word	0x080044a3
 80046f8:	080044a3 	.word	0x080044a3
 80046fc:	080044a3 	.word	0x080044a3
 8004700:	080044a3 	.word	0x080044a3
 8004704:	080044a3 	.word	0x080044a3
 8004708:	080044a3 	.word	0x080044a3
 800470c:	080044a3 	.word	0x080044a3
 8004710:	080044a3 	.word	0x080044a3
 8004714:	080044a3 	.word	0x080044a3
 8004718:	080044a3 	.word	0x080044a3
 800471c:	080044a3 	.word	0x080044a3
 8004720:	080048ab 	.word	0x080048ab
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004724:	69dd      	ldr	r5, [r3, #28]
 8004726:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800472a:	f47f af27 	bne.w	800457c <HAL_UART_Init+0x270>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fc ff2f 	bl	8001590 <HAL_GetTick>
 8004732:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004734:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800473a:	f080 80c0 	bcs.w	80048be <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	0752      	lsls	r2, r2, #29
 8004742:	d5ef      	bpl.n	8004724 <HAL_UART_Init+0x418>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	0517      	lsls	r7, r2, #20
 8004748:	d5ec      	bpl.n	8004724 <HAL_UART_Init+0x418>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800474a:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800474e:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8004750:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004752:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004754:	6819      	ldr	r1, [r3, #0]
 8004756:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800475a:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	6899      	ldr	r1, [r3, #8]
 800475e:	f021 0101 	bic.w	r1, r1, #1
 8004762:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004764:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8004768:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800476c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004770:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8004774:	e69c      	b.n	80044b0 <HAL_UART_Init+0x1a4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004776:	69dd      	ldr	r5, [r3, #28]
 8004778:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800477c:	f47f af02 	bne.w	8004584 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004780:	f7fc ff06 	bl	8001590 <HAL_GetTick>
 8004784:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004786:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004788:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800478c:	f080 8097 	bcs.w	80048be <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	0751      	lsls	r1, r2, #29
 8004794:	d5ef      	bpl.n	8004776 <HAL_UART_Init+0x46a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	0512      	lsls	r2, r2, #20
 800479a:	d5ec      	bpl.n	8004776 <HAL_UART_Init+0x46a>
 800479c:	e7d5      	b.n	800474a <HAL_UART_Init+0x43e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800479e:	4b73      	ldr	r3, [pc, #460]	; (800496c <HAL_UART_Init+0x660>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	0690      	lsls	r0, r2, #26
 80047a4:	f140 80d9 	bpl.w	800495a <HAL_UART_Init+0x64e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4871      	ldr	r0, [pc, #452]	; (8004970 <HAL_UART_Init+0x664>)
 80047ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80047b0:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047b2:	4b70      	ldr	r3, [pc, #448]	; (8004974 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047b8:	6862      	ldr	r2, [r4, #4]
 80047ba:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80047be:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80047c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ca:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047cc:	f1a3 0210 	sub.w	r2, r3, #16
 80047d0:	428a      	cmp	r2, r1
 80047d2:	f63f ae66 	bhi.w	80044a2 <HAL_UART_Init+0x196>
        huart->Instance->BRR = usartdiv;
 80047d6:	6820      	ldr	r0, [r4, #0]
  huart->NbTxDataToProcess = 1;
 80047d8:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 80047da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 80047de:	60c3      	str	r3, [r0, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 80047e2:	6722      	str	r2, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 80047e4:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f43f aeaf 	beq.w	800454c <HAL_UART_Init+0x240>
    UART_AdvFeatureConfig(huart);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff fd34 	bl	800425c <UART_AdvFeatureConfig>
 80047f4:	e6aa      	b.n	800454c <HAL_UART_Init+0x240>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047f6:	a803      	add	r0, sp, #12
 80047f8:	f7fe ff58 	bl	80036ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047fc:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80047fe:	2800      	cmp	r0, #0
 8004800:	d056      	beq.n	80048b0 <HAL_UART_Init+0x5a4>
 8004802:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004804:	e7d5      	b.n	80047b2 <HAL_UART_Init+0x4a6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004806:	4668      	mov	r0, sp
 8004808:	f7fe feb8 	bl	800357c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800480c:	9801      	ldr	r0, [sp, #4]
 800480e:	e7f6      	b.n	80047fe <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fd feee 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 8004814:	e7f3      	b.n	80047fe <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004816:	f7fd ff9b 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 800481a:	e7f0      	b.n	80047fe <HAL_UART_Init+0x4f2>
        pclk = (uint32_t) LSE_VALUE;
 800481c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004820:	e7c7      	b.n	80047b2 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8004822:	4855      	ldr	r0, [pc, #340]	; (8004978 <HAL_UART_Init+0x66c>)
 8004824:	e7c5      	b.n	80047b2 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8004826:	4854      	ldr	r0, [pc, #336]	; (8004978 <HAL_UART_Init+0x66c>)
 8004828:	e65f      	b.n	80044ea <HAL_UART_Init+0x1de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800482a:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_UART_Init+0x660>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	0696      	lsls	r6, r2, #26
 8004830:	f140 809a 	bpl.w	8004968 <HAL_UART_Init+0x65c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	484e      	ldr	r0, [pc, #312]	; (8004970 <HAL_UART_Init+0x664>)
 8004838:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800483c:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800483e:	4b4d      	ldr	r3, [pc, #308]	; (8004974 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004840:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004844:	6862      	ldr	r2, [r4, #4]
 8004846:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 800484a:	0853      	lsrs	r3, r2, #1
 800484c:	fbb0 f0f5 	udiv	r0, r0, r5
 8004850:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004854:	fbb3 f3f2 	udiv	r3, r3, r2
 8004858:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800485a:	f1a2 0010 	sub.w	r0, r2, #16
 800485e:	4288      	cmp	r0, r1
 8004860:	f63f ae1f 	bhi.w	80044a2 <HAL_UART_Init+0x196>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004864:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004868:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->NbTxDataToProcess = 1;
 800486c:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800486e:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004870:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 8004872:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 8004876:	4313      	orrs	r3, r2
 8004878:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 800487a:	6721      	str	r1, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 800487c:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 8004880:	e660      	b.n	8004544 <HAL_UART_Init+0x238>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004882:	a803      	add	r0, sp, #12
 8004884:	f7fe ff12 	bl	80036ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004888:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800488a:	b188      	cbz	r0, 80048b0 <HAL_UART_Init+0x5a4>
 800488c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800488e:	e7d6      	b.n	800483e <HAL_UART_Init+0x532>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004890:	f7fd ff5e 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 8004894:	e7f9      	b.n	800488a <HAL_UART_Init+0x57e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004896:	f7fd feab 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 800489a:	e7f6      	b.n	800488a <HAL_UART_Init+0x57e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800489c:	4668      	mov	r0, sp
 800489e:	f7fe fe6d 	bl	800357c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048a2:	9801      	ldr	r0, [sp, #4]
 80048a4:	e7f1      	b.n	800488a <HAL_UART_Init+0x57e>
        pclk = (uint32_t) CSI_VALUE;
 80048a6:	4834      	ldr	r0, [pc, #208]	; (8004978 <HAL_UART_Init+0x66c>)
 80048a8:	e7c9      	b.n	800483e <HAL_UART_Init+0x532>
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80048ae:	e7c6      	b.n	800483e <HAL_UART_Init+0x532>
  huart->RxISR = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80048b6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80048b8:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 80048bc:	e642      	b.n	8004544 <HAL_UART_Init+0x238>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80048be:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80048c0:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80048c2:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80048c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80048d2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80048d6:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80048da:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80048de:	e5e7      	b.n	80044b0 <HAL_UART_Init+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e0:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_UART_Init+0x660>)
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	2b05      	cmp	r3, #5
 80048ea:	f63f adda 	bhi.w	80044a2 <HAL_UART_Init+0x196>
 80048ee:	4a23      	ldr	r2, [pc, #140]	; (800497c <HAL_UART_Init+0x670>)
 80048f0:	5cd3      	ldrb	r3, [r2, r3]
 80048f2:	e57c      	b.n	80043ee <HAL_UART_Init+0xe2>
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_UART_Init+0x660>)
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	2b05      	cmp	r3, #5
 80048fe:	f63f add0 	bhi.w	80044a2 <HAL_UART_Init+0x196>
 8004902:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <HAL_UART_Init+0x674>)
 8004904:	5cd3      	ldrb	r3, [r2, r3]
 8004906:	e572      	b.n	80043ee <HAL_UART_Init+0xe2>
 8004908:	4b18      	ldr	r3, [pc, #96]	; (800496c <HAL_UART_Init+0x660>)
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004910:	2b28      	cmp	r3, #40	; 0x28
 8004912:	f63f adc6 	bhi.w	80044a2 <HAL_UART_Init+0x196>
 8004916:	4a1b      	ldr	r2, [pc, #108]	; (8004984 <HAL_UART_Init+0x678>)
 8004918:	5cd3      	ldrb	r3, [r2, r3]
 800491a:	e568      	b.n	80043ee <HAL_UART_Init+0xe2>
    switch (clocksource)
 800491c:	2b02      	cmp	r3, #2
 800491e:	d00a      	beq.n	8004936 <HAL_UART_Init+0x62a>
 8004920:	2b04      	cmp	r3, #4
 8004922:	f47f adbe 	bne.w	80044a2 <HAL_UART_Init+0x196>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004926:	4668      	mov	r0, sp
 8004928:	f7fe fe28 	bl	800357c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800492c:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800492e:	2800      	cmp	r0, #0
 8004930:	d0be      	beq.n	80048b0 <HAL_UART_Init+0x5a4>
 8004932:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004934:	e5d9      	b.n	80044ea <HAL_UART_Init+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004936:	f7fe fe0f 	bl	8003558 <HAL_RCCEx_GetD3PCLK1Freq>
 800493a:	e7f8      	b.n	800492e <HAL_UART_Init+0x622>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800493c:	a803      	add	r0, sp, #12
 800493e:	f7fe feb5 	bl	80036ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004942:	9804      	ldr	r0, [sp, #16]
 8004944:	e7f3      	b.n	800492e <HAL_UART_Init+0x622>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_UART_Init+0x660>)
 8004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	2b05      	cmp	r3, #5
 8004950:	f63f ada7 	bhi.w	80044a2 <HAL_UART_Init+0x196>
 8004954:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <HAL_UART_Init+0x67c>)
 8004956:	5cd3      	ldrb	r3, [r2, r3]
 8004958:	e549      	b.n	80043ee <HAL_UART_Init+0xe2>
          pclk = (uint32_t) HSI_VALUE;
 800495a:	4805      	ldr	r0, [pc, #20]	; (8004970 <HAL_UART_Init+0x664>)
 800495c:	e729      	b.n	80047b2 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) LSE_VALUE;
 800495e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004962:	e5c2      	b.n	80044ea <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8004964:	4802      	ldr	r0, [pc, #8]	; (8004970 <HAL_UART_Init+0x664>)
 8004966:	e5c0      	b.n	80044ea <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8004968:	4801      	ldr	r0, [pc, #4]	; (8004970 <HAL_UART_Init+0x664>)
 800496a:	e768      	b.n	800483e <HAL_UART_Init+0x532>
 800496c:	58024400 	.word	0x58024400
 8004970:	03d09000 	.word	0x03d09000
 8004974:	08007258 	.word	0x08007258
 8004978:	003d0900 	.word	0x003d0900
 800497c:	08007248 	.word	0x08007248
 8004980:	08007248 	.word	0x08007248
 8004984:	0800721c 	.word	0x0800721c
 8004988:	08007248 	.word	0x08007248

0800498c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	2300      	movs	r3, #0
{
 800498e:	b570      	push	{r4, r5, r6, lr}
 8004990:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004992:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8004996:	f7fc fdfb 	bl	8001590 <HAL_GetTick>
 800499a:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	0710      	lsls	r0, r2, #28
 80049a2:	d40c      	bmi.n	80049be <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	0750      	lsls	r0, r2, #29
 80049a8:	d430      	bmi.n	8004a0c <UART_CheckIdleState+0x80>
  huart->gState = HAL_UART_STATE_READY;
 80049aa:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80049ac:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80049ae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  return HAL_OK;
 80049b2:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80049b4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80049b8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80049bc:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	69dd      	ldr	r5, [r3, #28]
 80049c0:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80049c4:	d1ee      	bne.n	80049a4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c6:	f7fc fde3 	bl	8001590 <HAL_GetTick>
 80049ca:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049cc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80049d2:	d22d      	bcs.n	8004a30 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	0751      	lsls	r1, r2, #29
 80049d8:	d5f1      	bpl.n	80049be <UART_CheckIdleState+0x32>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	0512      	lsls	r2, r2, #20
 80049de:	d5ee      	bpl.n	80049be <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 80049e4:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80049e6:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e8:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80049f0:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	6899      	ldr	r1, [r3, #8]
 80049f4:	f021 0101 	bic.w	r1, r1, #1
 80049f8:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80049fa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 80049fe:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004a02:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a06:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0c:	69dd      	ldr	r5, [r3, #28]
 8004a0e:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8004a12:	d1ca      	bne.n	80049aa <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a14:	f7fc fdbc 	bl	8001590 <HAL_GetTick>
 8004a18:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a1a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8004a20:	d206      	bcs.n	8004a30 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	0751      	lsls	r1, r2, #29
 8004a26:	d5f1      	bpl.n	8004a0c <UART_CheckIdleState+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	0512      	lsls	r2, r2, #20
 8004a2c:	d5ee      	bpl.n	8004a0c <UART_CheckIdleState+0x80>
 8004a2e:	e7d7      	b.n	80049e0 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a30:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004a32:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8004a34:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004a44:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8004a48:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	bf00      	nop

08004a54 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop

08004a58 <HAL_UARTEx_RxFifoFullCallback>:
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <HAL_UARTEx_TxFifoEmptyCallback>:
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a60:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8004a64:	2a01      	cmp	r2, #1
 8004a66:	d017      	beq.n	8004a98 <HAL_UARTEx_DisableFifoMode+0x38>
 8004a68:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6a:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a6c:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a6e:	681a      	ldr	r2, [r3, #0]
{
 8004a70:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 8004a72:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8004a76:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a78:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8004a7a:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 8004a7c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a7e:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8004a82:	f025 0501 	bic.w	r5, r5, #1
 8004a86:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a88:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a8a:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004a8c:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004a90:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8004a94:	bc70      	pop	{r4, r5, r6}
 8004a96:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004a98:	2002      	movs	r0, #2
}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a9c:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8004aa0:	2a01      	cmp	r2, #1
 8004aa2:	d046      	beq.n	8004b32 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 8004aa4:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa6:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004aa8:	681a      	ldr	r2, [r3, #0]
{
 8004aaa:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8004aac:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8004ab0:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ab2:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ab4:	6810      	ldr	r0, [r2, #0]
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004ab6:	4d20      	ldr	r5, [pc, #128]	; (8004b38 <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8004ab8:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004abc:	4e1f      	ldr	r6, [pc, #124]	; (8004b3c <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004abe:	9500      	str	r5, [sp, #0]
 8004ac0:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8004ac4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ac6:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004ac8:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004aca:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ace:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004ad2:	9602      	str	r6, [sp, #8]
 8004ad4:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ad8:	4301      	orrs	r1, r0

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ada:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004adc:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ade:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ae0:	b320      	cbz	r0, 8004b2c <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ae2:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004ae4:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ae6:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004ae8:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004aec:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004af0:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004af2:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004af6:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8004afa:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004afe:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004b00:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004b02:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004b06:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004b0a:	fb90 f0f5 	sdiv	r0, r0, r5
 8004b0e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8004b12:	2100      	movs	r1, #0
 8004b14:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	2520      	movs	r5, #32
  return HAL_OK;
 8004b1a:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b1c:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004b1e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004b22:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8004b26:	b004      	add	sp, #16
 8004b28:	bcf0      	pop	{r4, r5, r6, r7}
 8004b2a:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8004b2c:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8004b2e:	4608      	mov	r0, r1
 8004b30:	e7ed      	b.n	8004b0e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8004b32:	2002      	movs	r0, #2
}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	03010101 	.word	0x03010101
 8004b3c:	04020408 	.word	0x04020408

08004b40 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8004b40:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8004b44:	2a01      	cmp	r2, #1
 8004b46:	d046      	beq.n	8004bd6 <HAL_UARTEx_SetRxFifoThreshold+0x96>
 8004b48:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8004b4a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b4c:	681a      	ldr	r2, [r3, #0]
{
 8004b4e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8004b50:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8004b54:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b56:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004b58:	6810      	ldr	r0, [r2, #0]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004b5a:	4d20      	ldr	r5, [pc, #128]	; (8004bdc <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8004b5c:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b60:	4e1f      	ldr	r6, [pc, #124]	; (8004be0 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004b62:	9500      	str	r5, [sp, #0]
 8004b64:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8004b68:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b6a:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004b6c:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b6e:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b72:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b76:	9602      	str	r6, [sp, #8]
 8004b78:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b7c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b7e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b80:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b82:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b84:	b320      	cbz	r0, 8004bd0 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b86:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004b88:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b8a:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004b8c:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004b90:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004b94:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004b96:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004b9a:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8004b9e:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004ba2:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004ba4:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004ba6:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004baa:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004bae:	fb90 f0f5 	sdiv	r0, r0, r5
 8004bb2:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8004bbc:	2520      	movs	r5, #32
  return HAL_OK;
 8004bbe:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bc0:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004bc2:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8004bc6:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8004bca:	b004      	add	sp, #16
 8004bcc:	bcf0      	pop	{r4, r5, r6, r7}
 8004bce:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8004bd0:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8004bd2:	4608      	mov	r0, r1
 8004bd4:	e7ed      	b.n	8004bb2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8004bd6:	2002      	movs	r0, #2
}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	03010101 	.word	0x03010101
 8004be0:	04020408 	.word	0x04020408

08004be4 <arm_mean_f32>:
 8004be4:	b430      	push	{r4, r5}
 8004be6:	088d      	lsrs	r5, r1, #2
 8004be8:	d02d      	beq.n	8004c46 <arm_mean_f32+0x62>
 8004bea:	f100 0310 	add.w	r3, r0, #16
 8004bee:	462c      	mov	r4, r5
 8004bf0:	eddf 7a16 	vldr	s15, [pc, #88]	; 8004c4c <arm_mean_f32+0x68>
 8004bf4:	ed13 7a04 	vldr	s14, [r3, #-16]
 8004bf8:	3c01      	subs	r4, #1
 8004bfa:	ed13 6a03 	vldr	s12, [r3, #-12]
 8004bfe:	f103 0310 	add.w	r3, r3, #16
 8004c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c06:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8004c0a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8004c0e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1a:	d1eb      	bne.n	8004bf4 <arm_mean_f32+0x10>
 8004c1c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8004c20:	f011 0303 	ands.w	r3, r1, #3
 8004c24:	d005      	beq.n	8004c32 <arm_mean_f32+0x4e>
 8004c26:	ecb0 7a01 	vldmia	r0!, {s14}
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c30:	d1f9      	bne.n	8004c26 <arm_mean_f32+0x42>
 8004c32:	ee07 1a10 	vmov	s14, r1
 8004c36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c3a:	bc30      	pop	{r4, r5}
 8004c3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c40:	edc2 6a00 	vstr	s13, [r2]
 8004c44:	4770      	bx	lr
 8004c46:	eddf 7a01 	vldr	s15, [pc, #4]	; 8004c4c <arm_mean_f32+0x68>
 8004c4a:	e7e9      	b.n	8004c20 <arm_mean_f32+0x3c>
 8004c4c:	00000000 	.word	0x00000000

08004c50 <arm_max_f32>:
 8004c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	1e4d      	subs	r5, r1, #1
 8004c56:	f100 0c04 	add.w	ip, r0, #4
 8004c5a:	edd0 7a00 	vldr	s15, [r0]
 8004c5e:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8004c62:	d056      	beq.n	8004d12 <arm_max_f32+0xc2>
 8004c64:	3014      	adds	r0, #20
 8004c66:	46c8      	mov	r8, r9
 8004c68:	2404      	movs	r4, #4
 8004c6a:	2600      	movs	r6, #0
 8004c6c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8004c70:	f1a4 0a03 	sub.w	sl, r4, #3
 8004c74:	ed50 6a03 	vldr	s13, [r0, #-12]
 8004c78:	f1a4 0e02 	sub.w	lr, r4, #2
 8004c7c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8004c80:	ed10 7a02 	vldr	s14, [r0, #-8]
 8004c84:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004c88:	1e67      	subs	r7, r4, #1
 8004c8a:	3010      	adds	r0, #16
 8004c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c90:	bfc8      	it	gt
 8004c92:	eef0 7a46 	vmovgt.f32	s15, s12
 8004c96:	bfc8      	it	gt
 8004c98:	4656      	movgt	r6, sl
 8004c9a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca2:	bf48      	it	mi
 8004ca4:	eef0 7a66 	vmovmi.f32	s15, s13
 8004ca8:	bf48      	it	mi
 8004caa:	4676      	movmi	r6, lr
 8004cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb4:	bf48      	it	mi
 8004cb6:	eef0 7a47 	vmovmi.f32	s15, s14
 8004cba:	bf48      	it	mi
 8004cbc:	463e      	movmi	r6, r7
 8004cbe:	eef4 7ae5 	vcmpe.f32	s15, s11
 8004cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc6:	bf48      	it	mi
 8004cc8:	4626      	movmi	r6, r4
 8004cca:	bf48      	it	mi
 8004ccc:	eef0 7a65 	vmovmi.f32	s15, s11
 8004cd0:	f1b8 0801 	subs.w	r8, r8, #1
 8004cd4:	f104 0404 	add.w	r4, r4, #4
 8004cd8:	d1c8      	bne.n	8004c6c <arm_max_f32+0x1c>
 8004cda:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 8004cde:	f015 0003 	ands.w	r0, r5, #3
 8004ce2:	d018      	beq.n	8004d16 <arm_max_f32+0xc6>
 8004ce4:	1a08      	subs	r0, r1, r0
 8004ce6:	ecbc 7a01 	vldmia	ip!, {s14}
 8004cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf2:	bfc8      	it	gt
 8004cf4:	4606      	movgt	r6, r0
 8004cf6:	f100 0001 	add.w	r0, r0, #1
 8004cfa:	bfd8      	it	le
 8004cfc:	eeb0 7a67 	vmovle.f32	s14, s15
 8004d00:	4281      	cmp	r1, r0
 8004d02:	eef0 7a47 	vmov.f32	s15, s14
 8004d06:	d1ee      	bne.n	8004ce6 <arm_max_f32+0x96>
 8004d08:	ed82 7a00 	vstr	s14, [r2]
 8004d0c:	601e      	str	r6, [r3, #0]
 8004d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d12:	464e      	mov	r6, r9
 8004d14:	e7e3      	b.n	8004cde <arm_max_f32+0x8e>
 8004d16:	eeb0 7a67 	vmov.f32	s14, s15
 8004d1a:	e7f5      	b.n	8004d08 <arm_max_f32+0xb8>

08004d1c <__errno>:
 8004d1c:	4b01      	ldr	r3, [pc, #4]	; (8004d24 <__errno+0x8>)
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20000010 	.word	0x20000010

08004d28 <__libc_init_array>:
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	4e0d      	ldr	r6, [pc, #52]	; (8004d60 <__libc_init_array+0x38>)
 8004d2c:	4c0d      	ldr	r4, [pc, #52]	; (8004d64 <__libc_init_array+0x3c>)
 8004d2e:	1ba4      	subs	r4, r4, r6
 8004d30:	10a4      	asrs	r4, r4, #2
 8004d32:	2500      	movs	r5, #0
 8004d34:	42a5      	cmp	r5, r4
 8004d36:	d109      	bne.n	8004d4c <__libc_init_array+0x24>
 8004d38:	4e0b      	ldr	r6, [pc, #44]	; (8004d68 <__libc_init_array+0x40>)
 8004d3a:	4c0c      	ldr	r4, [pc, #48]	; (8004d6c <__libc_init_array+0x44>)
 8004d3c:	f002 fa1a 	bl	8007174 <_init>
 8004d40:	1ba4      	subs	r4, r4, r6
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	2500      	movs	r5, #0
 8004d46:	42a5      	cmp	r5, r4
 8004d48:	d105      	bne.n	8004d56 <__libc_init_array+0x2e>
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}
 8004d4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d50:	4798      	blx	r3
 8004d52:	3501      	adds	r5, #1
 8004d54:	e7ee      	b.n	8004d34 <__libc_init_array+0xc>
 8004d56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d5a:	4798      	blx	r3
 8004d5c:	3501      	adds	r5, #1
 8004d5e:	e7f2      	b.n	8004d46 <__libc_init_array+0x1e>
 8004d60:	08007520 	.word	0x08007520
 8004d64:	08007520 	.word	0x08007520
 8004d68:	08007520 	.word	0x08007520
 8004d6c:	08007524 	.word	0x08007524

08004d70 <malloc>:
 8004d70:	4b02      	ldr	r3, [pc, #8]	; (8004d7c <malloc+0xc>)
 8004d72:	4601      	mov	r1, r0
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	f000 b86d 	b.w	8004e54 <_malloc_r>
 8004d7a:	bf00      	nop
 8004d7c:	20000010 	.word	0x20000010

08004d80 <free>:
 8004d80:	4b02      	ldr	r3, [pc, #8]	; (8004d8c <free+0xc>)
 8004d82:	4601      	mov	r1, r0
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	f000 b817 	b.w	8004db8 <_free_r>
 8004d8a:	bf00      	nop
 8004d8c:	20000010 	.word	0x20000010

08004d90 <memcpy>:
 8004d90:	b510      	push	{r4, lr}
 8004d92:	1e43      	subs	r3, r0, #1
 8004d94:	440a      	add	r2, r1
 8004d96:	4291      	cmp	r1, r2
 8004d98:	d100      	bne.n	8004d9c <memcpy+0xc>
 8004d9a:	bd10      	pop	{r4, pc}
 8004d9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da4:	e7f7      	b.n	8004d96 <memcpy+0x6>

08004da6 <memset>:
 8004da6:	4402      	add	r2, r0
 8004da8:	4603      	mov	r3, r0
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d100      	bne.n	8004db0 <memset+0xa>
 8004dae:	4770      	bx	lr
 8004db0:	f803 1b01 	strb.w	r1, [r3], #1
 8004db4:	e7f9      	b.n	8004daa <memset+0x4>
	...

08004db8 <_free_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4605      	mov	r5, r0
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d045      	beq.n	8004e4c <_free_r+0x94>
 8004dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc4:	1f0c      	subs	r4, r1, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bfb8      	it	lt
 8004dca:	18e4      	addlt	r4, r4, r3
 8004dcc:	f001 faee 	bl	80063ac <__malloc_lock>
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <_free_r+0x98>)
 8004dd2:	6813      	ldr	r3, [r2, #0]
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	b933      	cbnz	r3, 8004de6 <_free_r+0x2e>
 8004dd8:	6063      	str	r3, [r4, #4]
 8004dda:	6014      	str	r4, [r2, #0]
 8004ddc:	4628      	mov	r0, r5
 8004dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de2:	f001 bae4 	b.w	80063ae <__malloc_unlock>
 8004de6:	42a3      	cmp	r3, r4
 8004de8:	d90c      	bls.n	8004e04 <_free_r+0x4c>
 8004dea:	6821      	ldr	r1, [r4, #0]
 8004dec:	1862      	adds	r2, r4, r1
 8004dee:	4293      	cmp	r3, r2
 8004df0:	bf04      	itt	eq
 8004df2:	681a      	ldreq	r2, [r3, #0]
 8004df4:	685b      	ldreq	r3, [r3, #4]
 8004df6:	6063      	str	r3, [r4, #4]
 8004df8:	bf04      	itt	eq
 8004dfa:	1852      	addeq	r2, r2, r1
 8004dfc:	6022      	streq	r2, [r4, #0]
 8004dfe:	6004      	str	r4, [r0, #0]
 8004e00:	e7ec      	b.n	8004ddc <_free_r+0x24>
 8004e02:	4613      	mov	r3, r2
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	b10a      	cbz	r2, 8004e0c <_free_r+0x54>
 8004e08:	42a2      	cmp	r2, r4
 8004e0a:	d9fa      	bls.n	8004e02 <_free_r+0x4a>
 8004e0c:	6819      	ldr	r1, [r3, #0]
 8004e0e:	1858      	adds	r0, r3, r1
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d10b      	bne.n	8004e2c <_free_r+0x74>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	4401      	add	r1, r0
 8004e18:	1858      	adds	r0, r3, r1
 8004e1a:	4282      	cmp	r2, r0
 8004e1c:	6019      	str	r1, [r3, #0]
 8004e1e:	d1dd      	bne.n	8004ddc <_free_r+0x24>
 8004e20:	6810      	ldr	r0, [r2, #0]
 8004e22:	6852      	ldr	r2, [r2, #4]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	4401      	add	r1, r0
 8004e28:	6019      	str	r1, [r3, #0]
 8004e2a:	e7d7      	b.n	8004ddc <_free_r+0x24>
 8004e2c:	d902      	bls.n	8004e34 <_free_r+0x7c>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	e7d3      	b.n	8004ddc <_free_r+0x24>
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	1821      	adds	r1, r4, r0
 8004e38:	428a      	cmp	r2, r1
 8004e3a:	bf04      	itt	eq
 8004e3c:	6811      	ldreq	r1, [r2, #0]
 8004e3e:	6852      	ldreq	r2, [r2, #4]
 8004e40:	6062      	str	r2, [r4, #4]
 8004e42:	bf04      	itt	eq
 8004e44:	1809      	addeq	r1, r1, r0
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	605c      	str	r4, [r3, #4]
 8004e4a:	e7c7      	b.n	8004ddc <_free_r+0x24>
 8004e4c:	bd38      	pop	{r3, r4, r5, pc}
 8004e4e:	bf00      	nop
 8004e50:	2000023c 	.word	0x2000023c

08004e54 <_malloc_r>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	1ccd      	adds	r5, r1, #3
 8004e58:	f025 0503 	bic.w	r5, r5, #3
 8004e5c:	3508      	adds	r5, #8
 8004e5e:	2d0c      	cmp	r5, #12
 8004e60:	bf38      	it	cc
 8004e62:	250c      	movcc	r5, #12
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	4606      	mov	r6, r0
 8004e68:	db01      	blt.n	8004e6e <_malloc_r+0x1a>
 8004e6a:	42a9      	cmp	r1, r5
 8004e6c:	d903      	bls.n	8004e76 <_malloc_r+0x22>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	6033      	str	r3, [r6, #0]
 8004e72:	2000      	movs	r0, #0
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
 8004e76:	f001 fa99 	bl	80063ac <__malloc_lock>
 8004e7a:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <_malloc_r+0xac>)
 8004e7c:	6814      	ldr	r4, [r2, #0]
 8004e7e:	4621      	mov	r1, r4
 8004e80:	b991      	cbnz	r1, 8004ea8 <_malloc_r+0x54>
 8004e82:	4c20      	ldr	r4, [pc, #128]	; (8004f04 <_malloc_r+0xb0>)
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	b91b      	cbnz	r3, 8004e90 <_malloc_r+0x3c>
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f000 fc79 	bl	8005780 <_sbrk_r>
 8004e8e:	6020      	str	r0, [r4, #0]
 8004e90:	4629      	mov	r1, r5
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 fc74 	bl	8005780 <_sbrk_r>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d124      	bne.n	8004ee6 <_malloc_r+0x92>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	6033      	str	r3, [r6, #0]
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f001 fa84 	bl	80063ae <__malloc_unlock>
 8004ea6:	e7e4      	b.n	8004e72 <_malloc_r+0x1e>
 8004ea8:	680b      	ldr	r3, [r1, #0]
 8004eaa:	1b5b      	subs	r3, r3, r5
 8004eac:	d418      	bmi.n	8004ee0 <_malloc_r+0x8c>
 8004eae:	2b0b      	cmp	r3, #11
 8004eb0:	d90f      	bls.n	8004ed2 <_malloc_r+0x7e>
 8004eb2:	600b      	str	r3, [r1, #0]
 8004eb4:	50cd      	str	r5, [r1, r3]
 8004eb6:	18cc      	adds	r4, r1, r3
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f001 fa78 	bl	80063ae <__malloc_unlock>
 8004ebe:	f104 000b 	add.w	r0, r4, #11
 8004ec2:	1d23      	adds	r3, r4, #4
 8004ec4:	f020 0007 	bic.w	r0, r0, #7
 8004ec8:	1ac3      	subs	r3, r0, r3
 8004eca:	d0d3      	beq.n	8004e74 <_malloc_r+0x20>
 8004ecc:	425a      	negs	r2, r3
 8004ece:	50e2      	str	r2, [r4, r3]
 8004ed0:	e7d0      	b.n	8004e74 <_malloc_r+0x20>
 8004ed2:	428c      	cmp	r4, r1
 8004ed4:	684b      	ldr	r3, [r1, #4]
 8004ed6:	bf16      	itet	ne
 8004ed8:	6063      	strne	r3, [r4, #4]
 8004eda:	6013      	streq	r3, [r2, #0]
 8004edc:	460c      	movne	r4, r1
 8004ede:	e7eb      	b.n	8004eb8 <_malloc_r+0x64>
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	6849      	ldr	r1, [r1, #4]
 8004ee4:	e7cc      	b.n	8004e80 <_malloc_r+0x2c>
 8004ee6:	1cc4      	adds	r4, r0, #3
 8004ee8:	f024 0403 	bic.w	r4, r4, #3
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d005      	beq.n	8004efc <_malloc_r+0xa8>
 8004ef0:	1a21      	subs	r1, r4, r0
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f000 fc44 	bl	8005780 <_sbrk_r>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d0cf      	beq.n	8004e9c <_malloc_r+0x48>
 8004efc:	6025      	str	r5, [r4, #0]
 8004efe:	e7db      	b.n	8004eb8 <_malloc_r+0x64>
 8004f00:	2000023c 	.word	0x2000023c
 8004f04:	20000240 	.word	0x20000240

08004f08 <__cvt>:
 8004f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f0a:	ed2d 8b02 	vpush	{d8}
 8004f0e:	eeb0 8b40 	vmov.f64	d8, d0
 8004f12:	b085      	sub	sp, #20
 8004f14:	4617      	mov	r7, r2
 8004f16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004f18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004f1a:	ee18 2a90 	vmov	r2, s17
 8004f1e:	f025 0520 	bic.w	r5, r5, #32
 8004f22:	2a00      	cmp	r2, #0
 8004f24:	bfb6      	itet	lt
 8004f26:	222d      	movlt	r2, #45	; 0x2d
 8004f28:	2200      	movge	r2, #0
 8004f2a:	eeb1 8b40 	vneglt.f64	d8, d0
 8004f2e:	2d46      	cmp	r5, #70	; 0x46
 8004f30:	460c      	mov	r4, r1
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	d004      	beq.n	8004f40 <__cvt+0x38>
 8004f36:	2d45      	cmp	r5, #69	; 0x45
 8004f38:	d100      	bne.n	8004f3c <__cvt+0x34>
 8004f3a:	3401      	adds	r4, #1
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	e000      	b.n	8004f42 <__cvt+0x3a>
 8004f40:	2103      	movs	r1, #3
 8004f42:	ab03      	add	r3, sp, #12
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	ab02      	add	r3, sp, #8
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	4633      	mov	r3, r6
 8004f4e:	eeb0 0b48 	vmov.f64	d0, d8
 8004f52:	f000 fcd1 	bl	80058f8 <_dtoa_r>
 8004f56:	2d47      	cmp	r5, #71	; 0x47
 8004f58:	d101      	bne.n	8004f5e <__cvt+0x56>
 8004f5a:	07fb      	lsls	r3, r7, #31
 8004f5c:	d51e      	bpl.n	8004f9c <__cvt+0x94>
 8004f5e:	2d46      	cmp	r5, #70	; 0x46
 8004f60:	eb00 0304 	add.w	r3, r0, r4
 8004f64:	d10c      	bne.n	8004f80 <__cvt+0x78>
 8004f66:	7802      	ldrb	r2, [r0, #0]
 8004f68:	2a30      	cmp	r2, #48	; 0x30
 8004f6a:	d107      	bne.n	8004f7c <__cvt+0x74>
 8004f6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	bf1c      	itt	ne
 8004f76:	f1c4 0401 	rsbne	r4, r4, #1
 8004f7a:	6034      	strne	r4, [r6, #0]
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	4413      	add	r3, r2
 8004f80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	d007      	beq.n	8004f9a <__cvt+0x92>
 8004f8a:	2130      	movs	r1, #48	; 0x30
 8004f8c:	9a03      	ldr	r2, [sp, #12]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d204      	bcs.n	8004f9c <__cvt+0x94>
 8004f92:	1c54      	adds	r4, r2, #1
 8004f94:	9403      	str	r4, [sp, #12]
 8004f96:	7011      	strb	r1, [r2, #0]
 8004f98:	e7f8      	b.n	8004f8c <__cvt+0x84>
 8004f9a:	9303      	str	r3, [sp, #12]
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fa0:	1a1b      	subs	r3, r3, r0
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	b005      	add	sp, #20
 8004fa6:	ecbd 8b02 	vpop	{d8}
 8004faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fac <__exponent>:
 8004fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fae:	2900      	cmp	r1, #0
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	bfba      	itte	lt
 8004fb4:	4249      	neglt	r1, r1
 8004fb6:	232d      	movlt	r3, #45	; 0x2d
 8004fb8:	232b      	movge	r3, #43	; 0x2b
 8004fba:	2909      	cmp	r1, #9
 8004fbc:	f804 2b02 	strb.w	r2, [r4], #2
 8004fc0:	7043      	strb	r3, [r0, #1]
 8004fc2:	dd20      	ble.n	8005006 <__exponent+0x5a>
 8004fc4:	f10d 0307 	add.w	r3, sp, #7
 8004fc8:	461f      	mov	r7, r3
 8004fca:	260a      	movs	r6, #10
 8004fcc:	fb91 f5f6 	sdiv	r5, r1, r6
 8004fd0:	fb06 1115 	mls	r1, r6, r5, r1
 8004fd4:	3130      	adds	r1, #48	; 0x30
 8004fd6:	2d09      	cmp	r5, #9
 8004fd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004fdc:	f103 32ff 	add.w	r2, r3, #4294967295
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	dc09      	bgt.n	8004ff8 <__exponent+0x4c>
 8004fe4:	3130      	adds	r1, #48	; 0x30
 8004fe6:	3b02      	subs	r3, #2
 8004fe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004fec:	42bb      	cmp	r3, r7
 8004fee:	4622      	mov	r2, r4
 8004ff0:	d304      	bcc.n	8004ffc <__exponent+0x50>
 8004ff2:	1a10      	subs	r0, r2, r0
 8004ff4:	b003      	add	sp, #12
 8004ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	e7e7      	b.n	8004fcc <__exponent+0x20>
 8004ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005000:	f804 2b01 	strb.w	r2, [r4], #1
 8005004:	e7f2      	b.n	8004fec <__exponent+0x40>
 8005006:	2330      	movs	r3, #48	; 0x30
 8005008:	4419      	add	r1, r3
 800500a:	7083      	strb	r3, [r0, #2]
 800500c:	1d02      	adds	r2, r0, #4
 800500e:	70c1      	strb	r1, [r0, #3]
 8005010:	e7ef      	b.n	8004ff2 <__exponent+0x46>
 8005012:	0000      	movs	r0, r0
 8005014:	0000      	movs	r0, r0
	...

08005018 <_printf_float>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	b08d      	sub	sp, #52	; 0x34
 800501e:	460c      	mov	r4, r1
 8005020:	4616      	mov	r6, r2
 8005022:	461f      	mov	r7, r3
 8005024:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005028:	4605      	mov	r5, r0
 800502a:	f001 f9b1 	bl	8006390 <_localeconv_r>
 800502e:	f8d0 b000 	ldr.w	fp, [r0]
 8005032:	4658      	mov	r0, fp
 8005034:	f7fb f954 	bl	80002e0 <strlen>
 8005038:	2300      	movs	r3, #0
 800503a:	930a      	str	r3, [sp, #40]	; 0x28
 800503c:	f8d8 3000 	ldr.w	r3, [r8]
 8005040:	9005      	str	r0, [sp, #20]
 8005042:	3307      	adds	r3, #7
 8005044:	f023 0307 	bic.w	r3, r3, #7
 8005048:	f103 0108 	add.w	r1, r3, #8
 800504c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	f8c8 1000 	str.w	r1, [r8]
 8005056:	e9d3 0100 	ldrd	r0, r1, [r3]
 800505a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800505e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80052e8 <_printf_float+0x2d0>
 8005062:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005066:	eeb0 6bc0 	vabs.f64	d6, d0
 800506a:	eeb4 6b47 	vcmp.f64	d6, d7
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	dd24      	ble.n	80050be <_printf_float+0xa6>
 8005074:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507c:	d502      	bpl.n	8005084 <_printf_float+0x6c>
 800507e:	232d      	movs	r3, #45	; 0x2d
 8005080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005084:	499a      	ldr	r1, [pc, #616]	; (80052f0 <_printf_float+0x2d8>)
 8005086:	4b9b      	ldr	r3, [pc, #620]	; (80052f4 <_printf_float+0x2dc>)
 8005088:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800508c:	bf8c      	ite	hi
 800508e:	4688      	movhi	r8, r1
 8005090:	4698      	movls	r8, r3
 8005092:	f022 0204 	bic.w	r2, r2, #4
 8005096:	2303      	movs	r3, #3
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	6022      	str	r2, [r4, #0]
 800509c:	f04f 0a00 	mov.w	sl, #0
 80050a0:	9700      	str	r7, [sp, #0]
 80050a2:	4633      	mov	r3, r6
 80050a4:	aa0b      	add	r2, sp, #44	; 0x2c
 80050a6:	4621      	mov	r1, r4
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 f9e1 	bl	8005470 <_printf_common>
 80050ae:	3001      	adds	r0, #1
 80050b0:	f040 8089 	bne.w	80051c6 <_printf_float+0x1ae>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	b00d      	add	sp, #52	; 0x34
 80050ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050be:	eeb4 0b40 	vcmp.f64	d0, d0
 80050c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c6:	d702      	bvc.n	80050ce <_printf_float+0xb6>
 80050c8:	498b      	ldr	r1, [pc, #556]	; (80052f8 <_printf_float+0x2e0>)
 80050ca:	4b8c      	ldr	r3, [pc, #560]	; (80052fc <_printf_float+0x2e4>)
 80050cc:	e7dc      	b.n	8005088 <_printf_float+0x70>
 80050ce:	6861      	ldr	r1, [r4, #4]
 80050d0:	1c4b      	adds	r3, r1, #1
 80050d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d6:	ab0a      	add	r3, sp, #40	; 0x28
 80050d8:	a809      	add	r0, sp, #36	; 0x24
 80050da:	d13b      	bne.n	8005154 <_printf_float+0x13c>
 80050dc:	2106      	movs	r1, #6
 80050de:	6061      	str	r1, [r4, #4]
 80050e0:	f04f 0c00 	mov.w	ip, #0
 80050e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80050e8:	e9cd 0900 	strd	r0, r9, [sp]
 80050ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	6861      	ldr	r1, [r4, #4]
 80050f4:	4628      	mov	r0, r5
 80050f6:	f7ff ff07 	bl	8004f08 <__cvt>
 80050fa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80050fe:	2b47      	cmp	r3, #71	; 0x47
 8005100:	4680      	mov	r8, r0
 8005102:	d109      	bne.n	8005118 <_printf_float+0x100>
 8005104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005106:	1cd8      	adds	r0, r3, #3
 8005108:	db02      	blt.n	8005110 <_printf_float+0xf8>
 800510a:	6862      	ldr	r2, [r4, #4]
 800510c:	4293      	cmp	r3, r2
 800510e:	dd47      	ble.n	80051a0 <_printf_float+0x188>
 8005110:	f1a9 0902 	sub.w	r9, r9, #2
 8005114:	fa5f f989 	uxtb.w	r9, r9
 8005118:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800511c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800511e:	d824      	bhi.n	800516a <_printf_float+0x152>
 8005120:	3901      	subs	r1, #1
 8005122:	464a      	mov	r2, r9
 8005124:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005128:	9109      	str	r1, [sp, #36]	; 0x24
 800512a:	f7ff ff3f 	bl	8004fac <__exponent>
 800512e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005130:	1813      	adds	r3, r2, r0
 8005132:	2a01      	cmp	r2, #1
 8005134:	4682      	mov	sl, r0
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	dc02      	bgt.n	8005140 <_printf_float+0x128>
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	07d1      	lsls	r1, r2, #31
 800513e:	d501      	bpl.n	8005144 <_printf_float+0x12c>
 8005140:	3301      	adds	r3, #1
 8005142:	6123      	str	r3, [r4, #16]
 8005144:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0a9      	beq.n	80050a0 <_printf_float+0x88>
 800514c:	232d      	movs	r3, #45	; 0x2d
 800514e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005152:	e7a5      	b.n	80050a0 <_printf_float+0x88>
 8005154:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8005158:	f000 8178 	beq.w	800544c <_printf_float+0x434>
 800515c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005160:	d1be      	bne.n	80050e0 <_printf_float+0xc8>
 8005162:	2900      	cmp	r1, #0
 8005164:	d1bc      	bne.n	80050e0 <_printf_float+0xc8>
 8005166:	2101      	movs	r1, #1
 8005168:	e7b9      	b.n	80050de <_printf_float+0xc6>
 800516a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800516e:	d119      	bne.n	80051a4 <_printf_float+0x18c>
 8005170:	2900      	cmp	r1, #0
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	dd0c      	ble.n	8005190 <_printf_float+0x178>
 8005176:	6121      	str	r1, [r4, #16]
 8005178:	b913      	cbnz	r3, 8005180 <_printf_float+0x168>
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	07d2      	lsls	r2, r2, #31
 800517e:	d502      	bpl.n	8005186 <_printf_float+0x16e>
 8005180:	3301      	adds	r3, #1
 8005182:	440b      	add	r3, r1
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005188:	65a3      	str	r3, [r4, #88]	; 0x58
 800518a:	f04f 0a00 	mov.w	sl, #0
 800518e:	e7d9      	b.n	8005144 <_printf_float+0x12c>
 8005190:	b913      	cbnz	r3, 8005198 <_printf_float+0x180>
 8005192:	6822      	ldr	r2, [r4, #0]
 8005194:	07d0      	lsls	r0, r2, #31
 8005196:	d501      	bpl.n	800519c <_printf_float+0x184>
 8005198:	3302      	adds	r3, #2
 800519a:	e7f3      	b.n	8005184 <_printf_float+0x16c>
 800519c:	2301      	movs	r3, #1
 800519e:	e7f1      	b.n	8005184 <_printf_float+0x16c>
 80051a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80051a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051a8:	4293      	cmp	r3, r2
 80051aa:	db05      	blt.n	80051b8 <_printf_float+0x1a0>
 80051ac:	6822      	ldr	r2, [r4, #0]
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	07d1      	lsls	r1, r2, #31
 80051b2:	d5e8      	bpl.n	8005186 <_printf_float+0x16e>
 80051b4:	3301      	adds	r3, #1
 80051b6:	e7e5      	b.n	8005184 <_printf_float+0x16c>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bfd4      	ite	le
 80051bc:	f1c3 0302 	rsble	r3, r3, #2
 80051c0:	2301      	movgt	r3, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	e7de      	b.n	8005184 <_printf_float+0x16c>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	055a      	lsls	r2, r3, #21
 80051ca:	d407      	bmi.n	80051dc <_printf_float+0x1c4>
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	4642      	mov	r2, r8
 80051d0:	4631      	mov	r1, r6
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	d12a      	bne.n	8005230 <_printf_float+0x218>
 80051da:	e76b      	b.n	80050b4 <_printf_float+0x9c>
 80051dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80051e0:	f240 80de 	bls.w	80053a0 <_printf_float+0x388>
 80051e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80051e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	d133      	bne.n	800525a <_printf_float+0x242>
 80051f2:	2301      	movs	r3, #1
 80051f4:	4a42      	ldr	r2, [pc, #264]	; (8005300 <_printf_float+0x2e8>)
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	f43f af59 	beq.w	80050b4 <_printf_float+0x9c>
 8005202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005206:	429a      	cmp	r2, r3
 8005208:	db02      	blt.n	8005210 <_printf_float+0x1f8>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	07d8      	lsls	r0, r3, #31
 800520e:	d50f      	bpl.n	8005230 <_printf_float+0x218>
 8005210:	9b05      	ldr	r3, [sp, #20]
 8005212:	465a      	mov	r2, fp
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	f43f af4a 	beq.w	80050b4 <_printf_float+0x9c>
 8005220:	f04f 0800 	mov.w	r8, #0
 8005224:	f104 091a 	add.w	r9, r4, #26
 8005228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800522a:	3b01      	subs	r3, #1
 800522c:	4543      	cmp	r3, r8
 800522e:	dc09      	bgt.n	8005244 <_printf_float+0x22c>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	079b      	lsls	r3, r3, #30
 8005234:	f100 8105 	bmi.w	8005442 <_printf_float+0x42a>
 8005238:	68e0      	ldr	r0, [r4, #12]
 800523a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800523c:	4298      	cmp	r0, r3
 800523e:	bfb8      	it	lt
 8005240:	4618      	movlt	r0, r3
 8005242:	e739      	b.n	80050b8 <_printf_float+0xa0>
 8005244:	2301      	movs	r3, #1
 8005246:	464a      	mov	r2, r9
 8005248:	4631      	mov	r1, r6
 800524a:	4628      	mov	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	f43f af30 	beq.w	80050b4 <_printf_float+0x9c>
 8005254:	f108 0801 	add.w	r8, r8, #1
 8005258:	e7e6      	b.n	8005228 <_printf_float+0x210>
 800525a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	dc2b      	bgt.n	80052b8 <_printf_float+0x2a0>
 8005260:	2301      	movs	r3, #1
 8005262:	4a27      	ldr	r2, [pc, #156]	; (8005300 <_printf_float+0x2e8>)
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f af22 	beq.w	80050b4 <_printf_float+0x9c>
 8005270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005272:	b923      	cbnz	r3, 800527e <_printf_float+0x266>
 8005274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005276:	b913      	cbnz	r3, 800527e <_printf_float+0x266>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	07d9      	lsls	r1, r3, #31
 800527c:	d5d8      	bpl.n	8005230 <_printf_float+0x218>
 800527e:	9b05      	ldr	r3, [sp, #20]
 8005280:	465a      	mov	r2, fp
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f af13 	beq.w	80050b4 <_printf_float+0x9c>
 800528e:	f04f 0900 	mov.w	r9, #0
 8005292:	f104 0a1a 	add.w	sl, r4, #26
 8005296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005298:	425b      	negs	r3, r3
 800529a:	454b      	cmp	r3, r9
 800529c:	dc01      	bgt.n	80052a2 <_printf_float+0x28a>
 800529e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a0:	e795      	b.n	80051ce <_printf_float+0x1b6>
 80052a2:	2301      	movs	r3, #1
 80052a4:	4652      	mov	r2, sl
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	f43f af01 	beq.w	80050b4 <_printf_float+0x9c>
 80052b2:	f109 0901 	add.w	r9, r9, #1
 80052b6:	e7ee      	b.n	8005296 <_printf_float+0x27e>
 80052b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052bc:	429a      	cmp	r2, r3
 80052be:	bfa8      	it	ge
 80052c0:	461a      	movge	r2, r3
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	4691      	mov	r9, r2
 80052c6:	dd07      	ble.n	80052d8 <_printf_float+0x2c0>
 80052c8:	4613      	mov	r3, r2
 80052ca:	4631      	mov	r1, r6
 80052cc:	4642      	mov	r2, r8
 80052ce:	4628      	mov	r0, r5
 80052d0:	47b8      	blx	r7
 80052d2:	3001      	adds	r0, #1
 80052d4:	f43f aeee 	beq.w	80050b4 <_printf_float+0x9c>
 80052d8:	f104 031a 	add.w	r3, r4, #26
 80052dc:	f04f 0a00 	mov.w	sl, #0
 80052e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052e4:	9307      	str	r3, [sp, #28]
 80052e6:	e017      	b.n	8005318 <_printf_float+0x300>
 80052e8:	ffffffff 	.word	0xffffffff
 80052ec:	7fefffff 	.word	0x7fefffff
 80052f0:	08007274 	.word	0x08007274
 80052f4:	08007270 	.word	0x08007270
 80052f8:	0800727c 	.word	0x0800727c
 80052fc:	08007278 	.word	0x08007278
 8005300:	08007280 	.word	0x08007280
 8005304:	2301      	movs	r3, #1
 8005306:	9a07      	ldr	r2, [sp, #28]
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	47b8      	blx	r7
 800530e:	3001      	adds	r0, #1
 8005310:	f43f aed0 	beq.w	80050b4 <_printf_float+0x9c>
 8005314:	f10a 0a01 	add.w	sl, sl, #1
 8005318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800531a:	9306      	str	r3, [sp, #24]
 800531c:	eba3 0309 	sub.w	r3, r3, r9
 8005320:	4553      	cmp	r3, sl
 8005322:	dcef      	bgt.n	8005304 <_printf_float+0x2ec>
 8005324:	9b06      	ldr	r3, [sp, #24]
 8005326:	4498      	add	r8, r3
 8005328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800532c:	429a      	cmp	r2, r3
 800532e:	db15      	blt.n	800535c <_printf_float+0x344>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	07da      	lsls	r2, r3, #31
 8005334:	d412      	bmi.n	800535c <_printf_float+0x344>
 8005336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005338:	9a06      	ldr	r2, [sp, #24]
 800533a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800533c:	1a9a      	subs	r2, r3, r2
 800533e:	eba3 0a01 	sub.w	sl, r3, r1
 8005342:	4592      	cmp	sl, r2
 8005344:	bfa8      	it	ge
 8005346:	4692      	movge	sl, r2
 8005348:	f1ba 0f00 	cmp.w	sl, #0
 800534c:	dc0e      	bgt.n	800536c <_printf_float+0x354>
 800534e:	f04f 0800 	mov.w	r8, #0
 8005352:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005356:	f104 091a 	add.w	r9, r4, #26
 800535a:	e019      	b.n	8005390 <_printf_float+0x378>
 800535c:	9b05      	ldr	r3, [sp, #20]
 800535e:	465a      	mov	r2, fp
 8005360:	4631      	mov	r1, r6
 8005362:	4628      	mov	r0, r5
 8005364:	47b8      	blx	r7
 8005366:	3001      	adds	r0, #1
 8005368:	d1e5      	bne.n	8005336 <_printf_float+0x31e>
 800536a:	e6a3      	b.n	80050b4 <_printf_float+0x9c>
 800536c:	4653      	mov	r3, sl
 800536e:	4642      	mov	r2, r8
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	d1e9      	bne.n	800534e <_printf_float+0x336>
 800537a:	e69b      	b.n	80050b4 <_printf_float+0x9c>
 800537c:	2301      	movs	r3, #1
 800537e:	464a      	mov	r2, r9
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	f43f ae94 	beq.w	80050b4 <_printf_float+0x9c>
 800538c:	f108 0801 	add.w	r8, r8, #1
 8005390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	eba3 030a 	sub.w	r3, r3, sl
 800539a:	4543      	cmp	r3, r8
 800539c:	dcee      	bgt.n	800537c <_printf_float+0x364>
 800539e:	e747      	b.n	8005230 <_printf_float+0x218>
 80053a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053a2:	2a01      	cmp	r2, #1
 80053a4:	dc01      	bgt.n	80053aa <_printf_float+0x392>
 80053a6:	07db      	lsls	r3, r3, #31
 80053a8:	d539      	bpl.n	800541e <_printf_float+0x406>
 80053aa:	2301      	movs	r3, #1
 80053ac:	4642      	mov	r2, r8
 80053ae:	4631      	mov	r1, r6
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b8      	blx	r7
 80053b4:	3001      	adds	r0, #1
 80053b6:	f43f ae7d 	beq.w	80050b4 <_printf_float+0x9c>
 80053ba:	9b05      	ldr	r3, [sp, #20]
 80053bc:	465a      	mov	r2, fp
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	f108 0801 	add.w	r8, r8, #1
 80053ca:	f43f ae73 	beq.w	80050b4 <_printf_float+0x9c>
 80053ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80053d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80053d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80053e0:	d018      	beq.n	8005414 <_printf_float+0x3fc>
 80053e2:	4642      	mov	r2, r8
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	d10e      	bne.n	800540c <_printf_float+0x3f4>
 80053ee:	e661      	b.n	80050b4 <_printf_float+0x9c>
 80053f0:	2301      	movs	r3, #1
 80053f2:	464a      	mov	r2, r9
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	f43f ae5a 	beq.w	80050b4 <_printf_float+0x9c>
 8005400:	f108 0801 	add.w	r8, r8, #1
 8005404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005406:	3b01      	subs	r3, #1
 8005408:	4543      	cmp	r3, r8
 800540a:	dcf1      	bgt.n	80053f0 <_printf_float+0x3d8>
 800540c:	4653      	mov	r3, sl
 800540e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005412:	e6dd      	b.n	80051d0 <_printf_float+0x1b8>
 8005414:	f04f 0800 	mov.w	r8, #0
 8005418:	f104 091a 	add.w	r9, r4, #26
 800541c:	e7f2      	b.n	8005404 <_printf_float+0x3ec>
 800541e:	2301      	movs	r3, #1
 8005420:	e7df      	b.n	80053e2 <_printf_float+0x3ca>
 8005422:	2301      	movs	r3, #1
 8005424:	464a      	mov	r2, r9
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	f43f ae41 	beq.w	80050b4 <_printf_float+0x9c>
 8005432:	f108 0801 	add.w	r8, r8, #1
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	4543      	cmp	r3, r8
 800543e:	dcf0      	bgt.n	8005422 <_printf_float+0x40a>
 8005440:	e6fa      	b.n	8005238 <_printf_float+0x220>
 8005442:	f04f 0800 	mov.w	r8, #0
 8005446:	f104 0919 	add.w	r9, r4, #25
 800544a:	e7f4      	b.n	8005436 <_printf_float+0x41e>
 800544c:	2900      	cmp	r1, #0
 800544e:	f43f ae8a 	beq.w	8005166 <_printf_float+0x14e>
 8005452:	f04f 0c00 	mov.w	ip, #0
 8005456:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800545a:	e9cd 0900 	strd	r0, r9, [sp]
 800545e:	6022      	str	r2, [r4, #0]
 8005460:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005464:	4628      	mov	r0, r5
 8005466:	f7ff fd4f 	bl	8004f08 <__cvt>
 800546a:	4680      	mov	r8, r0
 800546c:	e64a      	b.n	8005104 <_printf_float+0xec>
 800546e:	bf00      	nop

08005470 <_printf_common>:
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	4691      	mov	r9, r2
 8005476:	461f      	mov	r7, r3
 8005478:	688a      	ldr	r2, [r1, #8]
 800547a:	690b      	ldr	r3, [r1, #16]
 800547c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005480:	4293      	cmp	r3, r2
 8005482:	bfb8      	it	lt
 8005484:	4613      	movlt	r3, r2
 8005486:	f8c9 3000 	str.w	r3, [r9]
 800548a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800548e:	4606      	mov	r6, r0
 8005490:	460c      	mov	r4, r1
 8005492:	b112      	cbz	r2, 800549a <_printf_common+0x2a>
 8005494:	3301      	adds	r3, #1
 8005496:	f8c9 3000 	str.w	r3, [r9]
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	0699      	lsls	r1, r3, #26
 800549e:	bf42      	ittt	mi
 80054a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054a4:	3302      	addmi	r3, #2
 80054a6:	f8c9 3000 	strmi.w	r3, [r9]
 80054aa:	6825      	ldr	r5, [r4, #0]
 80054ac:	f015 0506 	ands.w	r5, r5, #6
 80054b0:	d107      	bne.n	80054c2 <_printf_common+0x52>
 80054b2:	f104 0a19 	add.w	sl, r4, #25
 80054b6:	68e3      	ldr	r3, [r4, #12]
 80054b8:	f8d9 2000 	ldr.w	r2, [r9]
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	42ab      	cmp	r3, r5
 80054c0:	dc28      	bgt.n	8005514 <_printf_common+0xa4>
 80054c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	3300      	adds	r3, #0
 80054ca:	bf18      	it	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	0692      	lsls	r2, r2, #26
 80054d0:	d42d      	bmi.n	800552e <_printf_common+0xbe>
 80054d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054d6:	4639      	mov	r1, r7
 80054d8:	4630      	mov	r0, r6
 80054da:	47c0      	blx	r8
 80054dc:	3001      	adds	r0, #1
 80054de:	d020      	beq.n	8005522 <_printf_common+0xb2>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	68e5      	ldr	r5, [r4, #12]
 80054e4:	f8d9 2000 	ldr.w	r2, [r9]
 80054e8:	f003 0306 	and.w	r3, r3, #6
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	bf08      	it	eq
 80054f0:	1aad      	subeq	r5, r5, r2
 80054f2:	68a3      	ldr	r3, [r4, #8]
 80054f4:	6922      	ldr	r2, [r4, #16]
 80054f6:	bf0c      	ite	eq
 80054f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054fc:	2500      	movne	r5, #0
 80054fe:	4293      	cmp	r3, r2
 8005500:	bfc4      	itt	gt
 8005502:	1a9b      	subgt	r3, r3, r2
 8005504:	18ed      	addgt	r5, r5, r3
 8005506:	f04f 0900 	mov.w	r9, #0
 800550a:	341a      	adds	r4, #26
 800550c:	454d      	cmp	r5, r9
 800550e:	d11a      	bne.n	8005546 <_printf_common+0xd6>
 8005510:	2000      	movs	r0, #0
 8005512:	e008      	b.n	8005526 <_printf_common+0xb6>
 8005514:	2301      	movs	r3, #1
 8005516:	4652      	mov	r2, sl
 8005518:	4639      	mov	r1, r7
 800551a:	4630      	mov	r0, r6
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d103      	bne.n	800552a <_printf_common+0xba>
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552a:	3501      	adds	r5, #1
 800552c:	e7c3      	b.n	80054b6 <_printf_common+0x46>
 800552e:	18e1      	adds	r1, r4, r3
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	2030      	movs	r0, #48	; 0x30
 8005534:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005538:	4422      	add	r2, r4
 800553a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800553e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005542:	3302      	adds	r3, #2
 8005544:	e7c5      	b.n	80054d2 <_printf_common+0x62>
 8005546:	2301      	movs	r3, #1
 8005548:	4622      	mov	r2, r4
 800554a:	4639      	mov	r1, r7
 800554c:	4630      	mov	r0, r6
 800554e:	47c0      	blx	r8
 8005550:	3001      	adds	r0, #1
 8005552:	d0e6      	beq.n	8005522 <_printf_common+0xb2>
 8005554:	f109 0901 	add.w	r9, r9, #1
 8005558:	e7d8      	b.n	800550c <_printf_common+0x9c>
	...

0800555c <_printf_i>:
 800555c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005560:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005564:	460c      	mov	r4, r1
 8005566:	7e09      	ldrb	r1, [r1, #24]
 8005568:	b085      	sub	sp, #20
 800556a:	296e      	cmp	r1, #110	; 0x6e
 800556c:	4617      	mov	r7, r2
 800556e:	4606      	mov	r6, r0
 8005570:	4698      	mov	r8, r3
 8005572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005574:	f000 80b3 	beq.w	80056de <_printf_i+0x182>
 8005578:	d822      	bhi.n	80055c0 <_printf_i+0x64>
 800557a:	2963      	cmp	r1, #99	; 0x63
 800557c:	d036      	beq.n	80055ec <_printf_i+0x90>
 800557e:	d80a      	bhi.n	8005596 <_printf_i+0x3a>
 8005580:	2900      	cmp	r1, #0
 8005582:	f000 80b9 	beq.w	80056f8 <_printf_i+0x19c>
 8005586:	2958      	cmp	r1, #88	; 0x58
 8005588:	f000 8083 	beq.w	8005692 <_printf_i+0x136>
 800558c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005590:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005594:	e032      	b.n	80055fc <_printf_i+0xa0>
 8005596:	2964      	cmp	r1, #100	; 0x64
 8005598:	d001      	beq.n	800559e <_printf_i+0x42>
 800559a:	2969      	cmp	r1, #105	; 0x69
 800559c:	d1f6      	bne.n	800558c <_printf_i+0x30>
 800559e:	6820      	ldr	r0, [r4, #0]
 80055a0:	6813      	ldr	r3, [r2, #0]
 80055a2:	0605      	lsls	r5, r0, #24
 80055a4:	f103 0104 	add.w	r1, r3, #4
 80055a8:	d52a      	bpl.n	8005600 <_printf_i+0xa4>
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6011      	str	r1, [r2, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da03      	bge.n	80055ba <_printf_i+0x5e>
 80055b2:	222d      	movs	r2, #45	; 0x2d
 80055b4:	425b      	negs	r3, r3
 80055b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055ba:	486f      	ldr	r0, [pc, #444]	; (8005778 <_printf_i+0x21c>)
 80055bc:	220a      	movs	r2, #10
 80055be:	e039      	b.n	8005634 <_printf_i+0xd8>
 80055c0:	2973      	cmp	r1, #115	; 0x73
 80055c2:	f000 809d 	beq.w	8005700 <_printf_i+0x1a4>
 80055c6:	d808      	bhi.n	80055da <_printf_i+0x7e>
 80055c8:	296f      	cmp	r1, #111	; 0x6f
 80055ca:	d020      	beq.n	800560e <_printf_i+0xb2>
 80055cc:	2970      	cmp	r1, #112	; 0x70
 80055ce:	d1dd      	bne.n	800558c <_printf_i+0x30>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	f043 0320 	orr.w	r3, r3, #32
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	e003      	b.n	80055e2 <_printf_i+0x86>
 80055da:	2975      	cmp	r1, #117	; 0x75
 80055dc:	d017      	beq.n	800560e <_printf_i+0xb2>
 80055de:	2978      	cmp	r1, #120	; 0x78
 80055e0:	d1d4      	bne.n	800558c <_printf_i+0x30>
 80055e2:	2378      	movs	r3, #120	; 0x78
 80055e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055e8:	4864      	ldr	r0, [pc, #400]	; (800577c <_printf_i+0x220>)
 80055ea:	e055      	b.n	8005698 <_printf_i+0x13c>
 80055ec:	6813      	ldr	r3, [r2, #0]
 80055ee:	1d19      	adds	r1, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6011      	str	r1, [r2, #0]
 80055f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055fc:	2301      	movs	r3, #1
 80055fe:	e08c      	b.n	800571a <_printf_i+0x1be>
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6011      	str	r1, [r2, #0]
 8005604:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005608:	bf18      	it	ne
 800560a:	b21b      	sxthne	r3, r3
 800560c:	e7cf      	b.n	80055ae <_printf_i+0x52>
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	6825      	ldr	r5, [r4, #0]
 8005612:	1d18      	adds	r0, r3, #4
 8005614:	6010      	str	r0, [r2, #0]
 8005616:	0628      	lsls	r0, r5, #24
 8005618:	d501      	bpl.n	800561e <_printf_i+0xc2>
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	e002      	b.n	8005624 <_printf_i+0xc8>
 800561e:	0668      	lsls	r0, r5, #25
 8005620:	d5fb      	bpl.n	800561a <_printf_i+0xbe>
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	4854      	ldr	r0, [pc, #336]	; (8005778 <_printf_i+0x21c>)
 8005626:	296f      	cmp	r1, #111	; 0x6f
 8005628:	bf14      	ite	ne
 800562a:	220a      	movne	r2, #10
 800562c:	2208      	moveq	r2, #8
 800562e:	2100      	movs	r1, #0
 8005630:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005634:	6865      	ldr	r5, [r4, #4]
 8005636:	60a5      	str	r5, [r4, #8]
 8005638:	2d00      	cmp	r5, #0
 800563a:	f2c0 8095 	blt.w	8005768 <_printf_i+0x20c>
 800563e:	6821      	ldr	r1, [r4, #0]
 8005640:	f021 0104 	bic.w	r1, r1, #4
 8005644:	6021      	str	r1, [r4, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d13d      	bne.n	80056c6 <_printf_i+0x16a>
 800564a:	2d00      	cmp	r5, #0
 800564c:	f040 808e 	bne.w	800576c <_printf_i+0x210>
 8005650:	4665      	mov	r5, ip
 8005652:	2a08      	cmp	r2, #8
 8005654:	d10b      	bne.n	800566e <_printf_i+0x112>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	07db      	lsls	r3, r3, #31
 800565a:	d508      	bpl.n	800566e <_printf_i+0x112>
 800565c:	6923      	ldr	r3, [r4, #16]
 800565e:	6862      	ldr	r2, [r4, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	bfde      	ittt	le
 8005664:	2330      	movle	r3, #48	; 0x30
 8005666:	f805 3c01 	strble.w	r3, [r5, #-1]
 800566a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800566e:	ebac 0305 	sub.w	r3, ip, r5
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	f8cd 8000 	str.w	r8, [sp]
 8005678:	463b      	mov	r3, r7
 800567a:	aa03      	add	r2, sp, #12
 800567c:	4621      	mov	r1, r4
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff fef6 	bl	8005470 <_printf_common>
 8005684:	3001      	adds	r0, #1
 8005686:	d14d      	bne.n	8005724 <_printf_i+0x1c8>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	b005      	add	sp, #20
 800568e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005692:	4839      	ldr	r0, [pc, #228]	; (8005778 <_printf_i+0x21c>)
 8005694:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005698:	6813      	ldr	r3, [r2, #0]
 800569a:	6821      	ldr	r1, [r4, #0]
 800569c:	1d1d      	adds	r5, r3, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6015      	str	r5, [r2, #0]
 80056a2:	060a      	lsls	r2, r1, #24
 80056a4:	d50b      	bpl.n	80056be <_printf_i+0x162>
 80056a6:	07ca      	lsls	r2, r1, #31
 80056a8:	bf44      	itt	mi
 80056aa:	f041 0120 	orrmi.w	r1, r1, #32
 80056ae:	6021      	strmi	r1, [r4, #0]
 80056b0:	b91b      	cbnz	r3, 80056ba <_printf_i+0x15e>
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	f022 0220 	bic.w	r2, r2, #32
 80056b8:	6022      	str	r2, [r4, #0]
 80056ba:	2210      	movs	r2, #16
 80056bc:	e7b7      	b.n	800562e <_printf_i+0xd2>
 80056be:	064d      	lsls	r5, r1, #25
 80056c0:	bf48      	it	mi
 80056c2:	b29b      	uxthmi	r3, r3
 80056c4:	e7ef      	b.n	80056a6 <_printf_i+0x14a>
 80056c6:	4665      	mov	r5, ip
 80056c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80056cc:	fb02 3311 	mls	r3, r2, r1, r3
 80056d0:	5cc3      	ldrb	r3, [r0, r3]
 80056d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056d6:	460b      	mov	r3, r1
 80056d8:	2900      	cmp	r1, #0
 80056da:	d1f5      	bne.n	80056c8 <_printf_i+0x16c>
 80056dc:	e7b9      	b.n	8005652 <_printf_i+0xf6>
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	6825      	ldr	r5, [r4, #0]
 80056e2:	6961      	ldr	r1, [r4, #20]
 80056e4:	1d18      	adds	r0, r3, #4
 80056e6:	6010      	str	r0, [r2, #0]
 80056e8:	0628      	lsls	r0, r5, #24
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	d501      	bpl.n	80056f2 <_printf_i+0x196>
 80056ee:	6019      	str	r1, [r3, #0]
 80056f0:	e002      	b.n	80056f8 <_printf_i+0x19c>
 80056f2:	066a      	lsls	r2, r5, #25
 80056f4:	d5fb      	bpl.n	80056ee <_printf_i+0x192>
 80056f6:	8019      	strh	r1, [r3, #0]
 80056f8:	2300      	movs	r3, #0
 80056fa:	6123      	str	r3, [r4, #16]
 80056fc:	4665      	mov	r5, ip
 80056fe:	e7b9      	b.n	8005674 <_printf_i+0x118>
 8005700:	6813      	ldr	r3, [r2, #0]
 8005702:	1d19      	adds	r1, r3, #4
 8005704:	6011      	str	r1, [r2, #0]
 8005706:	681d      	ldr	r5, [r3, #0]
 8005708:	6862      	ldr	r2, [r4, #4]
 800570a:	2100      	movs	r1, #0
 800570c:	4628      	mov	r0, r5
 800570e:	f7fa fdef 	bl	80002f0 <memchr>
 8005712:	b108      	cbz	r0, 8005718 <_printf_i+0x1bc>
 8005714:	1b40      	subs	r0, r0, r5
 8005716:	6060      	str	r0, [r4, #4]
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	6123      	str	r3, [r4, #16]
 800571c:	2300      	movs	r3, #0
 800571e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005722:	e7a7      	b.n	8005674 <_printf_i+0x118>
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	462a      	mov	r2, r5
 8005728:	4639      	mov	r1, r7
 800572a:	4630      	mov	r0, r6
 800572c:	47c0      	blx	r8
 800572e:	3001      	adds	r0, #1
 8005730:	d0aa      	beq.n	8005688 <_printf_i+0x12c>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	079b      	lsls	r3, r3, #30
 8005736:	d413      	bmi.n	8005760 <_printf_i+0x204>
 8005738:	68e0      	ldr	r0, [r4, #12]
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	4298      	cmp	r0, r3
 800573e:	bfb8      	it	lt
 8005740:	4618      	movlt	r0, r3
 8005742:	e7a3      	b.n	800568c <_printf_i+0x130>
 8005744:	2301      	movs	r3, #1
 8005746:	464a      	mov	r2, r9
 8005748:	4639      	mov	r1, r7
 800574a:	4630      	mov	r0, r6
 800574c:	47c0      	blx	r8
 800574e:	3001      	adds	r0, #1
 8005750:	d09a      	beq.n	8005688 <_printf_i+0x12c>
 8005752:	3501      	adds	r5, #1
 8005754:	68e3      	ldr	r3, [r4, #12]
 8005756:	9a03      	ldr	r2, [sp, #12]
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	42ab      	cmp	r3, r5
 800575c:	dcf2      	bgt.n	8005744 <_printf_i+0x1e8>
 800575e:	e7eb      	b.n	8005738 <_printf_i+0x1dc>
 8005760:	2500      	movs	r5, #0
 8005762:	f104 0919 	add.w	r9, r4, #25
 8005766:	e7f5      	b.n	8005754 <_printf_i+0x1f8>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ac      	bne.n	80056c6 <_printf_i+0x16a>
 800576c:	7803      	ldrb	r3, [r0, #0]
 800576e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005772:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005776:	e76c      	b.n	8005652 <_printf_i+0xf6>
 8005778:	08007282 	.word	0x08007282
 800577c:	08007293 	.word	0x08007293

08005780 <_sbrk_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4c06      	ldr	r4, [pc, #24]	; (800579c <_sbrk_r+0x1c>)
 8005784:	2300      	movs	r3, #0
 8005786:	4605      	mov	r5, r0
 8005788:	4608      	mov	r0, r1
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	f7fb fd8c 	bl	80012a8 <_sbrk>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_sbrk_r+0x1a>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	b103      	cbz	r3, 800579a <_sbrk_r+0x1a>
 8005798:	602b      	str	r3, [r5, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	20006320 	.word	0x20006320

080057a0 <siprintf>:
 80057a0:	b40e      	push	{r1, r2, r3}
 80057a2:	b500      	push	{lr}
 80057a4:	b09c      	sub	sp, #112	; 0x70
 80057a6:	ab1d      	add	r3, sp, #116	; 0x74
 80057a8:	9002      	str	r0, [sp, #8]
 80057aa:	9006      	str	r0, [sp, #24]
 80057ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057b0:	4809      	ldr	r0, [pc, #36]	; (80057d8 <siprintf+0x38>)
 80057b2:	9107      	str	r1, [sp, #28]
 80057b4:	9104      	str	r1, [sp, #16]
 80057b6:	4909      	ldr	r1, [pc, #36]	; (80057dc <siprintf+0x3c>)
 80057b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057bc:	9105      	str	r1, [sp, #20]
 80057be:	6800      	ldr	r0, [r0, #0]
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	a902      	add	r1, sp, #8
 80057c4:	f001 f938 	bl	8006a38 <_svfiprintf_r>
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	b01c      	add	sp, #112	; 0x70
 80057d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d4:	b003      	add	sp, #12
 80057d6:	4770      	bx	lr
 80057d8:	20000010 	.word	0x20000010
 80057dc:	ffff0208 	.word	0xffff0208

080057e0 <quorem>:
 80057e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	6903      	ldr	r3, [r0, #16]
 80057e6:	690c      	ldr	r4, [r1, #16]
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	4680      	mov	r8, r0
 80057ec:	f2c0 8082 	blt.w	80058f4 <quorem+0x114>
 80057f0:	3c01      	subs	r4, #1
 80057f2:	f101 0714 	add.w	r7, r1, #20
 80057f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80057fa:	f100 0614 	add.w	r6, r0, #20
 80057fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005802:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005806:	eb06 030c 	add.w	r3, r6, ip
 800580a:	3501      	adds	r5, #1
 800580c:	eb07 090c 	add.w	r9, r7, ip
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	fbb0 f5f5 	udiv	r5, r0, r5
 8005816:	b395      	cbz	r5, 800587e <quorem+0x9e>
 8005818:	f04f 0a00 	mov.w	sl, #0
 800581c:	4638      	mov	r0, r7
 800581e:	46b6      	mov	lr, r6
 8005820:	46d3      	mov	fp, sl
 8005822:	f850 2b04 	ldr.w	r2, [r0], #4
 8005826:	b293      	uxth	r3, r2
 8005828:	fb05 a303 	mla	r3, r5, r3, sl
 800582c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005830:	b29b      	uxth	r3, r3
 8005832:	ebab 0303 	sub.w	r3, fp, r3
 8005836:	0c12      	lsrs	r2, r2, #16
 8005838:	f8de b000 	ldr.w	fp, [lr]
 800583c:	fb05 a202 	mla	r2, r5, r2, sl
 8005840:	fa13 f38b 	uxtah	r3, r3, fp
 8005844:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005848:	fa1f fb82 	uxth.w	fp, r2
 800584c:	f8de 2000 	ldr.w	r2, [lr]
 8005850:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005854:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005858:	b29b      	uxth	r3, r3
 800585a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800585e:	4581      	cmp	r9, r0
 8005860:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005864:	f84e 3b04 	str.w	r3, [lr], #4
 8005868:	d2db      	bcs.n	8005822 <quorem+0x42>
 800586a:	f856 300c 	ldr.w	r3, [r6, ip]
 800586e:	b933      	cbnz	r3, 800587e <quorem+0x9e>
 8005870:	9b01      	ldr	r3, [sp, #4]
 8005872:	3b04      	subs	r3, #4
 8005874:	429e      	cmp	r6, r3
 8005876:	461a      	mov	r2, r3
 8005878:	d330      	bcc.n	80058dc <quorem+0xfc>
 800587a:	f8c8 4010 	str.w	r4, [r8, #16]
 800587e:	4640      	mov	r0, r8
 8005880:	f000 ffac 	bl	80067dc <__mcmp>
 8005884:	2800      	cmp	r0, #0
 8005886:	db25      	blt.n	80058d4 <quorem+0xf4>
 8005888:	3501      	adds	r5, #1
 800588a:	4630      	mov	r0, r6
 800588c:	f04f 0c00 	mov.w	ip, #0
 8005890:	f857 2b04 	ldr.w	r2, [r7], #4
 8005894:	f8d0 e000 	ldr.w	lr, [r0]
 8005898:	b293      	uxth	r3, r2
 800589a:	ebac 0303 	sub.w	r3, ip, r3
 800589e:	0c12      	lsrs	r2, r2, #16
 80058a0:	fa13 f38e 	uxtah	r3, r3, lr
 80058a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058b2:	45b9      	cmp	r9, r7
 80058b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058b8:	f840 3b04 	str.w	r3, [r0], #4
 80058bc:	d2e8      	bcs.n	8005890 <quorem+0xb0>
 80058be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80058c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80058c6:	b92a      	cbnz	r2, 80058d4 <quorem+0xf4>
 80058c8:	3b04      	subs	r3, #4
 80058ca:	429e      	cmp	r6, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	d30b      	bcc.n	80058e8 <quorem+0x108>
 80058d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80058d4:	4628      	mov	r0, r5
 80058d6:	b003      	add	sp, #12
 80058d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	3b04      	subs	r3, #4
 80058e0:	2a00      	cmp	r2, #0
 80058e2:	d1ca      	bne.n	800587a <quorem+0x9a>
 80058e4:	3c01      	subs	r4, #1
 80058e6:	e7c5      	b.n	8005874 <quorem+0x94>
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	3b04      	subs	r3, #4
 80058ec:	2a00      	cmp	r2, #0
 80058ee:	d1ef      	bne.n	80058d0 <quorem+0xf0>
 80058f0:	3c01      	subs	r4, #1
 80058f2:	e7ea      	b.n	80058ca <quorem+0xea>
 80058f4:	2000      	movs	r0, #0
 80058f6:	e7ee      	b.n	80058d6 <quorem+0xf6>

080058f8 <_dtoa_r>:
 80058f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	ec57 6b10 	vmov	r6, r7, d0
 8005900:	b095      	sub	sp, #84	; 0x54
 8005902:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005904:	9108      	str	r1, [sp, #32]
 8005906:	4604      	mov	r4, r0
 8005908:	920a      	str	r2, [sp, #40]	; 0x28
 800590a:	9311      	str	r3, [sp, #68]	; 0x44
 800590c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005910:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005914:	b93d      	cbnz	r5, 8005926 <_dtoa_r+0x2e>
 8005916:	2010      	movs	r0, #16
 8005918:	f7ff fa2a 	bl	8004d70 <malloc>
 800591c:	6260      	str	r0, [r4, #36]	; 0x24
 800591e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005922:	6005      	str	r5, [r0, #0]
 8005924:	60c5      	str	r5, [r0, #12]
 8005926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005928:	6819      	ldr	r1, [r3, #0]
 800592a:	b151      	cbz	r1, 8005942 <_dtoa_r+0x4a>
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	604a      	str	r2, [r1, #4]
 8005930:	2301      	movs	r3, #1
 8005932:	4093      	lsls	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
 8005936:	4620      	mov	r0, r4
 8005938:	f000 fd6e 	bl	8006418 <_Bfree>
 800593c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	1e3b      	subs	r3, r7, #0
 8005944:	bfb9      	ittee	lt
 8005946:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800594a:	9303      	strlt	r3, [sp, #12]
 800594c:	2300      	movge	r3, #0
 800594e:	f8c8 3000 	strge.w	r3, [r8]
 8005952:	9d03      	ldr	r5, [sp, #12]
 8005954:	4bac      	ldr	r3, [pc, #688]	; (8005c08 <_dtoa_r+0x310>)
 8005956:	bfbc      	itt	lt
 8005958:	2201      	movlt	r2, #1
 800595a:	f8c8 2000 	strlt.w	r2, [r8]
 800595e:	43ab      	bics	r3, r5
 8005960:	d11b      	bne.n	800599a <_dtoa_r+0xa2>
 8005962:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005964:	f242 730f 	movw	r3, #9999	; 0x270f
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	b923      	cbnz	r3, 8005978 <_dtoa_r+0x80>
 800596e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005972:	2d00      	cmp	r5, #0
 8005974:	f000 84dd 	beq.w	8006332 <_dtoa_r+0xa3a>
 8005978:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800597a:	b953      	cbnz	r3, 8005992 <_dtoa_r+0x9a>
 800597c:	4ba3      	ldr	r3, [pc, #652]	; (8005c0c <_dtoa_r+0x314>)
 800597e:	e020      	b.n	80059c2 <_dtoa_r+0xca>
 8005980:	4ba3      	ldr	r3, [pc, #652]	; (8005c10 <_dtoa_r+0x318>)
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	3308      	adds	r3, #8
 8005986:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	9804      	ldr	r0, [sp, #16]
 800598c:	b015      	add	sp, #84	; 0x54
 800598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005992:	4b9e      	ldr	r3, [pc, #632]	; (8005c0c <_dtoa_r+0x314>)
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	3303      	adds	r3, #3
 8005998:	e7f5      	b.n	8005986 <_dtoa_r+0x8e>
 800599a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800599e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059aa:	d10c      	bne.n	80059c6 <_dtoa_r+0xce>
 80059ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80059ae:	2301      	movs	r3, #1
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 84b9 	beq.w	800632c <_dtoa_r+0xa34>
 80059ba:	4b96      	ldr	r3, [pc, #600]	; (8005c14 <_dtoa_r+0x31c>)
 80059bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	9304      	str	r3, [sp, #16]
 80059c4:	e7e1      	b.n	800598a <_dtoa_r+0x92>
 80059c6:	a913      	add	r1, sp, #76	; 0x4c
 80059c8:	aa12      	add	r2, sp, #72	; 0x48
 80059ca:	ed9d 0b04 	vldr	d0, [sp, #16]
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 ff7b 	bl	80068ca <__d2b>
 80059d4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80059d8:	9001      	str	r0, [sp, #4]
 80059da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80059dc:	2e00      	cmp	r6, #0
 80059de:	d046      	beq.n	8005a6e <_dtoa_r+0x176>
 80059e0:	9805      	ldr	r0, [sp, #20]
 80059e2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80059e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ea:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80059ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80059f2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80059f6:	2700      	movs	r7, #0
 80059f8:	ee07 aa90 	vmov	s15, sl
 80059fc:	ec43 2b16 	vmov	d6, r2, r3
 8005a00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8005a04:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8005bf0 <_dtoa_r+0x2f8>
 8005a08:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005a0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a10:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8005bf8 <_dtoa_r+0x300>
 8005a14:	eea7 6b04 	vfma.f64	d6, d7, d4
 8005a18:	eeb0 7b46 	vmov.f64	d7, d6
 8005a1c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8005c00 <_dtoa_r+0x308>
 8005a20:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005a24:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005a28:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a30:	ee16 ba90 	vmov	fp, s13
 8005a34:	d508      	bpl.n	8005a48 <_dtoa_r+0x150>
 8005a36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005a3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8005a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a42:	bf18      	it	ne
 8005a44:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005a48:	f1bb 0f16 	cmp.w	fp, #22
 8005a4c:	d834      	bhi.n	8005ab8 <_dtoa_r+0x1c0>
 8005a4e:	4b72      	ldr	r3, [pc, #456]	; (8005c18 <_dtoa_r+0x320>)
 8005a50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a54:	ed93 7b00 	vldr	d7, [r3]
 8005a58:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005a5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a64:	dd01      	ble.n	8005a6a <_dtoa_r+0x172>
 8005a66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e025      	b.n	8005aba <_dtoa_r+0x1c2>
 8005a6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a70:	eb01 0a03 	add.w	sl, r1, r3
 8005a74:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	dd17      	ble.n	8005aac <_dtoa_r+0x1b4>
 8005a7c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005a80:	9a02      	ldr	r2, [sp, #8]
 8005a82:	409d      	lsls	r5, r3
 8005a84:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8c:	432b      	orrs	r3, r5
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005a96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a9e:	9805      	ldr	r0, [sp, #20]
 8005aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aa4:	2701      	movs	r7, #1
 8005aa6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8005aaa:	e7a5      	b.n	80059f8 <_dtoa_r+0x100>
 8005aac:	9a02      	ldr	r2, [sp, #8]
 8005aae:	f1c3 0320 	rsb	r3, r3, #32
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	e7ea      	b.n	8005a8e <_dtoa_r+0x196>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	eba1 0a0a 	sub.w	sl, r1, sl
 8005abe:	9310      	str	r3, [sp, #64]	; 0x40
 8005ac0:	f1ba 0301 	subs.w	r3, sl, #1
 8005ac4:	9307      	str	r3, [sp, #28]
 8005ac6:	bf43      	ittte	mi
 8005ac8:	2300      	movmi	r3, #0
 8005aca:	f1ca 0a01 	rsbmi	sl, sl, #1
 8005ace:	9307      	strmi	r3, [sp, #28]
 8005ad0:	f04f 0a00 	movpl.w	sl, #0
 8005ad4:	f1bb 0f00 	cmp.w	fp, #0
 8005ad8:	db19      	blt.n	8005b0e <_dtoa_r+0x216>
 8005ada:	9b07      	ldr	r3, [sp, #28]
 8005adc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005ae0:	445b      	add	r3, fp
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	f04f 0800 	mov.w	r8, #0
 8005ae8:	9b08      	ldr	r3, [sp, #32]
 8005aea:	2b09      	cmp	r3, #9
 8005aec:	d866      	bhi.n	8005bbc <_dtoa_r+0x2c4>
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	bfc4      	itt	gt
 8005af2:	3b04      	subgt	r3, #4
 8005af4:	9308      	strgt	r3, [sp, #32]
 8005af6:	9b08      	ldr	r3, [sp, #32]
 8005af8:	f1a3 0302 	sub.w	r3, r3, #2
 8005afc:	bfcc      	ite	gt
 8005afe:	2500      	movgt	r5, #0
 8005b00:	2501      	movle	r5, #1
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d866      	bhi.n	8005bd4 <_dtoa_r+0x2dc>
 8005b06:	e8df f003 	tbb	[pc, r3]
 8005b0a:	5755      	.short	0x5755
 8005b0c:	4909      	.short	0x4909
 8005b0e:	2300      	movs	r3, #0
 8005b10:	ebaa 0a0b 	sub.w	sl, sl, fp
 8005b14:	f1cb 0800 	rsb	r8, fp, #0
 8005b18:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b1a:	e7e5      	b.n	8005ae8 <_dtoa_r+0x1f0>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dd59      	ble.n	8005bda <_dtoa_r+0x2e2>
 8005b26:	9306      	str	r3, [sp, #24]
 8005b28:	4699      	mov	r9, r3
 8005b2a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	6072      	str	r2, [r6, #4]
 8005b30:	2204      	movs	r2, #4
 8005b32:	f102 0014 	add.w	r0, r2, #20
 8005b36:	4298      	cmp	r0, r3
 8005b38:	6871      	ldr	r1, [r6, #4]
 8005b3a:	d953      	bls.n	8005be4 <_dtoa_r+0x2ec>
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 fc37 	bl	80063b0 <_Balloc>
 8005b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b44:	6030      	str	r0, [r6, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	9304      	str	r3, [sp, #16]
 8005b4a:	f1b9 0f0e 	cmp.w	r9, #14
 8005b4e:	f200 80c2 	bhi.w	8005cd6 <_dtoa_r+0x3de>
 8005b52:	2d00      	cmp	r5, #0
 8005b54:	f000 80bf 	beq.w	8005cd6 <_dtoa_r+0x3de>
 8005b58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b5c:	f1bb 0f00 	cmp.w	fp, #0
 8005b60:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005b64:	f340 80e6 	ble.w	8005d34 <_dtoa_r+0x43c>
 8005b68:	4a2b      	ldr	r2, [pc, #172]	; (8005c18 <_dtoa_r+0x320>)
 8005b6a:	f00b 030f 	and.w	r3, fp, #15
 8005b6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b72:	ed93 7b00 	vldr	d7, [r3]
 8005b76:	ea4f 132b 	mov.w	r3, fp, asr #4
 8005b7a:	06da      	lsls	r2, r3, #27
 8005b7c:	f140 80d8 	bpl.w	8005d30 <_dtoa_r+0x438>
 8005b80:	4a26      	ldr	r2, [pc, #152]	; (8005c1c <_dtoa_r+0x324>)
 8005b82:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8005b86:	ed92 6b08 	vldr	d6, [r2, #32]
 8005b8a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8005b8e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	2203      	movs	r2, #3
 8005b98:	4920      	ldr	r1, [pc, #128]	; (8005c1c <_dtoa_r+0x324>)
 8005b9a:	e04a      	b.n	8005c32 <_dtoa_r+0x33a>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba2:	445b      	add	r3, fp
 8005ba4:	f103 0901 	add.w	r9, r3, #1
 8005ba8:	9306      	str	r3, [sp, #24]
 8005baa:	464b      	mov	r3, r9
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	bfb8      	it	lt
 8005bb0:	2301      	movlt	r3, #1
 8005bb2:	e7ba      	b.n	8005b2a <_dtoa_r+0x232>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e7b2      	b.n	8005b1e <_dtoa_r+0x226>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e7f0      	b.n	8005b9e <_dtoa_r+0x2a6>
 8005bbc:	2501      	movs	r5, #1
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc8:	9306      	str	r3, [sp, #24]
 8005bca:	4699      	mov	r9, r3
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2312      	movs	r3, #18
 8005bd0:	920a      	str	r2, [sp, #40]	; 0x28
 8005bd2:	e7aa      	b.n	8005b2a <_dtoa_r+0x232>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd8:	e7f4      	b.n	8005bc4 <_dtoa_r+0x2cc>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	9306      	str	r3, [sp, #24]
 8005bde:	4699      	mov	r9, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	e7f5      	b.n	8005bd0 <_dtoa_r+0x2d8>
 8005be4:	3101      	adds	r1, #1
 8005be6:	6071      	str	r1, [r6, #4]
 8005be8:	0052      	lsls	r2, r2, #1
 8005bea:	e7a2      	b.n	8005b32 <_dtoa_r+0x23a>
 8005bec:	f3af 8000 	nop.w
 8005bf0:	636f4361 	.word	0x636f4361
 8005bf4:	3fd287a7 	.word	0x3fd287a7
 8005bf8:	8b60c8b3 	.word	0x8b60c8b3
 8005bfc:	3fc68a28 	.word	0x3fc68a28
 8005c00:	509f79fb 	.word	0x509f79fb
 8005c04:	3fd34413 	.word	0x3fd34413
 8005c08:	7ff00000 	.word	0x7ff00000
 8005c0c:	080072ad 	.word	0x080072ad
 8005c10:	080072a4 	.word	0x080072a4
 8005c14:	08007281 	.word	0x08007281
 8005c18:	080072e0 	.word	0x080072e0
 8005c1c:	080072b8 	.word	0x080072b8
 8005c20:	07de      	lsls	r6, r3, #31
 8005c22:	d504      	bpl.n	8005c2e <_dtoa_r+0x336>
 8005c24:	ed91 6b00 	vldr	d6, [r1]
 8005c28:	3201      	adds	r2, #1
 8005c2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c2e:	105b      	asrs	r3, r3, #1
 8005c30:	3108      	adds	r1, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f4      	bne.n	8005c20 <_dtoa_r+0x328>
 8005c36:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005c3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005c3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80a7 	beq.w	8005d98 <_dtoa_r+0x4a0>
 8005c4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005c4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5a:	f140 809d 	bpl.w	8005d98 <_dtoa_r+0x4a0>
 8005c5e:	f1b9 0f00 	cmp.w	r9, #0
 8005c62:	f000 8099 	beq.w	8005d98 <_dtoa_r+0x4a0>
 8005c66:	9b06      	ldr	r3, [sp, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	dd30      	ble.n	8005cce <_dtoa_r+0x3d6>
 8005c6c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005c70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c78:	9d06      	ldr	r5, [sp, #24]
 8005c7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005c7e:	3201      	adds	r2, #1
 8005c80:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005c84:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005c88:	ee07 2a90 	vmov	s15, r2
 8005c8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005c90:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005c94:	ed8d 5b02 	vstr	d5, [sp, #8]
 8005c98:	9a03      	ldr	r2, [sp, #12]
 8005c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	d17b      	bne.n	8005d9e <_dtoa_r+0x4a6>
 8005ca6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005caa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005cae:	ec41 0b17 	vmov	d7, r0, r1
 8005cb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cba:	f300 8253 	bgt.w	8006164 <_dtoa_r+0x86c>
 8005cbe:	eeb1 7b47 	vneg.f64	d7, d7
 8005cc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cca:	f100 8249 	bmi.w	8006160 <_dtoa_r+0x868>
 8005cce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005cd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f2c0 8119 	blt.w	8005f10 <_dtoa_r+0x618>
 8005cde:	f1bb 0f0e 	cmp.w	fp, #14
 8005ce2:	f300 8115 	bgt.w	8005f10 <_dtoa_r+0x618>
 8005ce6:	4bc3      	ldr	r3, [pc, #780]	; (8005ff4 <_dtoa_r+0x6fc>)
 8005ce8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005cec:	ed93 6b00 	vldr	d6, [r3]
 8005cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f280 80ba 	bge.w	8005e6c <_dtoa_r+0x574>
 8005cf8:	f1b9 0f00 	cmp.w	r9, #0
 8005cfc:	f300 80b6 	bgt.w	8005e6c <_dtoa_r+0x574>
 8005d00:	f040 822d 	bne.w	800615e <_dtoa_r+0x866>
 8005d04:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005d08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d18:	464d      	mov	r5, r9
 8005d1a:	464f      	mov	r7, r9
 8005d1c:	f280 8204 	bge.w	8006128 <_dtoa_r+0x830>
 8005d20:	9b04      	ldr	r3, [sp, #16]
 8005d22:	9a04      	ldr	r2, [sp, #16]
 8005d24:	1c5e      	adds	r6, r3, #1
 8005d26:	2331      	movs	r3, #49	; 0x31
 8005d28:	7013      	strb	r3, [r2, #0]
 8005d2a:	f10b 0b01 	add.w	fp, fp, #1
 8005d2e:	e1ff      	b.n	8006130 <_dtoa_r+0x838>
 8005d30:	2202      	movs	r2, #2
 8005d32:	e731      	b.n	8005b98 <_dtoa_r+0x2a0>
 8005d34:	d02e      	beq.n	8005d94 <_dtoa_r+0x49c>
 8005d36:	f1cb 0300 	rsb	r3, fp, #0
 8005d3a:	4aae      	ldr	r2, [pc, #696]	; (8005ff4 <_dtoa_r+0x6fc>)
 8005d3c:	f003 010f 	and.w	r1, r3, #15
 8005d40:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005d44:	ed92 7b00 	vldr	d7, [r2]
 8005d48:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8005d4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d50:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005d54:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8005d58:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005d5c:	49a6      	ldr	r1, [pc, #664]	; (8005ff8 <_dtoa_r+0x700>)
 8005d5e:	111b      	asrs	r3, r3, #4
 8005d60:	2000      	movs	r0, #0
 8005d62:	2202      	movs	r2, #2
 8005d64:	b93b      	cbnz	r3, 8005d76 <_dtoa_r+0x47e>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f43f af6b 	beq.w	8005c42 <_dtoa_r+0x34a>
 8005d6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d74:	e765      	b.n	8005c42 <_dtoa_r+0x34a>
 8005d76:	07dd      	lsls	r5, r3, #31
 8005d78:	d509      	bpl.n	8005d8e <_dtoa_r+0x496>
 8005d7a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8005d7e:	ed91 7b00 	vldr	d7, [r1]
 8005d82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005d8a:	3201      	adds	r2, #1
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	105b      	asrs	r3, r3, #1
 8005d90:	3108      	adds	r1, #8
 8005d92:	e7e7      	b.n	8005d64 <_dtoa_r+0x46c>
 8005d94:	2202      	movs	r2, #2
 8005d96:	e754      	b.n	8005c42 <_dtoa_r+0x34a>
 8005d98:	465b      	mov	r3, fp
 8005d9a:	464d      	mov	r5, r9
 8005d9c:	e770      	b.n	8005c80 <_dtoa_r+0x388>
 8005d9e:	4a95      	ldr	r2, [pc, #596]	; (8005ff4 <_dtoa_r+0x6fc>)
 8005da0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8005da4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005daa:	ec41 0b17 	vmov	d7, r0, r1
 8005dae:	b35a      	cbz	r2, 8005e08 <_dtoa_r+0x510>
 8005db0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005db4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005db8:	9e04      	ldr	r6, [sp, #16]
 8005dba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005dbe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005dc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005dc6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005dca:	ee14 2a90 	vmov	r2, s9
 8005dce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005dd2:	3230      	adds	r2, #48	; 0x30
 8005dd4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005dd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de0:	f806 2b01 	strb.w	r2, [r6], #1
 8005de4:	d43b      	bmi.n	8005e5e <_dtoa_r+0x566>
 8005de6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005dea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	d472      	bmi.n	8005eda <_dtoa_r+0x5e2>
 8005df4:	9a04      	ldr	r2, [sp, #16]
 8005df6:	1ab2      	subs	r2, r6, r2
 8005df8:	4295      	cmp	r5, r2
 8005dfa:	f77f af68 	ble.w	8005cce <_dtoa_r+0x3d6>
 8005dfe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005e02:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005e06:	e7de      	b.n	8005dc6 <_dtoa_r+0x4ce>
 8005e08:	9a04      	ldr	r2, [sp, #16]
 8005e0a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005e0e:	1956      	adds	r6, r2, r5
 8005e10:	4611      	mov	r1, r2
 8005e12:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005e16:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005e1a:	ee14 2a90 	vmov	r2, s9
 8005e1e:	3230      	adds	r2, #48	; 0x30
 8005e20:	f801 2b01 	strb.w	r2, [r1], #1
 8005e24:	42b1      	cmp	r1, r6
 8005e26:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005e2a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005e2e:	d11a      	bne.n	8005e66 <_dtoa_r+0x56e>
 8005e30:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005e34:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005e38:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e40:	dc4b      	bgt.n	8005eda <_dtoa_r+0x5e2>
 8005e42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005e46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4e:	f57f af3e 	bpl.w	8005cce <_dtoa_r+0x3d6>
 8005e52:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e56:	2a30      	cmp	r2, #48	; 0x30
 8005e58:	f106 31ff 	add.w	r1, r6, #4294967295
 8005e5c:	d001      	beq.n	8005e62 <_dtoa_r+0x56a>
 8005e5e:	469b      	mov	fp, r3
 8005e60:	e02a      	b.n	8005eb8 <_dtoa_r+0x5c0>
 8005e62:	460e      	mov	r6, r1
 8005e64:	e7f5      	b.n	8005e52 <_dtoa_r+0x55a>
 8005e66:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005e6a:	e7d4      	b.n	8005e16 <_dtoa_r+0x51e>
 8005e6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e70:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005e74:	9e04      	ldr	r6, [sp, #16]
 8005e76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005e7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005e7e:	ee15 3a10 	vmov	r3, s10
 8005e82:	3330      	adds	r3, #48	; 0x30
 8005e84:	f806 3b01 	strb.w	r3, [r6], #1
 8005e88:	9b04      	ldr	r3, [sp, #16]
 8005e8a:	1af3      	subs	r3, r6, r3
 8005e8c:	4599      	cmp	r9, r3
 8005e8e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005e92:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005e96:	d133      	bne.n	8005f00 <_dtoa_r+0x608>
 8005e98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea4:	dc18      	bgt.n	8005ed8 <_dtoa_r+0x5e0>
 8005ea6:	eeb4 7b46 	vcmp.f64	d7, d6
 8005eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eae:	d103      	bne.n	8005eb8 <_dtoa_r+0x5c0>
 8005eb0:	ee15 3a10 	vmov	r3, s10
 8005eb4:	07db      	lsls	r3, r3, #31
 8005eb6:	d40f      	bmi.n	8005ed8 <_dtoa_r+0x5e0>
 8005eb8:	9901      	ldr	r1, [sp, #4]
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 faac 	bl	8006418 <_Bfree>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ec4:	7033      	strb	r3, [r6, #0]
 8005ec6:	f10b 0301 	add.w	r3, fp, #1
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f43f ad5b 	beq.w	800598a <_dtoa_r+0x92>
 8005ed4:	601e      	str	r6, [r3, #0]
 8005ed6:	e558      	b.n	800598a <_dtoa_r+0x92>
 8005ed8:	465b      	mov	r3, fp
 8005eda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005ede:	2939      	cmp	r1, #57	; 0x39
 8005ee0:	f106 32ff 	add.w	r2, r6, #4294967295
 8005ee4:	d106      	bne.n	8005ef4 <_dtoa_r+0x5fc>
 8005ee6:	9904      	ldr	r1, [sp, #16]
 8005ee8:	4291      	cmp	r1, r2
 8005eea:	d107      	bne.n	8005efc <_dtoa_r+0x604>
 8005eec:	2230      	movs	r2, #48	; 0x30
 8005eee:	700a      	strb	r2, [r1, #0]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	7811      	ldrb	r1, [r2, #0]
 8005ef6:	3101      	adds	r1, #1
 8005ef8:	7011      	strb	r1, [r2, #0]
 8005efa:	e7b0      	b.n	8005e5e <_dtoa_r+0x566>
 8005efc:	4616      	mov	r6, r2
 8005efe:	e7ec      	b.n	8005eda <_dtoa_r+0x5e2>
 8005f00:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005f04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0c:	d1b3      	bne.n	8005e76 <_dtoa_r+0x57e>
 8005f0e:	e7d3      	b.n	8005eb8 <_dtoa_r+0x5c0>
 8005f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	f000 808d 	beq.w	8006032 <_dtoa_r+0x73a>
 8005f18:	9a08      	ldr	r2, [sp, #32]
 8005f1a:	2a01      	cmp	r2, #1
 8005f1c:	dc72      	bgt.n	8006004 <_dtoa_r+0x70c>
 8005f1e:	2f00      	cmp	r7, #0
 8005f20:	d06c      	beq.n	8005ffc <_dtoa_r+0x704>
 8005f22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f26:	4645      	mov	r5, r8
 8005f28:	4656      	mov	r6, sl
 8005f2a:	9a07      	ldr	r2, [sp, #28]
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	441a      	add	r2, r3
 8005f30:	4620      	mov	r0, r4
 8005f32:	449a      	add	sl, r3
 8005f34:	9207      	str	r2, [sp, #28]
 8005f36:	f000 fb0f 	bl	8006558 <__i2b>
 8005f3a:	4607      	mov	r7, r0
 8005f3c:	2e00      	cmp	r6, #0
 8005f3e:	dd0b      	ble.n	8005f58 <_dtoa_r+0x660>
 8005f40:	9b07      	ldr	r3, [sp, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dd08      	ble.n	8005f58 <_dtoa_r+0x660>
 8005f46:	42b3      	cmp	r3, r6
 8005f48:	9a07      	ldr	r2, [sp, #28]
 8005f4a:	bfa8      	it	ge
 8005f4c:	4633      	movge	r3, r6
 8005f4e:	ebaa 0a03 	sub.w	sl, sl, r3
 8005f52:	1af6      	subs	r6, r6, r3
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	9307      	str	r3, [sp, #28]
 8005f58:	f1b8 0f00 	cmp.w	r8, #0
 8005f5c:	d01d      	beq.n	8005f9a <_dtoa_r+0x6a2>
 8005f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d06a      	beq.n	800603a <_dtoa_r+0x742>
 8005f64:	b18d      	cbz	r5, 8005f8a <_dtoa_r+0x692>
 8005f66:	4639      	mov	r1, r7
 8005f68:	462a      	mov	r2, r5
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 fb94 	bl	8006698 <__pow5mult>
 8005f70:	9a01      	ldr	r2, [sp, #4]
 8005f72:	4601      	mov	r1, r0
 8005f74:	4607      	mov	r7, r0
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 faf7 	bl	800656a <__multiply>
 8005f7c:	9901      	ldr	r1, [sp, #4]
 8005f7e:	900c      	str	r0, [sp, #48]	; 0x30
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 fa49 	bl	8006418 <_Bfree>
 8005f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	ebb8 0205 	subs.w	r2, r8, r5
 8005f8e:	d004      	beq.n	8005f9a <_dtoa_r+0x6a2>
 8005f90:	9901      	ldr	r1, [sp, #4]
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 fb80 	bl	8006698 <__pow5mult>
 8005f98:	9001      	str	r0, [sp, #4]
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 fadb 	bl	8006558 <__i2b>
 8005fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 81ca 	beq.w	8006340 <_dtoa_r+0xa48>
 8005fac:	461a      	mov	r2, r3
 8005fae:	4601      	mov	r1, r0
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 fb71 	bl	8006698 <__pow5mult>
 8005fb6:	9b08      	ldr	r3, [sp, #32]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	4605      	mov	r5, r0
 8005fbc:	dc44      	bgt.n	8006048 <_dtoa_r+0x750>
 8005fbe:	9b02      	ldr	r3, [sp, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d13c      	bne.n	800603e <_dtoa_r+0x746>
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d137      	bne.n	800603e <_dtoa_r+0x746>
 8005fce:	9b03      	ldr	r3, [sp, #12]
 8005fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fd4:	0d1b      	lsrs	r3, r3, #20
 8005fd6:	051b      	lsls	r3, r3, #20
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d033      	beq.n	8006044 <_dtoa_r+0x74c>
 8005fdc:	9b07      	ldr	r3, [sp, #28]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	f10a 0a01 	add.w	sl, sl, #1
 8005fe4:	9307      	str	r3, [sp, #28]
 8005fe6:	f04f 0801 	mov.w	r8, #1
 8005fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fec:	bb73      	cbnz	r3, 800604c <_dtoa_r+0x754>
 8005fee:	2001      	movs	r0, #1
 8005ff0:	e034      	b.n	800605c <_dtoa_r+0x764>
 8005ff2:	bf00      	nop
 8005ff4:	080072e0 	.word	0x080072e0
 8005ff8:	080072b8 	.word	0x080072b8
 8005ffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ffe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006002:	e790      	b.n	8005f26 <_dtoa_r+0x62e>
 8006004:	f109 35ff 	add.w	r5, r9, #4294967295
 8006008:	45a8      	cmp	r8, r5
 800600a:	bfbf      	itttt	lt
 800600c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800600e:	eba5 0808 	sublt.w	r8, r5, r8
 8006012:	4443      	addlt	r3, r8
 8006014:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006016:	bfb6      	itet	lt
 8006018:	46a8      	movlt	r8, r5
 800601a:	eba8 0505 	subge.w	r5, r8, r5
 800601e:	2500      	movlt	r5, #0
 8006020:	f1b9 0f00 	cmp.w	r9, #0
 8006024:	bfb9      	ittee	lt
 8006026:	ebaa 0609 	sublt.w	r6, sl, r9
 800602a:	2300      	movlt	r3, #0
 800602c:	4656      	movge	r6, sl
 800602e:	464b      	movge	r3, r9
 8006030:	e77b      	b.n	8005f2a <_dtoa_r+0x632>
 8006032:	4645      	mov	r5, r8
 8006034:	4656      	mov	r6, sl
 8006036:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006038:	e780      	b.n	8005f3c <_dtoa_r+0x644>
 800603a:	4642      	mov	r2, r8
 800603c:	e7a8      	b.n	8005f90 <_dtoa_r+0x698>
 800603e:	f04f 0800 	mov.w	r8, #0
 8006042:	e7d2      	b.n	8005fea <_dtoa_r+0x6f2>
 8006044:	4698      	mov	r8, r3
 8006046:	e7d0      	b.n	8005fea <_dtoa_r+0x6f2>
 8006048:	f04f 0800 	mov.w	r8, #0
 800604c:	692b      	ldr	r3, [r5, #16]
 800604e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006052:	6918      	ldr	r0, [r3, #16]
 8006054:	f000 fa32 	bl	80064bc <__hi0bits>
 8006058:	f1c0 0020 	rsb	r0, r0, #32
 800605c:	9b07      	ldr	r3, [sp, #28]
 800605e:	4418      	add	r0, r3
 8006060:	f010 001f 	ands.w	r0, r0, #31
 8006064:	d047      	beq.n	80060f6 <_dtoa_r+0x7fe>
 8006066:	f1c0 0320 	rsb	r3, r0, #32
 800606a:	2b04      	cmp	r3, #4
 800606c:	dd3b      	ble.n	80060e6 <_dtoa_r+0x7ee>
 800606e:	9b07      	ldr	r3, [sp, #28]
 8006070:	f1c0 001c 	rsb	r0, r0, #28
 8006074:	4482      	add	sl, r0
 8006076:	4406      	add	r6, r0
 8006078:	4403      	add	r3, r0
 800607a:	9307      	str	r3, [sp, #28]
 800607c:	f1ba 0f00 	cmp.w	sl, #0
 8006080:	dd05      	ble.n	800608e <_dtoa_r+0x796>
 8006082:	4652      	mov	r2, sl
 8006084:	9901      	ldr	r1, [sp, #4]
 8006086:	4620      	mov	r0, r4
 8006088:	f000 fb54 	bl	8006734 <__lshift>
 800608c:	9001      	str	r0, [sp, #4]
 800608e:	9b07      	ldr	r3, [sp, #28]
 8006090:	2b00      	cmp	r3, #0
 8006092:	dd05      	ble.n	80060a0 <_dtoa_r+0x7a8>
 8006094:	4629      	mov	r1, r5
 8006096:	461a      	mov	r2, r3
 8006098:	4620      	mov	r0, r4
 800609a:	f000 fb4b 	bl	8006734 <__lshift>
 800609e:	4605      	mov	r5, r0
 80060a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060a2:	b353      	cbz	r3, 80060fa <_dtoa_r+0x802>
 80060a4:	4629      	mov	r1, r5
 80060a6:	9801      	ldr	r0, [sp, #4]
 80060a8:	f000 fb98 	bl	80067dc <__mcmp>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	da24      	bge.n	80060fa <_dtoa_r+0x802>
 80060b0:	2300      	movs	r3, #0
 80060b2:	220a      	movs	r2, #10
 80060b4:	9901      	ldr	r1, [sp, #4]
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 f9c5 	bl	8006446 <__multadd>
 80060bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060be:	9001      	str	r0, [sp, #4]
 80060c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8142 	beq.w	800634e <_dtoa_r+0xa56>
 80060ca:	2300      	movs	r3, #0
 80060cc:	4639      	mov	r1, r7
 80060ce:	220a      	movs	r2, #10
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 f9b8 	bl	8006446 <__multadd>
 80060d6:	9b06      	ldr	r3, [sp, #24]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	4607      	mov	r7, r0
 80060dc:	dc4b      	bgt.n	8006176 <_dtoa_r+0x87e>
 80060de:	9b08      	ldr	r3, [sp, #32]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	dd48      	ble.n	8006176 <_dtoa_r+0x87e>
 80060e4:	e011      	b.n	800610a <_dtoa_r+0x812>
 80060e6:	d0c9      	beq.n	800607c <_dtoa_r+0x784>
 80060e8:	9a07      	ldr	r2, [sp, #28]
 80060ea:	331c      	adds	r3, #28
 80060ec:	441a      	add	r2, r3
 80060ee:	449a      	add	sl, r3
 80060f0:	441e      	add	r6, r3
 80060f2:	4613      	mov	r3, r2
 80060f4:	e7c1      	b.n	800607a <_dtoa_r+0x782>
 80060f6:	4603      	mov	r3, r0
 80060f8:	e7f6      	b.n	80060e8 <_dtoa_r+0x7f0>
 80060fa:	f1b9 0f00 	cmp.w	r9, #0
 80060fe:	dc34      	bgt.n	800616a <_dtoa_r+0x872>
 8006100:	9b08      	ldr	r3, [sp, #32]
 8006102:	2b02      	cmp	r3, #2
 8006104:	dd31      	ble.n	800616a <_dtoa_r+0x872>
 8006106:	f8cd 9018 	str.w	r9, [sp, #24]
 800610a:	9b06      	ldr	r3, [sp, #24]
 800610c:	b963      	cbnz	r3, 8006128 <_dtoa_r+0x830>
 800610e:	4629      	mov	r1, r5
 8006110:	2205      	movs	r2, #5
 8006112:	4620      	mov	r0, r4
 8006114:	f000 f997 	bl	8006446 <__multadd>
 8006118:	4601      	mov	r1, r0
 800611a:	4605      	mov	r5, r0
 800611c:	9801      	ldr	r0, [sp, #4]
 800611e:	f000 fb5d 	bl	80067dc <__mcmp>
 8006122:	2800      	cmp	r0, #0
 8006124:	f73f adfc 	bgt.w	8005d20 <_dtoa_r+0x428>
 8006128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800612a:	9e04      	ldr	r6, [sp, #16]
 800612c:	ea6f 0b03 	mvn.w	fp, r3
 8006130:	f04f 0900 	mov.w	r9, #0
 8006134:	4629      	mov	r1, r5
 8006136:	4620      	mov	r0, r4
 8006138:	f000 f96e 	bl	8006418 <_Bfree>
 800613c:	2f00      	cmp	r7, #0
 800613e:	f43f aebb 	beq.w	8005eb8 <_dtoa_r+0x5c0>
 8006142:	f1b9 0f00 	cmp.w	r9, #0
 8006146:	d005      	beq.n	8006154 <_dtoa_r+0x85c>
 8006148:	45b9      	cmp	r9, r7
 800614a:	d003      	beq.n	8006154 <_dtoa_r+0x85c>
 800614c:	4649      	mov	r1, r9
 800614e:	4620      	mov	r0, r4
 8006150:	f000 f962 	bl	8006418 <_Bfree>
 8006154:	4639      	mov	r1, r7
 8006156:	4620      	mov	r0, r4
 8006158:	f000 f95e 	bl	8006418 <_Bfree>
 800615c:	e6ac      	b.n	8005eb8 <_dtoa_r+0x5c0>
 800615e:	2500      	movs	r5, #0
 8006160:	462f      	mov	r7, r5
 8006162:	e7e1      	b.n	8006128 <_dtoa_r+0x830>
 8006164:	469b      	mov	fp, r3
 8006166:	462f      	mov	r7, r5
 8006168:	e5da      	b.n	8005d20 <_dtoa_r+0x428>
 800616a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616c:	f8cd 9018 	str.w	r9, [sp, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80f3 	beq.w	800635c <_dtoa_r+0xa64>
 8006176:	2e00      	cmp	r6, #0
 8006178:	dd05      	ble.n	8006186 <_dtoa_r+0x88e>
 800617a:	4639      	mov	r1, r7
 800617c:	4632      	mov	r2, r6
 800617e:	4620      	mov	r0, r4
 8006180:	f000 fad8 	bl	8006734 <__lshift>
 8006184:	4607      	mov	r7, r0
 8006186:	f1b8 0f00 	cmp.w	r8, #0
 800618a:	d04c      	beq.n	8006226 <_dtoa_r+0x92e>
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4620      	mov	r0, r4
 8006190:	f000 f90e 	bl	80063b0 <_Balloc>
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	3202      	adds	r2, #2
 8006198:	4606      	mov	r6, r0
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	f107 010c 	add.w	r1, r7, #12
 80061a0:	300c      	adds	r0, #12
 80061a2:	f7fe fdf5 	bl	8004d90 <memcpy>
 80061a6:	2201      	movs	r2, #1
 80061a8:	4631      	mov	r1, r6
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 fac2 	bl	8006734 <__lshift>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	46b9      	mov	r9, r7
 80061bc:	9307      	str	r3, [sp, #28]
 80061be:	4607      	mov	r7, r0
 80061c0:	4629      	mov	r1, r5
 80061c2:	9801      	ldr	r0, [sp, #4]
 80061c4:	f7ff fb0c 	bl	80057e0 <quorem>
 80061c8:	4649      	mov	r1, r9
 80061ca:	4606      	mov	r6, r0
 80061cc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80061d0:	9801      	ldr	r0, [sp, #4]
 80061d2:	f000 fb03 	bl	80067dc <__mcmp>
 80061d6:	463a      	mov	r2, r7
 80061d8:	9002      	str	r0, [sp, #8]
 80061da:	4629      	mov	r1, r5
 80061dc:	4620      	mov	r0, r4
 80061de:	f000 fb17 	bl	8006810 <__mdiff>
 80061e2:	68c3      	ldr	r3, [r0, #12]
 80061e4:	4602      	mov	r2, r0
 80061e6:	bb03      	cbnz	r3, 800622a <_dtoa_r+0x932>
 80061e8:	4601      	mov	r1, r0
 80061ea:	9009      	str	r0, [sp, #36]	; 0x24
 80061ec:	9801      	ldr	r0, [sp, #4]
 80061ee:	f000 faf5 	bl	80067dc <__mcmp>
 80061f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f4:	4603      	mov	r3, r0
 80061f6:	4611      	mov	r1, r2
 80061f8:	4620      	mov	r0, r4
 80061fa:	9309      	str	r3, [sp, #36]	; 0x24
 80061fc:	f000 f90c 	bl	8006418 <_Bfree>
 8006200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006202:	b9a3      	cbnz	r3, 800622e <_dtoa_r+0x936>
 8006204:	9a08      	ldr	r2, [sp, #32]
 8006206:	b992      	cbnz	r2, 800622e <_dtoa_r+0x936>
 8006208:	9a07      	ldr	r2, [sp, #28]
 800620a:	b982      	cbnz	r2, 800622e <_dtoa_r+0x936>
 800620c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006210:	d029      	beq.n	8006266 <_dtoa_r+0x96e>
 8006212:	9b02      	ldr	r3, [sp, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dd01      	ble.n	800621c <_dtoa_r+0x924>
 8006218:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800621c:	f10a 0601 	add.w	r6, sl, #1
 8006220:	f88a 8000 	strb.w	r8, [sl]
 8006224:	e786      	b.n	8006134 <_dtoa_r+0x83c>
 8006226:	4638      	mov	r0, r7
 8006228:	e7c2      	b.n	80061b0 <_dtoa_r+0x8b8>
 800622a:	2301      	movs	r3, #1
 800622c:	e7e3      	b.n	80061f6 <_dtoa_r+0x8fe>
 800622e:	9a02      	ldr	r2, [sp, #8]
 8006230:	2a00      	cmp	r2, #0
 8006232:	db04      	blt.n	800623e <_dtoa_r+0x946>
 8006234:	d124      	bne.n	8006280 <_dtoa_r+0x988>
 8006236:	9a08      	ldr	r2, [sp, #32]
 8006238:	bb12      	cbnz	r2, 8006280 <_dtoa_r+0x988>
 800623a:	9a07      	ldr	r2, [sp, #28]
 800623c:	bb02      	cbnz	r2, 8006280 <_dtoa_r+0x988>
 800623e:	2b00      	cmp	r3, #0
 8006240:	ddec      	ble.n	800621c <_dtoa_r+0x924>
 8006242:	2201      	movs	r2, #1
 8006244:	9901      	ldr	r1, [sp, #4]
 8006246:	4620      	mov	r0, r4
 8006248:	f000 fa74 	bl	8006734 <__lshift>
 800624c:	4629      	mov	r1, r5
 800624e:	9001      	str	r0, [sp, #4]
 8006250:	f000 fac4 	bl	80067dc <__mcmp>
 8006254:	2800      	cmp	r0, #0
 8006256:	dc03      	bgt.n	8006260 <_dtoa_r+0x968>
 8006258:	d1e0      	bne.n	800621c <_dtoa_r+0x924>
 800625a:	f018 0f01 	tst.w	r8, #1
 800625e:	d0dd      	beq.n	800621c <_dtoa_r+0x924>
 8006260:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006264:	d1d8      	bne.n	8006218 <_dtoa_r+0x920>
 8006266:	2339      	movs	r3, #57	; 0x39
 8006268:	f10a 0601 	add.w	r6, sl, #1
 800626c:	f88a 3000 	strb.w	r3, [sl]
 8006270:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006274:	2b39      	cmp	r3, #57	; 0x39
 8006276:	f106 32ff 	add.w	r2, r6, #4294967295
 800627a:	d04c      	beq.n	8006316 <_dtoa_r+0xa1e>
 800627c:	3301      	adds	r3, #1
 800627e:	e051      	b.n	8006324 <_dtoa_r+0xa2c>
 8006280:	2b00      	cmp	r3, #0
 8006282:	f10a 0601 	add.w	r6, sl, #1
 8006286:	dd05      	ble.n	8006294 <_dtoa_r+0x99c>
 8006288:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800628c:	d0eb      	beq.n	8006266 <_dtoa_r+0x96e>
 800628e:	f108 0801 	add.w	r8, r8, #1
 8006292:	e7c5      	b.n	8006220 <_dtoa_r+0x928>
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	9a06      	ldr	r2, [sp, #24]
 8006298:	f806 8c01 	strb.w	r8, [r6, #-1]
 800629c:	1af3      	subs	r3, r6, r3
 800629e:	4293      	cmp	r3, r2
 80062a0:	d021      	beq.n	80062e6 <_dtoa_r+0x9ee>
 80062a2:	2300      	movs	r3, #0
 80062a4:	220a      	movs	r2, #10
 80062a6:	9901      	ldr	r1, [sp, #4]
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 f8cc 	bl	8006446 <__multadd>
 80062ae:	45b9      	cmp	r9, r7
 80062b0:	9001      	str	r0, [sp, #4]
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	f04f 020a 	mov.w	r2, #10
 80062ba:	4649      	mov	r1, r9
 80062bc:	4620      	mov	r0, r4
 80062be:	d105      	bne.n	80062cc <_dtoa_r+0x9d4>
 80062c0:	f000 f8c1 	bl	8006446 <__multadd>
 80062c4:	4681      	mov	r9, r0
 80062c6:	4607      	mov	r7, r0
 80062c8:	46b2      	mov	sl, r6
 80062ca:	e779      	b.n	80061c0 <_dtoa_r+0x8c8>
 80062cc:	f000 f8bb 	bl	8006446 <__multadd>
 80062d0:	4639      	mov	r1, r7
 80062d2:	4681      	mov	r9, r0
 80062d4:	2300      	movs	r3, #0
 80062d6:	220a      	movs	r2, #10
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 f8b4 	bl	8006446 <__multadd>
 80062de:	4607      	mov	r7, r0
 80062e0:	e7f2      	b.n	80062c8 <_dtoa_r+0x9d0>
 80062e2:	f04f 0900 	mov.w	r9, #0
 80062e6:	2201      	movs	r2, #1
 80062e8:	9901      	ldr	r1, [sp, #4]
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fa22 	bl	8006734 <__lshift>
 80062f0:	4629      	mov	r1, r5
 80062f2:	9001      	str	r0, [sp, #4]
 80062f4:	f000 fa72 	bl	80067dc <__mcmp>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	dcb9      	bgt.n	8006270 <_dtoa_r+0x978>
 80062fc:	d102      	bne.n	8006304 <_dtoa_r+0xa0c>
 80062fe:	f018 0f01 	tst.w	r8, #1
 8006302:	d1b5      	bne.n	8006270 <_dtoa_r+0x978>
 8006304:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006308:	2b30      	cmp	r3, #48	; 0x30
 800630a:	f106 32ff 	add.w	r2, r6, #4294967295
 800630e:	f47f af11 	bne.w	8006134 <_dtoa_r+0x83c>
 8006312:	4616      	mov	r6, r2
 8006314:	e7f6      	b.n	8006304 <_dtoa_r+0xa0c>
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	4293      	cmp	r3, r2
 800631a:	d105      	bne.n	8006328 <_dtoa_r+0xa30>
 800631c:	9a04      	ldr	r2, [sp, #16]
 800631e:	f10b 0b01 	add.w	fp, fp, #1
 8006322:	2331      	movs	r3, #49	; 0x31
 8006324:	7013      	strb	r3, [r2, #0]
 8006326:	e705      	b.n	8006134 <_dtoa_r+0x83c>
 8006328:	4616      	mov	r6, r2
 800632a:	e7a1      	b.n	8006270 <_dtoa_r+0x978>
 800632c:	4b16      	ldr	r3, [pc, #88]	; (8006388 <_dtoa_r+0xa90>)
 800632e:	f7ff bb48 	b.w	80059c2 <_dtoa_r+0xca>
 8006332:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006334:	2b00      	cmp	r3, #0
 8006336:	f47f ab23 	bne.w	8005980 <_dtoa_r+0x88>
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <_dtoa_r+0xa94>)
 800633c:	f7ff bb41 	b.w	80059c2 <_dtoa_r+0xca>
 8006340:	9b08      	ldr	r3, [sp, #32]
 8006342:	2b01      	cmp	r3, #1
 8006344:	f77f ae3b 	ble.w	8005fbe <_dtoa_r+0x6c6>
 8006348:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800634c:	e64f      	b.n	8005fee <_dtoa_r+0x6f6>
 800634e:	9b06      	ldr	r3, [sp, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	dc03      	bgt.n	800635c <_dtoa_r+0xa64>
 8006354:	9b08      	ldr	r3, [sp, #32]
 8006356:	2b02      	cmp	r3, #2
 8006358:	f73f aed7 	bgt.w	800610a <_dtoa_r+0x812>
 800635c:	9e04      	ldr	r6, [sp, #16]
 800635e:	9801      	ldr	r0, [sp, #4]
 8006360:	4629      	mov	r1, r5
 8006362:	f7ff fa3d 	bl	80057e0 <quorem>
 8006366:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800636a:	f806 8b01 	strb.w	r8, [r6], #1
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	9a06      	ldr	r2, [sp, #24]
 8006372:	1af3      	subs	r3, r6, r3
 8006374:	429a      	cmp	r2, r3
 8006376:	ddb4      	ble.n	80062e2 <_dtoa_r+0x9ea>
 8006378:	2300      	movs	r3, #0
 800637a:	220a      	movs	r2, #10
 800637c:	9901      	ldr	r1, [sp, #4]
 800637e:	4620      	mov	r0, r4
 8006380:	f000 f861 	bl	8006446 <__multadd>
 8006384:	9001      	str	r0, [sp, #4]
 8006386:	e7ea      	b.n	800635e <_dtoa_r+0xa66>
 8006388:	08007280 	.word	0x08007280
 800638c:	080072a4 	.word	0x080072a4

08006390 <_localeconv_r>:
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <_localeconv_r+0x14>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6a18      	ldr	r0, [r3, #32]
 8006396:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <_localeconv_r+0x18>)
 8006398:	2800      	cmp	r0, #0
 800639a:	bf08      	it	eq
 800639c:	4618      	moveq	r0, r3
 800639e:	30f0      	adds	r0, #240	; 0xf0
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000010 	.word	0x20000010
 80063a8:	20000074 	.word	0x20000074

080063ac <__malloc_lock>:
 80063ac:	4770      	bx	lr

080063ae <__malloc_unlock>:
 80063ae:	4770      	bx	lr

080063b0 <_Balloc>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063b4:	4604      	mov	r4, r0
 80063b6:	460e      	mov	r6, r1
 80063b8:	b93d      	cbnz	r5, 80063ca <_Balloc+0x1a>
 80063ba:	2010      	movs	r0, #16
 80063bc:	f7fe fcd8 	bl	8004d70 <malloc>
 80063c0:	6260      	str	r0, [r4, #36]	; 0x24
 80063c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063c6:	6005      	str	r5, [r0, #0]
 80063c8:	60c5      	str	r5, [r0, #12]
 80063ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80063cc:	68eb      	ldr	r3, [r5, #12]
 80063ce:	b183      	cbz	r3, 80063f2 <_Balloc+0x42>
 80063d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80063d8:	b9b8      	cbnz	r0, 800640a <_Balloc+0x5a>
 80063da:	2101      	movs	r1, #1
 80063dc:	fa01 f506 	lsl.w	r5, r1, r6
 80063e0:	1d6a      	adds	r2, r5, #5
 80063e2:	0092      	lsls	r2, r2, #2
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 fabf 	bl	8006968 <_calloc_r>
 80063ea:	b160      	cbz	r0, 8006406 <_Balloc+0x56>
 80063ec:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80063f0:	e00e      	b.n	8006410 <_Balloc+0x60>
 80063f2:	2221      	movs	r2, #33	; 0x21
 80063f4:	2104      	movs	r1, #4
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 fab6 	bl	8006968 <_calloc_r>
 80063fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063fe:	60e8      	str	r0, [r5, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e4      	bne.n	80063d0 <_Balloc+0x20>
 8006406:	2000      	movs	r0, #0
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	6802      	ldr	r2, [r0, #0]
 800640c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006410:	2300      	movs	r3, #0
 8006412:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006416:	e7f7      	b.n	8006408 <_Balloc+0x58>

08006418 <_Bfree>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800641c:	4606      	mov	r6, r0
 800641e:	460d      	mov	r5, r1
 8006420:	b93c      	cbnz	r4, 8006432 <_Bfree+0x1a>
 8006422:	2010      	movs	r0, #16
 8006424:	f7fe fca4 	bl	8004d70 <malloc>
 8006428:	6270      	str	r0, [r6, #36]	; 0x24
 800642a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800642e:	6004      	str	r4, [r0, #0]
 8006430:	60c4      	str	r4, [r0, #12]
 8006432:	b13d      	cbz	r5, 8006444 <_Bfree+0x2c>
 8006434:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006436:	686a      	ldr	r2, [r5, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800643e:	6029      	str	r1, [r5, #0]
 8006440:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006444:	bd70      	pop	{r4, r5, r6, pc}

08006446 <__multadd>:
 8006446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644a:	690d      	ldr	r5, [r1, #16]
 800644c:	461f      	mov	r7, r3
 800644e:	4606      	mov	r6, r0
 8006450:	460c      	mov	r4, r1
 8006452:	f101 0c14 	add.w	ip, r1, #20
 8006456:	2300      	movs	r3, #0
 8006458:	f8dc 0000 	ldr.w	r0, [ip]
 800645c:	b281      	uxth	r1, r0
 800645e:	fb02 7101 	mla	r1, r2, r1, r7
 8006462:	0c0f      	lsrs	r7, r1, #16
 8006464:	0c00      	lsrs	r0, r0, #16
 8006466:	fb02 7000 	mla	r0, r2, r0, r7
 800646a:	b289      	uxth	r1, r1
 800646c:	3301      	adds	r3, #1
 800646e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006472:	429d      	cmp	r5, r3
 8006474:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006478:	f84c 1b04 	str.w	r1, [ip], #4
 800647c:	dcec      	bgt.n	8006458 <__multadd+0x12>
 800647e:	b1d7      	cbz	r7, 80064b6 <__multadd+0x70>
 8006480:	68a3      	ldr	r3, [r4, #8]
 8006482:	42ab      	cmp	r3, r5
 8006484:	dc12      	bgt.n	80064ac <__multadd+0x66>
 8006486:	6861      	ldr	r1, [r4, #4]
 8006488:	4630      	mov	r0, r6
 800648a:	3101      	adds	r1, #1
 800648c:	f7ff ff90 	bl	80063b0 <_Balloc>
 8006490:	6922      	ldr	r2, [r4, #16]
 8006492:	3202      	adds	r2, #2
 8006494:	f104 010c 	add.w	r1, r4, #12
 8006498:	4680      	mov	r8, r0
 800649a:	0092      	lsls	r2, r2, #2
 800649c:	300c      	adds	r0, #12
 800649e:	f7fe fc77 	bl	8004d90 <memcpy>
 80064a2:	4621      	mov	r1, r4
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff ffb7 	bl	8006418 <_Bfree>
 80064aa:	4644      	mov	r4, r8
 80064ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064b0:	3501      	adds	r5, #1
 80064b2:	615f      	str	r7, [r3, #20]
 80064b4:	6125      	str	r5, [r4, #16]
 80064b6:	4620      	mov	r0, r4
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064bc <__hi0bits>:
 80064bc:	0c02      	lsrs	r2, r0, #16
 80064be:	0412      	lsls	r2, r2, #16
 80064c0:	4603      	mov	r3, r0
 80064c2:	b9b2      	cbnz	r2, 80064f2 <__hi0bits+0x36>
 80064c4:	0403      	lsls	r3, r0, #16
 80064c6:	2010      	movs	r0, #16
 80064c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064cc:	bf04      	itt	eq
 80064ce:	021b      	lsleq	r3, r3, #8
 80064d0:	3008      	addeq	r0, #8
 80064d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064d6:	bf04      	itt	eq
 80064d8:	011b      	lsleq	r3, r3, #4
 80064da:	3004      	addeq	r0, #4
 80064dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064e0:	bf04      	itt	eq
 80064e2:	009b      	lsleq	r3, r3, #2
 80064e4:	3002      	addeq	r0, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	db06      	blt.n	80064f8 <__hi0bits+0x3c>
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	d503      	bpl.n	80064f6 <__hi0bits+0x3a>
 80064ee:	3001      	adds	r0, #1
 80064f0:	4770      	bx	lr
 80064f2:	2000      	movs	r0, #0
 80064f4:	e7e8      	b.n	80064c8 <__hi0bits+0xc>
 80064f6:	2020      	movs	r0, #32
 80064f8:	4770      	bx	lr

080064fa <__lo0bits>:
 80064fa:	6803      	ldr	r3, [r0, #0]
 80064fc:	f013 0207 	ands.w	r2, r3, #7
 8006500:	4601      	mov	r1, r0
 8006502:	d00b      	beq.n	800651c <__lo0bits+0x22>
 8006504:	07da      	lsls	r2, r3, #31
 8006506:	d423      	bmi.n	8006550 <__lo0bits+0x56>
 8006508:	0798      	lsls	r0, r3, #30
 800650a:	bf49      	itett	mi
 800650c:	085b      	lsrmi	r3, r3, #1
 800650e:	089b      	lsrpl	r3, r3, #2
 8006510:	2001      	movmi	r0, #1
 8006512:	600b      	strmi	r3, [r1, #0]
 8006514:	bf5c      	itt	pl
 8006516:	600b      	strpl	r3, [r1, #0]
 8006518:	2002      	movpl	r0, #2
 800651a:	4770      	bx	lr
 800651c:	b298      	uxth	r0, r3
 800651e:	b9a8      	cbnz	r0, 800654c <__lo0bits+0x52>
 8006520:	0c1b      	lsrs	r3, r3, #16
 8006522:	2010      	movs	r0, #16
 8006524:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006528:	bf04      	itt	eq
 800652a:	0a1b      	lsreq	r3, r3, #8
 800652c:	3008      	addeq	r0, #8
 800652e:	071a      	lsls	r2, r3, #28
 8006530:	bf04      	itt	eq
 8006532:	091b      	lsreq	r3, r3, #4
 8006534:	3004      	addeq	r0, #4
 8006536:	079a      	lsls	r2, r3, #30
 8006538:	bf04      	itt	eq
 800653a:	089b      	lsreq	r3, r3, #2
 800653c:	3002      	addeq	r0, #2
 800653e:	07da      	lsls	r2, r3, #31
 8006540:	d402      	bmi.n	8006548 <__lo0bits+0x4e>
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	d006      	beq.n	8006554 <__lo0bits+0x5a>
 8006546:	3001      	adds	r0, #1
 8006548:	600b      	str	r3, [r1, #0]
 800654a:	4770      	bx	lr
 800654c:	4610      	mov	r0, r2
 800654e:	e7e9      	b.n	8006524 <__lo0bits+0x2a>
 8006550:	2000      	movs	r0, #0
 8006552:	4770      	bx	lr
 8006554:	2020      	movs	r0, #32
 8006556:	4770      	bx	lr

08006558 <__i2b>:
 8006558:	b510      	push	{r4, lr}
 800655a:	460c      	mov	r4, r1
 800655c:	2101      	movs	r1, #1
 800655e:	f7ff ff27 	bl	80063b0 <_Balloc>
 8006562:	2201      	movs	r2, #1
 8006564:	6144      	str	r4, [r0, #20]
 8006566:	6102      	str	r2, [r0, #16]
 8006568:	bd10      	pop	{r4, pc}

0800656a <__multiply>:
 800656a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656e:	4614      	mov	r4, r2
 8006570:	690a      	ldr	r2, [r1, #16]
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	429a      	cmp	r2, r3
 8006576:	bfb8      	it	lt
 8006578:	460b      	movlt	r3, r1
 800657a:	4688      	mov	r8, r1
 800657c:	bfbc      	itt	lt
 800657e:	46a0      	movlt	r8, r4
 8006580:	461c      	movlt	r4, r3
 8006582:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006586:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800658a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800658e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006592:	eb07 0609 	add.w	r6, r7, r9
 8006596:	42b3      	cmp	r3, r6
 8006598:	bfb8      	it	lt
 800659a:	3101      	addlt	r1, #1
 800659c:	f7ff ff08 	bl	80063b0 <_Balloc>
 80065a0:	f100 0514 	add.w	r5, r0, #20
 80065a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80065a8:	462b      	mov	r3, r5
 80065aa:	2200      	movs	r2, #0
 80065ac:	4573      	cmp	r3, lr
 80065ae:	d316      	bcc.n	80065de <__multiply+0x74>
 80065b0:	f104 0214 	add.w	r2, r4, #20
 80065b4:	f108 0114 	add.w	r1, r8, #20
 80065b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80065bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	9201      	str	r2, [sp, #4]
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d80c      	bhi.n	80065e4 <__multiply+0x7a>
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	dd03      	ble.n	80065d6 <__multiply+0x6c>
 80065ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d05d      	beq.n	8006692 <__multiply+0x128>
 80065d6:	6106      	str	r6, [r0, #16]
 80065d8:	b003      	add	sp, #12
 80065da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065de:	f843 2b04 	str.w	r2, [r3], #4
 80065e2:	e7e3      	b.n	80065ac <__multiply+0x42>
 80065e4:	f8b2 b000 	ldrh.w	fp, [r2]
 80065e8:	f1bb 0f00 	cmp.w	fp, #0
 80065ec:	d023      	beq.n	8006636 <__multiply+0xcc>
 80065ee:	4689      	mov	r9, r1
 80065f0:	46ac      	mov	ip, r5
 80065f2:	f04f 0800 	mov.w	r8, #0
 80065f6:	f859 4b04 	ldr.w	r4, [r9], #4
 80065fa:	f8dc a000 	ldr.w	sl, [ip]
 80065fe:	b2a3      	uxth	r3, r4
 8006600:	fa1f fa8a 	uxth.w	sl, sl
 8006604:	fb0b a303 	mla	r3, fp, r3, sl
 8006608:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800660c:	f8dc 4000 	ldr.w	r4, [ip]
 8006610:	4443      	add	r3, r8
 8006612:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006616:	fb0b 840a 	mla	r4, fp, sl, r8
 800661a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800661e:	46e2      	mov	sl, ip
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006626:	454f      	cmp	r7, r9
 8006628:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800662c:	f84a 3b04 	str.w	r3, [sl], #4
 8006630:	d82b      	bhi.n	800668a <__multiply+0x120>
 8006632:	f8cc 8004 	str.w	r8, [ip, #4]
 8006636:	9b01      	ldr	r3, [sp, #4]
 8006638:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800663c:	3204      	adds	r2, #4
 800663e:	f1ba 0f00 	cmp.w	sl, #0
 8006642:	d020      	beq.n	8006686 <__multiply+0x11c>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	4689      	mov	r9, r1
 8006648:	46a8      	mov	r8, r5
 800664a:	f04f 0b00 	mov.w	fp, #0
 800664e:	f8b9 c000 	ldrh.w	ip, [r9]
 8006652:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006656:	fb0a 440c 	mla	r4, sl, ip, r4
 800665a:	445c      	add	r4, fp
 800665c:	46c4      	mov	ip, r8
 800665e:	b29b      	uxth	r3, r3
 8006660:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006664:	f84c 3b04 	str.w	r3, [ip], #4
 8006668:	f859 3b04 	ldr.w	r3, [r9], #4
 800666c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	fb0a b303 	mla	r3, sl, r3, fp
 8006676:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800667a:	454f      	cmp	r7, r9
 800667c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006680:	d805      	bhi.n	800668e <__multiply+0x124>
 8006682:	f8c8 3004 	str.w	r3, [r8, #4]
 8006686:	3504      	adds	r5, #4
 8006688:	e79b      	b.n	80065c2 <__multiply+0x58>
 800668a:	46d4      	mov	ip, sl
 800668c:	e7b3      	b.n	80065f6 <__multiply+0x8c>
 800668e:	46e0      	mov	r8, ip
 8006690:	e7dd      	b.n	800664e <__multiply+0xe4>
 8006692:	3e01      	subs	r6, #1
 8006694:	e799      	b.n	80065ca <__multiply+0x60>
	...

08006698 <__pow5mult>:
 8006698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800669c:	4615      	mov	r5, r2
 800669e:	f012 0203 	ands.w	r2, r2, #3
 80066a2:	4606      	mov	r6, r0
 80066a4:	460f      	mov	r7, r1
 80066a6:	d007      	beq.n	80066b8 <__pow5mult+0x20>
 80066a8:	3a01      	subs	r2, #1
 80066aa:	4c21      	ldr	r4, [pc, #132]	; (8006730 <__pow5mult+0x98>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066b2:	f7ff fec8 	bl	8006446 <__multadd>
 80066b6:	4607      	mov	r7, r0
 80066b8:	10ad      	asrs	r5, r5, #2
 80066ba:	d035      	beq.n	8006728 <__pow5mult+0x90>
 80066bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066be:	b93c      	cbnz	r4, 80066d0 <__pow5mult+0x38>
 80066c0:	2010      	movs	r0, #16
 80066c2:	f7fe fb55 	bl	8004d70 <malloc>
 80066c6:	6270      	str	r0, [r6, #36]	; 0x24
 80066c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066cc:	6004      	str	r4, [r0, #0]
 80066ce:	60c4      	str	r4, [r0, #12]
 80066d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066d8:	b94c      	cbnz	r4, 80066ee <__pow5mult+0x56>
 80066da:	f240 2171 	movw	r1, #625	; 0x271
 80066de:	4630      	mov	r0, r6
 80066e0:	f7ff ff3a 	bl	8006558 <__i2b>
 80066e4:	2300      	movs	r3, #0
 80066e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80066ea:	4604      	mov	r4, r0
 80066ec:	6003      	str	r3, [r0, #0]
 80066ee:	f04f 0800 	mov.w	r8, #0
 80066f2:	07eb      	lsls	r3, r5, #31
 80066f4:	d50a      	bpl.n	800670c <__pow5mult+0x74>
 80066f6:	4639      	mov	r1, r7
 80066f8:	4622      	mov	r2, r4
 80066fa:	4630      	mov	r0, r6
 80066fc:	f7ff ff35 	bl	800656a <__multiply>
 8006700:	4639      	mov	r1, r7
 8006702:	4681      	mov	r9, r0
 8006704:	4630      	mov	r0, r6
 8006706:	f7ff fe87 	bl	8006418 <_Bfree>
 800670a:	464f      	mov	r7, r9
 800670c:	106d      	asrs	r5, r5, #1
 800670e:	d00b      	beq.n	8006728 <__pow5mult+0x90>
 8006710:	6820      	ldr	r0, [r4, #0]
 8006712:	b938      	cbnz	r0, 8006724 <__pow5mult+0x8c>
 8006714:	4622      	mov	r2, r4
 8006716:	4621      	mov	r1, r4
 8006718:	4630      	mov	r0, r6
 800671a:	f7ff ff26 	bl	800656a <__multiply>
 800671e:	6020      	str	r0, [r4, #0]
 8006720:	f8c0 8000 	str.w	r8, [r0]
 8006724:	4604      	mov	r4, r0
 8006726:	e7e4      	b.n	80066f2 <__pow5mult+0x5a>
 8006728:	4638      	mov	r0, r7
 800672a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800672e:	bf00      	nop
 8006730:	080073a8 	.word	0x080073a8

08006734 <__lshift>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	460c      	mov	r4, r1
 800673a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	6849      	ldr	r1, [r1, #4]
 8006742:	eb0a 0903 	add.w	r9, sl, r3
 8006746:	68a3      	ldr	r3, [r4, #8]
 8006748:	4607      	mov	r7, r0
 800674a:	4616      	mov	r6, r2
 800674c:	f109 0501 	add.w	r5, r9, #1
 8006750:	42ab      	cmp	r3, r5
 8006752:	db32      	blt.n	80067ba <__lshift+0x86>
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff fe2b 	bl	80063b0 <_Balloc>
 800675a:	2300      	movs	r3, #0
 800675c:	4680      	mov	r8, r0
 800675e:	f100 0114 	add.w	r1, r0, #20
 8006762:	461a      	mov	r2, r3
 8006764:	4553      	cmp	r3, sl
 8006766:	db2b      	blt.n	80067c0 <__lshift+0x8c>
 8006768:	6920      	ldr	r0, [r4, #16]
 800676a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800676e:	f104 0314 	add.w	r3, r4, #20
 8006772:	f016 021f 	ands.w	r2, r6, #31
 8006776:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800677a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800677e:	d025      	beq.n	80067cc <__lshift+0x98>
 8006780:	f1c2 0e20 	rsb	lr, r2, #32
 8006784:	2000      	movs	r0, #0
 8006786:	681e      	ldr	r6, [r3, #0]
 8006788:	468a      	mov	sl, r1
 800678a:	4096      	lsls	r6, r2
 800678c:	4330      	orrs	r0, r6
 800678e:	f84a 0b04 	str.w	r0, [sl], #4
 8006792:	f853 0b04 	ldr.w	r0, [r3], #4
 8006796:	459c      	cmp	ip, r3
 8006798:	fa20 f00e 	lsr.w	r0, r0, lr
 800679c:	d814      	bhi.n	80067c8 <__lshift+0x94>
 800679e:	6048      	str	r0, [r1, #4]
 80067a0:	b108      	cbz	r0, 80067a6 <__lshift+0x72>
 80067a2:	f109 0502 	add.w	r5, r9, #2
 80067a6:	3d01      	subs	r5, #1
 80067a8:	4638      	mov	r0, r7
 80067aa:	f8c8 5010 	str.w	r5, [r8, #16]
 80067ae:	4621      	mov	r1, r4
 80067b0:	f7ff fe32 	bl	8006418 <_Bfree>
 80067b4:	4640      	mov	r0, r8
 80067b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ba:	3101      	adds	r1, #1
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	e7c7      	b.n	8006750 <__lshift+0x1c>
 80067c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80067c4:	3301      	adds	r3, #1
 80067c6:	e7cd      	b.n	8006764 <__lshift+0x30>
 80067c8:	4651      	mov	r1, sl
 80067ca:	e7dc      	b.n	8006786 <__lshift+0x52>
 80067cc:	3904      	subs	r1, #4
 80067ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80067d6:	459c      	cmp	ip, r3
 80067d8:	d8f9      	bhi.n	80067ce <__lshift+0x9a>
 80067da:	e7e4      	b.n	80067a6 <__lshift+0x72>

080067dc <__mcmp>:
 80067dc:	6903      	ldr	r3, [r0, #16]
 80067de:	690a      	ldr	r2, [r1, #16]
 80067e0:	1a9b      	subs	r3, r3, r2
 80067e2:	b530      	push	{r4, r5, lr}
 80067e4:	d10c      	bne.n	8006800 <__mcmp+0x24>
 80067e6:	0092      	lsls	r2, r2, #2
 80067e8:	3014      	adds	r0, #20
 80067ea:	3114      	adds	r1, #20
 80067ec:	1884      	adds	r4, r0, r2
 80067ee:	4411      	add	r1, r2
 80067f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067f8:	4295      	cmp	r5, r2
 80067fa:	d003      	beq.n	8006804 <__mcmp+0x28>
 80067fc:	d305      	bcc.n	800680a <__mcmp+0x2e>
 80067fe:	2301      	movs	r3, #1
 8006800:	4618      	mov	r0, r3
 8006802:	bd30      	pop	{r4, r5, pc}
 8006804:	42a0      	cmp	r0, r4
 8006806:	d3f3      	bcc.n	80067f0 <__mcmp+0x14>
 8006808:	e7fa      	b.n	8006800 <__mcmp+0x24>
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	e7f7      	b.n	8006800 <__mcmp+0x24>

08006810 <__mdiff>:
 8006810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006814:	460d      	mov	r5, r1
 8006816:	4607      	mov	r7, r0
 8006818:	4611      	mov	r1, r2
 800681a:	4628      	mov	r0, r5
 800681c:	4614      	mov	r4, r2
 800681e:	f7ff ffdd 	bl	80067dc <__mcmp>
 8006822:	1e06      	subs	r6, r0, #0
 8006824:	d108      	bne.n	8006838 <__mdiff+0x28>
 8006826:	4631      	mov	r1, r6
 8006828:	4638      	mov	r0, r7
 800682a:	f7ff fdc1 	bl	80063b0 <_Balloc>
 800682e:	2301      	movs	r3, #1
 8006830:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006838:	bfa4      	itt	ge
 800683a:	4623      	movge	r3, r4
 800683c:	462c      	movge	r4, r5
 800683e:	4638      	mov	r0, r7
 8006840:	6861      	ldr	r1, [r4, #4]
 8006842:	bfa6      	itte	ge
 8006844:	461d      	movge	r5, r3
 8006846:	2600      	movge	r6, #0
 8006848:	2601      	movlt	r6, #1
 800684a:	f7ff fdb1 	bl	80063b0 <_Balloc>
 800684e:	692b      	ldr	r3, [r5, #16]
 8006850:	60c6      	str	r6, [r0, #12]
 8006852:	6926      	ldr	r6, [r4, #16]
 8006854:	f105 0914 	add.w	r9, r5, #20
 8006858:	f104 0214 	add.w	r2, r4, #20
 800685c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006860:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006864:	f100 0514 	add.w	r5, r0, #20
 8006868:	f04f 0e00 	mov.w	lr, #0
 800686c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006870:	f859 4b04 	ldr.w	r4, [r9], #4
 8006874:	fa1e f18a 	uxtah	r1, lr, sl
 8006878:	b2a3      	uxth	r3, r4
 800687a:	1ac9      	subs	r1, r1, r3
 800687c:	0c23      	lsrs	r3, r4, #16
 800687e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006882:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006886:	b289      	uxth	r1, r1
 8006888:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800688c:	45c8      	cmp	r8, r9
 800688e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006892:	4694      	mov	ip, r2
 8006894:	f845 3b04 	str.w	r3, [r5], #4
 8006898:	d8e8      	bhi.n	800686c <__mdiff+0x5c>
 800689a:	45bc      	cmp	ip, r7
 800689c:	d304      	bcc.n	80068a8 <__mdiff+0x98>
 800689e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80068a2:	b183      	cbz	r3, 80068c6 <__mdiff+0xb6>
 80068a4:	6106      	str	r6, [r0, #16]
 80068a6:	e7c5      	b.n	8006834 <__mdiff+0x24>
 80068a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80068ac:	fa1e f381 	uxtah	r3, lr, r1
 80068b0:	141a      	asrs	r2, r3, #16
 80068b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80068c0:	f845 3b04 	str.w	r3, [r5], #4
 80068c4:	e7e9      	b.n	800689a <__mdiff+0x8a>
 80068c6:	3e01      	subs	r6, #1
 80068c8:	e7e9      	b.n	800689e <__mdiff+0x8e>

080068ca <__d2b>:
 80068ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068ce:	460e      	mov	r6, r1
 80068d0:	2101      	movs	r1, #1
 80068d2:	ec59 8b10 	vmov	r8, r9, d0
 80068d6:	4615      	mov	r5, r2
 80068d8:	f7ff fd6a 	bl	80063b0 <_Balloc>
 80068dc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80068e0:	4607      	mov	r7, r0
 80068e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068e6:	bb34      	cbnz	r4, 8006936 <__d2b+0x6c>
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	f1b8 0300 	subs.w	r3, r8, #0
 80068ee:	d027      	beq.n	8006940 <__d2b+0x76>
 80068f0:	a802      	add	r0, sp, #8
 80068f2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80068f6:	f7ff fe00 	bl	80064fa <__lo0bits>
 80068fa:	9900      	ldr	r1, [sp, #0]
 80068fc:	b1f0      	cbz	r0, 800693c <__d2b+0x72>
 80068fe:	9a01      	ldr	r2, [sp, #4]
 8006900:	f1c0 0320 	rsb	r3, r0, #32
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	430b      	orrs	r3, r1
 800690a:	40c2      	lsrs	r2, r0
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	9201      	str	r2, [sp, #4]
 8006910:	9b01      	ldr	r3, [sp, #4]
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	bf14      	ite	ne
 8006918:	2102      	movne	r1, #2
 800691a:	2101      	moveq	r1, #1
 800691c:	6139      	str	r1, [r7, #16]
 800691e:	b1c4      	cbz	r4, 8006952 <__d2b+0x88>
 8006920:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006924:	4404      	add	r4, r0
 8006926:	6034      	str	r4, [r6, #0]
 8006928:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800692c:	6028      	str	r0, [r5, #0]
 800692e:	4638      	mov	r0, r7
 8006930:	b003      	add	sp, #12
 8006932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800693a:	e7d5      	b.n	80068e8 <__d2b+0x1e>
 800693c:	6179      	str	r1, [r7, #20]
 800693e:	e7e7      	b.n	8006910 <__d2b+0x46>
 8006940:	a801      	add	r0, sp, #4
 8006942:	f7ff fdda 	bl	80064fa <__lo0bits>
 8006946:	9b01      	ldr	r3, [sp, #4]
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	2101      	movs	r1, #1
 800694c:	6139      	str	r1, [r7, #16]
 800694e:	3020      	adds	r0, #32
 8006950:	e7e5      	b.n	800691e <__d2b+0x54>
 8006952:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006956:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800695a:	6030      	str	r0, [r6, #0]
 800695c:	6918      	ldr	r0, [r3, #16]
 800695e:	f7ff fdad 	bl	80064bc <__hi0bits>
 8006962:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006966:	e7e1      	b.n	800692c <__d2b+0x62>

08006968 <_calloc_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	fb02 f401 	mul.w	r4, r2, r1
 800696e:	4621      	mov	r1, r4
 8006970:	f7fe fa70 	bl	8004e54 <_malloc_r>
 8006974:	4605      	mov	r5, r0
 8006976:	b118      	cbz	r0, 8006980 <_calloc_r+0x18>
 8006978:	4622      	mov	r2, r4
 800697a:	2100      	movs	r1, #0
 800697c:	f7fe fa13 	bl	8004da6 <memset>
 8006980:	4628      	mov	r0, r5
 8006982:	bd38      	pop	{r3, r4, r5, pc}

08006984 <__ssputs_r>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	688e      	ldr	r6, [r1, #8]
 800698a:	429e      	cmp	r6, r3
 800698c:	4682      	mov	sl, r0
 800698e:	460c      	mov	r4, r1
 8006990:	4690      	mov	r8, r2
 8006992:	4699      	mov	r9, r3
 8006994:	d837      	bhi.n	8006a06 <__ssputs_r+0x82>
 8006996:	898a      	ldrh	r2, [r1, #12]
 8006998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800699c:	d031      	beq.n	8006a02 <__ssputs_r+0x7e>
 800699e:	6825      	ldr	r5, [r4, #0]
 80069a0:	6909      	ldr	r1, [r1, #16]
 80069a2:	1a6f      	subs	r7, r5, r1
 80069a4:	6965      	ldr	r5, [r4, #20]
 80069a6:	2302      	movs	r3, #2
 80069a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80069b0:	f109 0301 	add.w	r3, r9, #1
 80069b4:	443b      	add	r3, r7
 80069b6:	429d      	cmp	r5, r3
 80069b8:	bf38      	it	cc
 80069ba:	461d      	movcc	r5, r3
 80069bc:	0553      	lsls	r3, r2, #21
 80069be:	d530      	bpl.n	8006a22 <__ssputs_r+0x9e>
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7fe fa47 	bl	8004e54 <_malloc_r>
 80069c6:	4606      	mov	r6, r0
 80069c8:	b950      	cbnz	r0, 80069e0 <__ssputs_r+0x5c>
 80069ca:	230c      	movs	r3, #12
 80069cc:	f8ca 3000 	str.w	r3, [sl]
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e0:	463a      	mov	r2, r7
 80069e2:	6921      	ldr	r1, [r4, #16]
 80069e4:	f7fe f9d4 	bl	8004d90 <memcpy>
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	81a3      	strh	r3, [r4, #12]
 80069f4:	6126      	str	r6, [r4, #16]
 80069f6:	6165      	str	r5, [r4, #20]
 80069f8:	443e      	add	r6, r7
 80069fa:	1bed      	subs	r5, r5, r7
 80069fc:	6026      	str	r6, [r4, #0]
 80069fe:	60a5      	str	r5, [r4, #8]
 8006a00:	464e      	mov	r6, r9
 8006a02:	454e      	cmp	r6, r9
 8006a04:	d900      	bls.n	8006a08 <__ssputs_r+0x84>
 8006a06:	464e      	mov	r6, r9
 8006a08:	4632      	mov	r2, r6
 8006a0a:	4641      	mov	r1, r8
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	f000 f91d 	bl	8006c4c <memmove>
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	1b9b      	subs	r3, r3, r6
 8006a16:	60a3      	str	r3, [r4, #8]
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	441e      	add	r6, r3
 8006a1c:	6026      	str	r6, [r4, #0]
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e7dc      	b.n	80069dc <__ssputs_r+0x58>
 8006a22:	462a      	mov	r2, r5
 8006a24:	f000 f92b 	bl	8006c7e <_realloc_r>
 8006a28:	4606      	mov	r6, r0
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d1e2      	bne.n	80069f4 <__ssputs_r+0x70>
 8006a2e:	6921      	ldr	r1, [r4, #16]
 8006a30:	4650      	mov	r0, sl
 8006a32:	f7fe f9c1 	bl	8004db8 <_free_r>
 8006a36:	e7c8      	b.n	80069ca <__ssputs_r+0x46>

08006a38 <_svfiprintf_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	461d      	mov	r5, r3
 8006a3e:	898b      	ldrh	r3, [r1, #12]
 8006a40:	061f      	lsls	r7, r3, #24
 8006a42:	b09d      	sub	sp, #116	; 0x74
 8006a44:	4680      	mov	r8, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	4616      	mov	r6, r2
 8006a4a:	d50f      	bpl.n	8006a6c <_svfiprintf_r+0x34>
 8006a4c:	690b      	ldr	r3, [r1, #16]
 8006a4e:	b96b      	cbnz	r3, 8006a6c <_svfiprintf_r+0x34>
 8006a50:	2140      	movs	r1, #64	; 0x40
 8006a52:	f7fe f9ff 	bl	8004e54 <_malloc_r>
 8006a56:	6020      	str	r0, [r4, #0]
 8006a58:	6120      	str	r0, [r4, #16]
 8006a5a:	b928      	cbnz	r0, 8006a68 <_svfiprintf_r+0x30>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	f8c8 3000 	str.w	r3, [r8]
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	e0c8      	b.n	8006bfa <_svfiprintf_r+0x1c2>
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	6163      	str	r3, [r4, #20]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a70:	2320      	movs	r3, #32
 8006a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a76:	2330      	movs	r3, #48	; 0x30
 8006a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a7c:	9503      	str	r5, [sp, #12]
 8006a7e:	f04f 0b01 	mov.w	fp, #1
 8006a82:	4637      	mov	r7, r6
 8006a84:	463d      	mov	r5, r7
 8006a86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a8a:	b10b      	cbz	r3, 8006a90 <_svfiprintf_r+0x58>
 8006a8c:	2b25      	cmp	r3, #37	; 0x25
 8006a8e:	d13e      	bne.n	8006b0e <_svfiprintf_r+0xd6>
 8006a90:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a94:	d00b      	beq.n	8006aae <_svfiprintf_r+0x76>
 8006a96:	4653      	mov	r3, sl
 8006a98:	4632      	mov	r2, r6
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	f7ff ff71 	bl	8006984 <__ssputs_r>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	f000 80a4 	beq.w	8006bf0 <_svfiprintf_r+0x1b8>
 8006aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aaa:	4453      	add	r3, sl
 8006aac:	9309      	str	r3, [sp, #36]	; 0x24
 8006aae:	783b      	ldrb	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 809d 	beq.w	8006bf0 <_svfiprintf_r+0x1b8>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	9307      	str	r3, [sp, #28]
 8006ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8006aca:	462f      	mov	r7, r5
 8006acc:	2205      	movs	r2, #5
 8006ace:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006ad2:	4850      	ldr	r0, [pc, #320]	; (8006c14 <_svfiprintf_r+0x1dc>)
 8006ad4:	f7f9 fc0c 	bl	80002f0 <memchr>
 8006ad8:	9b04      	ldr	r3, [sp, #16]
 8006ada:	b9d0      	cbnz	r0, 8006b12 <_svfiprintf_r+0xda>
 8006adc:	06d9      	lsls	r1, r3, #27
 8006ade:	bf44      	itt	mi
 8006ae0:	2220      	movmi	r2, #32
 8006ae2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ae6:	071a      	lsls	r2, r3, #28
 8006ae8:	bf44      	itt	mi
 8006aea:	222b      	movmi	r2, #43	; 0x2b
 8006aec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006af0:	782a      	ldrb	r2, [r5, #0]
 8006af2:	2a2a      	cmp	r2, #42	; 0x2a
 8006af4:	d015      	beq.n	8006b22 <_svfiprintf_r+0xea>
 8006af6:	9a07      	ldr	r2, [sp, #28]
 8006af8:	462f      	mov	r7, r5
 8006afa:	2000      	movs	r0, #0
 8006afc:	250a      	movs	r5, #10
 8006afe:	4639      	mov	r1, r7
 8006b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b04:	3b30      	subs	r3, #48	; 0x30
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d94d      	bls.n	8006ba6 <_svfiprintf_r+0x16e>
 8006b0a:	b1b8      	cbz	r0, 8006b3c <_svfiprintf_r+0x104>
 8006b0c:	e00f      	b.n	8006b2e <_svfiprintf_r+0xf6>
 8006b0e:	462f      	mov	r7, r5
 8006b10:	e7b8      	b.n	8006a84 <_svfiprintf_r+0x4c>
 8006b12:	4a40      	ldr	r2, [pc, #256]	; (8006c14 <_svfiprintf_r+0x1dc>)
 8006b14:	1a80      	subs	r0, r0, r2
 8006b16:	fa0b f000 	lsl.w	r0, fp, r0
 8006b1a:	4318      	orrs	r0, r3
 8006b1c:	9004      	str	r0, [sp, #16]
 8006b1e:	463d      	mov	r5, r7
 8006b20:	e7d3      	b.n	8006aca <_svfiprintf_r+0x92>
 8006b22:	9a03      	ldr	r2, [sp, #12]
 8006b24:	1d11      	adds	r1, r2, #4
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	9103      	str	r1, [sp, #12]
 8006b2a:	2a00      	cmp	r2, #0
 8006b2c:	db01      	blt.n	8006b32 <_svfiprintf_r+0xfa>
 8006b2e:	9207      	str	r2, [sp, #28]
 8006b30:	e004      	b.n	8006b3c <_svfiprintf_r+0x104>
 8006b32:	4252      	negs	r2, r2
 8006b34:	f043 0302 	orr.w	r3, r3, #2
 8006b38:	9207      	str	r2, [sp, #28]
 8006b3a:	9304      	str	r3, [sp, #16]
 8006b3c:	783b      	ldrb	r3, [r7, #0]
 8006b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b40:	d10c      	bne.n	8006b5c <_svfiprintf_r+0x124>
 8006b42:	787b      	ldrb	r3, [r7, #1]
 8006b44:	2b2a      	cmp	r3, #42	; 0x2a
 8006b46:	d133      	bne.n	8006bb0 <_svfiprintf_r+0x178>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	1d1a      	adds	r2, r3, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	9203      	str	r2, [sp, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bfb8      	it	lt
 8006b54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b58:	3702      	adds	r7, #2
 8006b5a:	9305      	str	r3, [sp, #20]
 8006b5c:	4d2e      	ldr	r5, [pc, #184]	; (8006c18 <_svfiprintf_r+0x1e0>)
 8006b5e:	7839      	ldrb	r1, [r7, #0]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7f9 fbc4 	bl	80002f0 <memchr>
 8006b68:	b138      	cbz	r0, 8006b7a <_svfiprintf_r+0x142>
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	1b40      	subs	r0, r0, r5
 8006b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	4303      	orrs	r3, r0
 8006b76:	3701      	adds	r7, #1
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	7839      	ldrb	r1, [r7, #0]
 8006b7c:	4827      	ldr	r0, [pc, #156]	; (8006c1c <_svfiprintf_r+0x1e4>)
 8006b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b82:	2206      	movs	r2, #6
 8006b84:	1c7e      	adds	r6, r7, #1
 8006b86:	f7f9 fbb3 	bl	80002f0 <memchr>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d038      	beq.n	8006c00 <_svfiprintf_r+0x1c8>
 8006b8e:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <_svfiprintf_r+0x1e8>)
 8006b90:	bb13      	cbnz	r3, 8006bd8 <_svfiprintf_r+0x1a0>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	3307      	adds	r3, #7
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	444b      	add	r3, r9
 8006ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba4:	e76d      	b.n	8006a82 <_svfiprintf_r+0x4a>
 8006ba6:	fb05 3202 	mla	r2, r5, r2, r3
 8006baa:	2001      	movs	r0, #1
 8006bac:	460f      	mov	r7, r1
 8006bae:	e7a6      	b.n	8006afe <_svfiprintf_r+0xc6>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	3701      	adds	r7, #1
 8006bb4:	9305      	str	r3, [sp, #20]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	250a      	movs	r5, #10
 8006bba:	4638      	mov	r0, r7
 8006bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc0:	3a30      	subs	r2, #48	; 0x30
 8006bc2:	2a09      	cmp	r2, #9
 8006bc4:	d903      	bls.n	8006bce <_svfiprintf_r+0x196>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0c8      	beq.n	8006b5c <_svfiprintf_r+0x124>
 8006bca:	9105      	str	r1, [sp, #20]
 8006bcc:	e7c6      	b.n	8006b5c <_svfiprintf_r+0x124>
 8006bce:	fb05 2101 	mla	r1, r5, r1, r2
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	e7f0      	b.n	8006bba <_svfiprintf_r+0x182>
 8006bd8:	ab03      	add	r3, sp, #12
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <_svfiprintf_r+0x1ec>)
 8006be0:	a904      	add	r1, sp, #16
 8006be2:	4640      	mov	r0, r8
 8006be4:	f7fe fa18 	bl	8005018 <_printf_float>
 8006be8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006bec:	4681      	mov	r9, r0
 8006bee:	d1d6      	bne.n	8006b9e <_svfiprintf_r+0x166>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	065b      	lsls	r3, r3, #25
 8006bf4:	f53f af35 	bmi.w	8006a62 <_svfiprintf_r+0x2a>
 8006bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bfa:	b01d      	add	sp, #116	; 0x74
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c00:	ab03      	add	r3, sp, #12
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	4622      	mov	r2, r4
 8006c06:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <_svfiprintf_r+0x1ec>)
 8006c08:	a904      	add	r1, sp, #16
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	f7fe fca6 	bl	800555c <_printf_i>
 8006c10:	e7ea      	b.n	8006be8 <_svfiprintf_r+0x1b0>
 8006c12:	bf00      	nop
 8006c14:	080073b4 	.word	0x080073b4
 8006c18:	080073ba 	.word	0x080073ba
 8006c1c:	080073be 	.word	0x080073be
 8006c20:	08005019 	.word	0x08005019
 8006c24:	08006985 	.word	0x08006985

08006c28 <__ascii_mbtowc>:
 8006c28:	b082      	sub	sp, #8
 8006c2a:	b901      	cbnz	r1, 8006c2e <__ascii_mbtowc+0x6>
 8006c2c:	a901      	add	r1, sp, #4
 8006c2e:	b142      	cbz	r2, 8006c42 <__ascii_mbtowc+0x1a>
 8006c30:	b14b      	cbz	r3, 8006c46 <__ascii_mbtowc+0x1e>
 8006c32:	7813      	ldrb	r3, [r2, #0]
 8006c34:	600b      	str	r3, [r1, #0]
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	1c10      	adds	r0, r2, #0
 8006c3a:	bf18      	it	ne
 8006c3c:	2001      	movne	r0, #1
 8006c3e:	b002      	add	sp, #8
 8006c40:	4770      	bx	lr
 8006c42:	4610      	mov	r0, r2
 8006c44:	e7fb      	b.n	8006c3e <__ascii_mbtowc+0x16>
 8006c46:	f06f 0001 	mvn.w	r0, #1
 8006c4a:	e7f8      	b.n	8006c3e <__ascii_mbtowc+0x16>

08006c4c <memmove>:
 8006c4c:	4288      	cmp	r0, r1
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	eb01 0302 	add.w	r3, r1, r2
 8006c54:	d807      	bhi.n	8006c66 <memmove+0x1a>
 8006c56:	1e42      	subs	r2, r0, #1
 8006c58:	4299      	cmp	r1, r3
 8006c5a:	d00a      	beq.n	8006c72 <memmove+0x26>
 8006c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c60:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c64:	e7f8      	b.n	8006c58 <memmove+0xc>
 8006c66:	4283      	cmp	r3, r0
 8006c68:	d9f5      	bls.n	8006c56 <memmove+0xa>
 8006c6a:	1881      	adds	r1, r0, r2
 8006c6c:	1ad2      	subs	r2, r2, r3
 8006c6e:	42d3      	cmn	r3, r2
 8006c70:	d100      	bne.n	8006c74 <memmove+0x28>
 8006c72:	bd10      	pop	{r4, pc}
 8006c74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c78:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c7c:	e7f7      	b.n	8006c6e <memmove+0x22>

08006c7e <_realloc_r>:
 8006c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c80:	4607      	mov	r7, r0
 8006c82:	4614      	mov	r4, r2
 8006c84:	460e      	mov	r6, r1
 8006c86:	b921      	cbnz	r1, 8006c92 <_realloc_r+0x14>
 8006c88:	4611      	mov	r1, r2
 8006c8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c8e:	f7fe b8e1 	b.w	8004e54 <_malloc_r>
 8006c92:	b922      	cbnz	r2, 8006c9e <_realloc_r+0x20>
 8006c94:	f7fe f890 	bl	8004db8 <_free_r>
 8006c98:	4625      	mov	r5, r4
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c9e:	f000 f821 	bl	8006ce4 <_malloc_usable_size_r>
 8006ca2:	42a0      	cmp	r0, r4
 8006ca4:	d20f      	bcs.n	8006cc6 <_realloc_r+0x48>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7fe f8d3 	bl	8004e54 <_malloc_r>
 8006cae:	4605      	mov	r5, r0
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d0f2      	beq.n	8006c9a <_realloc_r+0x1c>
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	f7fe f86a 	bl	8004d90 <memcpy>
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f7fe f87a 	bl	8004db8 <_free_r>
 8006cc4:	e7e9      	b.n	8006c9a <_realloc_r+0x1c>
 8006cc6:	4635      	mov	r5, r6
 8006cc8:	e7e7      	b.n	8006c9a <_realloc_r+0x1c>

08006cca <__ascii_wctomb>:
 8006cca:	b149      	cbz	r1, 8006ce0 <__ascii_wctomb+0x16>
 8006ccc:	2aff      	cmp	r2, #255	; 0xff
 8006cce:	bf85      	ittet	hi
 8006cd0:	238a      	movhi	r3, #138	; 0x8a
 8006cd2:	6003      	strhi	r3, [r0, #0]
 8006cd4:	700a      	strbls	r2, [r1, #0]
 8006cd6:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cda:	bf98      	it	ls
 8006cdc:	2001      	movls	r0, #1
 8006cde:	4770      	bx	lr
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4770      	bx	lr

08006ce4 <_malloc_usable_size_r>:
 8006ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ce8:	1f18      	subs	r0, r3, #4
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bfbc      	itt	lt
 8006cee:	580b      	ldrlt	r3, [r1, r0]
 8006cf0:	18c0      	addlt	r0, r0, r3
 8006cf2:	4770      	bx	lr

08006cf4 <atan2>:
 8006cf4:	f000 b850 	b.w	8006d98 <__ieee754_atan2>

08006cf8 <sqrtf>:
 8006cf8:	b500      	push	{lr}
 8006cfa:	ed2d 8b02 	vpush	{d8}
 8006cfe:	b08b      	sub	sp, #44	; 0x2c
 8006d00:	eeb0 8a40 	vmov.f32	s16, s0
 8006d04:	f000 f92a 	bl	8006f5c <__ieee754_sqrtf>
 8006d08:	4b21      	ldr	r3, [pc, #132]	; (8006d90 <sqrtf+0x98>)
 8006d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	d028      	beq.n	8006d64 <sqrtf+0x6c>
 8006d12:	eeb4 8a48 	vcmp.f32	s16, s16
 8006d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1a:	d623      	bvs.n	8006d64 <sqrtf+0x6c>
 8006d1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d24:	d51e      	bpl.n	8006d64 <sqrtf+0x6c>
 8006d26:	2201      	movs	r2, #1
 8006d28:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8006d2c:	9200      	str	r2, [sp, #0]
 8006d2e:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <sqrtf+0x9c>)
 8006d30:	9201      	str	r2, [sp, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	9208      	str	r2, [sp, #32]
 8006d36:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006d3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006d3e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8006d88 <sqrtf+0x90>
 8006d42:	b9a3      	cbnz	r3, 8006d6e <sqrtf+0x76>
 8006d44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006d48:	4668      	mov	r0, sp
 8006d4a:	f000 fa10 	bl	800716e <matherr>
 8006d4e:	b1a0      	cbz	r0, 8006d7a <sqrtf+0x82>
 8006d50:	9b08      	ldr	r3, [sp, #32]
 8006d52:	b11b      	cbz	r3, 8006d5c <sqrtf+0x64>
 8006d54:	f7fd ffe2 	bl	8004d1c <__errno>
 8006d58:	9b08      	ldr	r3, [sp, #32]
 8006d5a:	6003      	str	r3, [r0, #0]
 8006d5c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8006d60:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006d64:	b00b      	add	sp, #44	; 0x2c
 8006d66:	ecbd 8b02 	vpop	{d8}
 8006d6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8006d74:	ed8d 6b06 	vstr	d6, [sp, #24]
 8006d78:	d1e6      	bne.n	8006d48 <sqrtf+0x50>
 8006d7a:	f7fd ffcf 	bl	8004d1c <__errno>
 8006d7e:	2321      	movs	r3, #33	; 0x21
 8006d80:	6003      	str	r3, [r0, #0]
 8006d82:	e7e5      	b.n	8006d50 <sqrtf+0x58>
 8006d84:	f3af 8000 	nop.w
	...
 8006d90:	200001e0 	.word	0x200001e0
 8006d94:	080074d0 	.word	0x080074d0

08006d98 <__ieee754_atan2>:
 8006d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d9a:	ee11 6a10 	vmov	r6, s2
 8006d9e:	ee11 0a90 	vmov	r0, s3
 8006da2:	4273      	negs	r3, r6
 8006da4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006da8:	4333      	orrs	r3, r6
 8006daa:	4f6b      	ldr	r7, [pc, #428]	; (8006f58 <__ieee754_atan2+0x1c0>)
 8006dac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006db0:	42bb      	cmp	r3, r7
 8006db2:	ed8d 0b00 	vstr	d0, [sp]
 8006db6:	d80b      	bhi.n	8006dd0 <__ieee754_atan2+0x38>
 8006db8:	e9dd c500 	ldrd	ip, r5, [sp]
 8006dbc:	f1cc 0100 	rsb	r1, ip, #0
 8006dc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006dc4:	ea41 010c 	orr.w	r1, r1, ip
 8006dc8:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8006dcc:	42b9      	cmp	r1, r7
 8006dce:	d906      	bls.n	8006dde <__ieee754_atan2+0x46>
 8006dd0:	ed9d 7b00 	vldr	d7, [sp]
 8006dd4:	ee37 7b01 	vadd.f64	d7, d7, d1
 8006dd8:	ed8d 7b00 	vstr	d7, [sp]
 8006ddc:	e063      	b.n	8006ea6 <__ieee754_atan2+0x10e>
 8006dde:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8006de2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8006de6:	4331      	orrs	r1, r6
 8006de8:	d104      	bne.n	8006df4 <__ieee754_atan2+0x5c>
 8006dea:	b003      	add	sp, #12
 8006dec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006df0:	f000 b8ba 	b.w	8006f68 <atan>
 8006df4:	1784      	asrs	r4, r0, #30
 8006df6:	f004 0402 	and.w	r4, r4, #2
 8006dfa:	ea53 010c 	orrs.w	r1, r3, ip
 8006dfe:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8006e02:	d109      	bne.n	8006e18 <__ieee754_atan2+0x80>
 8006e04:	2c02      	cmp	r4, #2
 8006e06:	d078      	beq.n	8006efa <__ieee754_atan2+0x162>
 8006e08:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 8006f00 <__ieee754_atan2+0x168>
 8006e0c:	ed9d 6b00 	vldr	d6, [sp]
 8006e10:	2c03      	cmp	r4, #3
 8006e12:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8006e16:	e7df      	b.n	8006dd8 <__ieee754_atan2+0x40>
 8006e18:	ea52 0106 	orrs.w	r1, r2, r6
 8006e1c:	d107      	bne.n	8006e2e <__ieee754_atan2+0x96>
 8006e1e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8006f08 <__ieee754_atan2+0x170>
 8006e22:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8006f10 <__ieee754_atan2+0x178>
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	fe26 7b07 	vselge.f64	d7, d6, d7
 8006e2c:	e7d4      	b.n	8006dd8 <__ieee754_atan2+0x40>
 8006e2e:	42ba      	cmp	r2, r7
 8006e30:	d120      	bne.n	8006e74 <__ieee754_atan2+0xdc>
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d111      	bne.n	8006e5a <__ieee754_atan2+0xc2>
 8006e36:	2c02      	cmp	r4, #2
 8006e38:	d009      	beq.n	8006e4e <__ieee754_atan2+0xb6>
 8006e3a:	2c03      	cmp	r4, #3
 8006e3c:	d00a      	beq.n	8006e54 <__ieee754_atan2+0xbc>
 8006e3e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8006f18 <__ieee754_atan2+0x180>
 8006e42:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8006f20 <__ieee754_atan2+0x188>
 8006e46:	2c01      	cmp	r4, #1
 8006e48:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8006e4c:	e7c4      	b.n	8006dd8 <__ieee754_atan2+0x40>
 8006e4e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8006f28 <__ieee754_atan2+0x190>
 8006e52:	e7c1      	b.n	8006dd8 <__ieee754_atan2+0x40>
 8006e54:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8006f30 <__ieee754_atan2+0x198>
 8006e58:	e7be      	b.n	8006dd8 <__ieee754_atan2+0x40>
 8006e5a:	2c02      	cmp	r4, #2
 8006e5c:	d04d      	beq.n	8006efa <__ieee754_atan2+0x162>
 8006e5e:	2c03      	cmp	r4, #3
 8006e60:	d005      	beq.n	8006e6e <__ieee754_atan2+0xd6>
 8006e62:	2c01      	cmp	r4, #1
 8006e64:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8006f38 <__ieee754_atan2+0x1a0>
 8006e68:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8006f40 <__ieee754_atan2+0x1a8>
 8006e6c:	e7ec      	b.n	8006e48 <__ieee754_atan2+0xb0>
 8006e6e:	ed9f 7b24 	vldr	d7, [pc, #144]	; 8006f00 <__ieee754_atan2+0x168>
 8006e72:	e7b1      	b.n	8006dd8 <__ieee754_atan2+0x40>
 8006e74:	42bb      	cmp	r3, r7
 8006e76:	d0d2      	beq.n	8006e1e <__ieee754_atan2+0x86>
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	151b      	asrs	r3, r3, #20
 8006e7c:	2b3c      	cmp	r3, #60	; 0x3c
 8006e7e:	dc16      	bgt.n	8006eae <__ieee754_atan2+0x116>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	da01      	bge.n	8006e88 <__ieee754_atan2+0xf0>
 8006e84:	333c      	adds	r3, #60	; 0x3c
 8006e86:	db17      	blt.n	8006eb8 <__ieee754_atan2+0x120>
 8006e88:	ed9d 7b00 	vldr	d7, [sp]
 8006e8c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8006e90:	f000 f964 	bl	800715c <fabs>
 8006e94:	f000 f868 	bl	8006f68 <atan>
 8006e98:	ed8d 0b00 	vstr	d0, [sp]
 8006e9c:	2c01      	cmp	r4, #1
 8006e9e:	d00e      	beq.n	8006ebe <__ieee754_atan2+0x126>
 8006ea0:	2c02      	cmp	r4, #2
 8006ea2:	d014      	beq.n	8006ece <__ieee754_atan2+0x136>
 8006ea4:	b9f4      	cbnz	r4, 8006ee4 <__ieee754_atan2+0x14c>
 8006ea6:	ed9d 0b00 	vldr	d0, [sp]
 8006eaa:	b003      	add	sp, #12
 8006eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eae:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006f08 <__ieee754_atan2+0x170>
 8006eb2:	ed8d 7b00 	vstr	d7, [sp]
 8006eb6:	e7f1      	b.n	8006e9c <__ieee754_atan2+0x104>
 8006eb8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8006f40 <__ieee754_atan2+0x1a8>
 8006ebc:	e7f9      	b.n	8006eb2 <__ieee754_atan2+0x11a>
 8006ebe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ec2:	9901      	ldr	r1, [sp, #4]
 8006ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ec8:	e9cd 2300 	strd	r2, r3, [sp]
 8006ecc:	e7eb      	b.n	8006ea6 <__ieee754_atan2+0x10e>
 8006ece:	ed9d 6b00 	vldr	d6, [sp]
 8006ed2:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8006f48 <__ieee754_atan2+0x1b0>
 8006ed6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006eda:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8006f50 <__ieee754_atan2+0x1b8>
 8006ede:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ee2:	e779      	b.n	8006dd8 <__ieee754_atan2+0x40>
 8006ee4:	ed9d 6b00 	vldr	d6, [sp]
 8006ee8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8006f48 <__ieee754_atan2+0x1b0>
 8006eec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ef0:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8006f50 <__ieee754_atan2+0x1b8>
 8006ef4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006ef8:	e76e      	b.n	8006dd8 <__ieee754_atan2+0x40>
 8006efa:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006f50 <__ieee754_atan2+0x1b8>
 8006efe:	e76b      	b.n	8006dd8 <__ieee754_atan2+0x40>
 8006f00:	54442d18 	.word	0x54442d18
 8006f04:	c00921fb 	.word	0xc00921fb
 8006f08:	54442d18 	.word	0x54442d18
 8006f0c:	3ff921fb 	.word	0x3ff921fb
 8006f10:	54442d18 	.word	0x54442d18
 8006f14:	bff921fb 	.word	0xbff921fb
 8006f18:	54442d18 	.word	0x54442d18
 8006f1c:	bfe921fb 	.word	0xbfe921fb
 8006f20:	54442d18 	.word	0x54442d18
 8006f24:	3fe921fb 	.word	0x3fe921fb
 8006f28:	7f3321d2 	.word	0x7f3321d2
 8006f2c:	4002d97c 	.word	0x4002d97c
 8006f30:	7f3321d2 	.word	0x7f3321d2
 8006f34:	c002d97c 	.word	0xc002d97c
 8006f38:	00000000 	.word	0x00000000
 8006f3c:	80000000 	.word	0x80000000
	...
 8006f48:	33145c07 	.word	0x33145c07
 8006f4c:	3ca1a626 	.word	0x3ca1a626
 8006f50:	54442d18 	.word	0x54442d18
 8006f54:	400921fb 	.word	0x400921fb
 8006f58:	7ff00000 	.word	0x7ff00000

08006f5c <__ieee754_sqrtf>:
 8006f5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006f60:	4770      	bx	lr
 8006f62:	0000      	movs	r0, r0
 8006f64:	0000      	movs	r0, r0
	...

08006f68 <atan>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	eeb0 7b40 	vmov.f64	d7, d0
 8006f6e:	ee17 5a90 	vmov	r5, s15
 8006f72:	4b73      	ldr	r3, [pc, #460]	; (8007140 <atan+0x1d8>)
 8006f74:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	dd13      	ble.n	8006fa4 <atan+0x3c>
 8006f7c:	4b71      	ldr	r3, [pc, #452]	; (8007144 <atan+0x1dc>)
 8006f7e:	429c      	cmp	r4, r3
 8006f80:	dc03      	bgt.n	8006f8a <atan+0x22>
 8006f82:	d107      	bne.n	8006f94 <atan+0x2c>
 8006f84:	ee10 3a10 	vmov	r3, s0
 8006f88:	b123      	cbz	r3, 8006f94 <atan+0x2c>
 8006f8a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006f8e:	eeb0 0b47 	vmov.f64	d0, d7
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80070d0 <atan+0x168>
 8006f98:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80070d8 <atan+0x170>
 8006f9c:	2d00      	cmp	r5, #0
 8006f9e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8006fa2:	e7f4      	b.n	8006f8e <atan+0x26>
 8006fa4:	4b68      	ldr	r3, [pc, #416]	; (8007148 <atan+0x1e0>)
 8006fa6:	429c      	cmp	r4, r3
 8006fa8:	dc11      	bgt.n	8006fce <atan+0x66>
 8006faa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006fae:	429c      	cmp	r4, r3
 8006fb0:	dc0a      	bgt.n	8006fc8 <atan+0x60>
 8006fb2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8006fb6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80070e0 <atan+0x178>
 8006fba:	ee30 6b06 	vadd.f64	d6, d0, d6
 8006fbe:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc6:	dce2      	bgt.n	8006f8e <atan+0x26>
 8006fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fcc:	e013      	b.n	8006ff6 <atan+0x8e>
 8006fce:	f000 f8c5 	bl	800715c <fabs>
 8006fd2:	4b5e      	ldr	r3, [pc, #376]	; (800714c <atan+0x1e4>)
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	dc4f      	bgt.n	8007078 <atan+0x110>
 8006fd8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006fdc:	429c      	cmp	r4, r3
 8006fde:	dc41      	bgt.n	8007064 <atan+0xfc>
 8006fe0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8006fe4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8006fe8:	2300      	movs	r3, #0
 8006fea:	eea0 6b07 	vfma.f64	d6, d0, d7
 8006fee:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006ff2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8006ff6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80070e8 <atan+0x180>
 8006ffa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006ffe:	ee24 5b04 	vmul.f64	d5, d4, d4
 8007002:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80070f0 <atan+0x188>
 8007006:	eea5 3b06 	vfma.f64	d3, d5, d6
 800700a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80070f8 <atan+0x190>
 800700e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8007012:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007100 <atan+0x198>
 8007016:	eea6 3b05 	vfma.f64	d3, d6, d5
 800701a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8007108 <atan+0x1a0>
 800701e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8007022:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007110 <atan+0x1a8>
 8007026:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8007118 <atan+0x1b0>
 800702a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800702e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007120 <atan+0x1b8>
 8007032:	eea5 2b06 	vfma.f64	d2, d5, d6
 8007036:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007128 <atan+0x1c0>
 800703a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800703e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8007130 <atan+0x1c8>
 8007042:	eea6 2b05 	vfma.f64	d2, d6, d5
 8007046:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007138 <atan+0x1d0>
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8007050:	ee26 6b05 	vmul.f64	d6, d6, d5
 8007054:	eea3 6b04 	vfma.f64	d6, d3, d4
 8007058:	ee26 6b07 	vmul.f64	d6, d6, d7
 800705c:	d121      	bne.n	80070a2 <atan+0x13a>
 800705e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007062:	e794      	b.n	8006f8e <atan+0x26>
 8007064:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007068:	2301      	movs	r3, #1
 800706a:	ee30 6b47 	vsub.f64	d6, d0, d7
 800706e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007072:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007076:	e7be      	b.n	8006ff6 <atan+0x8e>
 8007078:	4b35      	ldr	r3, [pc, #212]	; (8007150 <atan+0x1e8>)
 800707a:	429c      	cmp	r4, r3
 800707c:	dc0b      	bgt.n	8007096 <atan+0x12e>
 800707e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007082:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007086:	ee30 5b47 	vsub.f64	d5, d0, d7
 800708a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800708e:	2302      	movs	r3, #2
 8007090:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007094:	e7af      	b.n	8006ff6 <atan+0x8e>
 8007096:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800709a:	2303      	movs	r3, #3
 800709c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80070a0:	e7a9      	b.n	8006ff6 <atan+0x8e>
 80070a2:	4a2c      	ldr	r2, [pc, #176]	; (8007154 <atan+0x1ec>)
 80070a4:	492c      	ldr	r1, [pc, #176]	; (8007158 <atan+0x1f0>)
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	441a      	add	r2, r3
 80070aa:	440b      	add	r3, r1
 80070ac:	ed93 5b00 	vldr	d5, [r3]
 80070b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80070b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80070b8:	ed92 6b00 	vldr	d6, [r2]
 80070bc:	2d00      	cmp	r5, #0
 80070be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80070c2:	bfb8      	it	lt
 80070c4:	eeb1 7b47 	vneglt.f64	d7, d7
 80070c8:	e761      	b.n	8006f8e <atan+0x26>
 80070ca:	bf00      	nop
 80070cc:	f3af 8000 	nop.w
 80070d0:	54442d18 	.word	0x54442d18
 80070d4:	bff921fb 	.word	0xbff921fb
 80070d8:	54442d18 	.word	0x54442d18
 80070dc:	3ff921fb 	.word	0x3ff921fb
 80070e0:	8800759c 	.word	0x8800759c
 80070e4:	7e37e43c 	.word	0x7e37e43c
 80070e8:	e322da11 	.word	0xe322da11
 80070ec:	3f90ad3a 	.word	0x3f90ad3a
 80070f0:	24760deb 	.word	0x24760deb
 80070f4:	3fa97b4b 	.word	0x3fa97b4b
 80070f8:	a0d03d51 	.word	0xa0d03d51
 80070fc:	3fb10d66 	.word	0x3fb10d66
 8007100:	c54c206e 	.word	0xc54c206e
 8007104:	3fb745cd 	.word	0x3fb745cd
 8007108:	920083ff 	.word	0x920083ff
 800710c:	3fc24924 	.word	0x3fc24924
 8007110:	5555550d 	.word	0x5555550d
 8007114:	3fd55555 	.word	0x3fd55555
 8007118:	52defd9a 	.word	0x52defd9a
 800711c:	bfadde2d 	.word	0xbfadde2d
 8007120:	2c6a6c2f 	.word	0x2c6a6c2f
 8007124:	bfa2b444 	.word	0xbfa2b444
 8007128:	af749a6d 	.word	0xaf749a6d
 800712c:	bfb3b0f2 	.word	0xbfb3b0f2
 8007130:	fe231671 	.word	0xfe231671
 8007134:	bfbc71c6 	.word	0xbfbc71c6
 8007138:	9998ebc4 	.word	0x9998ebc4
 800713c:	bfc99999 	.word	0xbfc99999
 8007140:	440fffff 	.word	0x440fffff
 8007144:	7ff00000 	.word	0x7ff00000
 8007148:	3fdbffff 	.word	0x3fdbffff
 800714c:	3ff2ffff 	.word	0x3ff2ffff
 8007150:	40037fff 	.word	0x40037fff
 8007154:	080074d8 	.word	0x080074d8
 8007158:	080074f8 	.word	0x080074f8

0800715c <fabs>:
 800715c:	ec51 0b10 	vmov	r0, r1, d0
 8007160:	ee10 2a10 	vmov	r2, s0
 8007164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007168:	ec43 2b10 	vmov	d0, r2, r3
 800716c:	4770      	bx	lr

0800716e <matherr>:
 800716e:	2000      	movs	r0, #0
 8007170:	4770      	bx	lr
	...

08007174 <_init>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr

08007180 <_fini>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr
