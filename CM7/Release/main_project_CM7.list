
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08007ca0  08007ca0  00017ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008080  08008080  00018080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800808c  0800808c  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  08008090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009140  240001e4  08008274  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24009324  08008274  00029324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029122  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004373  00000000  00000000  00049334  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00010933  00000000  00000000  0004d6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f50  00000000  00000000  0005dfda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002460  00000000  00000000  0005ef2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003b055  00000000  00000000  0006138a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00013408  00000000  00000000  0009c3df  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00184227  00000000  00000000  000af7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000e9  00000000  00000000  00233a0e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003f7c  00000000  00000000  00233af8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007c84 	.word	0x08007c84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	08007c84 	.word	0x08007c84

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	491d      	ldr	r1, [pc, #116]	; (8000708 <SystemInit+0x78>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000692:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <SystemInit+0x7c>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <SystemInit+0x80>)
{
 8000698:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800069a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4d1d      	ldr	r5, [pc, #116]	; (8000714 <SystemInit+0x84>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a0:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a4:	4e1c      	ldr	r6, [pc, #112]	; (8000718 <SystemInit+0x88>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a6:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80006aa:	690c      	ldr	r4, [r1, #16]
 80006ac:	f044 0404 	orr.w	r4, r4, #4
 80006b0:	610c      	str	r4, [r1, #16]
  RCC->CR |= RCC_CR_HSION;
 80006b2:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b4:	4919      	ldr	r1, [pc, #100]	; (800071c <SystemInit+0x8c>)
  RCC->CR |= RCC_CR_HSION;
 80006b6:	f044 0401 	orr.w	r4, r4, #1
 80006ba:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 80006bc:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	681c      	ldr	r4, [r3, #0]
 80006c0:	4020      	ands	r0, r4
 80006c2:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 80006c4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80006c6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80006c8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 80006d4:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 80006d6:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 80006d8:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80006e0:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80006e2:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 80006e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	626b      	str	r3, [r5, #36]	; 0x24
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ec:	6833      	ldr	r3, [r6, #0]
 80006ee:	4019      	ands	r1, r3
 80006f0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80006f4:	d202      	bcs.n	80006fc <SystemInit+0x6c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <SystemInit+0x90>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <SystemInit+0x78>)
 80006fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000702:	bc70      	pop	{r4, r5, r6}
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000704:	609a      	str	r2, [r3, #8]
}
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	58024400 	.word	0x58024400
 8000710:	eaf6ed7f 	.word	0xeaf6ed7f
 8000714:	580000c0 	.word	0x580000c0
 8000718:	5c001000 	.word	0x5c001000
 800071c:	ffff0000 	.word	0xffff0000
 8000720:	51008108 	.word	0x51008108

08000724 <inst_absolute>:

extern uint16_t frameSize;

// Preprocessing

void inst_absolute(float32_t in[], float32_t out[]){
 8000724:	b5a0      	push	{r5, r7, lr}
	int j = 0;
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000726:	4f18      	ldr	r7, [pc, #96]	; (8000788 <inst_absolute+0x64>)
 8000728:	883b      	ldrh	r3, [r7, #0]
void inst_absolute(float32_t in[], float32_t out[]){
 800072a:	ed2d 8b02 	vpush	{d8}
 800072e:	b083      	sub	sp, #12
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000730:	b1b3      	cbz	r3, 8000760 <inst_absolute+0x3c>
 8000732:	2500      	movs	r5, #0
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000734:	ed90 0a01 	vldr	s0, [r0, #4]
 8000738:	edd0 7a00 	vldr	s15, [r0]
 800073c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000740:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8000744:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000748:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000750:	d40a      	bmi.n	8000768 <inst_absolute+0x44>
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000752:	3502      	adds	r5, #2
 8000754:	3008      	adds	r0, #8
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000756:	eca1 8a01 	vstmia	r1!, {s16}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800075a:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 800075e:	dbe9      	blt.n	8000734 <inst_absolute+0x10>
		j++;
	}
}
 8000760:	b003      	add	sp, #12
 8000762:	ecbd 8b02 	vpop	{d8}
 8000766:	bda0      	pop	{r5, r7, pc}
 8000768:	e9cd 0100 	strd	r0, r1, [sp]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800076c:	3502      	adds	r5, #2
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 800076e:	f007 f8af 	bl	80078d0 <sqrtf>
 8000772:	883b      	ldrh	r3, [r7, #0]
 8000774:	9800      	ldr	r0, [sp, #0]
 8000776:	9901      	ldr	r1, [sp, #4]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000778:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 800077c:	f100 0008 	add.w	r0, r0, #8
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000780:	eca1 8a01 	vstmia	r1!, {s16}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000784:	dbd6      	blt.n	8000734 <inst_absolute+0x10>
 8000786:	e7eb      	b.n	8000760 <inst_absolute+0x3c>
 8000788:	08007cb0 	.word	0x08007cb0

0800078c <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int j = 0;
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800078e:	4f0a      	ldr	r7, [pc, #40]	; (80007b8 <inst_phase+0x2c>)
 8000790:	883b      	ldrh	r3, [r7, #0]
 8000792:	b183      	cbz	r3, 80007b6 <inst_phase+0x2a>
 8000794:	4604      	mov	r4, r0
 8000796:	460e      	mov	r6, r1
 8000798:	2500      	movs	r5, #0
		out[j] = atan2f(in[i+1], in[i]);
 800079a:	edd4 0a00 	vldr	s1, [r4]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800079e:	3502      	adds	r5, #2
		out[j] = atan2f(in[i+1], in[i]);
 80007a0:	ed94 0a01 	vldr	s0, [r4, #4]
 80007a4:	3408      	adds	r4, #8
 80007a6:	f007 f891 	bl	80078cc <atan2f>
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007aa:	883b      	ldrh	r3, [r7, #0]
		out[j] = atan2f(in[i+1], in[i]);
 80007ac:	eca6 0a01 	vstmia	r6!, {s0}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80007b0:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 80007b4:	dbf1      	blt.n	800079a <inst_phase+0xe>
		j++;
	}
}
 80007b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007b8:	08007cb0 	.word	0x08007cb0
 80007bc:	00000000 	.word	0x00000000

080007c0 <unwrap>:
	yout((i+1),:)=u(i+1)+(2*pi*k); % add 2*pi*k to the last element of the input
	*/
	uint16_t k = 0;
	float32_t alpha = M_PI;
	float32_t diff = 0.0f;
	for(int i = 0; i < (frameSize - 1); i++){
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <unwrap+0xb0>)
void unwrap(float32_t in[], float32_t out[]){
 80007c2:	b4f0      	push	{r4, r5, r6, r7}
	for(int i = 0; i < (frameSize - 1); i++){
 80007c4:	881f      	ldrh	r7, [r3, #0]
 80007c6:	2f01      	cmp	r7, #1
 80007c8:	d947      	bls.n	800085a <unwrap+0x9a>
 80007ca:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 80007ce:	4603      	mov	r3, r0
 80007d0:	460c      	mov	r4, r1
	uint16_t k = 0;
 80007d2:	2200      	movs	r2, #0
 80007d4:	3d04      	subs	r5, #4
		out[i] = in[i] + 2*M_PI*k;
		diff = fabsf(in[i+1] - in[i]);
		if(diff > alpha){
 80007d6:	ed9f 5a27 	vldr	s10, [pc, #156]	; 8000874 <unwrap+0xb4>
 80007da:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8000860 <unwrap+0xa0>
		out[i] = in[i] + 2*M_PI*k;
 80007de:	ed9f 3b22 	vldr	d3, [pc, #136]	; 8000868 <unwrap+0xa8>
 80007e2:	ee24 6b03 	vmul.f64	d6, d4, d3
 80007e6:	ed93 7a00 	vldr	s14, [r3]
 80007ea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80007ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007f2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80007f6:	eca4 7a01 	vstmia	r4!, {s14}
		diff = fabsf(in[i+1] - in[i]);
 80007fa:	edd3 5a01 	vldr	s11, [r3, #4]
 80007fe:	ecb3 7a01 	vldmia	r3!, {s14}
 8000802:	ee75 7ac7 	vsub.f32	s15, s11, s14
 8000806:	eef0 7ae7 	vabs.f32	s15, s15
		if(diff > alpha){
 800080a:	eef4 7ac5 	vcmpe.f32	s15, s10
 800080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000812:	dd0e      	ble.n	8000832 <unwrap+0x72>
			if(in[i+1] < in[i]){
 8000814:	eef4 5ac7 	vcmpe.f32	s11, s14
				k++;
			} else {
				k--;
 8000818:	1e56      	subs	r6, r2, #1
				k++;
 800081a:	3201      	adds	r2, #1
			if(in[i+1] < in[i]){
 800081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				k++;
 8000820:	bf4c      	ite	mi
 8000822:	b292      	uxthmi	r2, r2
				k--;
 8000824:	b2b2      	uxthpl	r2, r6
 8000826:	ee07 2a90 	vmov	s15, r2
 800082a:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800082e:	ee24 6b03 	vmul.f64	d6, d4, d3
	for(int i = 0; i < (frameSize - 1); i++){
 8000832:	429d      	cmp	r5, r3
 8000834:	d1d5      	bne.n	80007e2 <unwrap+0x22>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 8000836:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800083a:	443b      	add	r3, r7
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4418      	add	r0, r3
 8000840:	440b      	add	r3, r1
 8000842:	ed90 7a00 	vldr	s14, [r0]
 8000846:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 800084a:	bcf0      	pop	{r4, r5, r6, r7}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 800084c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000850:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8000854:	ed83 6a00 	vstr	s12, [r3]
}
 8000858:	4770      	bx	lr
	for(int i = 0; i < (frameSize - 1); i++){
 800085a:	ed9f 6b01 	vldr	d6, [pc, #4]	; 8000860 <unwrap+0xa0>
 800085e:	e7ea      	b.n	8000836 <unwrap+0x76>
	...
 8000868:	54442d18 	.word	0x54442d18
 800086c:	401921fb 	.word	0x401921fb
 8000870:	08007cb0 	.word	0x08007cb0
 8000874:	40490fdb 	.word	0x40490fdb

08000878 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 8000878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800087c:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
	float32_t phase[1024] = {0};
 8000880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
void inst_frequency(float32_t in[], float32_t out[]){
 8000884:	4604      	mov	r4, r0
 8000886:	460d      	mov	r5, r1
	float32_t phase[1024] = {0};
 8000888:	4668      	mov	r0, sp
 800088a:	2100      	movs	r1, #0
	for(int i = 0; i < 2*frameSize; i = i + 2){
 800088c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8000a18 <inst_frequency+0x1a0>
	float32_t phase[1024] = {0};
 8000890:	f005 f875 	bl	800597e <memset>
	float32_t unwrapped_phase[1024] = {0};
 8000894:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
 8000898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089c:	2100      	movs	r1, #0
 800089e:	f005 f86e 	bl	800597e <memset>
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80008a2:	f8b8 3000 	ldrh.w	r3, [r8]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 80a2 	beq.w	80009f0 <inst_frequency+0x178>
 80008ac:	466f      	mov	r7, sp
 80008ae:	2600      	movs	r6, #0
		out[j] = atan2f(in[i+1], in[i]);
 80008b0:	edd4 0a00 	vldr	s1, [r4]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80008b4:	3602      	adds	r6, #2
		out[j] = atan2f(in[i+1], in[i]);
 80008b6:	ed94 0a01 	vldr	s0, [r4, #4]
 80008ba:	3408      	adds	r4, #8
 80008bc:	f007 f806 	bl	80078cc <atan2f>
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80008c0:	f8b8 3000 	ldrh.w	r3, [r8]
		out[j] = atan2f(in[i+1], in[i]);
 80008c4:	eca7 0a01 	vstmia	r7!, {s0}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80008c8:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 80008cc:	dbf0      	blt.n	80008b0 <inst_frequency+0x38>
	for(int i = 0; i < (frameSize - 1); i++){
 80008ce:	1e5c      	subs	r4, r3, #1
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	f340 808d 	ble.w	80009f0 <inst_frequency+0x178>
 80008d6:	4668      	mov	r0, sp
 80008d8:	f60d 76fc 	addw	r6, sp, #4092	; 0xffc
 80008dc:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
	uint16_t k = 0;
 80008e0:	2100      	movs	r1, #0
 80008e2:	ecb0 6a01 	vldmia	r0!, {s12}
 80008e6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		if(diff > alpha){
 80008ea:	ed9f 5a49 	vldr	s10, [pc, #292]	; 8000a10 <inst_frequency+0x198>
 80008ee:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8000a00 <inst_frequency+0x188>
		out[i] = in[i] + 2*M_PI*k;
 80008f2:	ed9f 2b45 	vldr	d2, [pc, #276]	; 8000a08 <inst_frequency+0x190>
		diff = fabsf(in[i+1] - in[i]);
 80008f6:	ecf0 5a01 	vldmia	r0!, {s11}
		out[i] = in[i] + 2*M_PI*k;
 80008fa:	ee23 4b02 	vmul.f64	d4, d3, d2
		diff = fabsf(in[i+1] - in[i]);
 80008fe:	ee75 6ac6 	vsub.f32	s13, s11, s12
		out[i] = in[i] + 2*M_PI*k;
 8000902:	eeb7 7ac6 	vcvt.f64.f32	d7, s12
		diff = fabsf(in[i+1] - in[i]);
 8000906:	eef0 6ae6 	vabs.f32	s13, s13
		out[i] = in[i] + 2*M_PI*k;
 800090a:	ee37 7b04 	vadd.f64	d7, d7, d4
		if(diff > alpha){
 800090e:	eef4 6ac5 	vcmpe.f32	s13, s10
		out[i] = in[i] + 2*M_PI*k;
 8000912:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		if(diff > alpha){
 8000916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		out[i] = in[i] + 2*M_PI*k;
 800091a:	eca2 7a01 	vstmia	r2!, {s14}
		if(diff > alpha){
 800091e:	dd0e      	ble.n	800093e <inst_frequency+0xc6>
			if(in[i+1] < in[i]){
 8000920:	eef4 5ac6 	vcmpe.f32	s11, s12
				k--;
 8000924:	1e4f      	subs	r7, r1, #1
				k++;
 8000926:	3101      	adds	r1, #1
			if(in[i+1] < in[i]){
 8000928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				k++;
 800092c:	bf4c      	ite	mi
 800092e:	b289      	uxthmi	r1, r1
				k--;
 8000930:	b2b9      	uxthpl	r1, r7
 8000932:	ee07 1a90 	vmov	s15, r1
 8000936:	eeb8 3be7 	vcvt.f64.s32	d3, s15
 800093a:	ee23 4b02 	vmul.f64	d4, d3, d2
	for(int i = 0; i < (frameSize - 1); i++){
 800093e:	4296      	cmp	r6, r2
 8000940:	eeb0 6a65 	vmov.f32	s12, s11
 8000944:	d1d7      	bne.n	80008f6 <inst_frequency+0x7e>
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 8000946:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 800094a:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 800094e:	2b03      	cmp	r3, #3
 8000950:	441e      	add	r6, r3
 8000952:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8000956:	eb0d 0206 	add.w	r2, sp, r6
 800095a:	4431      	add	r1, r6
 800095c:	ed92 7a00 	vldr	s14, [r2]
 8000960:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8000964:	ee37 4b04 	vadd.f64	d4, d7, d4
 8000968:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
 800096c:	ed81 4a00 	vstr	s8, [r1]
 8000970:	dd43      	ble.n	80009fa <inst_frequency+0x182>
 8000972:	1f18      	subs	r0, r3, #4
 8000974:	f50d 5380 	add.w	r3, sp, #4096	; 0x1000
 8000978:	462a      	mov	r2, r5
	float32_t C = 1 / M_TWOPI;
	inst_phase(&in[0], &phase[0]);
	unwrap(&phase[0], &unwrapped_phase[0]);
	for(int i = 0; i < (frameSize-1); i++){
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 800097a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8000a14 <inst_frequency+0x19c>
 800097e:	f020 0001 	bic.w	r0, r0, #1
 8000982:	edd3 6a00 	vldr	s13, [r3]
 8000986:	4619      	mov	r1, r3
	for(int i = 0; i < (frameSize-1); i++){
 8000988:	2300      	movs	r3, #0
 800098a:	3002      	adds	r0, #2
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 800098c:	edd1 7a01 	vldr	s15, [r1, #4]
 8000990:	3108      	adds	r1, #8
 8000992:	3302      	adds	r3, #2
 8000994:	3208      	adds	r2, #8
 8000996:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800099a:	edd1 6a00 	vldr	s13, [r1]
 800099e:	4298      	cmp	r0, r3
 80009a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80009a4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80009a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80009ac:	ed02 7a02 	vstr	s14, [r2, #-8]
 80009b0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80009b4:	d1ea      	bne.n	800098c <inst_frequency+0x114>
 80009b6:	0099      	lsls	r1, r3, #2
 80009b8:	f50d 5280 	add.w	r2, sp, #4096	; 0x1000
 80009bc:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000a14 <inst_frequency+0x19c>
 80009c0:	1850      	adds	r0, r2, r1
 80009c2:	4429      	add	r1, r5
 80009c4:	4602      	mov	r2, r0
 80009c6:	edd0 7a01 	vldr	s15, [r0, #4]
 80009ca:	3301      	adds	r3, #1
 80009cc:	3004      	adds	r0, #4
 80009ce:	ed92 7a00 	vldr	s14, [r2]
	for(int i = 0; i < (frameSize-1); i++){
 80009d2:	429c      	cmp	r4, r3
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 80009d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009dc:	ece1 7a01 	vstmia	r1!, {s15}
	for(int i = 0; i < (frameSize-1); i++){
 80009e0:	dcf0      	bgt.n	80009c4 <inst_frequency+0x14c>
	}
	out[frameSize - 1] = 0;
 80009e2:	4435      	add	r5, r6
 80009e4:	2300      	movs	r3, #0
 80009e6:	602b      	str	r3, [r5, #0]
}
 80009e8:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
 80009ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 80009f0:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 80009f4:	441e      	add	r6, r3
 80009f6:	00b6      	lsls	r6, r6, #2
 80009f8:	e7f3      	b.n	80009e2 <inst_frequency+0x16a>
 80009fa:	2300      	movs	r3, #0
 80009fc:	e7db      	b.n	80009b6 <inst_frequency+0x13e>
 80009fe:	bf00      	nop
	...
 8000a08:	54442d18 	.word	0x54442d18
 8000a0c:	401921fb 	.word	0x401921fb
 8000a10:	40490fdb 	.word	0x40490fdb
 8000a14:	3e22f983 	.word	0x3e22f983
 8000a18:	08007cb0 	.word	0x08007cb0

08000a1c <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float32_t mean = 0, max = 0;
	uint32_t max_index = 0;
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a20:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8000b10 <inst_centralized_normalized_absolute+0xf4>
	float32_t mean = 0, max = 0;
 8000a24:	2300      	movs	r3, #0
	uint32_t max_index = 0;
 8000a26:	2500      	movs	r5, #0
void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000a28:	4604      	mov	r4, r0
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a2a:	f8b9 b000 	ldrh.w	fp, [r9]
void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000a2e:	460e      	mov	r6, r1
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a30:	ea4f 078b 	mov.w	r7, fp, lsl #2
void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000a34:	ed2d 8b02 	vpush	{d8}
 8000a38:	b085      	sub	sp, #20
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a3a:	4638      	mov	r0, r7
	float32_t mean = 0, max = 0;
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	9302      	str	r3, [sp, #8]
	uint32_t max_index = 0;
 8000a40:	9503      	str	r5, [sp, #12]
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a42:	f004 ff81 	bl	8005948 <malloc>
 8000a46:	4680      	mov	r8, r0
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000a48:	4638      	mov	r0, r7
 8000a4a:	f004 ff7d 	bl	8005948 <malloc>
 8000a4e:	4607      	mov	r7, r0
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a50:	f1bb 0f00 	cmp.w	fp, #0
 8000a54:	d017      	beq.n	8000a86 <inst_centralized_normalized_absolute+0x6a>
 8000a56:	46c2      	mov	sl, r8
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000a58:	ed94 0a01 	vldr	s0, [r4, #4]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a5c:	3502      	adds	r5, #2
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000a5e:	edd4 7a00 	vldr	s15, [r4]
 8000a62:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000a66:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8000a6a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000a6e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8000a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a76:	d440      	bmi.n	8000afa <inst_centralized_normalized_absolute+0xde>
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a78:	ebb5 0f4b 	cmp.w	r5, fp, lsl #1
 8000a7c:	f104 0408 	add.w	r4, r4, #8
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000a80:	ecaa 8a01 	vstmia	sl!, {s16}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000a84:	dbe8      	blt.n	8000a58 <inst_centralized_normalized_absolute+0x3c>
	inst_absolute(in, &absolute[0]);
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000a86:	4659      	mov	r1, fp
 8000a88:	ab03      	add	r3, sp, #12
 8000a8a:	aa02      	add	r2, sp, #8
 8000a8c:	4640      	mov	r0, r8
 8000a8e:	f004 fecb 	bl	8005828 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000a92:	f8b9 1000 	ldrh.w	r1, [r9]
 8000a96:	b169      	cbz	r1, 8000ab4 <inst_centralized_normalized_absolute+0x98>
		normalized[a] = absolute[a] / max;
 8000a98:	eddd 6a02 	vldr	s13, [sp, #8]
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	463a      	mov	r2, r7
 8000aa0:	eb08 0081 	add.w	r0, r8, r1, lsl #2
 8000aa4:	ecb3 7a01 	vldmia	r3!, {s14}
 8000aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	for(int a = 0; a < frameSize; a++){
 8000aac:	4298      	cmp	r0, r3
		normalized[a] = absolute[a] / max;
 8000aae:	ece2 7a01 	vstmia	r2!, {s15}
	for(int a = 0; a < frameSize; a++){
 8000ab2:	d1f7      	bne.n	8000aa4 <inst_centralized_normalized_absolute+0x88>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000ab4:	aa01      	add	r2, sp, #4
 8000ab6:	4638      	mov	r0, r7
 8000ab8:	f004 fe80 	bl	80057bc <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000abc:	f8b9 2000 	ldrh.w	r2, [r9]
 8000ac0:	b182      	cbz	r2, 8000ae4 <inst_centralized_normalized_absolute+0xc8>
		out[i] = normalized[i] / mean - 1;
 8000ac2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000ac6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8000aca:	eddd 6a01 	vldr	s13, [sp, #4]
 8000ace:	463b      	mov	r3, r7
 8000ad0:	ecb3 7a01 	vldmia	r3!, {s14}
 8000ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	for(int i = 0; i < frameSize; i++){
 8000ad8:	4293      	cmp	r3, r2
		out[i] = normalized[i] / mean - 1;
 8000ada:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000ade:	ece6 7a01 	vstmia	r6!, {s15}
	for(int i = 0; i < frameSize; i++){
 8000ae2:	d1f5      	bne.n	8000ad0 <inst_centralized_normalized_absolute+0xb4>
	}
	free(absolute);
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	f004 ff37 	bl	8005958 <free>
	free(normalized);
 8000aea:	4638      	mov	r0, r7
}
 8000aec:	b005      	add	sp, #20
 8000aee:	ecbd 8b02 	vpop	{d8}
 8000af2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	free(normalized);
 8000af6:	f004 bf2f 	b.w	8005958 <free>
		out[j] = sqrtf(in[i] * in[i] + in[i+1] * in[i+1]);
 8000afa:	f006 fee9 	bl	80078d0 <sqrtf>
 8000afe:	f8b9 b000 	ldrh.w	fp, [r9]
 8000b02:	3408      	adds	r4, #8
 8000b04:	ecaa 8a01 	vstmia	sl!, {s16}
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000b08:	ebb5 0f4b 	cmp.w	r5, fp, lsl #1
 8000b0c:	dba4      	blt.n	8000a58 <inst_centralized_normalized_absolute+0x3c>
 8000b0e:	e7ba      	b.n	8000a86 <inst_centralized_normalized_absolute+0x6a>
 8000b10:	08007cb0 	.word	0x08007cb0

08000b14 <mean_of_squared>:

void mean(float32_t in[], float32_t *out) {
	arm_mean_f32(&in[0], frameSize, out);
}

void mean_of_squared(float32_t in[], float32_t *out) {
 8000b14:	b530      	push	{r4, r5, lr}
	float32_t result;
	arm_power_f32(&in[0], frameSize, &result);
 8000b16:	4c0a      	ldr	r4, [pc, #40]	; (8000b40 <mean_of_squared+0x2c>)
void mean_of_squared(float32_t in[], float32_t *out) {
 8000b18:	b083      	sub	sp, #12
 8000b1a:	460d      	mov	r5, r1
	arm_power_f32(&in[0], frameSize, &result);
 8000b1c:	aa01      	add	r2, sp, #4
 8000b1e:	8821      	ldrh	r1, [r4, #0]
 8000b20:	f004 fe12 	bl	8005748 <arm_power_f32>
	*out = result / (float32_t) frameSize;
 8000b24:	8823      	ldrh	r3, [r4, #0]
 8000b26:	eddd 6a01 	vldr	s13, [sp, #4]
 8000b2a:	ee07 3a90 	vmov	s15, r3
 8000b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b36:	ed85 7a00 	vstr	s14, [r5]
}
 8000b3a:	b003      	add	sp, #12
 8000b3c:	bd30      	pop	{r4, r5, pc}
 8000b3e:	bf00      	nop
 8000b40:	08007cb0 	.word	0x08007cb0

08000b44 <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
	arm_std_f32(&in[0], frameSize, out);
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <std_dev+0xc>)
 8000b46:	460a      	mov	r2, r1
 8000b48:	8819      	ldrh	r1, [r3, #0]
 8000b4a:	f004 bd85 	b.w	8005658 <arm_std_f32>
 8000b4e:	bf00      	nop
 8000b50:	08007cb0 	.word	0x08007cb0

08000b54 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <MX_GPIO_Init+0xfc>)
{
 8000b58:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	2400      	movs	r4, #0
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b5e:	4f3d      	ldr	r7, [pc, #244]	; (8000c54 <MX_GPIO_Init+0x100>)
 8000b60:	f244 0101 	movw	r1, #16385	; 0x4001
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	9408      	str	r4, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b66:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	9407      	str	r4, [sp, #28]
 8000b6a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b6c:	4e3a      	ldr	r6, [pc, #232]	; (8000c58 <MX_GPIO_Init+0x104>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b76:	f040 0004 	orr.w	r0, r0, #4
 8000b7a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000b7e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b82:	f000 0004 	and.w	r0, r0, #4
 8000b86:	9001      	str	r0, [sp, #4]
 8000b88:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b8e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8000b92:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000b96:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000b9a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000b9e:	9002      	str	r0, [sp, #8]
 8000ba0:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000ba6:	f040 0002 	orr.w	r0, r0, #2
 8000baa:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000bae:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000bb2:	f000 0002 	and.w	r0, r0, #2
 8000bb6:	9003      	str	r0, [sp, #12]
 8000bb8:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000bbe:	f040 0008 	orr.w	r0, r0, #8
 8000bc2:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000bc6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000bca:	f000 0008 	and.w	r0, r0, #8
 8000bce:	9004      	str	r0, [sp, #16]
 8000bd0:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000bd6:	4328      	orrs	r0, r5
 8000bd8:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000bdc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000be0:	4028      	ands	r0, r5
 8000be2:	9005      	str	r0, [sp, #20]
 8000be4:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000bea:	f040 0010 	orr.w	r0, r0, #16
 8000bee:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bf2:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	9306      	str	r3, [sp, #24]
 8000bfe:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c00:	f001 fc36 	bl	8002470 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c04:	4622      	mov	r2, r4
 8000c06:	4630      	mov	r0, r6
 8000c08:	2102      	movs	r1, #2
 8000c0a:	f001 fc31 	bl	8002470 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c0e:	f244 0301 	movw	r3, #16385	; 0x4001
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	4638      	mov	r0, r7
 8000c14:	a907      	add	r1, sp, #28

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f001 fb08 	bl	8002234 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c24:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c28:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	a907      	add	r1, sp, #28
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <MX_GPIO_Init+0x108>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c2e:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c30:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f001 fafc 	bl	8002234 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	a907      	add	r1, sp, #28
 8000c3e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c40:	e9cd 7507 	strd	r7, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f001 faf4 	bl	8002234 <HAL_GPIO_Init>

}
 8000c4c:	b00d      	add	sp, #52	; 0x34
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	58024400 	.word	0x58024400
 8000c54:	58020400 	.word	0x58020400
 8000c58:	58021000 	.word	0x58021000
 8000c5c:	58020000 	.word	0x58020000

08000c60 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	b0cd      	sub	sp, #308	; 0x134
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c64:	224c      	movs	r2, #76	; 0x4c
 8000c66:	2100      	movs	r1, #0
 8000c68:	a80a      	add	r0, sp, #40	; 0x28
 8000c6a:	f004 fe88 	bl	800597e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6e:	2220      	movs	r2, #32
 8000c70:	2100      	movs	r1, #0
 8000c72:	a802      	add	r0, sp, #8
 8000c74:	f004 fe83 	bl	800597e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	22bc      	movs	r2, #188	; 0xbc
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	a81d      	add	r0, sp, #116	; 0x74
 8000c7e:	f004 fe7e 	bl	800597e <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c82:	2004      	movs	r0, #4
 8000c84:	f001 fc0e 	bl	80024a4 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c88:	4924      	ldr	r1, [pc, #144]	; (8000d1c <SystemClock_Config+0xbc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <SystemClock_Config+0xc0>)
 8000c8e:	9201      	str	r2, [sp, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c90:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c92:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8000c94:	f020 0001 	bic.w	r0, r0, #1
 8000c98:	62c8      	str	r0, [r1, #44]	; 0x2c
 8000c9a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000c9c:	f001 0101 	and.w	r1, r1, #1
 8000ca0:	9101      	str	r1, [sp, #4]
 8000ca2:	6999      	ldr	r1, [r3, #24]
 8000ca4:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000ca8:	6199      	str	r1, [r3, #24]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb4:	6993      	ldr	r3, [r2, #24]
 8000cb6:	049b      	lsls	r3, r3, #18
 8000cb8:	d5fc      	bpl.n	8000cb4 <SystemClock_Config+0x54>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cba:	2540      	movs	r5, #64	; 0x40
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cbc:	2001      	movs	r0, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbe:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc0:	2600      	movs	r6, #0
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000cc2:	2104      	movs	r1, #4
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000cc4:	2232      	movs	r2, #50	; 0x32
	RCC_OscInitStruct.PLL.PLLP = 2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	RCC_OscInitStruct.PLL.PLLR = 2;
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cc6:	230c      	movs	r3, #12
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc8:	940a      	str	r4, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000cca:	9115      	str	r1, [sp, #84]	; 0x54
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ccc:	2703      	movs	r7, #3
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000cce:	9216      	str	r2, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cd0:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	9413      	str	r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000cd4:	9417      	str	r4, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd6:	9614      	str	r6, [sp, #80]	; 0x50
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd8:	e9cd 050d 	strd	r0, r5, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cdc:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000cde:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ce2:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce6:	f001 fc1d 	bl	8002524 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cea:	2208      	movs	r2, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cec:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	eb0d 0002 	add.w	r0, sp, r2
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cfa:	9205      	str	r2, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cfc:	9308      	str	r3, [sp, #32]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	9604      	str	r6, [sp, #16]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d00:	9509      	str	r5, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	e9cd c702 	strd	ip, r7, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d06:	e9cd 5506 	strd	r5, r5, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0a:	f001 ff8f 	bl	8002c2c <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0e:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d10:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8000d12:	973a      	str	r7, [sp, #232]	; 0xe8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d14:	f002 fbb4 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
	{
		Error_Handler();
	}
}
 8000d18:	b04d      	add	sp, #308	; 0x134
 8000d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1c:	58000400 	.word	0x58000400
 8000d20:	58024800 	.word	0x58024800

08000d24 <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 8000d24:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000d26:	4c09      	ldr	r4, [pc, #36]	; (8000d4c <clear_leds+0x28>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f001 fb9f 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2102      	movs	r1, #2
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <clear_leds+0x2c>)
 8000d38:	f001 fb9a 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 8000d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000d48:	f001 bb92 	b.w	8002470 <HAL_GPIO_WritePin>
 8000d4c:	58020400 	.word	0x58020400
 8000d50:	58021000 	.word	0x58021000

08000d54 <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 8000d54:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8000d56:	4c0a      	ldr	r4, [pc, #40]	; (8000d80 <blink_orange_slow+0x2c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f001 fb87 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000d62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d66:	f001 f90f 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2102      	movs	r1, #2
 8000d70:	f001 fb7e 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8000d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(500);
 8000d7c:	f001 b904 	b.w	8001f88 <HAL_Delay>
 8000d80:	58021000 	.word	0x58021000

08000d84 <main>:
{
 8000d84:	b5f0      	push	{r4, r5, r6, r7, lr}
	float32_t mean_of_squared_value = 0.0f, std_dev_value = 0.0f;
 8000d86:	2300      	movs	r3, #0
{
 8000d88:	b085      	sub	sp, #20
	float32_t mean_of_squared_value = 0.0f, std_dev_value = 0.0f;
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	9302      	str	r3, [sp, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d92:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d96:	4a2e      	ldr	r2, [pc, #184]	; (8000e50 <main+0xcc>)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000da2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000da6:	6953      	ldr	r3, [r2, #20]
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000db2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000db6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dba:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dbe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dc2:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dc6:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dca:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000dce:	07b7      	lsls	r7, r6, #30
 8000dd0:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dd2:	ea04 050c 	and.w	r5, r4, ip
 8000dd6:	4638      	mov	r0, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dd8:	4631      	mov	r1, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dda:	ea40 0305 	orr.w	r3, r0, r5
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000dde:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000de0:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 8000de4:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000de8:	1c4b      	adds	r3, r1, #1
 8000dea:	d1f6      	bne.n	8000dda <main+0x56>
 8000dec:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 8000dee:	f114 0f20 	cmn.w	r4, #32
 8000df2:	d1ee      	bne.n	8000dd2 <main+0x4e>
 8000df4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000df8:	6953      	ldr	r3, [r2, #20]
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	6153      	str	r3, [r2, #20]
 8000e00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e04:	f3bf 8f6f 	isb	sy
 8000e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e0c:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <main+0xd0>)
 8000e0e:	e001      	b.n	8000e14 <main+0x90>
 8000e10:	3b01      	subs	r3, #1
 8000e12:	d002      	beq.n	8000e1a <main+0x96>
 8000e14:	6811      	ldr	r1, [r2, #0]
 8000e16:	0409      	lsls	r1, r1, #16
 8000e18:	d4fa      	bmi.n	8000e10 <main+0x8c>
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000e1a:	4c0e      	ldr	r4, [pc, #56]	; (8000e54 <main+0xd0>)
	HAL_Init();
 8000e1c:	f001 f870 	bl	8001f00 <HAL_Init>
	SystemClock_Config();
 8000e20:	f7ff ff1e 	bl	8000c60 <SystemClock_Config>
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000e24:	2000      	movs	r0, #0
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000e26:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e2e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e32:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3a:	9303      	str	r3, [sp, #12]
 8000e3c:	9b03      	ldr	r3, [sp, #12]
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000e3e:	f001 fb1b 	bl	8002478 <HAL_HSEM_FastTake>
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000e42:	2100      	movs	r1, #0
 8000e44:	4608      	mov	r0, r1
 8000e46:	f001 fb25 	bl	8002494 <HAL_HSEM_Release>
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4e:	e005      	b.n	8000e5c <main+0xd8>
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	58024400 	.word	0x58024400
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	d002      	beq.n	8000e62 <main+0xde>
 8000e5c:	6822      	ldr	r2, [r4, #0]
 8000e5e:	0412      	lsls	r2, r2, #16
 8000e60:	d5fa      	bpl.n	8000e58 <main+0xd4>
	while (UartReady != SET)
 8000e62:	4cbd      	ldr	r4, [pc, #756]	; (8001158 <main+0x3d4>)
	MX_GPIO_Init();
 8000e64:	f7ff fe76 	bl	8000b54 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000e68:	f000 ff80 	bl	8001d6c <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000e6c:	f000 ff30 	bl	8001cd0 <MX_TIM2_Init>
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], bufferSize) != HAL_OK)
 8000e70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e74:	49b9      	ldr	r1, [pc, #740]	; (800115c <main+0x3d8>)
 8000e76:	48ba      	ldr	r0, [pc, #744]	; (8001160 <main+0x3dc>)
 8000e78:	f003 fc6e 	bl	8004758 <HAL_UART_Receive_IT>
	while (UartReady != SET)
 8000e7c:	7823      	ldrb	r3, [r4, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d027      	beq.n	8000ed2 <main+0x14e>
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000e82:	4db8      	ldr	r5, [pc, #736]	; (8001164 <main+0x3e0>)
		HAL_Delay(500);
 8000e84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e88:	f001 f87e 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4628      	mov	r0, r5
 8000e92:	f001 faed 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000e96:	20c8      	movs	r0, #200	; 0xc8
 8000e98:	f001 f876 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	f001 fae5 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000ea6:	20c8      	movs	r0, #200	; 0xc8
 8000ea8:	f001 f86e 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	f001 fadd 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000eb6:	20c8      	movs	r0, #200	; 0xc8
 8000eb8:	f001 f866 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	f001 fad5 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f001 f85e 	bl	8001f88 <HAL_Delay>
	while (UartReady != SET)
 8000ecc:	7823      	ldrb	r3, [r4, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d1d8      	bne.n	8000e84 <main+0x100>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
	UartReady = RESET;
 8000ed4:	2300      	movs	r3, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ed6:	48a3      	ldr	r0, [pc, #652]	; (8001164 <main+0x3e0>)
 8000ed8:	4611      	mov	r1, r2
	UartReady = RESET;
 8000eda:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000edc:	f001 fac8 	bl	8002470 <HAL_GPIO_WritePin>
	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 8000ee0:	4a9e      	ldr	r2, [pc, #632]	; (800115c <main+0x3d8>)
 8000ee2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	b13b      	cbz	r3, 8000efa <main+0x176>
 8000eea:	4b9f      	ldr	r3, [pc, #636]	; (8001168 <main+0x3e4>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b923      	cbnz	r3, 8000efa <main+0x176>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	489d      	ldr	r0, [pc, #628]	; (800116c <main+0x3e8>)
 8000ef6:	f001 fabb 	bl	8002470 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE(&htim2);
 8000efa:	4d9d      	ldr	r5, [pc, #628]	; (8001170 <main+0x3ec>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000efc:	2600      	movs	r6, #0
	__HAL_TIM_ENABLE(&htim2);
 8000efe:	682b      	ldr	r3, [r5, #0]
	HAL_TIM_Base_Start(&htim2);
 8000f00:	4628      	mov	r0, r5
	__HAL_TIM_ENABLE(&htim2);
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	f042 0201 	orr.w	r2, r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f10:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8000f12:	f003 f9e5 	bl	80042e0 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f16:	682b      	ldr	r3, [r5, #0]
	inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8000f18:	4996      	ldr	r1, [pc, #600]	; (8001174 <main+0x3f0>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f1a:	625e      	str	r6, [r3, #36]	; 0x24
	inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8000f1c:	488f      	ldr	r0, [pc, #572]	; (800115c <main+0x3d8>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f1e:	625e      	str	r6, [r3, #36]	; 0x24
	inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8000f20:	f7ff fc00 	bl	8000724 <inst_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	4631      	mov	r1, r6
 8000f28:	2231      	movs	r2, #49	; 0x31
 8000f2a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8000f2c:	4892      	ldr	r0, [pc, #584]	; (8001178 <main+0x3f4>)
 8000f2e:	f004 fd26 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Inst abs counter = %ld\r\n&", counter);
 8000f32:	4632      	mov	r2, r6
 8000f34:	4991      	ldr	r1, [pc, #580]	; (800117c <main+0x3f8>)
 8000f36:	4892      	ldr	r0, [pc, #584]	; (8001180 <main+0x3fc>)
 8000f38:	f005 fa1e 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f3c:	4888      	ldr	r0, [pc, #544]	; (8001160 <main+0x3dc>)
 8000f3e:	f004 fa5f 	bl	8005400 <UART_CheckIdleState>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	f000 820c 	beq.w	8001360 <main+0x5dc>
	HAL_Delay(1000);
 8000f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4c:	f001 f81c 	bl	8001f88 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f50:	4883      	ldr	r0, [pc, #524]	; (8001160 <main+0x3dc>)
 8000f52:	f004 fa55 	bl	8005400 <UART_CheckIdleState>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	f000 85f6 	beq.w	8001b48 <main+0xdc4>
	blink_orange_slow();
 8000f5c:	f7ff fefa 	bl	8000d54 <blink_orange_slow>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f60:	2600      	movs	r6, #0
	blink_orange_slow();
 8000f62:	f7ff fef7 	bl	8000d54 <blink_orange_slow>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f66:	682b      	ldr	r3, [r5, #0]
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8000f68:	4986      	ldr	r1, [pc, #536]	; (8001184 <main+0x400>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000f6a:	625e      	str	r6, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8000f6c:	487b      	ldr	r0, [pc, #492]	; (800115c <main+0x3d8>)
 8000f6e:	f7ff fc0d 	bl	800078c <inst_phase>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	4631      	mov	r1, r6
 8000f76:	2231      	movs	r2, #49	; 0x31
 8000f78:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8000f7a:	487f      	ldr	r0, [pc, #508]	; (8001178 <main+0x3f4>)
 8000f7c:	f004 fcff 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Inst phase counter = %ld\r\n&", counter);
 8000f80:	4632      	mov	r2, r6
 8000f82:	4981      	ldr	r1, [pc, #516]	; (8001188 <main+0x404>)
 8000f84:	487e      	ldr	r0, [pc, #504]	; (8001180 <main+0x3fc>)
 8000f86:	f005 f9f7 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f8a:	4875      	ldr	r0, [pc, #468]	; (8001160 <main+0x3dc>)
 8000f8c:	f004 fa38 	bl	8005400 <UART_CheckIdleState>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	f000 847d 	beq.w	8001890 <main+0xb0c>
	HAL_Delay(1000);
 8000f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9a:	f000 fff5 	bl	8001f88 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000f9e:	4870      	ldr	r0, [pc, #448]	; (8001160 <main+0x3dc>)
 8000fa0:	f004 fa2e 	bl	8005400 <UART_CheckIdleState>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	f000 84f8 	beq.w	800199a <main+0xc16>
	blink_orange_slow();
 8000faa:	f7ff fed3 	bl	8000d54 <blink_orange_slow>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fae:	2600      	movs	r6, #0
	blink_orange_slow();
 8000fb0:	f7ff fed0 	bl	8000d54 <blink_orange_slow>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fb4:	682b      	ldr	r3, [r5, #0]
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8000fb6:	4973      	ldr	r1, [pc, #460]	; (8001184 <main+0x400>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8000fb8:	625e      	str	r6, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8000fba:	4868      	ldr	r0, [pc, #416]	; (800115c <main+0x3d8>)
 8000fbc:	f7ff fbe6 	bl	800078c <inst_phase>
	unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 8000fc0:	4972      	ldr	r1, [pc, #456]	; (800118c <main+0x408>)
 8000fc2:	4870      	ldr	r0, [pc, #448]	; (8001184 <main+0x400>)
 8000fc4:	f7ff fbfc 	bl	80007c0 <unwrap>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	4631      	mov	r1, r6
 8000fcc:	2231      	movs	r2, #49	; 0x31
 8000fce:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8000fd0:	4869      	ldr	r0, [pc, #420]	; (8001178 <main+0x3f4>)
 8000fd2:	f004 fcd4 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Inst unwrapped phase counter = %ld\r\n&", counter);
 8000fd6:	4632      	mov	r2, r6
 8000fd8:	496d      	ldr	r1, [pc, #436]	; (8001190 <main+0x40c>)
 8000fda:	4869      	ldr	r0, [pc, #420]	; (8001180 <main+0x3fc>)
 8000fdc:	f005 f9cc 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000fe0:	485f      	ldr	r0, [pc, #380]	; (8001160 <main+0x3dc>)
 8000fe2:	f004 fa0d 	bl	8005400 <UART_CheckIdleState>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	f000 840e 	beq.w	8001808 <main+0xa84>
	HAL_Delay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff0:	f000 ffca 	bl	8001f88 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8000ff4:	485a      	ldr	r0, [pc, #360]	; (8001160 <main+0x3dc>)
 8000ff6:	f004 fa03 	bl	8005400 <UART_CheckIdleState>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	f000 8530 	beq.w	8001a60 <main+0xcdc>
	blink_orange_slow();
 8001000:	f7ff fea8 	bl	8000d54 <blink_orange_slow>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001004:	2600      	movs	r6, #0
	blink_orange_slow();
 8001006:	f7ff fea5 	bl	8000d54 <blink_orange_slow>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800100a:	682b      	ldr	r3, [r5, #0]
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 800100c:	4961      	ldr	r1, [pc, #388]	; (8001194 <main+0x410>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800100e:	625e      	str	r6, [r3, #36]	; 0x24
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 8001010:	4852      	ldr	r0, [pc, #328]	; (800115c <main+0x3d8>)
 8001012:	f7ff fc31 	bl	8000878 <inst_frequency>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001016:	682b      	ldr	r3, [r5, #0]
 8001018:	4631      	mov	r1, r6
 800101a:	2231      	movs	r2, #49	; 0x31
 800101c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800101e:	4856      	ldr	r0, [pc, #344]	; (8001178 <main+0x3f4>)
 8001020:	f004 fcad 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Inst freq counter = %ld\r\n&", counter);
 8001024:	4632      	mov	r2, r6
 8001026:	495c      	ldr	r1, [pc, #368]	; (8001198 <main+0x414>)
 8001028:	4855      	ldr	r0, [pc, #340]	; (8001180 <main+0x3fc>)
 800102a:	f005 f9a5 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800102e:	484c      	ldr	r0, [pc, #304]	; (8001160 <main+0x3dc>)
 8001030:	f004 f9e6 	bl	8005400 <UART_CheckIdleState>
 8001034:	2800      	cmp	r0, #0
 8001036:	f000 8409 	beq.w	800184c <main+0xac8>
	HAL_Delay(1000);
 800103a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800103e:	f000 ffa3 	bl	8001f88 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001042:	4847      	ldr	r0, [pc, #284]	; (8001160 <main+0x3dc>)
 8001044:	f004 f9dc 	bl	8005400 <UART_CheckIdleState>
 8001048:	2800      	cmp	r0, #0
 800104a:	f000 8443 	beq.w	80018d4 <main+0xb50>
	blink_orange_slow();
 800104e:	f7ff fe81 	bl	8000d54 <blink_orange_slow>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001052:	2600      	movs	r6, #0
	blink_orange_slow();
 8001054:	f7ff fe7e 	bl	8000d54 <blink_orange_slow>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001058:	682b      	ldr	r3, [r5, #0]
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 800105a:	4950      	ldr	r1, [pc, #320]	; (800119c <main+0x418>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800105c:	625e      	str	r6, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 800105e:	483f      	ldr	r0, [pc, #252]	; (800115c <main+0x3d8>)
 8001060:	f7ff fcdc 	bl	8000a1c <inst_centralized_normalized_absolute>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	4631      	mov	r1, r6
 8001068:	2231      	movs	r2, #49	; 0x31
 800106a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800106c:	4842      	ldr	r0, [pc, #264]	; (8001178 <main+0x3f4>)
 800106e:	f004 fc86 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Inst CN abs counter = %ld\r\n&", counter);
 8001072:	4632      	mov	r2, r6
 8001074:	494a      	ldr	r1, [pc, #296]	; (80011a0 <main+0x41c>)
 8001076:	4842      	ldr	r0, [pc, #264]	; (8001180 <main+0x3fc>)
 8001078:	f005 f97e 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800107c:	4838      	ldr	r0, [pc, #224]	; (8001160 <main+0x3dc>)
 800107e:	f004 f9bf 	bl	8005400 <UART_CheckIdleState>
 8001082:	2800      	cmp	r0, #0
 8001084:	f000 8392 	beq.w	80017ac <main+0xa28>
	HAL_Delay(1000);
 8001088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108c:	f000 ff7c 	bl	8001f88 <HAL_Delay>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001090:	4833      	ldr	r0, [pc, #204]	; (8001160 <main+0x3dc>)
 8001092:	f004 f9b5 	bl	8005400 <UART_CheckIdleState>
 8001096:	2800      	cmp	r0, #0
 8001098:	f000 8326 	beq.w	80016e8 <main+0x964>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	2600      	movs	r6, #0
	mean_of_squared(&rxBuffer.number[0], &mean_of_squared_value);
 80010a0:	a901      	add	r1, sp, #4
 80010a2:	482e      	ldr	r0, [pc, #184]	; (800115c <main+0x3d8>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010a4:	625e      	str	r6, [r3, #36]	; 0x24
	mean_of_squared(&rxBuffer.number[0], &mean_of_squared_value);
 80010a6:	f7ff fd35 	bl	8000b14 <mean_of_squared>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80010aa:	682b      	ldr	r3, [r5, #0]
 80010ac:	4631      	mov	r1, r6
 80010ae:	2231      	movs	r2, #49	; 0x31
 80010b0:	4831      	ldr	r0, [pc, #196]	; (8001178 <main+0x3f4>)
 80010b2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80010b4:	f004 fc63 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Mean of squared = %f\r\n", mean_of_squared_value);
 80010b8:	eddd 7a01 	vldr	s15, [sp, #4]
 80010bc:	4939      	ldr	r1, [pc, #228]	; (80011a4 <main+0x420>)
 80010be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c2:	482f      	ldr	r0, [pc, #188]	; (8001180 <main+0x3fc>)
 80010c4:	ec53 2b17 	vmov	r2, r3, d7
 80010c8:	f005 f956 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80010cc:	4824      	ldr	r0, [pc, #144]	; (8001160 <main+0x3dc>)
 80010ce:	f004 f997 	bl	8005400 <UART_CheckIdleState>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	f000 82e7 	beq.w	80016a6 <main+0x922>
 80010d8:	2231      	movs	r2, #49	; 0x31
 80010da:	2100      	movs	r1, #0
 80010dc:	4826      	ldr	r0, [pc, #152]	; (8001178 <main+0x3f4>)
 80010de:	f004 fc4e 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 80010e2:	463a      	mov	r2, r7
 80010e4:	4930      	ldr	r1, [pc, #192]	; (80011a8 <main+0x424>)
 80010e6:	4826      	ldr	r0, [pc, #152]	; (8001180 <main+0x3fc>)
 80010e8:	f005 f946 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <main+0x3dc>)
 80010ee:	f004 f987 	bl	8005400 <UART_CheckIdleState>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	f000 82b6 	beq.w	8001664 <main+0x8e0>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	2600      	movs	r6, #0
	inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 80010fc:	492b      	ldr	r1, [pc, #172]	; (80011ac <main+0x428>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80010fe:	625e      	str	r6, [r3, #36]	; 0x24
	inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 8001100:	4820      	ldr	r0, [pc, #128]	; (8001184 <main+0x400>)
 8001102:	f7ff fb0f 	bl	8000724 <inst_absolute>
	std_dev(&instAbsPhase.number[0], &std_dev_value);
 8001106:	a902      	add	r1, sp, #8
 8001108:	4828      	ldr	r0, [pc, #160]	; (80011ac <main+0x428>)
 800110a:	f7ff fd1b 	bl	8000b44 <std_dev>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	4631      	mov	r1, r6
 8001112:	2231      	movs	r2, #49	; 0x31
 8001114:	4818      	ldr	r0, [pc, #96]	; (8001178 <main+0x3f4>)
 8001116:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8001118:	f004 fc31 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 800111c:	eddd 7a02 	vldr	s15, [sp, #8]
 8001120:	4923      	ldr	r1, [pc, #140]	; (80011b0 <main+0x42c>)
 8001122:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001126:	4816      	ldr	r0, [pc, #88]	; (8001180 <main+0x3fc>)
 8001128:	ec53 2b17 	vmov	r2, r3, d7
 800112c:	f005 f924 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <main+0x3dc>)
 8001132:	f004 f965 	bl	8005400 <UART_CheckIdleState>
 8001136:	2800      	cmp	r0, #0
 8001138:	f000 8273 	beq.w	8001622 <main+0x89e>
 800113c:	2231      	movs	r2, #49	; 0x31
 800113e:	2100      	movs	r1, #0
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <main+0x3f4>)
 8001142:	f004 fc1c 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001146:	463a      	mov	r2, r7
 8001148:	4917      	ldr	r1, [pc, #92]	; (80011a8 <main+0x424>)
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <main+0x3fc>)
 800114c:	f005 f914 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <main+0x3dc>)
 8001152:	f004 f955 	bl	8005400 <UART_CheckIdleState>
 8001156:	e02d      	b.n	80011b4 <main+0x430>
 8001158:	24000200 	.word	0x24000200
 800115c:	24006244 	.word	0x24006244
 8001160:	24009290 	.word	0x24009290
 8001164:	58020400 	.word	0x58020400
 8001168:	24000201 	.word	0x24000201
 800116c:	58021000 	.word	0x58021000
 8001170:	24009244 	.word	0x24009244
 8001174:	24004244 	.word	0x24004244
 8001178:	24000205 	.word	0x24000205
 800117c:	08007cb4 	.word	0x08007cb4
 8001180:	24000204 	.word	0x24000204
 8001184:	24003244 	.word	0x24003244
 8001188:	08007cd0 	.word	0x08007cd0
 800118c:	24008244 	.word	0x24008244
 8001190:	08007cec 	.word	0x08007cec
 8001194:	24002244 	.word	0x24002244
 8001198:	08007d14 	.word	0x08007d14
 800119c:	24005244 	.word	0x24005244
 80011a0:	08007d30 	.word	0x08007d30
 80011a4:	08007d50 	.word	0x08007d50
 80011a8:	08007d68 	.word	0x08007d68
 80011ac:	24000244 	.word	0x24000244
 80011b0:	08007d80 	.word	0x08007d80
 80011b4:	2800      	cmp	r0, #0
 80011b6:	f000 8213 	beq.w	80015e0 <main+0x85c>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	2600      	movs	r6, #0
	std_dev(&instPhase.number[0], &std_dev_value);
 80011be:	a902      	add	r1, sp, #8
 80011c0:	48ba      	ldr	r0, [pc, #744]	; (80014ac <main+0x728>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80011c2:	625e      	str	r6, [r3, #36]	; 0x24
	std_dev(&instPhase.number[0], &std_dev_value);
 80011c4:	f7ff fcbe 	bl	8000b44 <std_dev>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	4631      	mov	r1, r6
 80011cc:	2231      	movs	r2, #49	; 0x31
 80011ce:	48b8      	ldr	r0, [pc, #736]	; (80014b0 <main+0x72c>)
 80011d0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80011d2:	f004 fbd4 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 80011d6:	eddd 7a02 	vldr	s15, [sp, #8]
 80011da:	49b6      	ldr	r1, [pc, #728]	; (80014b4 <main+0x730>)
 80011dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e0:	48b5      	ldr	r0, [pc, #724]	; (80014b8 <main+0x734>)
 80011e2:	ec53 2b17 	vmov	r2, r3, d7
 80011e6:	f005 f8c7 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80011ea:	48b4      	ldr	r0, [pc, #720]	; (80014bc <main+0x738>)
 80011ec:	f004 f908 	bl	8005400 <UART_CheckIdleState>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	f000 81d4 	beq.w	800159e <main+0x81a>
 80011f6:	2231      	movs	r2, #49	; 0x31
 80011f8:	2100      	movs	r1, #0
 80011fa:	48ad      	ldr	r0, [pc, #692]	; (80014b0 <main+0x72c>)
 80011fc:	f004 fbbf 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001200:	463a      	mov	r2, r7
 8001202:	49af      	ldr	r1, [pc, #700]	; (80014c0 <main+0x73c>)
 8001204:	48ac      	ldr	r0, [pc, #688]	; (80014b8 <main+0x734>)
 8001206:	f005 f8b7 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800120a:	48ac      	ldr	r0, [pc, #688]	; (80014bc <main+0x738>)
 800120c:	f004 f8f8 	bl	8005400 <UART_CheckIdleState>
 8001210:	2800      	cmp	r0, #0
 8001212:	f000 81a3 	beq.w	800155c <main+0x7d8>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001216:	682b      	ldr	r3, [r5, #0]
 8001218:	2600      	movs	r6, #0
	inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 800121a:	49aa      	ldr	r1, [pc, #680]	; (80014c4 <main+0x740>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800121c:	625e      	str	r6, [r3, #36]	; 0x24
	inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 800121e:	48aa      	ldr	r0, [pc, #680]	; (80014c8 <main+0x744>)
 8001220:	f7ff fa80 	bl	8000724 <inst_absolute>
	std_dev(&instAbsFreq.number[0], &std_dev_value);
 8001224:	a902      	add	r1, sp, #8
 8001226:	48a7      	ldr	r0, [pc, #668]	; (80014c4 <main+0x740>)
 8001228:	f7ff fc8c 	bl	8000b44 <std_dev>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	4631      	mov	r1, r6
 8001230:	2231      	movs	r2, #49	; 0x31
 8001232:	489f      	ldr	r0, [pc, #636]	; (80014b0 <main+0x72c>)
 8001234:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8001236:	f004 fba2 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 800123a:	eddd 7a02 	vldr	s15, [sp, #8]
 800123e:	499d      	ldr	r1, [pc, #628]	; (80014b4 <main+0x730>)
 8001240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001244:	489c      	ldr	r0, [pc, #624]	; (80014b8 <main+0x734>)
 8001246:	ec53 2b17 	vmov	r2, r3, d7
 800124a:	f005 f895 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800124e:	489b      	ldr	r0, [pc, #620]	; (80014bc <main+0x738>)
 8001250:	f004 f8d6 	bl	8005400 <UART_CheckIdleState>
 8001254:	2800      	cmp	r0, #0
 8001256:	f000 8160 	beq.w	800151a <main+0x796>
 800125a:	2231      	movs	r2, #49	; 0x31
 800125c:	2100      	movs	r1, #0
 800125e:	4894      	ldr	r0, [pc, #592]	; (80014b0 <main+0x72c>)
 8001260:	f004 fb8d 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 8001264:	463a      	mov	r2, r7
 8001266:	4996      	ldr	r1, [pc, #600]	; (80014c0 <main+0x73c>)
 8001268:	4893      	ldr	r0, [pc, #588]	; (80014b8 <main+0x734>)
 800126a:	f005 f885 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800126e:	4893      	ldr	r0, [pc, #588]	; (80014bc <main+0x738>)
 8001270:	f004 f8c6 	bl	8005400 <UART_CheckIdleState>
 8001274:	2800      	cmp	r0, #0
 8001276:	f000 812f 	beq.w	80014d8 <main+0x754>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	2600      	movs	r6, #0
	std_dev(&instFreq.number[0], &std_dev_value);
 800127e:	a902      	add	r1, sp, #8
 8001280:	4891      	ldr	r0, [pc, #580]	; (80014c8 <main+0x744>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001282:	625e      	str	r6, [r3, #36]	; 0x24
	std_dev(&instFreq.number[0], &std_dev_value);
 8001284:	f7ff fc5e 	bl	8000b44 <std_dev>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	4631      	mov	r1, r6
 800128c:	2231      	movs	r2, #49	; 0x31
 800128e:	4888      	ldr	r0, [pc, #544]	; (80014b0 <main+0x72c>)
 8001290:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8001292:	f004 fb74 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 8001296:	eddd 7a02 	vldr	s15, [sp, #8]
 800129a:	4986      	ldr	r1, [pc, #536]	; (80014b4 <main+0x730>)
 800129c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a0:	4885      	ldr	r0, [pc, #532]	; (80014b8 <main+0x734>)
 80012a2:	ec53 2b17 	vmov	r2, r3, d7
 80012a6:	f005 f867 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80012aa:	4884      	ldr	r0, [pc, #528]	; (80014bc <main+0x738>)
 80012ac:	f004 f8a8 	bl	8005400 <UART_CheckIdleState>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	f000 80d9 	beq.w	8001468 <main+0x6e4>
 80012b6:	2231      	movs	r2, #49	; 0x31
 80012b8:	2100      	movs	r1, #0
 80012ba:	487d      	ldr	r0, [pc, #500]	; (80014b0 <main+0x72c>)
 80012bc:	f004 fb5f 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 80012c0:	463a      	mov	r2, r7
 80012c2:	497f      	ldr	r1, [pc, #508]	; (80014c0 <main+0x73c>)
 80012c4:	487c      	ldr	r0, [pc, #496]	; (80014b8 <main+0x734>)
 80012c6:	f005 f857 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80012ca:	487c      	ldr	r0, [pc, #496]	; (80014bc <main+0x738>)
 80012cc:	f004 f898 	bl	8005400 <UART_CheckIdleState>
 80012d0:	2800      	cmp	r0, #0
 80012d2:	f000 80a8 	beq.w	8001426 <main+0x6a2>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80012d6:	682b      	ldr	r3, [r5, #0]
 80012d8:	2600      	movs	r6, #0
	std_dev(&instCNAbs.number[0], &std_dev_value);
 80012da:	a902      	add	r1, sp, #8
 80012dc:	487b      	ldr	r0, [pc, #492]	; (80014cc <main+0x748>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 80012de:	625e      	str	r6, [r3, #36]	; 0x24
	std_dev(&instCNAbs.number[0], &std_dev_value);
 80012e0:	f7ff fc30 	bl	8000b44 <std_dev>
	counter = __HAL_TIM_GET_COUNTER(&htim2);
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	4631      	mov	r1, r6
 80012e8:	2231      	movs	r2, #49	; 0x31
 80012ea:	4871      	ldr	r0, [pc, #452]	; (80014b0 <main+0x72c>)
 80012ec:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 80012ee:	f004 fb46 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Standard deviation = %f\r\n", std_dev_value);
 80012f2:	eddd 7a02 	vldr	s15, [sp, #8]
 80012f6:	496f      	ldr	r1, [pc, #444]	; (80014b4 <main+0x730>)
 80012f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fc:	486e      	ldr	r0, [pc, #440]	; (80014b8 <main+0x734>)
 80012fe:	ec53 2b17 	vmov	r2, r3, d7
 8001302:	f005 f839 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001306:	486d      	ldr	r0, [pc, #436]	; (80014bc <main+0x738>)
 8001308:	f004 f87a 	bl	8005400 <UART_CheckIdleState>
 800130c:	2800      	cmp	r0, #0
 800130e:	d069      	beq.n	80013e4 <main+0x660>
 8001310:	2231      	movs	r2, #49	; 0x31
 8001312:	2100      	movs	r1, #0
 8001314:	4866      	ldr	r0, [pc, #408]	; (80014b0 <main+0x72c>)
 8001316:	f004 fb32 	bl	800597e <memset>
	sprintf(&txStringBuffer[0], "Cycles counter = %ld\r\n", counter);
 800131a:	463a      	mov	r2, r7
 800131c:	4968      	ldr	r1, [pc, #416]	; (80014c0 <main+0x73c>)
 800131e:	4866      	ldr	r0, [pc, #408]	; (80014b8 <main+0x734>)
 8001320:	f005 f82a 	bl	8006378 <siprintf>
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 8001324:	4865      	ldr	r0, [pc, #404]	; (80014bc <main+0x738>)
 8001326:	f004 f86b 	bl	8005400 <UART_CheckIdleState>
 800132a:	2800      	cmp	r0, #0
 800132c:	d039      	beq.n	80013a2 <main+0x61e>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800132e:	682b      	ldr	r3, [r5, #0]
 8001330:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8001332:	4c67      	ldr	r4, [pc, #412]	; (80014d0 <main+0x74c>)
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
	clear_leds();
 8001336:	f7ff fcf5 	bl	8000d24 <clear_leds>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2102      	movs	r1, #2
 800133e:	4620      	mov	r0, r4
 8001340:	f001 f896 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001348:	f000 fe1e 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 800134c:	4620      	mov	r0, r4
 800134e:	2201      	movs	r2, #1
 8001350:	2102      	movs	r1, #2
 8001352:	f001 f88d 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135a:	f000 fe15 	bl	8001f88 <HAL_Delay>
 800135e:	e7ec      	b.n	800133a <main+0x5b6>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001360:	2232      	movs	r2, #50	; 0x32
 8001362:	4955      	ldr	r1, [pc, #340]	; (80014b8 <main+0x734>)
 8001364:	4855      	ldr	r0, [pc, #340]	; (80014bc <main+0x738>)
 8001366:	f003 f999 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800136a:	7823      	ldrb	r3, [r4, #0]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d015      	beq.n	800139c <main+0x618>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001370:	4e58      	ldr	r6, [pc, #352]	; (80014d4 <main+0x750>)
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001378:	4630      	mov	r0, r6
 800137a:	f001 f879 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800137e:	2032      	movs	r0, #50	; 0x32
 8001380:	f000 fe02 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138a:	4630      	mov	r0, r6
 800138c:	f001 f870 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001390:	2032      	movs	r0, #50	; 0x32
 8001392:	f000 fdf9 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001396:	7823      	ldrb	r3, [r4, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d1ea      	bne.n	8001372 <main+0x5ee>
		UartReady = RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	7023      	strb	r3, [r4, #0]
 80013a0:	e5d2      	b.n	8000f48 <main+0x1c4>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80013a2:	2232      	movs	r2, #50	; 0x32
 80013a4:	4944      	ldr	r1, [pc, #272]	; (80014b8 <main+0x734>)
 80013a6:	4845      	ldr	r0, [pc, #276]	; (80014bc <main+0x738>)
 80013a8:	f003 f978 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80013ac:	7823      	ldrb	r3, [r4, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d015      	beq.n	80013de <main+0x65a>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80013b2:	4e48      	ldr	r6, [pc, #288]	; (80014d4 <main+0x750>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ba:	4630      	mov	r0, r6
 80013bc:	f001 f858 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013c0:	2032      	movs	r0, #50	; 0x32
 80013c2:	f000 fde1 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013cc:	4630      	mov	r0, r6
 80013ce:	f001 f84f 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013d2:	2032      	movs	r0, #50	; 0x32
 80013d4:	f000 fdd8 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 80013d8:	7823      	ldrb	r3, [r4, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d1ea      	bne.n	80013b4 <main+0x630>
		UartReady = RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	7023      	strb	r3, [r4, #0]
 80013e2:	e7a4      	b.n	800132e <main+0x5aa>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80013e4:	2232      	movs	r2, #50	; 0x32
 80013e6:	4934      	ldr	r1, [pc, #208]	; (80014b8 <main+0x734>)
 80013e8:	4834      	ldr	r0, [pc, #208]	; (80014bc <main+0x738>)
 80013ea:	f003 f957 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80013ee:	7823      	ldrb	r3, [r4, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d015      	beq.n	8001420 <main+0x69c>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80013f4:	4e37      	ldr	r6, [pc, #220]	; (80014d4 <main+0x750>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013fc:	4630      	mov	r0, r6
 80013fe:	f001 f837 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001402:	2032      	movs	r0, #50	; 0x32
 8001404:	f000 fdc0 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140e:	4630      	mov	r0, r6
 8001410:	f001 f82e 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001414:	2032      	movs	r0, #50	; 0x32
 8001416:	f000 fdb7 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800141a:	7823      	ldrb	r3, [r4, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d1ea      	bne.n	80013f6 <main+0x672>
		UartReady = RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	7023      	strb	r3, [r4, #0]
 8001424:	e774      	b.n	8001310 <main+0x58c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001426:	2232      	movs	r2, #50	; 0x32
 8001428:	4923      	ldr	r1, [pc, #140]	; (80014b8 <main+0x734>)
 800142a:	4824      	ldr	r0, [pc, #144]	; (80014bc <main+0x738>)
 800142c:	f003 f936 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001430:	7823      	ldrb	r3, [r4, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d015      	beq.n	8001462 <main+0x6de>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001436:	4e27      	ldr	r6, [pc, #156]	; (80014d4 <main+0x750>)
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143e:	4630      	mov	r0, r6
 8001440:	f001 f816 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001444:	2032      	movs	r0, #50	; 0x32
 8001446:	f000 fd9f 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001450:	4630      	mov	r0, r6
 8001452:	f001 f80d 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001456:	2032      	movs	r0, #50	; 0x32
 8001458:	f000 fd96 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800145c:	7823      	ldrb	r3, [r4, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d1ea      	bne.n	8001438 <main+0x6b4>
		UartReady = RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	7023      	strb	r3, [r4, #0]
 8001466:	e736      	b.n	80012d6 <main+0x552>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001468:	2232      	movs	r2, #50	; 0x32
 800146a:	4913      	ldr	r1, [pc, #76]	; (80014b8 <main+0x734>)
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <main+0x738>)
 800146e:	f003 f915 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001472:	7823      	ldrb	r3, [r4, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d015      	beq.n	80014a4 <main+0x720>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001478:	4e16      	ldr	r6, [pc, #88]	; (80014d4 <main+0x750>)
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001480:	4630      	mov	r0, r6
 8001482:	f000 fff5 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001486:	2032      	movs	r0, #50	; 0x32
 8001488:	f000 fd7e 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001492:	4630      	mov	r0, r6
 8001494:	f000 ffec 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 fd75 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800149e:	7823      	ldrb	r3, [r4, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d1ea      	bne.n	800147a <main+0x6f6>
		UartReady = RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	7023      	strb	r3, [r4, #0]
 80014a8:	e705      	b.n	80012b6 <main+0x532>
 80014aa:	bf00      	nop
 80014ac:	24003244 	.word	0x24003244
 80014b0:	24000205 	.word	0x24000205
 80014b4:	08007d80 	.word	0x08007d80
 80014b8:	24000204 	.word	0x24000204
 80014bc:	24009290 	.word	0x24009290
 80014c0:	08007d68 	.word	0x08007d68
 80014c4:	24001244 	.word	0x24001244
 80014c8:	24002244 	.word	0x24002244
 80014cc:	24005244 	.word	0x24005244
 80014d0:	58021000 	.word	0x58021000
 80014d4:	58020400 	.word	0x58020400
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80014d8:	2232      	movs	r2, #50	; 0x32
 80014da:	49c5      	ldr	r1, [pc, #788]	; (80017f0 <main+0xa6c>)
 80014dc:	48c5      	ldr	r0, [pc, #788]	; (80017f4 <main+0xa70>)
 80014de:	f003 f8dd 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80014e2:	7823      	ldrb	r3, [r4, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d015      	beq.n	8001514 <main+0x790>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80014e8:	4ec3      	ldr	r6, [pc, #780]	; (80017f8 <main+0xa74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f0:	4630      	mov	r0, r6
 80014f2:	f000 ffbd 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80014f6:	2032      	movs	r0, #50	; 0x32
 80014f8:	f000 fd46 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001502:	4630      	mov	r0, r6
 8001504:	f000 ffb4 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001508:	2032      	movs	r0, #50	; 0x32
 800150a:	f000 fd3d 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800150e:	7823      	ldrb	r3, [r4, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d1ea      	bne.n	80014ea <main+0x766>
		UartReady = RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	7023      	strb	r3, [r4, #0]
 8001518:	e6af      	b.n	800127a <main+0x4f6>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800151a:	2232      	movs	r2, #50	; 0x32
 800151c:	49b4      	ldr	r1, [pc, #720]	; (80017f0 <main+0xa6c>)
 800151e:	48b5      	ldr	r0, [pc, #724]	; (80017f4 <main+0xa70>)
 8001520:	f003 f8bc 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001524:	7823      	ldrb	r3, [r4, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d015      	beq.n	8001556 <main+0x7d2>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800152a:	4eb3      	ldr	r6, [pc, #716]	; (80017f8 <main+0xa74>)
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001532:	4630      	mov	r0, r6
 8001534:	f000 ff9c 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001538:	2032      	movs	r0, #50	; 0x32
 800153a:	f000 fd25 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001544:	4630      	mov	r0, r6
 8001546:	f000 ff93 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800154a:	2032      	movs	r0, #50	; 0x32
 800154c:	f000 fd1c 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001550:	7823      	ldrb	r3, [r4, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d1ea      	bne.n	800152c <main+0x7a8>
		UartReady = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	7023      	strb	r3, [r4, #0]
 800155a:	e67e      	b.n	800125a <main+0x4d6>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800155c:	2232      	movs	r2, #50	; 0x32
 800155e:	49a4      	ldr	r1, [pc, #656]	; (80017f0 <main+0xa6c>)
 8001560:	48a4      	ldr	r0, [pc, #656]	; (80017f4 <main+0xa70>)
 8001562:	f003 f89b 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001566:	7823      	ldrb	r3, [r4, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d015      	beq.n	8001598 <main+0x814>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800156c:	4ea2      	ldr	r6, [pc, #648]	; (80017f8 <main+0xa74>)
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001574:	4630      	mov	r0, r6
 8001576:	f000 ff7b 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800157a:	2032      	movs	r0, #50	; 0x32
 800157c:	f000 fd04 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001586:	4630      	mov	r0, r6
 8001588:	f000 ff72 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800158c:	2032      	movs	r0, #50	; 0x32
 800158e:	f000 fcfb 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001592:	7823      	ldrb	r3, [r4, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d1ea      	bne.n	800156e <main+0x7ea>
		UartReady = RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	7023      	strb	r3, [r4, #0]
 800159c:	e63b      	b.n	8001216 <main+0x492>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800159e:	2232      	movs	r2, #50	; 0x32
 80015a0:	4993      	ldr	r1, [pc, #588]	; (80017f0 <main+0xa6c>)
 80015a2:	4894      	ldr	r0, [pc, #592]	; (80017f4 <main+0xa70>)
 80015a4:	f003 f87a 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80015a8:	7823      	ldrb	r3, [r4, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d015      	beq.n	80015da <main+0x856>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80015ae:	4e92      	ldr	r6, [pc, #584]	; (80017f8 <main+0xa74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b6:	4630      	mov	r0, r6
 80015b8:	f000 ff5a 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80015bc:	2032      	movs	r0, #50	; 0x32
 80015be:	f000 fce3 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015c8:	4630      	mov	r0, r6
 80015ca:	f000 ff51 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80015ce:	2032      	movs	r0, #50	; 0x32
 80015d0:	f000 fcda 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 80015d4:	7823      	ldrb	r3, [r4, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d1ea      	bne.n	80015b0 <main+0x82c>
		UartReady = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	7023      	strb	r3, [r4, #0]
 80015de:	e60a      	b.n	80011f6 <main+0x472>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80015e0:	2232      	movs	r2, #50	; 0x32
 80015e2:	4983      	ldr	r1, [pc, #524]	; (80017f0 <main+0xa6c>)
 80015e4:	4883      	ldr	r0, [pc, #524]	; (80017f4 <main+0xa70>)
 80015e6:	f003 f859 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80015ea:	7823      	ldrb	r3, [r4, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d015      	beq.n	800161c <main+0x898>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80015f0:	4e81      	ldr	r6, [pc, #516]	; (80017f8 <main+0xa74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f8:	4630      	mov	r0, r6
 80015fa:	f000 ff39 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80015fe:	2032      	movs	r0, #50	; 0x32
 8001600:	f000 fcc2 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800160a:	4630      	mov	r0, r6
 800160c:	f000 ff30 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001610:	2032      	movs	r0, #50	; 0x32
 8001612:	f000 fcb9 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001616:	7823      	ldrb	r3, [r4, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d1ea      	bne.n	80015f2 <main+0x86e>
		UartReady = RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	7023      	strb	r3, [r4, #0]
 8001620:	e5cb      	b.n	80011ba <main+0x436>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001622:	2232      	movs	r2, #50	; 0x32
 8001624:	4972      	ldr	r1, [pc, #456]	; (80017f0 <main+0xa6c>)
 8001626:	4873      	ldr	r0, [pc, #460]	; (80017f4 <main+0xa70>)
 8001628:	f003 f838 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800162c:	7823      	ldrb	r3, [r4, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d015      	beq.n	800165e <main+0x8da>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001632:	4e71      	ldr	r6, [pc, #452]	; (80017f8 <main+0xa74>)
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163a:	4630      	mov	r0, r6
 800163c:	f000 ff18 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001640:	2032      	movs	r0, #50	; 0x32
 8001642:	f000 fca1 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800164c:	4630      	mov	r0, r6
 800164e:	f000 ff0f 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001652:	2032      	movs	r0, #50	; 0x32
 8001654:	f000 fc98 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001658:	7823      	ldrb	r3, [r4, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d1ea      	bne.n	8001634 <main+0x8b0>
		UartReady = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	7023      	strb	r3, [r4, #0]
 8001662:	e56b      	b.n	800113c <main+0x3b8>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001664:	2232      	movs	r2, #50	; 0x32
 8001666:	4962      	ldr	r1, [pc, #392]	; (80017f0 <main+0xa6c>)
 8001668:	4862      	ldr	r0, [pc, #392]	; (80017f4 <main+0xa70>)
 800166a:	f003 f817 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800166e:	7823      	ldrb	r3, [r4, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d015      	beq.n	80016a0 <main+0x91c>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001674:	4e60      	ldr	r6, [pc, #384]	; (80017f8 <main+0xa74>)
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167c:	4630      	mov	r0, r6
 800167e:	f000 fef7 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001682:	2032      	movs	r0, #50	; 0x32
 8001684:	f000 fc80 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168e:	4630      	mov	r0, r6
 8001690:	f000 feee 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001694:	2032      	movs	r0, #50	; 0x32
 8001696:	f000 fc77 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800169a:	7823      	ldrb	r3, [r4, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d1ea      	bne.n	8001676 <main+0x8f2>
		UartReady = RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	7023      	strb	r3, [r4, #0]
 80016a4:	e528      	b.n	80010f8 <main+0x374>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80016a6:	2232      	movs	r2, #50	; 0x32
 80016a8:	4951      	ldr	r1, [pc, #324]	; (80017f0 <main+0xa6c>)
 80016aa:	4852      	ldr	r0, [pc, #328]	; (80017f4 <main+0xa70>)
 80016ac:	f002 fff6 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80016b0:	7823      	ldrb	r3, [r4, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d015      	beq.n	80016e2 <main+0x95e>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80016b6:	4e50      	ldr	r6, [pc, #320]	; (80017f8 <main+0xa74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016be:	4630      	mov	r0, r6
 80016c0:	f000 fed6 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80016c4:	2032      	movs	r0, #50	; 0x32
 80016c6:	f000 fc5f 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d0:	4630      	mov	r0, r6
 80016d2:	f000 fecd 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80016d6:	2032      	movs	r0, #50	; 0x32
 80016d8:	f000 fc56 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 80016dc:	7823      	ldrb	r3, [r4, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d1ea      	bne.n	80016b8 <main+0x934>
		UartReady = RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	7023      	strb	r3, [r4, #0]
 80016e6:	e4f7      	b.n	80010d8 <main+0x354>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80016e8:	2204      	movs	r2, #4
 80016ea:	4944      	ldr	r1, [pc, #272]	; (80017fc <main+0xa78>)
 80016ec:	4841      	ldr	r0, [pc, #260]	; (80017f4 <main+0xa70>)
 80016ee:	f002 ffd5 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80016f2:	7823      	ldrb	r3, [r4, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d015      	beq.n	8001724 <main+0x9a0>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80016f8:	4e3f      	ldr	r6, [pc, #252]	; (80017f8 <main+0xa74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001700:	4630      	mov	r0, r6
 8001702:	f000 feb5 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001706:	2032      	movs	r0, #50	; 0x32
 8001708:	f000 fc3e 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001712:	4630      	mov	r0, r6
 8001714:	f000 feac 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001718:	2032      	movs	r0, #50	; 0x32
 800171a:	f000 fc35 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800171e:	7823      	ldrb	r3, [r4, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d1ea      	bne.n	80016fa <main+0x976>
		UartReady = RESET;
 8001724:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instCNAbs.bytes[0], 4096);
 8001726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800172a:	4935      	ldr	r1, [pc, #212]	; (8001800 <main+0xa7c>)
 800172c:	4831      	ldr	r0, [pc, #196]	; (80017f4 <main+0xa70>)
		UartReady = RESET;
 800172e:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instCNAbs.bytes[0], 4096);
 8001730:	f002 ffb4 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001734:	7823      	ldrb	r3, [r4, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d015      	beq.n	8001766 <main+0x9e2>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800173a:	4e2f      	ldr	r6, [pc, #188]	; (80017f8 <main+0xa74>)
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001742:	4630      	mov	r0, r6
 8001744:	f000 fe94 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001748:	2032      	movs	r0, #50	; 0x32
 800174a:	f000 fc1d 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001754:	4630      	mov	r0, r6
 8001756:	f000 fe8b 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800175a:	2032      	movs	r0, #50	; 0x32
 800175c:	f000 fc14 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001760:	7823      	ldrb	r3, [r4, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d1ea      	bne.n	800173c <main+0x9b8>
		UartReady = RESET;
 8001766:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001768:	2204      	movs	r2, #4
 800176a:	4926      	ldr	r1, [pc, #152]	; (8001804 <main+0xa80>)
 800176c:	4821      	ldr	r0, [pc, #132]	; (80017f4 <main+0xa70>)
		UartReady = RESET;
 800176e:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001770:	f002 ff94 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001774:	7823      	ldrb	r3, [r4, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d015      	beq.n	80017a6 <main+0xa22>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800177a:	4e1f      	ldr	r6, [pc, #124]	; (80017f8 <main+0xa74>)
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001782:	4630      	mov	r0, r6
 8001784:	f000 fe74 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001788:	2032      	movs	r0, #50	; 0x32
 800178a:	f000 fbfd 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001794:	4630      	mov	r0, r6
 8001796:	f000 fe6b 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800179a:	2032      	movs	r0, #50	; 0x32
 800179c:	f000 fbf4 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 80017a0:	7823      	ldrb	r3, [r4, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d1ea      	bne.n	800177c <main+0x9f8>
		UartReady = RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	7023      	strb	r3, [r4, #0]
 80017aa:	e477      	b.n	800109c <main+0x318>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 80017ac:	2232      	movs	r2, #50	; 0x32
 80017ae:	4910      	ldr	r1, [pc, #64]	; (80017f0 <main+0xa6c>)
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <main+0xa70>)
 80017b2:	f002 ff73 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80017b6:	7823      	ldrb	r3, [r4, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d015      	beq.n	80017e8 <main+0xa64>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80017bc:	4e0e      	ldr	r6, [pc, #56]	; (80017f8 <main+0xa74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c4:	4630      	mov	r0, r6
 80017c6:	f000 fe53 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80017ca:	2032      	movs	r0, #50	; 0x32
 80017cc:	f000 fbdc 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d6:	4630      	mov	r0, r6
 80017d8:	f000 fe4a 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80017dc:	2032      	movs	r0, #50	; 0x32
 80017de:	f000 fbd3 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 80017e2:	7823      	ldrb	r3, [r4, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d1ea      	bne.n	80017be <main+0xa3a>
		UartReady = RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	7023      	strb	r3, [r4, #0]
 80017ec:	e44c      	b.n	8001088 <main+0x304>
 80017ee:	bf00      	nop
 80017f0:	24000204 	.word	0x24000204
 80017f4:	24009290 	.word	0x24009290
 80017f8:	58020400 	.word	0x58020400
 80017fc:	08007d9c 	.word	0x08007d9c
 8001800:	24005244 	.word	0x24005244
 8001804:	08007da0 	.word	0x08007da0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001808:	2232      	movs	r2, #50	; 0x32
 800180a:	49c7      	ldr	r1, [pc, #796]	; (8001b28 <main+0xda4>)
 800180c:	48c7      	ldr	r0, [pc, #796]	; (8001b2c <main+0xda8>)
 800180e:	f002 ff45 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001812:	7823      	ldrb	r3, [r4, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d015      	beq.n	8001844 <main+0xac0>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001818:	4ec5      	ldr	r6, [pc, #788]	; (8001b30 <main+0xdac>)
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001820:	4630      	mov	r0, r6
 8001822:	f000 fe25 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001826:	2032      	movs	r0, #50	; 0x32
 8001828:	f000 fbae 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001832:	4630      	mov	r0, r6
 8001834:	f000 fe1c 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001838:	2032      	movs	r0, #50	; 0x32
 800183a:	f000 fba5 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800183e:	7823      	ldrb	r3, [r4, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d1ea      	bne.n	800181a <main+0xa96>
		UartReady = RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	7023      	strb	r3, [r4, #0]
 8001848:	f7ff bbd0 	b.w	8000fec <main+0x268>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 800184c:	2232      	movs	r2, #50	; 0x32
 800184e:	49b6      	ldr	r1, [pc, #728]	; (8001b28 <main+0xda4>)
 8001850:	48b6      	ldr	r0, [pc, #728]	; (8001b2c <main+0xda8>)
 8001852:	f002 ff23 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001856:	7823      	ldrb	r3, [r4, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d015      	beq.n	8001888 <main+0xb04>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800185c:	4eb4      	ldr	r6, [pc, #720]	; (8001b30 <main+0xdac>)
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001864:	4630      	mov	r0, r6
 8001866:	f000 fe03 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800186a:	2032      	movs	r0, #50	; 0x32
 800186c:	f000 fb8c 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001876:	4630      	mov	r0, r6
 8001878:	f000 fdfa 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800187c:	2032      	movs	r0, #50	; 0x32
 800187e:	f000 fb83 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001882:	7823      	ldrb	r3, [r4, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d1ea      	bne.n	800185e <main+0xada>
		UartReady = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	7023      	strb	r3, [r4, #0]
 800188c:	f7ff bbd5 	b.w	800103a <main+0x2b6>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txStringBuffer[0], 50);
 8001890:	2232      	movs	r2, #50	; 0x32
 8001892:	49a5      	ldr	r1, [pc, #660]	; (8001b28 <main+0xda4>)
 8001894:	48a5      	ldr	r0, [pc, #660]	; (8001b2c <main+0xda8>)
 8001896:	f002 ff01 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 800189a:	7823      	ldrb	r3, [r4, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d015      	beq.n	80018cc <main+0xb48>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80018a0:	4ea3      	ldr	r6, [pc, #652]	; (8001b30 <main+0xdac>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a8:	4630      	mov	r0, r6
 80018aa:	f000 fde1 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80018ae:	2032      	movs	r0, #50	; 0x32
 80018b0:	f000 fb6a 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ba:	4630      	mov	r0, r6
 80018bc:	f000 fdd8 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80018c0:	2032      	movs	r0, #50	; 0x32
 80018c2:	f000 fb61 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 80018c6:	7823      	ldrb	r3, [r4, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d1ea      	bne.n	80018a2 <main+0xb1e>
		UartReady = RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	7023      	strb	r3, [r4, #0]
 80018d0:	f7ff bb61 	b.w	8000f96 <main+0x212>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80018d4:	2204      	movs	r2, #4
 80018d6:	4997      	ldr	r1, [pc, #604]	; (8001b34 <main+0xdb0>)
 80018d8:	4894      	ldr	r0, [pc, #592]	; (8001b2c <main+0xda8>)
 80018da:	f002 fedf 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80018de:	7823      	ldrb	r3, [r4, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d015      	beq.n	8001910 <main+0xb8c>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80018e4:	4e92      	ldr	r6, [pc, #584]	; (8001b30 <main+0xdac>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ec:	4630      	mov	r0, r6
 80018ee:	f000 fdbf 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80018f2:	2032      	movs	r0, #50	; 0x32
 80018f4:	f000 fb48 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fe:	4630      	mov	r0, r6
 8001900:	f000 fdb6 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001904:	2032      	movs	r0, #50	; 0x32
 8001906:	f000 fb3f 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800190a:	7823      	ldrb	r3, [r4, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d1ea      	bne.n	80018e6 <main+0xb62>
		UartReady = RESET;
 8001910:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instFreq.bytes[0], 4096);
 8001912:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001916:	4988      	ldr	r1, [pc, #544]	; (8001b38 <main+0xdb4>)
 8001918:	4884      	ldr	r0, [pc, #528]	; (8001b2c <main+0xda8>)
		UartReady = RESET;
 800191a:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instFreq.bytes[0], 4096);
 800191c:	f002 febe 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001920:	7823      	ldrb	r3, [r4, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d015      	beq.n	8001952 <main+0xbce>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001926:	4e82      	ldr	r6, [pc, #520]	; (8001b30 <main+0xdac>)
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800192e:	4630      	mov	r0, r6
 8001930:	f000 fd9e 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001934:	2032      	movs	r0, #50	; 0x32
 8001936:	f000 fb27 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001940:	4630      	mov	r0, r6
 8001942:	f000 fd95 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001946:	2032      	movs	r0, #50	; 0x32
 8001948:	f000 fb1e 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800194c:	7823      	ldrb	r3, [r4, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d1ea      	bne.n	8001928 <main+0xba4>
		UartReady = RESET;
 8001952:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001954:	2204      	movs	r2, #4
 8001956:	4979      	ldr	r1, [pc, #484]	; (8001b3c <main+0xdb8>)
 8001958:	4874      	ldr	r0, [pc, #464]	; (8001b2c <main+0xda8>)
		UartReady = RESET;
 800195a:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 800195c:	f002 fe9e 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001960:	7823      	ldrb	r3, [r4, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d015      	beq.n	8001992 <main+0xc0e>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001966:	4e72      	ldr	r6, [pc, #456]	; (8001b30 <main+0xdac>)
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800196e:	4630      	mov	r0, r6
 8001970:	f000 fd7e 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001974:	2032      	movs	r0, #50	; 0x32
 8001976:	f000 fb07 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001980:	4630      	mov	r0, r6
 8001982:	f000 fd75 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001986:	2032      	movs	r0, #50	; 0x32
 8001988:	f000 fafe 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 800198c:	7823      	ldrb	r3, [r4, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d1ea      	bne.n	8001968 <main+0xbe4>
		UartReady = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	7023      	strb	r3, [r4, #0]
 8001996:	f7ff bb5a 	b.w	800104e <main+0x2ca>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 800199a:	2204      	movs	r2, #4
 800199c:	4965      	ldr	r1, [pc, #404]	; (8001b34 <main+0xdb0>)
 800199e:	4863      	ldr	r0, [pc, #396]	; (8001b2c <main+0xda8>)
 80019a0:	f002 fe7c 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80019a4:	7823      	ldrb	r3, [r4, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d015      	beq.n	80019d6 <main+0xc52>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80019aa:	4e61      	ldr	r6, [pc, #388]	; (8001b30 <main+0xdac>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b2:	4630      	mov	r0, r6
 80019b4:	f000 fd5c 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80019b8:	2032      	movs	r0, #50	; 0x32
 80019ba:	f000 fae5 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019c4:	4630      	mov	r0, r6
 80019c6:	f000 fd53 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80019ca:	2032      	movs	r0, #50	; 0x32
 80019cc:	f000 fadc 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 80019d0:	7823      	ldrb	r3, [r4, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d1ea      	bne.n	80019ac <main+0xc28>
		UartReady = RESET;
 80019d6:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instPhase.bytes[0], 4096);
 80019d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019dc:	4958      	ldr	r1, [pc, #352]	; (8001b40 <main+0xdbc>)
 80019de:	4853      	ldr	r0, [pc, #332]	; (8001b2c <main+0xda8>)
		UartReady = RESET;
 80019e0:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instPhase.bytes[0], 4096);
 80019e2:	f002 fe5b 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80019e6:	7823      	ldrb	r3, [r4, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d015      	beq.n	8001a18 <main+0xc94>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80019ec:	4e50      	ldr	r6, [pc, #320]	; (8001b30 <main+0xdac>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f4:	4630      	mov	r0, r6
 80019f6:	f000 fd3b 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80019fa:	2032      	movs	r0, #50	; 0x32
 80019fc:	f000 fac4 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a06:	4630      	mov	r0, r6
 8001a08:	f000 fd32 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001a0c:	2032      	movs	r0, #50	; 0x32
 8001a0e:	f000 fabb 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001a12:	7823      	ldrb	r3, [r4, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d1ea      	bne.n	80019ee <main+0xc6a>
		UartReady = RESET;
 8001a18:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4947      	ldr	r1, [pc, #284]	; (8001b3c <main+0xdb8>)
 8001a1e:	4843      	ldr	r0, [pc, #268]	; (8001b2c <main+0xda8>)
		UartReady = RESET;
 8001a20:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001a22:	f002 fe3b 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001a26:	7823      	ldrb	r3, [r4, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d015      	beq.n	8001a58 <main+0xcd4>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001a2c:	4e40      	ldr	r6, [pc, #256]	; (8001b30 <main+0xdac>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a34:	4630      	mov	r0, r6
 8001a36:	f000 fd1b 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001a3a:	2032      	movs	r0, #50	; 0x32
 8001a3c:	f000 faa4 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a46:	4630      	mov	r0, r6
 8001a48:	f000 fd12 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001a4c:	2032      	movs	r0, #50	; 0x32
 8001a4e:	f000 fa9b 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001a52:	7823      	ldrb	r3, [r4, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d1ea      	bne.n	8001a2e <main+0xcaa>
		UartReady = RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	7023      	strb	r3, [r4, #0]
 8001a5c:	f7ff baa5 	b.w	8000faa <main+0x226>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8001a60:	2204      	movs	r2, #4
 8001a62:	4934      	ldr	r1, [pc, #208]	; (8001b34 <main+0xdb0>)
 8001a64:	4831      	ldr	r0, [pc, #196]	; (8001b2c <main+0xda8>)
 8001a66:	f002 fe19 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001a6a:	7823      	ldrb	r3, [r4, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d015      	beq.n	8001a9c <main+0xd18>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001a70:	4e2f      	ldr	r6, [pc, #188]	; (8001b30 <main+0xdac>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a78:	4630      	mov	r0, r6
 8001a7a:	f000 fcf9 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001a7e:	2032      	movs	r0, #50	; 0x32
 8001a80:	f000 fa82 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a8a:	4630      	mov	r0, r6
 8001a8c:	f000 fcf0 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001a90:	2032      	movs	r0, #50	; 0x32
 8001a92:	f000 fa79 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001a96:	7823      	ldrb	r3, [r4, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d1ea      	bne.n	8001a72 <main+0xcee>
		UartReady = RESET;
 8001a9c:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instUnwrappedPhase.bytes[0], 4096);
 8001a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa2:	4928      	ldr	r1, [pc, #160]	; (8001b44 <main+0xdc0>)
 8001aa4:	4821      	ldr	r0, [pc, #132]	; (8001b2c <main+0xda8>)
		UartReady = RESET;
 8001aa6:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instUnwrappedPhase.bytes[0], 4096);
 8001aa8:	f002 fdf8 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001aac:	7823      	ldrb	r3, [r4, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d015      	beq.n	8001ade <main+0xd5a>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001ab2:	4e1f      	ldr	r6, [pc, #124]	; (8001b30 <main+0xdac>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aba:	4630      	mov	r0, r6
 8001abc:	f000 fcd8 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ac0:	2032      	movs	r0, #50	; 0x32
 8001ac2:	f000 fa61 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001acc:	4630      	mov	r0, r6
 8001ace:	f000 fccf 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ad2:	2032      	movs	r0, #50	; 0x32
 8001ad4:	f000 fa58 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001ad8:	7823      	ldrb	r3, [r4, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d1ea      	bne.n	8001ab4 <main+0xd30>
		UartReady = RESET;
 8001ade:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4916      	ldr	r1, [pc, #88]	; (8001b3c <main+0xdb8>)
 8001ae4:	4811      	ldr	r0, [pc, #68]	; (8001b2c <main+0xda8>)
		UartReady = RESET;
 8001ae6:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001ae8:	f002 fdd8 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001aec:	7823      	ldrb	r3, [r4, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d015      	beq.n	8001b1e <main+0xd9a>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001af2:	4e0f      	ldr	r6, [pc, #60]	; (8001b30 <main+0xdac>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001afa:	4630      	mov	r0, r6
 8001afc:	f000 fcb8 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001b00:	2032      	movs	r0, #50	; 0x32
 8001b02:	f000 fa41 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	f000 fcaf 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001b12:	2032      	movs	r0, #50	; 0x32
 8001b14:	f000 fa38 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001b18:	7823      	ldrb	r3, [r4, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d1ea      	bne.n	8001af4 <main+0xd70>
		UartReady = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	7023      	strb	r3, [r4, #0]
 8001b22:	f7ff ba6d 	b.w	8001000 <main+0x27c>
 8001b26:	bf00      	nop
 8001b28:	24000204 	.word	0x24000204
 8001b2c:	24009290 	.word	0x24009290
 8001b30:	58020400 	.word	0x58020400
 8001b34:	08007d9c 	.word	0x08007d9c
 8001b38:	24002244 	.word	0x24002244
 8001b3c:	08007da0 	.word	0x08007da0
 8001b40:	24003244 	.word	0x24003244
 8001b44:	24008244 	.word	0x24008244
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8001b48:	2204      	movs	r2, #4
 8001b4a:	4931      	ldr	r1, [pc, #196]	; (8001c10 <main+0xe8c>)
 8001b4c:	4831      	ldr	r0, [pc, #196]	; (8001c14 <main+0xe90>)
 8001b4e:	f002 fda5 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001b52:	7823      	ldrb	r3, [r4, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d015      	beq.n	8001b84 <main+0xe00>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001b58:	4e2f      	ldr	r6, [pc, #188]	; (8001c18 <main+0xe94>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b60:	4630      	mov	r0, r6
 8001b62:	f000 fc85 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001b66:	2032      	movs	r0, #50	; 0x32
 8001b68:	f000 fa0e 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b72:	4630      	mov	r0, r6
 8001b74:	f000 fc7c 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001b78:	2032      	movs	r0, #50	; 0x32
 8001b7a:	f000 fa05 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001b7e:	7823      	ldrb	r3, [r4, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d1ea      	bne.n	8001b5a <main+0xdd6>
		UartReady = RESET;
 8001b84:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instAbs.bytes[0], 4096);
 8001b86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b8a:	4924      	ldr	r1, [pc, #144]	; (8001c1c <main+0xe98>)
 8001b8c:	4821      	ldr	r0, [pc, #132]	; (8001c14 <main+0xe90>)
		UartReady = RESET;
 8001b8e:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &instAbs.bytes[0], 4096);
 8001b90:	f002 fd84 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001b94:	7823      	ldrb	r3, [r4, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d015      	beq.n	8001bc6 <main+0xe42>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001b9a:	4e1f      	ldr	r6, [pc, #124]	; (8001c18 <main+0xe94>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	f000 fc64 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001ba8:	2032      	movs	r0, #50	; 0x32
 8001baa:	f000 f9ed 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f000 fc5b 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001bba:	2032      	movs	r0, #50	; 0x32
 8001bbc:	f000 f9e4 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001bc0:	7823      	ldrb	r3, [r4, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d1ea      	bne.n	8001b9c <main+0xe18>
		UartReady = RESET;
 8001bc6:	2300      	movs	r3, #0
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4915      	ldr	r1, [pc, #84]	; (8001c20 <main+0xe9c>)
 8001bcc:	4811      	ldr	r0, [pc, #68]	; (8001c14 <main+0xe90>)
		UartReady = RESET;
 8001bce:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8001bd0:	f002 fd64 	bl	800469c <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8001bd4:	7823      	ldrb	r3, [r4, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d015      	beq.n	8001c06 <main+0xe82>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001bda:	4e0f      	ldr	r6, [pc, #60]	; (8001c18 <main+0xe94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be2:	4630      	mov	r0, r6
 8001be4:	f000 fc44 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001be8:	2032      	movs	r0, #50	; 0x32
 8001bea:	f000 f9cd 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	f000 fc3b 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001bfa:	2032      	movs	r0, #50	; 0x32
 8001bfc:	f000 f9c4 	bl	8001f88 <HAL_Delay>
		while(UartReady != SET){
 8001c00:	7823      	ldrb	r3, [r4, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d1ea      	bne.n	8001bdc <main+0xe58>
		UartReady = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	7023      	strb	r3, [r4, #0]
 8001c0a:	f7ff b9a7 	b.w	8000f5c <main+0x1d8>
 8001c0e:	bf00      	nop
 8001c10:	08007d9c 	.word	0x08007d9c
 8001c14:	24009290 	.word	0x24009290
 8001c18:	58020400 	.word	0x58020400
 8001c1c:	24004244 	.word	0x24004244
 8001c20:	08007da0 	.word	0x08007da0

08001c24 <HAL_UART_TxCpltCallback>:
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001c24:	4b01      	ldr	r3, [pc, #4]	; (8001c2c <HAL_UART_TxCpltCallback+0x8>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
}
 8001c2a:	4770      	bx	lr
 8001c2c:	24000200 	.word	0x24000200

08001c30 <HAL_UART_RxCpltCallback>:
 8001c30:	4b01      	ldr	r3, [pc, #4]	; (8001c38 <HAL_UART_RxCpltCallback+0x8>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	4770      	bx	lr
 8001c38:	24000200 	.word	0x24000200

08001c3c <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_MspInit+0x20>)
{
 8001c42:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c44:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001c48:	f042 0202 	orr.w	r2, r2, #2
 8001c4c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5c:	b002      	add	sp, #8
 8001c5e:	4770      	bx	lr
 8001c60:	58024400 	.word	0x58024400

08001c64 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop

08001c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c68:	e7fe      	b.n	8001c68 <HardFault_Handler>
 8001c6a:	bf00      	nop

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler>
 8001c6e:	bf00      	nop

08001c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c70:	e7fe      	b.n	8001c70 <BusFault_Handler>
 8001c72:	bf00      	nop

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	e7fe      	b.n	8001c74 <UsageFault_Handler>
 8001c76:	bf00      	nop

08001c78 <SVC_Handler>:
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <DebugMon_Handler>:
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop

08001c80 <PendSV_Handler>:
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c84:	f000 b96e 	b.w	8001f64 <HAL_IncTick>

08001c88 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c88:	4801      	ldr	r0, [pc, #4]	; (8001c90 <USART3_IRQHandler+0x8>)
 8001c8a:	f002 bf1b 	b.w	8004ac4 <HAL_UART_IRQHandler>
 8001c8e:	bf00      	nop
 8001c90:	24009290 	.word	0x24009290

08001c94 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c94:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <_sbrk+0x34>)
{
 8001c96:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	b133      	cbz	r3, 8001caa <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001c9c:	4418      	add	r0, r3
 8001c9e:	4669      	mov	r1, sp
 8001ca0:	4288      	cmp	r0, r1
 8001ca2:	d809      	bhi.n	8001cb8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001ca4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <_sbrk+0x38>)
 8001cac:	460b      	mov	r3, r1
 8001cae:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001cb0:	4669      	mov	r1, sp
 8001cb2:	4418      	add	r0, r3
 8001cb4:	4288      	cmp	r0, r1
 8001cb6:	d9f5      	bls.n	8001ca4 <_sbrk+0x10>
		errno = ENOMEM;
 8001cb8:	f003 fe1c 	bl	80058f4 <__errno>
 8001cbc:	220c      	movs	r2, #12
		return (caddr_t) -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 8001cc2:	6002      	str	r2, [r0, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd08      	pop	{r3, pc}
 8001cc8:	24000238 	.word	0x24000238
 8001ccc:	24009328 	.word	0x24009328

08001cd0 <MX_TIM2_Init>:
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <MX_TIM2_Init+0x68>)
 8001cd2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
{
 8001cdc:	b500      	push	{lr}
 8001cde:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8001ce0:	6010      	str	r0, [r2, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ce2:	4610      	mov	r0, r2
  htim2.Init.Period = 4294967295;
 8001ce4:	60d1      	str	r1, [r2, #12]
  htim2.Init.Prescaler = 0;
 8001ce6:	6053      	str	r3, [r2, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce8:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cea:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	6093      	str	r3, [r2, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	6113      	str	r3, [r2, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	9307      	str	r3, [sp, #28]
 8001cf4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cfc:	f002 fa5e 	bl	80041bc <HAL_TIM_Base_Init>
 8001d00:	b9b8      	cbnz	r0, 8001d32 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d06:	a904      	add	r1, sp, #16
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d0c:	f002 fb04 	bl	8004318 <HAL_TIM_ConfigClockSource>
 8001d10:	b960      	cbnz	r0, 8001d2c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d14:	a901      	add	r1, sp, #4
 8001d16:	4808      	ldr	r0, [pc, #32]	; (8001d38 <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d1c:	f002 fbbc 	bl	8004498 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	b108      	cbz	r0, 8001d26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d22:	f7ff ff8b 	bl	8001c3c <Error_Handler>
  }

}
 8001d26:	b009      	add	sp, #36	; 0x24
 8001d28:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d2c:	f7ff ff86 	bl	8001c3c <Error_Handler>
 8001d30:	e7ef      	b.n	8001d12 <MX_TIM2_Init+0x42>
    Error_Handler();
 8001d32:	f7ff ff83 	bl	8001c3c <Error_Handler>
 8001d36:	e7e4      	b.n	8001d02 <MX_TIM2_Init+0x32>
 8001d38:	24009244 	.word	0x24009244

08001d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001d3c:	6803      	ldr	r3, [r0, #0]
 8001d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d42:	d000      	beq.n	8001d46 <HAL_TIM_Base_MspInit+0xa>
 8001d44:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_TIM_Base_MspInit+0x2c>)
{
 8001d48:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d4a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001d56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d62:	b002      	add	sp, #8
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400

08001d6c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d6c:	b538      	push	{r3, r4, r5, lr}

  huart3.Instance = USART3;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_USART3_UART_Init+0x64>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d70:	2200      	movs	r2, #0
  huart3.Init.BaudRate = 115200;
 8001d72:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart3.Instance = USART3;
 8001d76:	4d17      	ldr	r5, [pc, #92]	; (8001dd4 <MX_USART3_UART_Init+0x68>)
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d78:	210c      	movs	r1, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d7a:	4618      	mov	r0, r3
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d7c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d7e:	6159      	str	r1, [r3, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 8001d82:	e9c3 5400 	strd	r5, r4, [r3]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d86:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d8e:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d92:	f002 fff5 	bl	8004d80 <HAL_UART_Init>
 8001d96:	b9c0      	cbnz	r0, 8001dca <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d98:	2100      	movs	r1, #0
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_USART3_UART_Init+0x64>)
 8001d9c:	f003 fbb8 	bl	8005510 <HAL_UARTEx_SetTxFifoThreshold>
 8001da0:	b980      	cbnz	r0, 8001dc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <MX_USART3_UART_Init+0x64>)
 8001da6:	f003 fc05 	bl	80055b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001daa:	b940      	cbnz	r0, 8001dbe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001dac:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <MX_USART3_UART_Init+0x64>)
 8001dae:	f003 fb91 	bl	80054d4 <HAL_UARTEx_DisableFifoMode>
 8001db2:	b900      	cbnz	r0, 8001db6 <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
  }

}
 8001db4:	bd38      	pop	{r3, r4, r5, pc}
 8001db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001dba:	f7ff bf3f 	b.w	8001c3c <Error_Handler>
    Error_Handler();
 8001dbe:	f7ff ff3d 	bl	8001c3c <Error_Handler>
 8001dc2:	e7f3      	b.n	8001dac <MX_USART3_UART_Init+0x40>
    Error_Handler();
 8001dc4:	f7ff ff3a 	bl	8001c3c <Error_Handler>
 8001dc8:	e7eb      	b.n	8001da2 <MX_USART3_UART_Init+0x36>
    Error_Handler();
 8001dca:	f7ff ff37 	bl	8001c3c <Error_Handler>
 8001dce:	e7e3      	b.n	8001d98 <MX_USART3_UART_Init+0x2c>
 8001dd0:	24009290 	.word	0x24009290
 8001dd4:	40004800 	.word	0x40004800

08001dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART3)
 8001dd8:	6802      	ldr	r2, [r0, #0]
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_UART_MspInit+0x7c>)
{
 8001ddc:	b570      	push	{r4, r5, r6, lr}
  if(uartHandle->Instance==USART3)
 8001dde:	429a      	cmp	r2, r3
{
 8001de0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de2:	f04f 0400 	mov.w	r4, #0
 8001de6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001dea:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001dee:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART3)
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001df2:	b008      	add	sp, #32
 8001df4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001df8:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dfe:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e00:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e04:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e0a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001e0e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001e12:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001e16:	9201      	str	r2, [sp, #4]
 8001e18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001e1e:	f042 0208 	orr.w	r2, r2, #8
 8001e22:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e2a:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2c:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e38:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3a:	f000 f9fb 	bl	8002234 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e3e:	4622      	mov	r2, r4
 8001e40:	4621      	mov	r1, r4
 8001e42:	2027      	movs	r0, #39	; 0x27
 8001e44:	f000 f8cc 	bl	8001fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e48:	2027      	movs	r0, #39	; 0x27
 8001e4a:	f000 f8ff 	bl	800204c <HAL_NVIC_EnableIRQ>
}
 8001e4e:	b008      	add	sp, #32
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
 8001e52:	bf00      	nop
 8001e54:	40004800 	.word	0x40004800
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	58020c00 	.word	0x58020c00

08001e60 <Reset_Handler>:
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopFillZerobss+0x14>
 8001e64:	2100      	movs	r1, #0
 8001e66:	e003      	b.n	8001e70 <LoopCopyDataInit>

08001e68 <CopyDataInit>:
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <LoopFillZerobss+0x18>)
 8001e6a:	585b      	ldr	r3, [r3, r1]
 8001e6c:	5043      	str	r3, [r0, r1]
 8001e6e:	3104      	adds	r1, #4

08001e70 <LoopCopyDataInit>:
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x1c>)
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <LoopFillZerobss+0x20>)
 8001e74:	1842      	adds	r2, r0, r1
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3f6      	bcc.n	8001e68 <CopyDataInit>
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <LoopFillZerobss+0x24>)
 8001e7c:	e002      	b.n	8001e84 <LoopFillZerobss>

08001e7e <FillZerobss>:
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f842 3b04 	str.w	r3, [r2], #4

08001e84 <LoopFillZerobss>:
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <LoopFillZerobss+0x28>)
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d3f9      	bcc.n	8001e7e <FillZerobss>
 8001e8a:	f7fe fc01 	bl	8000690 <SystemInit>
 8001e8e:	f003 fd37 	bl	8005900 <__libc_init_array>
 8001e92:	f7fe ff77 	bl	8000d84 <main>
 8001e96:	4770      	bx	lr
 8001e98:	20020000 	.word	0x20020000
 8001e9c:	08008090 	.word	0x08008090
 8001ea0:	24000000 	.word	0x24000000
 8001ea4:	240001e4 	.word	0x240001e4
 8001ea8:	240001e4 	.word	0x240001e4
 8001eac:	24009324 	.word	0x24009324

08001eb0 <ADC3_IRQHandler>:
 8001eb0:	e7fe      	b.n	8001eb0 <ADC3_IRQHandler>
	...

08001eb4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_InitTick+0x40>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b90b      	cbnz	r3, 8001ebe <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001eba:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001ebc:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ebe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec2:	490d      	ldr	r1, [pc, #52]	; (8001ef8 <HAL_InitTick+0x44>)
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
{
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ecc:	6808      	ldr	r0, [r1, #0]
 8001ece:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ed2:	f000 f8c9 	bl	8002068 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed6:	2c0f      	cmp	r4, #15
 8001ed8:	d800      	bhi.n	8001edc <HAL_InitTick+0x28>
 8001eda:	b108      	cbz	r0, 8001ee0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
}
 8001ede:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 f87a 	bl	8001fe0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_InitTick+0x48>)
 8001eee:	2000      	movs	r0, #0
 8001ef0:	601c      	str	r4, [r3, #0]
}
 8001ef2:	bd10      	pop	{r4, pc}
 8001ef4:	24000008 	.word	0x24000008
 8001ef8:	24000000 	.word	0x24000000
 8001efc:	2400000c 	.word	0x2400000c

08001f00 <HAL_Init>:
{
 8001f00:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f02:	2003      	movs	r0, #3
{
 8001f04:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f06:	f000 f857 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f0a:	4c12      	ldr	r4, [pc, #72]	; (8001f54 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f0c:	f000 fe02 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8001f10:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <HAL_Init+0x58>)
 8001f12:	4912      	ldr	r1, [pc, #72]	; (8001f5c <HAL_Init+0x5c>)
 8001f14:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f16:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f18:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8001f1c:	4d10      	ldr	r5, [pc, #64]	; (8001f60 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f1e:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f24:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f26:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f2a:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f2e:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f32:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f34:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8001f38:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f3a:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f3c:	f7ff ffba 	bl	8001eb4 <HAL_InitTick>
 8001f40:	b110      	cbz	r0, 8001f48 <HAL_Init+0x48>
    return HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
}
 8001f44:	b003      	add	sp, #12
 8001f46:	bd30      	pop	{r4, r5, pc}
 8001f48:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 8001f4a:	f7ff fe79 	bl	8001c40 <HAL_MspInit>
  return HAL_OK;
 8001f4e:	9801      	ldr	r0, [sp, #4]
}
 8001f50:	b003      	add	sp, #12
 8001f52:	bd30      	pop	{r4, r5, pc}
 8001f54:	24000004 	.word	0x24000004
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	08007ca0 	.word	0x08007ca0
 8001f60:	24000000 	.word	0x24000000

08001f64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_IncTick+0x10>)
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HAL_IncTick+0x14>)
 8001f68:	6811      	ldr	r1, [r2, #0]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	440b      	add	r3, r1
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	2400931c 	.word	0x2400931c
 8001f78:	24000008 	.word	0x24000008

08001f7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f7c:	4b01      	ldr	r3, [pc, #4]	; (8001f84 <HAL_GetTick+0x8>)
 8001f7e:	6818      	ldr	r0, [r3, #0]
}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2400931c 	.word	0x2400931c

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff fff6 	bl	8001f7c <HAL_GetTick>
 8001f90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	1c63      	adds	r3, r4, #1
 8001f94:	d002      	beq.n	8001f9c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_Delay+0x20>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9c:	f7ff ffee 	bl	8001f7c <HAL_GetTick>
 8001fa0:	1b40      	subs	r0, r0, r5
 8001fa2:	42a0      	cmp	r0, r4
 8001fa4:	d3fa      	bcc.n	8001f9c <HAL_Delay+0x14>
  {
  }
}
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	24000008 	.word	0x24000008

08001fac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001fac:	4b01      	ldr	r3, [pc, #4]	; (8001fb4 <HAL_GetREVID+0x8>)
 8001fae:	6818      	ldr	r0, [r3, #0]
}
 8001fb0:	0c00      	lsrs	r0, r0, #16
 8001fb2:	4770      	bx	lr
 8001fb4:	5c001000 	.word	0x5c001000

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fba:	0200      	lsls	r0, r0, #8
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fbe:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001fca:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fd0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd2:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8001fd4:	60c8      	str	r0, [r1, #12]
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00
 8001fdc:	05fa0000 	.word	0x05fa0000

08001fe0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_NVIC_SetPriority+0x60>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fea:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	2d04      	cmp	r5, #4
 8001ff2:	bf28      	it	cs
 8001ff4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	2c06      	cmp	r4, #6
 8001ff8:	d918      	bls.n	800202c <HAL_NVIC_SetPriority+0x4c>
 8001ffa:	3b03      	subs	r3, #3
 8001ffc:	f04f 34ff 	mov.w	r4, #4294967295
 8002000:	409c      	lsls	r4, r3
 8002002:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002006:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800200a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	fa02 f205 	lsl.w	r2, r2, r5
 8002010:	ea21 0102 	bic.w	r1, r1, r2
 8002014:	fa01 f203 	lsl.w	r2, r1, r3
 8002018:	ea42 0204 	orr.w	r2, r2, r4
 800201c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002020:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8002022:	db06      	blt.n	8002032 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_NVIC_SetPriority+0x64>)
 8002026:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002028:	bc30      	pop	{r4, r5}
 800202a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202c:	2400      	movs	r4, #0
 800202e:	4623      	mov	r3, r4
 8002030:	e7e9      	b.n	8002006 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	f000 000f 	and.w	r0, r0, #15
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_NVIC_SetPriority+0x68>)
 8002038:	541a      	strb	r2, [r3, r0]
 800203a:	bc30      	pop	{r4, r5}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00
 8002044:	e000e400 	.word	0xe000e400
 8002048:	e000ed14 	.word	0xe000ed14

0800204c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800204c:	2800      	cmp	r0, #0
 800204e:	db07      	blt.n	8002060 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002050:	f000 011f 	and.w	r1, r0, #31
 8002054:	2301      	movs	r3, #1
 8002056:	0940      	lsrs	r0, r0, #5
 8002058:	4a02      	ldr	r2, [pc, #8]	; (8002064 <HAL_NVIC_EnableIRQ+0x18>)
 800205a:	408b      	lsls	r3, r1
 800205c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	3801      	subs	r0, #1
 800206a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800206e:	d20d      	bcs.n	800208c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002072:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002074:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	25f0      	movs	r5, #240	; 0xf0
 800207a:	4c06      	ldr	r4, [pc, #24]	; (8002094 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8002088:	bc30      	pop	{r4, r5}
 800208a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800208c:	2001      	movs	r0, #1
 800208e:	4770      	bx	lr
 8002090:	e000e010 	.word	0xe000e010
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002098:	2800      	cmp	r0, #0
 800209a:	d060      	beq.n	800215e <HAL_DMA_Abort_IT+0xc6>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800209c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80020a0:	2a02      	cmp	r2, #2
{
 80020a2:	b538      	push	{r3, r4, r5, lr}
 80020a4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a6:	d003      	beq.n	80020b0 <HAL_DMA_Abort_IT+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a8:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80020aa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  return HAL_OK;
}
 80020ae:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020b0:	6801      	ldr	r1, [r0, #0]
 80020b2:	4a57      	ldr	r2, [pc, #348]	; (8002210 <HAL_DMA_Abort_IT+0x178>)
 80020b4:	4291      	cmp	r1, r2
 80020b6:	d049      	beq.n	800214c <HAL_DMA_Abort_IT+0xb4>
 80020b8:	3218      	adds	r2, #24
 80020ba:	4291      	cmp	r1, r2
 80020bc:	d046      	beq.n	800214c <HAL_DMA_Abort_IT+0xb4>
 80020be:	3230      	adds	r2, #48	; 0x30
 80020c0:	4854      	ldr	r0, [pc, #336]	; (8002214 <HAL_DMA_Abort_IT+0x17c>)
 80020c2:	4c55      	ldr	r4, [pc, #340]	; (8002218 <HAL_DMA_Abort_IT+0x180>)
 80020c4:	4281      	cmp	r1, r0
 80020c6:	bf18      	it	ne
 80020c8:	4291      	cmpne	r1, r2
 80020ca:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80020ce:	4d53      	ldr	r5, [pc, #332]	; (800221c <HAL_DMA_Abort_IT+0x184>)
 80020d0:	bf0c      	ite	eq
 80020d2:	2201      	moveq	r2, #1
 80020d4:	2200      	movne	r2, #0
 80020d6:	42a1      	cmp	r1, r4
 80020d8:	bf08      	it	eq
 80020da:	f042 0201 	orreq.w	r2, r2, #1
 80020de:	3448      	adds	r4, #72	; 0x48
 80020e0:	4281      	cmp	r1, r0
 80020e2:	bf08      	it	eq
 80020e4:	f042 0201 	orreq.w	r2, r2, #1
 80020e8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80020ec:	42a9      	cmp	r1, r5
 80020ee:	bf08      	it	eq
 80020f0:	f042 0201 	orreq.w	r2, r2, #1
 80020f4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80020f8:	42a1      	cmp	r1, r4
 80020fa:	bf08      	it	eq
 80020fc:	f042 0201 	orreq.w	r2, r2, #1
 8002100:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8002104:	4281      	cmp	r1, r0
 8002106:	bf08      	it	eq
 8002108:	f042 0201 	orreq.w	r2, r2, #1
 800210c:	3048      	adds	r0, #72	; 0x48
 800210e:	42a9      	cmp	r1, r5
 8002110:	bf08      	it	eq
 8002112:	f042 0201 	orreq.w	r2, r2, #1
 8002116:	3548      	adds	r5, #72	; 0x48
 8002118:	42a1      	cmp	r1, r4
 800211a:	bf08      	it	eq
 800211c:	f042 0201 	orreq.w	r2, r2, #1
 8002120:	3448      	adds	r4, #72	; 0x48
 8002122:	4281      	cmp	r1, r0
 8002124:	bf08      	it	eq
 8002126:	f042 0201 	orreq.w	r2, r2, #1
 800212a:	3048      	adds	r0, #72	; 0x48
 800212c:	42a9      	cmp	r1, r5
 800212e:	bf08      	it	eq
 8002130:	f042 0201 	orreq.w	r2, r2, #1
 8002134:	42a1      	cmp	r1, r4
 8002136:	bf08      	it	eq
 8002138:	f042 0201 	orreq.w	r2, r2, #1
 800213c:	4281      	cmp	r1, r0
 800213e:	bf08      	it	eq
 8002140:	f042 0201 	orreq.w	r2, r2, #1
 8002144:	b912      	cbnz	r2, 800214c <HAL_DMA_Abort_IT+0xb4>
 8002146:	4a36      	ldr	r2, [pc, #216]	; (8002220 <HAL_DMA_Abort_IT+0x188>)
 8002148:	4291      	cmp	r1, r2
 800214a:	d10a      	bne.n	8002162 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 800214c:	2204      	movs	r2, #4
  return HAL_OK;
 800214e:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002154:	680b      	ldr	r3, [r1, #0]
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	600b      	str	r3, [r1, #0]
}
 800215c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800215e:	2001      	movs	r0, #1
}
 8002160:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002162:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 8002166:	4a2f      	ldr	r2, [pc, #188]	; (8002224 <HAL_DMA_Abort_IT+0x18c>)
 8002168:	482f      	ldr	r0, [pc, #188]	; (8002228 <HAL_DMA_Abort_IT+0x190>)
 800216a:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800216e:	4d2f      	ldr	r5, [pc, #188]	; (800222c <HAL_DMA_Abort_IT+0x194>)
 8002170:	42a1      	cmp	r1, r4
 8002172:	bf18      	it	ne
 8002174:	4291      	cmpne	r1, r2
 8002176:	f104 0450 	add.w	r4, r4, #80	; 0x50
 800217a:	bf0c      	ite	eq
 800217c:	2201      	moveq	r2, #1
 800217e:	2200      	movne	r2, #0
 8002180:	4281      	cmp	r1, r0
 8002182:	bf08      	it	eq
 8002184:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002188:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800218a:	42a9      	cmp	r1, r5
 800218c:	bf08      	it	eq
 800218e:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002192:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002196:	3528      	adds	r5, #40	; 0x28
 8002198:	42a1      	cmp	r1, r4
 800219a:	bf08      	it	eq
 800219c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021a0:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021a2:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 80021a4:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021a6:	42a9      	cmp	r1, r5
 80021a8:	bf08      	it	eq
 80021aa:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80021ae:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021b2:	42a1      	cmp	r1, r4
 80021b4:	bf08      	it	eq
 80021b6:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80021ba:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021bc:	b912      	cbnz	r2, 80021c4 <HAL_DMA_Abort_IT+0x12c>
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_DMA_Abort_IT+0x198>)
 80021c0:	4291      	cmp	r1, r2
 80021c2:	d117      	bne.n	80021f4 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021c6:	2101      	movs	r1, #1
 80021c8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ca:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021cc:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021d6:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021d8:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021da:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 80021dc:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021e0:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e2:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80021e4:	b132      	cbz	r2, 80021f4 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021e6:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80021ea:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021ec:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80021f0:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021f2:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 80021f4:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80021f6:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 80021f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80021fa:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80021fe:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8002202:	b11a      	cbz	r2, 800220c <HAL_DMA_Abort_IT+0x174>
 8002204:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8002206:	4790      	blx	r2
  return HAL_OK;
 8002208:	4620      	mov	r0, r4
}
 800220a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800220c:	4610      	mov	r0, r2
}
 800220e:	bd38      	pop	{r3, r4, r5, pc}
 8002210:	40020010 	.word	0x40020010
 8002214:	40020040 	.word	0x40020040
 8002218:	40020070 	.word	0x40020070
 800221c:	400200a0 	.word	0x400200a0
 8002220:	400204b8 	.word	0x400204b8
 8002224:	5802541c 	.word	0x5802541c
 8002228:	58025430 	.word	0x58025430
 800222c:	58025444 	.word	0x58025444
 8002230:	58025494 	.word	0x58025494

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002238:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800223a:	6809      	ldr	r1, [r1, #0]
{
 800223c:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800223e:	2900      	cmp	r1, #0
 8002240:	f000 80cd 	beq.w	80023de <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 8002244:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002246:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800245c <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800224a:	2301      	movs	r3, #1
 800224c:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 800224e:	ea13 0501 	ands.w	r5, r3, r1
 8002252:	f000 80bf 	beq.w	80023d4 <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002256:	f8de 2004 	ldr.w	r2, [lr, #4]
 800225a:	0077      	lsls	r7, r6, #1
 800225c:	f04f 0c03 	mov.w	ip, #3
 8002260:	f022 0910 	bic.w	r9, r2, #16
 8002264:	fa0c fc07 	lsl.w	ip, ip, r7
 8002268:	f109 34ff 	add.w	r4, r9, #4294967295
 800226c:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002270:	2c01      	cmp	r4, #1
 8002272:	d812      	bhi.n	800229a <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8002274:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002276:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800227a:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227e:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002282:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002286:	40bc      	lsls	r4, r7
 8002288:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 800228c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800228e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002290:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002294:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 8002298:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800229a:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800229c:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a0:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022a4:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	fa04 f407 	lsl.w	r4, r4, r7
 80022ac:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 80022b0:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b2:	d115      	bne.n	80022e0 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 80022b4:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022b6:	f006 0907 	and.w	r9, r6, #7
 80022ba:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022be:	f8de 4010 	ldr.w	r4, [lr, #16]
 80022c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022c6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80022ca:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022ce:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022d2:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022d6:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022da:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80022de:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 80022e0:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e2:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022e6:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ea:	40bb      	lsls	r3, r7
 80022ec:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 80022f0:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f2:	00d3      	lsls	r3, r2, #3
 80022f4:	d56e      	bpl.n	80023d4 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_GPIO_Init+0x210>)
 80022f8:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022fc:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002302:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	f047 0c02 	orr.w	ip, r7, #2
 800230a:	4f4f      	ldr	r7, [pc, #316]	; (8002448 <HAL_GPIO_Init+0x214>)
 800230c:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800230e:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002314:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002318:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 800231c:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002320:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002324:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002328:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232a:	f8cd c004 	str.w	ip, [sp, #4]
 800232e:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002332:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002336:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800233a:	d026      	beq.n	800238a <HAL_GPIO_Init+0x156>
 800233c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002340:	4298      	cmp	r0, r3
 8002342:	d055      	beq.n	80023f0 <HAL_GPIO_Init+0x1bc>
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_GPIO_Init+0x218>)
 8002346:	4298      	cmp	r0, r3
 8002348:	d04c      	beq.n	80023e4 <HAL_GPIO_Init+0x1b0>
 800234a:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_GPIO_Init+0x21c>)
 800234c:	4298      	cmp	r0, r3
 800234e:	d05b      	beq.n	8002408 <HAL_GPIO_Init+0x1d4>
 8002350:	4b40      	ldr	r3, [pc, #256]	; (8002454 <HAL_GPIO_Init+0x220>)
 8002352:	4298      	cmp	r0, r3
 8002354:	d05e      	beq.n	8002414 <HAL_GPIO_Init+0x1e0>
 8002356:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_GPIO_Init+0x224>)
 8002358:	4298      	cmp	r0, r3
 800235a:	d04f      	beq.n	80023fc <HAL_GPIO_Init+0x1c8>
 800235c:	f8df c100 	ldr.w	ip, [pc, #256]	; 8002460 <HAL_GPIO_Init+0x22c>
 8002360:	4560      	cmp	r0, ip
 8002362:	d05d      	beq.n	8002420 <HAL_GPIO_Init+0x1ec>
 8002364:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8002464 <HAL_GPIO_Init+0x230>
 8002368:	4560      	cmp	r0, ip
 800236a:	d05f      	beq.n	800242c <HAL_GPIO_Init+0x1f8>
 800236c:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8002468 <HAL_GPIO_Init+0x234>
 8002370:	4560      	cmp	r0, ip
 8002372:	d061      	beq.n	8002438 <HAL_GPIO_Init+0x204>
 8002374:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 800246c <HAL_GPIO_Init+0x238>
 8002378:	4560      	cmp	r0, ip
 800237a:	bf0c      	ite	eq
 800237c:	f04f 0c09 	moveq.w	ip, #9
 8002380:	f04f 0c0a 	movne.w	ip, #10
 8002384:	fa0c f309 	lsl.w	r3, ip, r9
 8002388:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 800238a:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 800238c:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 800238e:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002392:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 8002394:	bf4c      	ite	mi
 8002396:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8002398:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239a:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800239c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 80023a0:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 80023a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 80023a8:	bf4c      	ite	mi
 80023aa:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80023ac:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 80023ae:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 80023b2:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b4:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80023b6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 80023ba:	bf4c      	ite	mi
 80023bc:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80023be:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c0:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80023c2:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 80023c4:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 80023c6:	bf54      	ite	pl
 80023c8:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 80023cc:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 80023d4:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023d6:	fa31 f306 	lsrs.w	r3, r1, r6
 80023da:	f47f af36 	bne.w	800224a <HAL_GPIO_Init+0x16>
  }
}
 80023de:	b003      	add	sp, #12
 80023e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023e4:	f04f 0c02 	mov.w	ip, #2
 80023e8:	fa0c f309 	lsl.w	r3, ip, r9
 80023ec:	431c      	orrs	r4, r3
 80023ee:	e7cc      	b.n	800238a <HAL_GPIO_Init+0x156>
 80023f0:	f04f 0c01 	mov.w	ip, #1
 80023f4:	fa0c f309 	lsl.w	r3, ip, r9
 80023f8:	431c      	orrs	r4, r3
 80023fa:	e7c6      	b.n	800238a <HAL_GPIO_Init+0x156>
 80023fc:	f04f 0c05 	mov.w	ip, #5
 8002400:	fa0c f309 	lsl.w	r3, ip, r9
 8002404:	431c      	orrs	r4, r3
 8002406:	e7c0      	b.n	800238a <HAL_GPIO_Init+0x156>
 8002408:	f04f 0c03 	mov.w	ip, #3
 800240c:	fa0c f309 	lsl.w	r3, ip, r9
 8002410:	431c      	orrs	r4, r3
 8002412:	e7ba      	b.n	800238a <HAL_GPIO_Init+0x156>
 8002414:	f04f 0c04 	mov.w	ip, #4
 8002418:	fa0c f309 	lsl.w	r3, ip, r9
 800241c:	431c      	orrs	r4, r3
 800241e:	e7b4      	b.n	800238a <HAL_GPIO_Init+0x156>
 8002420:	f04f 0c06 	mov.w	ip, #6
 8002424:	fa0c f309 	lsl.w	r3, ip, r9
 8002428:	431c      	orrs	r4, r3
 800242a:	e7ae      	b.n	800238a <HAL_GPIO_Init+0x156>
 800242c:	f04f 0c07 	mov.w	ip, #7
 8002430:	fa0c f309 	lsl.w	r3, ip, r9
 8002434:	431c      	orrs	r4, r3
 8002436:	e7a8      	b.n	800238a <HAL_GPIO_Init+0x156>
 8002438:	f04f 0c08 	mov.w	ip, #8
 800243c:	fa0c f309 	lsl.w	r3, ip, r9
 8002440:	431c      	orrs	r4, r3
 8002442:	e7a2      	b.n	800238a <HAL_GPIO_Init+0x156>
 8002444:	58024400 	.word	0x58024400
 8002448:	58000400 	.word	0x58000400
 800244c:	58020800 	.word	0x58020800
 8002450:	58020c00 	.word	0x58020c00
 8002454:	58021000 	.word	0x58021000
 8002458:	58021400 	.word	0x58021400
 800245c:	58000080 	.word	0x58000080
 8002460:	58021800 	.word	0x58021800
 8002464:	58021c00 	.word	0x58021c00
 8002468:	58022000 	.word	0x58022000
 800246c:	58022400 	.word	0x58022400

08002470 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002470:	b902      	cbnz	r2, 8002474 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002472:	0409      	lsls	r1, r1, #16
 8002474:	6181      	str	r1, [r0, #24]
  }
}
 8002476:	4770      	bx	lr

08002478 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_HSEM_FastTake+0x14>)
 800247a:	3020      	adds	r0, #32
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <HAL_HSEM_FastTake+0x18>)
 800247e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8002482:	1ac0      	subs	r0, r0, r3
 8002484:	bf18      	it	ne
 8002486:	2001      	movne	r0, #1
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	58026400 	.word	0x58026400
 8002490:	80000300 	.word	0x80000300

08002494 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002494:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8002498:	4b01      	ldr	r3, [pc, #4]	; (80024a0 <HAL_HSEM_Release+0xc>)
 800249a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800249e:	4770      	bx	lr
 80024a0:	58026400 	.word	0x58026400

080024a4 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_PWREx_ConfigSupply+0x7c>)
 80024a6:	68d3      	ldr	r3, [r2, #12]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d006      	beq.n	80024be <HAL_PWREx_ConfigSupply+0x1a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024b0:	68d3      	ldr	r3, [r2, #12]
 80024b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024b6:	1a18      	subs	r0, r3, r0
 80024b8:	bf18      	it	ne
 80024ba:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80024bc:	4770      	bx	lr
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024be:	68d3      	ldr	r3, [r2, #12]
 80024c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c4:	4303      	orrs	r3, r0
{
 80024c6:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024c8:	60d3      	str	r3, [r2, #12]
 80024ca:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024cc:	4615      	mov	r5, r2
  tickstart = HAL_GetTick ();
 80024ce:	f7ff fd55 	bl	8001f7c <HAL_GetTick>
 80024d2:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024d4:	e005      	b.n	80024e2 <HAL_PWREx_ConfigSupply+0x3e>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024d6:	f7ff fd51 	bl	8001f7c <HAL_GetTick>
 80024da:	1b80      	subs	r0, r0, r6
 80024dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80024e0:	d81b      	bhi.n	800251a <HAL_PWREx_ConfigSupply+0x76>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024e2:	686b      	ldr	r3, [r5, #4]
 80024e4:	049a      	lsls	r2, r3, #18
 80024e6:	d5f6      	bpl.n	80024d6 <HAL_PWREx_ConfigSupply+0x32>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024e8:	f1a4 031d 	sub.w	r3, r4, #29
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d905      	bls.n	80024fc <HAL_PWREx_ConfigSupply+0x58>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 80024f0:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024f4:	2801      	cmp	r0, #1
 80024f6:	d901      	bls.n	80024fc <HAL_PWREx_ConfigSupply+0x58>
  return HAL_OK;
 80024f8:	2000      	movs	r0, #0
}
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 80024fc:	f7ff fd3e 	bl	8001f7c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002500:	4c07      	ldr	r4, [pc, #28]	; (8002520 <HAL_PWREx_ConfigSupply+0x7c>)
    tickstart = HAL_GetTick ();
 8002502:	4605      	mov	r5, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002504:	e005      	b.n	8002512 <HAL_PWREx_ConfigSupply+0x6e>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002506:	f7ff fd39 	bl	8001f7c <HAL_GetTick>
 800250a:	1b40      	subs	r0, r0, r5
 800250c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002510:	d803      	bhi.n	800251a <HAL_PWREx_ConfigSupply+0x76>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002512:	68e3      	ldr	r3, [r4, #12]
 8002514:	03db      	lsls	r3, r3, #15
 8002516:	d5f6      	bpl.n	8002506 <HAL_PWREx_ConfigSupply+0x62>
 8002518:	e7ee      	b.n	80024f8 <HAL_PWREx_ConfigSupply+0x54>
      return HAL_ERROR;
 800251a:	2001      	movs	r0, #1
}
 800251c:	bd70      	pop	{r4, r5, r6, pc}
 800251e:	bf00      	nop
 8002520:	58024800 	.word	0x58024800

08002524 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002524:	2800      	cmp	r0, #0
 8002526:	f000 819d 	beq.w	8002864 <HAL_RCC_OscConfig+0x340>
{
 800252a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252c:	6803      	ldr	r3, [r0, #0]
 800252e:	4604      	mov	r4, r0
 8002530:	07d9      	lsls	r1, r3, #31
 8002532:	d533      	bpl.n	800259c <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002534:	49a7      	ldr	r1, [pc, #668]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 8002536:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002538:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800253e:	2a10      	cmp	r2, #16
 8002540:	f000 8112 	beq.w	8002768 <HAL_RCC_OscConfig+0x244>
 8002544:	2a18      	cmp	r2, #24
 8002546:	f000 810a 	beq.w	800275e <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	6863      	ldr	r3, [r4, #4]
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d010      	beq.n	8002574 <HAL_RCC_OscConfig+0x50>
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 816f 	beq.w	8002836 <HAL_RCC_OscConfig+0x312>
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	4b9d      	ldr	r3, [pc, #628]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f000 81e4 	beq.w	800292c <HAL_RCC_OscConfig+0x408>
 8002564:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e004      	b.n	800257e <HAL_RCC_OscConfig+0x5a>
 8002574:	4a97      	ldr	r2, [pc, #604]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 8002576:	6813      	ldr	r3, [r2, #0]
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff fcfd 	bl	8001f7c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002582:	4d94      	ldr	r5, [pc, #592]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8002584:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002586:	e005      	b.n	8002594 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fcf8 	bl	8001f7c <HAL_GetTick>
 800258c:	1b80      	subs	r0, r0, r6
 800258e:	2864      	cmp	r0, #100	; 0x64
 8002590:	f200 814f 	bhi.w	8002832 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	039f      	lsls	r7, r3, #14
 8002598:	d5f6      	bpl.n	8002588 <HAL_RCC_OscConfig+0x64>
 800259a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259c:	0799      	lsls	r1, r3, #30
 800259e:	f100 808e 	bmi.w	80026be <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025a2:	06d9      	lsls	r1, r3, #27
 80025a4:	d534      	bpl.n	8002610 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a6:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 80025a8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025aa:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	f000 80e9 	beq.w	8002788 <HAL_RCC_OscConfig+0x264>
 80025b6:	2b18      	cmp	r3, #24
 80025b8:	f000 80e1 	beq.w	800277e <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025bc:	69e3      	ldr	r3, [r4, #28]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8178 	beq.w	80028b4 <HAL_RCC_OscConfig+0x390>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025c4:	4b83      	ldr	r3, [pc, #524]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 80025c6:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025c8:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 80025ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025d0:	f7ff fcd4 	bl	8001f7c <HAL_GetTick>
 80025d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025d6:	e005      	b.n	80025e4 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025d8:	f7ff fcd0 	bl	8001f7c <HAL_GetTick>
 80025dc:	1b80      	subs	r0, r0, r6
 80025de:	2802      	cmp	r0, #2
 80025e0:	f200 8127 	bhi.w	8002832 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025e4:	682b      	ldr	r3, [r5, #0]
 80025e6:	05db      	lsls	r3, r3, #23
 80025e8:	d5f6      	bpl.n	80025d8 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ea:	f7ff fcdf 	bl	8001fac <HAL_GetREVID>
 80025ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80025f2:	4298      	cmp	r0, r3
 80025f4:	f200 825d 	bhi.w	8002ab2 <HAL_RCC_OscConfig+0x58e>
 80025f8:	6a22      	ldr	r2, [r4, #32]
 80025fa:	686b      	ldr	r3, [r5, #4]
 80025fc:	2a20      	cmp	r2, #32
 80025fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002602:	bf0c      	ite	eq
 8002604:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002608:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800260c:	606b      	str	r3, [r5, #4]
 800260e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002610:	071d      	lsls	r5, r3, #28
 8002612:	d517      	bpl.n	8002644 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002614:	6963      	ldr	r3, [r4, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8126 	beq.w	8002868 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261c:	4b6d      	ldr	r3, [pc, #436]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 800261e:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002620:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002628:	f7ff fca8 	bl	8001f7c <HAL_GetTick>
 800262c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800262e:	e005      	b.n	800263c <HAL_RCC_OscConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002630:	f7ff fca4 	bl	8001f7c <HAL_GetTick>
 8002634:	1b80      	subs	r0, r0, r6
 8002636:	2802      	cmp	r0, #2
 8002638:	f200 80fb 	bhi.w	8002832 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800263c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800263e:	0798      	lsls	r0, r3, #30
 8002640:	d5f6      	bpl.n	8002630 <HAL_RCC_OscConfig+0x10c>
 8002642:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002644:	069a      	lsls	r2, r3, #26
 8002646:	d517      	bpl.n	8002678 <HAL_RCC_OscConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002648:	69a3      	ldr	r3, [r4, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 811f 	beq.w	800288e <HAL_RCC_OscConfig+0x36a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002650:	4b60      	ldr	r3, [pc, #384]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 8002652:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002654:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8002656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800265a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800265c:	f7ff fc8e 	bl	8001f7c <HAL_GetTick>
 8002660:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002662:	e005      	b.n	8002670 <HAL_RCC_OscConfig+0x14c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002664:	f7ff fc8a 	bl	8001f7c <HAL_GetTick>
 8002668:	1b80      	subs	r0, r0, r6
 800266a:	2802      	cmp	r0, #2
 800266c:	f200 80e1 	bhi.w	8002832 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	049f      	lsls	r7, r3, #18
 8002674:	d5f6      	bpl.n	8002664 <HAL_RCC_OscConfig+0x140>
 8002676:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	0759      	lsls	r1, r3, #29
 800267a:	f100 80a0 	bmi.w	80027be <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002680:	b1d8      	cbz	r0, 80026ba <HAL_RCC_OscConfig+0x196>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002682:	4b54      	ldr	r3, [pc, #336]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800268a:	2a18      	cmp	r2, #24
 800268c:	f000 81c9 	beq.w	8002a22 <HAL_RCC_OscConfig+0x4fe>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	f000 815b 	beq.w	800294e <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800269c:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 800269e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026a0:	f7ff fc6c 	bl	8001f7c <HAL_GetTick>
 80026a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026a6:	e005      	b.n	80026b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a8:	f7ff fc68 	bl	8001f7c <HAL_GetTick>
 80026ac:	1b40      	subs	r0, r0, r5
 80026ae:	2802      	cmp	r0, #2
 80026b0:	f200 80bf 	bhi.w	8002832 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	019b      	lsls	r3, r3, #6
 80026b8:	d4f6      	bmi.n	80026a8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80026ba:	2000      	movs	r0, #0
}
 80026bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026be:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 80026c0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026c4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80026c8:	d02f      	beq.n	800272a <HAL_RCC_OscConfig+0x206>
 80026ca:	2b18      	cmp	r3, #24
 80026cc:	d02b      	beq.n	8002726 <HAL_RCC_OscConfig+0x202>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ce:	68e2      	ldr	r2, [r4, #12]
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	f000 8103 	beq.w	80028dc <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026d6:	493f      	ldr	r1, [pc, #252]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 80026d8:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026da:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026dc:	f023 0319 	bic.w	r3, r3, #25
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80026e4:	f7ff fc4a 	bl	8001f7c <HAL_GetTick>
 80026e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ea:	e005      	b.n	80026f8 <HAL_RCC_OscConfig+0x1d4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ec:	f7ff fc46 	bl	8001f7c <HAL_GetTick>
 80026f0:	1b80      	subs	r0, r0, r6
 80026f2:	2802      	cmp	r0, #2
 80026f4:	f200 809d 	bhi.w	8002832 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	075f      	lsls	r7, r3, #29
 80026fc:	d5f6      	bpl.n	80026ec <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	f7ff fc55 	bl	8001fac <HAL_GetREVID>
 8002702:	f241 0303 	movw	r3, #4099	; 0x1003
 8002706:	4298      	cmp	r0, r3
 8002708:	f200 81e2 	bhi.w	8002ad0 <HAL_RCC_OscConfig+0x5ac>
 800270c:	6922      	ldr	r2, [r4, #16]
 800270e:	686b      	ldr	r3, [r5, #4]
 8002710:	2a40      	cmp	r2, #64	; 0x40
 8002712:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002716:	bf0c      	ite	eq
 8002718:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800271c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002720:	606b      	str	r3, [r5, #4]
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	e73d      	b.n	80025a2 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002726:	0792      	lsls	r2, r2, #30
 8002728:	d1d1      	bne.n	80026ce <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	075b      	lsls	r3, r3, #29
 8002730:	d501      	bpl.n	8002736 <HAL_RCC_OscConfig+0x212>
 8002732:	68e3      	ldr	r3, [r4, #12]
 8002734:	b30b      	cbz	r3, 800277a <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	f7ff fc39 	bl	8001fac <HAL_GetREVID>
 800273a:	f241 0303 	movw	r3, #4099	; 0x1003
 800273e:	4298      	cmp	r0, r3
 8002740:	f200 80e0 	bhi.w	8002904 <HAL_RCC_OscConfig+0x3e0>
 8002744:	6922      	ldr	r2, [r4, #16]
 8002746:	2a40      	cmp	r2, #64	; 0x40
 8002748:	f000 80f8 	beq.w	800293c <HAL_RCC_OscConfig+0x418>
 800274c:	4921      	ldr	r1, [pc, #132]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 800274e:	684b      	ldr	r3, [r1, #4]
 8002750:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002754:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002758:	604b      	str	r3, [r1, #4]
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	e721      	b.n	80025a2 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800275e:	f001 0103 	and.w	r1, r1, #3
 8002762:	2902      	cmp	r1, #2
 8002764:	f47f aef1 	bne.w	800254a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	0392      	lsls	r2, r2, #14
 800276e:	f57f af15 	bpl.w	800259c <HAL_RCC_OscConfig+0x78>
 8002772:	6862      	ldr	r2, [r4, #4]
 8002774:	2a00      	cmp	r2, #0
 8002776:	f47f af11 	bne.w	800259c <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 800277a:	2001      	movs	r0, #1
}
 800277c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	2a01      	cmp	r2, #1
 8002784:	f47f af1a 	bne.w	80025bc <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	05da      	lsls	r2, r3, #23
 800278e:	d502      	bpl.n	8002796 <HAL_RCC_OscConfig+0x272>
 8002790:	69e3      	ldr	r3, [r4, #28]
 8002792:	2b80      	cmp	r3, #128	; 0x80
 8002794:	d1f1      	bne.n	800277a <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002796:	f7ff fc09 	bl	8001fac <HAL_GetREVID>
 800279a:	f241 0303 	movw	r3, #4099	; 0x1003
 800279e:	4298      	cmp	r0, r3
 80027a0:	f200 80ba 	bhi.w	8002918 <HAL_RCC_OscConfig+0x3f4>
 80027a4:	6a22      	ldr	r2, [r4, #32]
 80027a6:	2a20      	cmp	r2, #32
 80027a8:	f000 81a1 	beq.w	8002aee <HAL_RCC_OscConfig+0x5ca>
 80027ac:	4909      	ldr	r1, [pc, #36]	; (80027d4 <HAL_RCC_OscConfig+0x2b0>)
 80027ae:	684b      	ldr	r3, [r1, #4]
 80027b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027b4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80027b8:	604b      	str	r3, [r1, #4]
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	e728      	b.n	8002610 <HAL_RCC_OscConfig+0xec>
    PWR->CR1 |= PWR_CR1_DBP;
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_OscConfig+0x2b4>)
 80027c0:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c2:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80027c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80027ca:	f7ff fbd7 	bl	8001f7c <HAL_GetTick>
 80027ce:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027d0:	e009      	b.n	80027e6 <HAL_RCC_OscConfig+0x2c2>
 80027d2:	bf00      	nop
 80027d4:	58024400 	.word	0x58024400
 80027d8:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027dc:	f7ff fbce 	bl	8001f7c <HAL_GetTick>
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	2864      	cmp	r0, #100	; 0x64
 80027e4:	d825      	bhi.n	8002832 <HAL_RCC_OscConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	05da      	lsls	r2, r3, #23
 80027ea:	d5f7      	bpl.n	80027dc <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	68a3      	ldr	r3, [r4, #8]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	f000 8177 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x5be>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8142 	beq.w	8002a7e <HAL_RCC_OscConfig+0x55a>
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	4bb1      	ldr	r3, [pc, #708]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
 80027fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002800:	f000 817e 	beq.w	8002b00 <HAL_RCC_OscConfig+0x5dc>
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	671a      	str	r2, [r3, #112]	; 0x70
 800280a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800280c:	f022 0204 	bic.w	r2, r2, #4
 8002810:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002812:	f7ff fbb3 	bl	8001f7c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002816:	4dab      	ldr	r5, [pc, #684]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
      tickstart = HAL_GetTick();
 8002818:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281e:	e004      	b.n	800282a <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7ff fbac 	bl	8001f7c <HAL_GetTick>
 8002824:	1bc0      	subs	r0, r0, r7
 8002826:	42b0      	cmp	r0, r6
 8002828:	d803      	bhi.n	8002832 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800282a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800282c:	079b      	lsls	r3, r3, #30
 800282e:	d5f7      	bpl.n	8002820 <HAL_RCC_OscConfig+0x2fc>
 8002830:	e725      	b.n	800267e <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8002832:	2003      	movs	r0, #3
}
 8002834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	4ba3      	ldr	r3, [pc, #652]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
 8002838:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800283a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002848:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800284a:	f7ff fb97 	bl	8001f7c <HAL_GetTick>
 800284e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002850:	e004      	b.n	800285c <HAL_RCC_OscConfig+0x338>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002852:	f7ff fb93 	bl	8001f7c <HAL_GetTick>
 8002856:	1b80      	subs	r0, r0, r6
 8002858:	2864      	cmp	r0, #100	; 0x64
 800285a:	d8ea      	bhi.n	8002832 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	0398      	lsls	r0, r3, #14
 8002860:	d4f7      	bmi.n	8002852 <HAL_RCC_OscConfig+0x32e>
 8002862:	e69a      	b.n	800259a <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 8002864:	2001      	movs	r0, #1
}
 8002866:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8002868:	4b96      	ldr	r3, [pc, #600]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
 800286a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800286c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002874:	f7ff fb82 	bl	8001f7c <HAL_GetTick>
 8002878:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800287a:	e004      	b.n	8002886 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287c:	f7ff fb7e 	bl	8001f7c <HAL_GetTick>
 8002880:	1b80      	subs	r0, r0, r6
 8002882:	2802      	cmp	r0, #2
 8002884:	d8d5      	bhi.n	8002832 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002886:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002888:	0799      	lsls	r1, r3, #30
 800288a:	d4f7      	bmi.n	800287c <HAL_RCC_OscConfig+0x358>
 800288c:	e6d9      	b.n	8002642 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSI48_DISABLE();
 800288e:	4b8d      	ldr	r3, [pc, #564]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
 8002890:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002892:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8002894:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002898:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800289a:	f7ff fb6f 	bl	8001f7c <HAL_GetTick>
 800289e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028a0:	e004      	b.n	80028ac <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028a2:	f7ff fb6b 	bl	8001f7c <HAL_GetTick>
 80028a6:	1b80      	subs	r0, r0, r6
 80028a8:	2802      	cmp	r0, #2
 80028aa:	d8c2      	bhi.n	8002832 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	0498      	lsls	r0, r3, #18
 80028b0:	d4f7      	bmi.n	80028a2 <HAL_RCC_OscConfig+0x37e>
 80028b2:	e6e0      	b.n	8002676 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_DISABLE();
 80028b4:	4b83      	ldr	r3, [pc, #524]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
 80028b6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028b8:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 80028ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028c0:	f7ff fb5c 	bl	8001f7c <HAL_GetTick>
 80028c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028c6:	e004      	b.n	80028d2 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028c8:	f7ff fb58 	bl	8001f7c <HAL_GetTick>
 80028cc:	1b80      	subs	r0, r0, r6
 80028ce:	2802      	cmp	r0, #2
 80028d0:	d8af      	bhi.n	8002832 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028d2:	682b      	ldr	r3, [r5, #0]
 80028d4:	05df      	lsls	r7, r3, #23
 80028d6:	d4f7      	bmi.n	80028c8 <HAL_RCC_OscConfig+0x3a4>
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	e699      	b.n	8002610 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 80028dc:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
 80028de:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028e0:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028e8:	f7ff fb48 	bl	8001f7c <HAL_GetTick>
 80028ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028ee:	e004      	b.n	80028fa <HAL_RCC_OscConfig+0x3d6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f0:	f7ff fb44 	bl	8001f7c <HAL_GetTick>
 80028f4:	1b80      	subs	r0, r0, r6
 80028f6:	2802      	cmp	r0, #2
 80028f8:	d89b      	bhi.n	8002832 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028fa:	682b      	ldr	r3, [r5, #0]
 80028fc:	0758      	lsls	r0, r3, #29
 80028fe:	d4f7      	bmi.n	80028f0 <HAL_RCC_OscConfig+0x3cc>
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	e64e      	b.n	80025a2 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4a6f      	ldr	r2, [pc, #444]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
 8002906:	6921      	ldr	r1, [r4, #16]
 8002908:	6853      	ldr	r3, [r2, #4]
 800290a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800290e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002912:	6053      	str	r3, [r2, #4]
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	e644      	b.n	80025a2 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002918:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
 800291a:	6a21      	ldr	r1, [r4, #32]
 800291c:	68d3      	ldr	r3, [r2, #12]
 800291e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002922:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002926:	60d3      	str	r3, [r2, #12]
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	e671      	b.n	8002610 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e620      	b.n	800257e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4a61      	ldr	r2, [pc, #388]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
 800293e:	6853      	ldr	r3, [r2, #4]
 8002940:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002948:	6053      	str	r3, [r2, #4]
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	e629      	b.n	80025a2 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_PLL_DISABLE();
 800294e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002952:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8002954:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002956:	f7ff fb11 	bl	8001f7c <HAL_GetTick>
 800295a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800295c:	e005      	b.n	800296a <HAL_RCC_OscConfig+0x446>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295e:	f7ff fb0d 	bl	8001f7c <HAL_GetTick>
 8002962:	1b80      	subs	r0, r0, r6
 8002964:	2802      	cmp	r0, #2
 8002966:	f63f af64 	bhi.w	8002832 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800296a:	682b      	ldr	r3, [r5, #0]
 800296c:	0199      	lsls	r1, r3, #6
 800296e:	d4f6      	bmi.n	800295e <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002970:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002972:	4b55      	ldr	r3, [pc, #340]	; (8002ac8 <HAL_RCC_OscConfig+0x5a4>)
 8002974:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002976:	4013      	ands	r3, r2
 8002978:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800297a:	4954      	ldr	r1, [pc, #336]	; (8002acc <HAL_RCC_OscConfig+0x5a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800297e:	4e51      	ldr	r6, [pc, #324]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002980:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002984:	62ab      	str	r3, [r5, #40]	; 0x28
 8002986:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8002988:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800298c:	3f01      	subs	r7, #1
 800298e:	1e50      	subs	r0, r2, #1
 8002990:	3b01      	subs	r3, #1
 8002992:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002994:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8002998:	025b      	lsls	r3, r3, #9
 800299a:	0400      	lsls	r0, r0, #16
 800299c:	3a01      	subs	r2, #1
 800299e:	b29b      	uxth	r3, r3
 80029a0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80029a4:	0612      	lsls	r2, r2, #24
 80029a6:	4303      	orrs	r3, r0
 80029a8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80029ac:	433b      	orrs	r3, r7
 80029ae:	4313      	orrs	r3, r2
 80029b0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80029b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80029bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029be:	4011      	ands	r1, r2
 80029c0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80029c4:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029ca:	f023 030c 	bic.w	r3, r3, #12
 80029ce:	4313      	orrs	r3, r2
 80029d0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80029d6:	f023 0302 	bic.w	r3, r3, #2
 80029da:	4313      	orrs	r3, r2
 80029dc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ec:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80029f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80029fe:	682b      	ldr	r3, [r5, #0]
 8002a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a06:	f7ff fab9 	bl	8001f7c <HAL_GetTick>
 8002a0a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a0c:	e005      	b.n	8002a1a <HAL_RCC_OscConfig+0x4f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff fab5 	bl	8001f7c <HAL_GetTick>
 8002a12:	1b00      	subs	r0, r0, r4
 8002a14:	2802      	cmp	r0, #2
 8002a16:	f63f af0c 	bhi.w	8002832 <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a1a:	6833      	ldr	r3, [r6, #0]
 8002a1c:	019a      	lsls	r2, r3, #6
 8002a1e:	d5f6      	bpl.n	8002a0e <HAL_RCC_OscConfig+0x4ea>
 8002a20:	e64b      	b.n	80026ba <HAL_RCC_OscConfig+0x196>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a22:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a26:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a28:	f43f ae48 	beq.w	80026bc <HAL_RCC_OscConfig+0x198>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a30:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a32:	428b      	cmp	r3, r1
 8002a34:	f47f aea1 	bne.w	800277a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a38:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	f47f ae9b 	bne.w	800277a <HAL_RCC_OscConfig+0x256>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a46:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8002a4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f47f ae94 	bne.w	800277a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a54:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8002a58:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	f47f ae8d 	bne.w	800277a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a62:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8002a66:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f47f ae86 	bne.w	800277a <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a6e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a70:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8002a74:	3801      	subs	r0, #1
    return HAL_ERROR;
 8002a76:	1a28      	subs	r0, r5, r0
 8002a78:	bf18      	it	ne
 8002a7a:	2001      	movne	r0, #1
 8002a7c:	e61e      	b.n	80026bc <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_RCC_OscConfig+0x5a0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a86:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	671a      	str	r2, [r3, #112]	; 0x70
 8002a8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a90:	f022 0204 	bic.w	r2, r2, #4
 8002a94:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002a96:	f7ff fa71 	bl	8001f7c <HAL_GetTick>
 8002a9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a9c:	e005      	b.n	8002aaa <HAL_RCC_OscConfig+0x586>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7ff fa6d 	bl	8001f7c <HAL_GetTick>
 8002aa2:	1b80      	subs	r0, r0, r6
 8002aa4:	42b8      	cmp	r0, r7
 8002aa6:	f63f aec4 	bhi.w	8002832 <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aaa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002aac:	0798      	lsls	r0, r3, #30
 8002aae:	d4f6      	bmi.n	8002a9e <HAL_RCC_OscConfig+0x57a>
 8002ab0:	e5e5      	b.n	800267e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ab2:	68eb      	ldr	r3, [r5, #12]
 8002ab4:	6a22      	ldr	r2, [r4, #32]
 8002ab6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002aba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002abe:	60eb      	str	r3, [r5, #12]
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	e5a5      	b.n	8002610 <HAL_RCC_OscConfig+0xec>
 8002ac4:	58024400 	.word	0x58024400
 8002ac8:	fffffc0c 	.word	0xfffffc0c
 8002acc:	ffff0007 	.word	0xffff0007
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	686b      	ldr	r3, [r5, #4]
 8002ad2:	6922      	ldr	r2, [r4, #16]
 8002ad4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ad8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002adc:	606b      	str	r3, [r5, #4]
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	e55f      	b.n	80025a2 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <HAL_RCC_OscConfig+0x5ec>)
 8002ae4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e691      	b.n	8002812 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_RCC_OscConfig+0x5ec>)
 8002af0:	6853      	ldr	r3, [r2, #4]
 8002af2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002afa:	6053      	str	r3, [r2, #4]
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	e587      	b.n	8002610 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b00:	f042 0204 	orr.w	r2, r2, #4
 8002b04:	671a      	str	r2, [r3, #112]	; 0x70
 8002b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	671a      	str	r2, [r3, #112]	; 0x70
 8002b0e:	e680      	b.n	8002812 <HAL_RCC_OscConfig+0x2ee>
 8002b10:	58024400 	.word	0x58024400

08002b14 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b14:	4a3e      	ldr	r2, [pc, #248]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b16:	6913      	ldr	r3, [r2, #16]
 8002b18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d04f      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xac>
 8002b20:	2b18      	cmp	r3, #24
 8002b22:	d00b      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x28>
 8002b24:	b10b      	cbz	r3, 8002b2a <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b26:	483b      	ldr	r0, [pc, #236]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b28:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b2a:	6813      	ldr	r3, [r2, #0]
 8002b2c:	0699      	lsls	r1, r3, #26
 8002b2e:	d549      	bpl.n	8002bc4 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b30:	6813      	ldr	r3, [r2, #0]
 8002b32:	4839      	ldr	r0, [pc, #228]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b34:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002b38:	40d8      	lsrs	r0, r3
 8002b3a:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b3e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b40:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b42:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8002b46:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b48:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8002b4a:	b3b0      	cbz	r0, 8002bba <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b4c:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b50:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b54:	f001 0103 	and.w	r1, r1, #3
 8002b58:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b5c:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8002b60:	2901      	cmp	r1, #1
 8002b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b66:	ee07 3a10 	vmov	s14, r3
 8002b6a:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 8002b6e:	d002      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x62>
 8002b70:	d32d      	bcc.n	8002bce <HAL_RCC_GetSysClockFreq+0xba>
 8002b72:	2902      	cmp	r1, #2
 8002b74:	d028      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b76:	eddf 5a29 	vldr	s11, [pc, #164]	; 8002c1c <HAL_RCC_GetSysClockFreq+0x108>
 8002b7a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8002b7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b94:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002b98:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002ba4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb6:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bbe:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8002bc0:	4817      	ldr	r0, [pc, #92]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bc2:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002bc4:	4814      	ldr	r0, [pc, #80]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8002bc6:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bc8:	eddf 5a16 	vldr	s11, [pc, #88]	; 8002c24 <HAL_RCC_GetSysClockFreq+0x110>
 8002bcc:	e7d5      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bce:	6813      	ldr	r3, [r2, #0]
 8002bd0:	069b      	lsls	r3, r3, #26
 8002bd2:	d51a      	bpl.n	8002c0a <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bd4:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bd6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bda:	490f      	ldr	r1, [pc, #60]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bdc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002be0:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002be2:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be8:	ee06 1a90 	vmov	s13, r1
 8002bec:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8002bf0:	ee06 3a90 	vmov	s13, r3
 8002bf4:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8002bf8:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8002bfc:	ee36 7a07 	vadd.f32	s14, s12, s14
 8002c00:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002c04:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002c08:	e7c8      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c0a:	eddf 5a07 	vldr	s11, [pc, #28]	; 8002c28 <HAL_RCC_GetSysClockFreq+0x114>
 8002c0e:	e7b4      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x66>
 8002c10:	58024400 	.word	0x58024400
 8002c14:	003d0900 	.word	0x003d0900
 8002c18:	03d09000 	.word	0x03d09000
 8002c1c:	4a742400 	.word	0x4a742400
 8002c20:	02625a00 	.word	0x02625a00
 8002c24:	4c189680 	.word	0x4c189680
 8002c28:	4c742400 	.word	0x4c742400

08002c2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002c2c:	b178      	cbz	r0, 8002c4e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2e:	4a8e      	ldr	r2, [pc, #568]	; (8002e68 <HAL_RCC_ClockConfig+0x23c>)
 8002c30:	6813      	ldr	r3, [r2, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	428b      	cmp	r3, r1
 8002c38:	d20b      	bcs.n	8002c52 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	f023 030f 	bic.w	r3, r3, #15
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c44:	6813      	ldr	r3, [r2, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	428b      	cmp	r3, r1
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8002c4e:	2001      	movs	r0, #1
}
 8002c50:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c52:	6803      	ldr	r3, [r0, #0]
{
 8002c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c58:	075d      	lsls	r5, r3, #29
 8002c5a:	d50b      	bpl.n	8002c74 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c5c:	4c83      	ldr	r4, [pc, #524]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002c5e:	6905      	ldr	r5, [r0, #16]
 8002c60:	69a2      	ldr	r2, [r4, #24]
 8002c62:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002c66:	4295      	cmp	r5, r2
 8002c68:	d904      	bls.n	8002c74 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c6a:	69a2      	ldr	r2, [r4, #24]
 8002c6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c70:	432a      	orrs	r2, r5
 8002c72:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	071c      	lsls	r4, r3, #28
 8002c76:	d50b      	bpl.n	8002c90 <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c78:	4c7c      	ldr	r4, [pc, #496]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002c7a:	6945      	ldr	r5, [r0, #20]
 8002c7c:	69e2      	ldr	r2, [r4, #28]
 8002c7e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002c82:	4295      	cmp	r5, r2
 8002c84:	d904      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c86:	69e2      	ldr	r2, [r4, #28]
 8002c88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c8c:	432a      	orrs	r2, r5
 8002c8e:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	06da      	lsls	r2, r3, #27
 8002c92:	d50b      	bpl.n	8002cac <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c94:	4c75      	ldr	r4, [pc, #468]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002c96:	6985      	ldr	r5, [r0, #24]
 8002c98:	69e2      	ldr	r2, [r4, #28]
 8002c9a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002c9e:	4295      	cmp	r5, r2
 8002ca0:	d904      	bls.n	8002cac <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ca2:	69e2      	ldr	r2, [r4, #28]
 8002ca4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ca8:	432a      	orrs	r2, r5
 8002caa:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cac:	069f      	lsls	r7, r3, #26
 8002cae:	d50b      	bpl.n	8002cc8 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cb0:	4c6e      	ldr	r4, [pc, #440]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002cb2:	69c5      	ldr	r5, [r0, #28]
 8002cb4:	6a22      	ldr	r2, [r4, #32]
 8002cb6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002cba:	4295      	cmp	r5, r2
 8002cbc:	d904      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cbe:	6a22      	ldr	r2, [r4, #32]
 8002cc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cc4:	432a      	orrs	r2, r5
 8002cc6:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	079e      	lsls	r6, r3, #30
 8002cca:	4604      	mov	r4, r0
 8002ccc:	460d      	mov	r5, r1
 8002cce:	f003 0201 	and.w	r2, r3, #1
 8002cd2:	d55d      	bpl.n	8002d90 <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cd4:	4e65      	ldr	r6, [pc, #404]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002cd6:	68c0      	ldr	r0, [r0, #12]
 8002cd8:	69b1      	ldr	r1, [r6, #24]
 8002cda:	f001 010f 	and.w	r1, r1, #15
 8002cde:	4288      	cmp	r0, r1
 8002ce0:	d904      	bls.n	8002cec <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce2:	69b1      	ldr	r1, [r6, #24]
 8002ce4:	f021 010f 	bic.w	r1, r1, #15
 8002ce8:	4301      	orrs	r1, r0
 8002cea:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cec:	2a00      	cmp	r2, #0
 8002cee:	d031      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cf0:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002cf2:	68a1      	ldr	r1, [r4, #8]
 8002cf4:	6993      	ldr	r3, [r2, #24]
 8002cf6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfe:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d00:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	f000 80a2 	beq.w	8002e4c <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	f000 80a5 	beq.w	8002e58 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	f000 80a6 	beq.w	8002e60 <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d14:	0757      	lsls	r7, r2, #29
 8002d16:	d538      	bpl.n	8002d8a <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d18:	4954      	ldr	r1, [pc, #336]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d1e:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d20:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	f022 0207 	bic.w	r2, r2, #7
 8002d26:	4313      	orrs	r3, r2
 8002d28:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8002d2a:	f7ff f927 	bl	8001f7c <HAL_GetTick>
 8002d2e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d30:	e005      	b.n	8002d3e <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d32:	f7ff f923 	bl	8001f7c <HAL_GetTick>
 8002d36:	1bc0      	subs	r0, r0, r7
 8002d38:	4540      	cmp	r0, r8
 8002d3a:	f200 808b 	bhi.w	8002e54 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	6933      	ldr	r3, [r6, #16]
 8002d40:	6862      	ldr	r2, [r4, #4]
 8002d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d46:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002d4a:	d1f2      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	079e      	lsls	r6, r3, #30
 8002d50:	d50b      	bpl.n	8002d6a <HAL_RCC_ClockConfig+0x13e>
 8002d52:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d54:	4945      	ldr	r1, [pc, #276]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002d56:	698a      	ldr	r2, [r1, #24]
 8002d58:	f002 020f 	and.w	r2, r2, #15
 8002d5c:	4282      	cmp	r2, r0
 8002d5e:	d904      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	698a      	ldr	r2, [r1, #24]
 8002d62:	f022 020f 	bic.w	r2, r2, #15
 8002d66:	4310      	orrs	r0, r2
 8002d68:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6a:	493f      	ldr	r1, [pc, #252]	; (8002e68 <HAL_RCC_ClockConfig+0x23c>)
 8002d6c:	680a      	ldr	r2, [r1, #0]
 8002d6e:	f002 020f 	and.w	r2, r2, #15
 8002d72:	42aa      	cmp	r2, r5
 8002d74:	d914      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	680a      	ldr	r2, [r1, #0]
 8002d78:	f022 020f 	bic.w	r2, r2, #15
 8002d7c:	432a      	orrs	r2, r5
 8002d7e:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d80:	680a      	ldr	r2, [r1, #0]
 8002d82:	f002 020f 	and.w	r2, r2, #15
 8002d86:	42aa      	cmp	r2, r5
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 8002d8a:	2001      	movs	r0, #1
}
 8002d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	d1ad      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d94:	4934      	ldr	r1, [pc, #208]	; (8002e68 <HAL_RCC_ClockConfig+0x23c>)
 8002d96:	680a      	ldr	r2, [r1, #0]
 8002d98:	f002 020f 	and.w	r2, r2, #15
 8002d9c:	42aa      	cmp	r2, r5
 8002d9e:	d8ea      	bhi.n	8002d76 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002da0:	0758      	lsls	r0, r3, #29
 8002da2:	d50b      	bpl.n	8002dbc <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002da4:	4931      	ldr	r1, [pc, #196]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002da6:	6920      	ldr	r0, [r4, #16]
 8002da8:	698a      	ldr	r2, [r1, #24]
 8002daa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002dae:	4290      	cmp	r0, r2
 8002db0:	d204      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002db2:	698a      	ldr	r2, [r1, #24]
 8002db4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002db8:	4302      	orrs	r2, r0
 8002dba:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	0719      	lsls	r1, r3, #28
 8002dbe:	d50b      	bpl.n	8002dd8 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dc0:	492a      	ldr	r1, [pc, #168]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002dc2:	6960      	ldr	r0, [r4, #20]
 8002dc4:	69ca      	ldr	r2, [r1, #28]
 8002dc6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002dca:	4290      	cmp	r0, r2
 8002dcc:	d204      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dce:	69ca      	ldr	r2, [r1, #28]
 8002dd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dd4:	4302      	orrs	r2, r0
 8002dd6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	06da      	lsls	r2, r3, #27
 8002dda:	d50b      	bpl.n	8002df4 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ddc:	4923      	ldr	r1, [pc, #140]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002dde:	69a0      	ldr	r0, [r4, #24]
 8002de0:	69ca      	ldr	r2, [r1, #28]
 8002de2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002de6:	4290      	cmp	r0, r2
 8002de8:	d204      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dea:	69ca      	ldr	r2, [r1, #28]
 8002dec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002df0:	4302      	orrs	r2, r0
 8002df2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002df4:	069b      	lsls	r3, r3, #26
 8002df6:	d50b      	bpl.n	8002e10 <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002df8:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002dfa:	69e1      	ldr	r1, [r4, #28]
 8002dfc:	6a13      	ldr	r3, [r2, #32]
 8002dfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e02:	4299      	cmp	r1, r3
 8002e04:	d204      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e06:	6a13      	ldr	r3, [r2, #32]
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e10:	f7ff fe80 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <HAL_RCC_ClockConfig+0x240>)
 8002e16:	4916      	ldr	r1, [pc, #88]	; (8002e70 <HAL_RCC_ClockConfig+0x244>)
 8002e18:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e1a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e1c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8002e20:	4d14      	ldr	r5, [pc, #80]	; (8002e74 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e22:	f002 020f 	and.w	r2, r2, #15
 8002e26:	4c14      	ldr	r4, [pc, #80]	; (8002e78 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e2a:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e2c:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8002e30:	4912      	ldr	r1, [pc, #72]	; (8002e7c <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e32:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e36:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8002e3a:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e3c:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8002e40:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e42:	6022      	str	r2, [r4, #0]
}
 8002e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002e48:	f7ff b834 	b.w	8001eb4 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e4c:	0390      	lsls	r0, r2, #14
 8002e4e:	f53f af63 	bmi.w	8002d18 <HAL_RCC_ClockConfig+0xec>
 8002e52:	e79a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 8002e54:	2003      	movs	r0, #3
 8002e56:	e799      	b.n	8002d8c <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e58:	0191      	lsls	r1, r2, #6
 8002e5a:	f53f af5d 	bmi.w	8002d18 <HAL_RCC_ClockConfig+0xec>
 8002e5e:	e794      	b.n	8002d8a <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e60:	05d2      	lsls	r2, r2, #23
 8002e62:	f53f af59 	bmi.w	8002d18 <HAL_RCC_ClockConfig+0xec>
 8002e66:	e790      	b.n	8002d8a <HAL_RCC_ClockConfig+0x15e>
 8002e68:	52002000 	.word	0x52002000
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	08007ca0 	.word	0x08007ca0
 8002e74:	2400000c 	.word	0x2400000c
 8002e78:	24000004 	.word	0x24000004
 8002e7c:	24000000 	.word	0x24000000

08002e80 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e80:	4a49      	ldr	r2, [pc, #292]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x128>)
 8002e82:	6913      	ldr	r3, [r2, #16]
 8002e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e88:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8a:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8c:	d064      	beq.n	8002f58 <HAL_RCC_GetHCLKFreq+0xd8>
 8002e8e:	2b18      	cmp	r3, #24
 8002e90:	d022      	beq.n	8002ed8 <HAL_RCC_GetHCLKFreq+0x58>
 8002e92:	b1bb      	cbz	r3, 8002ec4 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8002e94:	4b45      	ldr	r3, [pc, #276]	; (8002fac <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e96:	4944      	ldr	r1, [pc, #272]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x128>)
 8002e98:	4845      	ldr	r0, [pc, #276]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x130>)
 8002e9a:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e9c:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e9e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ea2:	4c44      	ldr	r4, [pc, #272]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x134>)
 8002ea4:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ea8:	4d43      	ldr	r5, [pc, #268]	; (8002fb8 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002eaa:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eac:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002eae:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eb2:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002eb6:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eb8:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8002ebc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ebe:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002ec0:	bc30      	pop	{r4, r5}
 8002ec2:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	0699      	lsls	r1, r3, #26
 8002ec8:	d548      	bpl.n	8002f5c <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002eca:	6813      	ldr	r3, [r2, #0]
 8002ecc:	4a3b      	ldr	r2, [pc, #236]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x13c>)
 8002ece:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	e7de      	b.n	8002e96 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ed8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002eda:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002edc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ede:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ee2:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0d6      	beq.n	8002e96 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ee8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002eec:	f001 0101 	and.w	r1, r1, #1
 8002ef0:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ef4:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ef8:	fb01 f304 	mul.w	r3, r1, r4
 8002efc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8002f00:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8002f0a:	d002      	beq.n	8002f12 <HAL_RCC_GetHCLKFreq+0x92>
 8002f0c:	d32b      	bcc.n	8002f66 <HAL_RCC_GetHCLKFreq+0xe6>
 8002f0e:	2802      	cmp	r0, #2
 8002f10:	d026      	beq.n	8002f60 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f12:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002fc0 <HAL_RCC_GetHCLKFreq+0x140>
 8002f16:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8002f1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f20:	ee07 3a10 	vmov	s14, r3
 8002f24:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002f28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002f34:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x128>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002f40:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f42:	ee07 3a10 	vmov	s14, r3
 8002f46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f4e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002f52:	ee17 3a90 	vmov	r3, s15
 8002f56:	e79e      	b.n	8002e96 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_RCC_GetHCLKFreq+0x144>)
 8002f5a:	e79c      	b.n	8002e96 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x13c>)
 8002f5e:	e79a      	b.n	8002e96 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f60:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002fc8 <HAL_RCC_GetHCLKFreq+0x148>
 8002f64:	e7d7      	b.n	8002f16 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f66:	6813      	ldr	r3, [r2, #0]
 8002f68:	069b      	lsls	r3, r3, #26
 8002f6a:	d51a      	bpl.n	8002fa2 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f6c:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f6e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f72:	4912      	ldr	r1, [pc, #72]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x13c>)
 8002f74:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f78:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f7a:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f80:	ee07 1a10 	vmov	s14, r1
 8002f84:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002f88:	ee07 3a10 	vmov	s14, r3
 8002f8c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8002f90:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002f94:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002f98:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa0:	e7ca      	b.n	8002f38 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fa2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002fcc <HAL_RCC_GetHCLKFreq+0x14c>
 8002fa6:	e7b6      	b.n	8002f16 <HAL_RCC_GetHCLKFreq+0x96>
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	003d0900 	.word	0x003d0900
 8002fb0:	08007ca0 	.word	0x08007ca0
 8002fb4:	24000004 	.word	0x24000004
 8002fb8:	24000000 	.word	0x24000000
 8002fbc:	03d09000 	.word	0x03d09000
 8002fc0:	4a742400 	.word	0x4a742400
 8002fc4:	02625a00 	.word	0x02625a00
 8002fc8:	4c189680 	.word	0x4c189680
 8002fcc:	4c742400 	.word	0x4c742400

08002fd0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd0:	494d      	ldr	r1, [pc, #308]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x138>)
 8002fd2:	690b      	ldr	r3, [r1, #16]
 8002fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fd8:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fda:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	d06b      	beq.n	80030b6 <HAL_RCC_GetPCLK1Freq+0xe6>
 8002fde:	2b18      	cmp	r3, #24
 8002fe0:	d029      	beq.n	8003036 <HAL_RCC_GetPCLK1Freq+0x66>
 8002fe2:	b1fb      	cbz	r3, 8003024 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8002fe4:	4a49      	ldr	r2, [pc, #292]	; (800310c <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fe6:	4848      	ldr	r0, [pc, #288]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x138>)
 8002fe8:	4949      	ldr	r1, [pc, #292]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x140>)
 8002fea:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fec:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fee:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8002ff2:	4d48      	ldr	r5, [pc, #288]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ff4:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ff8:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ffc:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003000:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003004:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003006:	4c44      	ldr	r4, [pc, #272]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x148>)
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800300c:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800300e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003010:	69c2      	ldr	r2, [r0, #28]
 8003012:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003016:	5c88      	ldrb	r0, [r1, r2]
 8003018:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800301c:	bc30      	pop	{r4, r5}
 800301e:	fa23 f000 	lsr.w	r0, r3, r0
 8003022:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003024:	680b      	ldr	r3, [r1, #0]
 8003026:	069a      	lsls	r2, r3, #26
 8003028:	d547      	bpl.n	80030ba <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800302a:	680b      	ldr	r3, [r1, #0]
 800302c:	4a3b      	ldr	r2, [pc, #236]	; (800311c <HAL_RCC_GetPCLK1Freq+0x14c>)
 800302e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003032:	40da      	lsrs	r2, r3
 8003034:	e7d7      	b.n	8002fe6 <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003036:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003038:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800303a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800303c:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003040:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 8003042:	2a00      	cmp	r2, #0
 8003044:	d0cf      	beq.n	8002fe6 <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003046:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003052:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003056:	fb03 f304 	mul.w	r3, r3, r4
 800305a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800305e:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8003068:	d002      	beq.n	8003070 <HAL_RCC_GetPCLK1Freq+0xa0>
 800306a:	d32b      	bcc.n	80030c4 <HAL_RCC_GetPCLK1Freq+0xf4>
 800306c:	2802      	cmp	r0, #2
 800306e:	d026      	beq.n	80030be <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003070:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003120 <HAL_RCC_GetPCLK1Freq+0x150>
 8003074:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8003078:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307e:	ee07 3a10 	vmov	s14, r3
 8003082:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003086:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800308a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003092:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003096:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x138>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800309e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030a0:	ee07 3a10 	vmov	s14, r3
 80030a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80030a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030ac:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80030b0:	ee17 2a90 	vmov	r2, s15
 80030b4:	e797      	b.n	8002fe6 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 80030b6:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x154>)
 80030b8:	e795      	b.n	8002fe6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_RCC_GetPCLK1Freq+0x14c>)
 80030bc:	e793      	b.n	8002fe6 <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003128 <HAL_RCC_GetPCLK1Freq+0x158>
 80030c2:	e7d7      	b.n	8003074 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c4:	680b      	ldr	r3, [r1, #0]
 80030c6:	069b      	lsls	r3, r3, #26
 80030c8:	d51a      	bpl.n	8003100 <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030ca:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030cc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <HAL_RCC_GetPCLK1Freq+0x14c>)
 80030d2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030d6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030d8:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030de:	ee07 2a10 	vmov	s14, r2
 80030e2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80030e6:	ee07 3a10 	vmov	s14, r3
 80030ea:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80030ee:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80030f2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80030f6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fe:	e7ca      	b.n	8003096 <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003100:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800312c <HAL_RCC_GetPCLK1Freq+0x15c>
 8003104:	e7b6      	b.n	8003074 <HAL_RCC_GetPCLK1Freq+0xa4>
 8003106:	bf00      	nop
 8003108:	58024400 	.word	0x58024400
 800310c:	003d0900 	.word	0x003d0900
 8003110:	08007ca0 	.word	0x08007ca0
 8003114:	24000000 	.word	0x24000000
 8003118:	24000004 	.word	0x24000004
 800311c:	03d09000 	.word	0x03d09000
 8003120:	4a742400 	.word	0x4a742400
 8003124:	02625a00 	.word	0x02625a00
 8003128:	4c189680 	.word	0x4c189680
 800312c:	4c742400 	.word	0x4c742400

08003130 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003130:	494d      	ldr	r1, [pc, #308]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x138>)
 8003132:	690b      	ldr	r3, [r1, #16]
 8003134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003138:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800313a:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313c:	d06b      	beq.n	8003216 <HAL_RCC_GetPCLK2Freq+0xe6>
 800313e:	2b18      	cmp	r3, #24
 8003140:	d029      	beq.n	8003196 <HAL_RCC_GetPCLK2Freq+0x66>
 8003142:	b1fb      	cbz	r3, 8003184 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8003144:	4a49      	ldr	r2, [pc, #292]	; (800326c <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003146:	4848      	ldr	r0, [pc, #288]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x138>)
 8003148:	4949      	ldr	r1, [pc, #292]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x140>)
 800314a:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800314c:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800314e:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8003152:	4d48      	ldr	r5, [pc, #288]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003154:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003158:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800315a:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800315c:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003160:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003164:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003166:	4c44      	ldr	r4, [pc, #272]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x148>)
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800316c:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800316e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003170:	69c2      	ldr	r2, [r0, #28]
 8003172:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8003176:	5c88      	ldrb	r0, [r1, r2]
 8003178:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800317c:	bc30      	pop	{r4, r5}
 800317e:	fa23 f000 	lsr.w	r0, r3, r0
 8003182:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003184:	680b      	ldr	r3, [r1, #0]
 8003186:	069a      	lsls	r2, r3, #26
 8003188:	d547      	bpl.n	800321a <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800318a:	680b      	ldr	r3, [r1, #0]
 800318c:	4a3b      	ldr	r2, [pc, #236]	; (800327c <HAL_RCC_GetPCLK2Freq+0x14c>)
 800318e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003192:	40da      	lsrs	r2, r3
 8003194:	e7d7      	b.n	8003146 <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003196:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003198:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800319a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800319c:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031a0:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 80031a2:	2a00      	cmp	r2, #0
 80031a4:	d0cf      	beq.n	8003146 <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031a6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031b2:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031b6:	fb03 f304 	mul.w	r3, r3, r4
 80031ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80031be:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031c0:	ee07 3a90 	vmov	s15, r3
 80031c4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetPCLK2Freq+0xa0>
 80031ca:	d32b      	bcc.n	8003224 <HAL_RCC_GetPCLK2Freq+0xf4>
 80031cc:	2802      	cmp	r0, #2
 80031ce:	d026      	beq.n	800321e <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003280 <HAL_RCC_GetPCLK2Freq+0x150>
 80031d4:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80031d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	ee07 3a10 	vmov	s14, r3
 80031e2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80031e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80031f2:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x138>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80031fe:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003200:	ee07 3a10 	vmov	s14, r3
 8003204:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003208:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800320c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003210:	ee17 2a90 	vmov	r2, s15
 8003214:	e797      	b.n	8003146 <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x154>)
 8003218:	e795      	b.n	8003146 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800321a:	4a18      	ldr	r2, [pc, #96]	; (800327c <HAL_RCC_GetPCLK2Freq+0x14c>)
 800321c:	e793      	b.n	8003146 <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800321e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003288 <HAL_RCC_GetPCLK2Freq+0x158>
 8003222:	e7d7      	b.n	80031d4 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003224:	680b      	ldr	r3, [r1, #0]
 8003226:	069b      	lsls	r3, r3, #26
 8003228:	d51a      	bpl.n	8003260 <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800322a:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800322c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003230:	4a12      	ldr	r2, [pc, #72]	; (800327c <HAL_RCC_GetPCLK2Freq+0x14c>)
 8003232:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003236:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003238:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800323a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323e:	ee07 2a10 	vmov	s14, r2
 8003242:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8003246:	ee07 3a10 	vmov	s14, r3
 800324a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800324e:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8003252:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003256:	ee77 7a85 	vadd.f32	s15, s15, s10
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	e7ca      	b.n	80031f6 <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003260:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800328c <HAL_RCC_GetPCLK2Freq+0x15c>
 8003264:	e7b6      	b.n	80031d4 <HAL_RCC_GetPCLK2Freq+0xa4>
 8003266:	bf00      	nop
 8003268:	58024400 	.word	0x58024400
 800326c:	003d0900 	.word	0x003d0900
 8003270:	08007ca0 	.word	0x08007ca0
 8003274:	24000000 	.word	0x24000000
 8003278:	24000004 	.word	0x24000004
 800327c:	03d09000 	.word	0x03d09000
 8003280:	4a742400 	.word	0x4a742400
 8003284:	02625a00 	.word	0x02625a00
 8003288:	4c189680 	.word	0x4c189680
 800328c:	4c742400 	.word	0x4c742400

08003290 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003290:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <RCCEx_PLL2_Config+0xf0>)
{
 8003292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003294:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b03      	cmp	r3, #3
 800329c:	d067      	beq.n	800336e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	460f      	mov	r7, r1
 80032a2:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032a4:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80032a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032aa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80032ac:	f7fe fe66 	bl	8001f7c <HAL_GetTick>
 80032b0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032b2:	e004      	b.n	80032be <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80032b4:	f7fe fe62 	bl	8001f7c <HAL_GetTick>
 80032b8:	1b80      	subs	r0, r0, r6
 80032ba:	2802      	cmp	r0, #2
 80032bc:	d859      	bhi.n	8003372 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	011a      	lsls	r2, r3, #4
 80032c2:	d4f7      	bmi.n	80032b4 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80032c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032c6:	682a      	ldr	r2, [r5, #0]
 80032c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80032cc:	492d      	ldr	r1, [pc, #180]	; (8003384 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80032ce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80032d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80032d4:	686e      	ldr	r6, [r5, #4]
 80032d6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80032da:	3e01      	subs	r6, #1
 80032dc:	1e50      	subs	r0, r2, #1
 80032de:	3b01      	subs	r3, #1
 80032e0:	692a      	ldr	r2, [r5, #16]
 80032e2:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80032e6:	025b      	lsls	r3, r3, #9
 80032e8:	0400      	lsls	r0, r0, #16
 80032ea:	3a01      	subs	r2, #1
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80032f2:	0612      	lsls	r2, r2, #24
 80032f4:	4303      	orrs	r3, r0
 80032f6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80032fa:	4333      	orrs	r3, r6
 80032fc:	4313      	orrs	r3, r2
 80032fe:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003300:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003302:	696a      	ldr	r2, [r5, #20]
 8003304:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003308:	4313      	orrs	r3, r2
 800330a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800330c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800330e:	69aa      	ldr	r2, [r5, #24]
 8003310:	f023 0320 	bic.w	r3, r3, #32
 8003314:	4313      	orrs	r3, r2
 8003316:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003318:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800331a:	f023 0310 	bic.w	r3, r3, #16
 800331e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003320:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003322:	69eb      	ldr	r3, [r5, #28]
 8003324:	4011      	ands	r1, r2
 8003326:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800332a:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800332c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800332e:	f043 0310 	orr.w	r3, r3, #16
 8003332:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003336:	b1f7      	cbz	r7, 8003376 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003338:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800333a:	bf0c      	ite	eq
 800333c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003340:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8003344:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <RCCEx_PLL2_Config+0xf0>)
 8003348:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800334a:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 800334c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003350:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003352:	f7fe fe13 	bl	8001f7c <HAL_GetTick>
 8003356:	4605      	mov	r5, r0
 8003358:	e004      	b.n	8003364 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800335a:	f7fe fe0f 	bl	8001f7c <HAL_GetTick>
 800335e:	1b40      	subs	r0, r0, r5
 8003360:	2802      	cmp	r0, #2
 8003362:	d806      	bhi.n	8003372 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	d5f7      	bpl.n	800335a <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800336a:	2000      	movs	r0, #0
}
 800336c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800336e:	2001      	movs	r0, #1
}
 8003370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003372:	2003      	movs	r0, #3
}
 8003374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800337a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800337c:	e7e3      	b.n	8003346 <RCCEx_PLL2_Config+0xb6>
 800337e:	bf00      	nop
 8003380:	58024400 	.word	0x58024400
 8003384:	ffff0007 	.word	0xffff0007

08003388 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003388:	4a3b      	ldr	r2, [pc, #236]	; (8003478 <RCCEx_PLL3_Config+0xf0>)
{
 800338a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800338c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b03      	cmp	r3, #3
 8003394:	d067      	beq.n	8003466 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	460f      	mov	r7, r1
 800339a:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800339c:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80033a4:	f7fe fdea 	bl	8001f7c <HAL_GetTick>
 80033a8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033aa:	e004      	b.n	80033b6 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80033ac:	f7fe fde6 	bl	8001f7c <HAL_GetTick>
 80033b0:	1b80      	subs	r0, r0, r6
 80033b2:	2802      	cmp	r0, #2
 80033b4:	d859      	bhi.n	800346a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	009a      	lsls	r2, r3, #2
 80033ba:	d4f7      	bmi.n	80033ac <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80033bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033be:	682a      	ldr	r2, [r5, #0]
 80033c0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80033c4:	492d      	ldr	r1, [pc, #180]	; (800347c <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80033c6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80033ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80033cc:	686e      	ldr	r6, [r5, #4]
 80033ce:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80033d2:	3e01      	subs	r6, #1
 80033d4:	1e50      	subs	r0, r2, #1
 80033d6:	3b01      	subs	r3, #1
 80033d8:	692a      	ldr	r2, [r5, #16]
 80033da:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80033de:	025b      	lsls	r3, r3, #9
 80033e0:	0400      	lsls	r0, r0, #16
 80033e2:	3a01      	subs	r2, #1
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80033ea:	0612      	lsls	r2, r2, #24
 80033ec:	4303      	orrs	r3, r0
 80033ee:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80033f2:	4333      	orrs	r3, r6
 80033f4:	4313      	orrs	r3, r2
 80033f6:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80033f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033fa:	696a      	ldr	r2, [r5, #20]
 80033fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003400:	4313      	orrs	r3, r2
 8003402:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003404:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003406:	69aa      	ldr	r2, [r5, #24]
 8003408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800340c:	4313      	orrs	r3, r2
 800340e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003416:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003418:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800341a:	69eb      	ldr	r3, [r5, #28]
 800341c:	4011      	ands	r1, r2
 800341e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003422:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003424:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800342c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800342e:	b1f7      	cbz	r7, 800346e <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003430:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003432:	bf0c      	ite	eq
 8003434:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003438:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800343c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <RCCEx_PLL3_Config+0xf0>)
 8003440:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003442:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8003444:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003448:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800344a:	f7fe fd97 	bl	8001f7c <HAL_GetTick>
 800344e:	4605      	mov	r5, r0
 8003450:	e004      	b.n	800345c <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003452:	f7fe fd93 	bl	8001f7c <HAL_GetTick>
 8003456:	1b40      	subs	r0, r0, r5
 8003458:	2802      	cmp	r0, #2
 800345a:	d806      	bhi.n	800346a <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	d5f7      	bpl.n	8003452 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8003462:	2000      	movs	r0, #0
}
 8003464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003466:	2001      	movs	r0, #1
}
 8003468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800346a:	2003      	movs	r0, #3
}
 800346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800346e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003472:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003474:	e7e3      	b.n	800343e <RCCEx_PLL3_Config+0xb6>
 8003476:	bf00      	nop
 8003478:	58024400 	.word	0x58024400
 800347c:	ffff0007 	.word	0xffff0007

08003480 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003484:	6803      	ldr	r3, [r0, #0]
{
 8003486:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003488:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800348c:	d015      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800348e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003490:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003494:	f000 844e 	beq.w	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8003498:	f240 8501 	bls.w	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800349c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80034a0:	f000 8461 	beq.w	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 80034a4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80034a8:	f040 8512 	bne.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034ac:	48a2      	ldr	r0, [pc, #648]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80034ae:	2600      	movs	r6, #0
 80034b0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80034b2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80034b6:	430a      	orrs	r2, r1
 80034b8:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034ba:	05dd      	lsls	r5, r3, #23
 80034bc:	d50a      	bpl.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 80034be:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80034c0:	2a04      	cmp	r2, #4
 80034c2:	d806      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034c4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80034c8:	03e403dd 	.word	0x03e403dd
 80034cc:	039e03d2 	.word	0x039e03d2
 80034d0:	039e      	.short	0x039e
      ret = HAL_ERROR;
 80034d2:	2601      	movs	r6, #1
 80034d4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034d6:	0598      	lsls	r0, r3, #22
 80034d8:	d51b      	bpl.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 80034da:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80034dc:	2a80      	cmp	r2, #128	; 0x80
 80034de:	f000 8405 	beq.w	8003cec <HAL_RCCEx_PeriphCLKConfig+0x86c>
 80034e2:	f200 84d1 	bhi.w	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	f000 8443 	beq.w	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80034ec:	2a40      	cmp	r2, #64	; 0x40
 80034ee:	f040 84d2 	bne.w	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f2:	2100      	movs	r1, #0
 80034f4:	1d20      	adds	r0, r4, #4
 80034f6:	f7ff fecb 	bl	8003290 <RCCEx_PLL2_Config>
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80034fe:	2d00      	cmp	r5, #0
 8003500:	f040 83fe 	bne.w	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003504:	498c      	ldr	r1, [pc, #560]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003506:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003508:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800350a:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800350e:	4302      	orrs	r2, r0
 8003510:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003512:	0559      	lsls	r1, r3, #21
 8003514:	d51f      	bpl.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003516:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800351a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800351e:	f000 83d4 	beq.w	8003cca <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8003522:	f200 8499 	bhi.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8003526:	2a00      	cmp	r2, #0
 8003528:	f000 8410 	beq.w	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800352c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003530:	f040 849a 	bne.w	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003534:	2100      	movs	r1, #0
 8003536:	1d20      	adds	r0, r4, #4
 8003538:	f7ff feaa 	bl	8003290 <RCCEx_PLL2_Config>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003540:	2d00      	cmp	r5, #0
 8003542:	f040 83cc 	bne.w	8003cde <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003546:	497c      	ldr	r1, [pc, #496]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003548:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800354c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800354e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8003552:	4302      	orrs	r2, r0
 8003554:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003556:	051a      	lsls	r2, r3, #20
 8003558:	d51f      	bpl.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 800355a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800355e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8003562:	f000 83cf 	beq.w	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8003566:	f200 8483 	bhi.w	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 800356a:	2a00      	cmp	r2, #0
 800356c:	f000 8408 	beq.w	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8003570:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003574:	f040 8484 	bne.w	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003578:	2100      	movs	r1, #0
 800357a:	1d20      	adds	r0, r4, #4
 800357c:	f7ff fe88 	bl	8003290 <RCCEx_PLL2_Config>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003584:	2d00      	cmp	r5, #0
 8003586:	f040 83c7 	bne.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800358a:	496b      	ldr	r1, [pc, #428]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800358c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8003590:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003592:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8003596:	4302      	orrs	r2, r0
 8003598:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800359a:	019f      	lsls	r7, r3, #6
 800359c:	d50d      	bpl.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 800359e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80035a0:	2a10      	cmp	r2, #16
 80035a2:	f000 830c 	beq.w	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80035a6:	f240 848e 	bls.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa46>
 80035aa:	2a20      	cmp	r2, #32
 80035ac:	f000 8349 	beq.w	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 80035b0:	2a30      	cmp	r2, #48	; 0x30
 80035b2:	f000 8309 	beq.w	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      ret = HAL_ERROR;
 80035b6:	2601      	movs	r6, #1
 80035b8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035ba:	04d8      	lsls	r0, r3, #19
 80035bc:	d51d      	bpl.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 80035be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80035c0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80035c4:	f000 83aa 	beq.w	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x89c>
 80035c8:	f200 8471 	bhi.w	8003eae <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 80035cc:	2a00      	cmp	r2, #0
 80035ce:	f000 83c4 	beq.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80035d2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80035d6:	f040 8472 	bne.w	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035da:	2100      	movs	r1, #0
 80035dc:	1d20      	adds	r0, r4, #4
 80035de:	f7ff fe57 	bl	8003290 <RCCEx_PLL2_Config>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80035e6:	2d00      	cmp	r5, #0
 80035e8:	f040 83a2 	bne.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035ec:	4952      	ldr	r1, [pc, #328]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80035ee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80035f0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80035f2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80035f6:	4302      	orrs	r2, r0
 80035f8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035fa:	0499      	lsls	r1, r3, #18
 80035fc:	d51b      	bpl.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 80035fe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003600:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8003604:	f000 8309 	beq.w	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8003608:	f200 8407 	bhi.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x99a>
 800360c:	b14a      	cbz	r2, 8003622 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800360e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003612:	f040 840e 	bne.w	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003616:	2101      	movs	r1, #1
 8003618:	1d20      	adds	r0, r4, #4
 800361a:	f7ff fe39 	bl	8003290 <RCCEx_PLL2_Config>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003622:	2d00      	cmp	r5, #0
 8003624:	f040 8271 	bne.w	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003628:	4943      	ldr	r1, [pc, #268]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800362a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800362c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800362e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8003632:	4302      	orrs	r2, r0
 8003634:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003636:	045a      	lsls	r2, r3, #17
 8003638:	d51d      	bpl.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 800363a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800363e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003642:	f000 82b2 	beq.w	8003baa <HAL_RCCEx_PeriphCLKConfig+0x72a>
 8003646:	f200 83f8 	bhi.w	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800364a:	b14a      	cbz	r2, 8003660 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800364c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003650:	f040 83ff 	bne.w	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003654:	2101      	movs	r1, #1
 8003656:	1d20      	adds	r0, r4, #4
 8003658:	f7ff fe1a 	bl	8003290 <RCCEx_PLL2_Config>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003660:	2d00      	cmp	r5, #0
 8003662:	f040 8250 	bne.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003666:	4934      	ldr	r1, [pc, #208]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003668:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800366c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800366e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8003672:	4302      	orrs	r2, r0
 8003674:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003676:	041f      	lsls	r7, r3, #16
 8003678:	d50d      	bpl.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 800367a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800367c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003680:	f000 82d6 	beq.w	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8003684:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003688:	f000 81ad 	beq.w	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800368c:	2a00      	cmp	r2, #0
 800368e:	f000 81b0 	beq.w	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      ret = HAL_ERROR;
 8003692:	2601      	movs	r6, #1
 8003694:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003696:	01d8      	lsls	r0, r3, #7
 8003698:	d519      	bpl.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 800369a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800369c:	2a03      	cmp	r2, #3
 800369e:	f200 8442 	bhi.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 80036a2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80036a6:	000a      	.short	0x000a
 80036a8:	00040264 	.word	0x00040264
 80036ac:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036ae:	2102      	movs	r1, #2
 80036b0:	1d20      	adds	r0, r4, #4
 80036b2:	f7ff fded 	bl	8003290 <RCCEx_PLL2_Config>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80036ba:	2d00      	cmp	r5, #0
 80036bc:	f040 821b 	bne.w	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036c0:	491d      	ldr	r1, [pc, #116]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80036c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80036c4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80036c6:	f022 0203 	bic.w	r2, r2, #3
 80036ca:	4302      	orrs	r2, r0
 80036cc:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ce:	0259      	lsls	r1, r3, #9
 80036d0:	f100 81cb 	bmi.w	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80036d4:	07df      	lsls	r7, r3, #31
 80036d6:	d542      	bpl.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 80036d8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80036da:	2a28      	cmp	r2, #40	; 0x28
 80036dc:	f200 8369 	bhi.w	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x932>
 80036e0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80036e4:	03670033 	.word	0x03670033
 80036e8:	03670367 	.word	0x03670367
 80036ec:	03670367 	.word	0x03670367
 80036f0:	03670367 	.word	0x03670367
 80036f4:	03670256 	.word	0x03670256
 80036f8:	03670367 	.word	0x03670367
 80036fc:	03670367 	.word	0x03670367
 8003700:	03670367 	.word	0x03670367
 8003704:	0367002c 	.word	0x0367002c
 8003708:	03670367 	.word	0x03670367
 800370c:	03670367 	.word	0x03670367
 8003710:	03670367 	.word	0x03670367
 8003714:	03670033 	.word	0x03670033
 8003718:	03670367 	.word	0x03670367
 800371c:	03670367 	.word	0x03670367
 8003720:	03670367 	.word	0x03670367
 8003724:	03670033 	.word	0x03670033
 8003728:	03670367 	.word	0x03670367
 800372c:	03670367 	.word	0x03670367
 8003730:	03670367 	.word	0x03670367
 8003734:	0033      	.short	0x0033
 8003736:	bf00      	nop
 8003738:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800373c:	2101      	movs	r1, #1
 800373e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003742:	f7ff fe21 	bl	8003388 <RCCEx_PLL3_Config>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800374a:	2d00      	cmp	r5, #0
 800374c:	f040 81d1 	bne.w	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003750:	49ad      	ldr	r1, [pc, #692]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003752:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003754:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003756:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800375a:	4302      	orrs	r2, r0
 800375c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800375e:	0798      	lsls	r0, r3, #30
 8003760:	d51c      	bpl.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003762:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003764:	2a05      	cmp	r2, #5
 8003766:	f200 83d8 	bhi.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 800376a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800376e:	000d      	.short	0x000d
 8003770:	000601f7 	.word	0x000601f7
 8003774:	000d000d 	.word	0x000d000d
 8003778:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800377a:	2101      	movs	r1, #1
 800377c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003780:	f7ff fe02 	bl	8003388 <RCCEx_PLL3_Config>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003788:	2d00      	cmp	r5, #0
 800378a:	f040 81b6 	bne.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800378e:	499e      	ldr	r1, [pc, #632]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003790:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003792:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003794:	f022 0207 	bic.w	r2, r2, #7
 8003798:	4302      	orrs	r2, r0
 800379a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800379c:	0759      	lsls	r1, r3, #29
 800379e:	d51e      	bpl.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80037a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80037a4:	2a05      	cmp	r2, #5
 80037a6:	f200 83bb 	bhi.w	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 80037aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80037ae:	000d      	.short	0x000d
 80037b0:	000601e8 	.word	0x000601e8
 80037b4:	000d000d 	.word	0x000d000d
 80037b8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037ba:	2101      	movs	r1, #1
 80037bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037c0:	f7ff fde2 	bl	8003388 <RCCEx_PLL3_Config>
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	f040 8198 	bne.w	8003afe <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ce:	498e      	ldr	r1, [pc, #568]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80037d0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80037d4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80037d6:	f022 0207 	bic.w	r2, r2, #7
 80037da:	4302      	orrs	r2, r0
 80037dc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037de:	069a      	lsls	r2, r3, #26
 80037e0:	d51d      	bpl.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80037e2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80037e6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80037ea:	f000 81f7 	beq.w	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80037ee:	f200 82e7 	bhi.w	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x940>
 80037f2:	b14a      	cbz	r2, 8003808 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80037f4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80037f8:	f040 82ee 	bne.w	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x958>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037fc:	2100      	movs	r1, #0
 80037fe:	1d20      	adds	r0, r4, #4
 8003800:	f7ff fd46 	bl	8003290 <RCCEx_PLL2_Config>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003808:	2d00      	cmp	r5, #0
 800380a:	f040 817a 	bne.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x682>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800380e:	497e      	ldr	r1, [pc, #504]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003810:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003814:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003816:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800381a:	4302      	orrs	r2, r0
 800381c:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800381e:	065f      	lsls	r7, r3, #25
 8003820:	d51d      	bpl.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003822:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003826:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800382a:	f000 81e1 	beq.w	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 800382e:	f200 82d6 	bhi.w	8003dde <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8003832:	b14a      	cbz	r2, 8003848 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003834:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003838:	f040 82dd 	bne.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800383c:	2100      	movs	r1, #0
 800383e:	1d20      	adds	r0, r4, #4
 8003840:	f7ff fd26 	bl	8003290 <RCCEx_PLL2_Config>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003848:	2d00      	cmp	r5, #0
 800384a:	f040 8162 	bne.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x692>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800384e:	496e      	ldr	r1, [pc, #440]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003850:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8003854:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003856:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800385a:	4302      	orrs	r2, r0
 800385c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800385e:	0618      	lsls	r0, r3, #24
 8003860:	d51d      	bpl.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003862:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8003866:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800386a:	f000 81f4 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 800386e:	f200 82c5 	bhi.w	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003872:	b14a      	cbz	r2, 8003888 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003874:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003878:	f040 82cc 	bne.w	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x994>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800387c:	2100      	movs	r1, #0
 800387e:	1d20      	adds	r0, r4, #4
 8003880:	f7ff fd06 	bl	8003290 <RCCEx_PLL2_Config>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003888:	2d00      	cmp	r5, #0
 800388a:	f040 8144 	bne.w	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800388e:	495e      	ldr	r1, [pc, #376]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003890:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8003894:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003896:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800389a:	4302      	orrs	r2, r0
 800389c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800389e:	0719      	lsls	r1, r3, #28
 80038a0:	d50b      	bpl.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80038a2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80038a6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80038aa:	f000 81f8 	beq.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80038ae:	4856      	ldr	r0, [pc, #344]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80038b0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80038b2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80038b6:	430a      	orrs	r2, r1
 80038b8:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038ba:	06da      	lsls	r2, r3, #27
 80038bc:	d50b      	bpl.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80038be:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80038c2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80038c6:	f000 81f5 	beq.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ca:	484f      	ldr	r0, [pc, #316]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80038cc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80038ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038d2:	430a      	orrs	r2, r1
 80038d4:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d6:	031f      	lsls	r7, r3, #12
 80038d8:	d50e      	bpl.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 80038da:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80038de:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80038e2:	f000 8093 	beq.w	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x58c>
 80038e6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80038ea:	f000 8096 	beq.w	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038ee:	2900      	cmp	r1, #0
 80038f0:	f000 824d 	beq.w	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x90e>
      ret = HAL_ERROR;
 80038f4:	2601      	movs	r6, #1
 80038f6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038f8:	0358      	lsls	r0, r3, #13
 80038fa:	d50f      	bpl.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 80038fc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003900:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003904:	f000 8094 	beq.w	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003908:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800390c:	f000 8097 	beq.w	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003910:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003914:	f000 8244 	beq.w	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x920>
      ret = HAL_ERROR;
 8003918:	2601      	movs	r6, #1
 800391a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800391c:	03d9      	lsls	r1, r3, #15
 800391e:	d517      	bpl.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003920:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003922:	2a00      	cmp	r2, #0
 8003924:	f000 8110 	beq.w	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8003928:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800392c:	f040 80f7 	bne.w	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003930:	2102      	movs	r1, #2
 8003932:	1d20      	adds	r0, r4, #4
 8003934:	f7ff fcac 	bl	8003290 <RCCEx_PLL2_Config>
 8003938:	4605      	mov	r5, r0
 800393a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800393c:	2d00      	cmp	r5, #0
 800393e:	f040 810b 	bne.w	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003942:	4931      	ldr	r1, [pc, #196]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003944:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003946:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003948:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800394c:	4302      	orrs	r2, r0
 800394e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003950:	009a      	lsls	r2, r3, #2
 8003952:	d47f      	bmi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003954:	039f      	lsls	r7, r3, #14
 8003956:	d435      	bmi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8003958:	1c30      	adds	r0, r6, #0
 800395a:	bf18      	it	ne
 800395c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800395e:	02de      	lsls	r6, r3, #11
 8003960:	d506      	bpl.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003962:	4929      	ldr	r1, [pc, #164]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003964:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8003966:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003968:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800396c:	432a      	orrs	r2, r5
 800396e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003970:	00dd      	lsls	r5, r3, #3
 8003972:	d507      	bpl.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003974:	4924      	ldr	r1, [pc, #144]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003976:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800397a:	690a      	ldr	r2, [r1, #16]
 800397c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003980:	432a      	orrs	r2, r5
 8003982:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003984:	0299      	lsls	r1, r3, #10
 8003986:	d506      	bpl.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x516>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003988:	491f      	ldr	r1, [pc, #124]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800398a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800398c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800398e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003992:	432a      	orrs	r2, r5
 8003994:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003996:	005a      	lsls	r2, r3, #1
 8003998:	d509      	bpl.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800399a:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800399c:	6911      	ldr	r1, [r2, #16]
 800399e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80039a2:	6111      	str	r1, [r2, #16]
 80039a4:	6911      	ldr	r1, [r2, #16]
 80039a6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80039aa:	4329      	orrs	r1, r5
 80039ac:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	da06      	bge.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80039b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80039b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80039b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80039bc:	430b      	orrs	r3, r1
 80039be:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80039c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80039c4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80039c6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80039ca:	f000 80ab 	beq.w	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80039ce:	f240 80e8 	bls.w	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x722>
 80039d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80039d6:	f000 80aa 	beq.w	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80039da:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80039de:	f000 80a6 	beq.w	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80039e2:	2001      	movs	r0, #1
 80039e4:	e7bb      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039e6:	2101      	movs	r1, #1
 80039e8:	1d20      	adds	r0, r4, #4
 80039ea:	f7ff fc51 	bl	8003290 <RCCEx_PLL2_Config>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	f040 808b 	bne.w	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039f8:	4903      	ldr	r1, [pc, #12]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80039fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80039fc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80039fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a02:	4302      	orrs	r2, r0
 8003a04:	650a      	str	r2, [r1, #80]	; 0x50
 8003a06:	e646      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8003a08:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a12:	f7ff fcb9 	bl	8003388 <RCCEx_PLL3_Config>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a1a:	2d00      	cmp	r5, #0
 8003a1c:	d17d      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x69a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a1e:	49b1      	ldr	r1, [pc, #708]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003a20:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003a24:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003a26:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003a2a:	4302      	orrs	r2, r0
 8003a2c:	658a      	str	r2, [r1, #88]	; 0x58
 8003a2e:	e763      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a30:	2101      	movs	r1, #1
 8003a32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a36:	f7ff fca7 	bl	8003388 <RCCEx_PLL3_Config>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	d155      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a42:	49a8      	ldr	r1, [pc, #672]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003a44:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003a48:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8003a4a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003a4e:	4302      	orrs	r2, r0
 8003a50:	654a      	str	r2, [r1, #84]	; 0x54
 8003a52:	e763      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003a54:	2102      	movs	r1, #2
 8003a56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a5a:	f7ff fc95 	bl	8003388 <RCCEx_PLL3_Config>
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	2800      	cmp	r0, #0
 8003a62:	f43f af77 	beq.w	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      status=HAL_ERROR;
 8003a66:	2601      	movs	r6, #1
 8003a68:	e774      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a6a:	4b9f      	ldr	r3, [pc, #636]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x868>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6e:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a74:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003a76:	f7fe fa81 	bl	8001f7c <HAL_GetTick>
 8003a7a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7c:	e006      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x60c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7fe fa7d 	bl	8001f7c <HAL_GetTick>
 8003a82:	eba0 0008 	sub.w	r0, r0, r8
 8003a86:	2864      	cmp	r0, #100	; 0x64
 8003a88:	f200 8196 	bhi.w	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x938>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	05da      	lsls	r2, r3, #23
 8003a90:	d5f5      	bpl.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    if(ret == HAL_OK)
 8003a92:	2d00      	cmp	r5, #0
 8003a94:	f040 823d 	bne.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xa92>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a98:	4a92      	ldr	r2, [pc, #584]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003a9a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003a9e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003aa0:	4059      	eors	r1, r3
 8003aa2:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x640>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aa8:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aaa:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aac:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003ab4:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8003ab8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003abc:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003abe:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac4:	f000 8207 	beq.w	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003acc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003ad0:	f000 8215 	beq.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ad4:	4983      	ldr	r1, [pc, #524]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003ad6:	690a      	ldr	r2, [r1, #16]
 8003ad8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003adc:	610a      	str	r2, [r1, #16]
 8003ade:	4a81      	ldr	r2, [pc, #516]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	e5f2      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003aee:	462e      	mov	r6, r5
 8003af0:	e714      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003af2:	462e      	mov	r6, r5
 8003af4:	e633      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003af6:	462e      	mov	r6, r5
 8003af8:	e5e9      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003afa:	462e      	mov	r6, r5
 8003afc:	e64e      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003afe:	462e      	mov	r6, r5
 8003b00:	e66d      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003b02:	462e      	mov	r6, r5
 8003b04:	e68b      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8003b06:	462e      	mov	r6, r5
 8003b08:	e5b5      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003b0a:	462e      	mov	r6, r5
 8003b0c:	e593      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b0e:	462e      	mov	r6, r5
 8003b10:	e5c1      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8003b12:	462e      	mov	r6, r5
 8003b14:	e6a3      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b16:	462e      	mov	r6, r5
 8003b18:	e6c1      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8003b1a:	462e      	mov	r6, r5
 8003b1c:	e6ec      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 8003b1e:	2601      	movs	r6, #1
 8003b20:	4635      	mov	r5, r6
 8003b22:	e715      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	486f      	ldr	r0, [pc, #444]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003b26:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003b28:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003b2c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8003b2e:	2d00      	cmp	r5, #0
 8003b30:	f47f af57 	bne.w	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b34:	4d6b      	ldr	r5, [pc, #428]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003b36:	1c30      	adds	r0, r6, #0
 8003b38:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003b3a:	bf18      	it	ne
 8003b3c:	2001      	movne	r0, #1
 8003b3e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003b42:	430a      	orrs	r2, r1
 8003b44:	656a      	str	r2, [r5, #84]	; 0x54
 8003b46:	e70a      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b48:	4966      	ldr	r1, [pc, #408]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003b4a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003b4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b50:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003b52:	2d00      	cmp	r5, #0
 8003b54:	f43f aef5 	beq.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b58:	462e      	mov	r6, r5
 8003b5a:	e6f9      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	1d20      	adds	r0, r4, #4
 8003b60:	f7ff fb96 	bl	8003290 <RCCEx_PLL2_Config>
 8003b64:	4605      	mov	r5, r0
 8003b66:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	d1c6      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003b6c:	e60f      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b6e:	495d      	ldr	r1, [pc, #372]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003b70:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003b72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b76:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003b78:	2d00      	cmp	r5, #0
 8003b7a:	d1bc      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b7c:	e5a0      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b7e:	2101      	movs	r1, #1
 8003b80:	1d20      	adds	r0, r4, #4
 8003b82:	f7ff fb85 	bl	8003290 <RCCEx_PLL2_Config>
 8003b86:	4605      	mov	r5, r0
 8003b88:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003b8a:	2d00      	cmp	r5, #0
 8003b8c:	d1b7      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003b8e:	e61e      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b90:	2101      	movs	r1, #1
 8003b92:	1d20      	adds	r0, r4, #4
 8003b94:	f7ff fb7c 	bl	8003290 <RCCEx_PLL2_Config>
 8003b98:	4605      	mov	r5, r0
 8003b9a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003b9c:	2d00      	cmp	r5, #0
 8003b9e:	d1a8      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ba0:	e5d6      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 8003ba2:	2a00      	cmp	r2, #0
 8003ba4:	f47f af1d 	bne.w	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003ba8:	e7c1      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003baa:	2101      	movs	r1, #1
 8003bac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003bb0:	f7ff fbea 	bl	8003388 <RCCEx_PLL3_Config>
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003bb8:	2d00      	cmp	r5, #0
 8003bba:	d1a4      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8003bbc:	e553      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbe:	4949      	ldr	r1, [pc, #292]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003bc0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003bc2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003bc6:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003bc8:	2d00      	cmp	r5, #0
 8003bca:	d142      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bcc:	4945      	ldr	r1, [pc, #276]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003bce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003bd0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003bd2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003bd6:	4302      	orrs	r2, r0
 8003bd8:	64ca      	str	r2, [r1, #76]	; 0x4c
 8003bda:	e4ee      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bdc:	2102      	movs	r1, #2
 8003bde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003be2:	f7ff fbd1 	bl	8003388 <RCCEx_PLL3_Config>
 8003be6:	4605      	mov	r5, r0
 8003be8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003bea:	2d00      	cmp	r5, #0
 8003bec:	d189      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003bee:	e60e      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003bf6:	f7ff fbc7 	bl	8003388 <RCCEx_PLL3_Config>
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	d187      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8003c02:	e624      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c04:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8003c06:	2d00      	cmp	r5, #0
 8003c08:	d139      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c0a:	4936      	ldr	r1, [pc, #216]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003c0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c0e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003c10:	f022 0207 	bic.w	r2, r2, #7
 8003c14:	4302      	orrs	r2, r0
 8003c16:	650a      	str	r2, [r1, #80]	; 0x50
 8003c18:	e45d      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c20:	f7ff fbb2 	bl	8003388 <RCCEx_PLL3_Config>
 8003c24:	4605      	mov	r5, r0
 8003c26:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	f47f af6e 	bne.w	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8003c2e:	e4fb      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c30:	492c      	ldr	r1, [pc, #176]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8003c32:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003c34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c38:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	f47f af67 	bne.w	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003c40:	e6da      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c42:	2102      	movs	r1, #2
 8003c44:	1d20      	adds	r0, r4, #4
 8003c46:	f7ff fb23 	bl	8003290 <RCCEx_PLL2_Config>
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003c4e:	2d00      	cmp	r5, #0
 8003c50:	d0bc      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003c52:	462e      	mov	r6, r5
 8003c54:	e4b1      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c56:	2102      	movs	r1, #2
 8003c58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c5c:	f7ff fb94 	bl	8003388 <RCCEx_PLL3_Config>
 8003c60:	4605      	mov	r5, r0
 8003c62:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003c64:	2d00      	cmp	r5, #0
 8003c66:	f47f af56 	bne.w	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8003c6a:	e610      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c72:	f7ff fb89 	bl	8003388 <RCCEx_PLL3_Config>
 8003c76:	4605      	mov	r5, r0
 8003c78:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003c7a:	2d00      	cmp	r5, #0
 8003c7c:	d0c5      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8003c7e:	462e      	mov	r6, r5
 8003c80:	e429      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c82:	4918      	ldr	r1, [pc, #96]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x864>)
      break;
 8003c84:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c86:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003c88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c8c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8003c8e:	e7ba      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x786>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c90:	2100      	movs	r1, #0
 8003c92:	1d20      	adds	r0, r4, #4
 8003c94:	f7ff fafc 	bl	8003290 <RCCEx_PLL2_Config>
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	4605      	mov	r5, r0
      break;
 8003c9c:	e7b3      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x786>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ca4:	f7ff fb70 	bl	8003388 <RCCEx_PLL3_Config>
 8003ca8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003cac:	b100      	cbz	r0, 8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x830>
          status = HAL_ERROR;
 8003cae:	2601      	movs	r6, #1
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	e5fc      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003cba:	f7ff fb65 	bl	8003388 <RCCEx_PLL3_Config>
 8003cbe:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8003cc2:	b100      	cbz	r0, 8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x846>
        status = HAL_ERROR;
 8003cc4:	2601      	movs	r6, #1
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	e5ff      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cca:	2100      	movs	r1, #0
 8003ccc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003cd0:	f7ff fb5a 	bl	8003388 <RCCEx_PLL3_Config>
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003cd8:	2d00      	cmp	r5, #0
 8003cda:	f43f ac34 	beq.w	8003546 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8003cde:	462e      	mov	r6, r5
 8003ce0:	e439      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8003ce2:	bf00      	nop
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cec:	2100      	movs	r1, #0
 8003cee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003cf2:	f7ff fb49 	bl	8003388 <RCCEx_PLL3_Config>
 8003cf6:	4605      	mov	r5, r0
 8003cf8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	f43f ac02 	beq.w	8003504 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003d00:	462e      	mov	r6, r5
 8003d02:	e406      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d04:	2100      	movs	r1, #0
 8003d06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d0a:	f7ff fb3d 	bl	8003388 <RCCEx_PLL3_Config>
 8003d0e:	4605      	mov	r5, r0
 8003d10:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003d12:	2d00      	cmp	r5, #0
 8003d14:	f43f ac39 	beq.w	800358a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8003d18:	462e      	mov	r6, r5
 8003d1a:	e43e      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d22:	f7ff fb31 	bl	8003388 <RCCEx_PLL3_Config>
 8003d26:	4605      	mov	r5, r0
 8003d28:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003d2a:	2d00      	cmp	r5, #0
 8003d2c:	f43f ac5e 	beq.w	80035ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d30:	462e      	mov	r6, r5
 8003d32:	e462      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d34:	2102      	movs	r1, #2
 8003d36:	3004      	adds	r0, #4
 8003d38:	f7ff faaa 	bl	8003290 <RCCEx_PLL2_Config>
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	f47f abba 	bne.w	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d48:	f7ff bbb0 	b.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4c:	4978      	ldr	r1, [pc, #480]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003d4e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003d50:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d54:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8003d56:	f7ff bbf3 	b.w	8003540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5a:	4975      	ldr	r1, [pc, #468]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003d5c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003d5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d62:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8003d64:	e43f      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d66:	2102      	movs	r1, #2
 8003d68:	3024      	adds	r0, #36	; 0x24
 8003d6a:	f7ff fb0d 	bl	8003388 <RCCEx_PLL3_Config>
 8003d6e:	4606      	mov	r6, r0
      break;
 8003d70:	e7e5      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d72:	496f      	ldr	r1, [pc, #444]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003d74:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003d76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d7a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8003d7c:	f7ff bbbf 	b.w	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d80:	496b      	ldr	r1, [pc, #428]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003d82:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003d84:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003d88:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8003d8a:	f7ff bbfb 	b.w	8003584 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d8e:	1d20      	adds	r0, r4, #4
 8003d90:	f7ff fa7e 	bl	8003290 <RCCEx_PLL2_Config>
 8003d94:	4605      	mov	r5, r0
 8003d96:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003d98:	2d00      	cmp	r5, #0
 8003d9a:	f47f aebe 	bne.w	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8003d9e:	e63e      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da0:	4963      	ldr	r1, [pc, #396]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003da2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003da4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003da8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003daa:	2d00      	cmp	r5, #0
 8003dac:	f47f ae9f 	bne.w	8003aee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003db0:	e647      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      ret = HAL_ERROR;
 8003db2:	2601      	movs	r6, #1
 8003db4:	4635      	mov	r5, r6
 8003db6:	e4d2      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 8003db8:	2603      	movs	r6, #3
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	4635      	mov	r5, r6
 8003dbe:	e489      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003dc0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003dc4:	f43f ad20 	beq.w	8003808 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003dc8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003dcc:	f43f ad1c 	beq.w	8003808 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003dd0:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8003dd4:	f43f ad18 	beq.w	8003808 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 8003dd8:	2601      	movs	r6, #1
 8003dda:	4635      	mov	r5, r6
 8003ddc:	e51f      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003dde:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003de2:	f43f ad31 	beq.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003de6:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8003dea:	f43f ad2d 	beq.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8003dee:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003df2:	f43f ad29 	beq.w	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 8003df6:	2601      	movs	r6, #1
 8003df8:	4635      	mov	r5, r6
 8003dfa:	e530      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003dfc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003e00:	f43f ad42 	beq.w	8003888 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003e04:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8003e08:	f43f ad3e 	beq.w	8003888 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003e0c:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8003e10:	f43f ad3a 	beq.w	8003888 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 8003e14:	2601      	movs	r6, #1
 8003e16:	4635      	mov	r5, r6
 8003e18:	e541      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e1a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8003e1e:	f43f ac00 	beq.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003e22:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003e26:	f43f abfc 	beq.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003e2a:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8003e2e:	f43f abf8 	beq.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 8003e32:	2601      	movs	r6, #1
 8003e34:	4635      	mov	r5, r6
 8003e36:	f7ff bbfe 	b.w	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e3a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003e3e:	f43f ac0f 	beq.w	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8003e42:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003e46:	f43f ac0b 	beq.w	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8003e4a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8003e4e:	f43f ac07 	beq.w	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 8003e52:	2601      	movs	r6, #1
 8003e54:	4635      	mov	r5, r6
 8003e56:	e40e      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e58:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8003e5c:	f43f ab70 	beq.w	8003540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003e60:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003e64:	f43f ab6c 	beq.w	8003540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 8003e68:	2601      	movs	r6, #1
 8003e6a:	4635      	mov	r5, r6
 8003e6c:	f7ff bb73 	b.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e70:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8003e74:	f43f ab86 	beq.w	8003584 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003e78:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8003e7c:	f43f ab82 	beq.w	8003584 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 8003e80:	2601      	movs	r6, #1
 8003e82:	4635      	mov	r5, r6
 8003e84:	f7ff bb89 	b.w	800359a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003e88:	2ac0      	cmp	r2, #192	; 0xc0
 8003e8a:	f43f ab38 	beq.w	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003e8e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003e92:	f43f ab34 	beq.w	80034fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8003e96:	2601      	movs	r6, #1
 8003e98:	4635      	mov	r5, r6
 8003e9a:	f7ff bb3a 	b.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e9e:	b9ba      	cbnz	r2, 8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea0:	4823      	ldr	r0, [pc, #140]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003ea2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003ea4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003ea8:	62c1      	str	r1, [r0, #44]	; 0x2c
 8003eaa:	f7ff baff 	b.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003eae:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8003eb2:	f43f ab98 	beq.w	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003eb6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003eba:	f43f ab94 	beq.w	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8003ebe:	2601      	movs	r6, #1
 8003ec0:	4635      	mov	r5, r6
 8003ec2:	f7ff bb9a 	b.w	80035fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	f43f ae7e 	beq.w	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003ecc:	f7ff bb73 	b.w	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 8003ed0:	2601      	movs	r6, #1
 8003ed2:	f7ff baf2 	b.w	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8003ed6:	f7fe f851 	bl	8001f7c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eda:	4f15      	ldr	r7, [pc, #84]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
        tickstart = HAL_GetTick();
 8003edc:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee2:	e006      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xa72>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fe f84a 	bl	8001f7c <HAL_GetTick>
 8003ee8:	eba0 0009 	sub.w	r0, r0, r9
 8003eec:	4540      	cmp	r0, r8
 8003eee:	f63f af63 	bhi.w	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x938>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ef4:	079b      	lsls	r3, r3, #30
 8003ef6:	d5f5      	bpl.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
 8003ef8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003efc:	e5e4      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efe:	480c      	ldr	r0, [pc, #48]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8003f00:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0xab4>)
 8003f02:	6901      	ldr	r1, [r0, #16]
 8003f04:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8003f08:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	6102      	str	r2, [r0, #16]
 8003f10:	e5e5      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8003f12:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003f14:	462e      	mov	r6, r5
 8003f16:	f7ff bbdd 	b.w	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 8003f1a:	2601      	movs	r6, #1
 8003f1c:	4635      	mov	r5, r6
 8003f1e:	e43d      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 8003f20:	2601      	movs	r6, #1
 8003f22:	4635      	mov	r5, r6
 8003f24:	e45b      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 8003f26:	2601      	movs	r6, #1
 8003f28:	4635      	mov	r5, r6
 8003f2a:	f7ff bbd0 	b.w	80036ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003f2e:	bf00      	nop
 8003f30:	58024400 	.word	0x58024400
 8003f34:	00ffffcf 	.word	0x00ffffcf

08003f38 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8003f38:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f3a:	f7fe ffa1 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003f40:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003f48:	5cd3      	ldrb	r3, [r2, r3]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
}
 8003f4e:	40d8      	lsrs	r0, r3
 8003f50:	bd08      	pop	{r3, pc}
 8003f52:	bf00      	nop
 8003f54:	58024400 	.word	0x58024400
 8003f58:	08007ca0 	.word	0x08007ca0

08003f5c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f5c:	4a46      	ldr	r2, [pc, #280]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 8003f5e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f60:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f62:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f66:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f6a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d059      	beq.n	8004024 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f70:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f74:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f78:	f004 0403 	and.w	r4, r4, #3
 8003f7c:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f80:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8003f84:	2c01      	cmp	r4, #1
 8003f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f8a:	ee06 1a90 	vmov	s13, r1
 8003f8e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8003f92:	d002      	beq.n	8003f9a <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8003f94:	d34e      	bcc.n	8004034 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8003f96:	2c02      	cmp	r4, #2
 8003f98:	d049      	beq.n	800402e <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f9a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800407c <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 8003f9e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003fa2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa8:	ee07 3a90 	vmov	s15, r3
 8003fac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fb4:	ee77 7a26 	vadd.f32	s15, s14, s13
 8003fb8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003fbc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003fc0:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8003fc2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003fc6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003fc8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003fcc:	ee06 3a90 	vmov	s13, r3
 8003fd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8003fd4:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003fd6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003fda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003fde:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003fe2:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003fe6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003fe8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003fec:	ee06 3a90 	vmov	s13, r3
 8003ff0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003ff4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003ff8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ffc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004000:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004004:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004006:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800400a:	ee07 3a10 	vmov	s14, r3
 800400e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004012:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004016:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800401a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800401e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004022:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004024:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004028:	6083      	str	r3, [r0, #8]
}
 800402a:	bc30      	pop	{r4, r5}
 800402c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800402e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004080 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8004032:	e7b4      	b.n	8003f9e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004034:	6813      	ldr	r3, [r2, #0]
 8004036:	069b      	lsls	r3, r3, #26
 8004038:	d51a      	bpl.n	8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800403a:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800403c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004040:	4910      	ldr	r1, [pc, #64]	; (8004084 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8004042:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004046:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004048:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800404a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404e:	ee07 1a10 	vmov	s14, r1
 8004052:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004056:	ee07 3a10 	vmov	s14, r3
 800405a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800405e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004062:	ee76 7a26 	vadd.f32	s15, s12, s13
 8004066:	ee77 7a85 	vadd.f32	s15, s15, s10
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	e7a7      	b.n	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004070:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8004074:	e793      	b.n	8003f9e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
 800407c:	4a742400 	.word	0x4a742400
 8004080:	4c189680 	.word	0x4c189680
 8004084:	03d09000 	.word	0x03d09000
 8004088:	4c742400 	.word	0x4c742400

0800408c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800408c:	4a46      	ldr	r2, [pc, #280]	; (80041a8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 800408e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004090:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004092:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004094:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004096:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800409a:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800409c:	2b00      	cmp	r3, #0
 800409e:	d059      	beq.n	8004154 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80040a0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80040a4:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040a8:	f004 0403 	and.w	r4, r4, #3
 80040ac:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80040b0:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80040b4:	2c01      	cmp	r4, #1
 80040b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ba:	ee06 1a90 	vmov	s13, r1
 80040be:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80040c2:	d002      	beq.n	80040ca <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 80040c4:	d34e      	bcc.n	8004164 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 80040c6:	2c02      	cmp	r4, #2
 80040c8:	d049      	beq.n	800415e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80040ca:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80041ac <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 80040ce:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80040d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80040d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d8:	ee07 3a90 	vmov	s15, r3
 80040dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80040e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040e4:	ee77 7a26 	vadd.f32	s15, s14, s13
 80040e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80040ec:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80040f0:	4a2d      	ldr	r2, [pc, #180]	; (80041a8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 80040f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80040f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80040f8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80040fc:	ee06 3a90 	vmov	s13, r3
 8004100:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8004104:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004106:	ee76 6a86 	vadd.f32	s13, s13, s12
 800410a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800410e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004112:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004116:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004118:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800411c:	ee06 3a90 	vmov	s13, r3
 8004120:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004124:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004128:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800412c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004130:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004134:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004136:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800413a:	ee07 3a10 	vmov	s14, r3
 800413e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004142:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004146:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800414a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800414e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8004152:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004154:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004158:	6083      	str	r3, [r0, #8]
}
 800415a:	bc30      	pop	{r4, r5}
 800415c:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800415e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8004162:	e7b4      	b.n	80040ce <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004164:	6813      	ldr	r3, [r2, #0]
 8004166:	069b      	lsls	r3, r3, #26
 8004168:	d51a      	bpl.n	80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800416a:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800416c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004170:	4910      	ldr	r1, [pc, #64]	; (80041b4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004172:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004176:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004178:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 1a10 	vmov	s14, r1
 8004182:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8004186:	ee07 3a10 	vmov	s14, r3
 800418a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800418e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004192:	ee76 7a26 	vadd.f32	s15, s12, s13
 8004196:	ee77 7a85 	vadd.f32	s15, s15, s10
 800419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419e:	e7a7      	b.n	80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041a0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80041b8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80041a4:	e793      	b.n	80040ce <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80041a6:	bf00      	nop
 80041a8:	58024400 	.word	0x58024400
 80041ac:	4a742400 	.word	0x4a742400
 80041b0:	4c189680 	.word	0x4c189680
 80041b4:	03d09000 	.word	0x03d09000
 80041b8:	4c742400 	.word	0x4c742400

080041bc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041bc:	2800      	cmp	r0, #0
 80041be:	d076      	beq.n	80042ae <HAL_TIM_Base_Init+0xf2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80041c4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80041c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041ca:	4604      	mov	r4, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d069      	beq.n	80042a4 <HAL_TIM_Base_Init+0xe8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80041d2:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d4:	493c      	ldr	r1, [pc, #240]	; (80042c8 <HAL_TIM_Base_Init+0x10c>)
 80041d6:	4e3d      	ldr	r6, [pc, #244]	; (80042cc <HAL_TIM_Base_Init+0x110>)
 80041d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80041dc:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80041e4:	eba2 0606 	sub.w	r6, r2, r6
  tmpcr1 = TIMx->CR1;
 80041e8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ea:	fab1 f181 	clz	r1, r1
 80041ee:	fab6 f686 	clz	r6, r6
 80041f2:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80041f6:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80041fa:	d018      	beq.n	800422e <HAL_TIM_Base_Init+0x72>
 80041fc:	b9b9      	cbnz	r1, 800422e <HAL_TIM_Base_Init+0x72>
 80041fe:	4834      	ldr	r0, [pc, #208]	; (80042d0 <HAL_TIM_Base_Init+0x114>)
 8004200:	4282      	cmp	r2, r0
 8004202:	d014      	beq.n	800422e <HAL_TIM_Base_Init+0x72>
 8004204:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004208:	4282      	cmp	r2, r0
 800420a:	d010      	beq.n	800422e <HAL_TIM_Base_Init+0x72>
 800420c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004210:	4282      	cmp	r2, r0
 8004212:	d04e      	beq.n	80042b2 <HAL_TIM_Base_Init+0xf6>
 8004214:	2e00      	cmp	r6, #0
 8004216:	d14c      	bne.n	80042b2 <HAL_TIM_Base_Init+0xf6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004218:	4d2e      	ldr	r5, [pc, #184]	; (80042d4 <HAL_TIM_Base_Init+0x118>)
 800421a:	482f      	ldr	r0, [pc, #188]	; (80042d8 <HAL_TIM_Base_Init+0x11c>)
 800421c:	4282      	cmp	r2, r0
 800421e:	bf18      	it	ne
 8004220:	42aa      	cmpne	r2, r5
 8004222:	d008      	beq.n	8004236 <HAL_TIM_Base_Init+0x7a>
 8004224:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004228:	4282      	cmp	r2, r0
 800422a:	d108      	bne.n	800423e <HAL_TIM_Base_Init+0x82>
 800422c:	e003      	b.n	8004236 <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004232:	68a0      	ldr	r0, [r4, #8]
 8004234:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800423a:	6920      	ldr	r0, [r4, #16]
 800423c:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800423e:	69a0      	ldr	r0, [r4, #24]
 8004240:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004244:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004246:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004248:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800424a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800424c:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800424e:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004250:	b951      	cbnz	r1, 8004268 <HAL_TIM_Base_Init+0xac>
 8004252:	b94e      	cbnz	r6, 8004268 <HAL_TIM_Base_Init+0xac>
 8004254:	491f      	ldr	r1, [pc, #124]	; (80042d4 <HAL_TIM_Base_Init+0x118>)
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_TIM_Base_Init+0x11c>)
 8004258:	429a      	cmp	r2, r3
 800425a:	bf18      	it	ne
 800425c:	428a      	cmpne	r2, r1
 800425e:	d003      	beq.n	8004268 <HAL_TIM_Base_Init+0xac>
 8004260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004264:	429a      	cmp	r2, r3
 8004266:	d101      	bne.n	800426c <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004268:	6963      	ldr	r3, [r4, #20]
 800426a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800426c:	2301      	movs	r3, #1
  return HAL_OK;
 800426e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004270:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004272:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004276:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800427a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800427e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004282:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004286:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800428a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004292:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004296:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800429a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800429e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80042a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80042a8:	f7fd fd48 	bl	8001d3c <HAL_TIM_Base_MspInit>
 80042ac:	e790      	b.n	80041d0 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80042ae:	2001      	movs	r0, #1
}
 80042b0:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b2:	480a      	ldr	r0, [pc, #40]	; (80042dc <HAL_TIM_Base_Init+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80042b8:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ba:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 80042bc:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042c0:	d0b9      	beq.n	8004236 <HAL_TIM_Base_Init+0x7a>
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	d1b7      	bne.n	8004236 <HAL_TIM_Base_Init+0x7a>
 80042c6:	e7a7      	b.n	8004218 <HAL_TIM_Base_Init+0x5c>
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40010400 	.word	0x40010400
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40000c00 	.word	0x40000c00

080042e0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80042e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 80042e8:	2001      	movs	r0, #1
 80042ea:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ee:	6802      	ldr	r2, [r0, #0]
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_TIM_Base_Start+0x34>)
  htim->State = HAL_TIM_STATE_BUSY;
 80042f2:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f6:	6891      	ldr	r1, [r2, #8]
 80042f8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d008      	beq.n	8004310 <HAL_TIM_Base_Start+0x30>
 80042fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004302:	d005      	beq.n	8004310 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8004304:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8004306:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4770      	bx	lr
  return HAL_OK;
 8004310:	2000      	movs	r0, #0
}
 8004312:	4770      	bx	lr
 8004314:	00010007 	.word	0x00010007

08004318 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004318:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800431c:	2b01      	cmp	r3, #1
 800431e:	f000 8081 	beq.w	8004424 <HAL_TIM_ConfigClockSource+0x10c>
 8004322:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR;
 8004326:	6813      	ldr	r3, [r2, #0]
{
 8004328:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800432a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800432e:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8004330:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004332:	4c56      	ldr	r4, [pc, #344]	; (800448c <HAL_TIM_ConfigClockSource+0x174>)
  __HAL_LOCK(htim);
 8004334:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004338:	4004      	ands	r4, r0
  switch (sClockSourceConfig->ClockSource)
 800433a:	6808      	ldr	r0, [r1, #0]
 800433c:	2860      	cmp	r0, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800433e:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004340:	d072      	beq.n	8004428 <HAL_TIM_ConfigClockSource+0x110>
 8004342:	d91f      	bls.n	8004384 <HAL_TIM_ConfigClockSource+0x6c>
 8004344:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 8004348:	f000 808a 	beq.w	8004460 <HAL_TIM_ConfigClockSource+0x148>
 800434c:	f200 8090 	bhi.w	8004470 <HAL_TIM_ConfigClockSource+0x158>
 8004350:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004354:	d03d      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0xba>
 8004356:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 800435a:	f000 8081 	beq.w	8004460 <HAL_TIM_ConfigClockSource+0x148>
 800435e:	2870      	cmp	r0, #112	; 0x70
 8004360:	d12e      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004362:	68cc      	ldr	r4, [r1, #12]
 8004364:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 8004368:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 800436c:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800436e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004372:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004376:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004378:	6099      	str	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800437a:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800437c:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004380:	6099      	str	r1, [r3, #8]
      break;
 8004382:	e01d      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8004384:	2820      	cmp	r0, #32
 8004386:	d06b      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x148>
 8004388:	d967      	bls.n	800445a <HAL_TIM_ConfigClockSource+0x142>
 800438a:	2840      	cmp	r0, #64	; 0x40
 800438c:	d032      	beq.n	80043f4 <HAL_TIM_ConfigClockSource+0xdc>
 800438e:	2850      	cmp	r0, #80	; 0x50
 8004390:	d178      	bne.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
  tmpccer = TIMx->CCER;
 8004392:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004394:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004398:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439c:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a0:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80043a2:	4334      	orrs	r4, r6
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a4:	493a      	ldr	r1, [pc, #232]	; (8004490 <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a8:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043aa:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043ae:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80043b2:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b4:	621c      	str	r4, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80043b6:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b8:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ba:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80043be:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 80043c0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80043c2:	2101      	movs	r1, #1
  return HAL_OK;
 80043c4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80043c6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043ca:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80043ce:	bcf0      	pop	{r4, r5, r6, r7}
 80043d0:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d2:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80043d6:	68cc      	ldr	r4, [r1, #12]
 80043d8:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80043dc:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043de:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e2:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e6:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 80043e8:	6099      	str	r1, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043ea:	6899      	ldr	r1, [r3, #8]
 80043ec:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80043f0:	6099      	str	r1, [r3, #8]
      break;
 80043f2:	e7e5      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0xa8>
  tmpccer = TIMx->CCER;
 80043f4:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f6:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f8:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043fa:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fe:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004402:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004404:	4334      	orrs	r4, r6
  tmpsmcr &= ~TIM_SMCR_TS;
 8004406:	4922      	ldr	r1, [pc, #136]	; (8004490 <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004408:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440a:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800440c:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004410:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004414:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8004416:	621c      	str	r4, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004418:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800441a:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800441c:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004420:	6099      	str	r1, [r3, #8]
 8004422:	e7cd      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0xa8>
  __HAL_LOCK(htim);
 8004424:	2002      	movs	r0, #2
}
 8004426:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004428:	6a1d      	ldr	r5, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800442a:	684e      	ldr	r6, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800442c:	f025 0510 	bic.w	r5, r5, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004430:	68cf      	ldr	r7, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004432:	4917      	ldr	r1, [pc, #92]	; (8004490 <HAL_TIM_ConfigClockSource+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004434:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004436:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 8004438:	6a18      	ldr	r0, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800443e:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004446:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800444a:	619c      	str	r4, [r3, #24]
  TIMx->CCER = tmpccer;
 800444c:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800444e:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004450:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004452:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004456:	6099      	str	r1, [r3, #8]
 8004458:	e7b2      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 800445a:	b108      	cbz	r0, 8004460 <HAL_TIM_ConfigClockSource+0x148>
 800445c:	2810      	cmp	r0, #16
 800445e:	d1af      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0xa8>
  tmpsmcr = TIMx->SMCR;
 8004460:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004462:	f040 0007 	orr.w	r0, r0, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004466:	490a      	ldr	r1, [pc, #40]	; (8004490 <HAL_TIM_ConfigClockSource+0x178>)
 8004468:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800446a:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800446c:	6098      	str	r0, [r3, #8]
 800446e:	e7a7      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8004470:	4908      	ldr	r1, [pc, #32]	; (8004494 <HAL_TIM_ConfigClockSource+0x17c>)
 8004472:	4288      	cmp	r0, r1
 8004474:	d0f4      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x148>
 8004476:	3110      	adds	r1, #16
 8004478:	4288      	cmp	r0, r1
 800447a:	d0f1      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x148>
 800447c:	3920      	subs	r1, #32
 800447e:	4288      	cmp	r0, r1
 8004480:	d19e      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0xa8>
 8004482:	e7ed      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x148>
 8004484:	2830      	cmp	r0, #48	; 0x30
 8004486:	d19b      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0xa8>
 8004488:	e7ea      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x148>
 800448a:	bf00      	nop
 800448c:	ffce0088 	.word	0xffce0088
 8004490:	ffcfff8f 	.word	0xffcfff8f
 8004494:	00100030 	.word	0x00100030

08004498 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004498:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d045      	beq.n	800452c <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a0:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044a2:	4a24      	ldr	r2, [pc, #144]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 80044a4:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044a6:	4e24      	ldr	r6, [pc, #144]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 80044aa:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044ac:	4293      	cmp	r3, r2
 80044ae:	bf18      	it	ne
 80044b0:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80044b2:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80044b6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044ba:	bf08      	it	eq
 80044bc:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 80044be:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044c0:	bf18      	it	ne
 80044c2:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 80044c4:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044c6:	d103      	bne.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044c8:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044cc:	684a      	ldr	r2, [r1, #4]
 80044ce:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d0:	4a1a      	ldr	r2, [pc, #104]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d6:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	4293      	cmp	r3, r2
 80044da:	bf18      	it	ne
 80044dc:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80044e0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8004548 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e4:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e8:	4f15      	ldr	r7, [pc, #84]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80044ea:	bf0c      	ite	eq
 80044ec:	2201      	moveq	r2, #1
 80044ee:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 80044f0:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f2:	4563      	cmp	r3, ip
 80044f4:	bf08      	it	eq
 80044f6:	f042 0201 	orreq.w	r2, r2, #1
 80044fa:	4c12      	ldr	r4, [pc, #72]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80044fc:	42bb      	cmp	r3, r7
 80044fe:	bf08      	it	eq
 8004500:	f042 0201 	orreq.w	r2, r2, #1
 8004504:	42a3      	cmp	r3, r4
 8004506:	bf08      	it	eq
 8004508:	f042 0201 	orreq.w	r2, r2, #1
 800450c:	b902      	cbnz	r2, 8004510 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800450e:	b126      	cbz	r6, 800451a <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004510:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004512:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004516:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004518:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800451a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800451c:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800451e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004522:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8004526:	4618      	mov	r0, r3
 8004528:	bcf0      	pop	{r4, r5, r6, r7}
 800452a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800452c:	2202      	movs	r2, #2
}
 800452e:	4610      	mov	r0, r2
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40010400 	.word	0x40010400
 8004538:	40010000 	.word	0x40010000
 800453c:	40000400 	.word	0x40000400
 8004540:	40000c00 	.word	0x40000c00
 8004544:	40001800 	.word	0x40001800
 8004548:	40000800 	.word	0x40000800

0800454c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800454c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004550:	2b21      	cmp	r3, #33	; 0x21
 8004552:	d000      	beq.n	8004556 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004554:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8004556:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800455a:	6802      	ldr	r2, [r0, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	b16b      	cbz	r3, 800457c <UART_TxISR_16BIT+0x30>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004560:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004562:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800456c:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
      huart->pTxBuffPtr += 2U;
 8004570:	6501      	str	r1, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8004572:	3b01      	subs	r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 800457a:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800457c:	6813      	ldr	r3, [r2, #0]
 800457e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004582:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004584:	6813      	ldr	r3, [r2, #0]
 8004586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop

08004590 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004590:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004594:	2b21      	cmp	r3, #33	; 0x21
 8004596:	d000      	beq.n	800459a <UART_TxISR_16BIT_FIFOEN+0xa>
 8004598:	4770      	bx	lr
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800459a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0fa      	beq.n	8004598 <UART_TxISR_16BIT_FIFOEN+0x8>
    {
      if (huart->TxXferCount == 0U)
 80045a2:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80045a6:	b292      	uxth	r2, r2
{
 80045a8:	b410      	push	{r4}
 80045aa:	6804      	ldr	r4, [r0, #0]
      if (huart->TxXferCount == 0U)
 80045ac:	b1c2      	cbz	r2, 80045e0 <UART_TxISR_16BIT_FIFOEN+0x50>
        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);

        break; /* force exit loop */
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80045ae:	69e2      	ldr	r2, [r4, #28]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045b0:	3b01      	subs	r3, #1
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80045b2:	f012 0f80 	tst.w	r2, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045b6:	b29b      	uxth	r3, r3
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80045b8:	d00c      	beq.n	80045d4 <UART_TxISR_16BIT_FIFOEN+0x44>
      {
        tmp = (uint16_t *) huart->pTxBuffPtr;
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80045ba:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80045bc:	f831 2b02 	ldrh.w	r2, [r1], #2
 80045c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c4:	62a2      	str	r2, [r4, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
        huart->TxXferCount--;
 80045c6:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
        huart->pTxBuffPtr += 2U;
 80045ca:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 80045cc:	3a01      	subs	r2, #1
 80045ce:	b292      	uxth	r2, r2
 80045d0:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045d4:	b163      	cbz	r3, 80045f0 <UART_TxISR_16BIT_FIFOEN+0x60>
      if (huart->TxXferCount == 0U)
 80045d6:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80045da:	b292      	uxth	r2, r2
 80045dc:	2a00      	cmp	r2, #0
 80045de:	d1e6      	bne.n	80045ae <UART_TxISR_16BIT_FIFOEN+0x1e>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80045e0:	68a3      	ldr	r3, [r4, #8]
 80045e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045e6:	60a3      	str	r3, [r4, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ee:	6023      	str	r3, [r4, #0]
      {
        /* Nothing to do */
      }
    }
  }
}
 80045f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop

080045f8 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045f8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80045fc:	2b21      	cmp	r3, #33	; 0x21
 80045fe:	d000      	beq.n	8004602 <UART_TxISR_8BIT+0xa>
}
 8004600:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8004602:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 8004606:	6802      	ldr	r2, [r0, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	b15b      	cbz	r3, 8004624 <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800460c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800460e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004612:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004614:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
      huart->pTxBuffPtr++;
 8004618:	6501      	str	r1, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800461a:	3b01      	subs	r3, #1
 800461c:	b29b      	uxth	r3, r3
 800461e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 8004622:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004624:	6813      	ldr	r3, [r2, #0]
 8004626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800462a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800462c:	6813      	ldr	r3, [r2, #0]
 800462e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop

08004638 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004638:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800463c:	2b21      	cmp	r3, #33	; 0x21
 800463e:	d000      	beq.n	8004642 <UART_TxISR_8BIT_FIFOEN+0xa>
 8004640:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004642:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0fa      	beq.n	8004640 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 800464a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800464e:	b292      	uxth	r2, r2
{
 8004650:	b410      	push	{r4}
 8004652:	6804      	ldr	r4, [r0, #0]
      if (huart->TxXferCount == 0U)
 8004654:	b1b2      	cbz	r2, 8004684 <UART_TxISR_8BIT_FIFOEN+0x4c>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004656:	69e2      	ldr	r2, [r4, #28]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004658:	3b01      	subs	r3, #1
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800465a:	f012 0f80 	tst.w	r2, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800465e:	b29b      	uxth	r3, r3
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004660:	d00a      	beq.n	8004678 <UART_TxISR_8BIT_FIFOEN+0x40>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004662:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004664:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004668:	62a2      	str	r2, [r4, #40]	; 0x28
        huart->TxXferCount--;
 800466a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
        huart->pTxBuffPtr++;
 800466e:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8004670:	3a01      	subs	r2, #1
 8004672:	b292      	uxth	r2, r2
 8004674:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004678:	b163      	cbz	r3, 8004694 <UART_TxISR_8BIT_FIFOEN+0x5c>
      if (huart->TxXferCount == 0U)
 800467a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800467e:	b292      	uxth	r2, r2
 8004680:	2a00      	cmp	r2, #0
 8004682:	d1e8      	bne.n	8004656 <UART_TxISR_8BIT_FIFOEN+0x1e>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004684:	68a3      	ldr	r3, [r4, #8]
 8004686:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800468a:	60a3      	str	r3, [r4, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004692:	6023      	str	r3, [r4, #0]
}
 8004694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop

0800469c <HAL_UART_Transmit_IT>:
{
 800469c:	4603      	mov	r3, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800469e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80046a2:	2820      	cmp	r0, #32
 80046a4:	d12e      	bne.n	8004704 <HAL_UART_Transmit_IT+0x68>
    if ((pData == NULL) || (Size == 0U))
 80046a6:	b359      	cbz	r1, 8004700 <HAL_UART_Transmit_IT+0x64>
 80046a8:	fab2 f082 	clz	r0, r2
 80046ac:	0940      	lsrs	r0, r0, #5
 80046ae:	bb38      	cbnz	r0, 8004700 <HAL_UART_Transmit_IT+0x64>
{
 80046b0:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 80046b2:	f893 407c 	ldrb.w	r4, [r3, #124]	; 0x7c
 80046b6:	2c01      	cmp	r4, #1
 80046b8:	d035      	beq.n	8004726 <HAL_UART_Transmit_IT+0x8a>
    huart->pTxBuffPtr  = pData;
 80046ba:	6519      	str	r1, [r3, #80]	; 0x50
    __HAL_LOCK(huart);
 80046bc:	2501      	movs	r5, #1
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80046be:	6e59      	ldr	r1, [r3, #100]	; 0x64
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c0:	2421      	movs	r4, #33	; 0x21
    huart->TxXferCount = Size;
 80046c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80046c6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    huart->TxXferSize  = Size;
 80046ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxISR       = NULL;
 80046d2:	6718      	str	r0, [r3, #112]	; 0x70
    __HAL_LOCK(huart);
 80046d4:	f883 507c 	strb.w	r5, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d8:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 80046dc:	689a      	ldr	r2, [r3, #8]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80046de:	d013      	beq.n	8004708 <HAL_UART_Transmit_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80046e4:	d021      	beq.n	800472a <HAL_UART_Transmit_IT+0x8e>
        huart->TxISR = UART_TxISR_8BIT;
 80046e6:	4a18      	ldr	r2, [pc, #96]	; (8004748 <HAL_UART_Transmit_IT+0xac>)
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80046e8:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(huart);
 80046ea:	2400      	movs	r4, #0
 80046ec:	671a      	str	r2, [r3, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80046ee:	680a      	ldr	r2, [r1, #0]
    return HAL_OK;
 80046f0:	4620      	mov	r0, r4
      __HAL_UNLOCK(huart);
 80046f2:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80046f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046fa:	600a      	str	r2, [r1, #0]
}
 80046fc:	bc30      	pop	{r4, r5}
 80046fe:	4770      	bx	lr
      return HAL_ERROR;
 8004700:	2001      	movs	r0, #1
}
 8004702:	4770      	bx	lr
    return HAL_BUSY;
 8004704:	2002      	movs	r0, #2
 8004706:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800470c:	d014      	beq.n	8004738 <HAL_UART_Transmit_IT+0x9c>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800470e:	4a0f      	ldr	r2, [pc, #60]	; (800474c <HAL_UART_Transmit_IT+0xb0>)
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004710:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(huart);
 8004712:	2400      	movs	r4, #0
 8004714:	671a      	str	r2, [r3, #112]	; 0x70
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004716:	688a      	ldr	r2, [r1, #8]
    return HAL_OK;
 8004718:	4620      	mov	r0, r4
      __HAL_UNLOCK(huart);
 800471a:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800471e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004722:	608a      	str	r2, [r1, #8]
 8004724:	e7ea      	b.n	80046fc <HAL_UART_Transmit_IT+0x60>
    return HAL_BUSY;
 8004726:	2002      	movs	r0, #2
 8004728:	e7e8      	b.n	80046fc <HAL_UART_Transmit_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472a:	6918      	ldr	r0, [r3, #16]
        huart->TxISR = UART_TxISR_16BIT;
 800472c:	4a06      	ldr	r2, [pc, #24]	; (8004748 <HAL_UART_Transmit_IT+0xac>)
 800472e:	4908      	ldr	r1, [pc, #32]	; (8004750 <HAL_UART_Transmit_IT+0xb4>)
 8004730:	2800      	cmp	r0, #0
 8004732:	bf08      	it	eq
 8004734:	460a      	moveq	r2, r1
 8004736:	e7d7      	b.n	80046e8 <HAL_UART_Transmit_IT+0x4c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004738:	6918      	ldr	r0, [r3, #16]
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800473a:	4a04      	ldr	r2, [pc, #16]	; (800474c <HAL_UART_Transmit_IT+0xb0>)
 800473c:	4905      	ldr	r1, [pc, #20]	; (8004754 <HAL_UART_Transmit_IT+0xb8>)
 800473e:	2800      	cmp	r0, #0
 8004740:	bf08      	it	eq
 8004742:	460a      	moveq	r2, r1
 8004744:	e7e4      	b.n	8004710 <HAL_UART_Transmit_IT+0x74>
 8004746:	bf00      	nop
 8004748:	080045f9 	.word	0x080045f9
 800474c:	08004639 	.word	0x08004639
 8004750:	0800454d 	.word	0x0800454d
 8004754:	08004591 	.word	0x08004591

08004758 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004758:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800475c:	2b20      	cmp	r3, #32
 800475e:	d13d      	bne.n	80047dc <HAL_UART_Receive_IT+0x84>
    if ((pData == NULL) || (Size == 0U))
 8004760:	2900      	cmp	r1, #0
 8004762:	d039      	beq.n	80047d8 <HAL_UART_Receive_IT+0x80>
 8004764:	fab2 f382 	clz	r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2b00      	cmp	r3, #0
 800476c:	d134      	bne.n	80047d8 <HAL_UART_Receive_IT+0x80>
{
 800476e:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(huart);
 8004770:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8004774:	2c01      	cmp	r4, #1
 8004776:	d062      	beq.n	800483e <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 8004778:	6884      	ldr	r4, [r0, #8]
    __HAL_LOCK(huart);
 800477a:	2501      	movs	r5, #1
    huart->pRxBuffPtr  = pData;
 800477c:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800477e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    __HAL_LOCK(huart);
 8004782:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize  = Size;
 8004786:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 800478a:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 800478e:	66c3      	str	r3, [r0, #108]	; 0x6c
 8004790:	6801      	ldr	r1, [r0, #0]
 8004792:	6e45      	ldr	r5, [r0, #100]	; 0x64
    UART_MASK_COMPUTATION(huart);
 8004794:	d024      	beq.n	80047e0 <HAL_UART_Receive_IT+0x88>
 8004796:	2c00      	cmp	r4, #0
 8004798:	d146      	bne.n	8004828 <HAL_UART_Receive_IT+0xd0>
 800479a:	6903      	ldr	r3, [r0, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d066      	beq.n	800486e <HAL_UART_Receive_IT+0x116>
 80047a0:	237f      	movs	r3, #127	; 0x7f
 80047a2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a6:	2400      	movs	r4, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047a8:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047aa:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047ae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b2:	688b      	ldr	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80047b4:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80047be:	d020      	beq.n	8004802 <HAL_UART_Receive_IT+0xaa>
        huart->RxISR = UART_RxISR_8BIT;
 80047c0:	4c31      	ldr	r4, [pc, #196]	; (8004888 <HAL_UART_Receive_IT+0x130>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80047c2:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 80047c4:	2300      	movs	r3, #0
 80047c6:	66c4      	str	r4, [r0, #108]	; 0x6c
 80047c8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80047cc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return HAL_OK;
 80047d0:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80047d2:	600a      	str	r2, [r1, #0]
}
 80047d4:	bc70      	pop	{r4, r5, r6}
 80047d6:	4770      	bx	lr
      return HAL_ERROR;
 80047d8:	2001      	movs	r0, #1
}
 80047da:	4770      	bx	lr
    return HAL_BUSY;
 80047dc:	2002      	movs	r0, #2
 80047de:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80047e0:	6904      	ldr	r4, [r0, #16]
 80047e2:	b374      	cbz	r4, 8004842 <HAL_UART_Receive_IT+0xea>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e4:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 80047ea:	24ff      	movs	r4, #255	; 0xff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80047ec:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047f0:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 80047f6:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004800:	d1de      	bne.n	80047c0 <HAL_UART_Receive_IT+0x68>
 8004802:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8004806:	4293      	cmp	r3, r2
 8004808:	d8da      	bhi.n	80047c0 <HAL_UART_Receive_IT+0x68>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800480a:	4c20      	ldr	r4, [pc, #128]	; (800488c <HAL_UART_Receive_IT+0x134>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800480c:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 800480e:	2300      	movs	r3, #0
 8004810:	66c4      	str	r4, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8004816:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    return HAL_OK;
 800481a:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800481c:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800481e:	688b      	ldr	r3, [r1, #8]
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004824:	608b      	str	r3, [r1, #8]
 8004826:	e7d5      	b.n	80047d4 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 8004828:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800482c:	d023      	beq.n	8004876 <HAL_UART_Receive_IT+0x11e>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800482e:	2422      	movs	r4, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004830:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8004834:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004838:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 800483c:	e7b9      	b.n	80047b2 <HAL_UART_Receive_IT+0x5a>
    return HAL_BUSY;
 800483e:	2002      	movs	r0, #2
 8004840:	e7c8      	b.n	80047d4 <HAL_UART_Receive_IT+0x7c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004842:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004848:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 800484c:	f240 14ff 	movw	r4, #511	; 0x1ff
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004850:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8004856:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004860:	d103      	bne.n	800486a <HAL_UART_Receive_IT+0x112>
 8004862:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8004866:	4293      	cmp	r3, r2
 8004868:	d90c      	bls.n	8004884 <HAL_UART_Receive_IT+0x12c>
        huart->RxISR = UART_RxISR_16BIT;
 800486a:	4c09      	ldr	r4, [pc, #36]	; (8004890 <HAL_UART_Receive_IT+0x138>)
 800486c:	e7a9      	b.n	80047c2 <HAL_UART_Receive_IT+0x6a>
    UART_MASK_COMPUTATION(huart);
 800486e:	23ff      	movs	r3, #255	; 0xff
 8004870:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004874:	e797      	b.n	80047a6 <HAL_UART_Receive_IT+0x4e>
 8004876:	6903      	ldr	r3, [r0, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d091      	beq.n	80047a0 <HAL_UART_Receive_IT+0x48>
 800487c:	233f      	movs	r3, #63	; 0x3f
 800487e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8004882:	e790      	b.n	80047a6 <HAL_UART_Receive_IT+0x4e>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004884:	4c03      	ldr	r4, [pc, #12]	; (8004894 <HAL_UART_Receive_IT+0x13c>)
 8004886:	e7c1      	b.n	800480c <HAL_UART_Receive_IT+0xb4>
 8004888:	08004899 	.word	0x08004899
 800488c:	08004955 	.word	0x08004955
 8004890:	080048f9 	.word	0x080048f9
 8004894:	08004a0d 	.word	0x08004a0d

08004898 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004898:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800489c:	6802      	ldr	r2, [r0, #0]
 800489e:	2922      	cmp	r1, #34	; 0x22
{
 80048a0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048a2:	d004      	beq.n	80048ae <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048a4:	6993      	ldr	r3, [r2, #24]
 80048a6:	f043 0308 	orr.w	r3, r3, #8
 80048aa:	6193      	str	r3, [r2, #24]
  }
}
 80048ac:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048b0:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80048b4:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80048b6:	4022      	ands	r2, r4
 80048b8:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 80048ba:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 80048be:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80048c0:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 80048c2:	3101      	adds	r1, #1
    huart->RxXferCount--;
 80048c4:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 80048c6:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80048c8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80048cc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80048d0:	b292      	uxth	r2, r2
 80048d2:	2a00      	cmp	r2, #0
 80048d4:	d1ea      	bne.n	80048ac <UART_RxISR_8BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048d6:	6801      	ldr	r1, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 80048d8:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048da:	680c      	ldr	r4, [r1, #0]
 80048dc:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80048e0:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	688c      	ldr	r4, [r1, #8]
 80048e4:	f024 0401 	bic.w	r4, r4, #1
 80048e8:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 80048ea:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 80048ec:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 80048f0:	f7fd f99e 	bl	8001c30 <HAL_UART_RxCpltCallback>
}
 80048f4:	bd38      	pop	{r3, r4, r5, pc}
 80048f6:	bf00      	nop

080048f8 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048f8:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 80048fc:	6802      	ldr	r2, [r0, #0]
 80048fe:	2922      	cmp	r1, #34	; 0x22
{
 8004900:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004902:	d004      	beq.n	800490e <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004904:	6993      	ldr	r3, [r2, #24]
 8004906:	f043 0308 	orr.w	r3, r3, #8
 800490a:	6193      	str	r3, [r2, #24]
  }
}
 800490c:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800490e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8004910:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 8004914:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8004916:	4029      	ands	r1, r5
 8004918:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 800491c:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8004920:	6584      	str	r4, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8004922:	3901      	subs	r1, #1
 8004924:	b289      	uxth	r1, r1
 8004926:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800492a:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800492e:	b289      	uxth	r1, r1
 8004930:	2900      	cmp	r1, #0
 8004932:	d1eb      	bne.n	800490c <UART_RxISR_16BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004934:	6814      	ldr	r4, [r2, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8004936:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004938:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800493c:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493e:	6894      	ldr	r4, [r2, #8]
 8004940:	f024 0401 	bic.w	r4, r4, #1
 8004944:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 8004946:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8004948:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 800494c:	f7fd f970 	bl	8001c30 <HAL_UART_RxCpltCallback>
}
 8004950:	bd38      	pop	{r3, r4, r5, pc}
 8004952:	bf00      	nop

08004954 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004954:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004958:	2b22      	cmp	r3, #34	; 0x22
 800495a:	d005      	beq.n	8004968 <UART_RxISR_8BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800495c:	6802      	ldr	r2, [r0, #0]
 800495e:	6993      	ldr	r3, [r2, #24]
 8004960:	f043 0308 	orr.w	r3, r3, #8
 8004964:	6193      	str	r3, [r2, #24]
 8004966:	4770      	bx	lr
{
 8004968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800496c:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8004970:	2d00      	cmp	r5, #0
 8004972:	d043      	beq.n	80049fc <UART_RxISR_8BIT_FIFOEN+0xa8>
 8004974:	4604      	mov	r4, r0
 8004976:	f890 8060 	ldrb.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 800497a:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800497c:	4e21      	ldr	r6, [pc, #132]	; (8004a04 <UART_RxISR_8BIT_FIFOEN+0xb0>)
 800497e:	e002      	b.n	8004986 <UART_RxISR_8BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004980:	3d01      	subs	r5, #1
 8004982:	b2ad      	uxth	r5, r5
 8004984:	b32d      	cbz	r5, 80049d2 <UART_RxISR_8BIT_FIFOEN+0x7e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004986:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004988:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800498c:	ea08 0303 	and.w	r3, r8, r3
 8004990:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8004992:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 8004996:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8004998:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 800499a:	3201      	adds	r2, #1
      huart->RxXferCount--;
 800499c:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 800499e:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80049a0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80049a4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e8      	bne.n	8004980 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ae:	6822      	ldr	r2, [r4, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80049b0:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 80049b2:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b4:	6811      	ldr	r1, [r2, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80049b6:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80049bc:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049be:	6891      	ldr	r1, [r2, #8]
 80049c0:	4031      	ands	r1, r6
 80049c2:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80049c4:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80049c8:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80049ca:	f7fd f931 	bl	8001c30 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80049ce:	2d00      	cmp	r5, #0
 80049d0:	d1d9      	bne.n	8004986 <UART_RxISR_8BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 80049d2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80049d6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80049d8:	b173      	cbz	r3, 80049f8 <UART_RxISR_8BIT_FIFOEN+0xa4>
 80049da:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80049de:	429a      	cmp	r2, r3
 80049e0:	d90a      	bls.n	80049f8 <UART_RxISR_8BIT_FIFOEN+0xa4>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049e2:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 80049e4:	4908      	ldr	r1, [pc, #32]	; (8004a08 <UART_RxISR_8BIT_FIFOEN+0xb4>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80049ec:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80049ee:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 80049f0:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80049f2:	f042 0220 	orr.w	r2, r2, #32
 80049f6:	601a      	str	r2, [r3, #0]
  }
}
 80049f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 80049fc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004a00:	e7fa      	b.n	80049f8 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8004a02:	bf00      	nop
 8004a04:	effffffe 	.word	0xeffffffe
 8004a08:	08004899 	.word	0x08004899

08004a0c <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a0c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004a10:	2b22      	cmp	r3, #34	; 0x22
 8004a12:	d005      	beq.n	8004a20 <UART_RxISR_16BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a14:	6802      	ldr	r2, [r0, #0]
 8004a16:	6993      	ldr	r3, [r2, #24]
 8004a18:	f043 0308 	orr.w	r3, r3, #8
 8004a1c:	6193      	str	r3, [r2, #24]
 8004a1e:	4770      	bx	lr
{
 8004a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004a24:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	d041      	beq.n	8004ab0 <UART_RxISR_16BIT_FIFOEN+0xa4>
 8004a2c:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 8004a2e:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8004a32:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a34:	4e20      	ldr	r6, [pc, #128]	; (8004ab8 <UART_RxISR_16BIT_FIFOEN+0xac>)
 8004a36:	e002      	b.n	8004a3e <UART_RxISR_16BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004a38:	3d01      	subs	r5, #1
 8004a3a:	b2ad      	uxth	r5, r5
 8004a3c:	b31d      	cbz	r5, 8004a86 <UART_RxISR_16BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a3e:	6821      	ldr	r1, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8004a40:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a42:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8004a44:	ea08 0303 	and.w	r3, r8, r3
 8004a48:	f822 3b02 	strh.w	r3, [r2], #2
      huart->RxXferCount--;
 8004a4c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8004a50:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8004a5a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e9      	bne.n	8004a38 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a64:	680a      	ldr	r2, [r1, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004a66:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8004a68:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004a6e:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a70:	600a      	str	r2, [r1, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a72:	688a      	ldr	r2, [r1, #8]
 8004a74:	4032      	ands	r2, r6
 8004a76:	608a      	str	r2, [r1, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8004a78:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8004a7c:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8004a7e:	f7fd f8d7 	bl	8001c30 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	d1db      	bne.n	8004a3e <UART_RxISR_16BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 8004a86:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004a8a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004a8c:	b173      	cbz	r3, 8004aac <UART_RxISR_16BIT_FIFOEN+0xa0>
 8004a8e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d90a      	bls.n	8004aac <UART_RxISR_16BIT_FIFOEN+0xa0>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a96:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8004a98:	4908      	ldr	r1, [pc, #32]	; (8004abc <UART_RxISR_16BIT_FIFOEN+0xb0>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004aa0:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004aa2:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8004aa4:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004aa6:	f042 0220 	orr.w	r2, r2, #32
 8004aaa:	601a      	str	r2, [r3, #0]
  }
}
 8004aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8004ab0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004ab4:	e7fa      	b.n	8004aac <UART_RxISR_16BIT_FIFOEN+0xa0>
 8004ab6:	bf00      	nop
 8004ab8:	effffffe 	.word	0xeffffffe
 8004abc:	080048f9 	.word	0x080048f9

08004ac0 <HAL_UART_ErrorCallback>:
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop

08004ac4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ac4:	6802      	ldr	r2, [r0, #0]
{
 8004ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004aca:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004acc:	f640 050f 	movw	r5, #2063	; 0x80f
{
 8004ad0:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ad2:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 8004ad4:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ad6:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8004ad8:	d070      	beq.n	8004bbc <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ada:	4d73      	ldr	r5, [pc, #460]	; (8004ca8 <HAL_UART_IRQHandler+0x1e4>)
 8004adc:	400d      	ands	r5, r1
 8004ade:	f000 808f 	beq.w	8004c00 <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ae2:	07df      	lsls	r7, r3, #31
 8004ae4:	d509      	bpl.n	8004afa <HAL_UART_IRQHandler+0x36>
 8004ae6:	05c6      	lsls	r6, r0, #23
 8004ae8:	d507      	bpl.n	8004afa <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004aea:	2601      	movs	r6, #1
 8004aec:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aee:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8004af2:	f046 0601 	orr.w	r6, r6, #1
 8004af6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004afa:	079f      	lsls	r7, r3, #30
 8004afc:	f003 0604 	and.w	r6, r3, #4
 8004b00:	f140 8093 	bpl.w	8004c2a <HAL_UART_IRQHandler+0x166>
 8004b04:	07cf      	lsls	r7, r1, #31
 8004b06:	d50a      	bpl.n	8004b1e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b08:	2702      	movs	r7, #2
 8004b0a:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b0c:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 8004b10:	f047 0704 	orr.w	r7, r7, #4
 8004b14:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b18:	2e00      	cmp	r6, #0
 8004b1a:	f040 808c 	bne.w	8004c36 <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b1e:	071f      	lsls	r7, r3, #28
 8004b20:	d505      	bpl.n	8004b2e <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b22:	0686      	lsls	r6, r0, #26
 8004b24:	f100 8097 	bmi.w	8004c56 <HAL_UART_IRQHandler+0x192>
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	f040 8094 	bne.w	8004c56 <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b2e:	051f      	lsls	r7, r3, #20
 8004b30:	d50a      	bpl.n	8004b48 <HAL_UART_IRQHandler+0x84>
 8004b32:	0146      	lsls	r6, r0, #5
 8004b34:	d508      	bpl.n	8004b48 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b36:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004b3a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b3c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8004b40:	f045 0520 	orr.w	r5, r5, #32
 8004b44:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b48:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8004b4c:	2d00      	cmp	r5, #0
 8004b4e:	d06a      	beq.n	8004c26 <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b50:	069d      	lsls	r5, r3, #26
 8004b52:	d507      	bpl.n	8004b64 <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b54:	0680      	lsls	r0, r0, #26
 8004b56:	f140 808b 	bpl.w	8004c70 <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 8004b5a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004b5c:	b113      	cbz	r3, 8004b64 <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4798      	blx	r3
 8004b62:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8004b64:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b68:	6891      	ldr	r1, [r2, #8]
 8004b6a:	064f      	lsls	r7, r1, #25
 8004b6c:	d403      	bmi.n	8004b76 <HAL_UART_IRQHandler+0xb2>
 8004b6e:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8004b72:	f000 8093 	beq.w	8004c9c <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b76:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004b78:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b7a:	4b4c      	ldr	r3, [pc, #304]	; (8004cac <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 8004b7c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b7e:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8004b82:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b84:	6891      	ldr	r1, [r2, #8]
 8004b86:	400b      	ands	r3, r1
 8004b88:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8e:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8004b90:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b92:	065e      	lsls	r6, r3, #25
 8004b94:	d568      	bpl.n	8004c68 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b96:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8004b98:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9e:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8004ba0:	2900      	cmp	r1, #0
 8004ba2:	d061      	beq.n	8004c68 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ba4:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ba6:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ba8:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004baa:	f7fd fa75 	bl	8002098 <HAL_DMA_Abort_IT>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d039      	beq.n	8004c26 <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bb2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8004bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bb8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004bba:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bbc:	069f      	lsls	r7, r3, #26
 8004bbe:	d509      	bpl.n	8004bd4 <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004bc0:	0686      	lsls	r6, r0, #26
 8004bc2:	d505      	bpl.n	8004bd0 <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 8004bc4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004bc6:	b373      	cbz	r3, 8004c26 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8004bc8:	4620      	mov	r0, r4
}
 8004bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8004bce:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bd0:	00cd      	lsls	r5, r1, #3
 8004bd2:	d4f7      	bmi.n	8004bc4 <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bd4:	02dd      	lsls	r5, r3, #11
 8004bd6:	d409      	bmi.n	8004bec <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004bd8:	061e      	lsls	r6, r3, #24
 8004bda:	d51a      	bpl.n	8004c12 <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004bdc:	0605      	lsls	r5, r0, #24
 8004bde:	d516      	bpl.n	8004c0e <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 8004be0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004be2:	b303      	cbz	r3, 8004c26 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8004be4:	4620      	mov	r0, r4
}
 8004be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8004bea:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bec:	024f      	lsls	r7, r1, #9
 8004bee:	d5f3      	bpl.n	8004bd8 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004bf4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bf6:	6213      	str	r3, [r2, #32]
}
 8004bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004bfc:	f000 bc64 	b.w	80054c8 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c00:	4e2c      	ldr	r6, [pc, #176]	; (8004cb4 <HAL_UART_IRQHandler+0x1f0>)
 8004c02:	4230      	tst	r0, r6
 8004c04:	d0e6      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c06:	07df      	lsls	r7, r3, #31
 8004c08:	f57f af77 	bpl.w	8004afa <HAL_UART_IRQHandler+0x36>
 8004c0c:	e76b      	b.n	8004ae6 <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c0e:	020f      	lsls	r7, r1, #8
 8004c10:	d4e6      	bmi.n	8004be0 <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c12:	065e      	lsls	r6, r3, #25
 8004c14:	d501      	bpl.n	8004c1a <HAL_UART_IRQHandler+0x156>
 8004c16:	0645      	lsls	r5, r0, #25
 8004c18:	d42e      	bmi.n	8004c78 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c1a:	0219      	lsls	r1, r3, #8
 8004c1c:	d414      	bmi.n	8004c48 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	d501      	bpl.n	8004c26 <HAL_UART_IRQHandler+0x162>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	db35      	blt.n	8004c92 <HAL_UART_IRQHandler+0x1ce>
}
 8004c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c2a:	2e00      	cmp	r6, #0
 8004c2c:	f43f af77 	beq.w	8004b1e <HAL_UART_IRQHandler+0x5a>
 8004c30:	07ce      	lsls	r6, r1, #31
 8004c32:	f57f af74 	bpl.w	8004b1e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c36:	2604      	movs	r6, #4
 8004c38:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c3a:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8004c3e:	f046 0602 	orr.w	r6, r6, #2
 8004c42:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8004c46:	e76a      	b.n	8004b1e <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c48:	0042      	lsls	r2, r0, #1
 8004c4a:	d5e8      	bpl.n	8004c1e <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c4c:	4620      	mov	r0, r4
}
 8004c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c52:	f000 bc3d 	b.w	80054d0 <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c56:	2508      	movs	r5, #8
 8004c58:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c5a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8004c5e:	f045 0508 	orr.w	r5, r5, #8
 8004c62:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8004c66:	e762      	b.n	8004b2e <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7ff ff29 	bl	8004ac0 <HAL_UART_ErrorCallback>
 8004c6e:	e7da      	b.n	8004c26 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c70:	00cb      	lsls	r3, r1, #3
 8004c72:	f57f af77 	bpl.w	8004b64 <HAL_UART_IRQHandler+0xa0>
 8004c76:	e770      	b.n	8004b5a <HAL_UART_IRQHandler+0x96>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c78:	6813      	ldr	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c7a:	2520      	movs	r5, #32
  huart->TxISR = NULL;
 8004c7c:	2100      	movs	r1, #0
  HAL_UART_TxCpltCallback(huart);
 8004c7e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c84:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004c86:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8004c8a:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8004c8c:	f7fc ffca 	bl	8001c24 <HAL_UART_TxCpltCallback>
 8004c90:	e7c9      	b.n	8004c26 <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c92:	4620      	mov	r0, r4
}
 8004c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c98:	f000 bc18 	b.w	80054cc <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f7ff ff0f 	bl	8004ac0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca2:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8004ca6:	e7be      	b.n	8004c26 <HAL_UART_IRQHandler+0x162>
 8004ca8:	10000001 	.word	0x10000001
 8004cac:	effffffe 	.word	0xeffffffe
 8004cb0:	08004cb9 	.word	0x08004cb9
 8004cb4:	04000120 	.word	0x04000120

08004cb8 <UART_DMAAbortOnError>:
{
 8004cb8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8004cba:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8004cbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 8004cc2:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8004cc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8004cc8:	f7ff fefa 	bl	8004ac0 <HAL_UART_ErrorCallback>
}
 8004ccc:	bd08      	pop	{r3, pc}
 8004cce:	bf00      	nop

08004cd0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cd2:	07da      	lsls	r2, r3, #31
{
 8004cd4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd6:	d506      	bpl.n	8004ce6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd8:	6801      	ldr	r1, [r0, #0]
 8004cda:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004cdc:	684a      	ldr	r2, [r1, #4]
 8004cde:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004ce2:	4322      	orrs	r2, r4
 8004ce4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ce6:	079c      	lsls	r4, r3, #30
 8004ce8:	d506      	bpl.n	8004cf8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cea:	6801      	ldr	r1, [r0, #0]
 8004cec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004cee:	684a      	ldr	r2, [r1, #4]
 8004cf0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004cf4:	4322      	orrs	r2, r4
 8004cf6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cf8:	0759      	lsls	r1, r3, #29
 8004cfa:	d506      	bpl.n	8004d0a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cfc:	6801      	ldr	r1, [r0, #0]
 8004cfe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004d00:	684a      	ldr	r2, [r1, #4]
 8004d02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d06:	4322      	orrs	r2, r4
 8004d08:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d0a:	071a      	lsls	r2, r3, #28
 8004d0c:	d506      	bpl.n	8004d1c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0e:	6801      	ldr	r1, [r0, #0]
 8004d10:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004d12:	684a      	ldr	r2, [r1, #4]
 8004d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d18:	4322      	orrs	r2, r4
 8004d1a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d1c:	06dc      	lsls	r4, r3, #27
 8004d1e:	d506      	bpl.n	8004d2e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d20:	6801      	ldr	r1, [r0, #0]
 8004d22:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004d24:	688a      	ldr	r2, [r1, #8]
 8004d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d2a:	4322      	orrs	r2, r4
 8004d2c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2e:	0699      	lsls	r1, r3, #26
 8004d30:	d506      	bpl.n	8004d40 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d32:	6801      	ldr	r1, [r0, #0]
 8004d34:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004d36:	688a      	ldr	r2, [r1, #8]
 8004d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d3c:	4322      	orrs	r2, r4
 8004d3e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d40:	065a      	lsls	r2, r3, #25
 8004d42:	d50a      	bpl.n	8004d5a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d44:	6801      	ldr	r1, [r0, #0]
 8004d46:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004d48:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d4a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d4e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004d52:	ea42 0204 	orr.w	r2, r2, r4
 8004d56:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d58:	d00b      	beq.n	8004d72 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d5a:	061b      	lsls	r3, r3, #24
 8004d5c:	d506      	bpl.n	8004d6c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d5e:	6802      	ldr	r2, [r0, #0]
 8004d60:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004d62:	6853      	ldr	r3, [r2, #4]
 8004d64:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6053      	str	r3, [r2, #4]
}
 8004d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d70:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d72:	684a      	ldr	r2, [r1, #4]
 8004d74:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004d76:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004d7a:	4322      	orrs	r2, r4
 8004d7c:	604a      	str	r2, [r1, #4]
 8004d7e:	e7ec      	b.n	8004d5a <UART_AdvFeatureConfig+0x8a>

08004d80 <HAL_UART_Init>:
  if (huart == NULL)
 8004d80:	2800      	cmp	r0, #0
 8004d82:	f000 80d2 	beq.w	8004f2a <HAL_UART_Init+0x1aa>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004d86:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8004d8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d8e:	4604      	mov	r4, r0
 8004d90:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d058      	beq.n	8004e48 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 8004d96:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d9a:	6921      	ldr	r1, [r4, #16]
 8004d9c:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d9e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da2:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 8004da4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da6:	6960      	ldr	r0, [r4, #20]
 8004da8:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8004daa:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dae:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db0:	48a1      	ldr	r0, [pc, #644]	; (8005038 <HAL_UART_Init+0x2b8>)
  __HAL_UART_DISABLE(huart);
 8004db2:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db6:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004db8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dba:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dbc:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004dbe:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dc0:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dc4:	4e9d      	ldr	r6, [pc, #628]	; (800503c <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dc6:	4302      	orrs	r2, r0
 8004dc8:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dca:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dcc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004dd4:	ea42 0207 	orr.w	r2, r2, r7
 8004dd8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dda:	f000 808b 	beq.w	8004ef4 <HAL_UART_Init+0x174>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dde:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8004de0:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de2:	4897      	ldr	r0, [pc, #604]	; (8005040 <HAL_UART_Init+0x2c0>)
    tmpreg |= huart->Init.OneBitSampling;
 8004de4:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de8:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dea:	4e96      	ldr	r6, [pc, #600]	; (8005044 <HAL_UART_Init+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dec:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dee:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004df0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	f022 020f 	bic.w	r2, r2, #15
 8004df8:	ea42 0205 	orr.w	r2, r2, r5
 8004dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dfe:	d028      	beq.n	8004e52 <HAL_UART_Init+0xd2>
 8004e00:	4a91      	ldr	r2, [pc, #580]	; (8005048 <HAL_UART_Init+0x2c8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	f000 810e 	beq.w	8005024 <HAL_UART_Init+0x2a4>
 8004e08:	4a90      	ldr	r2, [pc, #576]	; (800504c <HAL_UART_Init+0x2cc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	f000 8100 	beq.w	8005010 <HAL_UART_Init+0x290>
 8004e10:	4a8f      	ldr	r2, [pc, #572]	; (8005050 <HAL_UART_Init+0x2d0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	f000 829e 	beq.w	8005354 <HAL_UART_Init+0x5d4>
 8004e18:	4a8e      	ldr	r2, [pc, #568]	; (8005054 <HAL_UART_Init+0x2d4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	f000 82a4 	beq.w	8005368 <HAL_UART_Init+0x5e8>
 8004e20:	4a8d      	ldr	r2, [pc, #564]	; (8005058 <HAL_UART_Init+0x2d8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	f000 82aa 	beq.w	800537c <HAL_UART_Init+0x5fc>
 8004e28:	4a8c      	ldr	r2, [pc, #560]	; (800505c <HAL_UART_Init+0x2dc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	f000 82c5 	beq.w	80053ba <HAL_UART_Init+0x63a>
 8004e30:	4a8b      	ldr	r2, [pc, #556]	; (8005060 <HAL_UART_Init+0x2e0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d16f      	bne.n	8004f16 <HAL_UART_Init+0x196>
 8004e36:	4b8b      	ldr	r3, [pc, #556]	; (8005064 <HAL_UART_Init+0x2e4>)
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	d869      	bhi.n	8004f16 <HAL_UART_Init+0x196>
 8004e42:	4a89      	ldr	r2, [pc, #548]	; (8005068 <HAL_UART_Init+0x2e8>)
 8004e44:	5cd3      	ldrb	r3, [r2, r3]
 8004e46:	e00c      	b.n	8004e62 <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 8004e48:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8004e4c:	f7fc ffc4 	bl	8001dd8 <HAL_UART_MspInit>
 8004e50:	e7a1      	b.n	8004d96 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e52:	4b84      	ldr	r3, [pc, #528]	; (8005064 <HAL_UART_Init+0x2e4>)
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e5a:	2b28      	cmp	r3, #40	; 0x28
 8004e5c:	d85b      	bhi.n	8004f16 <HAL_UART_Init+0x196>
 8004e5e:	4a83      	ldr	r2, [pc, #524]	; (800506c <HAL_UART_Init+0x2ec>)
 8004e60:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e62:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004e66:	f000 810f 	beq.w	8005088 <HAL_UART_Init+0x308>
    switch (clocksource)
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d853      	bhi.n	8004f16 <HAL_UART_Init+0x196>
 8004e6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e72:	0209      	.short	0x0209
 8004e74:	0052020c 	.word	0x0052020c
 8004e78:	02040052 	.word	0x02040052
 8004e7c:	00520052 	.word	0x00520052
 8004e80:	01fc0052 	.word	0x01fc0052
 8004e84:	00520052 	.word	0x00520052
 8004e88:	00520052 	.word	0x00520052
 8004e8c:	00520052 	.word	0x00520052
 8004e90:	01d00052 	.word	0x01d00052
 8004e94:	00520052 	.word	0x00520052
 8004e98:	00520052 	.word	0x00520052
 8004e9c:	00520052 	.word	0x00520052
 8004ea0:	00520052 	.word	0x00520052
 8004ea4:	00520052 	.word	0x00520052
 8004ea8:	00520052 	.word	0x00520052
 8004eac:	00520052 	.word	0x00520052
 8004eb0:	02120052 	.word	0x02120052
 8004eb4:	00520052 	.word	0x00520052
 8004eb8:	00520052 	.word	0x00520052
 8004ebc:	00520052 	.word	0x00520052
 8004ec0:	00520052 	.word	0x00520052
 8004ec4:	00520052 	.word	0x00520052
 8004ec8:	00520052 	.word	0x00520052
 8004ecc:	00520052 	.word	0x00520052
 8004ed0:	00520052 	.word	0x00520052
 8004ed4:	00520052 	.word	0x00520052
 8004ed8:	00520052 	.word	0x00520052
 8004edc:	00520052 	.word	0x00520052
 8004ee0:	00520052 	.word	0x00520052
 8004ee4:	00520052 	.word	0x00520052
 8004ee8:	00520052 	.word	0x00520052
 8004eec:	00520052 	.word	0x00520052
 8004ef0:	020f0052 	.word	0x020f0052
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef4:	6898      	ldr	r0, [r3, #8]
 8004ef6:	4a52      	ldr	r2, [pc, #328]	; (8005040 <HAL_UART_Init+0x2c0>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef8:	495a      	ldr	r1, [pc, #360]	; (8005064 <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004efa:	4002      	ands	r2, r0
 8004efc:	ea42 020c 	orr.w	r2, r2, ip
 8004f00:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	f022 020f 	bic.w	r2, r2, #15
 8004f08:	432a      	orrs	r2, r5
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	d90b      	bls.n	8004f2e <HAL_UART_Init+0x1ae>
  huart->RxISR = NULL;
 8004f16:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8004f18:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8004f1c:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8004f1e:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8004f20:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 8004f24:	b007      	add	sp, #28
 8004f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 8004f2a:	2001      	movs	r0, #1
}
 8004f2c:	4770      	bx	lr
    switch (clocksource)
 8004f2e:	4a50      	ldr	r2, [pc, #320]	; (8005070 <HAL_UART_Init+0x2f0>)
 8004f30:	5cd3      	ldrb	r3, [r2, r3]
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	f000 823c 	beq.w	80053b0 <HAL_UART_Init+0x630>
 8004f38:	f240 822a 	bls.w	8005390 <HAL_UART_Init+0x610>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	f000 81ac 	beq.w	800529a <HAL_UART_Init+0x51a>
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	f000 8245 	beq.w	80053d2 <HAL_UART_Init+0x652>
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d1e4      	bne.n	8004f16 <HAL_UART_Init+0x196>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f4c:	680b      	ldr	r3, [r1, #0]
 8004f4e:	069f      	lsls	r7, r3, #26
 8004f50:	f140 8242 	bpl.w	80053d8 <HAL_UART_Init+0x658>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f54:	680b      	ldr	r3, [r1, #0]
 8004f56:	4847      	ldr	r0, [pc, #284]	; (8005074 <HAL_UART_Init+0x2f4>)
 8004f58:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004f5c:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f5e:	4b46      	ldr	r3, [pc, #280]	; (8005078 <HAL_UART_Init+0x2f8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f60:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f62:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f66:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f6a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f6e:	428b      	cmp	r3, r1
 8004f70:	d3d1      	bcc.n	8004f16 <HAL_UART_Init+0x196>
 8004f72:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8004f76:	d8ce      	bhi.n	8004f16 <HAL_UART_Init+0x196>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f78:	2500      	movs	r5, #0
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	0877      	lsrs	r7, r6, #1
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb fa06 	bl	8000390 <__aeabi_uldivmod>
 8004f84:	4632      	mov	r2, r6
 8004f86:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8004f8a:	462b      	mov	r3, r5
 8004f8c:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8004f90:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8004f94:	eb18 0007 	adds.w	r0, r8, r7
 8004f98:	f149 0100 	adc.w	r1, r9, #0
 8004f9c:	f7fb f9f8 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fa0:	4b36      	ldr	r3, [pc, #216]	; (800507c <HAL_UART_Init+0x2fc>)
 8004fa2:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d8b5      	bhi.n	8004f16 <HAL_UART_Init+0x196>
          huart->Instance->BRR = usartdiv;
 8004faa:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8004fac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8004fb0:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 8004fb2:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004fb4:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 8151 	bne.w	8005262 <HAL_UART_Init+0x4e2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc0:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc2:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fd2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 8004fe0:	f7fc ffcc 	bl	8001f7c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004fe6:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	0711      	lsls	r1, r2, #28
 8004fec:	f100 80d4 	bmi.w	8005198 <HAL_UART_Init+0x418>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	0750      	lsls	r0, r2, #29
 8004ff4:	f100 80f9 	bmi.w	80051ea <HAL_UART_Init+0x46a>
  __HAL_UNLOCK(huart);
 8004ff8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004ffa:	2220      	movs	r2, #32
  return HAL_OK;
 8004ffc:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8004ffe:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8005002:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 800500a:	b007      	add	sp, #28
 800500c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005010:	4b14      	ldr	r3, [pc, #80]	; (8005064 <HAL_UART_Init+0x2e4>)
 8005012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	2b05      	cmp	r3, #5
 800501a:	f63f af7c 	bhi.w	8004f16 <HAL_UART_Init+0x196>
 800501e:	4a18      	ldr	r2, [pc, #96]	; (8005080 <HAL_UART_Init+0x300>)
 8005020:	5cd3      	ldrb	r3, [r2, r3]
 8005022:	e71e      	b.n	8004e62 <HAL_UART_Init+0xe2>
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_UART_Init+0x2e4>)
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	2b05      	cmp	r3, #5
 800502e:	f63f af72 	bhi.w	8004f16 <HAL_UART_Init+0x196>
 8005032:	4a14      	ldr	r2, [pc, #80]	; (8005084 <HAL_UART_Init+0x304>)
 8005034:	5cd3      	ldrb	r3, [r2, r3]
 8005036:	e714      	b.n	8004e62 <HAL_UART_Init+0xe2>
 8005038:	cfff69f3 	.word	0xcfff69f3
 800503c:	58000c00 	.word	0x58000c00
 8005040:	11fff4ff 	.word	0x11fff4ff
 8005044:	40011000 	.word	0x40011000
 8005048:	40004400 	.word	0x40004400
 800504c:	40004800 	.word	0x40004800
 8005050:	40004c00 	.word	0x40004c00
 8005054:	40005000 	.word	0x40005000
 8005058:	40011400 	.word	0x40011400
 800505c:	40007800 	.word	0x40007800
 8005060:	40007c00 	.word	0x40007c00
 8005064:	58024400 	.word	0x58024400
 8005068:	08007dd0 	.word	0x08007dd0
 800506c:	08007da4 	.word	0x08007da4
 8005070:	08007dd8 	.word	0x08007dd8
 8005074:	03d09000 	.word	0x03d09000
 8005078:	08007de0 	.word	0x08007de0
 800507c:	000ffcff 	.word	0x000ffcff
 8005080:	08007dd0 	.word	0x08007dd0
 8005084:	08007dd0 	.word	0x08007dd0
    switch (clocksource)
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	f63f af44 	bhi.w	8004f16 <HAL_UART_Init+0x196>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <HAL_UART_Init+0x314>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	0800530b 	.word	0x0800530b
 8005098:	08005305 	.word	0x08005305
 800509c:	08004f17 	.word	0x08004f17
 80050a0:	08004f17 	.word	0x08004f17
 80050a4:	08005311 	.word	0x08005311
 80050a8:	08004f17 	.word	0x08004f17
 80050ac:	08004f17 	.word	0x08004f17
 80050b0:	08004f17 	.word	0x08004f17
 80050b4:	080052f7 	.word	0x080052f7
 80050b8:	08004f17 	.word	0x08004f17
 80050bc:	08004f17 	.word	0x08004f17
 80050c0:	08004f17 	.word	0x08004f17
 80050c4:	08004f17 	.word	0x08004f17
 80050c8:	08004f17 	.word	0x08004f17
 80050cc:	08004f17 	.word	0x08004f17
 80050d0:	08004f17 	.word	0x08004f17
 80050d4:	0800529f 	.word	0x0800529f
 80050d8:	08004f17 	.word	0x08004f17
 80050dc:	08004f17 	.word	0x08004f17
 80050e0:	08004f17 	.word	0x08004f17
 80050e4:	08004f17 	.word	0x08004f17
 80050e8:	08004f17 	.word	0x08004f17
 80050ec:	08004f17 	.word	0x08004f17
 80050f0:	08004f17 	.word	0x08004f17
 80050f4:	08004f17 	.word	0x08004f17
 80050f8:	08004f17 	.word	0x08004f17
 80050fc:	08004f17 	.word	0x08004f17
 8005100:	08004f17 	.word	0x08004f17
 8005104:	08004f17 	.word	0x08004f17
 8005108:	08004f17 	.word	0x08004f17
 800510c:	08004f17 	.word	0x08004f17
 8005110:	08004f17 	.word	0x08004f17
 8005114:	0800531b 	.word	0x0800531b
 8005118:	08004f17 	.word	0x08004f17
 800511c:	08004f17 	.word	0x08004f17
 8005120:	08004f17 	.word	0x08004f17
 8005124:	08004f17 	.word	0x08004f17
 8005128:	08004f17 	.word	0x08004f17
 800512c:	08004f17 	.word	0x08004f17
 8005130:	08004f17 	.word	0x08004f17
 8005134:	08004f17 	.word	0x08004f17
 8005138:	08004f17 	.word	0x08004f17
 800513c:	08004f17 	.word	0x08004f17
 8005140:	08004f17 	.word	0x08004f17
 8005144:	08004f17 	.word	0x08004f17
 8005148:	08004f17 	.word	0x08004f17
 800514c:	08004f17 	.word	0x08004f17
 8005150:	08004f17 	.word	0x08004f17
 8005154:	08004f17 	.word	0x08004f17
 8005158:	08004f17 	.word	0x08004f17
 800515c:	08004f17 	.word	0x08004f17
 8005160:	08004f17 	.word	0x08004f17
 8005164:	08004f17 	.word	0x08004f17
 8005168:	08004f17 	.word	0x08004f17
 800516c:	08004f17 	.word	0x08004f17
 8005170:	08004f17 	.word	0x08004f17
 8005174:	08004f17 	.word	0x08004f17
 8005178:	08004f17 	.word	0x08004f17
 800517c:	08004f17 	.word	0x08004f17
 8005180:	08004f17 	.word	0x08004f17
 8005184:	08004f17 	.word	0x08004f17
 8005188:	08004f17 	.word	0x08004f17
 800518c:	08004f17 	.word	0x08004f17
 8005190:	08004f17 	.word	0x08004f17
 8005194:	0800531f 	.word	0x0800531f
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005198:	69dd      	ldr	r5, [r3, #28]
 800519a:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800519e:	f47f af27 	bne.w	8004ff0 <HAL_UART_Init+0x270>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fc feeb 	bl	8001f7c <HAL_GetTick>
 80051a6:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051a8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051aa:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80051ae:	f080 80c0 	bcs.w	8005332 <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	0752      	lsls	r2, r2, #29
 80051b6:	d5ef      	bpl.n	8005198 <HAL_UART_Init+0x418>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	0517      	lsls	r7, r2, #20
 80051bc:	d5ec      	bpl.n	8005198 <HAL_UART_Init+0x418>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051be:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 80051c2:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80051c4:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051c6:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80051ce:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	f021 0101 	bic.w	r1, r1, #1
 80051d6:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80051d8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 80051dc:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80051e0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 80051e8:	e69c      	b.n	8004f24 <HAL_UART_Init+0x1a4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ea:	69dd      	ldr	r5, [r3, #28]
 80051ec:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 80051f0:	f47f af02 	bne.w	8004ff8 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f4:	f7fc fec2 	bl	8001f7c <HAL_GetTick>
 80051f8:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051fa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fc:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8005200:	f080 8097 	bcs.w	8005332 <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	0751      	lsls	r1, r2, #29
 8005208:	d5ef      	bpl.n	80051ea <HAL_UART_Init+0x46a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	0512      	lsls	r2, r2, #20
 800520e:	d5ec      	bpl.n	80051ea <HAL_UART_Init+0x46a>
 8005210:	e7d5      	b.n	80051be <HAL_UART_Init+0x43e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005212:	4b73      	ldr	r3, [pc, #460]	; (80053e0 <HAL_UART_Init+0x660>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	0690      	lsls	r0, r2, #26
 8005218:	f140 80d9 	bpl.w	80053ce <HAL_UART_Init+0x64e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4871      	ldr	r0, [pc, #452]	; (80053e4 <HAL_UART_Init+0x664>)
 8005220:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005224:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005226:	4b70      	ldr	r3, [pc, #448]	; (80053e8 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005228:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800522c:	6862      	ldr	r2, [r4, #4]
 800522e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8005232:	fbb0 f3f3 	udiv	r3, r0, r3
 8005236:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800523a:	fbb3 f3f2 	udiv	r3, r3, r2
 800523e:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005240:	f1a3 0210 	sub.w	r2, r3, #16
 8005244:	428a      	cmp	r2, r1
 8005246:	f63f ae66 	bhi.w	8004f16 <HAL_UART_Init+0x196>
        huart->Instance->BRR = usartdiv;
 800524a:	6820      	ldr	r0, [r4, #0]
  huart->NbTxDataToProcess = 1;
 800524c:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 800524e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 8005252:	60c3      	str	r3, [r0, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 8005256:	6722      	str	r2, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 8005258:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800525c:	2b00      	cmp	r3, #0
 800525e:	f43f aeaf 	beq.w	8004fc0 <HAL_UART_Init+0x240>
    UART_AdvFeatureConfig(huart);
 8005262:	4620      	mov	r0, r4
 8005264:	f7ff fd34 	bl	8004cd0 <UART_AdvFeatureConfig>
 8005268:	e6aa      	b.n	8004fc0 <HAL_UART_Init+0x240>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800526a:	a803      	add	r0, sp, #12
 800526c:	f7fe ff0e 	bl	800408c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005270:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8005272:	2800      	cmp	r0, #0
 8005274:	d056      	beq.n	8005324 <HAL_UART_Init+0x5a4>
 8005276:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005278:	e7d5      	b.n	8005226 <HAL_UART_Init+0x4a6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800527a:	4668      	mov	r0, sp
 800527c:	f7fe fe6e 	bl	8003f5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005280:	9801      	ldr	r0, [sp, #4]
 8005282:	e7f6      	b.n	8005272 <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005284:	f7fd fea4 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8005288:	e7f3      	b.n	8005272 <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 800528a:	f7fd ff51 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 800528e:	e7f0      	b.n	8005272 <HAL_UART_Init+0x4f2>
        pclk = (uint32_t) LSE_VALUE;
 8005290:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005294:	e7c7      	b.n	8005226 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8005296:	4855      	ldr	r0, [pc, #340]	; (80053ec <HAL_UART_Init+0x66c>)
 8005298:	e7c5      	b.n	8005226 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 800529a:	4854      	ldr	r0, [pc, #336]	; (80053ec <HAL_UART_Init+0x66c>)
 800529c:	e65f      	b.n	8004f5e <HAL_UART_Init+0x1de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800529e:	4b50      	ldr	r3, [pc, #320]	; (80053e0 <HAL_UART_Init+0x660>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	0696      	lsls	r6, r2, #26
 80052a4:	f140 809a 	bpl.w	80053dc <HAL_UART_Init+0x65c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	484e      	ldr	r0, [pc, #312]	; (80053e4 <HAL_UART_Init+0x664>)
 80052ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80052b0:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b2:	4b4d      	ldr	r3, [pc, #308]	; (80053e8 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b8:	6862      	ldr	r2, [r4, #4]
 80052ba:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 80052be:	0853      	lsrs	r3, r2, #1
 80052c0:	fbb0 f0f5 	udiv	r0, r0, r5
 80052c4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80052c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80052cc:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ce:	f1a2 0010 	sub.w	r0, r2, #16
 80052d2:	4288      	cmp	r0, r1
 80052d4:	f63f ae1f 	bhi.w	8004f16 <HAL_UART_Init+0x196>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052d8:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052dc:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->NbTxDataToProcess = 1;
 80052e0:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 80052e2:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e4:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 80052e6:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 80052ee:	6721      	str	r1, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 80052f0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 80052f4:	e660      	b.n	8004fb8 <HAL_UART_Init+0x238>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052f6:	a803      	add	r0, sp, #12
 80052f8:	f7fe fec8 	bl	800408c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052fc:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80052fe:	b188      	cbz	r0, 8005324 <HAL_UART_Init+0x5a4>
 8005300:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005302:	e7d6      	b.n	80052b2 <HAL_UART_Init+0x532>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005304:	f7fd ff14 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 8005308:	e7f9      	b.n	80052fe <HAL_UART_Init+0x57e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800530a:	f7fd fe61 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 800530e:	e7f6      	b.n	80052fe <HAL_UART_Init+0x57e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005310:	4668      	mov	r0, sp
 8005312:	f7fe fe23 	bl	8003f5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005316:	9801      	ldr	r0, [sp, #4]
 8005318:	e7f1      	b.n	80052fe <HAL_UART_Init+0x57e>
        pclk = (uint32_t) CSI_VALUE;
 800531a:	4834      	ldr	r0, [pc, #208]	; (80053ec <HAL_UART_Init+0x66c>)
 800531c:	e7c9      	b.n	80052b2 <HAL_UART_Init+0x532>
        pclk = (uint32_t) LSE_VALUE;
 800531e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005322:	e7c6      	b.n	80052b2 <HAL_UART_Init+0x532>
  huart->RxISR = NULL;
 8005324:	2300      	movs	r3, #0
 8005326:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 800532a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 800532c:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8005330:	e642      	b.n	8004fb8 <HAL_UART_Init+0x238>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005332:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8005334:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8005336:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005338:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800533c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005346:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 800534a:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800534e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 8005352:	e5e7      	b.n	8004f24 <HAL_UART_Init+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005354:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <HAL_UART_Init+0x660>)
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	2b05      	cmp	r3, #5
 800535e:	f63f adda 	bhi.w	8004f16 <HAL_UART_Init+0x196>
 8005362:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <HAL_UART_Init+0x670>)
 8005364:	5cd3      	ldrb	r3, [r2, r3]
 8005366:	e57c      	b.n	8004e62 <HAL_UART_Init+0xe2>
 8005368:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <HAL_UART_Init+0x660>)
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	2b05      	cmp	r3, #5
 8005372:	f63f add0 	bhi.w	8004f16 <HAL_UART_Init+0x196>
 8005376:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <HAL_UART_Init+0x674>)
 8005378:	5cd3      	ldrb	r3, [r2, r3]
 800537a:	e572      	b.n	8004e62 <HAL_UART_Init+0xe2>
 800537c:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <HAL_UART_Init+0x660>)
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005384:	2b28      	cmp	r3, #40	; 0x28
 8005386:	f63f adc6 	bhi.w	8004f16 <HAL_UART_Init+0x196>
 800538a:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <HAL_UART_Init+0x678>)
 800538c:	5cd3      	ldrb	r3, [r2, r3]
 800538e:	e568      	b.n	8004e62 <HAL_UART_Init+0xe2>
    switch (clocksource)
 8005390:	2b02      	cmp	r3, #2
 8005392:	d00a      	beq.n	80053aa <HAL_UART_Init+0x62a>
 8005394:	2b04      	cmp	r3, #4
 8005396:	f47f adbe 	bne.w	8004f16 <HAL_UART_Init+0x196>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800539a:	4668      	mov	r0, sp
 800539c:	f7fe fdde 	bl	8003f5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053a0:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d0be      	beq.n	8005324 <HAL_UART_Init+0x5a4>
 80053a6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80053a8:	e5d9      	b.n	8004f5e <HAL_UART_Init+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053aa:	f7fe fdc5 	bl	8003f38 <HAL_RCCEx_GetD3PCLK1Freq>
 80053ae:	e7f8      	b.n	80053a2 <HAL_UART_Init+0x622>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053b0:	a803      	add	r0, sp, #12
 80053b2:	f7fe fe6b 	bl	800408c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053b6:	9804      	ldr	r0, [sp, #16]
 80053b8:	e7f3      	b.n	80053a2 <HAL_UART_Init+0x622>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <HAL_UART_Init+0x660>)
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	f63f ada7 	bhi.w	8004f16 <HAL_UART_Init+0x196>
 80053c8:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <HAL_UART_Init+0x67c>)
 80053ca:	5cd3      	ldrb	r3, [r2, r3]
 80053cc:	e549      	b.n	8004e62 <HAL_UART_Init+0xe2>
          pclk = (uint32_t) HSI_VALUE;
 80053ce:	4805      	ldr	r0, [pc, #20]	; (80053e4 <HAL_UART_Init+0x664>)
 80053d0:	e729      	b.n	8005226 <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80053d6:	e5c2      	b.n	8004f5e <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 80053d8:	4802      	ldr	r0, [pc, #8]	; (80053e4 <HAL_UART_Init+0x664>)
 80053da:	e5c0      	b.n	8004f5e <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <HAL_UART_Init+0x664>)
 80053de:	e768      	b.n	80052b2 <HAL_UART_Init+0x532>
 80053e0:	58024400 	.word	0x58024400
 80053e4:	03d09000 	.word	0x03d09000
 80053e8:	08007de0 	.word	0x08007de0
 80053ec:	003d0900 	.word	0x003d0900
 80053f0:	08007dd0 	.word	0x08007dd0
 80053f4:	08007dd0 	.word	0x08007dd0
 80053f8:	08007da4 	.word	0x08007da4
 80053fc:	08007dd0 	.word	0x08007dd0

08005400 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	2300      	movs	r3, #0
{
 8005402:	b570      	push	{r4, r5, r6, lr}
 8005404:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005406:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800540a:	f7fc fdb7 	bl	8001f7c <HAL_GetTick>
 800540e:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	0710      	lsls	r0, r2, #28
 8005416:	d40c      	bmi.n	8005432 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	0750      	lsls	r0, r2, #29
 800541c:	d430      	bmi.n	8005480 <UART_CheckIdleState+0x80>
  huart->gState = HAL_UART_STATE_READY;
 800541e:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8005420:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005422:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  return HAL_OK;
 8005426:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8005428:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800542c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8005430:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005432:	69dd      	ldr	r5, [r3, #28]
 8005434:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8005438:	d1ee      	bne.n	8005418 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543a:	f7fc fd9f 	bl	8001f7c <HAL_GetTick>
 800543e:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005440:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8005446:	d22d      	bcs.n	80054a4 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	0751      	lsls	r1, r2, #29
 800544c:	d5f1      	bpl.n	8005432 <UART_CheckIdleState+0x32>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	0512      	lsls	r2, r2, #20
 8005452:	d5ee      	bpl.n	8005432 <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005454:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8005458:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800545a:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800545c:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8005464:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005466:	6899      	ldr	r1, [r3, #8]
 8005468:	f021 0101 	bic.w	r1, r1, #1
 800546c:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800546e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8005472:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005476:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800547a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800547e:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005480:	69dd      	ldr	r5, [r3, #28]
 8005482:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8005486:	d1ca      	bne.n	800541e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005488:	f7fc fd78 	bl	8001f7c <HAL_GetTick>
 800548c:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800548e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005490:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8005494:	d206      	bcs.n	80054a4 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	0751      	lsls	r1, r2, #29
 800549a:	d5f1      	bpl.n	8005480 <UART_CheckIdleState+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	0512      	lsls	r2, r2, #20
 80054a0:	d5ee      	bpl.n	8005480 <UART_CheckIdleState+0x80>
 80054a2:	e7d7      	b.n	8005454 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054a4:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80054a6:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80054a8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80054b8:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80054bc:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80054c0:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 80054c4:	bd70      	pop	{r4, r5, r6, pc}
 80054c6:	bf00      	nop

080054c8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop

080054cc <HAL_UARTEx_RxFifoFullCallback>:
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop

080054d0 <HAL_UARTEx_TxFifoEmptyCallback>:
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop

080054d4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054d4:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80054d8:	2a01      	cmp	r2, #1
 80054da:	d017      	beq.n	800550c <HAL_UARTEx_DisableFifoMode+0x38>
 80054dc:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 80054de:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054e0:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054e2:	681a      	ldr	r2, [r3, #0]
{
 80054e4:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 80054e6:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80054ea:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054ec:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 80054ee:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 80054f0:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054f2:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80054f6:	f025 0501 	bic.w	r5, r5, #1
 80054fa:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054fc:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054fe:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005500:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8005504:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8005508:	bc70      	pop	{r4, r5, r6}
 800550a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800550c:	2002      	movs	r0, #2
}
 800550e:	4770      	bx	lr

08005510 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005510:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8005514:	2a01      	cmp	r2, #1
 8005516:	d046      	beq.n	80055a6 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 8005518:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 800551a:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800551c:	681a      	ldr	r2, [r3, #0]
{
 800551e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8005520:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8005524:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005526:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005528:	6810      	ldr	r0, [r2, #0]
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800552a:	4d20      	ldr	r5, [pc, #128]	; (80055ac <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 800552c:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005530:	4e1f      	ldr	r6, [pc, #124]	; (80055b0 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005532:	9500      	str	r5, [sp, #0]
 8005534:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8005538:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800553a:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800553c:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800553e:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005542:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005546:	9602      	str	r6, [sp, #8]
 8005548:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800554c:	4301      	orrs	r1, r0

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800554e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005550:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005552:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005554:	b320      	cbz	r0, 80055a0 <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005556:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005558:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800555a:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800555c:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005560:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005564:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005566:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800556a:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 800556e:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005572:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005574:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005576:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800557a:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800557e:	fb90 f0f5 	sdiv	r0, r0, r5
 8005582:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8005586:	2100      	movs	r1, #0
 8005588:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800558c:	2520      	movs	r5, #32
  return HAL_OK;
 800558e:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005590:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005592:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8005596:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 800559a:	b004      	add	sp, #16
 800559c:	bcf0      	pop	{r4, r5, r6, r7}
 800559e:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80055a0:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80055a2:	4608      	mov	r0, r1
 80055a4:	e7ed      	b.n	8005582 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 80055a6:	2002      	movs	r0, #2
}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	03010101 	.word	0x03010101
 80055b0:	04020408 	.word	0x04020408

080055b4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80055b4:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80055b8:	2a01      	cmp	r2, #1
 80055ba:	d046      	beq.n	800564a <HAL_UARTEx_SetRxFifoThreshold+0x96>
 80055bc:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80055be:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c0:	681a      	ldr	r2, [r3, #0]
{
 80055c2:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80055c4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 80055c8:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ca:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80055cc:	6810      	ldr	r0, [r2, #0]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80055ce:	4d20      	ldr	r5, [pc, #128]	; (8005650 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 80055d0:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80055d4:	4e1f      	ldr	r6, [pc, #124]	; (8005654 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80055d6:	9500      	str	r5, [sp, #0]
 80055d8:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 80055dc:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055de:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80055e0:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80055e2:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055e6:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80055ea:	9602      	str	r6, [sp, #8]
 80055ec:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055f0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055f2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80055f4:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055f6:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055f8:	b320      	cbz	r0, 8005644 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055fa:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80055fc:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055fe:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005600:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005604:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005608:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800560a:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800560e:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8005612:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005616:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005618:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800561a:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800561e:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005622:	fb90 f0f5 	sdiv	r0, r0, r5
 8005626:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800562a:	2100      	movs	r1, #0
 800562c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8005630:	2520      	movs	r5, #32
  return HAL_OK;
 8005632:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005634:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005636:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800563a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 800563e:	b004      	add	sp, #16
 8005640:	bcf0      	pop	{r4, r5, r6, r7}
 8005642:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8005644:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005646:	4608      	mov	r0, r1
 8005648:	e7ed      	b.n	8005626 <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 800564a:	2002      	movs	r0, #2
}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	03010101 	.word	0x03010101
 8005654:	04020408 	.word	0x04020408

08005658 <arm_std_f32>:
 8005658:	2901      	cmp	r1, #1
 800565a:	d065      	beq.n	8005728 <arm_std_f32+0xd0>
 800565c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8005744 <arm_std_f32+0xec>
 8005660:	b530      	push	{r4, r5, lr}
 8005662:	088d      	lsrs	r5, r1, #2
 8005664:	b083      	sub	sp, #12
 8005666:	d062      	beq.n	800572e <arm_std_f32+0xd6>
 8005668:	eef0 6a65 	vmov.f32	s13, s11
 800566c:	f100 0310 	add.w	r3, r0, #16
 8005670:	462c      	mov	r4, r5
 8005672:	ed53 7a04 	vldr	s15, [r3, #-16]
 8005676:	3c01      	subs	r4, #1
 8005678:	ed13 7a03 	vldr	s14, [r3, #-12]
 800567c:	f103 0310 	add.w	r3, r3, #16
 8005680:	ee27 4aa7 	vmul.f32	s8, s15, s15
 8005684:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8005688:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800568c:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8005690:	ee27 5a07 	vmul.f32	s10, s14, s14
 8005694:	ee74 5a25 	vadd.f32	s11, s8, s11
 8005698:	ee36 7a87 	vadd.f32	s14, s13, s14
 800569c:	ee64 6aa4 	vmul.f32	s13, s9, s9
 80056a0:	ee75 5a25 	vadd.f32	s11, s10, s11
 80056a4:	ee77 7a24 	vadd.f32	s15, s14, s9
 80056a8:	ee26 7a06 	vmul.f32	s14, s12, s12
 80056ac:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80056b0:	ee77 6a86 	vadd.f32	s13, s15, s12
 80056b4:	ee77 5a25 	vadd.f32	s11, s14, s11
 80056b8:	d1db      	bne.n	8005672 <arm_std_f32+0x1a>
 80056ba:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80056be:	f011 0303 	ands.w	r3, r1, #3
 80056c2:	d009      	beq.n	80056d8 <arm_std_f32+0x80>
 80056c4:	ecf0 7a01 	vldmia	r0!, {s15}
 80056c8:	3b01      	subs	r3, #1
 80056ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80056ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80056d2:	ee75 5a87 	vadd.f32	s11, s11, s14
 80056d6:	d1f5      	bne.n	80056c4 <arm_std_f32+0x6c>
 80056d8:	ee07 1a90 	vmov	s15, r1
 80056dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e8:	ee77 6ac6 	vsub.f32	s13, s15, s12
 80056ec:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80056f0:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 80056f4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80056f8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80056fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005700:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005708:	db0a      	blt.n	8005720 <arm_std_f32+0xc8>
 800570a:	eeb1 0ac7 	vsqrt.f32	s0, s14
 800570e:	eeb4 0a40 	vcmp.f32	s0, s0
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	d10d      	bne.n	8005734 <arm_std_f32+0xdc>
 8005718:	ed82 0a00 	vstr	s0, [r2]
 800571c:	b003      	add	sp, #12
 800571e:	bd30      	pop	{r4, r5, pc}
 8005720:	2300      	movs	r3, #0
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	b003      	add	sp, #12
 8005726:	bd30      	pop	{r4, r5, pc}
 8005728:	2300      	movs	r3, #0
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	4770      	bx	lr
 800572e:	eef0 6a65 	vmov.f32	s13, s11
 8005732:	e7c4      	b.n	80056be <arm_std_f32+0x66>
 8005734:	eeb0 0a47 	vmov.f32	s0, s14
 8005738:	9201      	str	r2, [sp, #4]
 800573a:	f002 f8c9 	bl	80078d0 <sqrtf>
 800573e:	9a01      	ldr	r2, [sp, #4]
 8005740:	e7ea      	b.n	8005718 <arm_std_f32+0xc0>
 8005742:	bf00      	nop
 8005744:	00000000 	.word	0x00000000

08005748 <arm_power_f32>:
 8005748:	b430      	push	{r4, r5}
 800574a:	088d      	lsrs	r5, r1, #2
 800574c:	d031      	beq.n	80057b2 <arm_power_f32+0x6a>
 800574e:	f100 0310 	add.w	r3, r0, #16
 8005752:	462c      	mov	r4, r5
 8005754:	ed9f 5a18 	vldr	s10, [pc, #96]	; 80057b8 <arm_power_f32+0x70>
 8005758:	ed53 6a04 	vldr	s13, [r3, #-16]
 800575c:	3c01      	subs	r4, #1
 800575e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8005762:	f103 0310 	add.w	r3, r3, #16
 8005766:	ee26 6aa6 	vmul.f32	s12, s13, s13
 800576a:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800576e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8005772:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 8005776:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800577a:	ee76 7a05 	vadd.f32	s15, s12, s10
 800577e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8005782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800578a:	ee35 5aa7 	vadd.f32	s10, s11, s15
 800578e:	d1e3      	bne.n	8005758 <arm_power_f32+0x10>
 8005790:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8005794:	f011 0103 	ands.w	r1, r1, #3
 8005798:	d007      	beq.n	80057aa <arm_power_f32+0x62>
 800579a:	ecb0 6a01 	vldmia	r0!, {s12}
 800579e:	3901      	subs	r1, #1
 80057a0:	ee26 6a06 	vmul.f32	s12, s12, s12
 80057a4:	ee35 5a06 	vadd.f32	s10, s10, s12
 80057a8:	d1f7      	bne.n	800579a <arm_power_f32+0x52>
 80057aa:	ed82 5a00 	vstr	s10, [r2]
 80057ae:	bc30      	pop	{r4, r5}
 80057b0:	4770      	bx	lr
 80057b2:	ed9f 5a01 	vldr	s10, [pc, #4]	; 80057b8 <arm_power_f32+0x70>
 80057b6:	e7ed      	b.n	8005794 <arm_power_f32+0x4c>
 80057b8:	00000000 	.word	0x00000000

080057bc <arm_mean_f32>:
 80057bc:	b430      	push	{r4, r5}
 80057be:	088d      	lsrs	r5, r1, #2
 80057c0:	d02d      	beq.n	800581e <arm_mean_f32+0x62>
 80057c2:	f100 0310 	add.w	r3, r0, #16
 80057c6:	462c      	mov	r4, r5
 80057c8:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005824 <arm_mean_f32+0x68>
 80057cc:	ed13 7a04 	vldr	s14, [r3, #-16]
 80057d0:	3c01      	subs	r4, #1
 80057d2:	ed13 6a03 	vldr	s12, [r3, #-12]
 80057d6:	f103 0310 	add.w	r3, r3, #16
 80057da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057de:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 80057e2:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 80057e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80057ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	d1eb      	bne.n	80057cc <arm_mean_f32+0x10>
 80057f4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80057f8:	f011 0303 	ands.w	r3, r1, #3
 80057fc:	d005      	beq.n	800580a <arm_mean_f32+0x4e>
 80057fe:	ecb0 7a01 	vldmia	r0!, {s14}
 8005802:	3b01      	subs	r3, #1
 8005804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005808:	d1f9      	bne.n	80057fe <arm_mean_f32+0x42>
 800580a:	ee07 1a10 	vmov	s14, r1
 800580e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005812:	bc30      	pop	{r4, r5}
 8005814:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005818:	edc2 6a00 	vstr	s13, [r2]
 800581c:	4770      	bx	lr
 800581e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8005824 <arm_mean_f32+0x68>
 8005822:	e7e9      	b.n	80057f8 <arm_mean_f32+0x3c>
 8005824:	00000000 	.word	0x00000000

08005828 <arm_max_f32>:
 8005828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800582c:	1e4d      	subs	r5, r1, #1
 800582e:	f100 0c04 	add.w	ip, r0, #4
 8005832:	edd0 7a00 	vldr	s15, [r0]
 8005836:	ea5f 0995 	movs.w	r9, r5, lsr #2
 800583a:	d056      	beq.n	80058ea <arm_max_f32+0xc2>
 800583c:	3014      	adds	r0, #20
 800583e:	46c8      	mov	r8, r9
 8005840:	2404      	movs	r4, #4
 8005842:	2600      	movs	r6, #0
 8005844:	ed10 6a04 	vldr	s12, [r0, #-16]
 8005848:	f1a4 0a03 	sub.w	sl, r4, #3
 800584c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8005850:	f1a4 0e02 	sub.w	lr, r4, #2
 8005854:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8005858:	ed10 7a02 	vldr	s14, [r0, #-8]
 800585c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005860:	1e67      	subs	r7, r4, #1
 8005862:	3010      	adds	r0, #16
 8005864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005868:	bfc8      	it	gt
 800586a:	eef0 7a46 	vmovgt.f32	s15, s12
 800586e:	bfc8      	it	gt
 8005870:	4656      	movgt	r6, sl
 8005872:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587a:	bf48      	it	mi
 800587c:	eef0 7a66 	vmovmi.f32	s15, s13
 8005880:	bf48      	it	mi
 8005882:	4676      	movmi	r6, lr
 8005884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588c:	bf48      	it	mi
 800588e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005892:	bf48      	it	mi
 8005894:	463e      	movmi	r6, r7
 8005896:	eef4 7ae5 	vcmpe.f32	s15, s11
 800589a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589e:	bf48      	it	mi
 80058a0:	4626      	movmi	r6, r4
 80058a2:	bf48      	it	mi
 80058a4:	eef0 7a65 	vmovmi.f32	s15, s11
 80058a8:	f1b8 0801 	subs.w	r8, r8, #1
 80058ac:	f104 0404 	add.w	r4, r4, #4
 80058b0:	d1c8      	bne.n	8005844 <arm_max_f32+0x1c>
 80058b2:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 80058b6:	f015 0003 	ands.w	r0, r5, #3
 80058ba:	d018      	beq.n	80058ee <arm_max_f32+0xc6>
 80058bc:	1a08      	subs	r0, r1, r0
 80058be:	ecbc 7a01 	vldmia	ip!, {s14}
 80058c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ca:	bfc8      	it	gt
 80058cc:	4606      	movgt	r6, r0
 80058ce:	f100 0001 	add.w	r0, r0, #1
 80058d2:	bfd8      	it	le
 80058d4:	eeb0 7a67 	vmovle.f32	s14, s15
 80058d8:	4281      	cmp	r1, r0
 80058da:	eef0 7a47 	vmov.f32	s15, s14
 80058de:	d1ee      	bne.n	80058be <arm_max_f32+0x96>
 80058e0:	ed82 7a00 	vstr	s14, [r2]
 80058e4:	601e      	str	r6, [r3, #0]
 80058e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ea:	464e      	mov	r6, r9
 80058ec:	e7e3      	b.n	80058b6 <arm_max_f32+0x8e>
 80058ee:	eeb0 7a67 	vmov.f32	s14, s15
 80058f2:	e7f5      	b.n	80058e0 <arm_max_f32+0xb8>

080058f4 <__errno>:
 80058f4:	4b01      	ldr	r3, [pc, #4]	; (80058fc <__errno+0x8>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	24000010 	.word	0x24000010

08005900 <__libc_init_array>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4e0d      	ldr	r6, [pc, #52]	; (8005938 <__libc_init_array+0x38>)
 8005904:	4c0d      	ldr	r4, [pc, #52]	; (800593c <__libc_init_array+0x3c>)
 8005906:	1ba4      	subs	r4, r4, r6
 8005908:	10a4      	asrs	r4, r4, #2
 800590a:	2500      	movs	r5, #0
 800590c:	42a5      	cmp	r5, r4
 800590e:	d109      	bne.n	8005924 <__libc_init_array+0x24>
 8005910:	4e0b      	ldr	r6, [pc, #44]	; (8005940 <__libc_init_array+0x40>)
 8005912:	4c0c      	ldr	r4, [pc, #48]	; (8005944 <__libc_init_array+0x44>)
 8005914:	f002 f9b6 	bl	8007c84 <_init>
 8005918:	1ba4      	subs	r4, r4, r6
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	2500      	movs	r5, #0
 800591e:	42a5      	cmp	r5, r4
 8005920:	d105      	bne.n	800592e <__libc_init_array+0x2e>
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005928:	4798      	blx	r3
 800592a:	3501      	adds	r5, #1
 800592c:	e7ee      	b.n	800590c <__libc_init_array+0xc>
 800592e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005932:	4798      	blx	r3
 8005934:	3501      	adds	r5, #1
 8005936:	e7f2      	b.n	800591e <__libc_init_array+0x1e>
 8005938:	08008088 	.word	0x08008088
 800593c:	08008088 	.word	0x08008088
 8005940:	08008088 	.word	0x08008088
 8005944:	0800808c 	.word	0x0800808c

08005948 <malloc>:
 8005948:	4b02      	ldr	r3, [pc, #8]	; (8005954 <malloc+0xc>)
 800594a:	4601      	mov	r1, r0
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	f000 b86d 	b.w	8005a2c <_malloc_r>
 8005952:	bf00      	nop
 8005954:	24000010 	.word	0x24000010

08005958 <free>:
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <free+0xc>)
 800595a:	4601      	mov	r1, r0
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	f000 b817 	b.w	8005990 <_free_r>
 8005962:	bf00      	nop
 8005964:	24000010 	.word	0x24000010

08005968 <memcpy>:
 8005968:	b510      	push	{r4, lr}
 800596a:	1e43      	subs	r3, r0, #1
 800596c:	440a      	add	r2, r1
 800596e:	4291      	cmp	r1, r2
 8005970:	d100      	bne.n	8005974 <memcpy+0xc>
 8005972:	bd10      	pop	{r4, pc}
 8005974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800597c:	e7f7      	b.n	800596e <memcpy+0x6>

0800597e <memset>:
 800597e:	4402      	add	r2, r0
 8005980:	4603      	mov	r3, r0
 8005982:	4293      	cmp	r3, r2
 8005984:	d100      	bne.n	8005988 <memset+0xa>
 8005986:	4770      	bx	lr
 8005988:	f803 1b01 	strb.w	r1, [r3], #1
 800598c:	e7f9      	b.n	8005982 <memset+0x4>
	...

08005990 <_free_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4605      	mov	r5, r0
 8005994:	2900      	cmp	r1, #0
 8005996:	d045      	beq.n	8005a24 <_free_r+0x94>
 8005998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800599c:	1f0c      	subs	r4, r1, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfb8      	it	lt
 80059a2:	18e4      	addlt	r4, r4, r3
 80059a4:	f001 faee 	bl	8006f84 <__malloc_lock>
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <_free_r+0x98>)
 80059aa:	6813      	ldr	r3, [r2, #0]
 80059ac:	4610      	mov	r0, r2
 80059ae:	b933      	cbnz	r3, 80059be <_free_r+0x2e>
 80059b0:	6063      	str	r3, [r4, #4]
 80059b2:	6014      	str	r4, [r2, #0]
 80059b4:	4628      	mov	r0, r5
 80059b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059ba:	f001 bae4 	b.w	8006f86 <__malloc_unlock>
 80059be:	42a3      	cmp	r3, r4
 80059c0:	d90c      	bls.n	80059dc <_free_r+0x4c>
 80059c2:	6821      	ldr	r1, [r4, #0]
 80059c4:	1862      	adds	r2, r4, r1
 80059c6:	4293      	cmp	r3, r2
 80059c8:	bf04      	itt	eq
 80059ca:	681a      	ldreq	r2, [r3, #0]
 80059cc:	685b      	ldreq	r3, [r3, #4]
 80059ce:	6063      	str	r3, [r4, #4]
 80059d0:	bf04      	itt	eq
 80059d2:	1852      	addeq	r2, r2, r1
 80059d4:	6022      	streq	r2, [r4, #0]
 80059d6:	6004      	str	r4, [r0, #0]
 80059d8:	e7ec      	b.n	80059b4 <_free_r+0x24>
 80059da:	4613      	mov	r3, r2
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	b10a      	cbz	r2, 80059e4 <_free_r+0x54>
 80059e0:	42a2      	cmp	r2, r4
 80059e2:	d9fa      	bls.n	80059da <_free_r+0x4a>
 80059e4:	6819      	ldr	r1, [r3, #0]
 80059e6:	1858      	adds	r0, r3, r1
 80059e8:	42a0      	cmp	r0, r4
 80059ea:	d10b      	bne.n	8005a04 <_free_r+0x74>
 80059ec:	6820      	ldr	r0, [r4, #0]
 80059ee:	4401      	add	r1, r0
 80059f0:	1858      	adds	r0, r3, r1
 80059f2:	4282      	cmp	r2, r0
 80059f4:	6019      	str	r1, [r3, #0]
 80059f6:	d1dd      	bne.n	80059b4 <_free_r+0x24>
 80059f8:	6810      	ldr	r0, [r2, #0]
 80059fa:	6852      	ldr	r2, [r2, #4]
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	4401      	add	r1, r0
 8005a00:	6019      	str	r1, [r3, #0]
 8005a02:	e7d7      	b.n	80059b4 <_free_r+0x24>
 8005a04:	d902      	bls.n	8005a0c <_free_r+0x7c>
 8005a06:	230c      	movs	r3, #12
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	e7d3      	b.n	80059b4 <_free_r+0x24>
 8005a0c:	6820      	ldr	r0, [r4, #0]
 8005a0e:	1821      	adds	r1, r4, r0
 8005a10:	428a      	cmp	r2, r1
 8005a12:	bf04      	itt	eq
 8005a14:	6811      	ldreq	r1, [r2, #0]
 8005a16:	6852      	ldreq	r2, [r2, #4]
 8005a18:	6062      	str	r2, [r4, #4]
 8005a1a:	bf04      	itt	eq
 8005a1c:	1809      	addeq	r1, r1, r0
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	605c      	str	r4, [r3, #4]
 8005a22:	e7c7      	b.n	80059b4 <_free_r+0x24>
 8005a24:	bd38      	pop	{r3, r4, r5, pc}
 8005a26:	bf00      	nop
 8005a28:	2400023c 	.word	0x2400023c

08005a2c <_malloc_r>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	1ccd      	adds	r5, r1, #3
 8005a30:	f025 0503 	bic.w	r5, r5, #3
 8005a34:	3508      	adds	r5, #8
 8005a36:	2d0c      	cmp	r5, #12
 8005a38:	bf38      	it	cc
 8005a3a:	250c      	movcc	r5, #12
 8005a3c:	2d00      	cmp	r5, #0
 8005a3e:	4606      	mov	r6, r0
 8005a40:	db01      	blt.n	8005a46 <_malloc_r+0x1a>
 8005a42:	42a9      	cmp	r1, r5
 8005a44:	d903      	bls.n	8005a4e <_malloc_r+0x22>
 8005a46:	230c      	movs	r3, #12
 8005a48:	6033      	str	r3, [r6, #0]
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	bd70      	pop	{r4, r5, r6, pc}
 8005a4e:	f001 fa99 	bl	8006f84 <__malloc_lock>
 8005a52:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <_malloc_r+0xac>)
 8005a54:	6814      	ldr	r4, [r2, #0]
 8005a56:	4621      	mov	r1, r4
 8005a58:	b991      	cbnz	r1, 8005a80 <_malloc_r+0x54>
 8005a5a:	4c20      	ldr	r4, [pc, #128]	; (8005adc <_malloc_r+0xb0>)
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	b91b      	cbnz	r3, 8005a68 <_malloc_r+0x3c>
 8005a60:	4630      	mov	r0, r6
 8005a62:	f000 fc79 	bl	8006358 <_sbrk_r>
 8005a66:	6020      	str	r0, [r4, #0]
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f000 fc74 	bl	8006358 <_sbrk_r>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d124      	bne.n	8005abe <_malloc_r+0x92>
 8005a74:	230c      	movs	r3, #12
 8005a76:	6033      	str	r3, [r6, #0]
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f001 fa84 	bl	8006f86 <__malloc_unlock>
 8005a7e:	e7e4      	b.n	8005a4a <_malloc_r+0x1e>
 8005a80:	680b      	ldr	r3, [r1, #0]
 8005a82:	1b5b      	subs	r3, r3, r5
 8005a84:	d418      	bmi.n	8005ab8 <_malloc_r+0x8c>
 8005a86:	2b0b      	cmp	r3, #11
 8005a88:	d90f      	bls.n	8005aaa <_malloc_r+0x7e>
 8005a8a:	600b      	str	r3, [r1, #0]
 8005a8c:	50cd      	str	r5, [r1, r3]
 8005a8e:	18cc      	adds	r4, r1, r3
 8005a90:	4630      	mov	r0, r6
 8005a92:	f001 fa78 	bl	8006f86 <__malloc_unlock>
 8005a96:	f104 000b 	add.w	r0, r4, #11
 8005a9a:	1d23      	adds	r3, r4, #4
 8005a9c:	f020 0007 	bic.w	r0, r0, #7
 8005aa0:	1ac3      	subs	r3, r0, r3
 8005aa2:	d0d3      	beq.n	8005a4c <_malloc_r+0x20>
 8005aa4:	425a      	negs	r2, r3
 8005aa6:	50e2      	str	r2, [r4, r3]
 8005aa8:	e7d0      	b.n	8005a4c <_malloc_r+0x20>
 8005aaa:	428c      	cmp	r4, r1
 8005aac:	684b      	ldr	r3, [r1, #4]
 8005aae:	bf16      	itet	ne
 8005ab0:	6063      	strne	r3, [r4, #4]
 8005ab2:	6013      	streq	r3, [r2, #0]
 8005ab4:	460c      	movne	r4, r1
 8005ab6:	e7eb      	b.n	8005a90 <_malloc_r+0x64>
 8005ab8:	460c      	mov	r4, r1
 8005aba:	6849      	ldr	r1, [r1, #4]
 8005abc:	e7cc      	b.n	8005a58 <_malloc_r+0x2c>
 8005abe:	1cc4      	adds	r4, r0, #3
 8005ac0:	f024 0403 	bic.w	r4, r4, #3
 8005ac4:	42a0      	cmp	r0, r4
 8005ac6:	d005      	beq.n	8005ad4 <_malloc_r+0xa8>
 8005ac8:	1a21      	subs	r1, r4, r0
 8005aca:	4630      	mov	r0, r6
 8005acc:	f000 fc44 	bl	8006358 <_sbrk_r>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d0cf      	beq.n	8005a74 <_malloc_r+0x48>
 8005ad4:	6025      	str	r5, [r4, #0]
 8005ad6:	e7db      	b.n	8005a90 <_malloc_r+0x64>
 8005ad8:	2400023c 	.word	0x2400023c
 8005adc:	24000240 	.word	0x24000240

08005ae0 <__cvt>:
 8005ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ae2:	ed2d 8b02 	vpush	{d8}
 8005ae6:	eeb0 8b40 	vmov.f64	d8, d0
 8005aea:	b085      	sub	sp, #20
 8005aec:	4617      	mov	r7, r2
 8005aee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005af0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005af2:	ee18 2a90 	vmov	r2, s17
 8005af6:	f025 0520 	bic.w	r5, r5, #32
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	bfb6      	itet	lt
 8005afe:	222d      	movlt	r2, #45	; 0x2d
 8005b00:	2200      	movge	r2, #0
 8005b02:	eeb1 8b40 	vneglt.f64	d8, d0
 8005b06:	2d46      	cmp	r5, #70	; 0x46
 8005b08:	460c      	mov	r4, r1
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	d004      	beq.n	8005b18 <__cvt+0x38>
 8005b0e:	2d45      	cmp	r5, #69	; 0x45
 8005b10:	d100      	bne.n	8005b14 <__cvt+0x34>
 8005b12:	3401      	adds	r4, #1
 8005b14:	2102      	movs	r1, #2
 8005b16:	e000      	b.n	8005b1a <__cvt+0x3a>
 8005b18:	2103      	movs	r1, #3
 8005b1a:	ab03      	add	r3, sp, #12
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	ab02      	add	r3, sp, #8
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	4622      	mov	r2, r4
 8005b24:	4633      	mov	r3, r6
 8005b26:	eeb0 0b48 	vmov.f64	d0, d8
 8005b2a:	f000 fcd1 	bl	80064d0 <_dtoa_r>
 8005b2e:	2d47      	cmp	r5, #71	; 0x47
 8005b30:	d101      	bne.n	8005b36 <__cvt+0x56>
 8005b32:	07fb      	lsls	r3, r7, #31
 8005b34:	d51e      	bpl.n	8005b74 <__cvt+0x94>
 8005b36:	2d46      	cmp	r5, #70	; 0x46
 8005b38:	eb00 0304 	add.w	r3, r0, r4
 8005b3c:	d10c      	bne.n	8005b58 <__cvt+0x78>
 8005b3e:	7802      	ldrb	r2, [r0, #0]
 8005b40:	2a30      	cmp	r2, #48	; 0x30
 8005b42:	d107      	bne.n	8005b54 <__cvt+0x74>
 8005b44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4c:	bf1c      	itt	ne
 8005b4e:	f1c4 0401 	rsbne	r4, r4, #1
 8005b52:	6034      	strne	r4, [r6, #0]
 8005b54:	6832      	ldr	r2, [r6, #0]
 8005b56:	4413      	add	r3, r2
 8005b58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b60:	d007      	beq.n	8005b72 <__cvt+0x92>
 8005b62:	2130      	movs	r1, #48	; 0x30
 8005b64:	9a03      	ldr	r2, [sp, #12]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d204      	bcs.n	8005b74 <__cvt+0x94>
 8005b6a:	1c54      	adds	r4, r2, #1
 8005b6c:	9403      	str	r4, [sp, #12]
 8005b6e:	7011      	strb	r1, [r2, #0]
 8005b70:	e7f8      	b.n	8005b64 <__cvt+0x84>
 8005b72:	9303      	str	r3, [sp, #12]
 8005b74:	9b03      	ldr	r3, [sp, #12]
 8005b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b78:	1a1b      	subs	r3, r3, r0
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	b005      	add	sp, #20
 8005b7e:	ecbd 8b02 	vpop	{d8}
 8005b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b84 <__exponent>:
 8005b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b86:	2900      	cmp	r1, #0
 8005b88:	4604      	mov	r4, r0
 8005b8a:	bfba      	itte	lt
 8005b8c:	4249      	neglt	r1, r1
 8005b8e:	232d      	movlt	r3, #45	; 0x2d
 8005b90:	232b      	movge	r3, #43	; 0x2b
 8005b92:	2909      	cmp	r1, #9
 8005b94:	f804 2b02 	strb.w	r2, [r4], #2
 8005b98:	7043      	strb	r3, [r0, #1]
 8005b9a:	dd20      	ble.n	8005bde <__exponent+0x5a>
 8005b9c:	f10d 0307 	add.w	r3, sp, #7
 8005ba0:	461f      	mov	r7, r3
 8005ba2:	260a      	movs	r6, #10
 8005ba4:	fb91 f5f6 	sdiv	r5, r1, r6
 8005ba8:	fb06 1115 	mls	r1, r6, r5, r1
 8005bac:	3130      	adds	r1, #48	; 0x30
 8005bae:	2d09      	cmp	r5, #9
 8005bb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005bb4:	f103 32ff 	add.w	r2, r3, #4294967295
 8005bb8:	4629      	mov	r1, r5
 8005bba:	dc09      	bgt.n	8005bd0 <__exponent+0x4c>
 8005bbc:	3130      	adds	r1, #48	; 0x30
 8005bbe:	3b02      	subs	r3, #2
 8005bc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005bc4:	42bb      	cmp	r3, r7
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	d304      	bcc.n	8005bd4 <__exponent+0x50>
 8005bca:	1a10      	subs	r0, r2, r0
 8005bcc:	b003      	add	sp, #12
 8005bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	e7e7      	b.n	8005ba4 <__exponent+0x20>
 8005bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bd8:	f804 2b01 	strb.w	r2, [r4], #1
 8005bdc:	e7f2      	b.n	8005bc4 <__exponent+0x40>
 8005bde:	2330      	movs	r3, #48	; 0x30
 8005be0:	4419      	add	r1, r3
 8005be2:	7083      	strb	r3, [r0, #2]
 8005be4:	1d02      	adds	r2, r0, #4
 8005be6:	70c1      	strb	r1, [r0, #3]
 8005be8:	e7ef      	b.n	8005bca <__exponent+0x46>
 8005bea:	0000      	movs	r0, r0
 8005bec:	0000      	movs	r0, r0
	...

08005bf0 <_printf_float>:
 8005bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	b08d      	sub	sp, #52	; 0x34
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005c00:	4605      	mov	r5, r0
 8005c02:	f001 f9b1 	bl	8006f68 <_localeconv_r>
 8005c06:	f8d0 b000 	ldr.w	fp, [r0]
 8005c0a:	4658      	mov	r0, fp
 8005c0c:	f7fa fb68 	bl	80002e0 <strlen>
 8005c10:	2300      	movs	r3, #0
 8005c12:	930a      	str	r3, [sp, #40]	; 0x28
 8005c14:	f8d8 3000 	ldr.w	r3, [r8]
 8005c18:	9005      	str	r0, [sp, #20]
 8005c1a:	3307      	adds	r3, #7
 8005c1c:	f023 0307 	bic.w	r3, r3, #7
 8005c20:	f103 0108 	add.w	r1, r3, #8
 8005c24:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c28:	6822      	ldr	r2, [r4, #0]
 8005c2a:	f8c8 1000 	str.w	r1, [r8]
 8005c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005c36:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8005ec0 <_printf_float+0x2d0>
 8005c3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005c3e:	eeb0 6bc0 	vabs.f64	d6, d0
 8005c42:	eeb4 6b47 	vcmp.f64	d6, d7
 8005c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4a:	dd24      	ble.n	8005c96 <_printf_float+0xa6>
 8005c4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c54:	d502      	bpl.n	8005c5c <_printf_float+0x6c>
 8005c56:	232d      	movs	r3, #45	; 0x2d
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5c:	499a      	ldr	r1, [pc, #616]	; (8005ec8 <_printf_float+0x2d8>)
 8005c5e:	4b9b      	ldr	r3, [pc, #620]	; (8005ecc <_printf_float+0x2dc>)
 8005c60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c64:	bf8c      	ite	hi
 8005c66:	4688      	movhi	r8, r1
 8005c68:	4698      	movls	r8, r3
 8005c6a:	f022 0204 	bic.w	r2, r2, #4
 8005c6e:	2303      	movs	r3, #3
 8005c70:	6123      	str	r3, [r4, #16]
 8005c72:	6022      	str	r2, [r4, #0]
 8005c74:	f04f 0a00 	mov.w	sl, #0
 8005c78:	9700      	str	r7, [sp, #0]
 8005c7a:	4633      	mov	r3, r6
 8005c7c:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c7e:	4621      	mov	r1, r4
 8005c80:	4628      	mov	r0, r5
 8005c82:	f000 f9e1 	bl	8006048 <_printf_common>
 8005c86:	3001      	adds	r0, #1
 8005c88:	f040 8089 	bne.w	8005d9e <_printf_float+0x1ae>
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	b00d      	add	sp, #52	; 0x34
 8005c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c96:	eeb4 0b40 	vcmp.f64	d0, d0
 8005c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9e:	d702      	bvc.n	8005ca6 <_printf_float+0xb6>
 8005ca0:	498b      	ldr	r1, [pc, #556]	; (8005ed0 <_printf_float+0x2e0>)
 8005ca2:	4b8c      	ldr	r3, [pc, #560]	; (8005ed4 <_printf_float+0x2e4>)
 8005ca4:	e7dc      	b.n	8005c60 <_printf_float+0x70>
 8005ca6:	6861      	ldr	r1, [r4, #4]
 8005ca8:	1c4b      	adds	r3, r1, #1
 8005caa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cae:	ab0a      	add	r3, sp, #40	; 0x28
 8005cb0:	a809      	add	r0, sp, #36	; 0x24
 8005cb2:	d13b      	bne.n	8005d2c <_printf_float+0x13c>
 8005cb4:	2106      	movs	r1, #6
 8005cb6:	6061      	str	r1, [r4, #4]
 8005cb8:	f04f 0c00 	mov.w	ip, #0
 8005cbc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8005cc0:	e9cd 0900 	strd	r0, r9, [sp]
 8005cc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cc8:	6022      	str	r2, [r4, #0]
 8005cca:	6861      	ldr	r1, [r4, #4]
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f7ff ff07 	bl	8005ae0 <__cvt>
 8005cd2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8005cd6:	2b47      	cmp	r3, #71	; 0x47
 8005cd8:	4680      	mov	r8, r0
 8005cda:	d109      	bne.n	8005cf0 <_printf_float+0x100>
 8005cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cde:	1cd8      	adds	r0, r3, #3
 8005ce0:	db02      	blt.n	8005ce8 <_printf_float+0xf8>
 8005ce2:	6862      	ldr	r2, [r4, #4]
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	dd47      	ble.n	8005d78 <_printf_float+0x188>
 8005ce8:	f1a9 0902 	sub.w	r9, r9, #2
 8005cec:	fa5f f989 	uxtb.w	r9, r9
 8005cf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cf6:	d824      	bhi.n	8005d42 <_printf_float+0x152>
 8005cf8:	3901      	subs	r1, #1
 8005cfa:	464a      	mov	r2, r9
 8005cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d00:	9109      	str	r1, [sp, #36]	; 0x24
 8005d02:	f7ff ff3f 	bl	8005b84 <__exponent>
 8005d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d08:	1813      	adds	r3, r2, r0
 8005d0a:	2a01      	cmp	r2, #1
 8005d0c:	4682      	mov	sl, r0
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	dc02      	bgt.n	8005d18 <_printf_float+0x128>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	07d1      	lsls	r1, r2, #31
 8005d16:	d501      	bpl.n	8005d1c <_printf_float+0x12c>
 8005d18:	3301      	adds	r3, #1
 8005d1a:	6123      	str	r3, [r4, #16]
 8005d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0a9      	beq.n	8005c78 <_printf_float+0x88>
 8005d24:	232d      	movs	r3, #45	; 0x2d
 8005d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2a:	e7a5      	b.n	8005c78 <_printf_float+0x88>
 8005d2c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8005d30:	f000 8178 	beq.w	8006024 <_printf_float+0x434>
 8005d34:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d38:	d1be      	bne.n	8005cb8 <_printf_float+0xc8>
 8005d3a:	2900      	cmp	r1, #0
 8005d3c:	d1bc      	bne.n	8005cb8 <_printf_float+0xc8>
 8005d3e:	2101      	movs	r1, #1
 8005d40:	e7b9      	b.n	8005cb6 <_printf_float+0xc6>
 8005d42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d46:	d119      	bne.n	8005d7c <_printf_float+0x18c>
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	6863      	ldr	r3, [r4, #4]
 8005d4c:	dd0c      	ble.n	8005d68 <_printf_float+0x178>
 8005d4e:	6121      	str	r1, [r4, #16]
 8005d50:	b913      	cbnz	r3, 8005d58 <_printf_float+0x168>
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	07d2      	lsls	r2, r2, #31
 8005d56:	d502      	bpl.n	8005d5e <_printf_float+0x16e>
 8005d58:	3301      	adds	r3, #1
 8005d5a:	440b      	add	r3, r1
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d60:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d62:	f04f 0a00 	mov.w	sl, #0
 8005d66:	e7d9      	b.n	8005d1c <_printf_float+0x12c>
 8005d68:	b913      	cbnz	r3, 8005d70 <_printf_float+0x180>
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	07d0      	lsls	r0, r2, #31
 8005d6e:	d501      	bpl.n	8005d74 <_printf_float+0x184>
 8005d70:	3302      	adds	r3, #2
 8005d72:	e7f3      	b.n	8005d5c <_printf_float+0x16c>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e7f1      	b.n	8005d5c <_printf_float+0x16c>
 8005d78:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d7c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d80:	4293      	cmp	r3, r2
 8005d82:	db05      	blt.n	8005d90 <_printf_float+0x1a0>
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	6123      	str	r3, [r4, #16]
 8005d88:	07d1      	lsls	r1, r2, #31
 8005d8a:	d5e8      	bpl.n	8005d5e <_printf_float+0x16e>
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	e7e5      	b.n	8005d5c <_printf_float+0x16c>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bfd4      	ite	le
 8005d94:	f1c3 0302 	rsble	r3, r3, #2
 8005d98:	2301      	movgt	r3, #1
 8005d9a:	4413      	add	r3, r2
 8005d9c:	e7de      	b.n	8005d5c <_printf_float+0x16c>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	055a      	lsls	r2, r3, #21
 8005da2:	d407      	bmi.n	8005db4 <_printf_float+0x1c4>
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	4642      	mov	r2, r8
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	d12a      	bne.n	8005e08 <_printf_float+0x218>
 8005db2:	e76b      	b.n	8005c8c <_printf_float+0x9c>
 8005db4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005db8:	f240 80de 	bls.w	8005f78 <_printf_float+0x388>
 8005dbc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005dc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc8:	d133      	bne.n	8005e32 <_printf_float+0x242>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4a42      	ldr	r2, [pc, #264]	; (8005ed8 <_printf_float+0x2e8>)
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	f43f af59 	beq.w	8005c8c <_printf_float+0x9c>
 8005dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dde:	429a      	cmp	r2, r3
 8005de0:	db02      	blt.n	8005de8 <_printf_float+0x1f8>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	07d8      	lsls	r0, r3, #31
 8005de6:	d50f      	bpl.n	8005e08 <_printf_float+0x218>
 8005de8:	9b05      	ldr	r3, [sp, #20]
 8005dea:	465a      	mov	r2, fp
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	f43f af4a 	beq.w	8005c8c <_printf_float+0x9c>
 8005df8:	f04f 0800 	mov.w	r8, #0
 8005dfc:	f104 091a 	add.w	r9, r4, #26
 8005e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e02:	3b01      	subs	r3, #1
 8005e04:	4543      	cmp	r3, r8
 8005e06:	dc09      	bgt.n	8005e1c <_printf_float+0x22c>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	079b      	lsls	r3, r3, #30
 8005e0c:	f100 8105 	bmi.w	800601a <_printf_float+0x42a>
 8005e10:	68e0      	ldr	r0, [r4, #12]
 8005e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e14:	4298      	cmp	r0, r3
 8005e16:	bfb8      	it	lt
 8005e18:	4618      	movlt	r0, r3
 8005e1a:	e739      	b.n	8005c90 <_printf_float+0xa0>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	464a      	mov	r2, r9
 8005e20:	4631      	mov	r1, r6
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	f43f af30 	beq.w	8005c8c <_printf_float+0x9c>
 8005e2c:	f108 0801 	add.w	r8, r8, #1
 8005e30:	e7e6      	b.n	8005e00 <_printf_float+0x210>
 8005e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dc2b      	bgt.n	8005e90 <_printf_float+0x2a0>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4a27      	ldr	r2, [pc, #156]	; (8005ed8 <_printf_float+0x2e8>)
 8005e3c:	4631      	mov	r1, r6
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b8      	blx	r7
 8005e42:	3001      	adds	r0, #1
 8005e44:	f43f af22 	beq.w	8005c8c <_printf_float+0x9c>
 8005e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4a:	b923      	cbnz	r3, 8005e56 <_printf_float+0x266>
 8005e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e4e:	b913      	cbnz	r3, 8005e56 <_printf_float+0x266>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d5d8      	bpl.n	8005e08 <_printf_float+0x218>
 8005e56:	9b05      	ldr	r3, [sp, #20]
 8005e58:	465a      	mov	r2, fp
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	f43f af13 	beq.w	8005c8c <_printf_float+0x9c>
 8005e66:	f04f 0900 	mov.w	r9, #0
 8005e6a:	f104 0a1a 	add.w	sl, r4, #26
 8005e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e70:	425b      	negs	r3, r3
 8005e72:	454b      	cmp	r3, r9
 8005e74:	dc01      	bgt.n	8005e7a <_printf_float+0x28a>
 8005e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e78:	e795      	b.n	8005da6 <_printf_float+0x1b6>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f af01 	beq.w	8005c8c <_printf_float+0x9c>
 8005e8a:	f109 0901 	add.w	r9, r9, #1
 8005e8e:	e7ee      	b.n	8005e6e <_printf_float+0x27e>
 8005e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e94:	429a      	cmp	r2, r3
 8005e96:	bfa8      	it	ge
 8005e98:	461a      	movge	r2, r3
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	4691      	mov	r9, r2
 8005e9e:	dd07      	ble.n	8005eb0 <_printf_float+0x2c0>
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b8      	blx	r7
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f43f aeee 	beq.w	8005c8c <_printf_float+0x9c>
 8005eb0:	f104 031a 	add.w	r3, r4, #26
 8005eb4:	f04f 0a00 	mov.w	sl, #0
 8005eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ebc:	9307      	str	r3, [sp, #28]
 8005ebe:	e017      	b.n	8005ef0 <_printf_float+0x300>
 8005ec0:	ffffffff 	.word	0xffffffff
 8005ec4:	7fefffff 	.word	0x7fefffff
 8005ec8:	08007dfc 	.word	0x08007dfc
 8005ecc:	08007df8 	.word	0x08007df8
 8005ed0:	08007e04 	.word	0x08007e04
 8005ed4:	08007e00 	.word	0x08007e00
 8005ed8:	08007e08 	.word	0x08007e08
 8005edc:	2301      	movs	r3, #1
 8005ede:	9a07      	ldr	r2, [sp, #28]
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f aed0 	beq.w	8005c8c <_printf_float+0x9c>
 8005eec:	f10a 0a01 	add.w	sl, sl, #1
 8005ef0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ef2:	9306      	str	r3, [sp, #24]
 8005ef4:	eba3 0309 	sub.w	r3, r3, r9
 8005ef8:	4553      	cmp	r3, sl
 8005efa:	dcef      	bgt.n	8005edc <_printf_float+0x2ec>
 8005efc:	9b06      	ldr	r3, [sp, #24]
 8005efe:	4498      	add	r8, r3
 8005f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f04:	429a      	cmp	r2, r3
 8005f06:	db15      	blt.n	8005f34 <_printf_float+0x344>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	07da      	lsls	r2, r3, #31
 8005f0c:	d412      	bmi.n	8005f34 <_printf_float+0x344>
 8005f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f10:	9a06      	ldr	r2, [sp, #24]
 8005f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f14:	1a9a      	subs	r2, r3, r2
 8005f16:	eba3 0a01 	sub.w	sl, r3, r1
 8005f1a:	4592      	cmp	sl, r2
 8005f1c:	bfa8      	it	ge
 8005f1e:	4692      	movge	sl, r2
 8005f20:	f1ba 0f00 	cmp.w	sl, #0
 8005f24:	dc0e      	bgt.n	8005f44 <_printf_float+0x354>
 8005f26:	f04f 0800 	mov.w	r8, #0
 8005f2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f2e:	f104 091a 	add.w	r9, r4, #26
 8005f32:	e019      	b.n	8005f68 <_printf_float+0x378>
 8005f34:	9b05      	ldr	r3, [sp, #20]
 8005f36:	465a      	mov	r2, fp
 8005f38:	4631      	mov	r1, r6
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	47b8      	blx	r7
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d1e5      	bne.n	8005f0e <_printf_float+0x31e>
 8005f42:	e6a3      	b.n	8005c8c <_printf_float+0x9c>
 8005f44:	4653      	mov	r3, sl
 8005f46:	4642      	mov	r2, r8
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b8      	blx	r7
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d1e9      	bne.n	8005f26 <_printf_float+0x336>
 8005f52:	e69b      	b.n	8005c8c <_printf_float+0x9c>
 8005f54:	2301      	movs	r3, #1
 8005f56:	464a      	mov	r2, r9
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f43f ae94 	beq.w	8005c8c <_printf_float+0x9c>
 8005f64:	f108 0801 	add.w	r8, r8, #1
 8005f68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	eba3 030a 	sub.w	r3, r3, sl
 8005f72:	4543      	cmp	r3, r8
 8005f74:	dcee      	bgt.n	8005f54 <_printf_float+0x364>
 8005f76:	e747      	b.n	8005e08 <_printf_float+0x218>
 8005f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f7a:	2a01      	cmp	r2, #1
 8005f7c:	dc01      	bgt.n	8005f82 <_printf_float+0x392>
 8005f7e:	07db      	lsls	r3, r3, #31
 8005f80:	d539      	bpl.n	8005ff6 <_printf_float+0x406>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4642      	mov	r2, r8
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b8      	blx	r7
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	f43f ae7d 	beq.w	8005c8c <_printf_float+0x9c>
 8005f92:	9b05      	ldr	r3, [sp, #20]
 8005f94:	465a      	mov	r2, fp
 8005f96:	4631      	mov	r1, r6
 8005f98:	4628      	mov	r0, r5
 8005f9a:	47b8      	blx	r7
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	f43f ae73 	beq.w	8005c8c <_printf_float+0x9c>
 8005fa6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb4:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fb8:	d018      	beq.n	8005fec <_printf_float+0x3fc>
 8005fba:	4642      	mov	r2, r8
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d10e      	bne.n	8005fe4 <_printf_float+0x3f4>
 8005fc6:	e661      	b.n	8005c8c <_printf_float+0x9c>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	464a      	mov	r2, r9
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b8      	blx	r7
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	f43f ae5a 	beq.w	8005c8c <_printf_float+0x9c>
 8005fd8:	f108 0801 	add.w	r8, r8, #1
 8005fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	4543      	cmp	r3, r8
 8005fe2:	dcf1      	bgt.n	8005fc8 <_printf_float+0x3d8>
 8005fe4:	4653      	mov	r3, sl
 8005fe6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fea:	e6dd      	b.n	8005da8 <_printf_float+0x1b8>
 8005fec:	f04f 0800 	mov.w	r8, #0
 8005ff0:	f104 091a 	add.w	r9, r4, #26
 8005ff4:	e7f2      	b.n	8005fdc <_printf_float+0x3ec>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e7df      	b.n	8005fba <_printf_float+0x3ca>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	464a      	mov	r2, r9
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f ae41 	beq.w	8005c8c <_printf_float+0x9c>
 800600a:	f108 0801 	add.w	r8, r8, #1
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	4543      	cmp	r3, r8
 8006016:	dcf0      	bgt.n	8005ffa <_printf_float+0x40a>
 8006018:	e6fa      	b.n	8005e10 <_printf_float+0x220>
 800601a:	f04f 0800 	mov.w	r8, #0
 800601e:	f104 0919 	add.w	r9, r4, #25
 8006022:	e7f4      	b.n	800600e <_printf_float+0x41e>
 8006024:	2900      	cmp	r1, #0
 8006026:	f43f ae8a 	beq.w	8005d3e <_printf_float+0x14e>
 800602a:	f04f 0c00 	mov.w	ip, #0
 800602e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006032:	e9cd 0900 	strd	r0, r9, [sp]
 8006036:	6022      	str	r2, [r4, #0]
 8006038:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800603c:	4628      	mov	r0, r5
 800603e:	f7ff fd4f 	bl	8005ae0 <__cvt>
 8006042:	4680      	mov	r8, r0
 8006044:	e64a      	b.n	8005cdc <_printf_float+0xec>
 8006046:	bf00      	nop

08006048 <_printf_common>:
 8006048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	4691      	mov	r9, r2
 800604e:	461f      	mov	r7, r3
 8006050:	688a      	ldr	r2, [r1, #8]
 8006052:	690b      	ldr	r3, [r1, #16]
 8006054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006058:	4293      	cmp	r3, r2
 800605a:	bfb8      	it	lt
 800605c:	4613      	movlt	r3, r2
 800605e:	f8c9 3000 	str.w	r3, [r9]
 8006062:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006066:	4606      	mov	r6, r0
 8006068:	460c      	mov	r4, r1
 800606a:	b112      	cbz	r2, 8006072 <_printf_common+0x2a>
 800606c:	3301      	adds	r3, #1
 800606e:	f8c9 3000 	str.w	r3, [r9]
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	0699      	lsls	r1, r3, #26
 8006076:	bf42      	ittt	mi
 8006078:	f8d9 3000 	ldrmi.w	r3, [r9]
 800607c:	3302      	addmi	r3, #2
 800607e:	f8c9 3000 	strmi.w	r3, [r9]
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	f015 0506 	ands.w	r5, r5, #6
 8006088:	d107      	bne.n	800609a <_printf_common+0x52>
 800608a:	f104 0a19 	add.w	sl, r4, #25
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	f8d9 2000 	ldr.w	r2, [r9]
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	42ab      	cmp	r3, r5
 8006098:	dc28      	bgt.n	80060ec <_printf_common+0xa4>
 800609a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	3300      	adds	r3, #0
 80060a2:	bf18      	it	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	0692      	lsls	r2, r2, #26
 80060a8:	d42d      	bmi.n	8006106 <_printf_common+0xbe>
 80060aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ae:	4639      	mov	r1, r7
 80060b0:	4630      	mov	r0, r6
 80060b2:	47c0      	blx	r8
 80060b4:	3001      	adds	r0, #1
 80060b6:	d020      	beq.n	80060fa <_printf_common+0xb2>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	68e5      	ldr	r5, [r4, #12]
 80060bc:	f8d9 2000 	ldr.w	r2, [r9]
 80060c0:	f003 0306 	and.w	r3, r3, #6
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	bf08      	it	eq
 80060c8:	1aad      	subeq	r5, r5, r2
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	6922      	ldr	r2, [r4, #16]
 80060ce:	bf0c      	ite	eq
 80060d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d4:	2500      	movne	r5, #0
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bfc4      	itt	gt
 80060da:	1a9b      	subgt	r3, r3, r2
 80060dc:	18ed      	addgt	r5, r5, r3
 80060de:	f04f 0900 	mov.w	r9, #0
 80060e2:	341a      	adds	r4, #26
 80060e4:	454d      	cmp	r5, r9
 80060e6:	d11a      	bne.n	800611e <_printf_common+0xd6>
 80060e8:	2000      	movs	r0, #0
 80060ea:	e008      	b.n	80060fe <_printf_common+0xb6>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4652      	mov	r2, sl
 80060f0:	4639      	mov	r1, r7
 80060f2:	4630      	mov	r0, r6
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d103      	bne.n	8006102 <_printf_common+0xba>
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295
 80060fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006102:	3501      	adds	r5, #1
 8006104:	e7c3      	b.n	800608e <_printf_common+0x46>
 8006106:	18e1      	adds	r1, r4, r3
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	2030      	movs	r0, #48	; 0x30
 800610c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006110:	4422      	add	r2, r4
 8006112:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800611a:	3302      	adds	r3, #2
 800611c:	e7c5      	b.n	80060aa <_printf_common+0x62>
 800611e:	2301      	movs	r3, #1
 8006120:	4622      	mov	r2, r4
 8006122:	4639      	mov	r1, r7
 8006124:	4630      	mov	r0, r6
 8006126:	47c0      	blx	r8
 8006128:	3001      	adds	r0, #1
 800612a:	d0e6      	beq.n	80060fa <_printf_common+0xb2>
 800612c:	f109 0901 	add.w	r9, r9, #1
 8006130:	e7d8      	b.n	80060e4 <_printf_common+0x9c>
	...

08006134 <_printf_i>:
 8006134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006138:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800613c:	460c      	mov	r4, r1
 800613e:	7e09      	ldrb	r1, [r1, #24]
 8006140:	b085      	sub	sp, #20
 8006142:	296e      	cmp	r1, #110	; 0x6e
 8006144:	4617      	mov	r7, r2
 8006146:	4606      	mov	r6, r0
 8006148:	4698      	mov	r8, r3
 800614a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800614c:	f000 80b3 	beq.w	80062b6 <_printf_i+0x182>
 8006150:	d822      	bhi.n	8006198 <_printf_i+0x64>
 8006152:	2963      	cmp	r1, #99	; 0x63
 8006154:	d036      	beq.n	80061c4 <_printf_i+0x90>
 8006156:	d80a      	bhi.n	800616e <_printf_i+0x3a>
 8006158:	2900      	cmp	r1, #0
 800615a:	f000 80b9 	beq.w	80062d0 <_printf_i+0x19c>
 800615e:	2958      	cmp	r1, #88	; 0x58
 8006160:	f000 8083 	beq.w	800626a <_printf_i+0x136>
 8006164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006168:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800616c:	e032      	b.n	80061d4 <_printf_i+0xa0>
 800616e:	2964      	cmp	r1, #100	; 0x64
 8006170:	d001      	beq.n	8006176 <_printf_i+0x42>
 8006172:	2969      	cmp	r1, #105	; 0x69
 8006174:	d1f6      	bne.n	8006164 <_printf_i+0x30>
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	6813      	ldr	r3, [r2, #0]
 800617a:	0605      	lsls	r5, r0, #24
 800617c:	f103 0104 	add.w	r1, r3, #4
 8006180:	d52a      	bpl.n	80061d8 <_printf_i+0xa4>
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6011      	str	r1, [r2, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	da03      	bge.n	8006192 <_printf_i+0x5e>
 800618a:	222d      	movs	r2, #45	; 0x2d
 800618c:	425b      	negs	r3, r3
 800618e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006192:	486f      	ldr	r0, [pc, #444]	; (8006350 <_printf_i+0x21c>)
 8006194:	220a      	movs	r2, #10
 8006196:	e039      	b.n	800620c <_printf_i+0xd8>
 8006198:	2973      	cmp	r1, #115	; 0x73
 800619a:	f000 809d 	beq.w	80062d8 <_printf_i+0x1a4>
 800619e:	d808      	bhi.n	80061b2 <_printf_i+0x7e>
 80061a0:	296f      	cmp	r1, #111	; 0x6f
 80061a2:	d020      	beq.n	80061e6 <_printf_i+0xb2>
 80061a4:	2970      	cmp	r1, #112	; 0x70
 80061a6:	d1dd      	bne.n	8006164 <_printf_i+0x30>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	f043 0320 	orr.w	r3, r3, #32
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	e003      	b.n	80061ba <_printf_i+0x86>
 80061b2:	2975      	cmp	r1, #117	; 0x75
 80061b4:	d017      	beq.n	80061e6 <_printf_i+0xb2>
 80061b6:	2978      	cmp	r1, #120	; 0x78
 80061b8:	d1d4      	bne.n	8006164 <_printf_i+0x30>
 80061ba:	2378      	movs	r3, #120	; 0x78
 80061bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061c0:	4864      	ldr	r0, [pc, #400]	; (8006354 <_printf_i+0x220>)
 80061c2:	e055      	b.n	8006270 <_printf_i+0x13c>
 80061c4:	6813      	ldr	r3, [r2, #0]
 80061c6:	1d19      	adds	r1, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6011      	str	r1, [r2, #0]
 80061cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061d4:	2301      	movs	r3, #1
 80061d6:	e08c      	b.n	80062f2 <_printf_i+0x1be>
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6011      	str	r1, [r2, #0]
 80061dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061e0:	bf18      	it	ne
 80061e2:	b21b      	sxthne	r3, r3
 80061e4:	e7cf      	b.n	8006186 <_printf_i+0x52>
 80061e6:	6813      	ldr	r3, [r2, #0]
 80061e8:	6825      	ldr	r5, [r4, #0]
 80061ea:	1d18      	adds	r0, r3, #4
 80061ec:	6010      	str	r0, [r2, #0]
 80061ee:	0628      	lsls	r0, r5, #24
 80061f0:	d501      	bpl.n	80061f6 <_printf_i+0xc2>
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	e002      	b.n	80061fc <_printf_i+0xc8>
 80061f6:	0668      	lsls	r0, r5, #25
 80061f8:	d5fb      	bpl.n	80061f2 <_printf_i+0xbe>
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	4854      	ldr	r0, [pc, #336]	; (8006350 <_printf_i+0x21c>)
 80061fe:	296f      	cmp	r1, #111	; 0x6f
 8006200:	bf14      	ite	ne
 8006202:	220a      	movne	r2, #10
 8006204:	2208      	moveq	r2, #8
 8006206:	2100      	movs	r1, #0
 8006208:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800620c:	6865      	ldr	r5, [r4, #4]
 800620e:	60a5      	str	r5, [r4, #8]
 8006210:	2d00      	cmp	r5, #0
 8006212:	f2c0 8095 	blt.w	8006340 <_printf_i+0x20c>
 8006216:	6821      	ldr	r1, [r4, #0]
 8006218:	f021 0104 	bic.w	r1, r1, #4
 800621c:	6021      	str	r1, [r4, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d13d      	bne.n	800629e <_printf_i+0x16a>
 8006222:	2d00      	cmp	r5, #0
 8006224:	f040 808e 	bne.w	8006344 <_printf_i+0x210>
 8006228:	4665      	mov	r5, ip
 800622a:	2a08      	cmp	r2, #8
 800622c:	d10b      	bne.n	8006246 <_printf_i+0x112>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	07db      	lsls	r3, r3, #31
 8006232:	d508      	bpl.n	8006246 <_printf_i+0x112>
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	6862      	ldr	r2, [r4, #4]
 8006238:	429a      	cmp	r2, r3
 800623a:	bfde      	ittt	le
 800623c:	2330      	movle	r3, #48	; 0x30
 800623e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006242:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006246:	ebac 0305 	sub.w	r3, ip, r5
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	f8cd 8000 	str.w	r8, [sp]
 8006250:	463b      	mov	r3, r7
 8006252:	aa03      	add	r2, sp, #12
 8006254:	4621      	mov	r1, r4
 8006256:	4630      	mov	r0, r6
 8006258:	f7ff fef6 	bl	8006048 <_printf_common>
 800625c:	3001      	adds	r0, #1
 800625e:	d14d      	bne.n	80062fc <_printf_i+0x1c8>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	b005      	add	sp, #20
 8006266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800626a:	4839      	ldr	r0, [pc, #228]	; (8006350 <_printf_i+0x21c>)
 800626c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006270:	6813      	ldr	r3, [r2, #0]
 8006272:	6821      	ldr	r1, [r4, #0]
 8006274:	1d1d      	adds	r5, r3, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6015      	str	r5, [r2, #0]
 800627a:	060a      	lsls	r2, r1, #24
 800627c:	d50b      	bpl.n	8006296 <_printf_i+0x162>
 800627e:	07ca      	lsls	r2, r1, #31
 8006280:	bf44      	itt	mi
 8006282:	f041 0120 	orrmi.w	r1, r1, #32
 8006286:	6021      	strmi	r1, [r4, #0]
 8006288:	b91b      	cbnz	r3, 8006292 <_printf_i+0x15e>
 800628a:	6822      	ldr	r2, [r4, #0]
 800628c:	f022 0220 	bic.w	r2, r2, #32
 8006290:	6022      	str	r2, [r4, #0]
 8006292:	2210      	movs	r2, #16
 8006294:	e7b7      	b.n	8006206 <_printf_i+0xd2>
 8006296:	064d      	lsls	r5, r1, #25
 8006298:	bf48      	it	mi
 800629a:	b29b      	uxthmi	r3, r3
 800629c:	e7ef      	b.n	800627e <_printf_i+0x14a>
 800629e:	4665      	mov	r5, ip
 80062a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80062a4:	fb02 3311 	mls	r3, r2, r1, r3
 80062a8:	5cc3      	ldrb	r3, [r0, r3]
 80062aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062ae:	460b      	mov	r3, r1
 80062b0:	2900      	cmp	r1, #0
 80062b2:	d1f5      	bne.n	80062a0 <_printf_i+0x16c>
 80062b4:	e7b9      	b.n	800622a <_printf_i+0xf6>
 80062b6:	6813      	ldr	r3, [r2, #0]
 80062b8:	6825      	ldr	r5, [r4, #0]
 80062ba:	6961      	ldr	r1, [r4, #20]
 80062bc:	1d18      	adds	r0, r3, #4
 80062be:	6010      	str	r0, [r2, #0]
 80062c0:	0628      	lsls	r0, r5, #24
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	d501      	bpl.n	80062ca <_printf_i+0x196>
 80062c6:	6019      	str	r1, [r3, #0]
 80062c8:	e002      	b.n	80062d0 <_printf_i+0x19c>
 80062ca:	066a      	lsls	r2, r5, #25
 80062cc:	d5fb      	bpl.n	80062c6 <_printf_i+0x192>
 80062ce:	8019      	strh	r1, [r3, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	6123      	str	r3, [r4, #16]
 80062d4:	4665      	mov	r5, ip
 80062d6:	e7b9      	b.n	800624c <_printf_i+0x118>
 80062d8:	6813      	ldr	r3, [r2, #0]
 80062da:	1d19      	adds	r1, r3, #4
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	681d      	ldr	r5, [r3, #0]
 80062e0:	6862      	ldr	r2, [r4, #4]
 80062e2:	2100      	movs	r1, #0
 80062e4:	4628      	mov	r0, r5
 80062e6:	f7fa f803 	bl	80002f0 <memchr>
 80062ea:	b108      	cbz	r0, 80062f0 <_printf_i+0x1bc>
 80062ec:	1b40      	subs	r0, r0, r5
 80062ee:	6060      	str	r0, [r4, #4]
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	2300      	movs	r3, #0
 80062f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fa:	e7a7      	b.n	800624c <_printf_i+0x118>
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	462a      	mov	r2, r5
 8006300:	4639      	mov	r1, r7
 8006302:	4630      	mov	r0, r6
 8006304:	47c0      	blx	r8
 8006306:	3001      	adds	r0, #1
 8006308:	d0aa      	beq.n	8006260 <_printf_i+0x12c>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	079b      	lsls	r3, r3, #30
 800630e:	d413      	bmi.n	8006338 <_printf_i+0x204>
 8006310:	68e0      	ldr	r0, [r4, #12]
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	4298      	cmp	r0, r3
 8006316:	bfb8      	it	lt
 8006318:	4618      	movlt	r0, r3
 800631a:	e7a3      	b.n	8006264 <_printf_i+0x130>
 800631c:	2301      	movs	r3, #1
 800631e:	464a      	mov	r2, r9
 8006320:	4639      	mov	r1, r7
 8006322:	4630      	mov	r0, r6
 8006324:	47c0      	blx	r8
 8006326:	3001      	adds	r0, #1
 8006328:	d09a      	beq.n	8006260 <_printf_i+0x12c>
 800632a:	3501      	adds	r5, #1
 800632c:	68e3      	ldr	r3, [r4, #12]
 800632e:	9a03      	ldr	r2, [sp, #12]
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	42ab      	cmp	r3, r5
 8006334:	dcf2      	bgt.n	800631c <_printf_i+0x1e8>
 8006336:	e7eb      	b.n	8006310 <_printf_i+0x1dc>
 8006338:	2500      	movs	r5, #0
 800633a:	f104 0919 	add.w	r9, r4, #25
 800633e:	e7f5      	b.n	800632c <_printf_i+0x1f8>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ac      	bne.n	800629e <_printf_i+0x16a>
 8006344:	7803      	ldrb	r3, [r0, #0]
 8006346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800634a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800634e:	e76c      	b.n	800622a <_printf_i+0xf6>
 8006350:	08007e0a 	.word	0x08007e0a
 8006354:	08007e1b 	.word	0x08007e1b

08006358 <_sbrk_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4c06      	ldr	r4, [pc, #24]	; (8006374 <_sbrk_r+0x1c>)
 800635c:	2300      	movs	r3, #0
 800635e:	4605      	mov	r5, r0
 8006360:	4608      	mov	r0, r1
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	f7fb fc96 	bl	8001c94 <_sbrk>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_sbrk_r+0x1a>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	b103      	cbz	r3, 8006372 <_sbrk_r+0x1a>
 8006370:	602b      	str	r3, [r5, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	24009320 	.word	0x24009320

08006378 <siprintf>:
 8006378:	b40e      	push	{r1, r2, r3}
 800637a:	b500      	push	{lr}
 800637c:	b09c      	sub	sp, #112	; 0x70
 800637e:	ab1d      	add	r3, sp, #116	; 0x74
 8006380:	9002      	str	r0, [sp, #8]
 8006382:	9006      	str	r0, [sp, #24]
 8006384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006388:	4809      	ldr	r0, [pc, #36]	; (80063b0 <siprintf+0x38>)
 800638a:	9107      	str	r1, [sp, #28]
 800638c:	9104      	str	r1, [sp, #16]
 800638e:	4909      	ldr	r1, [pc, #36]	; (80063b4 <siprintf+0x3c>)
 8006390:	f853 2b04 	ldr.w	r2, [r3], #4
 8006394:	9105      	str	r1, [sp, #20]
 8006396:	6800      	ldr	r0, [r0, #0]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	a902      	add	r1, sp, #8
 800639c:	f001 f938 	bl	8007610 <_svfiprintf_r>
 80063a0:	9b02      	ldr	r3, [sp, #8]
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	b01c      	add	sp, #112	; 0x70
 80063a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ac:	b003      	add	sp, #12
 80063ae:	4770      	bx	lr
 80063b0:	24000010 	.word	0x24000010
 80063b4:	ffff0208 	.word	0xffff0208

080063b8 <quorem>:
 80063b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	6903      	ldr	r3, [r0, #16]
 80063be:	690c      	ldr	r4, [r1, #16]
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	4680      	mov	r8, r0
 80063c4:	f2c0 8082 	blt.w	80064cc <quorem+0x114>
 80063c8:	3c01      	subs	r4, #1
 80063ca:	f101 0714 	add.w	r7, r1, #20
 80063ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80063d2:	f100 0614 	add.w	r6, r0, #20
 80063d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80063da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80063de:	eb06 030c 	add.w	r3, r6, ip
 80063e2:	3501      	adds	r5, #1
 80063e4:	eb07 090c 	add.w	r9, r7, ip
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80063ee:	b395      	cbz	r5, 8006456 <quorem+0x9e>
 80063f0:	f04f 0a00 	mov.w	sl, #0
 80063f4:	4638      	mov	r0, r7
 80063f6:	46b6      	mov	lr, r6
 80063f8:	46d3      	mov	fp, sl
 80063fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80063fe:	b293      	uxth	r3, r2
 8006400:	fb05 a303 	mla	r3, r5, r3, sl
 8006404:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006408:	b29b      	uxth	r3, r3
 800640a:	ebab 0303 	sub.w	r3, fp, r3
 800640e:	0c12      	lsrs	r2, r2, #16
 8006410:	f8de b000 	ldr.w	fp, [lr]
 8006414:	fb05 a202 	mla	r2, r5, r2, sl
 8006418:	fa13 f38b 	uxtah	r3, r3, fp
 800641c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006420:	fa1f fb82 	uxth.w	fp, r2
 8006424:	f8de 2000 	ldr.w	r2, [lr]
 8006428:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800642c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006430:	b29b      	uxth	r3, r3
 8006432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006436:	4581      	cmp	r9, r0
 8006438:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800643c:	f84e 3b04 	str.w	r3, [lr], #4
 8006440:	d2db      	bcs.n	80063fa <quorem+0x42>
 8006442:	f856 300c 	ldr.w	r3, [r6, ip]
 8006446:	b933      	cbnz	r3, 8006456 <quorem+0x9e>
 8006448:	9b01      	ldr	r3, [sp, #4]
 800644a:	3b04      	subs	r3, #4
 800644c:	429e      	cmp	r6, r3
 800644e:	461a      	mov	r2, r3
 8006450:	d330      	bcc.n	80064b4 <quorem+0xfc>
 8006452:	f8c8 4010 	str.w	r4, [r8, #16]
 8006456:	4640      	mov	r0, r8
 8006458:	f000 ffac 	bl	80073b4 <__mcmp>
 800645c:	2800      	cmp	r0, #0
 800645e:	db25      	blt.n	80064ac <quorem+0xf4>
 8006460:	3501      	adds	r5, #1
 8006462:	4630      	mov	r0, r6
 8006464:	f04f 0c00 	mov.w	ip, #0
 8006468:	f857 2b04 	ldr.w	r2, [r7], #4
 800646c:	f8d0 e000 	ldr.w	lr, [r0]
 8006470:	b293      	uxth	r3, r2
 8006472:	ebac 0303 	sub.w	r3, ip, r3
 8006476:	0c12      	lsrs	r2, r2, #16
 8006478:	fa13 f38e 	uxtah	r3, r3, lr
 800647c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006484:	b29b      	uxth	r3, r3
 8006486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800648a:	45b9      	cmp	r9, r7
 800648c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006490:	f840 3b04 	str.w	r3, [r0], #4
 8006494:	d2e8      	bcs.n	8006468 <quorem+0xb0>
 8006496:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800649a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800649e:	b92a      	cbnz	r2, 80064ac <quorem+0xf4>
 80064a0:	3b04      	subs	r3, #4
 80064a2:	429e      	cmp	r6, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	d30b      	bcc.n	80064c0 <quorem+0x108>
 80064a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80064ac:	4628      	mov	r0, r5
 80064ae:	b003      	add	sp, #12
 80064b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	3b04      	subs	r3, #4
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	d1ca      	bne.n	8006452 <quorem+0x9a>
 80064bc:	3c01      	subs	r4, #1
 80064be:	e7c5      	b.n	800644c <quorem+0x94>
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	3b04      	subs	r3, #4
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	d1ef      	bne.n	80064a8 <quorem+0xf0>
 80064c8:	3c01      	subs	r4, #1
 80064ca:	e7ea      	b.n	80064a2 <quorem+0xea>
 80064cc:	2000      	movs	r0, #0
 80064ce:	e7ee      	b.n	80064ae <quorem+0xf6>

080064d0 <_dtoa_r>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	ec57 6b10 	vmov	r6, r7, d0
 80064d8:	b095      	sub	sp, #84	; 0x54
 80064da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064dc:	9108      	str	r1, [sp, #32]
 80064de:	4604      	mov	r4, r0
 80064e0:	920a      	str	r2, [sp, #40]	; 0x28
 80064e2:	9311      	str	r3, [sp, #68]	; 0x44
 80064e4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80064e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80064ec:	b93d      	cbnz	r5, 80064fe <_dtoa_r+0x2e>
 80064ee:	2010      	movs	r0, #16
 80064f0:	f7ff fa2a 	bl	8005948 <malloc>
 80064f4:	6260      	str	r0, [r4, #36]	; 0x24
 80064f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064fa:	6005      	str	r5, [r0, #0]
 80064fc:	60c5      	str	r5, [r0, #12]
 80064fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	b151      	cbz	r1, 800651a <_dtoa_r+0x4a>
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	604a      	str	r2, [r1, #4]
 8006508:	2301      	movs	r3, #1
 800650a:	4093      	lsls	r3, r2
 800650c:	608b      	str	r3, [r1, #8]
 800650e:	4620      	mov	r0, r4
 8006510:	f000 fd6e 	bl	8006ff0 <_Bfree>
 8006514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	1e3b      	subs	r3, r7, #0
 800651c:	bfb9      	ittee	lt
 800651e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006522:	9303      	strlt	r3, [sp, #12]
 8006524:	2300      	movge	r3, #0
 8006526:	f8c8 3000 	strge.w	r3, [r8]
 800652a:	9d03      	ldr	r5, [sp, #12]
 800652c:	4bac      	ldr	r3, [pc, #688]	; (80067e0 <_dtoa_r+0x310>)
 800652e:	bfbc      	itt	lt
 8006530:	2201      	movlt	r2, #1
 8006532:	f8c8 2000 	strlt.w	r2, [r8]
 8006536:	43ab      	bics	r3, r5
 8006538:	d11b      	bne.n	8006572 <_dtoa_r+0xa2>
 800653a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800653c:	f242 730f 	movw	r3, #9999	; 0x270f
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	9b02      	ldr	r3, [sp, #8]
 8006544:	b923      	cbnz	r3, 8006550 <_dtoa_r+0x80>
 8006546:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800654a:	2d00      	cmp	r5, #0
 800654c:	f000 84dd 	beq.w	8006f0a <_dtoa_r+0xa3a>
 8006550:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006552:	b953      	cbnz	r3, 800656a <_dtoa_r+0x9a>
 8006554:	4ba3      	ldr	r3, [pc, #652]	; (80067e4 <_dtoa_r+0x314>)
 8006556:	e020      	b.n	800659a <_dtoa_r+0xca>
 8006558:	4ba3      	ldr	r3, [pc, #652]	; (80067e8 <_dtoa_r+0x318>)
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	3308      	adds	r3, #8
 800655e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	9804      	ldr	r0, [sp, #16]
 8006564:	b015      	add	sp, #84	; 0x54
 8006566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656a:	4b9e      	ldr	r3, [pc, #632]	; (80067e4 <_dtoa_r+0x314>)
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	3303      	adds	r3, #3
 8006570:	e7f5      	b.n	800655e <_dtoa_r+0x8e>
 8006572:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006576:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800657a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006582:	d10c      	bne.n	800659e <_dtoa_r+0xce>
 8006584:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006586:	2301      	movs	r3, #1
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 84b9 	beq.w	8006f04 <_dtoa_r+0xa34>
 8006592:	4b96      	ldr	r3, [pc, #600]	; (80067ec <_dtoa_r+0x31c>)
 8006594:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	3b01      	subs	r3, #1
 800659a:	9304      	str	r3, [sp, #16]
 800659c:	e7e1      	b.n	8006562 <_dtoa_r+0x92>
 800659e:	a913      	add	r1, sp, #76	; 0x4c
 80065a0:	aa12      	add	r2, sp, #72	; 0x48
 80065a2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 ff7b 	bl	80074a2 <__d2b>
 80065ac:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80065b0:	9001      	str	r0, [sp, #4]
 80065b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80065b4:	2e00      	cmp	r6, #0
 80065b6:	d046      	beq.n	8006646 <_dtoa_r+0x176>
 80065b8:	9805      	ldr	r0, [sp, #20]
 80065ba:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80065be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80065c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80065ca:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80065ce:	2700      	movs	r7, #0
 80065d0:	ee07 aa90 	vmov	s15, sl
 80065d4:	ec43 2b16 	vmov	d6, r2, r3
 80065d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80065dc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80067c8 <_dtoa_r+0x2f8>
 80065e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80065e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80065e8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80067d0 <_dtoa_r+0x300>
 80065ec:	eea7 6b04 	vfma.f64	d6, d7, d4
 80065f0:	eeb0 7b46 	vmov.f64	d7, d6
 80065f4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80067d8 <_dtoa_r+0x308>
 80065f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80065fc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006600:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006608:	ee16 ba90 	vmov	fp, s13
 800660c:	d508      	bpl.n	8006620 <_dtoa_r+0x150>
 800660e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006612:	eeb4 6b47 	vcmp.f64	d6, d7
 8006616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661a:	bf18      	it	ne
 800661c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006620:	f1bb 0f16 	cmp.w	fp, #22
 8006624:	d834      	bhi.n	8006690 <_dtoa_r+0x1c0>
 8006626:	4b72      	ldr	r3, [pc, #456]	; (80067f0 <_dtoa_r+0x320>)
 8006628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800662c:	ed93 7b00 	vldr	d7, [r3]
 8006630:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006634:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663c:	dd01      	ble.n	8006642 <_dtoa_r+0x172>
 800663e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006642:	2300      	movs	r3, #0
 8006644:	e025      	b.n	8006692 <_dtoa_r+0x1c2>
 8006646:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006648:	eb01 0a03 	add.w	sl, r1, r3
 800664c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8006650:	2b20      	cmp	r3, #32
 8006652:	dd17      	ble.n	8006684 <_dtoa_r+0x1b4>
 8006654:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006658:	9a02      	ldr	r2, [sp, #8]
 800665a:	409d      	lsls	r5, r3
 800665c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	432b      	orrs	r3, r5
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800666e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006672:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006676:	9805      	ldr	r0, [sp, #20]
 8006678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800667c:	2701      	movs	r7, #1
 800667e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8006682:	e7a5      	b.n	80065d0 <_dtoa_r+0x100>
 8006684:	9a02      	ldr	r2, [sp, #8]
 8006686:	f1c3 0320 	rsb	r3, r3, #32
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	e7ea      	b.n	8006666 <_dtoa_r+0x196>
 8006690:	2301      	movs	r3, #1
 8006692:	eba1 0a0a 	sub.w	sl, r1, sl
 8006696:	9310      	str	r3, [sp, #64]	; 0x40
 8006698:	f1ba 0301 	subs.w	r3, sl, #1
 800669c:	9307      	str	r3, [sp, #28]
 800669e:	bf43      	ittte	mi
 80066a0:	2300      	movmi	r3, #0
 80066a2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80066a6:	9307      	strmi	r3, [sp, #28]
 80066a8:	f04f 0a00 	movpl.w	sl, #0
 80066ac:	f1bb 0f00 	cmp.w	fp, #0
 80066b0:	db19      	blt.n	80066e6 <_dtoa_r+0x216>
 80066b2:	9b07      	ldr	r3, [sp, #28]
 80066b4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80066b8:	445b      	add	r3, fp
 80066ba:	9307      	str	r3, [sp, #28]
 80066bc:	f04f 0800 	mov.w	r8, #0
 80066c0:	9b08      	ldr	r3, [sp, #32]
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	d866      	bhi.n	8006794 <_dtoa_r+0x2c4>
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	bfc4      	itt	gt
 80066ca:	3b04      	subgt	r3, #4
 80066cc:	9308      	strgt	r3, [sp, #32]
 80066ce:	9b08      	ldr	r3, [sp, #32]
 80066d0:	f1a3 0302 	sub.w	r3, r3, #2
 80066d4:	bfcc      	ite	gt
 80066d6:	2500      	movgt	r5, #0
 80066d8:	2501      	movle	r5, #1
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d866      	bhi.n	80067ac <_dtoa_r+0x2dc>
 80066de:	e8df f003 	tbb	[pc, r3]
 80066e2:	5755      	.short	0x5755
 80066e4:	4909      	.short	0x4909
 80066e6:	2300      	movs	r3, #0
 80066e8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80066ec:	f1cb 0800 	rsb	r8, fp, #0
 80066f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80066f2:	e7e5      	b.n	80066c0 <_dtoa_r+0x1f0>
 80066f4:	2301      	movs	r3, #1
 80066f6:	9309      	str	r3, [sp, #36]	; 0x24
 80066f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dd59      	ble.n	80067b2 <_dtoa_r+0x2e2>
 80066fe:	9306      	str	r3, [sp, #24]
 8006700:	4699      	mov	r9, r3
 8006702:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006704:	2200      	movs	r2, #0
 8006706:	6072      	str	r2, [r6, #4]
 8006708:	2204      	movs	r2, #4
 800670a:	f102 0014 	add.w	r0, r2, #20
 800670e:	4298      	cmp	r0, r3
 8006710:	6871      	ldr	r1, [r6, #4]
 8006712:	d953      	bls.n	80067bc <_dtoa_r+0x2ec>
 8006714:	4620      	mov	r0, r4
 8006716:	f000 fc37 	bl	8006f88 <_Balloc>
 800671a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800671c:	6030      	str	r0, [r6, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	f1b9 0f0e 	cmp.w	r9, #14
 8006726:	f200 80c2 	bhi.w	80068ae <_dtoa_r+0x3de>
 800672a:	2d00      	cmp	r5, #0
 800672c:	f000 80bf 	beq.w	80068ae <_dtoa_r+0x3de>
 8006730:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006734:	f1bb 0f00 	cmp.w	fp, #0
 8006738:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800673c:	f340 80e6 	ble.w	800690c <_dtoa_r+0x43c>
 8006740:	4a2b      	ldr	r2, [pc, #172]	; (80067f0 <_dtoa_r+0x320>)
 8006742:	f00b 030f 	and.w	r3, fp, #15
 8006746:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800674a:	ed93 7b00 	vldr	d7, [r3]
 800674e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8006752:	06da      	lsls	r2, r3, #27
 8006754:	f140 80d8 	bpl.w	8006908 <_dtoa_r+0x438>
 8006758:	4a26      	ldr	r2, [pc, #152]	; (80067f4 <_dtoa_r+0x324>)
 800675a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800675e:	ed92 6b08 	vldr	d6, [r2, #32]
 8006762:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8006766:	ed8d 6b02 	vstr	d6, [sp, #8]
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	2203      	movs	r2, #3
 8006770:	4920      	ldr	r1, [pc, #128]	; (80067f4 <_dtoa_r+0x324>)
 8006772:	e04a      	b.n	800680a <_dtoa_r+0x33a>
 8006774:	2301      	movs	r3, #1
 8006776:	9309      	str	r3, [sp, #36]	; 0x24
 8006778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677a:	445b      	add	r3, fp
 800677c:	f103 0901 	add.w	r9, r3, #1
 8006780:	9306      	str	r3, [sp, #24]
 8006782:	464b      	mov	r3, r9
 8006784:	2b01      	cmp	r3, #1
 8006786:	bfb8      	it	lt
 8006788:	2301      	movlt	r3, #1
 800678a:	e7ba      	b.n	8006702 <_dtoa_r+0x232>
 800678c:	2300      	movs	r3, #0
 800678e:	e7b2      	b.n	80066f6 <_dtoa_r+0x226>
 8006790:	2300      	movs	r3, #0
 8006792:	e7f0      	b.n	8006776 <_dtoa_r+0x2a6>
 8006794:	2501      	movs	r5, #1
 8006796:	2300      	movs	r3, #0
 8006798:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800679c:	f04f 33ff 	mov.w	r3, #4294967295
 80067a0:	9306      	str	r3, [sp, #24]
 80067a2:	4699      	mov	r9, r3
 80067a4:	2200      	movs	r2, #0
 80067a6:	2312      	movs	r3, #18
 80067a8:	920a      	str	r2, [sp, #40]	; 0x28
 80067aa:	e7aa      	b.n	8006702 <_dtoa_r+0x232>
 80067ac:	2301      	movs	r3, #1
 80067ae:	9309      	str	r3, [sp, #36]	; 0x24
 80067b0:	e7f4      	b.n	800679c <_dtoa_r+0x2cc>
 80067b2:	2301      	movs	r3, #1
 80067b4:	9306      	str	r3, [sp, #24]
 80067b6:	4699      	mov	r9, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	e7f5      	b.n	80067a8 <_dtoa_r+0x2d8>
 80067bc:	3101      	adds	r1, #1
 80067be:	6071      	str	r1, [r6, #4]
 80067c0:	0052      	lsls	r2, r2, #1
 80067c2:	e7a2      	b.n	800670a <_dtoa_r+0x23a>
 80067c4:	f3af 8000 	nop.w
 80067c8:	636f4361 	.word	0x636f4361
 80067cc:	3fd287a7 	.word	0x3fd287a7
 80067d0:	8b60c8b3 	.word	0x8b60c8b3
 80067d4:	3fc68a28 	.word	0x3fc68a28
 80067d8:	509f79fb 	.word	0x509f79fb
 80067dc:	3fd34413 	.word	0x3fd34413
 80067e0:	7ff00000 	.word	0x7ff00000
 80067e4:	08007e35 	.word	0x08007e35
 80067e8:	08007e2c 	.word	0x08007e2c
 80067ec:	08007e09 	.word	0x08007e09
 80067f0:	08007e68 	.word	0x08007e68
 80067f4:	08007e40 	.word	0x08007e40
 80067f8:	07de      	lsls	r6, r3, #31
 80067fa:	d504      	bpl.n	8006806 <_dtoa_r+0x336>
 80067fc:	ed91 6b00 	vldr	d6, [r1]
 8006800:	3201      	adds	r2, #1
 8006802:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006806:	105b      	asrs	r3, r3, #1
 8006808:	3108      	adds	r1, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f4      	bne.n	80067f8 <_dtoa_r+0x328>
 800680e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006812:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006816:	ed8d 7b02 	vstr	d7, [sp, #8]
 800681a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80a7 	beq.w	8006970 <_dtoa_r+0x4a0>
 8006822:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006826:	ed9d 7b02 	vldr	d7, [sp, #8]
 800682a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800682e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006832:	f140 809d 	bpl.w	8006970 <_dtoa_r+0x4a0>
 8006836:	f1b9 0f00 	cmp.w	r9, #0
 800683a:	f000 8099 	beq.w	8006970 <_dtoa_r+0x4a0>
 800683e:	9b06      	ldr	r3, [sp, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	dd30      	ble.n	80068a6 <_dtoa_r+0x3d6>
 8006844:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006848:	ee27 7b06 	vmul.f64	d7, d7, d6
 800684c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006850:	9d06      	ldr	r5, [sp, #24]
 8006852:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006856:	3201      	adds	r2, #1
 8006858:	ed9d 6b02 	vldr	d6, [sp, #8]
 800685c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006860:	ee07 2a90 	vmov	s15, r2
 8006864:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006868:	eea7 5b06 	vfma.f64	d5, d7, d6
 800686c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8006870:	9a03      	ldr	r2, [sp, #12]
 8006872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006876:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800687a:	2d00      	cmp	r5, #0
 800687c:	d17b      	bne.n	8006976 <_dtoa_r+0x4a6>
 800687e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006882:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006886:	ec41 0b17 	vmov	d7, r0, r1
 800688a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800688e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006892:	f300 8253 	bgt.w	8006d3c <_dtoa_r+0x86c>
 8006896:	eeb1 7b47 	vneg.f64	d7, d7
 800689a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800689e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a2:	f100 8249 	bmi.w	8006d38 <_dtoa_r+0x868>
 80068a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80068aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f2c0 8119 	blt.w	8006ae8 <_dtoa_r+0x618>
 80068b6:	f1bb 0f0e 	cmp.w	fp, #14
 80068ba:	f300 8115 	bgt.w	8006ae8 <_dtoa_r+0x618>
 80068be:	4bc3      	ldr	r3, [pc, #780]	; (8006bcc <_dtoa_r+0x6fc>)
 80068c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068c4:	ed93 6b00 	vldr	d6, [r3]
 80068c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f280 80ba 	bge.w	8006a44 <_dtoa_r+0x574>
 80068d0:	f1b9 0f00 	cmp.w	r9, #0
 80068d4:	f300 80b6 	bgt.w	8006a44 <_dtoa_r+0x574>
 80068d8:	f040 822d 	bne.w	8006d36 <_dtoa_r+0x866>
 80068dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80068e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80068e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f0:	464d      	mov	r5, r9
 80068f2:	464f      	mov	r7, r9
 80068f4:	f280 8204 	bge.w	8006d00 <_dtoa_r+0x830>
 80068f8:	9b04      	ldr	r3, [sp, #16]
 80068fa:	9a04      	ldr	r2, [sp, #16]
 80068fc:	1c5e      	adds	r6, r3, #1
 80068fe:	2331      	movs	r3, #49	; 0x31
 8006900:	7013      	strb	r3, [r2, #0]
 8006902:	f10b 0b01 	add.w	fp, fp, #1
 8006906:	e1ff      	b.n	8006d08 <_dtoa_r+0x838>
 8006908:	2202      	movs	r2, #2
 800690a:	e731      	b.n	8006770 <_dtoa_r+0x2a0>
 800690c:	d02e      	beq.n	800696c <_dtoa_r+0x49c>
 800690e:	f1cb 0300 	rsb	r3, fp, #0
 8006912:	4aae      	ldr	r2, [pc, #696]	; (8006bcc <_dtoa_r+0x6fc>)
 8006914:	f003 010f 	and.w	r1, r3, #15
 8006918:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800691c:	ed92 7b00 	vldr	d7, [r2]
 8006920:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8006924:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006928:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800692c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8006930:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006934:	49a6      	ldr	r1, [pc, #664]	; (8006bd0 <_dtoa_r+0x700>)
 8006936:	111b      	asrs	r3, r3, #4
 8006938:	2000      	movs	r0, #0
 800693a:	2202      	movs	r2, #2
 800693c:	b93b      	cbnz	r3, 800694e <_dtoa_r+0x47e>
 800693e:	2800      	cmp	r0, #0
 8006940:	f43f af6b 	beq.w	800681a <_dtoa_r+0x34a>
 8006944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800694c:	e765      	b.n	800681a <_dtoa_r+0x34a>
 800694e:	07dd      	lsls	r5, r3, #31
 8006950:	d509      	bpl.n	8006966 <_dtoa_r+0x496>
 8006952:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8006956:	ed91 7b00 	vldr	d7, [r1]
 800695a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800695e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006962:	3201      	adds	r2, #1
 8006964:	2001      	movs	r0, #1
 8006966:	105b      	asrs	r3, r3, #1
 8006968:	3108      	adds	r1, #8
 800696a:	e7e7      	b.n	800693c <_dtoa_r+0x46c>
 800696c:	2202      	movs	r2, #2
 800696e:	e754      	b.n	800681a <_dtoa_r+0x34a>
 8006970:	465b      	mov	r3, fp
 8006972:	464d      	mov	r5, r9
 8006974:	e770      	b.n	8006858 <_dtoa_r+0x388>
 8006976:	4a95      	ldr	r2, [pc, #596]	; (8006bcc <_dtoa_r+0x6fc>)
 8006978:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800697c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006982:	ec41 0b17 	vmov	d7, r0, r1
 8006986:	b35a      	cbz	r2, 80069e0 <_dtoa_r+0x510>
 8006988:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800698c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006990:	9e04      	ldr	r6, [sp, #16]
 8006992:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006996:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800699a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800699e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80069a2:	ee14 2a90 	vmov	r2, s9
 80069a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80069aa:	3230      	adds	r2, #48	; 0x30
 80069ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80069b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80069b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b8:	f806 2b01 	strb.w	r2, [r6], #1
 80069bc:	d43b      	bmi.n	8006a36 <_dtoa_r+0x566>
 80069be:	ee32 5b46 	vsub.f64	d5, d2, d6
 80069c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80069c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ca:	d472      	bmi.n	8006ab2 <_dtoa_r+0x5e2>
 80069cc:	9a04      	ldr	r2, [sp, #16]
 80069ce:	1ab2      	subs	r2, r6, r2
 80069d0:	4295      	cmp	r5, r2
 80069d2:	f77f af68 	ble.w	80068a6 <_dtoa_r+0x3d6>
 80069d6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80069da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80069de:	e7de      	b.n	800699e <_dtoa_r+0x4ce>
 80069e0:	9a04      	ldr	r2, [sp, #16]
 80069e2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80069e6:	1956      	adds	r6, r2, r5
 80069e8:	4611      	mov	r1, r2
 80069ea:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80069ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80069f2:	ee14 2a90 	vmov	r2, s9
 80069f6:	3230      	adds	r2, #48	; 0x30
 80069f8:	f801 2b01 	strb.w	r2, [r1], #1
 80069fc:	42b1      	cmp	r1, r6
 80069fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006a02:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006a06:	d11a      	bne.n	8006a3e <_dtoa_r+0x56e>
 8006a08:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006a0c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006a10:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a18:	dc4b      	bgt.n	8006ab2 <_dtoa_r+0x5e2>
 8006a1a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006a1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a26:	f57f af3e 	bpl.w	80068a6 <_dtoa_r+0x3d6>
 8006a2a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a2e:	2a30      	cmp	r2, #48	; 0x30
 8006a30:	f106 31ff 	add.w	r1, r6, #4294967295
 8006a34:	d001      	beq.n	8006a3a <_dtoa_r+0x56a>
 8006a36:	469b      	mov	fp, r3
 8006a38:	e02a      	b.n	8006a90 <_dtoa_r+0x5c0>
 8006a3a:	460e      	mov	r6, r1
 8006a3c:	e7f5      	b.n	8006a2a <_dtoa_r+0x55a>
 8006a3e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006a42:	e7d4      	b.n	80069ee <_dtoa_r+0x51e>
 8006a44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a48:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006a4c:	9e04      	ldr	r6, [sp, #16]
 8006a4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006a52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006a56:	ee15 3a10 	vmov	r3, s10
 8006a5a:	3330      	adds	r3, #48	; 0x30
 8006a5c:	f806 3b01 	strb.w	r3, [r6], #1
 8006a60:	9b04      	ldr	r3, [sp, #16]
 8006a62:	1af3      	subs	r3, r6, r3
 8006a64:	4599      	cmp	r9, r3
 8006a66:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006a6a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006a6e:	d133      	bne.n	8006ad8 <_dtoa_r+0x608>
 8006a70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006a74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7c:	dc18      	bgt.n	8006ab0 <_dtoa_r+0x5e0>
 8006a7e:	eeb4 7b46 	vcmp.f64	d7, d6
 8006a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a86:	d103      	bne.n	8006a90 <_dtoa_r+0x5c0>
 8006a88:	ee15 3a10 	vmov	r3, s10
 8006a8c:	07db      	lsls	r3, r3, #31
 8006a8e:	d40f      	bmi.n	8006ab0 <_dtoa_r+0x5e0>
 8006a90:	9901      	ldr	r1, [sp, #4]
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 faac 	bl	8006ff0 <_Bfree>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a9c:	7033      	strb	r3, [r6, #0]
 8006a9e:	f10b 0301 	add.w	r3, fp, #1
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f43f ad5b 	beq.w	8006562 <_dtoa_r+0x92>
 8006aac:	601e      	str	r6, [r3, #0]
 8006aae:	e558      	b.n	8006562 <_dtoa_r+0x92>
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ab6:	2939      	cmp	r1, #57	; 0x39
 8006ab8:	f106 32ff 	add.w	r2, r6, #4294967295
 8006abc:	d106      	bne.n	8006acc <_dtoa_r+0x5fc>
 8006abe:	9904      	ldr	r1, [sp, #16]
 8006ac0:	4291      	cmp	r1, r2
 8006ac2:	d107      	bne.n	8006ad4 <_dtoa_r+0x604>
 8006ac4:	2230      	movs	r2, #48	; 0x30
 8006ac6:	700a      	strb	r2, [r1, #0]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	460a      	mov	r2, r1
 8006acc:	7811      	ldrb	r1, [r2, #0]
 8006ace:	3101      	adds	r1, #1
 8006ad0:	7011      	strb	r1, [r2, #0]
 8006ad2:	e7b0      	b.n	8006a36 <_dtoa_r+0x566>
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	e7ec      	b.n	8006ab2 <_dtoa_r+0x5e2>
 8006ad8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006adc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	d1b3      	bne.n	8006a4e <_dtoa_r+0x57e>
 8006ae6:	e7d3      	b.n	8006a90 <_dtoa_r+0x5c0>
 8006ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	f000 808d 	beq.w	8006c0a <_dtoa_r+0x73a>
 8006af0:	9a08      	ldr	r2, [sp, #32]
 8006af2:	2a01      	cmp	r2, #1
 8006af4:	dc72      	bgt.n	8006bdc <_dtoa_r+0x70c>
 8006af6:	2f00      	cmp	r7, #0
 8006af8:	d06c      	beq.n	8006bd4 <_dtoa_r+0x704>
 8006afa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006afe:	4645      	mov	r5, r8
 8006b00:	4656      	mov	r6, sl
 8006b02:	9a07      	ldr	r2, [sp, #28]
 8006b04:	2101      	movs	r1, #1
 8006b06:	441a      	add	r2, r3
 8006b08:	4620      	mov	r0, r4
 8006b0a:	449a      	add	sl, r3
 8006b0c:	9207      	str	r2, [sp, #28]
 8006b0e:	f000 fb0f 	bl	8007130 <__i2b>
 8006b12:	4607      	mov	r7, r0
 8006b14:	2e00      	cmp	r6, #0
 8006b16:	dd0b      	ble.n	8006b30 <_dtoa_r+0x660>
 8006b18:	9b07      	ldr	r3, [sp, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dd08      	ble.n	8006b30 <_dtoa_r+0x660>
 8006b1e:	42b3      	cmp	r3, r6
 8006b20:	9a07      	ldr	r2, [sp, #28]
 8006b22:	bfa8      	it	ge
 8006b24:	4633      	movge	r3, r6
 8006b26:	ebaa 0a03 	sub.w	sl, sl, r3
 8006b2a:	1af6      	subs	r6, r6, r3
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	9307      	str	r3, [sp, #28]
 8006b30:	f1b8 0f00 	cmp.w	r8, #0
 8006b34:	d01d      	beq.n	8006b72 <_dtoa_r+0x6a2>
 8006b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d06a      	beq.n	8006c12 <_dtoa_r+0x742>
 8006b3c:	b18d      	cbz	r5, 8006b62 <_dtoa_r+0x692>
 8006b3e:	4639      	mov	r1, r7
 8006b40:	462a      	mov	r2, r5
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 fb94 	bl	8007270 <__pow5mult>
 8006b48:	9a01      	ldr	r2, [sp, #4]
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f000 faf7 	bl	8007142 <__multiply>
 8006b54:	9901      	ldr	r1, [sp, #4]
 8006b56:	900c      	str	r0, [sp, #48]	; 0x30
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 fa49 	bl	8006ff0 <_Bfree>
 8006b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	ebb8 0205 	subs.w	r2, r8, r5
 8006b66:	d004      	beq.n	8006b72 <_dtoa_r+0x6a2>
 8006b68:	9901      	ldr	r1, [sp, #4]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 fb80 	bl	8007270 <__pow5mult>
 8006b70:	9001      	str	r0, [sp, #4]
 8006b72:	2101      	movs	r1, #1
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 fadb 	bl	8007130 <__i2b>
 8006b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 81ca 	beq.w	8006f18 <_dtoa_r+0xa48>
 8006b84:	461a      	mov	r2, r3
 8006b86:	4601      	mov	r1, r0
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fb71 	bl	8007270 <__pow5mult>
 8006b8e:	9b08      	ldr	r3, [sp, #32]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	4605      	mov	r5, r0
 8006b94:	dc44      	bgt.n	8006c20 <_dtoa_r+0x750>
 8006b96:	9b02      	ldr	r3, [sp, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d13c      	bne.n	8006c16 <_dtoa_r+0x746>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d137      	bne.n	8006c16 <_dtoa_r+0x746>
 8006ba6:	9b03      	ldr	r3, [sp, #12]
 8006ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bac:	0d1b      	lsrs	r3, r3, #20
 8006bae:	051b      	lsls	r3, r3, #20
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d033      	beq.n	8006c1c <_dtoa_r+0x74c>
 8006bb4:	9b07      	ldr	r3, [sp, #28]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	f10a 0a01 	add.w	sl, sl, #1
 8006bbc:	9307      	str	r3, [sp, #28]
 8006bbe:	f04f 0801 	mov.w	r8, #1
 8006bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc4:	bb73      	cbnz	r3, 8006c24 <_dtoa_r+0x754>
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	e034      	b.n	8006c34 <_dtoa_r+0x764>
 8006bca:	bf00      	nop
 8006bcc:	08007e68 	.word	0x08007e68
 8006bd0:	08007e40 	.word	0x08007e40
 8006bd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bda:	e790      	b.n	8006afe <_dtoa_r+0x62e>
 8006bdc:	f109 35ff 	add.w	r5, r9, #4294967295
 8006be0:	45a8      	cmp	r8, r5
 8006be2:	bfbf      	itttt	lt
 8006be4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006be6:	eba5 0808 	sublt.w	r8, r5, r8
 8006bea:	4443      	addlt	r3, r8
 8006bec:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006bee:	bfb6      	itet	lt
 8006bf0:	46a8      	movlt	r8, r5
 8006bf2:	eba8 0505 	subge.w	r5, r8, r5
 8006bf6:	2500      	movlt	r5, #0
 8006bf8:	f1b9 0f00 	cmp.w	r9, #0
 8006bfc:	bfb9      	ittee	lt
 8006bfe:	ebaa 0609 	sublt.w	r6, sl, r9
 8006c02:	2300      	movlt	r3, #0
 8006c04:	4656      	movge	r6, sl
 8006c06:	464b      	movge	r3, r9
 8006c08:	e77b      	b.n	8006b02 <_dtoa_r+0x632>
 8006c0a:	4645      	mov	r5, r8
 8006c0c:	4656      	mov	r6, sl
 8006c0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006c10:	e780      	b.n	8006b14 <_dtoa_r+0x644>
 8006c12:	4642      	mov	r2, r8
 8006c14:	e7a8      	b.n	8006b68 <_dtoa_r+0x698>
 8006c16:	f04f 0800 	mov.w	r8, #0
 8006c1a:	e7d2      	b.n	8006bc2 <_dtoa_r+0x6f2>
 8006c1c:	4698      	mov	r8, r3
 8006c1e:	e7d0      	b.n	8006bc2 <_dtoa_r+0x6f2>
 8006c20:	f04f 0800 	mov.w	r8, #0
 8006c24:	692b      	ldr	r3, [r5, #16]
 8006c26:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006c2a:	6918      	ldr	r0, [r3, #16]
 8006c2c:	f000 fa32 	bl	8007094 <__hi0bits>
 8006c30:	f1c0 0020 	rsb	r0, r0, #32
 8006c34:	9b07      	ldr	r3, [sp, #28]
 8006c36:	4418      	add	r0, r3
 8006c38:	f010 001f 	ands.w	r0, r0, #31
 8006c3c:	d047      	beq.n	8006cce <_dtoa_r+0x7fe>
 8006c3e:	f1c0 0320 	rsb	r3, r0, #32
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	dd3b      	ble.n	8006cbe <_dtoa_r+0x7ee>
 8006c46:	9b07      	ldr	r3, [sp, #28]
 8006c48:	f1c0 001c 	rsb	r0, r0, #28
 8006c4c:	4482      	add	sl, r0
 8006c4e:	4406      	add	r6, r0
 8006c50:	4403      	add	r3, r0
 8006c52:	9307      	str	r3, [sp, #28]
 8006c54:	f1ba 0f00 	cmp.w	sl, #0
 8006c58:	dd05      	ble.n	8006c66 <_dtoa_r+0x796>
 8006c5a:	4652      	mov	r2, sl
 8006c5c:	9901      	ldr	r1, [sp, #4]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fb54 	bl	800730c <__lshift>
 8006c64:	9001      	str	r0, [sp, #4]
 8006c66:	9b07      	ldr	r3, [sp, #28]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	dd05      	ble.n	8006c78 <_dtoa_r+0x7a8>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fb4b 	bl	800730c <__lshift>
 8006c76:	4605      	mov	r5, r0
 8006c78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c7a:	b353      	cbz	r3, 8006cd2 <_dtoa_r+0x802>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	9801      	ldr	r0, [sp, #4]
 8006c80:	f000 fb98 	bl	80073b4 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	da24      	bge.n	8006cd2 <_dtoa_r+0x802>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	220a      	movs	r2, #10
 8006c8c:	9901      	ldr	r1, [sp, #4]
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 f9c5 	bl	800701e <__multadd>
 8006c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c96:	9001      	str	r0, [sp, #4]
 8006c98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8142 	beq.w	8006f26 <_dtoa_r+0xa56>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 f9b8 	bl	800701e <__multadd>
 8006cae:	9b06      	ldr	r3, [sp, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	dc4b      	bgt.n	8006d4e <_dtoa_r+0x87e>
 8006cb6:	9b08      	ldr	r3, [sp, #32]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	dd48      	ble.n	8006d4e <_dtoa_r+0x87e>
 8006cbc:	e011      	b.n	8006ce2 <_dtoa_r+0x812>
 8006cbe:	d0c9      	beq.n	8006c54 <_dtoa_r+0x784>
 8006cc0:	9a07      	ldr	r2, [sp, #28]
 8006cc2:	331c      	adds	r3, #28
 8006cc4:	441a      	add	r2, r3
 8006cc6:	449a      	add	sl, r3
 8006cc8:	441e      	add	r6, r3
 8006cca:	4613      	mov	r3, r2
 8006ccc:	e7c1      	b.n	8006c52 <_dtoa_r+0x782>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	e7f6      	b.n	8006cc0 <_dtoa_r+0x7f0>
 8006cd2:	f1b9 0f00 	cmp.w	r9, #0
 8006cd6:	dc34      	bgt.n	8006d42 <_dtoa_r+0x872>
 8006cd8:	9b08      	ldr	r3, [sp, #32]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	dd31      	ble.n	8006d42 <_dtoa_r+0x872>
 8006cde:	f8cd 9018 	str.w	r9, [sp, #24]
 8006ce2:	9b06      	ldr	r3, [sp, #24]
 8006ce4:	b963      	cbnz	r3, 8006d00 <_dtoa_r+0x830>
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	2205      	movs	r2, #5
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 f997 	bl	800701e <__multadd>
 8006cf0:	4601      	mov	r1, r0
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	9801      	ldr	r0, [sp, #4]
 8006cf6:	f000 fb5d 	bl	80073b4 <__mcmp>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f73f adfc 	bgt.w	80068f8 <_dtoa_r+0x428>
 8006d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d02:	9e04      	ldr	r6, [sp, #16]
 8006d04:	ea6f 0b03 	mvn.w	fp, r3
 8006d08:	f04f 0900 	mov.w	r9, #0
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 f96e 	bl	8006ff0 <_Bfree>
 8006d14:	2f00      	cmp	r7, #0
 8006d16:	f43f aebb 	beq.w	8006a90 <_dtoa_r+0x5c0>
 8006d1a:	f1b9 0f00 	cmp.w	r9, #0
 8006d1e:	d005      	beq.n	8006d2c <_dtoa_r+0x85c>
 8006d20:	45b9      	cmp	r9, r7
 8006d22:	d003      	beq.n	8006d2c <_dtoa_r+0x85c>
 8006d24:	4649      	mov	r1, r9
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 f962 	bl	8006ff0 <_Bfree>
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 f95e 	bl	8006ff0 <_Bfree>
 8006d34:	e6ac      	b.n	8006a90 <_dtoa_r+0x5c0>
 8006d36:	2500      	movs	r5, #0
 8006d38:	462f      	mov	r7, r5
 8006d3a:	e7e1      	b.n	8006d00 <_dtoa_r+0x830>
 8006d3c:	469b      	mov	fp, r3
 8006d3e:	462f      	mov	r7, r5
 8006d40:	e5da      	b.n	80068f8 <_dtoa_r+0x428>
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	f8cd 9018 	str.w	r9, [sp, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80f3 	beq.w	8006f34 <_dtoa_r+0xa64>
 8006d4e:	2e00      	cmp	r6, #0
 8006d50:	dd05      	ble.n	8006d5e <_dtoa_r+0x88e>
 8006d52:	4639      	mov	r1, r7
 8006d54:	4632      	mov	r2, r6
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 fad8 	bl	800730c <__lshift>
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	f1b8 0f00 	cmp.w	r8, #0
 8006d62:	d04c      	beq.n	8006dfe <_dtoa_r+0x92e>
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4620      	mov	r0, r4
 8006d68:	f000 f90e 	bl	8006f88 <_Balloc>
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	3202      	adds	r2, #2
 8006d70:	4606      	mov	r6, r0
 8006d72:	0092      	lsls	r2, r2, #2
 8006d74:	f107 010c 	add.w	r1, r7, #12
 8006d78:	300c      	adds	r0, #12
 8006d7a:	f7fe fdf5 	bl	8005968 <memcpy>
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4631      	mov	r1, r6
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 fac2 	bl	800730c <__lshift>
 8006d88:	9b02      	ldr	r3, [sp, #8]
 8006d8a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	46b9      	mov	r9, r7
 8006d94:	9307      	str	r3, [sp, #28]
 8006d96:	4607      	mov	r7, r0
 8006d98:	4629      	mov	r1, r5
 8006d9a:	9801      	ldr	r0, [sp, #4]
 8006d9c:	f7ff fb0c 	bl	80063b8 <quorem>
 8006da0:	4649      	mov	r1, r9
 8006da2:	4606      	mov	r6, r0
 8006da4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006da8:	9801      	ldr	r0, [sp, #4]
 8006daa:	f000 fb03 	bl	80073b4 <__mcmp>
 8006dae:	463a      	mov	r2, r7
 8006db0:	9002      	str	r0, [sp, #8]
 8006db2:	4629      	mov	r1, r5
 8006db4:	4620      	mov	r0, r4
 8006db6:	f000 fb17 	bl	80073e8 <__mdiff>
 8006dba:	68c3      	ldr	r3, [r0, #12]
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	bb03      	cbnz	r3, 8006e02 <_dtoa_r+0x932>
 8006dc0:	4601      	mov	r1, r0
 8006dc2:	9009      	str	r0, [sp, #36]	; 0x24
 8006dc4:	9801      	ldr	r0, [sp, #4]
 8006dc6:	f000 faf5 	bl	80073b4 <__mcmp>
 8006dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dcc:	4603      	mov	r3, r0
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd4:	f000 f90c 	bl	8006ff0 <_Bfree>
 8006dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dda:	b9a3      	cbnz	r3, 8006e06 <_dtoa_r+0x936>
 8006ddc:	9a08      	ldr	r2, [sp, #32]
 8006dde:	b992      	cbnz	r2, 8006e06 <_dtoa_r+0x936>
 8006de0:	9a07      	ldr	r2, [sp, #28]
 8006de2:	b982      	cbnz	r2, 8006e06 <_dtoa_r+0x936>
 8006de4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006de8:	d029      	beq.n	8006e3e <_dtoa_r+0x96e>
 8006dea:	9b02      	ldr	r3, [sp, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dd01      	ble.n	8006df4 <_dtoa_r+0x924>
 8006df0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8006df4:	f10a 0601 	add.w	r6, sl, #1
 8006df8:	f88a 8000 	strb.w	r8, [sl]
 8006dfc:	e786      	b.n	8006d0c <_dtoa_r+0x83c>
 8006dfe:	4638      	mov	r0, r7
 8006e00:	e7c2      	b.n	8006d88 <_dtoa_r+0x8b8>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e7e3      	b.n	8006dce <_dtoa_r+0x8fe>
 8006e06:	9a02      	ldr	r2, [sp, #8]
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	db04      	blt.n	8006e16 <_dtoa_r+0x946>
 8006e0c:	d124      	bne.n	8006e58 <_dtoa_r+0x988>
 8006e0e:	9a08      	ldr	r2, [sp, #32]
 8006e10:	bb12      	cbnz	r2, 8006e58 <_dtoa_r+0x988>
 8006e12:	9a07      	ldr	r2, [sp, #28]
 8006e14:	bb02      	cbnz	r2, 8006e58 <_dtoa_r+0x988>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	ddec      	ble.n	8006df4 <_dtoa_r+0x924>
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	9901      	ldr	r1, [sp, #4]
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 fa74 	bl	800730c <__lshift>
 8006e24:	4629      	mov	r1, r5
 8006e26:	9001      	str	r0, [sp, #4]
 8006e28:	f000 fac4 	bl	80073b4 <__mcmp>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	dc03      	bgt.n	8006e38 <_dtoa_r+0x968>
 8006e30:	d1e0      	bne.n	8006df4 <_dtoa_r+0x924>
 8006e32:	f018 0f01 	tst.w	r8, #1
 8006e36:	d0dd      	beq.n	8006df4 <_dtoa_r+0x924>
 8006e38:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e3c:	d1d8      	bne.n	8006df0 <_dtoa_r+0x920>
 8006e3e:	2339      	movs	r3, #57	; 0x39
 8006e40:	f10a 0601 	add.w	r6, sl, #1
 8006e44:	f88a 3000 	strb.w	r3, [sl]
 8006e48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e4c:	2b39      	cmp	r3, #57	; 0x39
 8006e4e:	f106 32ff 	add.w	r2, r6, #4294967295
 8006e52:	d04c      	beq.n	8006eee <_dtoa_r+0xa1e>
 8006e54:	3301      	adds	r3, #1
 8006e56:	e051      	b.n	8006efc <_dtoa_r+0xa2c>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f10a 0601 	add.w	r6, sl, #1
 8006e5e:	dd05      	ble.n	8006e6c <_dtoa_r+0x99c>
 8006e60:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e64:	d0eb      	beq.n	8006e3e <_dtoa_r+0x96e>
 8006e66:	f108 0801 	add.w	r8, r8, #1
 8006e6a:	e7c5      	b.n	8006df8 <_dtoa_r+0x928>
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	9a06      	ldr	r2, [sp, #24]
 8006e70:	f806 8c01 	strb.w	r8, [r6, #-1]
 8006e74:	1af3      	subs	r3, r6, r3
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d021      	beq.n	8006ebe <_dtoa_r+0x9ee>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	220a      	movs	r2, #10
 8006e7e:	9901      	ldr	r1, [sp, #4]
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 f8cc 	bl	800701e <__multadd>
 8006e86:	45b9      	cmp	r9, r7
 8006e88:	9001      	str	r0, [sp, #4]
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	f04f 020a 	mov.w	r2, #10
 8006e92:	4649      	mov	r1, r9
 8006e94:	4620      	mov	r0, r4
 8006e96:	d105      	bne.n	8006ea4 <_dtoa_r+0x9d4>
 8006e98:	f000 f8c1 	bl	800701e <__multadd>
 8006e9c:	4681      	mov	r9, r0
 8006e9e:	4607      	mov	r7, r0
 8006ea0:	46b2      	mov	sl, r6
 8006ea2:	e779      	b.n	8006d98 <_dtoa_r+0x8c8>
 8006ea4:	f000 f8bb 	bl	800701e <__multadd>
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	4681      	mov	r9, r0
 8006eac:	2300      	movs	r3, #0
 8006eae:	220a      	movs	r2, #10
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 f8b4 	bl	800701e <__multadd>
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	e7f2      	b.n	8006ea0 <_dtoa_r+0x9d0>
 8006eba:	f04f 0900 	mov.w	r9, #0
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	9901      	ldr	r1, [sp, #4]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 fa22 	bl	800730c <__lshift>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	9001      	str	r0, [sp, #4]
 8006ecc:	f000 fa72 	bl	80073b4 <__mcmp>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	dcb9      	bgt.n	8006e48 <_dtoa_r+0x978>
 8006ed4:	d102      	bne.n	8006edc <_dtoa_r+0xa0c>
 8006ed6:	f018 0f01 	tst.w	r8, #1
 8006eda:	d1b5      	bne.n	8006e48 <_dtoa_r+0x978>
 8006edc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ee0:	2b30      	cmp	r3, #48	; 0x30
 8006ee2:	f106 32ff 	add.w	r2, r6, #4294967295
 8006ee6:	f47f af11 	bne.w	8006d0c <_dtoa_r+0x83c>
 8006eea:	4616      	mov	r6, r2
 8006eec:	e7f6      	b.n	8006edc <_dtoa_r+0xa0c>
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d105      	bne.n	8006f00 <_dtoa_r+0xa30>
 8006ef4:	9a04      	ldr	r2, [sp, #16]
 8006ef6:	f10b 0b01 	add.w	fp, fp, #1
 8006efa:	2331      	movs	r3, #49	; 0x31
 8006efc:	7013      	strb	r3, [r2, #0]
 8006efe:	e705      	b.n	8006d0c <_dtoa_r+0x83c>
 8006f00:	4616      	mov	r6, r2
 8006f02:	e7a1      	b.n	8006e48 <_dtoa_r+0x978>
 8006f04:	4b16      	ldr	r3, [pc, #88]	; (8006f60 <_dtoa_r+0xa90>)
 8006f06:	f7ff bb48 	b.w	800659a <_dtoa_r+0xca>
 8006f0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f47f ab23 	bne.w	8006558 <_dtoa_r+0x88>
 8006f12:	4b14      	ldr	r3, [pc, #80]	; (8006f64 <_dtoa_r+0xa94>)
 8006f14:	f7ff bb41 	b.w	800659a <_dtoa_r+0xca>
 8006f18:	9b08      	ldr	r3, [sp, #32]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	f77f ae3b 	ble.w	8006b96 <_dtoa_r+0x6c6>
 8006f20:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8006f24:	e64f      	b.n	8006bc6 <_dtoa_r+0x6f6>
 8006f26:	9b06      	ldr	r3, [sp, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	dc03      	bgt.n	8006f34 <_dtoa_r+0xa64>
 8006f2c:	9b08      	ldr	r3, [sp, #32]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	f73f aed7 	bgt.w	8006ce2 <_dtoa_r+0x812>
 8006f34:	9e04      	ldr	r6, [sp, #16]
 8006f36:	9801      	ldr	r0, [sp, #4]
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7ff fa3d 	bl	80063b8 <quorem>
 8006f3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006f42:	f806 8b01 	strb.w	r8, [r6], #1
 8006f46:	9b04      	ldr	r3, [sp, #16]
 8006f48:	9a06      	ldr	r2, [sp, #24]
 8006f4a:	1af3      	subs	r3, r6, r3
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	ddb4      	ble.n	8006eba <_dtoa_r+0x9ea>
 8006f50:	2300      	movs	r3, #0
 8006f52:	220a      	movs	r2, #10
 8006f54:	9901      	ldr	r1, [sp, #4]
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 f861 	bl	800701e <__multadd>
 8006f5c:	9001      	str	r0, [sp, #4]
 8006f5e:	e7ea      	b.n	8006f36 <_dtoa_r+0xa66>
 8006f60:	08007e08 	.word	0x08007e08
 8006f64:	08007e2c 	.word	0x08007e2c

08006f68 <_localeconv_r>:
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <_localeconv_r+0x14>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6a18      	ldr	r0, [r3, #32]
 8006f6e:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <_localeconv_r+0x18>)
 8006f70:	2800      	cmp	r0, #0
 8006f72:	bf08      	it	eq
 8006f74:	4618      	moveq	r0, r3
 8006f76:	30f0      	adds	r0, #240	; 0xf0
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	24000010 	.word	0x24000010
 8006f80:	24000074 	.word	0x24000074

08006f84 <__malloc_lock>:
 8006f84:	4770      	bx	lr

08006f86 <__malloc_unlock>:
 8006f86:	4770      	bx	lr

08006f88 <_Balloc>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	460e      	mov	r6, r1
 8006f90:	b93d      	cbnz	r5, 8006fa2 <_Balloc+0x1a>
 8006f92:	2010      	movs	r0, #16
 8006f94:	f7fe fcd8 	bl	8005948 <malloc>
 8006f98:	6260      	str	r0, [r4, #36]	; 0x24
 8006f9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f9e:	6005      	str	r5, [r0, #0]
 8006fa0:	60c5      	str	r5, [r0, #12]
 8006fa2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006fa4:	68eb      	ldr	r3, [r5, #12]
 8006fa6:	b183      	cbz	r3, 8006fca <_Balloc+0x42>
 8006fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006fb0:	b9b8      	cbnz	r0, 8006fe2 <_Balloc+0x5a>
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	fa01 f506 	lsl.w	r5, r1, r6
 8006fb8:	1d6a      	adds	r2, r5, #5
 8006fba:	0092      	lsls	r2, r2, #2
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fabf 	bl	8007540 <_calloc_r>
 8006fc2:	b160      	cbz	r0, 8006fde <_Balloc+0x56>
 8006fc4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006fc8:	e00e      	b.n	8006fe8 <_Balloc+0x60>
 8006fca:	2221      	movs	r2, #33	; 0x21
 8006fcc:	2104      	movs	r1, #4
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 fab6 	bl	8007540 <_calloc_r>
 8006fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd6:	60e8      	str	r0, [r5, #12]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e4      	bne.n	8006fa8 <_Balloc+0x20>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	bd70      	pop	{r4, r5, r6, pc}
 8006fe2:	6802      	ldr	r2, [r0, #0]
 8006fe4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fee:	e7f7      	b.n	8006fe0 <_Balloc+0x58>

08006ff0 <_Bfree>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	b93c      	cbnz	r4, 800700a <_Bfree+0x1a>
 8006ffa:	2010      	movs	r0, #16
 8006ffc:	f7fe fca4 	bl	8005948 <malloc>
 8007000:	6270      	str	r0, [r6, #36]	; 0x24
 8007002:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007006:	6004      	str	r4, [r0, #0]
 8007008:	60c4      	str	r4, [r0, #12]
 800700a:	b13d      	cbz	r5, 800701c <_Bfree+0x2c>
 800700c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800700e:	686a      	ldr	r2, [r5, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007016:	6029      	str	r1, [r5, #0]
 8007018:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800701c:	bd70      	pop	{r4, r5, r6, pc}

0800701e <__multadd>:
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	690d      	ldr	r5, [r1, #16]
 8007024:	461f      	mov	r7, r3
 8007026:	4606      	mov	r6, r0
 8007028:	460c      	mov	r4, r1
 800702a:	f101 0c14 	add.w	ip, r1, #20
 800702e:	2300      	movs	r3, #0
 8007030:	f8dc 0000 	ldr.w	r0, [ip]
 8007034:	b281      	uxth	r1, r0
 8007036:	fb02 7101 	mla	r1, r2, r1, r7
 800703a:	0c0f      	lsrs	r7, r1, #16
 800703c:	0c00      	lsrs	r0, r0, #16
 800703e:	fb02 7000 	mla	r0, r2, r0, r7
 8007042:	b289      	uxth	r1, r1
 8007044:	3301      	adds	r3, #1
 8007046:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800704a:	429d      	cmp	r5, r3
 800704c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007050:	f84c 1b04 	str.w	r1, [ip], #4
 8007054:	dcec      	bgt.n	8007030 <__multadd+0x12>
 8007056:	b1d7      	cbz	r7, 800708e <__multadd+0x70>
 8007058:	68a3      	ldr	r3, [r4, #8]
 800705a:	42ab      	cmp	r3, r5
 800705c:	dc12      	bgt.n	8007084 <__multadd+0x66>
 800705e:	6861      	ldr	r1, [r4, #4]
 8007060:	4630      	mov	r0, r6
 8007062:	3101      	adds	r1, #1
 8007064:	f7ff ff90 	bl	8006f88 <_Balloc>
 8007068:	6922      	ldr	r2, [r4, #16]
 800706a:	3202      	adds	r2, #2
 800706c:	f104 010c 	add.w	r1, r4, #12
 8007070:	4680      	mov	r8, r0
 8007072:	0092      	lsls	r2, r2, #2
 8007074:	300c      	adds	r0, #12
 8007076:	f7fe fc77 	bl	8005968 <memcpy>
 800707a:	4621      	mov	r1, r4
 800707c:	4630      	mov	r0, r6
 800707e:	f7ff ffb7 	bl	8006ff0 <_Bfree>
 8007082:	4644      	mov	r4, r8
 8007084:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007088:	3501      	adds	r5, #1
 800708a:	615f      	str	r7, [r3, #20]
 800708c:	6125      	str	r5, [r4, #16]
 800708e:	4620      	mov	r0, r4
 8007090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007094 <__hi0bits>:
 8007094:	0c02      	lsrs	r2, r0, #16
 8007096:	0412      	lsls	r2, r2, #16
 8007098:	4603      	mov	r3, r0
 800709a:	b9b2      	cbnz	r2, 80070ca <__hi0bits+0x36>
 800709c:	0403      	lsls	r3, r0, #16
 800709e:	2010      	movs	r0, #16
 80070a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070a4:	bf04      	itt	eq
 80070a6:	021b      	lsleq	r3, r3, #8
 80070a8:	3008      	addeq	r0, #8
 80070aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070ae:	bf04      	itt	eq
 80070b0:	011b      	lsleq	r3, r3, #4
 80070b2:	3004      	addeq	r0, #4
 80070b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070b8:	bf04      	itt	eq
 80070ba:	009b      	lsleq	r3, r3, #2
 80070bc:	3002      	addeq	r0, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	db06      	blt.n	80070d0 <__hi0bits+0x3c>
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	d503      	bpl.n	80070ce <__hi0bits+0x3a>
 80070c6:	3001      	adds	r0, #1
 80070c8:	4770      	bx	lr
 80070ca:	2000      	movs	r0, #0
 80070cc:	e7e8      	b.n	80070a0 <__hi0bits+0xc>
 80070ce:	2020      	movs	r0, #32
 80070d0:	4770      	bx	lr

080070d2 <__lo0bits>:
 80070d2:	6803      	ldr	r3, [r0, #0]
 80070d4:	f013 0207 	ands.w	r2, r3, #7
 80070d8:	4601      	mov	r1, r0
 80070da:	d00b      	beq.n	80070f4 <__lo0bits+0x22>
 80070dc:	07da      	lsls	r2, r3, #31
 80070de:	d423      	bmi.n	8007128 <__lo0bits+0x56>
 80070e0:	0798      	lsls	r0, r3, #30
 80070e2:	bf49      	itett	mi
 80070e4:	085b      	lsrmi	r3, r3, #1
 80070e6:	089b      	lsrpl	r3, r3, #2
 80070e8:	2001      	movmi	r0, #1
 80070ea:	600b      	strmi	r3, [r1, #0]
 80070ec:	bf5c      	itt	pl
 80070ee:	600b      	strpl	r3, [r1, #0]
 80070f0:	2002      	movpl	r0, #2
 80070f2:	4770      	bx	lr
 80070f4:	b298      	uxth	r0, r3
 80070f6:	b9a8      	cbnz	r0, 8007124 <__lo0bits+0x52>
 80070f8:	0c1b      	lsrs	r3, r3, #16
 80070fa:	2010      	movs	r0, #16
 80070fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007100:	bf04      	itt	eq
 8007102:	0a1b      	lsreq	r3, r3, #8
 8007104:	3008      	addeq	r0, #8
 8007106:	071a      	lsls	r2, r3, #28
 8007108:	bf04      	itt	eq
 800710a:	091b      	lsreq	r3, r3, #4
 800710c:	3004      	addeq	r0, #4
 800710e:	079a      	lsls	r2, r3, #30
 8007110:	bf04      	itt	eq
 8007112:	089b      	lsreq	r3, r3, #2
 8007114:	3002      	addeq	r0, #2
 8007116:	07da      	lsls	r2, r3, #31
 8007118:	d402      	bmi.n	8007120 <__lo0bits+0x4e>
 800711a:	085b      	lsrs	r3, r3, #1
 800711c:	d006      	beq.n	800712c <__lo0bits+0x5a>
 800711e:	3001      	adds	r0, #1
 8007120:	600b      	str	r3, [r1, #0]
 8007122:	4770      	bx	lr
 8007124:	4610      	mov	r0, r2
 8007126:	e7e9      	b.n	80070fc <__lo0bits+0x2a>
 8007128:	2000      	movs	r0, #0
 800712a:	4770      	bx	lr
 800712c:	2020      	movs	r0, #32
 800712e:	4770      	bx	lr

08007130 <__i2b>:
 8007130:	b510      	push	{r4, lr}
 8007132:	460c      	mov	r4, r1
 8007134:	2101      	movs	r1, #1
 8007136:	f7ff ff27 	bl	8006f88 <_Balloc>
 800713a:	2201      	movs	r2, #1
 800713c:	6144      	str	r4, [r0, #20]
 800713e:	6102      	str	r2, [r0, #16]
 8007140:	bd10      	pop	{r4, pc}

08007142 <__multiply>:
 8007142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007146:	4614      	mov	r4, r2
 8007148:	690a      	ldr	r2, [r1, #16]
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	429a      	cmp	r2, r3
 800714e:	bfb8      	it	lt
 8007150:	460b      	movlt	r3, r1
 8007152:	4688      	mov	r8, r1
 8007154:	bfbc      	itt	lt
 8007156:	46a0      	movlt	r8, r4
 8007158:	461c      	movlt	r4, r3
 800715a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800715e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007166:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800716a:	eb07 0609 	add.w	r6, r7, r9
 800716e:	42b3      	cmp	r3, r6
 8007170:	bfb8      	it	lt
 8007172:	3101      	addlt	r1, #1
 8007174:	f7ff ff08 	bl	8006f88 <_Balloc>
 8007178:	f100 0514 	add.w	r5, r0, #20
 800717c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007180:	462b      	mov	r3, r5
 8007182:	2200      	movs	r2, #0
 8007184:	4573      	cmp	r3, lr
 8007186:	d316      	bcc.n	80071b6 <__multiply+0x74>
 8007188:	f104 0214 	add.w	r2, r4, #20
 800718c:	f108 0114 	add.w	r1, r8, #20
 8007190:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007194:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	9b00      	ldr	r3, [sp, #0]
 800719c:	9201      	str	r2, [sp, #4]
 800719e:	4293      	cmp	r3, r2
 80071a0:	d80c      	bhi.n	80071bc <__multiply+0x7a>
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	dd03      	ble.n	80071ae <__multiply+0x6c>
 80071a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d05d      	beq.n	800726a <__multiply+0x128>
 80071ae:	6106      	str	r6, [r0, #16]
 80071b0:	b003      	add	sp, #12
 80071b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b6:	f843 2b04 	str.w	r2, [r3], #4
 80071ba:	e7e3      	b.n	8007184 <__multiply+0x42>
 80071bc:	f8b2 b000 	ldrh.w	fp, [r2]
 80071c0:	f1bb 0f00 	cmp.w	fp, #0
 80071c4:	d023      	beq.n	800720e <__multiply+0xcc>
 80071c6:	4689      	mov	r9, r1
 80071c8:	46ac      	mov	ip, r5
 80071ca:	f04f 0800 	mov.w	r8, #0
 80071ce:	f859 4b04 	ldr.w	r4, [r9], #4
 80071d2:	f8dc a000 	ldr.w	sl, [ip]
 80071d6:	b2a3      	uxth	r3, r4
 80071d8:	fa1f fa8a 	uxth.w	sl, sl
 80071dc:	fb0b a303 	mla	r3, fp, r3, sl
 80071e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071e4:	f8dc 4000 	ldr.w	r4, [ip]
 80071e8:	4443      	add	r3, r8
 80071ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071ee:	fb0b 840a 	mla	r4, fp, sl, r8
 80071f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80071f6:	46e2      	mov	sl, ip
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80071fe:	454f      	cmp	r7, r9
 8007200:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007204:	f84a 3b04 	str.w	r3, [sl], #4
 8007208:	d82b      	bhi.n	8007262 <__multiply+0x120>
 800720a:	f8cc 8004 	str.w	r8, [ip, #4]
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007214:	3204      	adds	r2, #4
 8007216:	f1ba 0f00 	cmp.w	sl, #0
 800721a:	d020      	beq.n	800725e <__multiply+0x11c>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	4689      	mov	r9, r1
 8007220:	46a8      	mov	r8, r5
 8007222:	f04f 0b00 	mov.w	fp, #0
 8007226:	f8b9 c000 	ldrh.w	ip, [r9]
 800722a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800722e:	fb0a 440c 	mla	r4, sl, ip, r4
 8007232:	445c      	add	r4, fp
 8007234:	46c4      	mov	ip, r8
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800723c:	f84c 3b04 	str.w	r3, [ip], #4
 8007240:	f859 3b04 	ldr.w	r3, [r9], #4
 8007244:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007248:	0c1b      	lsrs	r3, r3, #16
 800724a:	fb0a b303 	mla	r3, sl, r3, fp
 800724e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007252:	454f      	cmp	r7, r9
 8007254:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007258:	d805      	bhi.n	8007266 <__multiply+0x124>
 800725a:	f8c8 3004 	str.w	r3, [r8, #4]
 800725e:	3504      	adds	r5, #4
 8007260:	e79b      	b.n	800719a <__multiply+0x58>
 8007262:	46d4      	mov	ip, sl
 8007264:	e7b3      	b.n	80071ce <__multiply+0x8c>
 8007266:	46e0      	mov	r8, ip
 8007268:	e7dd      	b.n	8007226 <__multiply+0xe4>
 800726a:	3e01      	subs	r6, #1
 800726c:	e799      	b.n	80071a2 <__multiply+0x60>
	...

08007270 <__pow5mult>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	4615      	mov	r5, r2
 8007276:	f012 0203 	ands.w	r2, r2, #3
 800727a:	4606      	mov	r6, r0
 800727c:	460f      	mov	r7, r1
 800727e:	d007      	beq.n	8007290 <__pow5mult+0x20>
 8007280:	3a01      	subs	r2, #1
 8007282:	4c21      	ldr	r4, [pc, #132]	; (8007308 <__pow5mult+0x98>)
 8007284:	2300      	movs	r3, #0
 8007286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800728a:	f7ff fec8 	bl	800701e <__multadd>
 800728e:	4607      	mov	r7, r0
 8007290:	10ad      	asrs	r5, r5, #2
 8007292:	d035      	beq.n	8007300 <__pow5mult+0x90>
 8007294:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007296:	b93c      	cbnz	r4, 80072a8 <__pow5mult+0x38>
 8007298:	2010      	movs	r0, #16
 800729a:	f7fe fb55 	bl	8005948 <malloc>
 800729e:	6270      	str	r0, [r6, #36]	; 0x24
 80072a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072a4:	6004      	str	r4, [r0, #0]
 80072a6:	60c4      	str	r4, [r0, #12]
 80072a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072b0:	b94c      	cbnz	r4, 80072c6 <__pow5mult+0x56>
 80072b2:	f240 2171 	movw	r1, #625	; 0x271
 80072b6:	4630      	mov	r0, r6
 80072b8:	f7ff ff3a 	bl	8007130 <__i2b>
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c8 0008 	str.w	r0, [r8, #8]
 80072c2:	4604      	mov	r4, r0
 80072c4:	6003      	str	r3, [r0, #0]
 80072c6:	f04f 0800 	mov.w	r8, #0
 80072ca:	07eb      	lsls	r3, r5, #31
 80072cc:	d50a      	bpl.n	80072e4 <__pow5mult+0x74>
 80072ce:	4639      	mov	r1, r7
 80072d0:	4622      	mov	r2, r4
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ff35 	bl	8007142 <__multiply>
 80072d8:	4639      	mov	r1, r7
 80072da:	4681      	mov	r9, r0
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff fe87 	bl	8006ff0 <_Bfree>
 80072e2:	464f      	mov	r7, r9
 80072e4:	106d      	asrs	r5, r5, #1
 80072e6:	d00b      	beq.n	8007300 <__pow5mult+0x90>
 80072e8:	6820      	ldr	r0, [r4, #0]
 80072ea:	b938      	cbnz	r0, 80072fc <__pow5mult+0x8c>
 80072ec:	4622      	mov	r2, r4
 80072ee:	4621      	mov	r1, r4
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7ff ff26 	bl	8007142 <__multiply>
 80072f6:	6020      	str	r0, [r4, #0]
 80072f8:	f8c0 8000 	str.w	r8, [r0]
 80072fc:	4604      	mov	r4, r0
 80072fe:	e7e4      	b.n	80072ca <__pow5mult+0x5a>
 8007300:	4638      	mov	r0, r7
 8007302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007306:	bf00      	nop
 8007308:	08007f30 	.word	0x08007f30

0800730c <__lshift>:
 800730c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	460c      	mov	r4, r1
 8007312:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	6849      	ldr	r1, [r1, #4]
 800731a:	eb0a 0903 	add.w	r9, sl, r3
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	4607      	mov	r7, r0
 8007322:	4616      	mov	r6, r2
 8007324:	f109 0501 	add.w	r5, r9, #1
 8007328:	42ab      	cmp	r3, r5
 800732a:	db32      	blt.n	8007392 <__lshift+0x86>
 800732c:	4638      	mov	r0, r7
 800732e:	f7ff fe2b 	bl	8006f88 <_Balloc>
 8007332:	2300      	movs	r3, #0
 8007334:	4680      	mov	r8, r0
 8007336:	f100 0114 	add.w	r1, r0, #20
 800733a:	461a      	mov	r2, r3
 800733c:	4553      	cmp	r3, sl
 800733e:	db2b      	blt.n	8007398 <__lshift+0x8c>
 8007340:	6920      	ldr	r0, [r4, #16]
 8007342:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007346:	f104 0314 	add.w	r3, r4, #20
 800734a:	f016 021f 	ands.w	r2, r6, #31
 800734e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007352:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007356:	d025      	beq.n	80073a4 <__lshift+0x98>
 8007358:	f1c2 0e20 	rsb	lr, r2, #32
 800735c:	2000      	movs	r0, #0
 800735e:	681e      	ldr	r6, [r3, #0]
 8007360:	468a      	mov	sl, r1
 8007362:	4096      	lsls	r6, r2
 8007364:	4330      	orrs	r0, r6
 8007366:	f84a 0b04 	str.w	r0, [sl], #4
 800736a:	f853 0b04 	ldr.w	r0, [r3], #4
 800736e:	459c      	cmp	ip, r3
 8007370:	fa20 f00e 	lsr.w	r0, r0, lr
 8007374:	d814      	bhi.n	80073a0 <__lshift+0x94>
 8007376:	6048      	str	r0, [r1, #4]
 8007378:	b108      	cbz	r0, 800737e <__lshift+0x72>
 800737a:	f109 0502 	add.w	r5, r9, #2
 800737e:	3d01      	subs	r5, #1
 8007380:	4638      	mov	r0, r7
 8007382:	f8c8 5010 	str.w	r5, [r8, #16]
 8007386:	4621      	mov	r1, r4
 8007388:	f7ff fe32 	bl	8006ff0 <_Bfree>
 800738c:	4640      	mov	r0, r8
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	3101      	adds	r1, #1
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	e7c7      	b.n	8007328 <__lshift+0x1c>
 8007398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800739c:	3301      	adds	r3, #1
 800739e:	e7cd      	b.n	800733c <__lshift+0x30>
 80073a0:	4651      	mov	r1, sl
 80073a2:	e7dc      	b.n	800735e <__lshift+0x52>
 80073a4:	3904      	subs	r1, #4
 80073a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80073ae:	459c      	cmp	ip, r3
 80073b0:	d8f9      	bhi.n	80073a6 <__lshift+0x9a>
 80073b2:	e7e4      	b.n	800737e <__lshift+0x72>

080073b4 <__mcmp>:
 80073b4:	6903      	ldr	r3, [r0, #16]
 80073b6:	690a      	ldr	r2, [r1, #16]
 80073b8:	1a9b      	subs	r3, r3, r2
 80073ba:	b530      	push	{r4, r5, lr}
 80073bc:	d10c      	bne.n	80073d8 <__mcmp+0x24>
 80073be:	0092      	lsls	r2, r2, #2
 80073c0:	3014      	adds	r0, #20
 80073c2:	3114      	adds	r1, #20
 80073c4:	1884      	adds	r4, r0, r2
 80073c6:	4411      	add	r1, r2
 80073c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073d0:	4295      	cmp	r5, r2
 80073d2:	d003      	beq.n	80073dc <__mcmp+0x28>
 80073d4:	d305      	bcc.n	80073e2 <__mcmp+0x2e>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4618      	mov	r0, r3
 80073da:	bd30      	pop	{r4, r5, pc}
 80073dc:	42a0      	cmp	r0, r4
 80073de:	d3f3      	bcc.n	80073c8 <__mcmp+0x14>
 80073e0:	e7fa      	b.n	80073d8 <__mcmp+0x24>
 80073e2:	f04f 33ff 	mov.w	r3, #4294967295
 80073e6:	e7f7      	b.n	80073d8 <__mcmp+0x24>

080073e8 <__mdiff>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	460d      	mov	r5, r1
 80073ee:	4607      	mov	r7, r0
 80073f0:	4611      	mov	r1, r2
 80073f2:	4628      	mov	r0, r5
 80073f4:	4614      	mov	r4, r2
 80073f6:	f7ff ffdd 	bl	80073b4 <__mcmp>
 80073fa:	1e06      	subs	r6, r0, #0
 80073fc:	d108      	bne.n	8007410 <__mdiff+0x28>
 80073fe:	4631      	mov	r1, r6
 8007400:	4638      	mov	r0, r7
 8007402:	f7ff fdc1 	bl	8006f88 <_Balloc>
 8007406:	2301      	movs	r3, #1
 8007408:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800740c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007410:	bfa4      	itt	ge
 8007412:	4623      	movge	r3, r4
 8007414:	462c      	movge	r4, r5
 8007416:	4638      	mov	r0, r7
 8007418:	6861      	ldr	r1, [r4, #4]
 800741a:	bfa6      	itte	ge
 800741c:	461d      	movge	r5, r3
 800741e:	2600      	movge	r6, #0
 8007420:	2601      	movlt	r6, #1
 8007422:	f7ff fdb1 	bl	8006f88 <_Balloc>
 8007426:	692b      	ldr	r3, [r5, #16]
 8007428:	60c6      	str	r6, [r0, #12]
 800742a:	6926      	ldr	r6, [r4, #16]
 800742c:	f105 0914 	add.w	r9, r5, #20
 8007430:	f104 0214 	add.w	r2, r4, #20
 8007434:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007438:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800743c:	f100 0514 	add.w	r5, r0, #20
 8007440:	f04f 0e00 	mov.w	lr, #0
 8007444:	f852 ab04 	ldr.w	sl, [r2], #4
 8007448:	f859 4b04 	ldr.w	r4, [r9], #4
 800744c:	fa1e f18a 	uxtah	r1, lr, sl
 8007450:	b2a3      	uxth	r3, r4
 8007452:	1ac9      	subs	r1, r1, r3
 8007454:	0c23      	lsrs	r3, r4, #16
 8007456:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800745a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800745e:	b289      	uxth	r1, r1
 8007460:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007464:	45c8      	cmp	r8, r9
 8007466:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800746a:	4694      	mov	ip, r2
 800746c:	f845 3b04 	str.w	r3, [r5], #4
 8007470:	d8e8      	bhi.n	8007444 <__mdiff+0x5c>
 8007472:	45bc      	cmp	ip, r7
 8007474:	d304      	bcc.n	8007480 <__mdiff+0x98>
 8007476:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800747a:	b183      	cbz	r3, 800749e <__mdiff+0xb6>
 800747c:	6106      	str	r6, [r0, #16]
 800747e:	e7c5      	b.n	800740c <__mdiff+0x24>
 8007480:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007484:	fa1e f381 	uxtah	r3, lr, r1
 8007488:	141a      	asrs	r2, r3, #16
 800748a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800748e:	b29b      	uxth	r3, r3
 8007490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007494:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007498:	f845 3b04 	str.w	r3, [r5], #4
 800749c:	e7e9      	b.n	8007472 <__mdiff+0x8a>
 800749e:	3e01      	subs	r6, #1
 80074a0:	e7e9      	b.n	8007476 <__mdiff+0x8e>

080074a2 <__d2b>:
 80074a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074a6:	460e      	mov	r6, r1
 80074a8:	2101      	movs	r1, #1
 80074aa:	ec59 8b10 	vmov	r8, r9, d0
 80074ae:	4615      	mov	r5, r2
 80074b0:	f7ff fd6a 	bl	8006f88 <_Balloc>
 80074b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80074b8:	4607      	mov	r7, r0
 80074ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074be:	bb34      	cbnz	r4, 800750e <__d2b+0x6c>
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	f1b8 0300 	subs.w	r3, r8, #0
 80074c6:	d027      	beq.n	8007518 <__d2b+0x76>
 80074c8:	a802      	add	r0, sp, #8
 80074ca:	f840 3d08 	str.w	r3, [r0, #-8]!
 80074ce:	f7ff fe00 	bl	80070d2 <__lo0bits>
 80074d2:	9900      	ldr	r1, [sp, #0]
 80074d4:	b1f0      	cbz	r0, 8007514 <__d2b+0x72>
 80074d6:	9a01      	ldr	r2, [sp, #4]
 80074d8:	f1c0 0320 	rsb	r3, r0, #32
 80074dc:	fa02 f303 	lsl.w	r3, r2, r3
 80074e0:	430b      	orrs	r3, r1
 80074e2:	40c2      	lsrs	r2, r0
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	9201      	str	r2, [sp, #4]
 80074e8:	9b01      	ldr	r3, [sp, #4]
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bf14      	ite	ne
 80074f0:	2102      	movne	r1, #2
 80074f2:	2101      	moveq	r1, #1
 80074f4:	6139      	str	r1, [r7, #16]
 80074f6:	b1c4      	cbz	r4, 800752a <__d2b+0x88>
 80074f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80074fc:	4404      	add	r4, r0
 80074fe:	6034      	str	r4, [r6, #0]
 8007500:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007504:	6028      	str	r0, [r5, #0]
 8007506:	4638      	mov	r0, r7
 8007508:	b003      	add	sp, #12
 800750a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800750e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007512:	e7d5      	b.n	80074c0 <__d2b+0x1e>
 8007514:	6179      	str	r1, [r7, #20]
 8007516:	e7e7      	b.n	80074e8 <__d2b+0x46>
 8007518:	a801      	add	r0, sp, #4
 800751a:	f7ff fdda 	bl	80070d2 <__lo0bits>
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	2101      	movs	r1, #1
 8007524:	6139      	str	r1, [r7, #16]
 8007526:	3020      	adds	r0, #32
 8007528:	e7e5      	b.n	80074f6 <__d2b+0x54>
 800752a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800752e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007532:	6030      	str	r0, [r6, #0]
 8007534:	6918      	ldr	r0, [r3, #16]
 8007536:	f7ff fdad 	bl	8007094 <__hi0bits>
 800753a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800753e:	e7e1      	b.n	8007504 <__d2b+0x62>

08007540 <_calloc_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	fb02 f401 	mul.w	r4, r2, r1
 8007546:	4621      	mov	r1, r4
 8007548:	f7fe fa70 	bl	8005a2c <_malloc_r>
 800754c:	4605      	mov	r5, r0
 800754e:	b118      	cbz	r0, 8007558 <_calloc_r+0x18>
 8007550:	4622      	mov	r2, r4
 8007552:	2100      	movs	r1, #0
 8007554:	f7fe fa13 	bl	800597e <memset>
 8007558:	4628      	mov	r0, r5
 800755a:	bd38      	pop	{r3, r4, r5, pc}

0800755c <__ssputs_r>:
 800755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	688e      	ldr	r6, [r1, #8]
 8007562:	429e      	cmp	r6, r3
 8007564:	4682      	mov	sl, r0
 8007566:	460c      	mov	r4, r1
 8007568:	4690      	mov	r8, r2
 800756a:	4699      	mov	r9, r3
 800756c:	d837      	bhi.n	80075de <__ssputs_r+0x82>
 800756e:	898a      	ldrh	r2, [r1, #12]
 8007570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007574:	d031      	beq.n	80075da <__ssputs_r+0x7e>
 8007576:	6825      	ldr	r5, [r4, #0]
 8007578:	6909      	ldr	r1, [r1, #16]
 800757a:	1a6f      	subs	r7, r5, r1
 800757c:	6965      	ldr	r5, [r4, #20]
 800757e:	2302      	movs	r3, #2
 8007580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007584:	fb95 f5f3 	sdiv	r5, r5, r3
 8007588:	f109 0301 	add.w	r3, r9, #1
 800758c:	443b      	add	r3, r7
 800758e:	429d      	cmp	r5, r3
 8007590:	bf38      	it	cc
 8007592:	461d      	movcc	r5, r3
 8007594:	0553      	lsls	r3, r2, #21
 8007596:	d530      	bpl.n	80075fa <__ssputs_r+0x9e>
 8007598:	4629      	mov	r1, r5
 800759a:	f7fe fa47 	bl	8005a2c <_malloc_r>
 800759e:	4606      	mov	r6, r0
 80075a0:	b950      	cbnz	r0, 80075b8 <__ssputs_r+0x5c>
 80075a2:	230c      	movs	r3, #12
 80075a4:	f8ca 3000 	str.w	r3, [sl]
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b8:	463a      	mov	r2, r7
 80075ba:	6921      	ldr	r1, [r4, #16]
 80075bc:	f7fe f9d4 	bl	8005968 <memcpy>
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	6126      	str	r6, [r4, #16]
 80075ce:	6165      	str	r5, [r4, #20]
 80075d0:	443e      	add	r6, r7
 80075d2:	1bed      	subs	r5, r5, r7
 80075d4:	6026      	str	r6, [r4, #0]
 80075d6:	60a5      	str	r5, [r4, #8]
 80075d8:	464e      	mov	r6, r9
 80075da:	454e      	cmp	r6, r9
 80075dc:	d900      	bls.n	80075e0 <__ssputs_r+0x84>
 80075de:	464e      	mov	r6, r9
 80075e0:	4632      	mov	r2, r6
 80075e2:	4641      	mov	r1, r8
 80075e4:	6820      	ldr	r0, [r4, #0]
 80075e6:	f000 f91d 	bl	8007824 <memmove>
 80075ea:	68a3      	ldr	r3, [r4, #8]
 80075ec:	1b9b      	subs	r3, r3, r6
 80075ee:	60a3      	str	r3, [r4, #8]
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	441e      	add	r6, r3
 80075f4:	6026      	str	r6, [r4, #0]
 80075f6:	2000      	movs	r0, #0
 80075f8:	e7dc      	b.n	80075b4 <__ssputs_r+0x58>
 80075fa:	462a      	mov	r2, r5
 80075fc:	f000 f92b 	bl	8007856 <_realloc_r>
 8007600:	4606      	mov	r6, r0
 8007602:	2800      	cmp	r0, #0
 8007604:	d1e2      	bne.n	80075cc <__ssputs_r+0x70>
 8007606:	6921      	ldr	r1, [r4, #16]
 8007608:	4650      	mov	r0, sl
 800760a:	f7fe f9c1 	bl	8005990 <_free_r>
 800760e:	e7c8      	b.n	80075a2 <__ssputs_r+0x46>

08007610 <_svfiprintf_r>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	461d      	mov	r5, r3
 8007616:	898b      	ldrh	r3, [r1, #12]
 8007618:	061f      	lsls	r7, r3, #24
 800761a:	b09d      	sub	sp, #116	; 0x74
 800761c:	4680      	mov	r8, r0
 800761e:	460c      	mov	r4, r1
 8007620:	4616      	mov	r6, r2
 8007622:	d50f      	bpl.n	8007644 <_svfiprintf_r+0x34>
 8007624:	690b      	ldr	r3, [r1, #16]
 8007626:	b96b      	cbnz	r3, 8007644 <_svfiprintf_r+0x34>
 8007628:	2140      	movs	r1, #64	; 0x40
 800762a:	f7fe f9ff 	bl	8005a2c <_malloc_r>
 800762e:	6020      	str	r0, [r4, #0]
 8007630:	6120      	str	r0, [r4, #16]
 8007632:	b928      	cbnz	r0, 8007640 <_svfiprintf_r+0x30>
 8007634:	230c      	movs	r3, #12
 8007636:	f8c8 3000 	str.w	r3, [r8]
 800763a:	f04f 30ff 	mov.w	r0, #4294967295
 800763e:	e0c8      	b.n	80077d2 <_svfiprintf_r+0x1c2>
 8007640:	2340      	movs	r3, #64	; 0x40
 8007642:	6163      	str	r3, [r4, #20]
 8007644:	2300      	movs	r3, #0
 8007646:	9309      	str	r3, [sp, #36]	; 0x24
 8007648:	2320      	movs	r3, #32
 800764a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800764e:	2330      	movs	r3, #48	; 0x30
 8007650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007654:	9503      	str	r5, [sp, #12]
 8007656:	f04f 0b01 	mov.w	fp, #1
 800765a:	4637      	mov	r7, r6
 800765c:	463d      	mov	r5, r7
 800765e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007662:	b10b      	cbz	r3, 8007668 <_svfiprintf_r+0x58>
 8007664:	2b25      	cmp	r3, #37	; 0x25
 8007666:	d13e      	bne.n	80076e6 <_svfiprintf_r+0xd6>
 8007668:	ebb7 0a06 	subs.w	sl, r7, r6
 800766c:	d00b      	beq.n	8007686 <_svfiprintf_r+0x76>
 800766e:	4653      	mov	r3, sl
 8007670:	4632      	mov	r2, r6
 8007672:	4621      	mov	r1, r4
 8007674:	4640      	mov	r0, r8
 8007676:	f7ff ff71 	bl	800755c <__ssputs_r>
 800767a:	3001      	adds	r0, #1
 800767c:	f000 80a4 	beq.w	80077c8 <_svfiprintf_r+0x1b8>
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	4453      	add	r3, sl
 8007684:	9309      	str	r3, [sp, #36]	; 0x24
 8007686:	783b      	ldrb	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 809d 	beq.w	80077c8 <_svfiprintf_r+0x1b8>
 800768e:	2300      	movs	r3, #0
 8007690:	f04f 32ff 	mov.w	r2, #4294967295
 8007694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076a0:	931a      	str	r3, [sp, #104]	; 0x68
 80076a2:	462f      	mov	r7, r5
 80076a4:	2205      	movs	r2, #5
 80076a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80076aa:	4850      	ldr	r0, [pc, #320]	; (80077ec <_svfiprintf_r+0x1dc>)
 80076ac:	f7f8 fe20 	bl	80002f0 <memchr>
 80076b0:	9b04      	ldr	r3, [sp, #16]
 80076b2:	b9d0      	cbnz	r0, 80076ea <_svfiprintf_r+0xda>
 80076b4:	06d9      	lsls	r1, r3, #27
 80076b6:	bf44      	itt	mi
 80076b8:	2220      	movmi	r2, #32
 80076ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076be:	071a      	lsls	r2, r3, #28
 80076c0:	bf44      	itt	mi
 80076c2:	222b      	movmi	r2, #43	; 0x2b
 80076c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076c8:	782a      	ldrb	r2, [r5, #0]
 80076ca:	2a2a      	cmp	r2, #42	; 0x2a
 80076cc:	d015      	beq.n	80076fa <_svfiprintf_r+0xea>
 80076ce:	9a07      	ldr	r2, [sp, #28]
 80076d0:	462f      	mov	r7, r5
 80076d2:	2000      	movs	r0, #0
 80076d4:	250a      	movs	r5, #10
 80076d6:	4639      	mov	r1, r7
 80076d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076dc:	3b30      	subs	r3, #48	; 0x30
 80076de:	2b09      	cmp	r3, #9
 80076e0:	d94d      	bls.n	800777e <_svfiprintf_r+0x16e>
 80076e2:	b1b8      	cbz	r0, 8007714 <_svfiprintf_r+0x104>
 80076e4:	e00f      	b.n	8007706 <_svfiprintf_r+0xf6>
 80076e6:	462f      	mov	r7, r5
 80076e8:	e7b8      	b.n	800765c <_svfiprintf_r+0x4c>
 80076ea:	4a40      	ldr	r2, [pc, #256]	; (80077ec <_svfiprintf_r+0x1dc>)
 80076ec:	1a80      	subs	r0, r0, r2
 80076ee:	fa0b f000 	lsl.w	r0, fp, r0
 80076f2:	4318      	orrs	r0, r3
 80076f4:	9004      	str	r0, [sp, #16]
 80076f6:	463d      	mov	r5, r7
 80076f8:	e7d3      	b.n	80076a2 <_svfiprintf_r+0x92>
 80076fa:	9a03      	ldr	r2, [sp, #12]
 80076fc:	1d11      	adds	r1, r2, #4
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	9103      	str	r1, [sp, #12]
 8007702:	2a00      	cmp	r2, #0
 8007704:	db01      	blt.n	800770a <_svfiprintf_r+0xfa>
 8007706:	9207      	str	r2, [sp, #28]
 8007708:	e004      	b.n	8007714 <_svfiprintf_r+0x104>
 800770a:	4252      	negs	r2, r2
 800770c:	f043 0302 	orr.w	r3, r3, #2
 8007710:	9207      	str	r2, [sp, #28]
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	783b      	ldrb	r3, [r7, #0]
 8007716:	2b2e      	cmp	r3, #46	; 0x2e
 8007718:	d10c      	bne.n	8007734 <_svfiprintf_r+0x124>
 800771a:	787b      	ldrb	r3, [r7, #1]
 800771c:	2b2a      	cmp	r3, #42	; 0x2a
 800771e:	d133      	bne.n	8007788 <_svfiprintf_r+0x178>
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	1d1a      	adds	r2, r3, #4
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	9203      	str	r2, [sp, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	bfb8      	it	lt
 800772c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007730:	3702      	adds	r7, #2
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	4d2e      	ldr	r5, [pc, #184]	; (80077f0 <_svfiprintf_r+0x1e0>)
 8007736:	7839      	ldrb	r1, [r7, #0]
 8007738:	2203      	movs	r2, #3
 800773a:	4628      	mov	r0, r5
 800773c:	f7f8 fdd8 	bl	80002f0 <memchr>
 8007740:	b138      	cbz	r0, 8007752 <_svfiprintf_r+0x142>
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	1b40      	subs	r0, r0, r5
 8007746:	fa03 f000 	lsl.w	r0, r3, r0
 800774a:	9b04      	ldr	r3, [sp, #16]
 800774c:	4303      	orrs	r3, r0
 800774e:	3701      	adds	r7, #1
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	7839      	ldrb	r1, [r7, #0]
 8007754:	4827      	ldr	r0, [pc, #156]	; (80077f4 <_svfiprintf_r+0x1e4>)
 8007756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800775a:	2206      	movs	r2, #6
 800775c:	1c7e      	adds	r6, r7, #1
 800775e:	f7f8 fdc7 	bl	80002f0 <memchr>
 8007762:	2800      	cmp	r0, #0
 8007764:	d038      	beq.n	80077d8 <_svfiprintf_r+0x1c8>
 8007766:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <_svfiprintf_r+0x1e8>)
 8007768:	bb13      	cbnz	r3, 80077b0 <_svfiprintf_r+0x1a0>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	3307      	adds	r3, #7
 800776e:	f023 0307 	bic.w	r3, r3, #7
 8007772:	3308      	adds	r3, #8
 8007774:	9303      	str	r3, [sp, #12]
 8007776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007778:	444b      	add	r3, r9
 800777a:	9309      	str	r3, [sp, #36]	; 0x24
 800777c:	e76d      	b.n	800765a <_svfiprintf_r+0x4a>
 800777e:	fb05 3202 	mla	r2, r5, r2, r3
 8007782:	2001      	movs	r0, #1
 8007784:	460f      	mov	r7, r1
 8007786:	e7a6      	b.n	80076d6 <_svfiprintf_r+0xc6>
 8007788:	2300      	movs	r3, #0
 800778a:	3701      	adds	r7, #1
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	4619      	mov	r1, r3
 8007790:	250a      	movs	r5, #10
 8007792:	4638      	mov	r0, r7
 8007794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007798:	3a30      	subs	r2, #48	; 0x30
 800779a:	2a09      	cmp	r2, #9
 800779c:	d903      	bls.n	80077a6 <_svfiprintf_r+0x196>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0c8      	beq.n	8007734 <_svfiprintf_r+0x124>
 80077a2:	9105      	str	r1, [sp, #20]
 80077a4:	e7c6      	b.n	8007734 <_svfiprintf_r+0x124>
 80077a6:	fb05 2101 	mla	r1, r5, r1, r2
 80077aa:	2301      	movs	r3, #1
 80077ac:	4607      	mov	r7, r0
 80077ae:	e7f0      	b.n	8007792 <_svfiprintf_r+0x182>
 80077b0:	ab03      	add	r3, sp, #12
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	4622      	mov	r2, r4
 80077b6:	4b11      	ldr	r3, [pc, #68]	; (80077fc <_svfiprintf_r+0x1ec>)
 80077b8:	a904      	add	r1, sp, #16
 80077ba:	4640      	mov	r0, r8
 80077bc:	f7fe fa18 	bl	8005bf0 <_printf_float>
 80077c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077c4:	4681      	mov	r9, r0
 80077c6:	d1d6      	bne.n	8007776 <_svfiprintf_r+0x166>
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	065b      	lsls	r3, r3, #25
 80077cc:	f53f af35 	bmi.w	800763a <_svfiprintf_r+0x2a>
 80077d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077d2:	b01d      	add	sp, #116	; 0x74
 80077d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d8:	ab03      	add	r3, sp, #12
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	4622      	mov	r2, r4
 80077de:	4b07      	ldr	r3, [pc, #28]	; (80077fc <_svfiprintf_r+0x1ec>)
 80077e0:	a904      	add	r1, sp, #16
 80077e2:	4640      	mov	r0, r8
 80077e4:	f7fe fca6 	bl	8006134 <_printf_i>
 80077e8:	e7ea      	b.n	80077c0 <_svfiprintf_r+0x1b0>
 80077ea:	bf00      	nop
 80077ec:	08007f3c 	.word	0x08007f3c
 80077f0:	08007f42 	.word	0x08007f42
 80077f4:	08007f46 	.word	0x08007f46
 80077f8:	08005bf1 	.word	0x08005bf1
 80077fc:	0800755d 	.word	0x0800755d

08007800 <__ascii_mbtowc>:
 8007800:	b082      	sub	sp, #8
 8007802:	b901      	cbnz	r1, 8007806 <__ascii_mbtowc+0x6>
 8007804:	a901      	add	r1, sp, #4
 8007806:	b142      	cbz	r2, 800781a <__ascii_mbtowc+0x1a>
 8007808:	b14b      	cbz	r3, 800781e <__ascii_mbtowc+0x1e>
 800780a:	7813      	ldrb	r3, [r2, #0]
 800780c:	600b      	str	r3, [r1, #0]
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	1c10      	adds	r0, r2, #0
 8007812:	bf18      	it	ne
 8007814:	2001      	movne	r0, #1
 8007816:	b002      	add	sp, #8
 8007818:	4770      	bx	lr
 800781a:	4610      	mov	r0, r2
 800781c:	e7fb      	b.n	8007816 <__ascii_mbtowc+0x16>
 800781e:	f06f 0001 	mvn.w	r0, #1
 8007822:	e7f8      	b.n	8007816 <__ascii_mbtowc+0x16>

08007824 <memmove>:
 8007824:	4288      	cmp	r0, r1
 8007826:	b510      	push	{r4, lr}
 8007828:	eb01 0302 	add.w	r3, r1, r2
 800782c:	d807      	bhi.n	800783e <memmove+0x1a>
 800782e:	1e42      	subs	r2, r0, #1
 8007830:	4299      	cmp	r1, r3
 8007832:	d00a      	beq.n	800784a <memmove+0x26>
 8007834:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007838:	f802 4f01 	strb.w	r4, [r2, #1]!
 800783c:	e7f8      	b.n	8007830 <memmove+0xc>
 800783e:	4283      	cmp	r3, r0
 8007840:	d9f5      	bls.n	800782e <memmove+0xa>
 8007842:	1881      	adds	r1, r0, r2
 8007844:	1ad2      	subs	r2, r2, r3
 8007846:	42d3      	cmn	r3, r2
 8007848:	d100      	bne.n	800784c <memmove+0x28>
 800784a:	bd10      	pop	{r4, pc}
 800784c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007850:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007854:	e7f7      	b.n	8007846 <memmove+0x22>

08007856 <_realloc_r>:
 8007856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007858:	4607      	mov	r7, r0
 800785a:	4614      	mov	r4, r2
 800785c:	460e      	mov	r6, r1
 800785e:	b921      	cbnz	r1, 800786a <_realloc_r+0x14>
 8007860:	4611      	mov	r1, r2
 8007862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007866:	f7fe b8e1 	b.w	8005a2c <_malloc_r>
 800786a:	b922      	cbnz	r2, 8007876 <_realloc_r+0x20>
 800786c:	f7fe f890 	bl	8005990 <_free_r>
 8007870:	4625      	mov	r5, r4
 8007872:	4628      	mov	r0, r5
 8007874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007876:	f000 f821 	bl	80078bc <_malloc_usable_size_r>
 800787a:	42a0      	cmp	r0, r4
 800787c:	d20f      	bcs.n	800789e <_realloc_r+0x48>
 800787e:	4621      	mov	r1, r4
 8007880:	4638      	mov	r0, r7
 8007882:	f7fe f8d3 	bl	8005a2c <_malloc_r>
 8007886:	4605      	mov	r5, r0
 8007888:	2800      	cmp	r0, #0
 800788a:	d0f2      	beq.n	8007872 <_realloc_r+0x1c>
 800788c:	4631      	mov	r1, r6
 800788e:	4622      	mov	r2, r4
 8007890:	f7fe f86a 	bl	8005968 <memcpy>
 8007894:	4631      	mov	r1, r6
 8007896:	4638      	mov	r0, r7
 8007898:	f7fe f87a 	bl	8005990 <_free_r>
 800789c:	e7e9      	b.n	8007872 <_realloc_r+0x1c>
 800789e:	4635      	mov	r5, r6
 80078a0:	e7e7      	b.n	8007872 <_realloc_r+0x1c>

080078a2 <__ascii_wctomb>:
 80078a2:	b149      	cbz	r1, 80078b8 <__ascii_wctomb+0x16>
 80078a4:	2aff      	cmp	r2, #255	; 0xff
 80078a6:	bf85      	ittet	hi
 80078a8:	238a      	movhi	r3, #138	; 0x8a
 80078aa:	6003      	strhi	r3, [r0, #0]
 80078ac:	700a      	strbls	r2, [r1, #0]
 80078ae:	f04f 30ff 	movhi.w	r0, #4294967295
 80078b2:	bf98      	it	ls
 80078b4:	2001      	movls	r0, #1
 80078b6:	4770      	bx	lr
 80078b8:	4608      	mov	r0, r1
 80078ba:	4770      	bx	lr

080078bc <_malloc_usable_size_r>:
 80078bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c0:	1f18      	subs	r0, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	bfbc      	itt	lt
 80078c6:	580b      	ldrlt	r3, [r1, r0]
 80078c8:	18c0      	addlt	r0, r0, r3
 80078ca:	4770      	bx	lr

080078cc <atan2f>:
 80078cc:	f000 b850 	b.w	8007970 <__ieee754_atan2f>

080078d0 <sqrtf>:
 80078d0:	b500      	push	{lr}
 80078d2:	ed2d 8b02 	vpush	{d8}
 80078d6:	b08b      	sub	sp, #44	; 0x2c
 80078d8:	eeb0 8a40 	vmov.f32	s16, s0
 80078dc:	f000 f8f2 	bl	8007ac4 <__ieee754_sqrtf>
 80078e0:	4b21      	ldr	r3, [pc, #132]	; (8007968 <sqrtf+0x98>)
 80078e2:	f993 3000 	ldrsb.w	r3, [r3]
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	d028      	beq.n	800793c <sqrtf+0x6c>
 80078ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	d623      	bvs.n	800793c <sqrtf+0x6c>
 80078f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80078f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fc:	d51e      	bpl.n	800793c <sqrtf+0x6c>
 80078fe:	2201      	movs	r2, #1
 8007900:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8007904:	9200      	str	r2, [sp, #0]
 8007906:	4a19      	ldr	r2, [pc, #100]	; (800796c <sqrtf+0x9c>)
 8007908:	9201      	str	r2, [sp, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	9208      	str	r2, [sp, #32]
 800790e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007912:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007916:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8007960 <sqrtf+0x90>
 800791a:	b9a3      	cbnz	r3, 8007946 <sqrtf+0x76>
 800791c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007920:	4668      	mov	r0, sp
 8007922:	f000 f8d2 	bl	8007aca <matherr>
 8007926:	b1a0      	cbz	r0, 8007952 <sqrtf+0x82>
 8007928:	9b08      	ldr	r3, [sp, #32]
 800792a:	b11b      	cbz	r3, 8007934 <sqrtf+0x64>
 800792c:	f7fd ffe2 	bl	80058f4 <__errno>
 8007930:	9b08      	ldr	r3, [sp, #32]
 8007932:	6003      	str	r3, [r0, #0]
 8007934:	ed9d 0b06 	vldr	d0, [sp, #24]
 8007938:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800793c:	b00b      	add	sp, #44	; 0x2c
 800793e:	ecbd 8b02 	vpop	{d8}
 8007942:	f85d fb04 	ldr.w	pc, [sp], #4
 8007946:	2b02      	cmp	r3, #2
 8007948:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800794c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8007950:	d1e6      	bne.n	8007920 <sqrtf+0x50>
 8007952:	f7fd ffcf 	bl	80058f4 <__errno>
 8007956:	2321      	movs	r3, #33	; 0x21
 8007958:	6003      	str	r3, [r0, #0]
 800795a:	e7e5      	b.n	8007928 <sqrtf+0x58>
 800795c:	f3af 8000 	nop.w
	...
 8007968:	240001e0 	.word	0x240001e0
 800796c:	08008058 	.word	0x08008058

08007970 <__ieee754_atan2f>:
 8007970:	ee10 2a90 	vmov	r2, s1
 8007974:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007978:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800797c:	b510      	push	{r4, lr}
 800797e:	eef0 7a40 	vmov.f32	s15, s0
 8007982:	dc06      	bgt.n	8007992 <__ieee754_atan2f+0x22>
 8007984:	ee10 0a10 	vmov	r0, s0
 8007988:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800798c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007990:	dd04      	ble.n	800799c <__ieee754_atan2f+0x2c>
 8007992:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007996:	eeb0 0a67 	vmov.f32	s0, s15
 800799a:	bd10      	pop	{r4, pc}
 800799c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80079a0:	d103      	bne.n	80079aa <__ieee754_atan2f+0x3a>
 80079a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a6:	f000 b893 	b.w	8007ad0 <atanf>
 80079aa:	1794      	asrs	r4, r2, #30
 80079ac:	f004 0402 	and.w	r4, r4, #2
 80079b0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80079b4:	b93b      	cbnz	r3, 80079c6 <__ieee754_atan2f+0x56>
 80079b6:	2c02      	cmp	r4, #2
 80079b8:	d06b      	beq.n	8007a92 <__ieee754_atan2f+0x122>
 80079ba:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007a98 <__ieee754_atan2f+0x128>
 80079be:	2c03      	cmp	r4, #3
 80079c0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80079c4:	e7e7      	b.n	8007996 <__ieee754_atan2f+0x26>
 80079c6:	b939      	cbnz	r1, 80079d8 <__ieee754_atan2f+0x68>
 80079c8:	eddf 7a34 	vldr	s15, [pc, #208]	; 8007a9c <__ieee754_atan2f+0x12c>
 80079cc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007aa0 <__ieee754_atan2f+0x130>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	fe67 7a87 	vselge.f32	s15, s15, s14
 80079d6:	e7de      	b.n	8007996 <__ieee754_atan2f+0x26>
 80079d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80079dc:	d121      	bne.n	8007a22 <__ieee754_atan2f+0xb2>
 80079de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80079e2:	d111      	bne.n	8007a08 <__ieee754_atan2f+0x98>
 80079e4:	2c02      	cmp	r4, #2
 80079e6:	d009      	beq.n	80079fc <__ieee754_atan2f+0x8c>
 80079e8:	2c03      	cmp	r4, #3
 80079ea:	d00a      	beq.n	8007a02 <__ieee754_atan2f+0x92>
 80079ec:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8007aa4 <__ieee754_atan2f+0x134>
 80079f0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007aa8 <__ieee754_atan2f+0x138>
 80079f4:	2c01      	cmp	r4, #1
 80079f6:	fe47 7a87 	vseleq.f32	s15, s15, s14
 80079fa:	e7cc      	b.n	8007996 <__ieee754_atan2f+0x26>
 80079fc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007aac <__ieee754_atan2f+0x13c>
 8007a00:	e7c9      	b.n	8007996 <__ieee754_atan2f+0x26>
 8007a02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007ab0 <__ieee754_atan2f+0x140>
 8007a06:	e7c6      	b.n	8007996 <__ieee754_atan2f+0x26>
 8007a08:	2c02      	cmp	r4, #2
 8007a0a:	d042      	beq.n	8007a92 <__ieee754_atan2f+0x122>
 8007a0c:	2c03      	cmp	r4, #3
 8007a0e:	d005      	beq.n	8007a1c <__ieee754_atan2f+0xac>
 8007a10:	2c01      	cmp	r4, #1
 8007a12:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007ab4 <__ieee754_atan2f+0x144>
 8007a16:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007ab8 <__ieee754_atan2f+0x148>
 8007a1a:	e7ec      	b.n	80079f6 <__ieee754_atan2f+0x86>
 8007a1c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007a98 <__ieee754_atan2f+0x128>
 8007a20:	e7b9      	b.n	8007996 <__ieee754_atan2f+0x26>
 8007a22:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a26:	d0cf      	beq.n	80079c8 <__ieee754_atan2f+0x58>
 8007a28:	1a5b      	subs	r3, r3, r1
 8007a2a:	15db      	asrs	r3, r3, #23
 8007a2c:	2b3c      	cmp	r3, #60	; 0x3c
 8007a2e:	dc1a      	bgt.n	8007a66 <__ieee754_atan2f+0xf6>
 8007a30:	2a00      	cmp	r2, #0
 8007a32:	da01      	bge.n	8007a38 <__ieee754_atan2f+0xc8>
 8007a34:	333c      	adds	r3, #60	; 0x3c
 8007a36:	db19      	blt.n	8007a6c <__ieee754_atan2f+0xfc>
 8007a38:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007a3c:	f000 f91a 	bl	8007c74 <fabsf>
 8007a40:	f000 f846 	bl	8007ad0 <atanf>
 8007a44:	eef0 7a40 	vmov.f32	s15, s0
 8007a48:	2c01      	cmp	r4, #1
 8007a4a:	d012      	beq.n	8007a72 <__ieee754_atan2f+0x102>
 8007a4c:	2c02      	cmp	r4, #2
 8007a4e:	d017      	beq.n	8007a80 <__ieee754_atan2f+0x110>
 8007a50:	2c00      	cmp	r4, #0
 8007a52:	d0a0      	beq.n	8007996 <__ieee754_atan2f+0x26>
 8007a54:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007abc <__ieee754_atan2f+0x14c>
 8007a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a5c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007ac0 <__ieee754_atan2f+0x150>
 8007a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a64:	e797      	b.n	8007996 <__ieee754_atan2f+0x26>
 8007a66:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007a9c <__ieee754_atan2f+0x12c>
 8007a6a:	e7ed      	b.n	8007a48 <__ieee754_atan2f+0xd8>
 8007a6c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007ab8 <__ieee754_atan2f+0x148>
 8007a70:	e7ea      	b.n	8007a48 <__ieee754_atan2f+0xd8>
 8007a72:	ee17 3a90 	vmov	r3, s15
 8007a76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	e78a      	b.n	8007996 <__ieee754_atan2f+0x26>
 8007a80:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007abc <__ieee754_atan2f+0x14c>
 8007a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a88:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007ac0 <__ieee754_atan2f+0x150>
 8007a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a90:	e781      	b.n	8007996 <__ieee754_atan2f+0x26>
 8007a92:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007ac0 <__ieee754_atan2f+0x150>
 8007a96:	e77e      	b.n	8007996 <__ieee754_atan2f+0x26>
 8007a98:	c0490fdb 	.word	0xc0490fdb
 8007a9c:	3fc90fdb 	.word	0x3fc90fdb
 8007aa0:	bfc90fdb 	.word	0xbfc90fdb
 8007aa4:	bf490fdb 	.word	0xbf490fdb
 8007aa8:	3f490fdb 	.word	0x3f490fdb
 8007aac:	4016cbe4 	.word	0x4016cbe4
 8007ab0:	c016cbe4 	.word	0xc016cbe4
 8007ab4:	80000000 	.word	0x80000000
 8007ab8:	00000000 	.word	0x00000000
 8007abc:	33bbbd2e 	.word	0x33bbbd2e
 8007ac0:	40490fdb 	.word	0x40490fdb

08007ac4 <__ieee754_sqrtf>:
 8007ac4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007ac8:	4770      	bx	lr

08007aca <matherr>:
 8007aca:	2000      	movs	r0, #0
 8007acc:	4770      	bx	lr
	...

08007ad0 <atanf>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	ee10 5a10 	vmov	r5, s0
 8007ad6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007ada:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007ade:	eef0 7a40 	vmov.f32	s15, s0
 8007ae2:	db0f      	blt.n	8007b04 <atanf+0x34>
 8007ae4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007ae8:	dd04      	ble.n	8007af4 <atanf+0x24>
 8007aea:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007aee:	eeb0 0a67 	vmov.f32	s0, s15
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007c28 <atanf+0x158>
 8007af8:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8007c2c <atanf+0x15c>
 8007afc:	2d00      	cmp	r5, #0
 8007afe:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8007b02:	e7f4      	b.n	8007aee <atanf+0x1e>
 8007b04:	4b4a      	ldr	r3, [pc, #296]	; (8007c30 <atanf+0x160>)
 8007b06:	429c      	cmp	r4, r3
 8007b08:	dc10      	bgt.n	8007b2c <atanf+0x5c>
 8007b0a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007b0e:	da0a      	bge.n	8007b26 <atanf+0x56>
 8007b10:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007c34 <atanf+0x164>
 8007b14:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b1c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b24:	dce3      	bgt.n	8007aee <atanf+0x1e>
 8007b26:	f04f 33ff 	mov.w	r3, #4294967295
 8007b2a:	e013      	b.n	8007b54 <atanf+0x84>
 8007b2c:	f000 f8a2 	bl	8007c74 <fabsf>
 8007b30:	4b41      	ldr	r3, [pc, #260]	; (8007c38 <atanf+0x168>)
 8007b32:	429c      	cmp	r4, r3
 8007b34:	dc4f      	bgt.n	8007bd6 <atanf+0x106>
 8007b36:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007b3a:	429c      	cmp	r4, r3
 8007b3c:	dc41      	bgt.n	8007bc2 <atanf+0xf2>
 8007b3e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007b42:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007b46:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b50:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007b5a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007c3c <atanf+0x16c>
 8007b5e:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007c40 <atanf+0x170>
 8007b62:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007c44 <atanf+0x174>
 8007b66:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007b6a:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007b6e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007c48 <atanf+0x178>
 8007b72:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007b76:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007c4c <atanf+0x17c>
 8007b7a:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007b7e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007c50 <atanf+0x180>
 8007b82:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007b86:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c54 <atanf+0x184>
 8007b8a:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007b8e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007c58 <atanf+0x188>
 8007b92:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007b96:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007c5c <atanf+0x18c>
 8007b9a:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007b9e:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007c60 <atanf+0x190>
 8007ba2:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007ba6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007c64 <atanf+0x194>
 8007baa:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007bae:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007bb2:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bba:	d121      	bne.n	8007c00 <atanf+0x130>
 8007bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bc0:	e795      	b.n	8007aee <atanf+0x1e>
 8007bc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007bc6:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007bca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007bce:	2301      	movs	r3, #1
 8007bd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007bd4:	e7be      	b.n	8007b54 <atanf+0x84>
 8007bd6:	4b24      	ldr	r3, [pc, #144]	; (8007c68 <atanf+0x198>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	dc0b      	bgt.n	8007bf4 <atanf+0x124>
 8007bdc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007be4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007be8:	2302      	movs	r3, #2
 8007bea:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf2:	e7af      	b.n	8007b54 <atanf+0x84>
 8007bf4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007bf8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e7a9      	b.n	8007b54 <atanf+0x84>
 8007c00:	4a1a      	ldr	r2, [pc, #104]	; (8007c6c <atanf+0x19c>)
 8007c02:	491b      	ldr	r1, [pc, #108]	; (8007c70 <atanf+0x1a0>)
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	441a      	add	r2, r3
 8007c08:	440b      	add	r3, r1
 8007c0a:	edd3 6a00 	vldr	s13, [r3]
 8007c0e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c18:	ed92 7a00 	vldr	s14, [r2]
 8007c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c20:	bfb8      	it	lt
 8007c22:	eef1 7a67 	vneglt.f32	s15, s15
 8007c26:	e762      	b.n	8007aee <atanf+0x1e>
 8007c28:	bfc90fdb 	.word	0xbfc90fdb
 8007c2c:	3fc90fdb 	.word	0x3fc90fdb
 8007c30:	3edfffff 	.word	0x3edfffff
 8007c34:	7149f2ca 	.word	0x7149f2ca
 8007c38:	3f97ffff 	.word	0x3f97ffff
 8007c3c:	3c8569d7 	.word	0x3c8569d7
 8007c40:	3d4bda59 	.word	0x3d4bda59
 8007c44:	bd6ef16b 	.word	0xbd6ef16b
 8007c48:	3d886b35 	.word	0x3d886b35
 8007c4c:	3dba2e6e 	.word	0x3dba2e6e
 8007c50:	3e124925 	.word	0x3e124925
 8007c54:	3eaaaaab 	.word	0x3eaaaaab
 8007c58:	bd15a221 	.word	0xbd15a221
 8007c5c:	bd9d8795 	.word	0xbd9d8795
 8007c60:	bde38e38 	.word	0xbde38e38
 8007c64:	be4ccccd 	.word	0xbe4ccccd
 8007c68:	401bffff 	.word	0x401bffff
 8007c6c:	08008060 	.word	0x08008060
 8007c70:	08008070 	.word	0x08008070

08007c74 <fabsf>:
 8007c74:	ee10 3a10 	vmov	r3, s0
 8007c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c7c:	ee00 3a10 	vmov	s0, r3
 8007c80:	4770      	bx	lr
	...

08007c84 <_init>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	bf00      	nop
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr

08007c90 <_fini>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr
