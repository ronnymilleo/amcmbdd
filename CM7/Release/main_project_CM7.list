
main_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed38  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000060f0  0800efd8  0800efd8  0001efd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080150c8  080150c8  000250c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080150d0  080150d0  000250d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080150d4  080150d4  000250d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  080150d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001567c  240001e0  080152b8  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401585c  080152b8  0003585c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028a69  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004130  00000000  00000000  00058c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001528  00000000  00000000  0005cda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001380  00000000  00000000  0005e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b2d7  00000000  00000000  0005f650  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00015492  00000000  00000000  0009a927  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00184db5  00000000  00000000  000afdb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  00234b6e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006058  00000000  00000000  00234c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00003b42  00000000  00000000  0023acb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800efc0 	.word	0x0800efc0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800efc0 	.word	0x0800efc0

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <SystemInit+0xc4>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <SystemInit+0xc4>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <SystemInit+0xc4>)
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SystemInit+0xc4>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemInit+0xc8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a28      	ldr	r2, [pc, #160]	; (8000818 <SystemInit+0xc8>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <SystemInit+0xc8>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemInit+0xc8>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4924      	ldr	r1, [pc, #144]	; (8000818 <SystemInit+0xc8>)
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemInit+0xcc>)
 800078a:	4013      	ands	r3, r2
 800078c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemInit+0xc8>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <SystemInit+0xc8>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemInit+0xc8>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <SystemInit+0xc8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <SystemInit+0xc8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <SystemInit+0xc8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <SystemInit+0xc8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <SystemInit+0xc8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <SystemInit+0xc8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <SystemInit+0xc8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <SystemInit+0xc8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <SystemInit+0xc8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <SystemInit+0xc8>)
 80007d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <SystemInit+0xc8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <SystemInit+0xd0>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <SystemInit+0xd0>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <SystemInit+0xd4>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <SystemInit+0xd8>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007fa:	d202      	bcs.n	8000802 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <SystemInit+0xdc>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SystemInit+0xc4>)
 8000804:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000808:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	58024400 	.word	0x58024400
 800081c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000820:	580000c0 	.word	0x580000c0
 8000824:	5c001000 	.word	0x5c001000
 8000828:	ffff0000 	.word	0xffff0000
 800082c:	51008108 	.word	0x51008108

08000830 <inst_absolute>:
#include "math.h"

//**********************************************************************************************//
// Preprocessing - Instantaneous values (6 features)
// To use with instantaneous values
void inst_absolute(float32_t in[], float32_t out[]){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	arm_abs_f32(&in[0], &out[0], frameSize);
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <inst_absolute+0x20>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	6839      	ldr	r1, [r7, #0]
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f00a fa0a 	bl	800ac5c <arm_abs_f32>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	0800eff8 	.word	0x0800eff8

08000854 <complex_inst_absolute>:

// To use with complex input values
void complex_inst_absolute(float32_t in[], float32_t out[]){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	arm_cmplx_mag_f32(&in[0], &out[0], frameSize);
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <complex_inst_absolute+0x20>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	6839      	ldr	r1, [r7, #0]
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f00a f834 	bl	800a8d4 <arm_cmplx_mag_f32>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	0800eff8 	.word	0x0800eff8

08000878 <inst_phase>:

void inst_phase(float32_t in[], float32_t out[]){
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
	int j = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	e020      	b.n	80008ce <inst_phase+0x56>
		out[j] = atan2f(in[i+1], in[i]);
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	3301      	adds	r3, #1
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	ed93 7a00 	vldr	s14, [r3]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	18d4      	adds	r4, r2, r3
 80008ae:	eef0 0a47 	vmov.f32	s1, s14
 80008b2:	eeb0 0a67 	vmov.f32	s0, s15
 80008b6:	f00a fcf9 	bl	800b2ac <atan2f>
 80008ba:	eef0 7a40 	vmov.f32	s15, s0
 80008be:	edc4 7a00 	vstr	s15, [r4]
		j++;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2*frameSize; i = i + 2){
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3302      	adds	r3, #2
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <inst_phase+0x6c>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	dbd8      	blt.n	800088c <inst_phase+0x14>
	}
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	bf00      	nop
 80008e4:	0800eff8 	.word	0x0800eff8

080008e8 <unwrap>:

void unwrap(float32_t in[], float32_t out[]){
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	uint16_t k = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	82fb      	strh	r3, [r7, #22]
	float32_t alpha = M_PI;
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <unwrap+0x130>)
 80008f8:	60fb      	str	r3, [r7, #12]
	float32_t diff = 0.0f;
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < (frameSize - 1); i++){
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	e052      	b.n	80009ac <unwrap+0xc4>
		out[i] = in[i] + 2*M_PI*k;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000916:	8afb      	ldrh	r3, [r7, #22]
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000920:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8000a10 <unwrap+0x128>
 8000924:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000928:	ee36 7b07 	vadd.f64	d7, d6, d7
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	4413      	add	r3, r2
 8000934:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000938:	edc3 7a00 	vstr	s15, [r3]
		diff = fabsf(in[i+1] - in[i]);
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	3301      	adds	r3, #1
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	ed93 7a00 	vldr	s14, [r3]
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800095a:	eef0 7ae7 	vabs.f32	s15, s15
 800095e:	edc7 7a02 	vstr	s15, [r7, #8]
		if(diff > alpha){
 8000962:	ed97 7a02 	vldr	s14, [r7, #8]
 8000966:	edd7 7a03 	vldr	s15, [r7, #12]
 800096a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800096e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000972:	dd18      	ble.n	80009a6 <unwrap+0xbe>
			if(in[i+1] < in[i]){
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	3301      	adds	r3, #1
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	ed93 7a00 	vldr	s14, [r3]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000996:	d503      	bpl.n	80009a0 <unwrap+0xb8>
				k++;
 8000998:	8afb      	ldrh	r3, [r7, #22]
 800099a:	3301      	adds	r3, #1
 800099c:	82fb      	strh	r3, [r7, #22]
 800099e:	e002      	b.n	80009a6 <unwrap+0xbe>
			} else {
				k--;
 80009a0:	8afb      	ldrh	r3, [r7, #22]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (frameSize - 1); i++){
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	3301      	adds	r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <unwrap+0x134>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dba6      	blt.n	8000906 <unwrap+0x1e>
			}
		}
	}
	out[frameSize-1] = in[frameSize-1] + 2*M_PI*k;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <unwrap+0x134>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80009c2:	4413      	add	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	edd3 7a00 	vldr	s15, [r3]
 80009ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009d2:	8afb      	ldrh	r3, [r7, #22]
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009dc:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000a10 <unwrap+0x128>
 80009e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80009e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <unwrap+0x134>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80009f2:	4413      	add	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009fe:	edc3 7a00 	vstr	s15, [r3]
}
 8000a02:	bf00      	nop
 8000a04:	371c      	adds	r7, #28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	54442d18 	.word	0x54442d18
 8000a14:	401921fb 	.word	0x401921fb
 8000a18:	40490fdb 	.word	0x40490fdb
 8000a1c:	0800eff8 	.word	0x0800eff8

08000a20 <inst_frequency>:

void inst_frequency(float32_t in[], float32_t out[]){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4b53      	ldr	r3, [pc, #332]	; (8000b78 <inst_frequency+0x158>)
 8000a2c:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a30:	443a      	add	r2, r7
 8000a32:	4413      	add	r3, r2
 8000a34:	6018      	str	r0, [r3, #0]
 8000a36:	4b51      	ldr	r3, [pc, #324]	; (8000b7c <inst_frequency+0x15c>)
 8000a38:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a3c:	443a      	add	r2, r7
 8000a3e:	4413      	add	r3, r2
 8000a40:	6019      	str	r1, [r3, #0]
	float32_t phase[2048] = {0};
 8000a42:	4b4f      	ldr	r3, [pc, #316]	; (8000b80 <inst_frequency+0x160>)
 8000a44:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a48:	443a      	add	r2, r7
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a52:	461a      	mov	r2, r3
 8000a54:	2100      	movs	r1, #0
 8000a56:	f00a fe4a 	bl	800b6ee <memset>
	float32_t unwrapped_phase[2048] = {0};
 8000a5a:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <inst_frequency+0x164>)
 8000a5c:	f244 0210 	movw	r2, #16400	; 0x4010
 8000a60:	443a      	add	r2, r7
 8000a62:	4413      	add	r3, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f00a fe3e 	bl	800b6ee <memset>
	float32_t C = 1 / M_TWOPI;
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <inst_frequency+0x168>)
 8000a74:	f244 0208 	movw	r2, #16392	; 0x4008
 8000a78:	443a      	add	r2, r7
 8000a7a:	6013      	str	r3, [r2, #0]
	inst_phase(&in[0], &phase[0]);
 8000a7c:	4a40      	ldr	r2, [pc, #256]	; (8000b80 <inst_frequency+0x160>)
 8000a7e:	f244 0310 	movw	r3, #16400	; 0x4010
 8000a82:	443b      	add	r3, r7
 8000a84:	441a      	add	r2, r3
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <inst_frequency+0x158>)
 8000a88:	f244 0110 	movw	r1, #16400	; 0x4010
 8000a8c:	4439      	add	r1, r7
 8000a8e:	440b      	add	r3, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	f7ff fef0 	bl	8000878 <inst_phase>
	unwrap(&phase[0], &unwrapped_phase[0]);
 8000a98:	4a3a      	ldr	r2, [pc, #232]	; (8000b84 <inst_frequency+0x164>)
 8000a9a:	f244 0310 	movw	r3, #16400	; 0x4010
 8000a9e:	443b      	add	r3, r7
 8000aa0:	441a      	add	r2, r3
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <inst_frequency+0x160>)
 8000aa4:	f244 0110 	movw	r1, #16400	; 0x4010
 8000aa8:	4439      	add	r1, r7
 8000aaa:	440b      	add	r3, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff1a 	bl	80008e8 <unwrap>
	for(int i = 0; i < (frameSize-1); i++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f244 020c 	movw	r2, #16396	; 0x400c
 8000aba:	443a      	add	r2, r7
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e03a      	b.n	8000b36 <inst_frequency+0x116>
		out[i] = C*(unwrapped_phase[i + 1] - unwrapped_phase[i]);
 8000ac0:	f244 030c 	movw	r3, #16396	; 0x400c
 8000ac4:	443b      	add	r3, r7
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <inst_frequency+0x164>)
 8000acc:	f244 0110 	movw	r1, #16400	; 0x4010
 8000ad0:	4439      	add	r1, r7
 8000ad2:	440b      	add	r3, r1
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	ed93 7a00 	vldr	s14, [r3]
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <inst_frequency+0x164>)
 8000ade:	f244 0210 	movw	r2, #16400	; 0x4010
 8000ae2:	443a      	add	r2, r7
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f244 020c 	movw	r2, #16396	; 0x400c
 8000aea:	443a      	add	r2, r7
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	0092      	lsls	r2, r2, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	edd3 7a00 	vldr	s15, [r3]
 8000af6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000afa:	f244 030c 	movw	r3, #16396	; 0x400c
 8000afe:	443b      	add	r3, r7
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	009a      	lsls	r2, r3, #2
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <inst_frequency+0x15c>)
 8000b06:	f244 0110 	movw	r1, #16400	; 0x4010
 8000b0a:	4439      	add	r1, r7
 8000b0c:	440b      	add	r3, r1
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	f244 0208 	movw	r2, #16392	; 0x4008
 8000b16:	443a      	add	r2, r7
 8000b18:	edd2 7a00 	vldr	s15, [r2]
 8000b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b20:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < (frameSize-1); i++){
 8000b24:	f244 030c 	movw	r3, #16396	; 0x400c
 8000b28:	443b      	add	r3, r7
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f244 020c 	movw	r2, #16396	; 0x400c
 8000b32:	443a      	add	r2, r7
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <inst_frequency+0x16c>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f244 020c 	movw	r2, #16396	; 0x400c
 8000b40:	443a      	add	r2, r7
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbbb      	blt.n	8000ac0 <inst_frequency+0xa0>
	}
	out[frameSize - 1] = 0;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <inst_frequency+0x16c>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000b52:	4413      	add	r3, r2
 8000b54:	009a      	lsls	r2, r3, #2
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <inst_frequency+0x15c>)
 8000b58:	f244 0110 	movw	r1, #16400	; 0x4010
 8000b5c:	4439      	add	r1, r7
 8000b5e:	440b      	add	r3, r1
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	ffffbff4 	.word	0xffffbff4
 8000b7c:	ffffbff0 	.word	0xffffbff0
 8000b80:	ffffdff8 	.word	0xffffdff8
 8000b84:	ffffbff8 	.word	0xffffbff8
 8000b88:	3e22f983 	.word	0x3e22f983
 8000b8c:	0800eff8 	.word	0x0800eff8

08000b90 <inst_centralized_normalized_absolute>:

void inst_centralized_normalized_absolute(float32_t in[], float32_t out[]){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	float32_t mean = 0, max = 0;
 8000b9a:	f04f 0300 	mov.w	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
	uint32_t max_index = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
	float32_t *absolute, *normalized;
	absolute = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f00a fd81 	bl	800b6b8 <malloc>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	61fb      	str	r3, [r7, #28]
	normalized = (float32_t *) malloc(frameSize * sizeof(float32_t));
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f00a fd79 	bl	800b6b8 <malloc>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	61bb      	str	r3, [r7, #24]
	complex_inst_absolute(in, &absolute[0]);
 8000bca:	69f9      	ldr	r1, [r7, #28]
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fe41 	bl	8000854 <complex_inst_absolute>
	arm_max_f32(absolute, frameSize, &max, &max_index);
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	f107 0210 	add.w	r2, r7, #16
 8000be0:	69f8      	ldr	r0, [r7, #28]
 8000be2:	f009 f9d1 	bl	8009f88 <arm_max_f32>
	for(int a = 0; a < frameSize; a++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bea:	e012      	b.n	8000c12 <inst_centralized_normalized_absolute+0x82>
		normalized[a] = absolute[a] / max;
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	edd3 6a00 	vldr	s13, [r3]
 8000bf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4413      	add	r3, r2
 8000c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c08:	edc3 7a00 	vstr	s15, [r3]
	for(int a = 0; a < frameSize; a++){
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	3301      	adds	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	dbe6      	blt.n	8000bec <inst_centralized_normalized_absolute+0x5c>
	}
	arm_mean_f32(&normalized[0], frameSize, &mean);
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	461a      	mov	r2, r3
 8000c2a:	69b8      	ldr	r0, [r7, #24]
 8000c2c:	f009 f976 	bl	8009f1c <arm_mean_f32>
	for(int i = 0; i < frameSize; i++){
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
 8000c34:	e016      	b.n	8000c64 <inst_centralized_normalized_absolute+0xd4>
		out[i] = normalized[i] / mean - 1;
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	edd3 6a00 	vldr	s13, [r3]
 8000c42:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c5a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < frameSize; i++){
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	3301      	adds	r3, #1
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <inst_centralized_normalized_absolute+0xf4>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	dbe2      	blt.n	8000c36 <inst_centralized_normalized_absolute+0xa6>
	}
	free(absolute);
 8000c70:	69f8      	ldr	r0, [r7, #28]
 8000c72:	f00a fd29 	bl	800b6c8 <free>
	free(normalized);
 8000c76:	69b8      	ldr	r0, [r7, #24]
 8000c78:	f00a fd26 	bl	800b6c8 <free>
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	0800eff8 	.word	0x0800eff8

08000c88 <std_dev>:

void std_dev(float32_t in[], float32_t *out) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	arm_std_f32(&in[0], frameSize, out);
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <std_dev+0x20>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f009 f8c6 	bl	8009e2c <arm_std_f32>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	0800eff8 	.word	0x0800eff8

08000cac <mean_of_signal_magnitude>:
//**********************************************************************************************//
// Feature number 6
void mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	arm_mean_f32(&in[0], frameSize, out);
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <mean_of_signal_magnitude+0x20>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f009 f92c 	bl	8009f1c <arm_mean_f32>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0800eff8 	.word	0x0800eff8

08000cd0 <squared_mean_of_signal_magnitude>:

// Feature number 7
void squared_mean_of_signal_magnitude(float32_t in[], float32_t *out) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	float32_t mean_of_signal_magnitude;
	arm_mean_f32(&in[0], frameSize, &mean_of_signal_magnitude);
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <squared_mean_of_signal_magnitude+0x38>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f009 f918 	bl	8009f1c <arm_mean_f32>
	*out = mean_of_signal_magnitude * mean_of_signal_magnitude;
 8000cec:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	edc3 7a00 	vstr	s15, [r3]
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	0800eff8 	.word	0x0800eff8

08000d0c <normalized_sqrt_of_sum_of_amp>:

// Feature number 8
void normalized_sqrt_of_sum_of_amp(float32_t in[], float32_t *out) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	float32_t sum = 0.0f;
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	e00e      	b.n	8000d40 <normalized_sqrt_of_sum_of_amp+0x34>
		sum += in[i];
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	edd3 7a00 	vldr	s15, [r3]
 8000d2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d36:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < frameSize; i++){
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <normalized_sqrt_of_sum_of_amp+0x6c>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	dbea      	blt.n	8000d22 <normalized_sqrt_of_sum_of_amp+0x16>
	}
	*out = sqrtf(sum)/frameSize;
 8000d4c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d50:	f00a faae 	bl	800b2b0 <sqrtf>
 8000d54:	eef0 6a40 	vmov.f32	s13, s0
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <normalized_sqrt_of_sum_of_amp+0x6c>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	edc3 7a00 	vstr	s15, [r3]
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	0800eff8 	.word	0x0800eff8

08000d7c <ratio_iq>:

// Feature number 9
void ratio_iq(float32_t in[], float32_t *out) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	// ft_output = np.sum(np.power(np.imag(signal_input), 2)) / np.sum(np.power(np.real(signal_input), 2))
	float32_t sum_of_real_squared = 0.0f;
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
	float32_t sum_of_imag_squared = 0.0f;
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e02c      	b.n	8000df2 <ratio_iq+0x76>
		sum_of_real_squared += in[i]*in[i];
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	edd3 7a00 	vldr	s15, [r3]
 8000db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dbc:	edc7 7a05 	vstr	s15, [r7, #20]
		sum_of_imag_squared += in[i+1]*in[i+1];
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	ed93 7a00 	vldr	s14, [r3]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de8:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i = 0; i < 2*frameSize; i+=2){
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3302      	adds	r3, #2
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <ratio_iq+0xa0>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbcc      	blt.n	8000d98 <ratio_iq+0x1c>
	}
	*out = sum_of_imag_squared / sum_of_real_squared;
 8000dfe:	edd7 6a04 	vldr	s13, [r7, #16]
 8000e02:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	edc3 7a00 	vstr	s15, [r3]
}
 8000e10:	bf00      	nop
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	0800eff8 	.word	0x0800eff8

08000e20 <gmax>:

// Feature number 10
void gmax(float32_t in[], float32_t *out){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4b61      	ldr	r3, [pc, #388]	; (8000fb0 <gmax+0x190>)
 8000e2c:	f244 0228 	movw	r2, #16424	; 0x4028
 8000e30:	443a      	add	r2, r7
 8000e32:	4413      	add	r3, r2
 8000e34:	6018      	str	r0, [r3, #0]
 8000e36:	4b5f      	ldr	r3, [pc, #380]	; (8000fb4 <gmax+0x194>)
 8000e38:	f244 0228 	movw	r2, #16424	; 0x4028
 8000e3c:	443a      	add	r2, r7
 8000e3e:	4413      	add	r3, r2
 8000e40:	6019      	str	r1, [r3, #0]
	uint32_t fftSize = 2048;
 8000e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e46:	f244 0220 	movw	r2, #16416	; 0x4020
 8000e4a:	443a      	add	r2, r7
 8000e4c:	6013      	str	r3, [r2, #0]
	uint32_t ifftFlag = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f244 021c 	movw	r2, #16412	; 0x401c
 8000e54:	443a      	add	r2, r7
 8000e56:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f244 0218 	movw	r2, #16408	; 0x4018
 8000e5e:	443a      	add	r2, r7
 8000e60:	6013      	str	r3, [r2, #0]
	uint32_t maxValueIndex; //Unused
	float32_t maxValue;
	float32_t *result_mag;
	float32_t result_fft[4096] = {0};
 8000e62:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <gmax+0x198>)
 8000e64:	f244 0228 	movw	r2, #16424	; 0x4028
 8000e68:	443a      	add	r2, r7
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e72:	461a      	mov	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	f00a fc3a 	bl	800b6ee <memset>

	result_mag = (float32_t *) malloc(fftSize * sizeof(float32_t));
 8000e7a:	f244 0320 	movw	r3, #16416	; 0x4020
 8000e7e:	443b      	add	r3, r7
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00a fc17 	bl	800b6b8 <malloc>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f244 0214 	movw	r2, #16404	; 0x4014
 8000e90:	443a      	add	r2, r7
 8000e92:	6013      	str	r3, [r2, #0]

	// Copy array to calculate
	for(int i = 0; i < frameSize*2; i++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	f244 0224 	movw	r2, #16420	; 0x4024
 8000e9a:	443a      	add	r2, r7
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e021      	b.n	8000ee4 <gmax+0xc4>
		result_fft[i] = in[i];
 8000ea0:	f244 0324 	movw	r3, #16420	; 0x4024
 8000ea4:	443b      	add	r3, r7
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	009a      	lsls	r2, r3, #2
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <gmax+0x190>)
 8000eac:	f244 0128 	movw	r1, #16424	; 0x4028
 8000eb0:	4439      	add	r1, r7
 8000eb2:	440b      	add	r3, r1
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <gmax+0x198>)
 8000ebc:	f244 0128 	movw	r1, #16424	; 0x4028
 8000ec0:	4439      	add	r1, r7
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f244 0124 	movw	r1, #16420	; 0x4024
 8000ec8:	4439      	add	r1, r7
 8000eca:	6809      	ldr	r1, [r1, #0]
 8000ecc:	0089      	lsls	r1, r1, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < frameSize*2; i++){
 8000ed2:	f244 0324 	movw	r3, #16420	; 0x4024
 8000ed6:	443b      	add	r3, r7
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	f244 0224 	movw	r2, #16420	; 0x4024
 8000ee0:	443a      	add	r2, r7
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <gmax+0x19c>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	f244 0224 	movw	r2, #16420	; 0x4024
 8000eee:	443a      	add	r2, r7
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dbd4      	blt.n	8000ea0 <gmax+0x80>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, &result_fft[0], ifftFlag, doBitReverse);
 8000ef6:	f244 031c 	movw	r3, #16412	; 0x401c
 8000efa:	443b      	add	r3, r7
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	f244 0318 	movw	r3, #16408	; 0x4018
 8000f04:	443b      	add	r3, r7
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	492b      	ldr	r1, [pc, #172]	; (8000fb8 <gmax+0x198>)
 8000f0c:	f244 0028 	movw	r0, #16424	; 0x4028
 8000f10:	4438      	add	r0, r7
 8000f12:	4401      	add	r1, r0
 8000f14:	482a      	ldr	r0, [pc, #168]	; (8000fc0 <gmax+0x1a0>)
 8000f16:	f009 fbc5 	bl	800a6a4 <arm_cfft_f32>
	arm_cmplx_mag_f32(result_fft, result_mag, fftSize);
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <gmax+0x198>)
 8000f1c:	f244 0228 	movw	r2, #16424	; 0x4028
 8000f20:	443a      	add	r2, r7
 8000f22:	4413      	add	r3, r2
 8000f24:	f244 0220 	movw	r2, #16416	; 0x4020
 8000f28:	443a      	add	r2, r7
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	f244 0114 	movw	r1, #16404	; 0x4014
 8000f30:	4439      	add	r1, r7
 8000f32:	6809      	ldr	r1, [r1, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f009 fccd 	bl	800a8d4 <arm_cmplx_mag_f32>
	arm_max_f32(result_mag, fftSize, &maxValue, &maxValueIndex);
 8000f3a:	f244 0310 	movw	r3, #16400	; 0x4010
 8000f3e:	443b      	add	r3, r7
 8000f40:	f244 020c 	movw	r2, #16396	; 0x400c
 8000f44:	443a      	add	r2, r7
 8000f46:	f244 0120 	movw	r1, #16416	; 0x4020
 8000f4a:	4439      	add	r1, r7
 8000f4c:	6809      	ldr	r1, [r1, #0]
 8000f4e:	f244 0014 	movw	r0, #16404	; 0x4014
 8000f52:	4438      	add	r0, r7
 8000f54:	6800      	ldr	r0, [r0, #0]
 8000f56:	f009 f817 	bl	8009f88 <arm_max_f32>
	*out = maxValue*maxValue/fftSize;
 8000f5a:	f244 030c 	movw	r3, #16396	; 0x400c
 8000f5e:	443b      	add	r3, r7
 8000f60:	ed93 7a00 	vldr	s14, [r3]
 8000f64:	f244 030c 	movw	r3, #16396	; 0x400c
 8000f68:	443b      	add	r3, r7
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f72:	f244 0320 	movw	r3, #16416	; 0x4020
 8000f76:	443b      	add	r3, r7
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <gmax+0x194>)
 8000f88:	f244 0228 	movw	r2, #16424	; 0x4028
 8000f8c:	443a      	add	r2, r7
 8000f8e:	4413      	add	r3, r2
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	edc3 7a00 	vstr	s15, [r3]
	free(result_mag);
 8000f96:	f244 0314 	movw	r3, #16404	; 0x4014
 8000f9a:	443b      	add	r3, r7
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	f00a fb93 	bl	800b6c8 <free>
}
 8000fa2:	bf00      	nop
 8000fa4:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	ffffbfdc 	.word	0xffffbfdc
 8000fb4:	ffffbfd8 	.word	0xffffbfd8
 8000fb8:	ffffbfe4 	.word	0xffffbfe4
 8000fbc:	0800eff8 	.word	0x0800eff8
 8000fc0:	0800f01c 	.word	0x0800f01c

08000fc4 <kurtosis_of_abs_amplitude>:

// Features number 11 and 12
void kurtosis_of_abs_amplitude(float32_t in[], float32_t *out, uint32_t blockSize){
 8000fc4:	b5b0      	push	{r4, r5, r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	466b      	mov	r3, sp
 8000fd2:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
 8000fdc:	4601      	mov	r1, r0
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	f04f 0400 	mov.w	r4, #0
 8000fea:	0154      	lsls	r4, r2, #5
 8000fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ff0:	014b      	lsls	r3, r1, #5
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	f04f 0400 	mov.w	r4, #0
 8001000:	0154      	lsls	r4, r2, #5
 8001002:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001006:	014b      	lsls	r3, r1, #5
 8001008:	0083      	lsls	r3, r0, #2
 800100a:	3303      	adds	r3, #3
 800100c:	3307      	adds	r3, #7
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	ebad 0d03 	sub.w	sp, sp, r3
 8001016:	466b      	mov	r3, sp
 8001018:	3303      	adds	r3, #3
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	4603      	mov	r3, r0
 8001024:	3b01      	subs	r3, #1
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001028:	4601      	mov	r1, r0
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	f04f 0400 	mov.w	r4, #0
 8001036:	0154      	lsls	r4, r2, #5
 8001038:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800103c:	014b      	lsls	r3, r1, #5
 800103e:	4601      	mov	r1, r0
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	f04f 0400 	mov.w	r4, #0
 800104c:	0154      	lsls	r4, r2, #5
 800104e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001052:	014b      	lsls	r3, r1, #5
 8001054:	0083      	lsls	r3, r0, #2
 8001056:	3303      	adds	r3, #3
 8001058:	3307      	adds	r3, #7
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	ebad 0d03 	sub.w	sp, sp, r3
 8001062:	466b      	mov	r3, sp
 8001064:	3303      	adds	r3, #3
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	4603      	mov	r3, r0
 8001070:	3b01      	subs	r3, #1
 8001072:	647b      	str	r3, [r7, #68]	; 0x44
 8001074:	4601      	mov	r1, r0
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	f04f 0400 	mov.w	r4, #0
 8001082:	0154      	lsls	r4, r2, #5
 8001084:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001088:	014b      	lsls	r3, r1, #5
 800108a:	4601      	mov	r1, r0
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	f04f 0400 	mov.w	r4, #0
 8001098:	0154      	lsls	r4, r2, #5
 800109a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800109e:	014b      	lsls	r3, r1, #5
 80010a0:	0083      	lsls	r3, r0, #2
 80010a2:	3303      	adds	r3, #3
 80010a4:	3307      	adds	r3, #7
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	ebad 0d03 	sub.w	sp, sp, r3
 80010ae:	466b      	mov	r3, sp
 80010b0:	3303      	adds	r3, #3
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4603      	mov	r3, r0
 80010bc:	3b01      	subs	r3, #1
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010c0:	4601      	mov	r1, r0
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	f04f 0400 	mov.w	r4, #0
 80010ce:	0154      	lsls	r4, r2, #5
 80010d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010d4:	014b      	lsls	r3, r1, #5
 80010d6:	4601      	mov	r1, r0
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	f04f 0400 	mov.w	r4, #0
 80010e4:	0154      	lsls	r4, r2, #5
 80010e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010ea:	014b      	lsls	r3, r1, #5
 80010ec:	0083      	lsls	r3, r0, #2
 80010ee:	3303      	adds	r3, #3
 80010f0:	3307      	adds	r3, #7
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	ebad 0d03 	sub.w	sp, sp, r3
 80010fa:	466b      	mov	r3, sp
 80010fc:	3303      	adds	r3, #3
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	4603      	mov	r3, r0
 8001108:	3b01      	subs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800110c:	4601      	mov	r1, r0
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	f04f 0400 	mov.w	r4, #0
 800111a:	0154      	lsls	r4, r2, #5
 800111c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001120:	014b      	lsls	r3, r1, #5
 8001122:	4601      	mov	r1, r0
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f04f 0400 	mov.w	r4, #0
 8001130:	0154      	lsls	r4, r2, #5
 8001132:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001136:	014b      	lsls	r3, r1, #5
 8001138:	0083      	lsls	r3, r0, #2
 800113a:	3303      	adds	r3, #3
 800113c:	3307      	adds	r3, #7
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	ebad 0d03 	sub.w	sp, sp, r3
 8001146:	466b      	mov	r3, sp
 8001148:	3303      	adds	r3, #3
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4603      	mov	r3, r0
 8001154:	3b01      	subs	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	4601      	mov	r1, r0
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	0154      	lsls	r4, r2, #5
 8001168:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800116c:	014b      	lsls	r3, r1, #5
 800116e:	4601      	mov	r1, r0
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	f04f 0400 	mov.w	r4, #0
 800117c:	0154      	lsls	r4, r2, #5
 800117e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001182:	014b      	lsls	r3, r1, #5
 8001184:	0083      	lsls	r3, r0, #2
 8001186:	3303      	adds	r3, #3
 8001188:	3307      	adds	r3, #7
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	ebad 0d03 	sub.w	sp, sp, r3
 8001192:	466b      	mov	r3, sp
 8001194:	3303      	adds	r3, #3
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	461a      	mov	r2, r3
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f008 feb9 	bl	8009f1c <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 80011aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	f008 fdea 	bl	8009d90 <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 80011bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80011be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f009 fcbe 	bl	800ab44 <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 80011c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f008 fdfc 	bl	8009dcc <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 80011d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80011d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f009 fcf8 	bl	800abd0 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 80011e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f009 fcf2 	bl	800abd0 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 80011ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011f0:	6a3a      	ldr	r2, [r7, #32]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f009 fcec 	bl	800abd0 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	f107 0218 	add.w	r2, r7, #24
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f008 fe8b 	bl	8009f1c <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 8001206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001208:	f107 0214 	add.w	r2, r7, #20
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f008 fe84 	bl	8009f1c <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8001214:	edd7 6a06 	vldr	s13, [r7, #24]
 8001218:	ed97 7a05 	vldr	s14, [r7, #20]
 800121c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001228:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800122c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	edc3 7a00 	vstr	s15, [r3]
 8001236:	46ad      	mov	sp, r5
}
 8001238:	bf00      	nop
 800123a:	3750      	adds	r7, #80	; 0x50
 800123c:	46bd      	mov	sp, r7
 800123e:	bdb0      	pop	{r4, r5, r7, pc}

08001240 <kurtosis_of_abs_freq>:

void kurtosis_of_abs_freq(float32_t in[], float32_t *out, uint32_t blockSize){
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b094      	sub	sp, #80	; 0x50
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	466b      	mov	r3, sp
 800124e:	461d      	mov	r5, r3
	float32_t mean_array[blockSize];
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	4603      	mov	r3, r0
 8001254:	3b01      	subs	r3, #1
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
 8001258:	4601      	mov	r1, r0
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	f04f 0400 	mov.w	r4, #0
 8001266:	0154      	lsls	r4, r2, #5
 8001268:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800126c:	014b      	lsls	r3, r1, #5
 800126e:	4601      	mov	r1, r0
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	f04f 0400 	mov.w	r4, #0
 800127c:	0154      	lsls	r4, r2, #5
 800127e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001282:	014b      	lsls	r3, r1, #5
 8001284:	0083      	lsls	r3, r0, #2
 8001286:	3303      	adds	r3, #3
 8001288:	3307      	adds	r3, #7
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	ebad 0d03 	sub.w	sp, sp, r3
 8001292:	466b      	mov	r3, sp
 8001294:	3303      	adds	r3, #3
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t x_1[blockSize];
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4603      	mov	r3, r0
 80012a0:	3b01      	subs	r3, #1
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012a4:	4601      	mov	r1, r0
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	f04f 0400 	mov.w	r4, #0
 80012b2:	0154      	lsls	r4, r2, #5
 80012b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012b8:	014b      	lsls	r3, r1, #5
 80012ba:	4601      	mov	r1, r0
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	f04f 0400 	mov.w	r4, #0
 80012c8:	0154      	lsls	r4, r2, #5
 80012ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012ce:	014b      	lsls	r3, r1, #5
 80012d0:	0083      	lsls	r3, r0, #2
 80012d2:	3303      	adds	r3, #3
 80012d4:	3307      	adds	r3, #7
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	ebad 0d03 	sub.w	sp, sp, r3
 80012de:	466b      	mov	r3, sp
 80012e0:	3303      	adds	r3, #3
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t x_2[blockSize];
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4603      	mov	r3, r0
 80012ec:	3b01      	subs	r3, #1
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
 80012f0:	4601      	mov	r1, r0
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	f04f 0400 	mov.w	r4, #0
 80012fe:	0154      	lsls	r4, r2, #5
 8001300:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001304:	014b      	lsls	r3, r1, #5
 8001306:	4601      	mov	r1, r0
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	f04f 0400 	mov.w	r4, #0
 8001314:	0154      	lsls	r4, r2, #5
 8001316:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800131a:	014b      	lsls	r3, r1, #5
 800131c:	0083      	lsls	r3, r0, #2
 800131e:	3303      	adds	r3, #3
 8001320:	3307      	adds	r3, #7
 8001322:	08db      	lsrs	r3, r3, #3
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	ebad 0d03 	sub.w	sp, sp, r3
 800132a:	466b      	mov	r3, sp
 800132c:	3303      	adds	r3, #3
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t temp_1[blockSize];
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4603      	mov	r3, r0
 8001338:	3b01      	subs	r3, #1
 800133a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800133c:	4601      	mov	r1, r0
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	f04f 0400 	mov.w	r4, #0
 800134a:	0154      	lsls	r4, r2, #5
 800134c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001350:	014b      	lsls	r3, r1, #5
 8001352:	4601      	mov	r1, r0
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	f04f 0400 	mov.w	r4, #0
 8001360:	0154      	lsls	r4, r2, #5
 8001362:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001366:	014b      	lsls	r3, r1, #5
 8001368:	0083      	lsls	r3, r0, #2
 800136a:	3303      	adds	r3, #3
 800136c:	3307      	adds	r3, #7
 800136e:	08db      	lsrs	r3, r3, #3
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	ebad 0d03 	sub.w	sp, sp, r3
 8001376:	466b      	mov	r3, sp
 8001378:	3303      	adds	r3, #3
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t temp_2[blockSize];
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	4603      	mov	r3, r0
 8001384:	3b01      	subs	r3, #1
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001388:	4601      	mov	r1, r0
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	f04f 0400 	mov.w	r4, #0
 8001396:	0154      	lsls	r4, r2, #5
 8001398:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800139c:	014b      	lsls	r3, r1, #5
 800139e:	4601      	mov	r1, r0
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	f04f 0400 	mov.w	r4, #0
 80013ac:	0154      	lsls	r4, r2, #5
 80013ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013b2:	014b      	lsls	r3, r1, #5
 80013b4:	0083      	lsls	r3, r0, #2
 80013b6:	3303      	adds	r3, #3
 80013b8:	3307      	adds	r3, #7
 80013ba:	08db      	lsrs	r3, r3, #3
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	ebad 0d03 	sub.w	sp, sp, r3
 80013c2:	466b      	mov	r3, sp
 80013c4:	3303      	adds	r3, #3
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t result[blockSize];
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	4603      	mov	r3, r0
 80013d0:	3b01      	subs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
 80013d4:	4601      	mov	r1, r0
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	f04f 0400 	mov.w	r4, #0
 80013e2:	0154      	lsls	r4, r2, #5
 80013e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013e8:	014b      	lsls	r3, r1, #5
 80013ea:	4601      	mov	r1, r0
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	f04f 0400 	mov.w	r4, #0
 80013f8:	0154      	lsls	r4, r2, #5
 80013fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013fe:	014b      	lsls	r3, r1, #5
 8001400:	0083      	lsls	r3, r0, #2
 8001402:	3303      	adds	r3, #3
 8001404:	3307      	adds	r3, #7
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	ebad 0d03 	sub.w	sp, sp, r3
 800140e:	466b      	mov	r3, sp
 8001410:	3303      	adds	r3, #3
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	623b      	str	r3, [r7, #32]
	float32_t mean, m4, m2;
	// Calculate mean
	arm_mean_f32(&in[0], blockSize, &mean);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	461a      	mov	r2, r3
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f008 fd7b 	bl	8009f1c <arm_mean_f32>
	// Transform scalar into vector
	arm_fill_f32(mean, &mean_array[0], blockSize);
 8001426:	edd7 7a07 	vldr	s15, [r7, #28]
 800142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4618      	mov	r0, r3
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	f008 fcac 	bl	8009d90 <arm_fill_f32>
	// Calculate (x - mean)
	arm_sub_f32(&in[0], &mean_array[0], &x_1[0], blockSize);
 8001438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800143a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f009 fb80 	bl	800ab44 <arm_sub_f32>
	// Make a copy of (x - mean)
	arm_copy_f32(&x_1[0], &x_2[0], blockSize);
 8001444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001446:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4618      	mov	r0, r3
 800144c:	f008 fcbe 	bl	8009dcc <arm_copy_f32>
	// Calculate (x - mean) ^ 4
	arm_mult_f32(&x_1[0], &x_2[0], &temp_1[0], blockSize); // temp1 = (x - u)^2
 8001450:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001452:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f009 fbba 	bl	800abd0 <arm_mult_f32>
	arm_mult_f32(&temp_1[0], &x_2[0], &temp_2[0], blockSize); // temp2 = (x - u)^3
 800145c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800145e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f009 fbb4 	bl	800abd0 <arm_mult_f32>
	arm_mult_f32(&temp_2[0], &x_2[0], &result[0], blockSize); // result = (x - u)^4
 8001468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800146a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f009 fbae 	bl	800abd0 <arm_mult_f32>
	// Calculate mean of (x - mean) ^ 4
	arm_mean_f32(&result[0], blockSize, &m4);
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f107 0218 	add.w	r2, r7, #24
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	f008 fd4d 	bl	8009f1c <arm_mean_f32>
	// Calculate mean of (x - mean) ^ 2
	arm_mean_f32(&temp_1[0], blockSize, &m2);
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	f107 0214 	add.w	r2, r7, #20
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f008 fd46 	bl	8009f1c <arm_mean_f32>
	*out = m4 / (m2*m2) - 3;
 8001490:	edd7 6a06 	vldr	s13, [r7, #24]
 8001494:	ed97 7a05 	vldr	s14, [r7, #20]
 8001498:	edd7 7a05 	vldr	s15, [r7, #20]
 800149c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80014a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	edc3 7a00 	vstr	s15, [r3]
 80014b2:	46ad      	mov	sp, r5
}
 80014b4:	bf00      	nop
 80014b6:	3750      	adds	r7, #80	; 0x50
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bdb0      	pop	{r4, r5, r7, pc}

080014bc <moment20>:

// Central moment definition
// Mpq = E[x^(p-q).x*^q]
void moment20(float32_t in[], float32_t *out){
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	466b      	mov	r3, sp
 80014c8:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 80014ca:	4b69      	ldr	r3, [pc, #420]	; (8001670 <moment20+0x1b4>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	3b01      	subs	r3, #1
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <moment20+0x1b4>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	f04f 0400 	mov.w	r4, #0
 80014e8:	0154      	lsls	r4, r2, #5
 80014ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014ee:	014b      	lsls	r3, r1, #5
 80014f0:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <moment20+0x1b4>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	f04f 0400 	mov.w	r4, #0
 8001504:	0154      	lsls	r4, r2, #5
 8001506:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800150a:	014b      	lsls	r3, r1, #5
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <moment20+0x1b4>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	3303      	adds	r3, #3
 8001514:	3307      	adds	r3, #7
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	ebad 0d03 	sub.w	sp, sp, r3
 800151e:	466b      	mov	r3, sp
 8001520:	3303      	adds	r3, #3
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	61fb      	str	r3, [r7, #28]
	float32_t m20[frameSize*2]; // in^2
 8001528:	4b51      	ldr	r3, [pc, #324]	; (8001670 <moment20+0x1b4>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	3b01      	subs	r3, #1
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <moment20+0x1b4>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f04f 0400 	mov.w	r4, #0
 8001546:	0154      	lsls	r4, r2, #5
 8001548:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800154c:	014b      	lsls	r3, r1, #5
 800154e:	4b48      	ldr	r3, [pc, #288]	; (8001670 <moment20+0x1b4>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	f04f 0400 	mov.w	r4, #0
 8001562:	0154      	lsls	r4, r2, #5
 8001564:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001568:	014b      	lsls	r3, r1, #5
 800156a:	4b41      	ldr	r3, [pc, #260]	; (8001670 <moment20+0x1b4>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	3303      	adds	r3, #3
 8001572:	3307      	adds	r3, #7
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	ebad 0d03 	sub.w	sp, sp, r3
 800157c:	466b      	mov	r3, sp
 800157e:	3303      	adds	r3, #3
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	617b      	str	r3, [r7, #20]
	float32_t m20_real = 0, m20_imag = 0, m20_real_mean = 0, m20_imag_mean = 0;
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 800159e:	69f9      	ldr	r1, [r7, #28]
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <moment20+0x1b4>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	461a      	mov	r2, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f008 fc0f 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 80015ae:	69f9      	ldr	r1, [r7, #28]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <moment20+0x1b4>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f009 f8ec 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c0:	e01b      	b.n	80015fa <moment20+0x13e>
		m20_real += m20[i];
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80015d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d6:	edc7 7a08 	vstr	s15, [r7, #32]
		m20_imag += m20[i+1];
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	3301      	adds	r3, #1
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = 0; i < frameSize*2; i+=2){
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	3302      	adds	r3, #2
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <moment20+0x1b4>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001602:	429a      	cmp	r2, r3
 8001604:	dbdd      	blt.n	80015c2 <moment20+0x106>
	}
	m20_real_mean = m20_real / frameSize;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <moment20+0x1b4>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001612:	edd7 6a08 	vldr	s13, [r7, #32]
 8001616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800161a:	edc7 7a04 	vstr	s15, [r7, #16]
	m20_imag_mean = m20_imag / frameSize;
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <moment20+0x1b4>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800162e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001632:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m20_real_mean*m20_real_mean + m20_imag_mean*m20_imag_mean);
 8001636:	ed97 7a04 	vldr	s14, [r7, #16]
 800163a:	edd7 7a04 	vldr	s15, [r7, #16]
 800163e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001642:	edd7 6a03 	vldr	s13, [r7, #12]
 8001646:	edd7 7a03 	vldr	s15, [r7, #12]
 800164a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f009 fe2b 	bl	800b2b0 <sqrtf>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	edc3 7a00 	vstr	s15, [r3]
 8001664:	46ad      	mov	sp, r5
}
 8001666:	bf00      	nop
 8001668:	3730      	adds	r7, #48	; 0x30
 800166a:	46bd      	mov	sp, r7
 800166c:	bdb0      	pop	{r4, r5, r7, pc}
 800166e:	bf00      	nop
 8001670:	0800eff8 	.word	0x0800eff8

08001674 <moment21>:

void moment21(float32_t in[], float32_t *out){
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	466b      	mov	r3, sp
 8001680:	461d      	mov	r5, r3
	float32_t in_conj[frameSize*2];
 8001682:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <moment21+0x164>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	3b01      	subs	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	4b52      	ldr	r3, [pc, #328]	; (80017d8 <moment21+0x164>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	f04f 0400 	mov.w	r4, #0
 80016a0:	0154      	lsls	r4, r2, #5
 80016a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016a6:	014b      	lsls	r3, r1, #5
 80016a8:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <moment21+0x164>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	f04f 0400 	mov.w	r4, #0
 80016bc:	0154      	lsls	r4, r2, #5
 80016be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016c2:	014b      	lsls	r3, r1, #5
 80016c4:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <moment21+0x164>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	3303      	adds	r3, #3
 80016cc:	3307      	adds	r3, #7
 80016ce:	08db      	lsrs	r3, r3, #3
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	ebad 0d03 	sub.w	sp, sp, r3
 80016d6:	466b      	mov	r3, sp
 80016d8:	3303      	adds	r3, #3
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
	float32_t m21[frameSize*2];
 80016e0:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <moment21+0x164>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	3b01      	subs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <moment21+0x164>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4619      	mov	r1, r3
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	f04f 0400 	mov.w	r4, #0
 80016fe:	0154      	lsls	r4, r2, #5
 8001700:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001704:	014b      	lsls	r3, r1, #5
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <moment21+0x164>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	f04f 0400 	mov.w	r4, #0
 800171a:	0154      	lsls	r4, r2, #5
 800171c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001720:	014b      	lsls	r3, r1, #5
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <moment21+0x164>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	3303      	adds	r3, #3
 800172a:	3307      	adds	r3, #7
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	ebad 0d03 	sub.w	sp, sp, r3
 8001734:	466b      	mov	r3, sp
 8001736:	3303      	adds	r3, #3
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	613b      	str	r3, [r7, #16]
	float32_t in_mag[frameSize];
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <moment21+0x164>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	3b01      	subs	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <moment21+0x164>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b299      	uxth	r1, r3
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	0154      	lsls	r4, r2, #5
 800175a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <moment21+0x164>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b299      	uxth	r1, r3
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	0154      	lsls	r4, r2, #5
 8001774:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001778:	014b      	lsls	r3, r1, #5
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <moment21+0x164>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	3303      	adds	r3, #3
 8001782:	3307      	adds	r3, #7
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	ebad 0d03 	sub.w	sp, sp, r3
 800178c:	466b      	mov	r3, sp
 800178e:	3303      	adds	r3, #3
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	60bb      	str	r3, [r7, #8]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8001796:	69b9      	ldr	r1, [r7, #24]
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <moment21+0x164>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f009 f980 	bl	800aaa4 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 80017a4:	69b9      	ldr	r1, [r7, #24]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <moment21+0x164>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f008 fff1 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mag_f32(&m21[0], &in_mag[0], frameSize);
 80017b2:	6938      	ldr	r0, [r7, #16]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <moment21+0x164>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f009 f88a 	bl	800a8d4 <arm_cmplx_mag_f32>
	arm_mean_f32(&in_mag[0], frameSize, out);
 80017c0:	68b8      	ldr	r0, [r7, #8]
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <moment21+0x164>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f008 fba7 	bl	8009f1c <arm_mean_f32>
 80017ce:	46ad      	mov	sp, r5
	// Calculating the mean after the absolute value here works because there
	// is no imaginary part in the number M21, different from M20
}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bdb0      	pop	{r4, r5, r7, pc}
 80017d8:	0800eff8 	.word	0x0800eff8

080017dc <moment22>:

void moment22(float32_t in[], float32_t *out){
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	466b      	mov	r3, sp
 80017e8:	461d      	mov	r5, r3
	float32_t in_conj[frameSize*2];
 80017ea:	4b84      	ldr	r3, [pc, #528]	; (80019fc <moment22+0x220>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	3b01      	subs	r3, #1
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	4b81      	ldr	r3, [pc, #516]	; (80019fc <moment22+0x220>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	f04f 0400 	mov.w	r4, #0
 8001808:	0154      	lsls	r4, r2, #5
 800180a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800180e:	014b      	lsls	r3, r1, #5
 8001810:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <moment22+0x220>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f04f 0400 	mov.w	r4, #0
 8001824:	0154      	lsls	r4, r2, #5
 8001826:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800182a:	014b      	lsls	r3, r1, #5
 800182c:	4b73      	ldr	r3, [pc, #460]	; (80019fc <moment22+0x220>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	3303      	adds	r3, #3
 8001834:	3307      	adds	r3, #7
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	ebad 0d03 	sub.w	sp, sp, r3
 800183e:	466b      	mov	r3, sp
 8001840:	3303      	adds	r3, #3
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
	float32_t in_conj_cp[frameSize*2];
 8001848:	4b6c      	ldr	r3, [pc, #432]	; (80019fc <moment22+0x220>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	3b01      	subs	r3, #1
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
 8001852:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <moment22+0x220>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	f04f 0400 	mov.w	r4, #0
 8001866:	0154      	lsls	r4, r2, #5
 8001868:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800186c:	014b      	lsls	r3, r1, #5
 800186e:	4b63      	ldr	r3, [pc, #396]	; (80019fc <moment22+0x220>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	f04f 0400 	mov.w	r4, #0
 8001882:	0154      	lsls	r4, r2, #5
 8001884:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001888:	014b      	lsls	r3, r1, #5
 800188a:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <moment22+0x220>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	3303      	adds	r3, #3
 8001892:	3307      	adds	r3, #7
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	ebad 0d03 	sub.w	sp, sp, r3
 800189c:	466b      	mov	r3, sp
 800189e:	3303      	adds	r3, #3
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	61fb      	str	r3, [r7, #28]
	float32_t m22[frameSize*2]; // in^2
 80018a6:	4b55      	ldr	r3, [pc, #340]	; (80019fc <moment22+0x220>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	3b01      	subs	r3, #1
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	4b52      	ldr	r3, [pc, #328]	; (80019fc <moment22+0x220>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	f04f 0400 	mov.w	r4, #0
 80018c4:	0154      	lsls	r4, r2, #5
 80018c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ca:	014b      	lsls	r3, r1, #5
 80018cc:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <moment22+0x220>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	f04f 0400 	mov.w	r4, #0
 80018e0:	0154      	lsls	r4, r2, #5
 80018e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e6:	014b      	lsls	r3, r1, #5
 80018e8:	4b44      	ldr	r3, [pc, #272]	; (80019fc <moment22+0x220>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	3303      	adds	r3, #3
 80018f0:	3307      	adds	r3, #7
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	ebad 0d03 	sub.w	sp, sp, r3
 80018fa:	466b      	mov	r3, sp
 80018fc:	3303      	adds	r3, #3
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	617b      	str	r3, [r7, #20]
	float32_t m22_real = 0, m22_imag = 0, m22_real_mean = 0, m22_imag_mean = 0;
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 800191c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <moment22+0x220>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f009 f8bd 	bl	800aaa4 <arm_cmplx_conj_f32>
	arm_copy_f32(&in_conj[0], &in_conj_cp[0], frameSize*2);
 800192a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <moment22+0x220>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	461a      	mov	r2, r3
 8001936:	f008 fa49 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in_conj[0], &in_conj_cp[0], &m22[0], frameSize);
 800193a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800193c:	69f9      	ldr	r1, [r7, #28]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <moment22+0x220>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	f008 ff26 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
 800194c:	e01b      	b.n	8001986 <moment22+0x1aa>
		m22_real += m22[i];
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ed97 7a08 	vldr	s14, [r7, #32]
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001962:	edc7 7a08 	vstr	s15, [r7, #32]
		m22_imag += m22[i+1];
 8001966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001968:	3301      	adds	r3, #1
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = 0; i < frameSize*2; i+=2){
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	3302      	adds	r3, #2
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <moment22+0x220>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198e:	429a      	cmp	r2, r3
 8001990:	dbdd      	blt.n	800194e <moment22+0x172>
	}
	m22_real_mean = m22_real / frameSize;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <moment22+0x220>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199e:	edd7 6a08 	vldr	s13, [r7, #32]
 80019a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a6:	edc7 7a04 	vstr	s15, [r7, #16]
	m22_imag_mean = m22_imag / frameSize;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <moment22+0x220>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80019ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019be:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m22_real_mean*m22_real_mean + m22_imag_mean*m22_imag_mean);
 80019c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80019c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ce:	edd7 6a03 	vldr	s13, [r7, #12]
 80019d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	f009 fc65 	bl	800b2b0 <sqrtf>
 80019e6:	eef0 7a40 	vmov.f32	s15, s0
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	edc3 7a00 	vstr	s15, [r3]
 80019f0:	46ad      	mov	sp, r5
}
 80019f2:	bf00      	nop
 80019f4:	3738      	adds	r7, #56	; 0x38
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bdb0      	pop	{r4, r5, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	0800eff8 	.word	0x0800eff8

08001a00 <moment40>:

void moment40(float32_t in[], float32_t *out){
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b090      	sub	sp, #64	; 0x40
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	466b      	mov	r3, sp
 8001a0c:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8001a0e:	4b9c      	ldr	r3, [pc, #624]	; (8001c80 <moment40+0x280>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	3b01      	subs	r3, #1
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
 8001a18:	4b99      	ldr	r3, [pc, #612]	; (8001c80 <moment40+0x280>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	f04f 0400 	mov.w	r4, #0
 8001a2c:	0154      	lsls	r4, r2, #5
 8001a2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a32:	014b      	lsls	r3, r1, #5
 8001a34:	4b92      	ldr	r3, [pc, #584]	; (8001c80 <moment40+0x280>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	f04f 0400 	mov.w	r4, #0
 8001a48:	0154      	lsls	r4, r2, #5
 8001a4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a4e:	014b      	lsls	r3, r1, #5
 8001a50:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <moment40+0x280>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	3303      	adds	r3, #3
 8001a58:	3307      	adds	r3, #7
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	ebad 0d03 	sub.w	sp, sp, r3
 8001a62:	466b      	mov	r3, sp
 8001a64:	3303      	adds	r3, #3
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
	float32_t m20[frameSize*2]; // in^2
 8001a6c:	4b84      	ldr	r3, [pc, #528]	; (8001c80 <moment40+0x280>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	3b01      	subs	r3, #1
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a76:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <moment40+0x280>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	f04f 0400 	mov.w	r4, #0
 8001a8a:	0154      	lsls	r4, r2, #5
 8001a8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a90:	014b      	lsls	r3, r1, #5
 8001a92:	4b7b      	ldr	r3, [pc, #492]	; (8001c80 <moment40+0x280>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	f04f 0400 	mov.w	r4, #0
 8001aa6:	0154      	lsls	r4, r2, #5
 8001aa8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aac:	014b      	lsls	r3, r1, #5
 8001aae:	4b74      	ldr	r3, [pc, #464]	; (8001c80 <moment40+0x280>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	3303      	adds	r3, #3
 8001ab6:	3307      	adds	r3, #7
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	ebad 0d03 	sub.w	sp, sp, r3
 8001ac0:	466b      	mov	r3, sp
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float32_t m30[frameSize]; // in^3
 8001aca:	4b6d      	ldr	r3, [pc, #436]	; (8001c80 <moment40+0x280>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	623b      	str	r3, [r7, #32]
 8001ad2:	4b6b      	ldr	r3, [pc, #428]	; (8001c80 <moment40+0x280>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	b299      	uxth	r1, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	f04f 0400 	mov.w	r4, #0
 8001ae4:	0154      	lsls	r4, r2, #5
 8001ae6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aea:	014b      	lsls	r3, r1, #5
 8001aec:	4b64      	ldr	r3, [pc, #400]	; (8001c80 <moment40+0x280>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b299      	uxth	r1, r3
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	f04f 0400 	mov.w	r4, #0
 8001afe:	0154      	lsls	r4, r2, #5
 8001b00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b04:	014b      	lsls	r3, r1, #5
 8001b06:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <moment40+0x280>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	3307      	adds	r3, #7
 8001b10:	08db      	lsrs	r3, r3, #3
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	ebad 0d03 	sub.w	sp, sp, r3
 8001b18:	466b      	mov	r3, sp
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	61fb      	str	r3, [r7, #28]
	float32_t m40[frameSize]; // in^4
 8001b22:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <moment40+0x280>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	4b55      	ldr	r3, [pc, #340]	; (8001c80 <moment40+0x280>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b299      	uxth	r1, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	f04f 0400 	mov.w	r4, #0
 8001b3c:	0154      	lsls	r4, r2, #5
 8001b3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b42:	014b      	lsls	r3, r1, #5
 8001b44:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <moment40+0x280>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b299      	uxth	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	f04f 0400 	mov.w	r4, #0
 8001b56:	0154      	lsls	r4, r2, #5
 8001b58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b5c:	014b      	lsls	r3, r1, #5
 8001b5e:	4b48      	ldr	r3, [pc, #288]	; (8001c80 <moment40+0x280>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	3303      	adds	r3, #3
 8001b66:	3307      	adds	r3, #7
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	ebad 0d03 	sub.w	sp, sp, r3
 8001b70:	466b      	mov	r3, sp
 8001b72:	3303      	adds	r3, #3
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	617b      	str	r3, [r7, #20]
	float32_t m40_real = 0.0f, m40_imag = 0.0f;
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
	float32_t m40_real_mean = 0.0f, m40_imag_mean = 0.0f;
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8001b92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b94:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <moment40+0x280>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f008 f915 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001ba2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <moment40+0x280>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f008 fdf2 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8001bb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001bb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <moment40+0x280>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	f008 fdeb 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8001bbe:	69f8      	ldr	r0, [r7, #28]
 8001bc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <moment40+0x280>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	f008 fde4 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd0:	e01b      	b.n	8001c0a <moment40+0x20a>
		m40_real += m40[i];
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		m40_imag += m40[i+1];
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	3301      	adds	r3, #1
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c00:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	for(int i = 0; i < frameSize*2; i+=2){
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	3302      	adds	r3, #2
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <moment40+0x280>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dbdd      	blt.n	8001bd2 <moment40+0x1d2>
	}
	m40_real_mean = m40_real / frameSize;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <moment40+0x280>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c22:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2a:	edc7 7a04 	vstr	s15, [r7, #16]
	m40_imag_mean = m40_imag / frameSize;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <moment40+0x280>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c3a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c42:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m40_real_mean*m40_real_mean + m40_imag_mean*m40_imag_mean);
 8001c46:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c52:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	eeb0 0a67 	vmov.f32	s0, s15
 8001c66:	f009 fb23 	bl	800b2b0 <sqrtf>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	edc3 7a00 	vstr	s15, [r3]
 8001c74:	46ad      	mov	sp, r5
}
 8001c76:	bf00      	nop
 8001c78:	3740      	adds	r7, #64	; 0x40
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800eff8 	.word	0x0800eff8

08001c84 <moment41>:

void moment41(float32_t in[], float32_t *out){
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b092      	sub	sp, #72	; 0x48
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	466b      	mov	r3, sp
 8001c90:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8001c92:	4bb7      	ldr	r3, [pc, #732]	; (8001f70 <moment41+0x2ec>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9c:	4bb4      	ldr	r3, [pc, #720]	; (8001f70 <moment41+0x2ec>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	f04f 0400 	mov.w	r4, #0
 8001cb0:	0154      	lsls	r4, r2, #5
 8001cb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cb6:	014b      	lsls	r3, r1, #5
 8001cb8:	4bad      	ldr	r3, [pc, #692]	; (8001f70 <moment41+0x2ec>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	0154      	lsls	r4, r2, #5
 8001cce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cd2:	014b      	lsls	r3, r1, #5
 8001cd4:	4ba6      	ldr	r3, [pc, #664]	; (8001f70 <moment41+0x2ec>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	3303      	adds	r3, #3
 8001cdc:	3307      	adds	r3, #7
 8001cde:	08db      	lsrs	r3, r3, #3
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ce6:	466b      	mov	r3, sp
 8001ce8:	3303      	adds	r3, #3
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8001cf0:	4b9f      	ldr	r3, [pc, #636]	; (8001f70 <moment41+0x2ec>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cfa:	4b9d      	ldr	r3, [pc, #628]	; (8001f70 <moment41+0x2ec>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	f04f 0400 	mov.w	r4, #0
 8001d0e:	0154      	lsls	r4, r2, #5
 8001d10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d14:	014b      	lsls	r3, r1, #5
 8001d16:	4b96      	ldr	r3, [pc, #600]	; (8001f70 <moment41+0x2ec>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	f04f 0400 	mov.w	r4, #0
 8001d2a:	0154      	lsls	r4, r2, #5
 8001d2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d30:	014b      	lsls	r3, r1, #5
 8001d32:	4b8f      	ldr	r3, [pc, #572]	; (8001f70 <moment41+0x2ec>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	3303      	adds	r3, #3
 8001d3a:	3307      	adds	r3, #7
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	ebad 0d03 	sub.w	sp, sp, r3
 8001d44:	466b      	mov	r3, sp
 8001d46:	3303      	adds	r3, #3
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 8001d4e:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <moment41+0x2ec>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	3b01      	subs	r3, #1
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
 8001d58:	4b85      	ldr	r3, [pc, #532]	; (8001f70 <moment41+0x2ec>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	f04f 0400 	mov.w	r4, #0
 8001d6c:	0154      	lsls	r4, r2, #5
 8001d6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d72:	014b      	lsls	r3, r1, #5
 8001d74:	4b7e      	ldr	r3, [pc, #504]	; (8001f70 <moment41+0x2ec>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	f04f 0400 	mov.w	r4, #0
 8001d88:	0154      	lsls	r4, r2, #5
 8001d8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d8e:	014b      	lsls	r3, r1, #5
 8001d90:	4b77      	ldr	r3, [pc, #476]	; (8001f70 <moment41+0x2ec>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	3303      	adds	r3, #3
 8001d98:	3307      	adds	r3, #7
 8001d9a:	08db      	lsrs	r3, r3, #3
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	ebad 0d03 	sub.w	sp, sp, r3
 8001da2:	466b      	mov	r3, sp
 8001da4:	3303      	adds	r3, #3
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m30[frameSize]; // in^3
 8001dac:	4b70      	ldr	r3, [pc, #448]	; (8001f70 <moment41+0x2ec>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	4b6e      	ldr	r3, [pc, #440]	; (8001f70 <moment41+0x2ec>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	f04f 0400 	mov.w	r4, #0
 8001dc6:	0154      	lsls	r4, r2, #5
 8001dc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dcc:	014b      	lsls	r3, r1, #5
 8001dce:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <moment41+0x2ec>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	f04f 0400 	mov.w	r4, #0
 8001de0:	0154      	lsls	r4, r2, #5
 8001de2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001de6:	014b      	lsls	r3, r1, #5
 8001de8:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <moment41+0x2ec>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	3303      	adds	r3, #3
 8001df0:	3307      	adds	r3, #7
 8001df2:	08db      	lsrs	r3, r3, #3
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	ebad 0d03 	sub.w	sp, sp, r3
 8001dfa:	466b      	mov	r3, sp
 8001dfc:	3303      	adds	r3, #3
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	61fb      	str	r3, [r7, #28]
	float32_t m41[frameSize]; // in^4
 8001e04:	4b5a      	ldr	r3, [pc, #360]	; (8001f70 <moment41+0x2ec>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <moment41+0x2ec>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b299      	uxth	r1, r3
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	f04f 0400 	mov.w	r4, #0
 8001e1e:	0154      	lsls	r4, r2, #5
 8001e20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e24:	014b      	lsls	r3, r1, #5
 8001e26:	4b52      	ldr	r3, [pc, #328]	; (8001f70 <moment41+0x2ec>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b299      	uxth	r1, r3
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f04f 0400 	mov.w	r4, #0
 8001e38:	0154      	lsls	r4, r2, #5
 8001e3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e3e:	014b      	lsls	r3, r1, #5
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <moment41+0x2ec>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	3303      	adds	r3, #3
 8001e48:	3307      	adds	r3, #7
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e52:	466b      	mov	r3, sp
 8001e54:	3303      	adds	r3, #3
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	617b      	str	r3, [r7, #20]
	float32_t m41_real = 0.0f, m41_imag = 0.0f;
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m41_real_mean = 0.0f, m41_imag_mean = 0.0f;
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8001e74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <moment41+0x2ec>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f007 ffa4 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8001e84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e86:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <moment41+0x2ec>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f008 fe09 	bl	800aaa4 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8001e92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e96:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <moment41+0x2ec>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f008 fc7a 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8001ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <moment41+0x2ec>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	f008 fc73 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 8001eae:	69f8      	ldr	r0, [r7, #28]
 8001eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <moment41+0x2ec>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	f008 fc6c 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec0:	e01b      	b.n	8001efa <moment41+0x276>
		m41_real += m41[i];
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m41_imag += m41[i+1];
 8001eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001edc:	3301      	adds	r3, #1
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <moment41+0x2ec>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dbdd      	blt.n	8001ec2 <moment41+0x23e>
	}
	m41_real_mean = m41_real / frameSize;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <moment41+0x2ec>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f12:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1a:	edc7 7a04 	vstr	s15, [r7, #16]
	m41_imag_mean = m41_imag / frameSize;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <moment41+0x2ec>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f32:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m41_real_mean*m41_real_mean + m41_imag_mean*m41_imag_mean);
 8001f36:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f42:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f009 f9ab 	bl	800b2b0 <sqrtf>
 8001f5a:	eef0 7a40 	vmov.f32	s15, s0
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	edc3 7a00 	vstr	s15, [r3]
 8001f64:	46ad      	mov	sp, r5
}
 8001f66:	bf00      	nop
 8001f68:	3748      	adds	r7, #72	; 0x48
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	0800eff8 	.word	0x0800eff8

08001f74 <moment42>:

void moment42(float32_t in[], float32_t *out){
 8001f74:	b5b0      	push	{r4, r5, r7, lr}
 8001f76:	b092      	sub	sp, #72	; 0x48
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	466b      	mov	r3, sp
 8001f80:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8001f82:	4bb7      	ldr	r3, [pc, #732]	; (8002260 <moment42+0x2ec>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8c:	4bb4      	ldr	r3, [pc, #720]	; (8002260 <moment42+0x2ec>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	f04f 0400 	mov.w	r4, #0
 8001fa0:	0154      	lsls	r4, r2, #5
 8001fa2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fa6:	014b      	lsls	r3, r1, #5
 8001fa8:	4bad      	ldr	r3, [pc, #692]	; (8002260 <moment42+0x2ec>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	f04f 0400 	mov.w	r4, #0
 8001fbc:	0154      	lsls	r4, r2, #5
 8001fbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fc2:	014b      	lsls	r3, r1, #5
 8001fc4:	4ba6      	ldr	r3, [pc, #664]	; (8002260 <moment42+0x2ec>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	3303      	adds	r3, #3
 8001fcc:	3307      	adds	r3, #7
 8001fce:	08db      	lsrs	r3, r3, #3
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	ebad 0d03 	sub.w	sp, sp, r3
 8001fd6:	466b      	mov	r3, sp
 8001fd8:	3303      	adds	r3, #3
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8001fe0:	4b9f      	ldr	r3, [pc, #636]	; (8002260 <moment42+0x2ec>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fea:	4b9d      	ldr	r3, [pc, #628]	; (8002260 <moment42+0x2ec>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	f04f 0400 	mov.w	r4, #0
 8001ffe:	0154      	lsls	r4, r2, #5
 8002000:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002004:	014b      	lsls	r3, r1, #5
 8002006:	4b96      	ldr	r3, [pc, #600]	; (8002260 <moment42+0x2ec>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4619      	mov	r1, r3
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	f04f 0400 	mov.w	r4, #0
 800201a:	0154      	lsls	r4, r2, #5
 800201c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002020:	014b      	lsls	r3, r1, #5
 8002022:	4b8f      	ldr	r3, [pc, #572]	; (8002260 <moment42+0x2ec>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	3303      	adds	r3, #3
 800202a:	3307      	adds	r3, #7
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	ebad 0d03 	sub.w	sp, sp, r3
 8002034:	466b      	mov	r3, sp
 8002036:	3303      	adds	r3, #3
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 800203e:	4b88      	ldr	r3, [pc, #544]	; (8002260 <moment42+0x2ec>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	3b01      	subs	r3, #1
 8002046:	647b      	str	r3, [r7, #68]	; 0x44
 8002048:	4b85      	ldr	r3, [pc, #532]	; (8002260 <moment42+0x2ec>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	f04f 0400 	mov.w	r4, #0
 800205c:	0154      	lsls	r4, r2, #5
 800205e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002062:	014b      	lsls	r3, r1, #5
 8002064:	4b7e      	ldr	r3, [pc, #504]	; (8002260 <moment42+0x2ec>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	f04f 0400 	mov.w	r4, #0
 8002078:	0154      	lsls	r4, r2, #5
 800207a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800207e:	014b      	lsls	r3, r1, #5
 8002080:	4b77      	ldr	r3, [pc, #476]	; (8002260 <moment42+0x2ec>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	3303      	adds	r3, #3
 8002088:	3307      	adds	r3, #7
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	ebad 0d03 	sub.w	sp, sp, r3
 8002092:	466b      	mov	r3, sp
 8002094:	3303      	adds	r3, #3
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m31[frameSize]; // in^3
 800209c:	4b70      	ldr	r3, [pc, #448]	; (8002260 <moment42+0x2ec>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	4b6e      	ldr	r3, [pc, #440]	; (8002260 <moment42+0x2ec>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b299      	uxth	r1, r3
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	f04f 0400 	mov.w	r4, #0
 80020b6:	0154      	lsls	r4, r2, #5
 80020b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020bc:	014b      	lsls	r3, r1, #5
 80020be:	4b68      	ldr	r3, [pc, #416]	; (8002260 <moment42+0x2ec>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	b299      	uxth	r1, r3
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	0154      	lsls	r4, r2, #5
 80020d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020d6:	014b      	lsls	r3, r1, #5
 80020d8:	4b61      	ldr	r3, [pc, #388]	; (8002260 <moment42+0x2ec>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	3303      	adds	r3, #3
 80020e0:	3307      	adds	r3, #7
 80020e2:	08db      	lsrs	r3, r3, #3
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	ebad 0d03 	sub.w	sp, sp, r3
 80020ea:	466b      	mov	r3, sp
 80020ec:	3303      	adds	r3, #3
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	61fb      	str	r3, [r7, #28]
	float32_t m42[frameSize]; // in^4
 80020f4:	4b5a      	ldr	r3, [pc, #360]	; (8002260 <moment42+0x2ec>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	4b58      	ldr	r3, [pc, #352]	; (8002260 <moment42+0x2ec>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b299      	uxth	r1, r3
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f04f 0400 	mov.w	r4, #0
 800210e:	0154      	lsls	r4, r2, #5
 8002110:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002114:	014b      	lsls	r3, r1, #5
 8002116:	4b52      	ldr	r3, [pc, #328]	; (8002260 <moment42+0x2ec>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b299      	uxth	r1, r3
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	f04f 0400 	mov.w	r4, #0
 8002128:	0154      	lsls	r4, r2, #5
 800212a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800212e:	014b      	lsls	r3, r1, #5
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <moment42+0x2ec>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	3303      	adds	r3, #3
 8002138:	3307      	adds	r3, #7
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	ebad 0d03 	sub.w	sp, sp, r3
 8002142:	466b      	mov	r3, sp
 8002144:	3303      	adds	r3, #3
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	617b      	str	r3, [r7, #20]
	float32_t m42_real = 0.0f, m42_imag = 0.0f;
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m42_real_mean = 0.0f, m42_imag_mean = 0.0f;
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002164:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <moment42+0x2ec>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	461a      	mov	r2, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f007 fe2c 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <moment42+0x2ec>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f008 fc91 	bl	800aaa4 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002186:	4b36      	ldr	r3, [pc, #216]	; (8002260 <moment42+0x2ec>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f008 fb02 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_conj[0], &m31[0], frameSize);
 8002190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002192:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	4b32      	ldr	r3, [pc, #200]	; (8002260 <moment42+0x2ec>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	f008 fafb 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m31[0], &in_conj[0], &m42[0], frameSize);
 800219e:	69f8      	ldr	r0, [r7, #28]
 80021a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <moment42+0x2ec>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	f008 faf4 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
 80021b0:	e01b      	b.n	80021ea <moment42+0x276>
		m42_real += m42[i];
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80021c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m42_imag += m42[i+1];
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	3301      	adds	r3, #1
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80021dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	3302      	adds	r3, #2
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <moment42+0x2ec>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f2:	429a      	cmp	r2, r3
 80021f4:	dbdd      	blt.n	80021b2 <moment42+0x23e>
	}
	m42_real_mean = m42_real / frameSize;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <moment42+0x2ec>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002202:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220a:	edc7 7a04 	vstr	s15, [r7, #16]
	m42_imag_mean = m42_imag / frameSize;
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <moment42+0x2ec>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800221e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002222:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m42_real_mean*m42_real_mean + m42_imag_mean*m42_imag_mean);
 8002226:	ed97 7a04 	vldr	s14, [r7, #16]
 800222a:	edd7 7a04 	vldr	s15, [r7, #16]
 800222e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002232:	edd7 6a03 	vldr	s13, [r7, #12]
 8002236:	edd7 7a03 	vldr	s15, [r7, #12]
 800223a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002242:	eeb0 0a67 	vmov.f32	s0, s15
 8002246:	f009 f833 	bl	800b2b0 <sqrtf>
 800224a:	eef0 7a40 	vmov.f32	s15, s0
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	edc3 7a00 	vstr	s15, [r3]
 8002254:	46ad      	mov	sp, r5
}
 8002256:	bf00      	nop
 8002258:	3748      	adds	r7, #72	; 0x48
 800225a:	46bd      	mov	sp, r7
 800225c:	bdb0      	pop	{r4, r5, r7, pc}
 800225e:	bf00      	nop
 8002260:	0800eff8 	.word	0x0800eff8

08002264 <moment43>:

void moment43(float32_t in[], float32_t *out){
 8002264:	b5b0      	push	{r4, r5, r7, lr}
 8002266:	b092      	sub	sp, #72	; 0x48
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	466b      	mov	r3, sp
 8002270:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8002272:	4bb7      	ldr	r3, [pc, #732]	; (8002550 <moment43+0x2ec>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	3b01      	subs	r3, #1
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
 800227c:	4bb4      	ldr	r3, [pc, #720]	; (8002550 <moment43+0x2ec>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4619      	mov	r1, r3
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	f04f 0400 	mov.w	r4, #0
 8002290:	0154      	lsls	r4, r2, #5
 8002292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002296:	014b      	lsls	r3, r1, #5
 8002298:	4bad      	ldr	r3, [pc, #692]	; (8002550 <moment43+0x2ec>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	f04f 0400 	mov.w	r4, #0
 80022ac:	0154      	lsls	r4, r2, #5
 80022ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022b2:	014b      	lsls	r3, r1, #5
 80022b4:	4ba6      	ldr	r3, [pc, #664]	; (8002550 <moment43+0x2ec>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	3303      	adds	r3, #3
 80022bc:	3307      	adds	r3, #7
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	ebad 0d03 	sub.w	sp, sp, r3
 80022c6:	466b      	mov	r3, sp
 80022c8:	3303      	adds	r3, #3
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 80022d0:	4b9f      	ldr	r3, [pc, #636]	; (8002550 <moment43+0x2ec>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	3b01      	subs	r3, #1
 80022d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022da:	4b9d      	ldr	r3, [pc, #628]	; (8002550 <moment43+0x2ec>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4619      	mov	r1, r3
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	f04f 0400 	mov.w	r4, #0
 80022ee:	0154      	lsls	r4, r2, #5
 80022f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022f4:	014b      	lsls	r3, r1, #5
 80022f6:	4b96      	ldr	r3, [pc, #600]	; (8002550 <moment43+0x2ec>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4619      	mov	r1, r3
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	f04f 0400 	mov.w	r4, #0
 800230a:	0154      	lsls	r4, r2, #5
 800230c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002310:	014b      	lsls	r3, r1, #5
 8002312:	4b8f      	ldr	r3, [pc, #572]	; (8002550 <moment43+0x2ec>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	3303      	adds	r3, #3
 800231a:	3307      	adds	r3, #7
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	ebad 0d03 	sub.w	sp, sp, r3
 8002324:	466b      	mov	r3, sp
 8002326:	3303      	adds	r3, #3
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m21[frameSize*2]; // in^2
 800232e:	4b88      	ldr	r3, [pc, #544]	; (8002550 <moment43+0x2ec>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	3b01      	subs	r3, #1
 8002336:	647b      	str	r3, [r7, #68]	; 0x44
 8002338:	4b85      	ldr	r3, [pc, #532]	; (8002550 <moment43+0x2ec>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4619      	mov	r1, r3
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	f04f 0400 	mov.w	r4, #0
 800234c:	0154      	lsls	r4, r2, #5
 800234e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002352:	014b      	lsls	r3, r1, #5
 8002354:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <moment43+0x2ec>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	f04f 0400 	mov.w	r4, #0
 8002368:	0154      	lsls	r4, r2, #5
 800236a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800236e:	014b      	lsls	r3, r1, #5
 8002370:	4b77      	ldr	r3, [pc, #476]	; (8002550 <moment43+0x2ec>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	3303      	adds	r3, #3
 8002378:	3307      	adds	r3, #7
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	ebad 0d03 	sub.w	sp, sp, r3
 8002382:	466b      	mov	r3, sp
 8002384:	3303      	adds	r3, #3
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m32[frameSize]; // in^3
 800238c:	4b70      	ldr	r3, [pc, #448]	; (8002550 <moment43+0x2ec>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	3b01      	subs	r3, #1
 8002392:	623b      	str	r3, [r7, #32]
 8002394:	4b6e      	ldr	r3, [pc, #440]	; (8002550 <moment43+0x2ec>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b299      	uxth	r1, r3
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f04f 0400 	mov.w	r4, #0
 80023a6:	0154      	lsls	r4, r2, #5
 80023a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023ac:	014b      	lsls	r3, r1, #5
 80023ae:	4b68      	ldr	r3, [pc, #416]	; (8002550 <moment43+0x2ec>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b299      	uxth	r1, r3
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	0154      	lsls	r4, r2, #5
 80023c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023c6:	014b      	lsls	r3, r1, #5
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <moment43+0x2ec>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	3303      	adds	r3, #3
 80023d0:	3307      	adds	r3, #7
 80023d2:	08db      	lsrs	r3, r3, #3
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	ebad 0d03 	sub.w	sp, sp, r3
 80023da:	466b      	mov	r3, sp
 80023dc:	3303      	adds	r3, #3
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	61fb      	str	r3, [r7, #28]
	float32_t m43[frameSize]; // in^4
 80023e4:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <moment43+0x2ec>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <moment43+0x2ec>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b299      	uxth	r1, r3
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	f04f 0400 	mov.w	r4, #0
 80023fe:	0154      	lsls	r4, r2, #5
 8002400:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002404:	014b      	lsls	r3, r1, #5
 8002406:	4b52      	ldr	r3, [pc, #328]	; (8002550 <moment43+0x2ec>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b299      	uxth	r1, r3
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	f04f 0400 	mov.w	r4, #0
 8002418:	0154      	lsls	r4, r2, #5
 800241a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800241e:	014b      	lsls	r3, r1, #5
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <moment43+0x2ec>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	3303      	adds	r3, #3
 8002428:	3307      	adds	r3, #7
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	ebad 0d03 	sub.w	sp, sp, r3
 8002432:	466b      	mov	r3, sp
 8002434:	3303      	adds	r3, #3
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	617b      	str	r3, [r7, #20]
	float32_t m43_real = 0.0f, m43_imag = 0.0f;
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m43_real_mean = 0.0f, m43_imag_mean = 0.0f;
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002454:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <moment43+0x2ec>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	461a      	mov	r2, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f007 fcb4 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002464:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002466:	4b3a      	ldr	r3, [pc, #232]	; (8002550 <moment43+0x2ec>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f008 fb19 	bl	800aaa4 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_conj[0], &m21[0], frameSize);
 8002472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002476:	4b36      	ldr	r3, [pc, #216]	; (8002550 <moment43+0x2ec>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f008 f98a 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m21[0], &in_conj[0], &m32[0], frameSize);
 8002480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	4b32      	ldr	r3, [pc, #200]	; (8002550 <moment43+0x2ec>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	f008 f983 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m32[0], &in_conj[0], &m43[0], frameSize);
 800248e:	69f8      	ldr	r0, [r7, #28]
 8002490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <moment43+0x2ec>)
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	f008 f97c 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 800249c:	2300      	movs	r3, #0
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
 80024a0:	e01b      	b.n	80024da <moment43+0x276>
		m43_real += m43[i];
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80024b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m43_imag += m43[i+1];
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	3301      	adds	r3, #1
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	3302      	adds	r3, #2
 80024d8:	633b      	str	r3, [r7, #48]	; 0x30
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <moment43+0x2ec>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e2:	429a      	cmp	r2, r3
 80024e4:	dbdd      	blt.n	80024a2 <moment43+0x23e>
	}
	m43_real_mean = m43_real / frameSize;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <moment43+0x2ec>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80024f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fa:	edc7 7a04 	vstr	s15, [r7, #16]
	m43_imag_mean = m43_imag / frameSize;
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <moment43+0x2ec>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800250e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002512:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m43_real_mean*m43_real_mean + m43_imag_mean*m43_imag_mean);
 8002516:	ed97 7a04 	vldr	s14, [r7, #16]
 800251a:	edd7 7a04 	vldr	s15, [r7, #16]
 800251e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002522:	edd7 6a03 	vldr	s13, [r7, #12]
 8002526:	edd7 7a03 	vldr	s15, [r7, #12]
 800252a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002532:	eeb0 0a67 	vmov.f32	s0, s15
 8002536:	f008 febb 	bl	800b2b0 <sqrtf>
 800253a:	eef0 7a40 	vmov.f32	s15, s0
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	edc3 7a00 	vstr	s15, [r3]
 8002544:	46ad      	mov	sp, r5
}
 8002546:	bf00      	nop
 8002548:	3748      	adds	r7, #72	; 0x48
 800254a:	46bd      	mov	sp, r7
 800254c:	bdb0      	pop	{r4, r5, r7, pc}
 800254e:	bf00      	nop
 8002550:	0800eff8 	.word	0x0800eff8

08002554 <moment60>:

void moment60(float32_t in[], float32_t *out){
 8002554:	b5b0      	push	{r4, r5, r7, lr}
 8002556:	b094      	sub	sp, #80	; 0x50
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	466b      	mov	r3, sp
 8002560:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8002562:	4ba4      	ldr	r3, [pc, #656]	; (80027f4 <moment60+0x2a0>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	3b01      	subs	r3, #1
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
 800256c:	4ba1      	ldr	r3, [pc, #644]	; (80027f4 <moment60+0x2a0>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4619      	mov	r1, r3
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	f04f 0400 	mov.w	r4, #0
 8002580:	0154      	lsls	r4, r2, #5
 8002582:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002586:	014b      	lsls	r3, r1, #5
 8002588:	4b9a      	ldr	r3, [pc, #616]	; (80027f4 <moment60+0x2a0>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	f04f 0400 	mov.w	r4, #0
 800259c:	0154      	lsls	r4, r2, #5
 800259e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025a2:	014b      	lsls	r3, r1, #5
 80025a4:	4b93      	ldr	r3, [pc, #588]	; (80027f4 <moment60+0x2a0>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	3303      	adds	r3, #3
 80025ac:	3307      	adds	r3, #7
 80025ae:	08db      	lsrs	r3, r3, #3
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	ebad 0d03 	sub.w	sp, sp, r3
 80025b6:	466b      	mov	r3, sp
 80025b8:	3303      	adds	r3, #3
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t m20[frameSize*2]; // in^2
 80025c0:	4b8c      	ldr	r3, [pc, #560]	; (80027f4 <moment60+0x2a0>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	3b01      	subs	r3, #1
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ca:	4b8a      	ldr	r3, [pc, #552]	; (80027f4 <moment60+0x2a0>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4619      	mov	r1, r3
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	f04f 0400 	mov.w	r4, #0
 80025de:	0154      	lsls	r4, r2, #5
 80025e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025e4:	014b      	lsls	r3, r1, #5
 80025e6:	4b83      	ldr	r3, [pc, #524]	; (80027f4 <moment60+0x2a0>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4619      	mov	r1, r3
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	f04f 0400 	mov.w	r4, #0
 80025fa:	0154      	lsls	r4, r2, #5
 80025fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002600:	014b      	lsls	r3, r1, #5
 8002602:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <moment60+0x2a0>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	3303      	adds	r3, #3
 800260a:	3307      	adds	r3, #7
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	ebad 0d03 	sub.w	sp, sp, r3
 8002614:	466b      	mov	r3, sp
 8002616:	3303      	adds	r3, #3
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m30[frameSize]; // in^3
 800261e:	4b75      	ldr	r3, [pc, #468]	; (80027f4 <moment60+0x2a0>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	3b01      	subs	r3, #1
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
 8002626:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <moment60+0x2a0>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b299      	uxth	r1, r3
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	f04f 0400 	mov.w	r4, #0
 8002638:	0154      	lsls	r4, r2, #5
 800263a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800263e:	014b      	lsls	r3, r1, #5
 8002640:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <moment60+0x2a0>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b299      	uxth	r1, r3
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	f04f 0400 	mov.w	r4, #0
 8002652:	0154      	lsls	r4, r2, #5
 8002654:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002658:	014b      	lsls	r3, r1, #5
 800265a:	4b66      	ldr	r3, [pc, #408]	; (80027f4 <moment60+0x2a0>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	3303      	adds	r3, #3
 8002662:	3307      	adds	r3, #7
 8002664:	08db      	lsrs	r3, r3, #3
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	ebad 0d03 	sub.w	sp, sp, r3
 800266c:	466b      	mov	r3, sp
 800266e:	3303      	adds	r3, #3
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m40[frameSize]; // in^4
 8002676:	4b5f      	ldr	r3, [pc, #380]	; (80027f4 <moment60+0x2a0>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800267e:	4b5d      	ldr	r3, [pc, #372]	; (80027f4 <moment60+0x2a0>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b299      	uxth	r1, r3
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	f04f 0400 	mov.w	r4, #0
 8002690:	0154      	lsls	r4, r2, #5
 8002692:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002696:	014b      	lsls	r3, r1, #5
 8002698:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <moment60+0x2a0>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b299      	uxth	r1, r3
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	f04f 0400 	mov.w	r4, #0
 80026aa:	0154      	lsls	r4, r2, #5
 80026ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026b0:	014b      	lsls	r3, r1, #5
 80026b2:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <moment60+0x2a0>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	3303      	adds	r3, #3
 80026ba:	3307      	adds	r3, #7
 80026bc:	08db      	lsrs	r3, r3, #3
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	ebad 0d03 	sub.w	sp, sp, r3
 80026c4:	466b      	mov	r3, sp
 80026c6:	3303      	adds	r3, #3
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m50[frameSize]; // in^5
 80026ce:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <moment60+0x2a0>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	623b      	str	r3, [r7, #32]
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <moment60+0x2a0>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b299      	uxth	r1, r3
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	f04f 0400 	mov.w	r4, #0
 80026e8:	0154      	lsls	r4, r2, #5
 80026ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ee:	014b      	lsls	r3, r1, #5
 80026f0:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <moment60+0x2a0>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b299      	uxth	r1, r3
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	f04f 0400 	mov.w	r4, #0
 8002702:	0154      	lsls	r4, r2, #5
 8002704:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002708:	014b      	lsls	r3, r1, #5
 800270a:	4b3a      	ldr	r3, [pc, #232]	; (80027f4 <moment60+0x2a0>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	3303      	adds	r3, #3
 8002712:	3307      	adds	r3, #7
 8002714:	08db      	lsrs	r3, r3, #3
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	ebad 0d03 	sub.w	sp, sp, r3
 800271c:	466b      	mov	r3, sp
 800271e:	3303      	adds	r3, #3
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	61fb      	str	r3, [r7, #28]
	float32_t m60[frameSize]; // in^6
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <moment60+0x2a0>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	3b01      	subs	r3, #1
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <moment60+0x2a0>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b299      	uxth	r1, r3
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	f04f 0400 	mov.w	r4, #0
 8002740:	0154      	lsls	r4, r2, #5
 8002742:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002746:	014b      	lsls	r3, r1, #5
 8002748:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <moment60+0x2a0>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	b299      	uxth	r1, r3
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	0154      	lsls	r4, r2, #5
 800275c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002760:	014b      	lsls	r3, r1, #5
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <moment60+0x2a0>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	3303      	adds	r3, #3
 800276a:	3307      	adds	r3, #7
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	ebad 0d03 	sub.w	sp, sp, r3
 8002774:	466b      	mov	r3, sp
 8002776:	3303      	adds	r3, #3
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	617b      	str	r3, [r7, #20]
	float32_t m60_real = 0.0f, m60_imag = 0.0f;
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m60_real_mean = 0.0f, m60_imag_mean = 0.0f;
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <moment60+0x2a0>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	461a      	mov	r2, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f007 fb13 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 80027a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <moment60+0x2a0>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f007 fff0 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 80027b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <moment60+0x2a0>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f007 ffe9 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 80027c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80027c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <moment60+0x2a0>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	f007 ffe2 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 80027d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <moment60+0x2a0>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	f007 ffdb 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_cp[0], &m60[0], frameSize);
 80027de:	69f8      	ldr	r0, [r7, #28]
 80027e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <moment60+0x2a0>)
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	f007 ffd4 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 80027ec:	2300      	movs	r3, #0
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
 80027f0:	e01e      	b.n	8002830 <moment60+0x2dc>
 80027f2:	bf00      	nop
 80027f4:	0800eff8 	.word	0x0800eff8
		m60_real += m60[i];
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m60_imag += m60[i+1];
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	3301      	adds	r3, #1
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	3302      	adds	r3, #2
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
 8002830:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <moment60+0x350>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002838:	429a      	cmp	r2, r3
 800283a:	dbdd      	blt.n	80027f8 <moment60+0x2a4>
	}
	m60_real_mean = m60_real / frameSize;
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <moment60+0x350>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002848:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800284c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002850:	edc7 7a04 	vstr	s15, [r7, #16]
	m60_imag_mean = m60_imag / frameSize;
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <moment60+0x350>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002860:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002868:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m60_real_mean*m60_real_mean + m60_imag_mean*m60_imag_mean);
 800286c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002870:	edd7 7a04 	vldr	s15, [r7, #16]
 8002874:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002878:	edd7 6a03 	vldr	s13, [r7, #12]
 800287c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002888:	eeb0 0a67 	vmov.f32	s0, s15
 800288c:	f008 fd10 	bl	800b2b0 <sqrtf>
 8002890:	eef0 7a40 	vmov.f32	s15, s0
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	edc3 7a00 	vstr	s15, [r3]
 800289a:	46ad      	mov	sp, r5
}
 800289c:	bf00      	nop
 800289e:	3750      	adds	r7, #80	; 0x50
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bdb0      	pop	{r4, r5, r7, pc}
 80028a4:	0800eff8 	.word	0x0800eff8

080028a8 <moment61>:

void moment61(float32_t in[], float32_t *out){
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	b096      	sub	sp, #88	; 0x58
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	466b      	mov	r3, sp
 80028b4:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 80028b6:	4bbf      	ldr	r3, [pc, #764]	; (8002bb4 <moment61+0x30c>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
 80028c0:	4bbc      	ldr	r3, [pc, #752]	; (8002bb4 <moment61+0x30c>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4619      	mov	r1, r3
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	0154      	lsls	r4, r2, #5
 80028d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028da:	014b      	lsls	r3, r1, #5
 80028dc:	4bb5      	ldr	r3, [pc, #724]	; (8002bb4 <moment61+0x30c>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4619      	mov	r1, r3
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	f04f 0400 	mov.w	r4, #0
 80028f0:	0154      	lsls	r4, r2, #5
 80028f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028f6:	014b      	lsls	r3, r1, #5
 80028f8:	4bae      	ldr	r3, [pc, #696]	; (8002bb4 <moment61+0x30c>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	3303      	adds	r3, #3
 8002900:	3307      	adds	r3, #7
 8002902:	08db      	lsrs	r3, r3, #3
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	ebad 0d03 	sub.w	sp, sp, r3
 800290a:	466b      	mov	r3, sp
 800290c:	3303      	adds	r3, #3
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8002914:	4ba7      	ldr	r3, [pc, #668]	; (8002bb4 <moment61+0x30c>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	3b01      	subs	r3, #1
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800291e:	4ba5      	ldr	r3, [pc, #660]	; (8002bb4 <moment61+0x30c>)
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4619      	mov	r1, r3
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	f04f 0400 	mov.w	r4, #0
 8002932:	0154      	lsls	r4, r2, #5
 8002934:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002938:	014b      	lsls	r3, r1, #5
 800293a:	4b9e      	ldr	r3, [pc, #632]	; (8002bb4 <moment61+0x30c>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4619      	mov	r1, r3
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	f04f 0400 	mov.w	r4, #0
 800294e:	0154      	lsls	r4, r2, #5
 8002950:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002954:	014b      	lsls	r3, r1, #5
 8002956:	4b97      	ldr	r3, [pc, #604]	; (8002bb4 <moment61+0x30c>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	3303      	adds	r3, #3
 800295e:	3307      	adds	r3, #7
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	ebad 0d03 	sub.w	sp, sp, r3
 8002968:	466b      	mov	r3, sp
 800296a:	3303      	adds	r3, #3
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 8002972:	4b90      	ldr	r3, [pc, #576]	; (8002bb4 <moment61+0x30c>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	3b01      	subs	r3, #1
 800297a:	647b      	str	r3, [r7, #68]	; 0x44
 800297c:	4b8d      	ldr	r3, [pc, #564]	; (8002bb4 <moment61+0x30c>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4619      	mov	r1, r3
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	f04f 0400 	mov.w	r4, #0
 8002990:	0154      	lsls	r4, r2, #5
 8002992:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002996:	014b      	lsls	r3, r1, #5
 8002998:	4b86      	ldr	r3, [pc, #536]	; (8002bb4 <moment61+0x30c>)
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	f04f 0400 	mov.w	r4, #0
 80029ac:	0154      	lsls	r4, r2, #5
 80029ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029b2:	014b      	lsls	r3, r1, #5
 80029b4:	4b7f      	ldr	r3, [pc, #508]	; (8002bb4 <moment61+0x30c>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	3303      	adds	r3, #3
 80029bc:	3307      	adds	r3, #7
 80029be:	08db      	lsrs	r3, r3, #3
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	ebad 0d03 	sub.w	sp, sp, r3
 80029c6:	466b      	mov	r3, sp
 80029c8:	3303      	adds	r3, #3
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m30[frameSize]; // in^3
 80029d0:	4b78      	ldr	r3, [pc, #480]	; (8002bb4 <moment61+0x30c>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d8:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <moment61+0x30c>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b299      	uxth	r1, r3
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f04f 0400 	mov.w	r4, #0
 80029ea:	0154      	lsls	r4, r2, #5
 80029ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f0:	014b      	lsls	r3, r1, #5
 80029f2:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <moment61+0x30c>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b299      	uxth	r1, r3
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	f04f 0400 	mov.w	r4, #0
 8002a04:	0154      	lsls	r4, r2, #5
 8002a06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a0a:	014b      	lsls	r3, r1, #5
 8002a0c:	4b69      	ldr	r3, [pc, #420]	; (8002bb4 <moment61+0x30c>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	3303      	adds	r3, #3
 8002a14:	3307      	adds	r3, #7
 8002a16:	08db      	lsrs	r3, r3, #3
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	ebad 0d03 	sub.w	sp, sp, r3
 8002a1e:	466b      	mov	r3, sp
 8002a20:	3303      	adds	r3, #3
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	653b      	str	r3, [r7, #80]	; 0x50
	float32_t m40[frameSize]; // in^4
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <moment61+0x30c>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a30:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <moment61+0x30c>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b299      	uxth	r1, r3
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f04f 0400 	mov.w	r4, #0
 8002a42:	0154      	lsls	r4, r2, #5
 8002a44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a48:	014b      	lsls	r3, r1, #5
 8002a4a:	4b5a      	ldr	r3, [pc, #360]	; (8002bb4 <moment61+0x30c>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b299      	uxth	r1, r3
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	f04f 0400 	mov.w	r4, #0
 8002a5c:	0154      	lsls	r4, r2, #5
 8002a5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a62:	014b      	lsls	r3, r1, #5
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <moment61+0x30c>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	3303      	adds	r3, #3
 8002a6c:	3307      	adds	r3, #7
 8002a6e:	08db      	lsrs	r3, r3, #3
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	ebad 0d03 	sub.w	sp, sp, r3
 8002a76:	466b      	mov	r3, sp
 8002a78:	3303      	adds	r3, #3
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m50[frameSize]; // in^5
 8002a80:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <moment61+0x30c>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	623b      	str	r3, [r7, #32]
 8002a88:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <moment61+0x30c>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b299      	uxth	r1, r3
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	f04f 0400 	mov.w	r4, #0
 8002a9a:	0154      	lsls	r4, r2, #5
 8002a9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aa0:	014b      	lsls	r3, r1, #5
 8002aa2:	4b44      	ldr	r3, [pc, #272]	; (8002bb4 <moment61+0x30c>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b299      	uxth	r1, r3
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	f04f 0400 	mov.w	r4, #0
 8002ab4:	0154      	lsls	r4, r2, #5
 8002ab6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aba:	014b      	lsls	r3, r1, #5
 8002abc:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <moment61+0x30c>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	3303      	adds	r3, #3
 8002ac4:	3307      	adds	r3, #7
 8002ac6:	08db      	lsrs	r3, r3, #3
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	ebad 0d03 	sub.w	sp, sp, r3
 8002ace:	466b      	mov	r3, sp
 8002ad0:	3303      	adds	r3, #3
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	61fb      	str	r3, [r7, #28]
	float32_t m61[frameSize]; // in^6
 8002ad8:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <moment61+0x30c>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <moment61+0x30c>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	f04f 0400 	mov.w	r4, #0
 8002af2:	0154      	lsls	r4, r2, #5
 8002af4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002af8:	014b      	lsls	r3, r1, #5
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <moment61+0x30c>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b299      	uxth	r1, r3
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	f04f 0400 	mov.w	r4, #0
 8002b0c:	0154      	lsls	r4, r2, #5
 8002b0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b12:	014b      	lsls	r3, r1, #5
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <moment61+0x30c>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	3303      	adds	r3, #3
 8002b1c:	3307      	adds	r3, #7
 8002b1e:	08db      	lsrs	r3, r3, #3
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	ebad 0d03 	sub.w	sp, sp, r3
 8002b26:	466b      	mov	r3, sp
 8002b28:	3303      	adds	r3, #3
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	617b      	str	r3, [r7, #20]
	float32_t m61_real = 0.0f, m61_imag = 0.0f;
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m61_real_mean = 0.0f, m61_imag_mean = 0.0f;
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002b48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <moment61+0x30c>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	461a      	mov	r2, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f007 f93a 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002b58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <moment61+0x30c>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f007 ff9f 	bl	800aaa4 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <moment61+0x30c>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f007 fe10 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002b74:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <moment61+0x30c>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	f007 fe09 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8002b82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <moment61+0x30c>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	f007 fe02 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_cp[0], &m50[0], frameSize);
 8002b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <moment61+0x30c>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	f007 fdfb 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m50[0], &in_conj[0], &m61[0], frameSize);
 8002b9e:	69f8      	ldr	r0, [r7, #28]
 8002ba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <moment61+0x30c>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	f007 fdf4 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002bac:	2300      	movs	r3, #0
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb0:	e01e      	b.n	8002bf0 <moment61+0x348>
 8002bb2:	bf00      	nop
 8002bb4:	0800eff8 	.word	0x0800eff8
		m61_real += m61[i];
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bcc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m61_imag += m61[i+1];
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	3302      	adds	r3, #2
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf0:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <moment61+0x3bc>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	dbdd      	blt.n	8002bb8 <moment61+0x310>
	}
	m61_real_mean = m61_real / frameSize;
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <moment61+0x3bc>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c10:	edc7 7a04 	vstr	s15, [r7, #16]
	m61_imag_mean = m61_imag / frameSize;
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <moment61+0x3bc>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c20:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c28:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m61_real_mean*m61_real_mean + m61_imag_mean*m61_imag_mean);
 8002c2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c30:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c38:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c48:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4c:	f008 fb30 	bl	800b2b0 <sqrtf>
 8002c50:	eef0 7a40 	vmov.f32	s15, s0
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	edc3 7a00 	vstr	s15, [r3]
 8002c5a:	46ad      	mov	sp, r5
}
 8002c5c:	bf00      	nop
 8002c5e:	3758      	adds	r7, #88	; 0x58
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bdb0      	pop	{r4, r5, r7, pc}
 8002c64:	0800eff8 	.word	0x0800eff8

08002c68 <moment62>:

void moment62(float32_t in[], float32_t *out){
 8002c68:	b5b0      	push	{r4, r5, r7, lr}
 8002c6a:	b096      	sub	sp, #88	; 0x58
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	466b      	mov	r3, sp
 8002c74:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8002c76:	4bbf      	ldr	r3, [pc, #764]	; (8002f74 <moment62+0x30c>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c80:	4bbc      	ldr	r3, [pc, #752]	; (8002f74 <moment62+0x30c>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4619      	mov	r1, r3
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f04f 0400 	mov.w	r4, #0
 8002c94:	0154      	lsls	r4, r2, #5
 8002c96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c9a:	014b      	lsls	r3, r1, #5
 8002c9c:	4bb5      	ldr	r3, [pc, #724]	; (8002f74 <moment62+0x30c>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	f04f 0400 	mov.w	r4, #0
 8002cb0:	0154      	lsls	r4, r2, #5
 8002cb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cb6:	014b      	lsls	r3, r1, #5
 8002cb8:	4bae      	ldr	r3, [pc, #696]	; (8002f74 <moment62+0x30c>)
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	3303      	adds	r3, #3
 8002cc0:	3307      	adds	r3, #7
 8002cc2:	08db      	lsrs	r3, r3, #3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	ebad 0d03 	sub.w	sp, sp, r3
 8002cca:	466b      	mov	r3, sp
 8002ccc:	3303      	adds	r3, #3
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8002cd4:	4ba7      	ldr	r3, [pc, #668]	; (8002f74 <moment62+0x30c>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cde:	4ba5      	ldr	r3, [pc, #660]	; (8002f74 <moment62+0x30c>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	f04f 0400 	mov.w	r4, #0
 8002cf2:	0154      	lsls	r4, r2, #5
 8002cf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cf8:	014b      	lsls	r3, r1, #5
 8002cfa:	4b9e      	ldr	r3, [pc, #632]	; (8002f74 <moment62+0x30c>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4619      	mov	r1, r3
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	f04f 0400 	mov.w	r4, #0
 8002d0e:	0154      	lsls	r4, r2, #5
 8002d10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d14:	014b      	lsls	r3, r1, #5
 8002d16:	4b97      	ldr	r3, [pc, #604]	; (8002f74 <moment62+0x30c>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	3303      	adds	r3, #3
 8002d1e:	3307      	adds	r3, #7
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	ebad 0d03 	sub.w	sp, sp, r3
 8002d28:	466b      	mov	r3, sp
 8002d2a:	3303      	adds	r3, #3
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 8002d32:	4b90      	ldr	r3, [pc, #576]	; (8002f74 <moment62+0x30c>)
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d3c:	4b8d      	ldr	r3, [pc, #564]	; (8002f74 <moment62+0x30c>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	f04f 0400 	mov.w	r4, #0
 8002d50:	0154      	lsls	r4, r2, #5
 8002d52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d56:	014b      	lsls	r3, r1, #5
 8002d58:	4b86      	ldr	r3, [pc, #536]	; (8002f74 <moment62+0x30c>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	f04f 0400 	mov.w	r4, #0
 8002d6c:	0154      	lsls	r4, r2, #5
 8002d6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d72:	014b      	lsls	r3, r1, #5
 8002d74:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <moment62+0x30c>)
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	3303      	adds	r3, #3
 8002d7c:	3307      	adds	r3, #7
 8002d7e:	08db      	lsrs	r3, r3, #3
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	ebad 0d03 	sub.w	sp, sp, r3
 8002d86:	466b      	mov	r3, sp
 8002d88:	3303      	adds	r3, #3
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m30[frameSize]; // in^3
 8002d90:	4b78      	ldr	r3, [pc, #480]	; (8002f74 <moment62+0x30c>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d98:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <moment62+0x30c>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	b299      	uxth	r1, r3
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	f04f 0400 	mov.w	r4, #0
 8002daa:	0154      	lsls	r4, r2, #5
 8002dac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002db0:	014b      	lsls	r3, r1, #5
 8002db2:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <moment62+0x30c>)
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b299      	uxth	r1, r3
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	f04f 0400 	mov.w	r4, #0
 8002dc4:	0154      	lsls	r4, r2, #5
 8002dc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dca:	014b      	lsls	r3, r1, #5
 8002dcc:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <moment62+0x30c>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	3303      	adds	r3, #3
 8002dd4:	3307      	adds	r3, #7
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	ebad 0d03 	sub.w	sp, sp, r3
 8002dde:	466b      	mov	r3, sp
 8002de0:	3303      	adds	r3, #3
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	653b      	str	r3, [r7, #80]	; 0x50
	float32_t m40[frameSize]; // in^4
 8002de8:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <moment62+0x30c>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	657b      	str	r3, [r7, #84]	; 0x54
 8002df0:	4b60      	ldr	r3, [pc, #384]	; (8002f74 <moment62+0x30c>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b299      	uxth	r1, r3
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	f04f 0400 	mov.w	r4, #0
 8002e02:	0154      	lsls	r4, r2, #5
 8002e04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e08:	014b      	lsls	r3, r1, #5
 8002e0a:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <moment62+0x30c>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b299      	uxth	r1, r3
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	f04f 0400 	mov.w	r4, #0
 8002e1c:	0154      	lsls	r4, r2, #5
 8002e1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e22:	014b      	lsls	r3, r1, #5
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <moment62+0x30c>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	3303      	adds	r3, #3
 8002e2c:	3307      	adds	r3, #7
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	ebad 0d03 	sub.w	sp, sp, r3
 8002e36:	466b      	mov	r3, sp
 8002e38:	3303      	adds	r3, #3
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m51[frameSize]; // in^5
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <moment62+0x30c>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <moment62+0x30c>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	f04f 0400 	mov.w	r4, #0
 8002e5a:	0154      	lsls	r4, r2, #5
 8002e5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e60:	014b      	lsls	r3, r1, #5
 8002e62:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <moment62+0x30c>)
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b299      	uxth	r1, r3
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	0154      	lsls	r4, r2, #5
 8002e76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e7a:	014b      	lsls	r3, r1, #5
 8002e7c:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <moment62+0x30c>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	3303      	adds	r3, #3
 8002e84:	3307      	adds	r3, #7
 8002e86:	08db      	lsrs	r3, r3, #3
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	ebad 0d03 	sub.w	sp, sp, r3
 8002e8e:	466b      	mov	r3, sp
 8002e90:	3303      	adds	r3, #3
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	61fb      	str	r3, [r7, #28]
	float32_t m62[frameSize]; // in^6
 8002e98:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <moment62+0x30c>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <moment62+0x30c>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	b299      	uxth	r1, r3
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	f04f 0400 	mov.w	r4, #0
 8002eb2:	0154      	lsls	r4, r2, #5
 8002eb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002eb8:	014b      	lsls	r3, r1, #5
 8002eba:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <moment62+0x30c>)
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b299      	uxth	r1, r3
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f04f 0400 	mov.w	r4, #0
 8002ecc:	0154      	lsls	r4, r2, #5
 8002ece:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ed2:	014b      	lsls	r3, r1, #5
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <moment62+0x30c>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	3303      	adds	r3, #3
 8002edc:	3307      	adds	r3, #7
 8002ede:	08db      	lsrs	r3, r3, #3
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	ebad 0d03 	sub.w	sp, sp, r3
 8002ee6:	466b      	mov	r3, sp
 8002ee8:	3303      	adds	r3, #3
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	617b      	str	r3, [r7, #20]
	float32_t m62_real = 0.0f, m62_imag = 0.0f;
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m62_real_mean = 0.0f, m62_imag_mean = 0.0f;
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 8002f08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <moment62+0x30c>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	461a      	mov	r2, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f006 ff5a 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 8002f18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <moment62+0x30c>)
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f007 fdbf 	bl	800aaa4 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 8002f26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <moment62+0x30c>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f007 fc30 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 8002f34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <moment62+0x30c>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	f007 fc29 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_cp[0], &m40[0], frameSize);
 8002f42:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <moment62+0x30c>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	f007 fc22 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m40[0], &in_conj[0], &m51[0], frameSize);
 8002f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <moment62+0x30c>)
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	f007 fc1b 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m51[0], &in_conj[0], &m62[0], frameSize);
 8002f5e:	69f8      	ldr	r0, [r7, #28]
 8002f60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <moment62+0x30c>)
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	f007 fc14 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f70:	e01e      	b.n	8002fb0 <moment62+0x348>
 8002f72:	bf00      	nop
 8002f74:	0800eff8 	.word	0x0800eff8
		m62_real += m62[i];
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m62_imag += m62[i+1];
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	3301      	adds	r3, #1
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	edd3 7a00 	vldr	s15, [r3]
 8002f9e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	3302      	adds	r3, #2
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <moment62+0x3bc>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	dbdd      	blt.n	8002f78 <moment62+0x310>
	}
	m62_real_mean = m62_real / frameSize;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <moment62+0x3bc>)
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fd0:	edc7 7a04 	vstr	s15, [r7, #16]
	m62_imag_mean = m62_imag / frameSize;
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <moment62+0x3bc>)
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe8:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m62_real_mean*m62_real_mean + m62_imag_mean*m62_imag_mean);
 8002fec:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ff0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ff8:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003008:	eeb0 0a67 	vmov.f32	s0, s15
 800300c:	f008 f950 	bl	800b2b0 <sqrtf>
 8003010:	eef0 7a40 	vmov.f32	s15, s0
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	edc3 7a00 	vstr	s15, [r3]
 800301a:	46ad      	mov	sp, r5
}
 800301c:	bf00      	nop
 800301e:	3758      	adds	r7, #88	; 0x58
 8003020:	46bd      	mov	sp, r7
 8003022:	bdb0      	pop	{r4, r5, r7, pc}
 8003024:	0800eff8 	.word	0x0800eff8

08003028 <moment63>:

void moment63(float32_t in[], float32_t *out){
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b096      	sub	sp, #88	; 0x58
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	466b      	mov	r3, sp
 8003034:	461d      	mov	r5, r3
	float32_t in_cp[frameSize*2];
 8003036:	4bbf      	ldr	r3, [pc, #764]	; (8003334 <moment63+0x30c>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	3b01      	subs	r3, #1
 800303e:	637b      	str	r3, [r7, #52]	; 0x34
 8003040:	4bbc      	ldr	r3, [pc, #752]	; (8003334 <moment63+0x30c>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4619      	mov	r1, r3
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	f04f 0400 	mov.w	r4, #0
 8003054:	0154      	lsls	r4, r2, #5
 8003056:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800305a:	014b      	lsls	r3, r1, #5
 800305c:	4bb5      	ldr	r3, [pc, #724]	; (8003334 <moment63+0x30c>)
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4619      	mov	r1, r3
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	0154      	lsls	r4, r2, #5
 8003072:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003076:	014b      	lsls	r3, r1, #5
 8003078:	4bae      	ldr	r3, [pc, #696]	; (8003334 <moment63+0x30c>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	3303      	adds	r3, #3
 8003080:	3307      	adds	r3, #7
 8003082:	08db      	lsrs	r3, r3, #3
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	ebad 0d03 	sub.w	sp, sp, r3
 800308a:	466b      	mov	r3, sp
 800308c:	3303      	adds	r3, #3
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
	float32_t in_conj[frameSize*2];
 8003094:	4ba7      	ldr	r3, [pc, #668]	; (8003334 <moment63+0x30c>)
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309e:	4ba5      	ldr	r3, [pc, #660]	; (8003334 <moment63+0x30c>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4619      	mov	r1, r3
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f04f 0400 	mov.w	r4, #0
 80030b2:	0154      	lsls	r4, r2, #5
 80030b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030b8:	014b      	lsls	r3, r1, #5
 80030ba:	4b9e      	ldr	r3, [pc, #632]	; (8003334 <moment63+0x30c>)
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4619      	mov	r1, r3
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	f04f 0400 	mov.w	r4, #0
 80030ce:	0154      	lsls	r4, r2, #5
 80030d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030d4:	014b      	lsls	r3, r1, #5
 80030d6:	4b97      	ldr	r3, [pc, #604]	; (8003334 <moment63+0x30c>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	3303      	adds	r3, #3
 80030de:	3307      	adds	r3, #7
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	ebad 0d03 	sub.w	sp, sp, r3
 80030e8:	466b      	mov	r3, sp
 80030ea:	3303      	adds	r3, #3
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t m20[frameSize*2]; // in^2
 80030f2:	4b90      	ldr	r3, [pc, #576]	; (8003334 <moment63+0x30c>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	3b01      	subs	r3, #1
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
 80030fc:	4b8d      	ldr	r3, [pc, #564]	; (8003334 <moment63+0x30c>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4619      	mov	r1, r3
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	0154      	lsls	r4, r2, #5
 8003112:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003116:	014b      	lsls	r3, r1, #5
 8003118:	4b86      	ldr	r3, [pc, #536]	; (8003334 <moment63+0x30c>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	0154      	lsls	r4, r2, #5
 800312e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003132:	014b      	lsls	r3, r1, #5
 8003134:	4b7f      	ldr	r3, [pc, #508]	; (8003334 <moment63+0x30c>)
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	3303      	adds	r3, #3
 800313c:	3307      	adds	r3, #7
 800313e:	08db      	lsrs	r3, r3, #3
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	ebad 0d03 	sub.w	sp, sp, r3
 8003146:	466b      	mov	r3, sp
 8003148:	3303      	adds	r3, #3
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t m30[frameSize]; // in^3
 8003150:	4b78      	ldr	r3, [pc, #480]	; (8003334 <moment63+0x30c>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	3b01      	subs	r3, #1
 8003156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003158:	4b76      	ldr	r3, [pc, #472]	; (8003334 <moment63+0x30c>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b299      	uxth	r1, r3
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	f04f 0400 	mov.w	r4, #0
 800316a:	0154      	lsls	r4, r2, #5
 800316c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003170:	014b      	lsls	r3, r1, #5
 8003172:	4b70      	ldr	r3, [pc, #448]	; (8003334 <moment63+0x30c>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b299      	uxth	r1, r3
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f04f 0400 	mov.w	r4, #0
 8003184:	0154      	lsls	r4, r2, #5
 8003186:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800318a:	014b      	lsls	r3, r1, #5
 800318c:	4b69      	ldr	r3, [pc, #420]	; (8003334 <moment63+0x30c>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	3303      	adds	r3, #3
 8003194:	3307      	adds	r3, #7
 8003196:	08db      	lsrs	r3, r3, #3
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	ebad 0d03 	sub.w	sp, sp, r3
 800319e:	466b      	mov	r3, sp
 80031a0:	3303      	adds	r3, #3
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	653b      	str	r3, [r7, #80]	; 0x50
	float32_t m41[frameSize]; // in^4
 80031a8:	4b62      	ldr	r3, [pc, #392]	; (8003334 <moment63+0x30c>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	657b      	str	r3, [r7, #84]	; 0x54
 80031b0:	4b60      	ldr	r3, [pc, #384]	; (8003334 <moment63+0x30c>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b299      	uxth	r1, r3
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	f04f 0400 	mov.w	r4, #0
 80031c2:	0154      	lsls	r4, r2, #5
 80031c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031c8:	014b      	lsls	r3, r1, #5
 80031ca:	4b5a      	ldr	r3, [pc, #360]	; (8003334 <moment63+0x30c>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b299      	uxth	r1, r3
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	f04f 0400 	mov.w	r4, #0
 80031dc:	0154      	lsls	r4, r2, #5
 80031de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031e2:	014b      	lsls	r3, r1, #5
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <moment63+0x30c>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	3303      	adds	r3, #3
 80031ec:	3307      	adds	r3, #7
 80031ee:	08db      	lsrs	r3, r3, #3
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	ebad 0d03 	sub.w	sp, sp, r3
 80031f6:	466b      	mov	r3, sp
 80031f8:	3303      	adds	r3, #3
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t m52[frameSize]; // in^5
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <moment63+0x30c>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	3b01      	subs	r3, #1
 8003206:	623b      	str	r3, [r7, #32]
 8003208:	4b4a      	ldr	r3, [pc, #296]	; (8003334 <moment63+0x30c>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b299      	uxth	r1, r3
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f04f 0400 	mov.w	r4, #0
 800321a:	0154      	lsls	r4, r2, #5
 800321c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003220:	014b      	lsls	r3, r1, #5
 8003222:	4b44      	ldr	r3, [pc, #272]	; (8003334 <moment63+0x30c>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b299      	uxth	r1, r3
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	f04f 0400 	mov.w	r4, #0
 8003234:	0154      	lsls	r4, r2, #5
 8003236:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800323a:	014b      	lsls	r3, r1, #5
 800323c:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <moment63+0x30c>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	3303      	adds	r3, #3
 8003244:	3307      	adds	r3, #7
 8003246:	08db      	lsrs	r3, r3, #3
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	ebad 0d03 	sub.w	sp, sp, r3
 800324e:	466b      	mov	r3, sp
 8003250:	3303      	adds	r3, #3
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	61fb      	str	r3, [r7, #28]
	float32_t m63[frameSize]; // in^6
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <moment63+0x30c>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	3b01      	subs	r3, #1
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	4b34      	ldr	r3, [pc, #208]	; (8003334 <moment63+0x30c>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b299      	uxth	r1, r3
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	f04f 0400 	mov.w	r4, #0
 8003272:	0154      	lsls	r4, r2, #5
 8003274:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003278:	014b      	lsls	r3, r1, #5
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <moment63+0x30c>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b299      	uxth	r1, r3
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	f04f 0400 	mov.w	r4, #0
 800328c:	0154      	lsls	r4, r2, #5
 800328e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003292:	014b      	lsls	r3, r1, #5
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <moment63+0x30c>)
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3303      	adds	r3, #3
 800329c:	3307      	adds	r3, #7
 800329e:	08db      	lsrs	r3, r3, #3
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	ebad 0d03 	sub.w	sp, sp, r3
 80032a6:	466b      	mov	r3, sp
 80032a8:	3303      	adds	r3, #3
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	617b      	str	r3, [r7, #20]
	float32_t m63_real = 0.0f, m63_imag = 0.0f;
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t m63_real_mean = 0.0f, m63_imag_mean = 0.0f;
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
	arm_copy_f32(&in[0], &in_cp[0], frameSize*2);
 80032c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <moment63+0x30c>)
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	461a      	mov	r2, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f006 fd7a 	bl	8009dcc <arm_copy_f32>
	arm_cmplx_conj_f32(&in[0], &in_conj[0], frameSize);
 80032d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <moment63+0x30c>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f007 fbdf 	bl	800aaa4 <arm_cmplx_conj_f32>
	arm_cmplx_mult_cmplx_f32(&in[0], &in_cp[0], &m20[0], frameSize);
 80032e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <moment63+0x30c>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f007 fa50 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m20[0], &in_cp[0], &m30[0], frameSize);
 80032f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80032f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <moment63+0x30c>)
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	f007 fa49 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m30[0], &in_conj[0], &m41[0], frameSize);
 8003302:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <moment63+0x30c>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	f007 fa42 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m41[0], &in_conj[0], &m52[0], frameSize);
 8003310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <moment63+0x30c>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f007 fa3b 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	arm_cmplx_mult_cmplx_f32(&m52[0], &in_conj[0], &m63[0], frameSize);
 800331e:	69f8      	ldr	r0, [r7, #28]
 8003320:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <moment63+0x30c>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	f007 fa34 	bl	800a794 <arm_cmplx_mult_cmplx_f32>
	for(int i = 0; i < frameSize*2; i+=2){
 800332c:	2300      	movs	r3, #0
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
 8003330:	e01e      	b.n	8003370 <moment63+0x348>
 8003332:	bf00      	nop
 8003334:	0800eff8 	.word	0x0800eff8
		m63_real += m63[i];
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		m63_imag += m63[i+1];
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	3301      	adds	r3, #1
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003366:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	for(int i = 0; i < frameSize*2; i+=2){
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	3302      	adds	r3, #2
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
 8003370:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <moment63+0x3bc>)
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003378:	429a      	cmp	r2, r3
 800337a:	dbdd      	blt.n	8003338 <moment63+0x310>
	}
	m63_real_mean = m63_real / frameSize;
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <moment63+0x3bc>)
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	ee07 3a90 	vmov	s15, r3
 8003384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003388:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800338c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003390:	edc7 7a04 	vstr	s15, [r7, #16]
	m63_imag_mean = m63_imag / frameSize;
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <moment63+0x3bc>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80033a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a8:	edc7 7a03 	vstr	s15, [r7, #12]
	*out = sqrtf(m63_real_mean*m63_real_mean + m63_imag_mean*m63_imag_mean);
 80033ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80033b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80033b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033b8:	edd7 6a03 	vldr	s13, [r7, #12]
 80033bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80033c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	f007 ff70 	bl	800b2b0 <sqrtf>
 80033d0:	eef0 7a40 	vmov.f32	s15, s0
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	edc3 7a00 	vstr	s15, [r3]
 80033da:	46ad      	mov	sp, r5
}
 80033dc:	bf00      	nop
 80033de:	3758      	adds	r7, #88	; 0x58
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bdb0      	pop	{r4, r5, r7, pc}
 80033e4:	0800eff8 	.word	0x0800eff8

080033e8 <cumulant_20>:

// Features no 13, 14, 15, 16, 17, 18, 19, 20 and 21
void cumulant_20(float32_t in[], float32_t *out){
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
	moment20(&in[0], out);
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fe f861 	bl	80014bc <moment20>
};
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <cumulant_21>:
void cumulant_21(float32_t in[], float32_t *out){
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
	moment21(&in[0], out);
 800340c:	6839      	ldr	r1, [r7, #0]
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe f930 	bl	8001674 <moment21>
};
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <cumulant_40>:

void cumulant_40(float32_t in[], float32_t *out){
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	float32_t m40, m20;
	moment20(&in[0], &m20);
 8003426:	f107 0308 	add.w	r3, r7, #8
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe f845 	bl	80014bc <moment20>
	moment40(&in[0], &m40);
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	4619      	mov	r1, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fe fae1 	bl	8001a00 <moment40>
	*out = fabsf(m40 - 3*m20*m20);
 800343e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003442:	edd7 7a02 	vldr	s15, [r7, #8]
 8003446:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800344a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800344e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800345a:	eef0 7ae7 	vabs.f32	s15, s15
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	edc3 7a00 	vstr	s15, [r3]
};
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <cumulant_41>:
void cumulant_41(float32_t in[], float32_t *out){
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
	float32_t m41, m20, m21;
	moment41(&in[0], &m41);
 8003476:	f107 0314 	add.w	r3, r7, #20
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fe fc01 	bl	8001c84 <moment41>
	moment20(&in[0], &m20);
 8003482:	f107 0310 	add.w	r3, r7, #16
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fe f817 	bl	80014bc <moment20>
	moment21(&in[0], &m21);
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7fe f8ed 	bl	8001674 <moment21>
	*out = fabsf(m41 - 3*m20*m21);
 800349a:	ed97 7a05 	vldr	s14, [r7, #20]
 800349e:	edd7 7a04 	vldr	s15, [r7, #16]
 80034a2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80034a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80034aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80034ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b6:	eef0 7ae7 	vabs.f32	s15, s15
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	edc3 7a00 	vstr	s15, [r3]
};
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <cumulant_42>:
void cumulant_42(float32_t in[], float32_t *out){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
	float32_t m42, m20, m21, temp;
	moment42(&in[0], &m42);
 80034d2:	f107 0310 	add.w	r3, r7, #16
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7fe fd4b 	bl	8001f74 <moment42>
	moment20(&in[0], &m20);
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fd ffe9 	bl	80014bc <moment20>
	moment21(&in[0], &m21);
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fe f8bf 	bl	8001674 <moment21>
	temp = fabsf(m20);
 80034f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80034fa:	eef0 7ae7 	vabs.f32	s15, s15
 80034fe:	edc7 7a05 	vstr	s15, [r7, #20]
	*out = fabsf(m42 - temp*temp - 2*m21*m21);
 8003502:	ed97 7a04 	vldr	s14, [r7, #16]
 8003506:	edd7 6a05 	vldr	s13, [r7, #20]
 800350a:	edd7 7a05 	vldr	s15, [r7, #20]
 800350e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003516:	edd7 7a02 	vldr	s15, [r7, #8]
 800351a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800351e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352a:	eef0 7ae7 	vabs.f32	s15, s15
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	edc3 7a00 	vstr	s15, [r3]
};
 8003534:	bf00      	nop
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <cumulant_60>:
void cumulant_60(float32_t in[], float32_t *out){
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
	float32_t m60, m40, m20;
	moment20(&in[0], &m20);
 8003546:	f107 030c 	add.w	r3, r7, #12
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7fd ffb5 	bl	80014bc <moment20>
	moment40(&in[0], &m40);
 8003552:	f107 0310 	add.w	r3, r7, #16
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fe fa51 	bl	8001a00 <moment40>
	moment60(&in[0], &m60);
 800355e:	f107 0314 	add.w	r3, r7, #20
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7fe fff5 	bl	8002554 <moment60>
	*out = fabsf(m60 - 15*m20*m40 + 30*m20*m20*m20);
 800356a:	ed97 7a05 	vldr	s14, [r7, #20]
 800356e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003572:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8003576:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800357a:	edd7 7a04 	vldr	s15, [r7, #16]
 800357e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003582:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003586:	edd7 7a03 	vldr	s15, [r7, #12]
 800358a:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800358e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003592:	edd7 7a03 	vldr	s15, [r7, #12]
 8003596:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800359a:	edd7 7a03 	vldr	s15, [r7, #12]
 800359e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a6:	eef0 7ae7 	vabs.f32	s15, s15
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	edc3 7a00 	vstr	s15, [r3]
};
 80035b0:	bf00      	nop
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <cumulant_61>:
void cumulant_61(float32_t in[], float32_t *out){
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
	//M61 - 5 M21 M40 - 10 M20 M41 + 30 M20 M20 M21
	float32_t m61, m21, m40, m20, m41;
	moment20(&in[0], &m20);
 80035c2:	f107 0310 	add.w	r3, r7, #16
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fd ff77 	bl	80014bc <moment20>
	moment21(&in[0], &m21);
 80035ce:	f107 0318 	add.w	r3, r7, #24
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fe f84d 	bl	8001674 <moment21>
	moment40(&in[0], &m40);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fe fa0d 	bl	8001a00 <moment40>
	moment41(&in[0], &m41);
 80035e6:	f107 030c 	add.w	r3, r7, #12
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7fe fb49 	bl	8001c84 <moment41>
	moment61(&in[0], &m61);
 80035f2:	f107 031c 	add.w	r3, r7, #28
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff f955 	bl	80028a8 <moment61>
	*out = fabsf(m61 - 5*m21*m40 - 10*m20*m41 + 30*m20*m20*m21);
 80035fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003602:	edd7 7a06 	vldr	s15, [r7, #24]
 8003606:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800360a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003616:	ee37 7a67 	vsub.f32	s14, s14, s15
 800361a:	edd7 7a04 	vldr	s15, [r7, #16]
 800361e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003622:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003626:	edd7 7a03 	vldr	s15, [r7, #12]
 800362a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800362e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003632:	edd7 7a04 	vldr	s15, [r7, #16]
 8003636:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800363a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800363e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003642:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003646:	edd7 7a06 	vldr	s15, [r7, #24]
 800364a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800364e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003652:	eef0 7ae7 	vabs.f32	s15, s15
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	edc3 7a00 	vstr	s15, [r3]
};
 800365c:	bf00      	nop
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <cumulant_62>:
void cumulant_62(float32_t in[], float32_t *out){
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
	// M62 - 6 M20 M42 - 8 M21 M41 - M22 M40 + 6 M20 M20 M22 + 24 M21 M21 M22
	float32_t m62, m20, m42, m21, m41, m22, m40;
	moment20(&in[0], &m20);
 800366e:	f107 0320 	add.w	r3, r7, #32
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fd ff21 	bl	80014bc <moment20>
	moment21(&in[0], &m21);
 800367a:	f107 0318 	add.w	r3, r7, #24
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fd fff7 	bl	8001674 <moment21>
	moment22(&in[0], &m22);
 8003686:	f107 0310 	add.w	r3, r7, #16
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7fe f8a5 	bl	80017dc <moment22>
	moment40(&in[0], &m40);
 8003692:	f107 030c 	add.w	r3, r7, #12
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fe f9b1 	bl	8001a00 <moment40>
	moment41(&in[0], &m41);
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7fe faed 	bl	8001c84 <moment41>
	moment42(&in[0], &m42);
 80036aa:	f107 031c 	add.w	r3, r7, #28
 80036ae:	4619      	mov	r1, r3
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7fe fc5f 	bl	8001f74 <moment42>
	moment62(&in[0], &m62);
 80036b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff fad3 	bl	8002c68 <moment62>
	*out = fabsf(m62 - 6*m20*m42 - 8*m21*m41 - m22*m40 + 6*m20*m20*m22 + 24*m21*m21*m22);
 80036c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80036c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80036ca:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80036ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80036d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80036d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036de:	edd7 7a06 	vldr	s15, [r7, #24]
 80036e2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80036e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80036ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036f6:	edd7 6a04 	vldr	s13, [r7, #16]
 80036fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80036fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003702:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003706:	edd7 7a08 	vldr	s15, [r7, #32]
 800370a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800370e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003712:	edd7 7a08 	vldr	s15, [r7, #32]
 8003716:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800371a:	edd7 7a04 	vldr	s15, [r7, #16]
 800371e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003726:	edd7 7a06 	vldr	s15, [r7, #24]
 800372a:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 800372e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003732:	edd7 7a06 	vldr	s15, [r7, #24]
 8003736:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800373a:	edd7 7a04 	vldr	s15, [r7, #16]
 800373e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003746:	eef0 7ae7 	vabs.f32	s15, s15
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	edc3 7a00 	vstr	s15, [r3]
};
 8003750:	bf00      	nop
 8003752:	3728      	adds	r7, #40	; 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <cumulant_63>:
void cumulant_63(float32_t in[], float32_t *out){
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	// M63 - 9 M21 M42 + 12 M21 M21 M21 - 3 M20 M43 - 3 M22 M41 + 18 M20 M21 M22
	float32_t m63, m21, m42, m20, m43, m22, m41;
	moment20(&in[0], &m20);
 8003762:	f107 0318 	add.w	r3, r7, #24
 8003766:	4619      	mov	r1, r3
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fd fea7 	bl	80014bc <moment20>
	moment21(&in[0], &m21);
 800376e:	f107 0320 	add.w	r3, r7, #32
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fd ff7d 	bl	8001674 <moment21>
	moment22(&in[0], &m22);
 800377a:	f107 0310 	add.w	r3, r7, #16
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fe f82b 	bl	80017dc <moment22>
	moment41(&in[0], &m41);
 8003786:	f107 030c 	add.w	r3, r7, #12
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fe fa79 	bl	8001c84 <moment41>
	moment42(&in[0], &m42);
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fe fbeb 	bl	8001f74 <moment42>
	moment43(&in[0], &m43);
 800379e:	f107 0314 	add.w	r3, r7, #20
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fe fd5d 	bl	8002264 <moment43>
	moment63(&in[0], &m63);
 80037aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fc39 	bl	8003028 <moment63>
	*out = fabsf(m63 - 9*m21*m42 + 12*m21*m21*m21 - 3*m20*m43 - 3*m22*m41 + 18*m20*m21*m22);
 80037b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80037ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80037be:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80037c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80037c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80037ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80037d6:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80037da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80037de:	edd7 7a08 	vldr	s15, [r7, #32]
 80037e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80037ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80037f6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80037fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80037fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800380a:	edd7 7a04 	vldr	s15, [r7, #16]
 800380e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003812:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003816:	edd7 7a03 	vldr	s15, [r7, #12]
 800381a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800381e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003822:	edd7 7a06 	vldr	s15, [r7, #24]
 8003826:	eef3 6a02 	vmov.f32	s13, #50	; 0x41900000  18.0
 800382a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800382e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003832:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003836:	edd7 7a04 	vldr	s15, [r7, #16]
 800383a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800383e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003842:	eef0 7ae7 	vabs.f32	s15, s15
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	edc3 7a00 	vstr	s15, [r3]
};
 800384c:	bf00      	nop
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	; 0x30
 8003858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385a:	f107 031c 	add.w	r3, r7, #28
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800386a:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <MX_GPIO_Init+0x144>)
 800386c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003870:	4a49      	ldr	r2, [pc, #292]	; (8003998 <MX_GPIO_Init+0x144>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <MX_GPIO_Init+0x144>)
 800387c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003888:	4b43      	ldr	r3, [pc, #268]	; (8003998 <MX_GPIO_Init+0x144>)
 800388a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388e:	4a42      	ldr	r2, [pc, #264]	; (8003998 <MX_GPIO_Init+0x144>)
 8003890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003898:	4b3f      	ldr	r3, [pc, #252]	; (8003998 <MX_GPIO_Init+0x144>)
 800389a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <MX_GPIO_Init+0x144>)
 80038a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ac:	4a3a      	ldr	r2, [pc, #232]	; (8003998 <MX_GPIO_Init+0x144>)
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038b6:	4b38      	ldr	r3, [pc, #224]	; (8003998 <MX_GPIO_Init+0x144>)
 80038b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c4:	4b34      	ldr	r3, [pc, #208]	; (8003998 <MX_GPIO_Init+0x144>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ca:	4a33      	ldr	r2, [pc, #204]	; (8003998 <MX_GPIO_Init+0x144>)
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d4:	4b30      	ldr	r3, [pc, #192]	; (8003998 <MX_GPIO_Init+0x144>)
 80038d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e2:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <MX_GPIO_Init+0x144>)
 80038e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e8:	4a2b      	ldr	r2, [pc, #172]	; (8003998 <MX_GPIO_Init+0x144>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038f2:	4b29      	ldr	r3, [pc, #164]	; (8003998 <MX_GPIO_Init+0x144>)
 80038f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <MX_GPIO_Init+0x144>)
 8003902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003906:	4a24      	ldr	r2, [pc, #144]	; (8003998 <MX_GPIO_Init+0x144>)
 8003908:	f043 0310 	orr.w	r3, r3, #16
 800390c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003910:	4b21      	ldr	r3, [pc, #132]	; (8003998 <MX_GPIO_Init+0x144>)
 8003912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800391e:	2200      	movs	r2, #0
 8003920:	f244 0101 	movw	r1, #16385	; 0x4001
 8003924:	481d      	ldr	r0, [pc, #116]	; (800399c <MX_GPIO_Init+0x148>)
 8003926:	f001 fd3d 	bl	80053a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800392a:	2200      	movs	r2, #0
 800392c:	2102      	movs	r1, #2
 800392e:	481c      	ldr	r0, [pc, #112]	; (80039a0 <MX_GPIO_Init+0x14c>)
 8003930:	f001 fd38 	bl	80053a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8003934:	f244 0301 	movw	r3, #16385	; 0x4001
 8003938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800393a:	2301      	movs	r3, #1
 800393c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003942:	2300      	movs	r3, #0
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003946:	f107 031c 	add.w	r3, r7, #28
 800394a:	4619      	mov	r1, r3
 800394c:	4813      	ldr	r0, [pc, #76]	; (800399c <MX_GPIO_Init+0x148>)
 800394e:	f001 fb79 	bl	8005044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003952:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003960:	2300      	movs	r3, #0
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003964:	230a      	movs	r3, #10
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	480d      	ldr	r0, [pc, #52]	; (80039a4 <MX_GPIO_Init+0x150>)
 8003970:	f001 fb68 	bl	8005044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003974:	2302      	movs	r3, #2
 8003976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003978:	2301      	movs	r3, #1
 800397a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003980:	2300      	movs	r3, #0
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003984:	f107 031c 	add.w	r3, r7, #28
 8003988:	4619      	mov	r1, r3
 800398a:	4805      	ldr	r0, [pc, #20]	; (80039a0 <MX_GPIO_Init+0x14c>)
 800398c:	f001 fb5a 	bl	8005044 <HAL_GPIO_Init>

}
 8003990:	bf00      	nop
 8003992:	3730      	adds	r7, #48	; 0x30
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	58024400 	.word	0x58024400
 800399c:	58020400 	.word	0x58020400
 80039a0:	58021000 	.word	0x58021000
 80039a4:	58020000 	.word	0x58020000

080039a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039b0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <SCB_EnableICache+0x3c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80039bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039c0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <SCB_EnableICache+0x3c>)
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	4a06      	ldr	r2, [pc, #24]	; (80039e4 <SCB_EnableICache+0x3c>)
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80039d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039d4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <SCB_EnableDCache+0x7c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80039f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80039fa:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <SCB_EnableDCache+0x7c>)
 80039fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a00:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0b5b      	lsrs	r3, r3, #13
 8003a06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a0a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	08db      	lsrs	r3, r3, #3
 8003a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a14:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003a1e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a24:	490f      	ldr	r1, [pc, #60]	; (8003a64 <SCB_EnableDCache+0x7c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	60ba      	str	r2, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ef      	bne.n	8003a16 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1e5a      	subs	r2, r3, #1
 8003a3a:	60fa      	str	r2, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <SCB_EnableDCache+0x24>
 8003a40:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <SCB_EnableDCache+0x7c>)
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	4a06      	ldr	r2, [pc, #24]	; (8003a64 <SCB_EnableDCache+0x7c>)
 8003a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4e:	6153      	str	r3, [r2, #20]
 8003a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a54:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b09a      	sub	sp, #104	; 0x68
 8003a6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8003a6e:	f7ff ff9b 	bl	80039a8 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8003a72:	f7ff ffb9 	bl	80039e8 <SCB_EnableDCache>

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8003a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a7a:	667b      	str	r3, [r7, #100]	; 0x64
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003a7c:	bf00      	nop
 8003a7e:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <main+0xb8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <main+0x2c>
 8003a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	667a      	str	r2, [r7, #100]	; 0x64
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	dcf4      	bgt.n	8003a7e <main+0x16>
	if ( timeout < 0 )
 8003a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da01      	bge.n	8003a9e <main+0x36>
	{
		Error_Handler();
 8003a9a:	f000 fd03 	bl	80044a4 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003a9e:	f000 febd 	bl	800481c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003aa2:	f000 fb1d 	bl	80040e0 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	; (8003b20 <main+0xb8>)
 8003aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <main+0xb8>)
 8003aae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <main+0xb8>)
 8003ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	f001 fc87 	bl	80053d8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8003aca:	2100      	movs	r1, #0
 8003acc:	2000      	movs	r0, #0
 8003ace:	f001 fc9d 	bl	800540c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8003ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad6:	667b      	str	r3, [r7, #100]	; 0x64
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003ad8:	bf00      	nop
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <main+0xb8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <main+0x88>
 8003ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	667a      	str	r2, [r7, #100]	; 0x64
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	dcf4      	bgt.n	8003ada <main+0x72>
	if ( timeout < 0 )
 8003af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	da01      	bge.n	8003afa <main+0x92>
	{
		Error_Handler();
 8003af6:	f000 fcd5 	bl	80044a4 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003afa:	f7ff feab 	bl	8003854 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8003afe:	f000 fdc5 	bl	800468c <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8003b02:	f000 fd55 	bl	80045b0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	// Put UART peripheral in reception process
	if(HAL_UART_Receive_IT(&huart3, &rxBuffer.bytes[0], RX_DATA_SIZE*4) != HAL_OK)
 8003b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b0a:	4906      	ldr	r1, [pc, #24]	; (8003b24 <main+0xbc>)
 8003b0c:	4806      	ldr	r0, [pc, #24]	; (8003b28 <main+0xc0>)
 8003b0e:	f004 fb69 	bl	80081e4 <HAL_UART_Receive_IT>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d011      	beq.n	8003b3c <main+0xd4>
	{
		Error_Handler();
 8003b18:	f000 fcc4 	bl	80044a4 <Error_Handler>
	}
	// Wait for message
	while (UartReady != SET)
 8003b1c:	e00e      	b.n	8003b3c <main+0xd4>
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
 8003b24:	2400e82c 	.word	0x2400e82c
 8003b28:	240157c8 	.word	0x240157c8
	{
		HAL_Delay(500);
 8003b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b30:	f000 ff06 	bl	8004940 <HAL_Delay>
		blink_green();
 8003b34:	f000 fbce 	bl	80042d4 <blink_green>
		blink_green();
 8003b38:	f000 fbcc 	bl	80042d4 <blink_green>
	while (UartReady != SET)
 8003b3c:	4bb3      	ldr	r3, [pc, #716]	; (8003e0c <main+0x3a4>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d1f2      	bne.n	8003b2c <main+0xc4>
	}
	UartReady = RESET;
 8003b46:	4bb1      	ldr	r3, [pc, #708]	; (8003e0c <main+0x3a4>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2101      	movs	r1, #1
 8003b50:	48af      	ldr	r0, [pc, #700]	; (8003e10 <main+0x3a8>)
 8003b52:	f001 fc27 	bl	80053a4 <HAL_GPIO_WritePin>

	if(rxBuffer.bytes[8191] != 0 && (processed == 0)){
 8003b56:	4aaf      	ldr	r2, [pc, #700]	; (8003e14 <main+0x3ac>)
 8003b58:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003b5c:	4413      	add	r3, r2
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <main+0x10e>
 8003b64:	4bac      	ldr	r3, [pc, #688]	; (8003e18 <main+0x3b0>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <main+0x10e>
		HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	2102      	movs	r1, #2
 8003b70:	48aa      	ldr	r0, [pc, #680]	; (8003e1c <main+0x3b4>)
 8003b72:	f001 fc17 	bl	80053a4 <HAL_GPIO_WritePin>
	}

	// HRTimer enable
	__HAL_TIM_ENABLE(&htim2);
 8003b76:	4baa      	ldr	r3, [pc, #680]	; (8003e20 <main+0x3b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4ba8      	ldr	r3, [pc, #672]	; (8003e20 <main+0x3b8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
	__HAL_TIM_UIFREMAP_DISABLE(&htim2);
 8003b86:	4ba6      	ldr	r3, [pc, #664]	; (8003e20 <main+0x3b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4ba4      	ldr	r3, [pc, #656]	; (8003e20 <main+0x3b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b94:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8003b96:	48a2      	ldr	r0, [pc, #648]	; (8003e20 <main+0x3b8>)
 8003b98:	f003 ff92 	bl	8007ac0 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003b9c:	4ba0      	ldr	r3, [pc, #640]	; (8003e20 <main+0x3b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

	/*****************************************************************************************************/
	// Instantaneous absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003ba4:	4b9e      	ldr	r3, [pc, #632]	; (8003e20 <main+0x3b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
	complex_inst_absolute(&rxBuffer.number[0], &instAbs.number[0]);
 8003bac:	499d      	ldr	r1, [pc, #628]	; (8003e24 <main+0x3bc>)
 8003bae:	4899      	ldr	r0, [pc, #612]	; (8003e14 <main+0x3ac>)
 8003bb0:	f7fc fe50 	bl	8000854 <complex_inst_absolute>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003bb4:	4b9a      	ldr	r3, [pc, #616]	; (8003e20 <main+0x3b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_array(&instAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8003bbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bc6:	4897      	ldr	r0, [pc, #604]	; (8003e24 <main+0x3bc>)
 8003bc8:	f000 fbf2 	bl	80043b0 <transmit_array>

	blink_orange_slow();
 8003bcc:	f000 fb6a 	bl	80042a4 <blink_orange_slow>
	blink_orange_slow();
 8003bd0:	f000 fb68 	bl	80042a4 <blink_orange_slow>

	// Instantaneous phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003bd4:	4b92      	ldr	r3, [pc, #584]	; (8003e20 <main+0x3b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8003bdc:	4992      	ldr	r1, [pc, #584]	; (8003e28 <main+0x3c0>)
 8003bde:	488d      	ldr	r0, [pc, #564]	; (8003e14 <main+0x3ac>)
 8003be0:	f7fc fe4a 	bl	8000878 <inst_phase>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003be4:	4b8e      	ldr	r3, [pc, #568]	; (8003e20 <main+0x3b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_array(&instPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8003bec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bf6:	488c      	ldr	r0, [pc, #560]	; (8003e28 <main+0x3c0>)
 8003bf8:	f000 fbda 	bl	80043b0 <transmit_array>

	blink_orange_slow();
 8003bfc:	f000 fb52 	bl	80042a4 <blink_orange_slow>
	blink_orange_slow();
 8003c00:	f000 fb50 	bl	80042a4 <blink_orange_slow>

	// Instantaneous unwrapped phase value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003c04:	4b86      	ldr	r3, [pc, #536]	; (8003e20 <main+0x3b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
	inst_phase(&rxBuffer.number[0], &instPhase.number[0]);
 8003c0c:	4986      	ldr	r1, [pc, #536]	; (8003e28 <main+0x3c0>)
 8003c0e:	4881      	ldr	r0, [pc, #516]	; (8003e14 <main+0x3ac>)
 8003c10:	f7fc fe32 	bl	8000878 <inst_phase>
	unwrap(&instPhase.number[0], &instUnwrappedPhase.number[0]);
 8003c14:	4985      	ldr	r1, [pc, #532]	; (8003e2c <main+0x3c4>)
 8003c16:	4884      	ldr	r0, [pc, #528]	; (8003e28 <main+0x3c0>)
 8003c18:	f7fc fe66 	bl	80008e8 <unwrap>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003c1c:	4b80      	ldr	r3, [pc, #512]	; (8003e20 <main+0x3b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_array(&instUnwrappedPhase.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8003c24:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c2e:	487f      	ldr	r0, [pc, #508]	; (8003e2c <main+0x3c4>)
 8003c30:	f000 fbbe 	bl	80043b0 <transmit_array>

	blink_orange_slow();
 8003c34:	f000 fb36 	bl	80042a4 <blink_orange_slow>
	blink_orange_slow();
 8003c38:	f000 fb34 	bl	80042a4 <blink_orange_slow>

	// Instantaneous frequency value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003c3c:	4b78      	ldr	r3, [pc, #480]	; (8003e20 <main+0x3b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2200      	movs	r2, #0
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24
	inst_frequency(&rxBuffer.number[0], &instFreq.number[0]);
 8003c44:	497a      	ldr	r1, [pc, #488]	; (8003e30 <main+0x3c8>)
 8003c46:	4873      	ldr	r0, [pc, #460]	; (8003e14 <main+0x3ac>)
 8003c48:	f7fc feea 	bl	8000a20 <inst_frequency>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003c4c:	4b74      	ldr	r3, [pc, #464]	; (8003e20 <main+0x3b8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_array(&instFreq.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8003c54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c5e:	4874      	ldr	r0, [pc, #464]	; (8003e30 <main+0x3c8>)
 8003c60:	f000 fba6 	bl	80043b0 <transmit_array>

	blink_orange_slow();
 8003c64:	f000 fb1e 	bl	80042a4 <blink_orange_slow>
	blink_orange_slow();
 8003c68:	f000 fb1c 	bl	80042a4 <blink_orange_slow>

	// Instantaneous centered normalized absolute value
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003c6c:	4b6c      	ldr	r3, [pc, #432]	; (8003e20 <main+0x3b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24
	inst_centralized_normalized_absolute(&rxBuffer.number[0], &instCNAbs.number[0]);
 8003c74:	496f      	ldr	r1, [pc, #444]	; (8003e34 <main+0x3cc>)
 8003c76:	4867      	ldr	r0, [pc, #412]	; (8003e14 <main+0x3ac>)
 8003c78:	f7fc ff8a 	bl	8000b90 <inst_centralized_normalized_absolute>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003c7c:	4b68      	ldr	r3, [pc, #416]	; (8003e20 <main+0x3b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_array(&instCNAbs.bytes[0], FT_INPUT_VECTOR_SIZE*4, &counter.bytes[0]);
 8003c84:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c8e:	4869      	ldr	r0, [pc, #420]	; (8003e34 <main+0x3cc>)
 8003c90:	f000 fb8e 	bl	80043b0 <transmit_array>

	blink_orange_slow();
 8003c94:	f000 fb06 	bl	80042a4 <blink_orange_slow>
	blink_orange_slow();
 8003c98:	f000 fb04 	bl	80042a4 <blink_orange_slow>

	/*****************************************************************************************************/
	// Standard deviation of the instantaneous phase
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003c9c:	4b60      	ldr	r3, [pc, #384]	; (8003e20 <main+0x3b8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instPhase.number[0], &ft0.number);
 8003ca4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ca8:	4619      	mov	r1, r3
 8003caa:	485f      	ldr	r0, [pc, #380]	; (8003e28 <main+0x3c0>)
 8003cac:	f7fc ffec 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003cb0:	4b5b      	ldr	r3, [pc, #364]	; (8003e20 <main+0x3b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft0.bytes[0], &counter.bytes[0]);
 8003cb8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fb1c 	bl	8004300 <transmit_features>

	// Standard deviation of the absolute instantaneous phase
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003cc8:	4b55      	ldr	r3, [pc, #340]	; (8003e20 <main+0x3b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instPhase.number[0], &instAbsPhase.number[0]);
 8003cd0:	4959      	ldr	r1, [pc, #356]	; (8003e38 <main+0x3d0>)
 8003cd2:	4855      	ldr	r0, [pc, #340]	; (8003e28 <main+0x3c0>)
 8003cd4:	f7fc fdac 	bl	8000830 <inst_absolute>
	std_dev(&instAbsPhase.number[0], &ft1.number);
 8003cd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4856      	ldr	r0, [pc, #344]	; (8003e38 <main+0x3d0>)
 8003ce0:	f7fc ffd2 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003ce4:	4b4e      	ldr	r3, [pc, #312]	; (8003e20 <main+0x3b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft1.bytes[0], &counter.bytes[0]);
 8003cec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cf0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fb02 	bl	8004300 <transmit_features>

	// Standard deviation of the instantaneous frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003cfc:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <main+0x3b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2200      	movs	r2, #0
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instFreq.number[0], &ft2.number);
 8003d04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4849      	ldr	r0, [pc, #292]	; (8003e30 <main+0x3c8>)
 8003d0c:	f7fc ffbc 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003d10:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <main+0x3b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft2.bytes[0], &counter.bytes[0]);
 8003d18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 faec 	bl	8004300 <transmit_features>

	// Standard deviation of the absolute instantaneous frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003d28:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <main+0x3b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instFreq.number[0], &instAbsFreq.number[0]);
 8003d30:	4942      	ldr	r1, [pc, #264]	; (8003e3c <main+0x3d4>)
 8003d32:	483f      	ldr	r0, [pc, #252]	; (8003e30 <main+0x3c8>)
 8003d34:	f7fc fd7c 	bl	8000830 <inst_absolute>
	std_dev(&instAbsFreq.number[0], &ft3.number);
 8003d38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	483f      	ldr	r0, [pc, #252]	; (8003e3c <main+0x3d4>)
 8003d40:	f7fc ffa2 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003d44:	4b36      	ldr	r3, [pc, #216]	; (8003e20 <main+0x3b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft3.bytes[0], &counter.bytes[0]);
 8003d4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fad2 	bl	8004300 <transmit_features>

	// Standard deviation of the centralized normalized absolute amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003d5c:	4b30      	ldr	r3, [pc, #192]	; (8003e20 <main+0x3b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2200      	movs	r2, #0
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24
	std_dev(&instCNAbs.number[0], &ft4.number);
 8003d64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4832      	ldr	r0, [pc, #200]	; (8003e34 <main+0x3cc>)
 8003d6c:	f7fc ff8c 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <main+0x3b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft4.bytes[0], &counter.bytes[0]);
 8003d78:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fabc 	bl	8004300 <transmit_features>

	// Standard deviation of the absolute centralized normalized absolute amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003d88:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <main+0x3b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
	inst_absolute(&instCNAbs.number[0], &instAbsCNAbs.number[0]);
 8003d90:	492b      	ldr	r1, [pc, #172]	; (8003e40 <main+0x3d8>)
 8003d92:	4828      	ldr	r0, [pc, #160]	; (8003e34 <main+0x3cc>)
 8003d94:	f7fc fd4c 	bl	8000830 <inst_absolute>
	std_dev(&instAbsCNAbs.number[0], &ft5.number);
 8003d98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4828      	ldr	r0, [pc, #160]	; (8003e40 <main+0x3d8>)
 8003da0:	f7fc ff72 	bl	8000c88 <std_dev>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <main+0x3b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft5.bytes[0], &counter.bytes[0]);
 8003dac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003db0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 faa2 	bl	8004300 <transmit_features>

	// Mean Value of the Signal Magnitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <main+0x3b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
	mean_of_signal_magnitude(&instAbs.number[0], &ft6.number);
 8003dc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4816      	ldr	r0, [pc, #88]	; (8003e24 <main+0x3bc>)
 8003dcc:	f7fc ff6e 	bl	8000cac <mean_of_signal_magnitude>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <main+0x3b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft6.bytes[0], &counter.bytes[0]);
 8003dd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ddc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fa8c 	bl	8004300 <transmit_features>

	// Squared Mean of the Signal Magnitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <main+0x3b8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2200      	movs	r2, #0
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24
	squared_mean_of_signal_magnitude(&instAbs.number[0], &ft7.number);
 8003df0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003df4:	4619      	mov	r1, r3
 8003df6:	480b      	ldr	r0, [pc, #44]	; (8003e24 <main+0x3bc>)
 8003df8:	f7fc ff6a 	bl	8000cd0 <squared_mean_of_signal_magnitude>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <main+0x3b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft7.bytes[0], &counter.bytes[0]);
 8003e04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e08:	e01c      	b.n	8003e44 <main+0x3dc>
 8003e0a:	bf00      	nop
 8003e0c:	240021fd 	.word	0x240021fd
 8003e10:	58020400 	.word	0x58020400
 8003e14:	2400e82c 	.word	0x2400e82c
 8003e18:	240021fc 	.word	0x240021fc
 8003e1c:	58021000 	.word	0x58021000
 8003e20:	2401577c 	.word	0x2401577c
 8003e24:	2400820c 	.word	0x2400820c
 8003e28:	2400620c 	.word	0x2400620c
 8003e2c:	24012b3c 	.word	0x24012b3c
 8003e30:	2400420c 	.word	0x2400420c
 8003e34:	2400a20c 	.word	0x2400a20c
 8003e38:	2400220c 	.word	0x2400220c
 8003e3c:	240001fc 	.word	0x240001fc
 8003e40:	2400c82c 	.word	0x2400c82c
 8003e44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fa58 	bl	8004300 <transmit_features>

	// Normalized Sqrt Value of Sum of Amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003e50:	4b9f      	ldr	r3, [pc, #636]	; (80040d0 <main+0x668>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2200      	movs	r2, #0
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
	normalized_sqrt_of_sum_of_amp(&instAbs.number[0], &ft8.number);
 8003e58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	489d      	ldr	r0, [pc, #628]	; (80040d4 <main+0x66c>)
 8003e60:	f7fc ff54 	bl	8000d0c <normalized_sqrt_of_sum_of_amp>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003e64:	4b9a      	ldr	r3, [pc, #616]	; (80040d0 <main+0x668>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft8.bytes[0], &counter.bytes[0]);
 8003e6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e74:	4611      	mov	r1, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fa42 	bl	8004300 <transmit_features>

	// Ratio of I/Q Components
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003e7c:	4b94      	ldr	r3, [pc, #592]	; (80040d0 <main+0x668>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2200      	movs	r2, #0
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24
	ratio_iq(&rxBuffer.number[0], &ft9.number);
 8003e84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4893      	ldr	r0, [pc, #588]	; (80040d8 <main+0x670>)
 8003e8c:	f7fc ff76 	bl	8000d7c <ratio_iq>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003e90:	4b8f      	ldr	r3, [pc, #572]	; (80040d0 <main+0x668>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft9.bytes[0], &counter.bytes[0]);
 8003e98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fa2c 	bl	8004300 <transmit_features>

	// Gmax
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003ea8:	4b89      	ldr	r3, [pc, #548]	; (80040d0 <main+0x668>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24
	gmax(&rxBuffer.number[0], &ft10.number);
 8003eb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4888      	ldr	r0, [pc, #544]	; (80040d8 <main+0x670>)
 8003eb8:	f7fc ffb2 	bl	8000e20 <gmax>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003ebc:	4b84      	ldr	r3, [pc, #528]	; (80040d0 <main+0x668>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft10.bytes[0], &counter.bytes[0]);
 8003ec4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ec8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fa16 	bl	8004300 <transmit_features>

	// Kurtosis of the Absolute Amplitude
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003ed4:	4b7e      	ldr	r3, [pc, #504]	; (80040d0 <main+0x668>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24
	kurtosis_of_abs_amplitude(&instAbs.number[0], &ft11.number, frameSize);
 8003edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	487a      	ldr	r0, [pc, #488]	; (80040d4 <main+0x66c>)
 8003eea:	f7fd f86b 	bl	8000fc4 <kurtosis_of_abs_amplitude>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003eee:	4b78      	ldr	r3, [pc, #480]	; (80040d0 <main+0x668>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft11.bytes[0], &counter.bytes[0]);
 8003ef6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f9fd 	bl	8004300 <transmit_features>

	// Kurtosis of the Absolute Frequency
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003f06:	4b72      	ldr	r3, [pc, #456]	; (80040d0 <main+0x668>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24
	kurtosis_of_abs_freq(&instAbsFreq.number[0], &ft12.number, frameSize - 1);
 8003f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f12:	3b01      	subs	r3, #1
 8003f14:	461a      	mov	r2, r3
 8003f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	486f      	ldr	r0, [pc, #444]	; (80040dc <main+0x674>)
 8003f1e:	f7fd f98f 	bl	8001240 <kurtosis_of_abs_freq>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003f22:	4b6b      	ldr	r3, [pc, #428]	; (80040d0 <main+0x668>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft12.bytes[0], &counter.bytes[0]);
 8003f2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f9e3 	bl	8004300 <transmit_features>

	// Cumulant 20
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003f3a:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <main+0x668>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_20(&rxBuffer.number[0], &ft13.number);
 8003f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f46:	4619      	mov	r1, r3
 8003f48:	4863      	ldr	r0, [pc, #396]	; (80040d8 <main+0x670>)
 8003f4a:	f7ff fa4d 	bl	80033e8 <cumulant_20>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003f4e:	4b60      	ldr	r3, [pc, #384]	; (80040d0 <main+0x668>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft13.bytes[0], &counter.bytes[0]);
 8003f56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f9cd 	bl	8004300 <transmit_features>

	// Cumulant 21
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003f66:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <main+0x668>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_21(&rxBuffer.number[0], &ft14.number);
 8003f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f72:	4619      	mov	r1, r3
 8003f74:	4858      	ldr	r0, [pc, #352]	; (80040d8 <main+0x670>)
 8003f76:	f7ff fa44 	bl	8003402 <cumulant_21>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003f7a:	4b55      	ldr	r3, [pc, #340]	; (80040d0 <main+0x668>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft14.bytes[0], &counter.bytes[0]);
 8003f82:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f9b7 	bl	8004300 <transmit_features>

	// Cumulant 40
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003f92:	4b4f      	ldr	r3, [pc, #316]	; (80040d0 <main+0x668>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_40(&rxBuffer.number[0], &ft15.number);
 8003f9a:	f107 0320 	add.w	r3, r7, #32
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	484d      	ldr	r0, [pc, #308]	; (80040d8 <main+0x670>)
 8003fa2:	f7ff fa3b 	bl	800341c <cumulant_40>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003fa6:	4b4a      	ldr	r3, [pc, #296]	; (80040d0 <main+0x668>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft15.bytes[0], &counter.bytes[0]);
 8003fae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fb2:	f107 0320 	add.w	r3, r7, #32
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f9a1 	bl	8004300 <transmit_features>

	// Cumulant 41
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003fbe:	4b44      	ldr	r3, [pc, #272]	; (80040d0 <main+0x668>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_41(&rxBuffer.number[0], &ft16.number);
 8003fc6:	f107 031c 	add.w	r3, r7, #28
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4842      	ldr	r0, [pc, #264]	; (80040d8 <main+0x670>)
 8003fce:	f7ff fa4d 	bl	800346c <cumulant_41>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003fd2:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <main+0x668>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft16.bytes[0], &counter.bytes[0]);
 8003fda:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 f98b 	bl	8004300 <transmit_features>

	// Cumulant 42
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8003fea:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <main+0x668>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_42(&rxBuffer.number[0], &ft17.number);
 8003ff2:	f107 0318 	add.w	r3, r7, #24
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4837      	ldr	r0, [pc, #220]	; (80040d8 <main+0x670>)
 8003ffa:	f7ff fa65 	bl	80034c8 <cumulant_42>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8003ffe:	4b34      	ldr	r3, [pc, #208]	; (80040d0 <main+0x668>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft17.bytes[0], &counter.bytes[0]);
 8004006:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800400a:	f107 0318 	add.w	r3, r7, #24
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f975 	bl	8004300 <transmit_features>

	// Cumulant 60
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <main+0x668>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_60(&rxBuffer.number[0], &ft18.number);
 800401e:	f107 0314 	add.w	r3, r7, #20
 8004022:	4619      	mov	r1, r3
 8004024:	482c      	ldr	r0, [pc, #176]	; (80040d8 <main+0x670>)
 8004026:	f7ff fa89 	bl	800353c <cumulant_60>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 800402a:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <main+0x668>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft18.bytes[0], &counter.bytes[0]);
 8004032:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004036:	f107 0314 	add.w	r3, r7, #20
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f95f 	bl	8004300 <transmit_features>

	// Cumulant 61
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <main+0x668>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2200      	movs	r2, #0
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_61(&rxBuffer.number[0], &ft19.number);
 800404a:	f107 0310 	add.w	r3, r7, #16
 800404e:	4619      	mov	r1, r3
 8004050:	4821      	ldr	r0, [pc, #132]	; (80040d8 <main+0x670>)
 8004052:	f7ff fab1 	bl	80035b8 <cumulant_61>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <main+0x668>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft19.bytes[0], &counter.bytes[0]);
 800405e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004062:	f107 0310 	add.w	r3, r7, #16
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f949 	bl	8004300 <transmit_features>

	// Cumulant 62
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800406e:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <main+0x668>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_62(&rxBuffer.number[0], &ft20.number);
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	4619      	mov	r1, r3
 800407c:	4816      	ldr	r0, [pc, #88]	; (80040d8 <main+0x670>)
 800407e:	f7ff faf1 	bl	8003664 <cumulant_62>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <main+0x668>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft20.bytes[0], &counter.bytes[0]);
 800408a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800408e:	f107 030c 	add.w	r3, r7, #12
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f933 	bl	8004300 <transmit_features>

	// Cumulant 63
	__HAL_TIM_SET_COUNTER(&htim2, 0x0U);
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <main+0x668>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2200      	movs	r2, #0
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24
	cumulant_63(&rxBuffer.number[0], &ft21.number);
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	4619      	mov	r1, r3
 80040a8:	480b      	ldr	r0, [pc, #44]	; (80040d8 <main+0x670>)
 80040aa:	f7ff fb55 	bl	8003758 <cumulant_63>
	counter.number = __HAL_TIM_GET_COUNTER(&htim2);
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <main+0x668>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	663b      	str	r3, [r7, #96]	; 0x60
	transmit_features(&ft21.bytes[0], &counter.bytes[0]);
 80040b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f91d 	bl	8004300 <transmit_features>

	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	clear_leds();
 80040c6:	f000 f8bd 	bl	8004244 <clear_leds>
	while (1)
	{
		blink_orange_slow();
 80040ca:	f000 f8eb 	bl	80042a4 <blink_orange_slow>
 80040ce:	e7fc      	b.n	80040ca <main+0x662>
 80040d0:	2401577c 	.word	0x2401577c
 80040d4:	2400820c 	.word	0x2400820c
 80040d8:	2400e82c 	.word	0x2400e82c
 80040dc:	240001fc 	.word	0x240001fc

080040e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b0cc      	sub	sp, #304	; 0x130
 80040e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80040ea:	224c      	movs	r2, #76	; 0x4c
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f007 fafd 	bl	800b6ee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040f8:	2220      	movs	r2, #32
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f007 faf6 	bl	800b6ee <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004102:	f107 0308 	add.w	r3, r7, #8
 8004106:	4618      	mov	r0, r3
 8004108:	23bc      	movs	r3, #188	; 0xbc
 800410a:	461a      	mov	r2, r3
 800410c:	2100      	movs	r1, #0
 800410e:	f007 faee 	bl	800b6ee <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8004112:	2004      	movs	r0, #4
 8004114:	f001 f98e 	bl	8005434 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <SystemClock_Config+0x15c>)
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	4a46      	ldr	r2, [pc, #280]	; (800423c <SystemClock_Config+0x15c>)
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	62d3      	str	r3, [r2, #44]	; 0x2c
 800412a:	4b44      	ldr	r3, [pc, #272]	; (800423c <SystemClock_Config+0x15c>)
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	f003 0201 	and.w	r2, r3, #1
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	4b42      	ldr	r3, [pc, #264]	; (8004240 <SystemClock_Config+0x160>)
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	4a41      	ldr	r2, [pc, #260]	; (8004240 <SystemClock_Config+0x160>)
 800413c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004140:	6193      	str	r3, [r2, #24]
 8004142:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <SystemClock_Config+0x160>)
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004152:	bf00      	nop
 8004154:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <SystemClock_Config+0x160>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800415c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004160:	d1f8      	bne.n	8004154 <SystemClock_Config+0x74>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004162:	2302      	movs	r3, #2
 8004164:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004168:	2301      	movs	r3, #1
 800416a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800416e:	2340      	movs	r3, #64	; 0x40
 8004170:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004174:	2302      	movs	r3, #2
 8004176:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004180:	2304      	movs	r3, #4
 8004182:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 50;
 8004186:	2332      	movs	r3, #50	; 0x32
 8004188:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 800418c:	2302      	movs	r3, #2
 800418e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8004192:	2302      	movs	r3, #2
 8004194:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004198:	2302      	movs	r3, #2
 800419a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800419e:	230c      	movs	r3, #12
 80041a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 f997 	bl	80054e8 <HAL_RCC_OscConfig>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 80041c0:	f000 f970 	bl	80044a4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041c4:	233f      	movs	r3, #63	; 0x3f
 80041c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041ca:	2303      	movs	r3, #3
 80041cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80041d0:	2300      	movs	r3, #0
 80041d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80041d6:	2308      	movs	r3, #8
 80041d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80041e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041fa:	2102      	movs	r1, #2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fd83 	bl	8005d08 <HAL_RCC_ClockConfig>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <SystemClock_Config+0x12c>
	{
		Error_Handler();
 8004208:	f000 f94c 	bl	80044a4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800420c:	f107 0308 	add.w	r3, r7, #8
 8004210:	2202      	movs	r2, #2
 8004212:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	2203      	movs	r2, #3
 800421a:	675a      	str	r2, [r3, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800421c:	f107 0308 	add.w	r3, r7, #8
 8004220:	4618      	mov	r0, r3
 8004222:	f002 f8f5 	bl	8006410 <HAL_RCCEx_PeriphCLKConfig>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <SystemClock_Config+0x150>
	{
		Error_Handler();
 800422c:	f000 f93a 	bl	80044a4 <Error_Handler>
	}
}
 8004230:	bf00      	nop
 8004232:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	58000400 	.word	0x58000400
 8004240:	58024800 	.word	0x58024800

08004244 <clear_leds>:

/* USER CODE BEGIN 4 */
void clear_leds(){
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8004248:	2200      	movs	r2, #0
 800424a:	2101      	movs	r1, #1
 800424c:	4807      	ldr	r0, [pc, #28]	; (800426c <clear_leds+0x28>)
 800424e:	f001 f8a9 	bl	80053a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 8004252:	2200      	movs	r2, #0
 8004254:	2102      	movs	r1, #2
 8004256:	4806      	ldr	r0, [pc, #24]	; (8004270 <clear_leds+0x2c>)
 8004258:	f001 f8a4 	bl	80053a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 800425c:	2200      	movs	r2, #0
 800425e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004262:	4802      	ldr	r0, [pc, #8]	; (800426c <clear_leds+0x28>)
 8004264:	f001 f89e 	bl	80053a4 <HAL_GPIO_WritePin>
}
 8004268:	bf00      	nop
 800426a:	bd80      	pop	{r7, pc}
 800426c:	58020400 	.word	0x58020400
 8004270:	58021000 	.word	0x58021000

08004274 <blink_red_fast>:
void light_leds(){
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
}
void blink_red_fast(){
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8004278:	2200      	movs	r2, #0
 800427a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800427e:	4808      	ldr	r0, [pc, #32]	; (80042a0 <blink_red_fast+0x2c>)
 8004280:	f001 f890 	bl	80053a4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004284:	2032      	movs	r0, #50	; 0x32
 8004286:	f000 fb5b 	bl	8004940 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800428a:	2201      	movs	r2, #1
 800428c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004290:	4803      	ldr	r0, [pc, #12]	; (80042a0 <blink_red_fast+0x2c>)
 8004292:	f001 f887 	bl	80053a4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004296:	2032      	movs	r0, #50	; 0x32
 8004298:	f000 fb52 	bl	8004940 <HAL_Delay>
}
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	58020400 	.word	0x58020400

080042a4 <blink_orange_slow>:
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_orange_slow(){
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_RESET);
 80042a8:	2200      	movs	r2, #0
 80042aa:	2102      	movs	r1, #2
 80042ac:	4808      	ldr	r0, [pc, #32]	; (80042d0 <blink_orange_slow+0x2c>)
 80042ae:	f001 f879 	bl	80053a4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80042b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042b6:	f000 fb43 	bl	8004940 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, GPIO_PIN_SET);
 80042ba:	2201      	movs	r2, #1
 80042bc:	2102      	movs	r1, #2
 80042be:	4804      	ldr	r0, [pc, #16]	; (80042d0 <blink_orange_slow+0x2c>)
 80042c0:	f001 f870 	bl	80053a4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80042c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042c8:	f000 fb3a 	bl	8004940 <HAL_Delay>
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	58021000 	.word	0x58021000

080042d4 <blink_green>:
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
}
void blink_green(){
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80042d8:	2200      	movs	r2, #0
 80042da:	2101      	movs	r1, #1
 80042dc:	4807      	ldr	r0, [pc, #28]	; (80042fc <blink_green+0x28>)
 80042de:	f001 f861 	bl	80053a4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80042e2:	20c8      	movs	r0, #200	; 0xc8
 80042e4:	f000 fb2c 	bl	8004940 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80042e8:	2201      	movs	r2, #1
 80042ea:	2101      	movs	r1, #1
 80042ec:	4803      	ldr	r0, [pc, #12]	; (80042fc <blink_green+0x28>)
 80042ee:	f001 f859 	bl	80053a4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80042f2:	20c8      	movs	r0, #200	; 0xc8
 80042f4:	f000 fb24 	bl	8004940 <HAL_Delay>
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	58020400 	.word	0x58020400

08004300 <transmit_features>:
void resetDataBuffer(uint8_t *dataBuffer){
	for(uint16_t i = 1; i < 8192; i++){
		dataBuffer[i] = 0;
	}
}
void transmit_features(uint8_t *value, uint8_t *counter){
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 800430a:	4825      	ldr	r0, [pc, #148]	; (80043a0 <transmit_features+0xa0>)
 800430c:	f005 f81e 	bl	800934c <UART_CheckIdleState>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d13f      	bne.n	8004396 <transmit_features+0x96>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 8004316:	2204      	movs	r2, #4
 8004318:	4922      	ldr	r1, [pc, #136]	; (80043a4 <transmit_features+0xa4>)
 800431a:	4821      	ldr	r0, [pc, #132]	; (80043a0 <transmit_features+0xa0>)
 800431c:	f003 fede 	bl	80080dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004320:	e001      	b.n	8004326 <transmit_features+0x26>
			blink_red_fast();
 8004322:	f7ff ffa7 	bl	8004274 <blink_red_fast>
		while(UartReady != SET){
 8004326:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <transmit_features+0xa8>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d1f8      	bne.n	8004322 <transmit_features+0x22>
		}
		UartReady = RESET;
 8004330:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <transmit_features+0xa8>)
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &value[0], 4);
 8004336:	2204      	movs	r2, #4
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4819      	ldr	r0, [pc, #100]	; (80043a0 <transmit_features+0xa0>)
 800433c:	f003 fece 	bl	80080dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004340:	e001      	b.n	8004346 <transmit_features+0x46>
			blink_red_fast();
 8004342:	f7ff ff97 	bl	8004274 <blink_red_fast>
		while(UartReady != SET){
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <transmit_features+0xa8>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d1f8      	bne.n	8004342 <transmit_features+0x42>
		}
		UartReady = RESET;
 8004350:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <transmit_features+0xa8>)
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 8004356:	2204      	movs	r2, #4
 8004358:	6839      	ldr	r1, [r7, #0]
 800435a:	4811      	ldr	r0, [pc, #68]	; (80043a0 <transmit_features+0xa0>)
 800435c:	f003 febe 	bl	80080dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004360:	e001      	b.n	8004366 <transmit_features+0x66>
			blink_red_fast();
 8004362:	f7ff ff87 	bl	8004274 <blink_red_fast>
		while(UartReady != SET){
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <transmit_features+0xa8>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d1f8      	bne.n	8004362 <transmit_features+0x62>
		}
		UartReady = RESET;
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <transmit_features+0xa8>)
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 8004376:	2204      	movs	r2, #4
 8004378:	490c      	ldr	r1, [pc, #48]	; (80043ac <transmit_features+0xac>)
 800437a:	4809      	ldr	r0, [pc, #36]	; (80043a0 <transmit_features+0xa0>)
 800437c:	f003 feae 	bl	80080dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004380:	e001      	b.n	8004386 <transmit_features+0x86>
			blink_red_fast();
 8004382:	f7ff ff77 	bl	8004274 <blink_red_fast>
		while(UartReady != SET){
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <transmit_features+0xa8>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d1f8      	bne.n	8004382 <transmit_features+0x82>
		}
		UartReady = RESET;
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <transmit_features+0xa8>)
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
	}
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	240157c8 	.word	0x240157c8
 80043a4:	0800effc 	.word	0x0800effc
 80043a8:	240021fd 	.word	0x240021fd
 80043ac:	0800f000 	.word	0x0800f000

080043b0 <transmit_array>:
void transmit_array(uint8_t *array, uint16_t size, uint8_t *counter){
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	460b      	mov	r3, r1
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	817b      	strh	r3, [r7, #10]
	if(UART_CheckIdleState(&huart3) == HAL_OK){
 80043be:	4825      	ldr	r0, [pc, #148]	; (8004454 <transmit_array+0xa4>)
 80043c0:	f004 ffc4 	bl	800934c <UART_CheckIdleState>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d140      	bne.n	800444c <transmit_array+0x9c>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txHead[0], 4);
 80043ca:	2204      	movs	r2, #4
 80043cc:	4922      	ldr	r1, [pc, #136]	; (8004458 <transmit_array+0xa8>)
 80043ce:	4821      	ldr	r0, [pc, #132]	; (8004454 <transmit_array+0xa4>)
 80043d0:	f003 fe84 	bl	80080dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80043d4:	e001      	b.n	80043da <transmit_array+0x2a>
			blink_red_fast();
 80043d6:	f7ff ff4d 	bl	8004274 <blink_red_fast>
		while(UartReady != SET){
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <transmit_array+0xac>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d1f8      	bne.n	80043d6 <transmit_array+0x26>
		}
		UartReady = RESET;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <transmit_array+0xac>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &array[0], size);
 80043ea:	897b      	ldrh	r3, [r7, #10]
 80043ec:	461a      	mov	r2, r3
 80043ee:	68f9      	ldr	r1, [r7, #12]
 80043f0:	4818      	ldr	r0, [pc, #96]	; (8004454 <transmit_array+0xa4>)
 80043f2:	f003 fe73 	bl	80080dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 80043f6:	e001      	b.n	80043fc <transmit_array+0x4c>
			blink_red_fast();
 80043f8:	f7ff ff3c 	bl	8004274 <blink_red_fast>
		while(UartReady != SET){
 80043fc:	4b17      	ldr	r3, [pc, #92]	; (800445c <transmit_array+0xac>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d1f8      	bne.n	80043f8 <transmit_array+0x48>
		}
		UartReady = RESET;
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <transmit_array+0xac>)
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &counter[0], 4);
 800440c:	2204      	movs	r2, #4
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4810      	ldr	r0, [pc, #64]	; (8004454 <transmit_array+0xa4>)
 8004412:	f003 fe63 	bl	80080dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004416:	e001      	b.n	800441c <transmit_array+0x6c>
			blink_red_fast();
 8004418:	f7ff ff2c 	bl	8004274 <blink_red_fast>
		while(UartReady != SET){
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <transmit_array+0xac>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d1f8      	bne.n	8004418 <transmit_array+0x68>
		}
		UartReady = RESET;
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <transmit_array+0xac>)
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &txTail[0], 4);
 800442c:	2204      	movs	r2, #4
 800442e:	490c      	ldr	r1, [pc, #48]	; (8004460 <transmit_array+0xb0>)
 8004430:	4808      	ldr	r0, [pc, #32]	; (8004454 <transmit_array+0xa4>)
 8004432:	f003 fe53 	bl	80080dc <HAL_UART_Transmit_IT>
		while(UartReady != SET){
 8004436:	e001      	b.n	800443c <transmit_array+0x8c>
			blink_red_fast();
 8004438:	f7ff ff1c 	bl	8004274 <blink_red_fast>
		while(UartReady != SET){
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <transmit_array+0xac>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d1f8      	bne.n	8004438 <transmit_array+0x88>
		}
		UartReady = RESET;
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <transmit_array+0xac>)
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
	}
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	240157c8 	.word	0x240157c8
 8004458:	0800effc 	.word	0x0800effc
 800445c:	240021fd 	.word	0x240021fd
 8004460:	0800f000 	.word	0x0800f000

08004464 <HAL_UART_TxCpltCallback>:
		HAL_UART_Transmit(&huart3, (uint8_t*) &transmitBuffer[0], 50, 100);
	}
	received = 0;
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart3){
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <HAL_UART_TxCpltCallback+0x1c>)
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	240021fd 	.word	0x240021fd

08004484 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <HAL_UART_RxCpltCallback+0x1c>)
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	240021fd 	.word	0x240021fd

080044a4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <HAL_MspInit+0x30>)
 80044bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044c0:	4a08      	ldr	r2, [pc, #32]	; (80044e4 <HAL_MspInit+0x30>)
 80044c2:	f043 0302 	orr.w	r3, r3, #2
 80044c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_MspInit+0x30>)
 80044cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	58024400 	.word	0x58024400

080044e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044f6:	b480      	push	{r7}
 80044f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044fa:	e7fe      	b.n	80044fa <HardFault_Handler+0x4>

080044fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004500:	e7fe      	b.n	8004500 <MemManage_Handler+0x4>

08004502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004506:	e7fe      	b.n	8004506 <BusFault_Handler+0x4>

08004508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800450c:	e7fe      	b.n	800450c <UsageFault_Handler+0x4>

0800450e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800452a:	b480      	push	{r7}
 800452c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800452e:	bf00      	nop
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800453c:	f000 f9e0 	bl	8004900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}

08004544 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004548:	4802      	ldr	r0, [pc, #8]	; (8004554 <USART3_IRQHandler+0x10>)
 800454a:	f003 ff23 	bl	8008394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	240157c8 	.word	0x240157c8

08004558 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <_sbrk+0x50>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <_sbrk+0x16>
		heap_end = &end;
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <_sbrk+0x50>)
 800456a:	4a10      	ldr	r2, [pc, #64]	; (80045ac <_sbrk+0x54>)
 800456c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800456e:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <_sbrk+0x50>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <_sbrk+0x50>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	466a      	mov	r2, sp
 800457e:	4293      	cmp	r3, r2
 8004580:	d907      	bls.n	8004592 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004582:	f007 f86f 	bl	800b664 <__errno>
 8004586:	4602      	mov	r2, r0
 8004588:	230c      	movs	r3, #12
 800458a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800458c:	f04f 33ff 	mov.w	r3, #4294967295
 8004590:	e006      	b.n	80045a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <_sbrk+0x50>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4413      	add	r3, r2
 800459a:	4a03      	ldr	r2, [pc, #12]	; (80045a8 <_sbrk+0x50>)
 800459c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800459e:	68fb      	ldr	r3, [r7, #12]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	24002200 	.word	0x24002200
 80045ac:	24015860 	.word	0x24015860

080045b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045b6:	f107 0310 	add.w	r3, r7, #16
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	605a      	str	r2, [r3, #4]
 80045c0:	609a      	str	r2, [r3, #8]
 80045c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <MX_TIM2_Init+0x98>)
 80045d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80045d6:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <MX_TIM2_Init+0x98>)
 80045d8:	2200      	movs	r2, #0
 80045da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <MX_TIM2_Init+0x98>)
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80045e2:	4b19      	ldr	r3, [pc, #100]	; (8004648 <MX_TIM2_Init+0x98>)
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <MX_TIM2_Init+0x98>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045f0:	4b15      	ldr	r3, [pc, #84]	; (8004648 <MX_TIM2_Init+0x98>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045f6:	4814      	ldr	r0, [pc, #80]	; (8004648 <MX_TIM2_Init+0x98>)
 80045f8:	f003 fa0a 	bl	8007a10 <HAL_TIM_Base_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004602:	f7ff ff4f 	bl	80044a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800460a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800460c:	f107 0310 	add.w	r3, r7, #16
 8004610:	4619      	mov	r1, r3
 8004612:	480d      	ldr	r0, [pc, #52]	; (8004648 <MX_TIM2_Init+0x98>)
 8004614:	f003 fa82 	bl	8007b1c <HAL_TIM_ConfigClockSource>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800461e:	f7ff ff41 	bl	80044a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4806      	ldr	r0, [pc, #24]	; (8004648 <MX_TIM2_Init+0x98>)
 8004630:	f003 fc7c 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800463a:	f7ff ff33 	bl	80044a4 <Error_Handler>
  }

}
 800463e:	bf00      	nop
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2401577c 	.word	0x2401577c

0800464c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d10e      	bne.n	800467c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_TIM_Base_MspInit+0x3c>)
 8004660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004664:	4a08      	ldr	r2, [pc, #32]	; (8004688 <HAL_TIM_Base_MspInit+0x3c>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_TIM_Base_MspInit+0x3c>)
 8004670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	58024400 	.word	0x58024400

0800468c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004690:	4b22      	ldr	r3, [pc, #136]	; (800471c <MX_USART3_UART_Init+0x90>)
 8004692:	4a23      	ldr	r2, [pc, #140]	; (8004720 <MX_USART3_UART_Init+0x94>)
 8004694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004696:	4b21      	ldr	r3, [pc, #132]	; (800471c <MX_USART3_UART_Init+0x90>)
 8004698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800469c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800469e:	4b1f      	ldr	r3, [pc, #124]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046a4:	4b1d      	ldr	r3, [pc, #116]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046b2:	220c      	movs	r2, #12
 80046b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046b6:	4b19      	ldr	r3, [pc, #100]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046bc:	4b17      	ldr	r3, [pc, #92]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046be:	2200      	movs	r2, #0
 80046c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046d4:	4811      	ldr	r0, [pc, #68]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046d6:	f003 fcb1 	bl	800803c <HAL_UART_Init>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80046e0:	f7ff fee0 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046e4:	2100      	movs	r1, #0
 80046e6:	480d      	ldr	r0, [pc, #52]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046e8:	f005 fa6d 	bl	8009bc6 <HAL_UARTEx_SetTxFifoThreshold>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80046f2:	f7ff fed7 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046f6:	2100      	movs	r1, #0
 80046f8:	4808      	ldr	r0, [pc, #32]	; (800471c <MX_USART3_UART_Init+0x90>)
 80046fa:	f005 faa2 	bl	8009c42 <HAL_UARTEx_SetRxFifoThreshold>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004704:	f7ff fece 	bl	80044a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004708:	4804      	ldr	r0, [pc, #16]	; (800471c <MX_USART3_UART_Init+0x90>)
 800470a:	f005 fa23 	bl	8009b54 <HAL_UARTEx_DisableFifoMode>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004714:	f7ff fec6 	bl	80044a4 <Error_Handler>
  }

}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}
 800471c:	240157c8 	.word	0x240157c8
 8004720:	40004800 	.word	0x40004800

08004724 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	f107 0314 	add.w	r3, r7, #20
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <HAL_UART_MspInit+0x98>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d136      	bne.n	80047b4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004746:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <HAL_UART_MspInit+0x9c>)
 8004748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800474c:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <HAL_UART_MspInit+0x9c>)
 800474e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004752:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004756:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <HAL_UART_MspInit+0x9c>)
 8004758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800475c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004764:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <HAL_UART_MspInit+0x9c>)
 8004766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800476a:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <HAL_UART_MspInit+0x9c>)
 800476c:	f043 0308 	orr.w	r3, r3, #8
 8004770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004774:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_UART_MspInit+0x9c>)
 8004776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004788:	2302      	movs	r3, #2
 800478a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004790:	2300      	movs	r3, #0
 8004792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004794:	2307      	movs	r3, #7
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	4619      	mov	r1, r3
 800479e:	4809      	ldr	r0, [pc, #36]	; (80047c4 <HAL_UART_MspInit+0xa0>)
 80047a0:	f000 fc50 	bl	8005044 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80047a4:	2200      	movs	r2, #0
 80047a6:	2100      	movs	r1, #0
 80047a8:	2027      	movs	r0, #39	; 0x27
 80047aa:	f000 f9d2 	bl	8004b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80047ae:	2027      	movs	r0, #39	; 0x27
 80047b0:	f000 f9e9 	bl	8004b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80047b4:	bf00      	nop
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40004800 	.word	0x40004800
 80047c0:	58024400 	.word	0x58024400
 80047c4:	58020c00 	.word	0x58020c00

080047c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80047c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004800 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80047cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80047ce:	e003      	b.n	80047d8 <LoopCopyDataInit>

080047d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80047d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80047d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80047d6:	3104      	adds	r1, #4

080047d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80047d8:	480b      	ldr	r0, [pc, #44]	; (8004808 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80047dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80047de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80047e0:	d3f6      	bcc.n	80047d0 <CopyDataInit>
  ldr  r2, =_sbss
 80047e2:	4a0b      	ldr	r2, [pc, #44]	; (8004810 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80047e4:	e002      	b.n	80047ec <LoopFillZerobss>

080047e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80047e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80047e8:	f842 3b04 	str.w	r3, [r2], #4

080047ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80047ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80047f0:	d3f9      	bcc.n	80047e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80047f2:	f7fb ffad 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047f6:	f006 ff3b 	bl	800b670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047fa:	f7ff f935 	bl	8003a68 <main>
  bx  lr    
 80047fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004800:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004804:	080150d8 	.word	0x080150d8
  ldr  r0, =_sdata
 8004808:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800480c:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 8004810:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 8004814:	2401585c 	.word	0x2401585c

08004818 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004818:	e7fe      	b.n	8004818 <ADC3_IRQHandler>
	...

0800481c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004822:	2003      	movs	r0, #3
 8004824:	f000 f98a 	bl	8004b3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004828:	f001 fc24 	bl	8006074 <HAL_RCC_GetSysClockFreq>
 800482c:	4601      	mov	r1, r0
 800482e:	4b15      	ldr	r3, [pc, #84]	; (8004884 <HAL_Init+0x68>)
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	4a13      	ldr	r2, [pc, #76]	; (8004888 <HAL_Init+0x6c>)
 800483a:	5cd3      	ldrb	r3, [r2, r3]
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	fa21 f303 	lsr.w	r3, r1, r3
 8004844:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <HAL_Init+0x68>)
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <HAL_Init+0x6c>)
 8004850:	5cd3      	ldrb	r3, [r2, r3]
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
 800485c:	4a0b      	ldr	r2, [pc, #44]	; (800488c <HAL_Init+0x70>)
 800485e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004860:	4a0b      	ldr	r2, [pc, #44]	; (8004890 <HAL_Init+0x74>)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004866:	2000      	movs	r0, #0
 8004868:	f000 f814 	bl	8004894 <HAL_InitTick>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e002      	b.n	800487c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004876:	f7ff fe1d 	bl	80044b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	58024400 	.word	0x58024400
 8004888:	0800efe8 	.word	0x0800efe8
 800488c:	24000004 	.word	0x24000004
 8004890:	24000000 	.word	0x24000000

08004894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800489c:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <HAL_InitTick+0x60>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e021      	b.n	80048ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_InitTick+0x64>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_InitTick+0x60>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	4619      	mov	r1, r3
 80048b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f96f 	bl	8004ba2 <HAL_SYSTICK_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00e      	b.n	80048ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b0f      	cmp	r3, #15
 80048d2:	d80a      	bhi.n	80048ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048d4:	2200      	movs	r2, #0
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	f000 f939 	bl	8004b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048e0:	4a06      	ldr	r2, [pc, #24]	; (80048fc <HAL_InitTick+0x68>)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	2400000c 	.word	0x2400000c
 80048f8:	24000000 	.word	0x24000000
 80048fc:	24000008 	.word	0x24000008

08004900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_IncTick+0x20>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_IncTick+0x24>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4413      	add	r3, r2
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <HAL_IncTick+0x24>)
 8004912:	6013      	str	r3, [r2, #0]
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	2400000c 	.word	0x2400000c
 8004924:	24015854 	.word	0x24015854

08004928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return uwTick;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <HAL_GetTick+0x14>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	24015854 	.word	0x24015854

08004940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004948:	f7ff ffee 	bl	8004928 <HAL_GetTick>
 800494c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d005      	beq.n	8004966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800495a:	4b09      	ldr	r3, [pc, #36]	; (8004980 <HAL_Delay+0x40>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004966:	bf00      	nop
 8004968:	f7ff ffde 	bl	8004928 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	429a      	cmp	r2, r3
 8004976:	d8f7      	bhi.n	8004968 <HAL_Delay+0x28>
  {
  }
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	2400000c 	.word	0x2400000c

08004984 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_GetREVID+0x14>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	0c1b      	lsrs	r3, r3, #16
}
 800498e:	4618      	mov	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	5c001000 	.word	0x5c001000

0800499c <__NVIC_SetPriorityGrouping>:
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <__NVIC_SetPriorityGrouping+0x40>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049b8:	4013      	ands	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ca:	4a04      	ldr	r2, [pc, #16]	; (80049dc <__NVIC_SetPriorityGrouping+0x40>)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	60d3      	str	r3, [r2, #12]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	e000ed00 	.word	0xe000ed00
 80049e0:	05fa0000 	.word	0x05fa0000

080049e4 <__NVIC_GetPriorityGrouping>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <__NVIC_GetPriorityGrouping+0x18>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 0307 	and.w	r3, r3, #7
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <__NVIC_EnableIRQ>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db0b      	blt.n	8004a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	4907      	ldr	r1, [pc, #28]	; (8004a38 <__NVIC_EnableIRQ+0x38>)
 8004a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2001      	movs	r0, #1
 8004a22:	fa00 f202 	lsl.w	r2, r0, r2
 8004a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000e100 	.word	0xe000e100

08004a3c <__NVIC_SetPriority>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	6039      	str	r1, [r7, #0]
 8004a46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db0a      	blt.n	8004a66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	490c      	ldr	r1, [pc, #48]	; (8004a88 <__NVIC_SetPriority+0x4c>)
 8004a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	440b      	add	r3, r1
 8004a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a64:	e00a      	b.n	8004a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4908      	ldr	r1, [pc, #32]	; (8004a8c <__NVIC_SetPriority+0x50>)
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	3b04      	subs	r3, #4
 8004a74:	0112      	lsls	r2, r2, #4
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	440b      	add	r3, r1
 8004a7a:	761a      	strb	r2, [r3, #24]
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	e000e100 	.word	0xe000e100
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <NVIC_EncodePriority>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f1c3 0307 	rsb	r3, r3, #7
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf28      	it	cs
 8004aae:	2304      	movcs	r3, #4
 8004ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d902      	bls.n	8004ac0 <NVIC_EncodePriority+0x30>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3b03      	subs	r3, #3
 8004abe:	e000      	b.n	8004ac2 <NVIC_EncodePriority+0x32>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43da      	mvns	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	43d9      	mvns	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae8:	4313      	orrs	r3, r2
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3724      	adds	r7, #36	; 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b08:	d301      	bcc.n	8004b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e00f      	b.n	8004b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b0e:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <SysTick_Config+0x40>)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b16:	210f      	movs	r1, #15
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	f7ff ff8e 	bl	8004a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <SysTick_Config+0x40>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <SysTick_Config+0x40>)
 8004b28:	2207      	movs	r2, #7
 8004b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	e000e010 	.word	0xe000e010

08004b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff29 	bl	800499c <__NVIC_SetPriorityGrouping>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b60:	f7ff ff40 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 8004b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	6978      	ldr	r0, [r7, #20]
 8004b6c:	f7ff ff90 	bl	8004a90 <NVIC_EncodePriority>
 8004b70:	4602      	mov	r2, r0
 8004b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ff5f 	bl	8004a3c <__NVIC_SetPriority>
}
 8004b7e:	bf00      	nop
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ff33 	bl	8004a00 <__NVIC_EnableIRQ>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff ffa4 	bl	8004af8 <SysTick_Config>
 8004bb0:	4603      	mov	r3, r0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e205      	b.n	8004fda <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d004      	beq.n	8004be4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2280      	movs	r2, #128	; 0x80
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e1fa      	b.n	8004fda <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a8c      	ldr	r2, [pc, #560]	; (8004e1c <HAL_DMA_Abort_IT+0x260>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d04a      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a8b      	ldr	r2, [pc, #556]	; (8004e20 <HAL_DMA_Abort_IT+0x264>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d045      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a89      	ldr	r2, [pc, #548]	; (8004e24 <HAL_DMA_Abort_IT+0x268>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d040      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a88      	ldr	r2, [pc, #544]	; (8004e28 <HAL_DMA_Abort_IT+0x26c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d03b      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a86      	ldr	r2, [pc, #536]	; (8004e2c <HAL_DMA_Abort_IT+0x270>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d036      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a85      	ldr	r2, [pc, #532]	; (8004e30 <HAL_DMA_Abort_IT+0x274>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d031      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a83      	ldr	r2, [pc, #524]	; (8004e34 <HAL_DMA_Abort_IT+0x278>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02c      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a82      	ldr	r2, [pc, #520]	; (8004e38 <HAL_DMA_Abort_IT+0x27c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d027      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a80      	ldr	r2, [pc, #512]	; (8004e3c <HAL_DMA_Abort_IT+0x280>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a7f      	ldr	r2, [pc, #508]	; (8004e40 <HAL_DMA_Abort_IT+0x284>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01d      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a7d      	ldr	r2, [pc, #500]	; (8004e44 <HAL_DMA_Abort_IT+0x288>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a7c      	ldr	r2, [pc, #496]	; (8004e48 <HAL_DMA_Abort_IT+0x28c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a7a      	ldr	r2, [pc, #488]	; (8004e4c <HAL_DMA_Abort_IT+0x290>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a79      	ldr	r2, [pc, #484]	; (8004e50 <HAL_DMA_Abort_IT+0x294>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a77      	ldr	r2, [pc, #476]	; (8004e54 <HAL_DMA_Abort_IT+0x298>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_DMA_Abort_IT+0xc8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a76      	ldr	r2, [pc, #472]	; (8004e58 <HAL_DMA_Abort_IT+0x29c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <HAL_DMA_Abort_IT+0xcc>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_DMA_Abort_IT+0xce>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d065      	beq.n	8004d5a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2204      	movs	r2, #4
 8004c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a60      	ldr	r2, [pc, #384]	; (8004e1c <HAL_DMA_Abort_IT+0x260>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d04a      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a5e      	ldr	r2, [pc, #376]	; (8004e20 <HAL_DMA_Abort_IT+0x264>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d045      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a5d      	ldr	r2, [pc, #372]	; (8004e24 <HAL_DMA_Abort_IT+0x268>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d040      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a5b      	ldr	r2, [pc, #364]	; (8004e28 <HAL_DMA_Abort_IT+0x26c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d03b      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a5a      	ldr	r2, [pc, #360]	; (8004e2c <HAL_DMA_Abort_IT+0x270>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d036      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a58      	ldr	r2, [pc, #352]	; (8004e30 <HAL_DMA_Abort_IT+0x274>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d031      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a57      	ldr	r2, [pc, #348]	; (8004e34 <HAL_DMA_Abort_IT+0x278>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02c      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a55      	ldr	r2, [pc, #340]	; (8004e38 <HAL_DMA_Abort_IT+0x27c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d027      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a54      	ldr	r2, [pc, #336]	; (8004e3c <HAL_DMA_Abort_IT+0x280>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a52      	ldr	r2, [pc, #328]	; (8004e40 <HAL_DMA_Abort_IT+0x284>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a51      	ldr	r2, [pc, #324]	; (8004e44 <HAL_DMA_Abort_IT+0x288>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a4f      	ldr	r2, [pc, #316]	; (8004e48 <HAL_DMA_Abort_IT+0x28c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a4e      	ldr	r2, [pc, #312]	; (8004e4c <HAL_DMA_Abort_IT+0x290>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a4c      	ldr	r2, [pc, #304]	; (8004e50 <HAL_DMA_Abort_IT+0x294>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a4b      	ldr	r2, [pc, #300]	; (8004e54 <HAL_DMA_Abort_IT+0x298>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x17a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a49      	ldr	r2, [pc, #292]	; (8004e58 <HAL_DMA_Abort_IT+0x29c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <HAL_DMA_Abort_IT+0x18c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e147      	b.n	8004fd8 <HAL_DMA_Abort_IT+0x41c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e13e      	b.n	8004fd8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 020e 	bic.w	r2, r2, #14
 8004d68:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2b      	ldr	r2, [pc, #172]	; (8004e1c <HAL_DMA_Abort_IT+0x260>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d04a      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a29      	ldr	r2, [pc, #164]	; (8004e20 <HAL_DMA_Abort_IT+0x264>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d045      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <HAL_DMA_Abort_IT+0x268>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d040      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a26      	ldr	r2, [pc, #152]	; (8004e28 <HAL_DMA_Abort_IT+0x26c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d03b      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a25      	ldr	r2, [pc, #148]	; (8004e2c <HAL_DMA_Abort_IT+0x270>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d036      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a23      	ldr	r2, [pc, #140]	; (8004e30 <HAL_DMA_Abort_IT+0x274>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d031      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a22      	ldr	r2, [pc, #136]	; (8004e34 <HAL_DMA_Abort_IT+0x278>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d02c      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a20      	ldr	r2, [pc, #128]	; (8004e38 <HAL_DMA_Abort_IT+0x27c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d027      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <HAL_DMA_Abort_IT+0x280>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d022      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <HAL_DMA_Abort_IT+0x284>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d01d      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	; (8004e44 <HAL_DMA_Abort_IT+0x288>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d018      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1a      	ldr	r2, [pc, #104]	; (8004e48 <HAL_DMA_Abort_IT+0x28c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <HAL_DMA_Abort_IT+0x290>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00e      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <HAL_DMA_Abort_IT+0x294>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d009      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <HAL_DMA_Abort_IT+0x298>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x24e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <HAL_DMA_Abort_IT+0x29c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d128      	bne.n	8004e5c <HAL_DMA_Abort_IT+0x2a0>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e027      	b.n	8004e6c <HAL_DMA_Abort_IT+0x2b0>
 8004e1c:	40020010 	.word	0x40020010
 8004e20:	40020028 	.word	0x40020028
 8004e24:	40020040 	.word	0x40020040
 8004e28:	40020058 	.word	0x40020058
 8004e2c:	40020070 	.word	0x40020070
 8004e30:	40020088 	.word	0x40020088
 8004e34:	400200a0 	.word	0x400200a0
 8004e38:	400200b8 	.word	0x400200b8
 8004e3c:	40020410 	.word	0x40020410
 8004e40:	40020428 	.word	0x40020428
 8004e44:	40020440 	.word	0x40020440
 8004e48:	40020458 	.word	0x40020458
 8004e4c:	40020470 	.word	0x40020470
 8004e50:	40020488 	.word	0x40020488
 8004e54:	400204a0 	.word	0x400204a0
 8004e58:	400204b8 	.word	0x400204b8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a5c      	ldr	r2, [pc, #368]	; (8004fe4 <HAL_DMA_Abort_IT+0x428>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d072      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a5b      	ldr	r2, [pc, #364]	; (8004fe8 <HAL_DMA_Abort_IT+0x42c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d06d      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a59      	ldr	r2, [pc, #356]	; (8004fec <HAL_DMA_Abort_IT+0x430>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d068      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a58      	ldr	r2, [pc, #352]	; (8004ff0 <HAL_DMA_Abort_IT+0x434>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d063      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a56      	ldr	r2, [pc, #344]	; (8004ff4 <HAL_DMA_Abort_IT+0x438>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d05e      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a55      	ldr	r2, [pc, #340]	; (8004ff8 <HAL_DMA_Abort_IT+0x43c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d059      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a53      	ldr	r2, [pc, #332]	; (8004ffc <HAL_DMA_Abort_IT+0x440>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d054      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a52      	ldr	r2, [pc, #328]	; (8005000 <HAL_DMA_Abort_IT+0x444>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d04f      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a50      	ldr	r2, [pc, #320]	; (8005004 <HAL_DMA_Abort_IT+0x448>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d04a      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a4f      	ldr	r2, [pc, #316]	; (8005008 <HAL_DMA_Abort_IT+0x44c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d045      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a4d      	ldr	r2, [pc, #308]	; (800500c <HAL_DMA_Abort_IT+0x450>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d040      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a4c      	ldr	r2, [pc, #304]	; (8005010 <HAL_DMA_Abort_IT+0x454>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d03b      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a4a      	ldr	r2, [pc, #296]	; (8005014 <HAL_DMA_Abort_IT+0x458>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d036      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a49      	ldr	r2, [pc, #292]	; (8005018 <HAL_DMA_Abort_IT+0x45c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d031      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a47      	ldr	r2, [pc, #284]	; (800501c <HAL_DMA_Abort_IT+0x460>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02c      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a46      	ldr	r2, [pc, #280]	; (8005020 <HAL_DMA_Abort_IT+0x464>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d027      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a44      	ldr	r2, [pc, #272]	; (8005024 <HAL_DMA_Abort_IT+0x468>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a43      	ldr	r2, [pc, #268]	; (8005028 <HAL_DMA_Abort_IT+0x46c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d01d      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a41      	ldr	r2, [pc, #260]	; (800502c <HAL_DMA_Abort_IT+0x470>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a40      	ldr	r2, [pc, #256]	; (8005030 <HAL_DMA_Abort_IT+0x474>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a3e      	ldr	r2, [pc, #248]	; (8005034 <HAL_DMA_Abort_IT+0x478>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a3d      	ldr	r2, [pc, #244]	; (8005038 <HAL_DMA_Abort_IT+0x47c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a3b      	ldr	r2, [pc, #236]	; (800503c <HAL_DMA_Abort_IT+0x480>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x3a0>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a3a      	ldr	r2, [pc, #232]	; (8005040 <HAL_DMA_Abort_IT+0x484>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_DMA_Abort_IT+0x3a4>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e000      	b.n	8004f62 <HAL_DMA_Abort_IT+0x3a6>
 8004f60:	2300      	movs	r3, #0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d028      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f74:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	2201      	movs	r2, #1
 8004f86:	409a      	lsls	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f94:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fb6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40020010 	.word	0x40020010
 8004fe8:	40020028 	.word	0x40020028
 8004fec:	40020040 	.word	0x40020040
 8004ff0:	40020058 	.word	0x40020058
 8004ff4:	40020070 	.word	0x40020070
 8004ff8:	40020088 	.word	0x40020088
 8004ffc:	400200a0 	.word	0x400200a0
 8005000:	400200b8 	.word	0x400200b8
 8005004:	40020410 	.word	0x40020410
 8005008:	40020428 	.word	0x40020428
 800500c:	40020440 	.word	0x40020440
 8005010:	40020458 	.word	0x40020458
 8005014:	40020470 	.word	0x40020470
 8005018:	40020488 	.word	0x40020488
 800501c:	400204a0 	.word	0x400204a0
 8005020:	400204b8 	.word	0x400204b8
 8005024:	58025408 	.word	0x58025408
 8005028:	5802541c 	.word	0x5802541c
 800502c:	58025430 	.word	0x58025430
 8005030:	58025444 	.word	0x58025444
 8005034:	58025458 	.word	0x58025458
 8005038:	5802546c 	.word	0x5802546c
 800503c:	58025480 	.word	0x58025480
 8005040:	58025494 	.word	0x58025494

08005044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005044:	b480      	push	{r7}
 8005046:	b089      	sub	sp, #36	; 0x24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005052:	4b89      	ldr	r3, [pc, #548]	; (8005278 <HAL_GPIO_Init+0x234>)
 8005054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005056:	e194      	b.n	8005382 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	2101      	movs	r1, #1
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	4013      	ands	r3, r2
 8005066:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8186 	beq.w	800537c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d00b      	beq.n	8005090 <HAL_GPIO_Init+0x4c>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d007      	beq.n	8005090 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005084:	2b11      	cmp	r3, #17
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b12      	cmp	r3, #18
 800508e:	d130      	bne.n	80050f2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	2203      	movs	r2, #3
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050c6:	2201      	movs	r2, #1
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43db      	mvns	r3, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4013      	ands	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	f003 0201 	and.w	r2, r3, #1
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	2203      	movs	r2, #3
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4313      	orrs	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0xee>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b12      	cmp	r3, #18
 8005130:	d123      	bne.n	800517a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	08da      	lsrs	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3208      	adds	r2, #8
 800513a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	220f      	movs	r2, #15
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	08da      	lsrs	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3208      	adds	r2, #8
 8005174:	69b9      	ldr	r1, [r7, #24]
 8005176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	2203      	movs	r2, #3
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 0203 	and.w	r2, r3, #3
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80e0 	beq.w	800537c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051bc:	4b2f      	ldr	r3, [pc, #188]	; (800527c <HAL_GPIO_Init+0x238>)
 80051be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051c2:	4a2e      	ldr	r2, [pc, #184]	; (800527c <HAL_GPIO_Init+0x238>)
 80051c4:	f043 0302 	orr.w	r3, r3, #2
 80051c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051cc:	4b2b      	ldr	r3, [pc, #172]	; (800527c <HAL_GPIO_Init+0x238>)
 80051ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051da:	4a29      	ldr	r2, [pc, #164]	; (8005280 <HAL_GPIO_Init+0x23c>)
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	089b      	lsrs	r3, r3, #2
 80051e0:	3302      	adds	r3, #2
 80051e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	220f      	movs	r2, #15
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	43db      	mvns	r3, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4013      	ands	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a20      	ldr	r2, [pc, #128]	; (8005284 <HAL_GPIO_Init+0x240>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d052      	beq.n	80052ac <HAL_GPIO_Init+0x268>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <HAL_GPIO_Init+0x244>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d031      	beq.n	8005272 <HAL_GPIO_Init+0x22e>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1e      	ldr	r2, [pc, #120]	; (800528c <HAL_GPIO_Init+0x248>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d02b      	beq.n	800526e <HAL_GPIO_Init+0x22a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <HAL_GPIO_Init+0x24c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d025      	beq.n	800526a <HAL_GPIO_Init+0x226>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <HAL_GPIO_Init+0x250>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01f      	beq.n	8005266 <HAL_GPIO_Init+0x222>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_GPIO_Init+0x254>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d019      	beq.n	8005262 <HAL_GPIO_Init+0x21e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_GPIO_Init+0x258>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_GPIO_Init+0x21a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_GPIO_Init+0x25c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00d      	beq.n	800525a <HAL_GPIO_Init+0x216>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_GPIO_Init+0x260>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <HAL_GPIO_Init+0x212>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <HAL_GPIO_Init+0x264>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d101      	bne.n	8005252 <HAL_GPIO_Init+0x20e>
 800524e:	2309      	movs	r3, #9
 8005250:	e02d      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 8005252:	230a      	movs	r3, #10
 8005254:	e02b      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 8005256:	2308      	movs	r3, #8
 8005258:	e029      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 800525a:	2307      	movs	r3, #7
 800525c:	e027      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 800525e:	2306      	movs	r3, #6
 8005260:	e025      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 8005262:	2305      	movs	r3, #5
 8005264:	e023      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 8005266:	2304      	movs	r3, #4
 8005268:	e021      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 800526a:	2303      	movs	r3, #3
 800526c:	e01f      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 800526e:	2302      	movs	r3, #2
 8005270:	e01d      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 8005272:	2301      	movs	r3, #1
 8005274:	e01b      	b.n	80052ae <HAL_GPIO_Init+0x26a>
 8005276:	bf00      	nop
 8005278:	58000080 	.word	0x58000080
 800527c:	58024400 	.word	0x58024400
 8005280:	58000400 	.word	0x58000400
 8005284:	58020000 	.word	0x58020000
 8005288:	58020400 	.word	0x58020400
 800528c:	58020800 	.word	0x58020800
 8005290:	58020c00 	.word	0x58020c00
 8005294:	58021000 	.word	0x58021000
 8005298:	58021400 	.word	0x58021400
 800529c:	58021800 	.word	0x58021800
 80052a0:	58021c00 	.word	0x58021c00
 80052a4:	58022000 	.word	0x58022000
 80052a8:	58022400 	.word	0x58022400
 80052ac:	2300      	movs	r3, #0
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	f002 0203 	and.w	r2, r2, #3
 80052b4:	0092      	lsls	r2, r2, #2
 80052b6:	4093      	lsls	r3, r2
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052be:	4938      	ldr	r1, [pc, #224]	; (80053a0 <HAL_GPIO_Init+0x35c>)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	089b      	lsrs	r3, r3, #2
 80052c4:	3302      	adds	r3, #2
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	43db      	mvns	r3, r3
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	4013      	ands	r3, r2
 80052da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	43db      	mvns	r3, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4013      	ands	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	43db      	mvns	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4013      	ands	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	43db      	mvns	r3, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4013      	ands	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	3301      	adds	r3, #1
 8005380:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	f47f ae63 	bne.w	8005058 <HAL_GPIO_Init+0x14>
  }
}
 8005392:	bf00      	nop
 8005394:	3724      	adds	r7, #36	; 0x24
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	58000400 	.word	0x58000400

080053a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	807b      	strh	r3, [r7, #2]
 80053b0:	4613      	mov	r3, r2
 80053b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053b4:	787b      	ldrb	r3, [r7, #1]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053c0:	e003      	b.n	80053ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053c2:	887b      	ldrh	r3, [r7, #2]
 80053c4:	041a      	lsls	r2, r3, #16
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	619a      	str	r2, [r3, #24]
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80053e0:	4a08      	ldr	r2, [pc, #32]	; (8005404 <HAL_HSEM_FastTake+0x2c>)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3320      	adds	r3, #32
 80053e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ea:	4a07      	ldr	r2, [pc, #28]	; (8005408 <HAL_HSEM_FastTake+0x30>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	e000      	b.n	80053f6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	58026400 	.word	0x58026400
 8005408:	80000300 	.word	0x80000300

0800540c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005416:	4906      	ldr	r1, [pc, #24]	; (8005430 <HAL_HSEM_Release+0x24>)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	58026400 	.word	0x58026400

08005434 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800543c:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	2b06      	cmp	r3, #6
 8005446:	d00a      	beq.n	800545e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005448:	4b26      	ldr	r3, [pc, #152]	; (80054e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	d001      	beq.n	800545a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e040      	b.n	80054dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	e03e      	b.n	80054dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800545e:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005466:	491f      	ldr	r1, [pc, #124]	; (80054e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4313      	orrs	r3, r2
 800546c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800546e:	f7ff fa5b 	bl	8004928 <HAL_GetTick>
 8005472:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005474:	e009      	b.n	800548a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005476:	f7ff fa57 	bl	8004928 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005484:	d901      	bls.n	800548a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e028      	b.n	80054dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800548a:	4b16      	ldr	r3, [pc, #88]	; (80054e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005496:	d1ee      	bne.n	8005476 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b1e      	cmp	r3, #30
 800549c:	d008      	beq.n	80054b0 <HAL_PWREx_ConfigSupply+0x7c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b2e      	cmp	r3, #46	; 0x2e
 80054a2:	d005      	beq.n	80054b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b1d      	cmp	r3, #29
 80054a8:	d002      	beq.n	80054b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b2d      	cmp	r3, #45	; 0x2d
 80054ae:	d114      	bne.n	80054da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80054b0:	f7ff fa3a 	bl	8004928 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054b6:	e009      	b.n	80054cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054b8:	f7ff fa36 	bl	8004928 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054c6:	d901      	bls.n	80054cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e007      	b.n	80054dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d8:	d1ee      	bne.n	80054b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58024800 	.word	0x58024800

080054e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08c      	sub	sp, #48	; 0x30
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e3ff      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8087 	beq.w	8005616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005508:	4b99      	ldr	r3, [pc, #612]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005512:	4b97      	ldr	r3, [pc, #604]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	2b10      	cmp	r3, #16
 800551c:	d007      	beq.n	800552e <HAL_RCC_OscConfig+0x46>
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	2b18      	cmp	r3, #24
 8005522:	d110      	bne.n	8005546 <HAL_RCC_OscConfig+0x5e>
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d10b      	bne.n	8005546 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552e:	4b90      	ldr	r3, [pc, #576]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d06c      	beq.n	8005614 <HAL_RCC_OscConfig+0x12c>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d168      	bne.n	8005614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e3d9      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554e:	d106      	bne.n	800555e <HAL_RCC_OscConfig+0x76>
 8005550:	4b87      	ldr	r3, [pc, #540]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a86      	ldr	r2, [pc, #536]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	e02e      	b.n	80055bc <HAL_RCC_OscConfig+0xd4>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10c      	bne.n	8005580 <HAL_RCC_OscConfig+0x98>
 8005566:	4b82      	ldr	r3, [pc, #520]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a81      	ldr	r2, [pc, #516]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800556c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b7f      	ldr	r3, [pc, #508]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a7e      	ldr	r2, [pc, #504]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e01d      	b.n	80055bc <HAL_RCC_OscConfig+0xd4>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005588:	d10c      	bne.n	80055a4 <HAL_RCC_OscConfig+0xbc>
 800558a:	4b79      	ldr	r3, [pc, #484]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a78      	ldr	r2, [pc, #480]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	4b76      	ldr	r3, [pc, #472]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a75      	ldr	r2, [pc, #468]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e00b      	b.n	80055bc <HAL_RCC_OscConfig+0xd4>
 80055a4:	4b72      	ldr	r3, [pc, #456]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a71      	ldr	r2, [pc, #452]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80055aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	4b6f      	ldr	r3, [pc, #444]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a6e      	ldr	r2, [pc, #440]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80055b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d013      	beq.n	80055ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7ff f9b0 	bl	8004928 <HAL_GetTick>
 80055c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055cc:	f7ff f9ac 	bl	8004928 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	; 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e38d      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055de:	4b64      	ldr	r3, [pc, #400]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0xe4>
 80055ea:	e014      	b.n	8005616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7ff f99c 	bl	8004928 <HAL_GetTick>
 80055f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f4:	f7ff f998 	bl	8004928 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	; 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e379      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005606:	4b5a      	ldr	r3, [pc, #360]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f0      	bne.n	80055f4 <HAL_RCC_OscConfig+0x10c>
 8005612:	e000      	b.n	8005616 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80ae 	beq.w	8005780 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005624:	4b52      	ldr	r3, [pc, #328]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800562c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800562e:	4b50      	ldr	r3, [pc, #320]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_RCC_OscConfig+0x162>
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	2b18      	cmp	r3, #24
 800563e:	d13a      	bne.n	80056b6 <HAL_RCC_OscConfig+0x1ce>
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d135      	bne.n	80056b6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800564a:	4b49      	ldr	r3, [pc, #292]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_RCC_OscConfig+0x17a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e34b      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005662:	f7ff f98f 	bl	8004984 <HAL_GetREVID>
 8005666:	4602      	mov	r2, r0
 8005668:	f241 0303 	movw	r3, #4099	; 0x1003
 800566c:	429a      	cmp	r2, r3
 800566e:	d817      	bhi.n	80056a0 <HAL_RCC_OscConfig+0x1b8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d108      	bne.n	800568a <HAL_RCC_OscConfig+0x1a2>
 8005678:	4b3d      	ldr	r3, [pc, #244]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005680:	4a3b      	ldr	r2, [pc, #236]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005686:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005688:	e07a      	b.n	8005780 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568a:	4b39      	ldr	r3, [pc, #228]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	031b      	lsls	r3, r3, #12
 8005698:	4935      	ldr	r1, [pc, #212]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800569a:	4313      	orrs	r3, r2
 800569c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800569e:	e06f      	b.n	8005780 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a0:	4b33      	ldr	r3, [pc, #204]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	061b      	lsls	r3, r3, #24
 80056ae:	4930      	ldr	r1, [pc, #192]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056b4:	e064      	b.n	8005780 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d045      	beq.n	800574a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056be:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 0219 	bic.w	r2, r3, #25
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	4929      	ldr	r1, [pc, #164]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7ff f92a 	bl	8004928 <HAL_GetTick>
 80056d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d8:	f7ff f926 	bl	8004928 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e307      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ea:	4b21      	ldr	r3, [pc, #132]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f6:	f7ff f945 	bl	8004984 <HAL_GetREVID>
 80056fa:	4602      	mov	r2, r0
 80056fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8005700:	429a      	cmp	r2, r3
 8005702:	d817      	bhi.n	8005734 <HAL_RCC_OscConfig+0x24c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d108      	bne.n	800571e <HAL_RCC_OscConfig+0x236>
 800570c:	4b18      	ldr	r3, [pc, #96]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005714:	4a16      	ldr	r2, [pc, #88]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571a:	6053      	str	r3, [r2, #4]
 800571c:	e030      	b.n	8005780 <HAL_RCC_OscConfig+0x298>
 800571e:	4b14      	ldr	r3, [pc, #80]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	031b      	lsls	r3, r3, #12
 800572c:	4910      	ldr	r1, [pc, #64]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800572e:	4313      	orrs	r3, r2
 8005730:	604b      	str	r3, [r1, #4]
 8005732:	e025      	b.n	8005780 <HAL_RCC_OscConfig+0x298>
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	061b      	lsls	r3, r3, #24
 8005742:	490b      	ldr	r1, [pc, #44]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005744:	4313      	orrs	r3, r2
 8005746:	604b      	str	r3, [r1, #4]
 8005748:	e01a      	b.n	8005780 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a08      	ldr	r2, [pc, #32]	; (8005770 <HAL_RCC_OscConfig+0x288>)
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7ff f8e7 	bl	8004928 <HAL_GetTick>
 800575a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800575c:	e00a      	b.n	8005774 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800575e:	f7ff f8e3 	bl	8004928 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d903      	bls.n	8005774 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e2c4      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
 8005770:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005774:	4ba4      	ldr	r3, [pc, #656]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ee      	bne.n	800575e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0310 	and.w	r3, r3, #16
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80a9 	beq.w	80058e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800578e:	4b9e      	ldr	r3, [pc, #632]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005796:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005798:	4b9b      	ldr	r3, [pc, #620]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d007      	beq.n	80057b4 <HAL_RCC_OscConfig+0x2cc>
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b18      	cmp	r3, #24
 80057a8:	d13a      	bne.n	8005820 <HAL_RCC_OscConfig+0x338>
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d135      	bne.n	8005820 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057b4:	4b94      	ldr	r3, [pc, #592]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_RCC_OscConfig+0x2e4>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	2b80      	cmp	r3, #128	; 0x80
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e296      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057cc:	f7ff f8da 	bl	8004984 <HAL_GetREVID>
 80057d0:	4602      	mov	r2, r0
 80057d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d817      	bhi.n	800580a <HAL_RCC_OscConfig+0x322>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d108      	bne.n	80057f4 <HAL_RCC_OscConfig+0x30c>
 80057e2:	4b89      	ldr	r3, [pc, #548]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80057ea:	4a87      	ldr	r2, [pc, #540]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80057ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057f2:	e075      	b.n	80058e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057f4:	4b84      	ldr	r3, [pc, #528]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	069b      	lsls	r3, r3, #26
 8005802:	4981      	ldr	r1, [pc, #516]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005804:	4313      	orrs	r3, r2
 8005806:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005808:	e06a      	b.n	80058e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800580a:	4b7f      	ldr	r3, [pc, #508]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	061b      	lsls	r3, r3, #24
 8005818:	497b      	ldr	r1, [pc, #492]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800581a:	4313      	orrs	r3, r2
 800581c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800581e:	e05f      	b.n	80058e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d042      	beq.n	80058ae <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005828:	4b77      	ldr	r3, [pc, #476]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a76      	ldr	r2, [pc, #472]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800582e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7ff f878 	bl	8004928 <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800583c:	f7ff f874 	bl	8004928 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e255      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800584e:	4b6e      	ldr	r3, [pc, #440]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800585a:	f7ff f893 	bl	8004984 <HAL_GetREVID>
 800585e:	4602      	mov	r2, r0
 8005860:	f241 0303 	movw	r3, #4099	; 0x1003
 8005864:	429a      	cmp	r2, r3
 8005866:	d817      	bhi.n	8005898 <HAL_RCC_OscConfig+0x3b0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	2b20      	cmp	r3, #32
 800586e:	d108      	bne.n	8005882 <HAL_RCC_OscConfig+0x39a>
 8005870:	4b65      	ldr	r3, [pc, #404]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005878:	4a63      	ldr	r2, [pc, #396]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800587a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800587e:	6053      	str	r3, [r2, #4]
 8005880:	e02e      	b.n	80058e0 <HAL_RCC_OscConfig+0x3f8>
 8005882:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	069b      	lsls	r3, r3, #26
 8005890:	495d      	ldr	r1, [pc, #372]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005892:	4313      	orrs	r3, r2
 8005894:	604b      	str	r3, [r1, #4]
 8005896:	e023      	b.n	80058e0 <HAL_RCC_OscConfig+0x3f8>
 8005898:	4b5b      	ldr	r3, [pc, #364]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	061b      	lsls	r3, r3, #24
 80058a6:	4958      	ldr	r1, [pc, #352]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60cb      	str	r3, [r1, #12]
 80058ac:	e018      	b.n	80058e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80058ae:	4b56      	ldr	r3, [pc, #344]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a55      	ldr	r2, [pc, #340]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80058b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ba:	f7ff f835 	bl	8004928 <HAL_GetTick>
 80058be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80058c2:	f7ff f831 	bl	8004928 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e212      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058d4:	4b4c      	ldr	r3, [pc, #304]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f0      	bne.n	80058c2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d036      	beq.n	800595a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d019      	beq.n	8005928 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058f4:	4b44      	ldr	r3, [pc, #272]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80058f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f8:	4a43      	ldr	r2, [pc, #268]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7ff f812 	bl	8004928 <HAL_GetTick>
 8005904:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005908:	f7ff f80e 	bl	8004928 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e1ef      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800591a:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800591c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0x420>
 8005926:	e018      	b.n	800595a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005928:	4b37      	ldr	r3, [pc, #220]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800592a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592c:	4a36      	ldr	r2, [pc, #216]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005934:	f7fe fff8 	bl	8004928 <HAL_GetTick>
 8005938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800593c:	f7fe fff4 	bl	8004928 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e1d5      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800594e:	4b2e      	ldr	r3, [pc, #184]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d036      	beq.n	80059d4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d019      	beq.n	80059a2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800596e:	4b26      	ldr	r3, [pc, #152]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a25      	ldr	r2, [pc, #148]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005974:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005978:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800597a:	f7fe ffd5 	bl	8004928 <HAL_GetTick>
 800597e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005982:	f7fe ffd1 	bl	8004928 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e1b2      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005994:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0f0      	beq.n	8005982 <HAL_RCC_OscConfig+0x49a>
 80059a0:	e018      	b.n	80059d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059a2:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80059a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059ae:	f7fe ffbb 	bl	8004928 <HAL_GetTick>
 80059b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80059b6:	f7fe ffb7 	bl	8004928 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e198      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059c8:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <HAL_RCC_OscConfig+0x520>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8085 	beq.w	8005aec <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059e2:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <HAL_RCC_OscConfig+0x524>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <HAL_RCC_OscConfig+0x524>)
 80059e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059ee:	f7fe ff9b 	bl	8004928 <HAL_GetTick>
 80059f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059f4:	e00c      	b.n	8005a10 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059f6:	f7fe ff97 	bl	8004928 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b64      	cmp	r3, #100	; 0x64
 8005a02:	d905      	bls.n	8005a10 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e178      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
 8005a08:	58024400 	.word	0x58024400
 8005a0c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a10:	4b96      	ldr	r3, [pc, #600]	; (8005c6c <HAL_RCC_OscConfig+0x784>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0ec      	beq.n	80059f6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d106      	bne.n	8005a32 <HAL_RCC_OscConfig+0x54a>
 8005a24:	4b92      	ldr	r3, [pc, #584]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a28:	4a91      	ldr	r2, [pc, #580]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a30:	e02d      	b.n	8005a8e <HAL_RCC_OscConfig+0x5a6>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10c      	bne.n	8005a54 <HAL_RCC_OscConfig+0x56c>
 8005a3a:	4b8d      	ldr	r3, [pc, #564]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3e:	4a8c      	ldr	r2, [pc, #560]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	6713      	str	r3, [r2, #112]	; 0x70
 8005a46:	4b8a      	ldr	r3, [pc, #552]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4a:	4a89      	ldr	r2, [pc, #548]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a4c:	f023 0304 	bic.w	r3, r3, #4
 8005a50:	6713      	str	r3, [r2, #112]	; 0x70
 8005a52:	e01c      	b.n	8005a8e <HAL_RCC_OscConfig+0x5a6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d10c      	bne.n	8005a76 <HAL_RCC_OscConfig+0x58e>
 8005a5c:	4b84      	ldr	r3, [pc, #528]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a60:	4a83      	ldr	r2, [pc, #524]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a62:	f043 0304 	orr.w	r3, r3, #4
 8005a66:	6713      	str	r3, [r2, #112]	; 0x70
 8005a68:	4b81      	ldr	r3, [pc, #516]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6c:	4a80      	ldr	r2, [pc, #512]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	6713      	str	r3, [r2, #112]	; 0x70
 8005a74:	e00b      	b.n	8005a8e <HAL_RCC_OscConfig+0x5a6>
 8005a76:	4b7e      	ldr	r3, [pc, #504]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a7d      	ldr	r2, [pc, #500]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
 8005a82:	4b7b      	ldr	r3, [pc, #492]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	4a7a      	ldr	r2, [pc, #488]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d015      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a96:	f7fe ff47 	bl	8004928 <HAL_GetTick>
 8005a9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a9c:	e00a      	b.n	8005ab4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a9e:	f7fe ff43 	bl	8004928 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e122      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ab4:	4b6e      	ldr	r3, [pc, #440]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0ee      	beq.n	8005a9e <HAL_RCC_OscConfig+0x5b6>
 8005ac0:	e014      	b.n	8005aec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac2:	f7fe ff31 	bl	8004928 <HAL_GetTick>
 8005ac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ac8:	e00a      	b.n	8005ae0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aca:	f7fe ff2d 	bl	8004928 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e10c      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ae0:	4b63      	ldr	r3, [pc, #396]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1ee      	bne.n	8005aca <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8101 	beq.w	8005cf8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005af6:	4b5e      	ldr	r3, [pc, #376]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005afe:	2b18      	cmp	r3, #24
 8005b00:	f000 80bc 	beq.w	8005c7c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	f040 8095 	bne.w	8005c38 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0e:	4b58      	ldr	r3, [pc, #352]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a57      	ldr	r2, [pc, #348]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fe ff05 	bl	8004928 <HAL_GetTick>
 8005b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fe ff01 	bl	8004928 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e0e2      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b34:	4b4e      	ldr	r3, [pc, #312]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b40:	4b4b      	ldr	r3, [pc, #300]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b44:	4b4b      	ldr	r3, [pc, #300]	; (8005c74 <HAL_RCC_OscConfig+0x78c>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b50:	0112      	lsls	r2, r2, #4
 8005b52:	430a      	orrs	r2, r1
 8005b54:	4946      	ldr	r1, [pc, #280]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	628b      	str	r3, [r1, #40]	; 0x28
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	025b      	lsls	r3, r3, #9
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	3b01      	subs	r3, #1
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b82:	3b01      	subs	r3, #1
 8005b84:	061b      	lsls	r3, r3, #24
 8005b86:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b8a:	4939      	ldr	r1, [pc, #228]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005b90:	4b37      	ldr	r3, [pc, #220]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	4a36      	ldr	r2, [pc, #216]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005b96:	f023 0301 	bic.w	r3, r3, #1
 8005b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b9c:	4b34      	ldr	r3, [pc, #208]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba0:	4b35      	ldr	r3, [pc, #212]	; (8005c78 <HAL_RCC_OscConfig+0x790>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ba8:	00d2      	lsls	r2, r2, #3
 8005baa:	4931      	ldr	r1, [pc, #196]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bb0:	4b2f      	ldr	r3, [pc, #188]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	f023 020c 	bic.w	r2, r3, #12
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	492c      	ldr	r1, [pc, #176]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bc2:	4b2b      	ldr	r3, [pc, #172]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	f023 0202 	bic.w	r2, r3, #2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bce:	4928      	ldr	r1, [pc, #160]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bd4:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be0:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	4a22      	ldr	r2, [pc, #136]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005bec:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005bf8:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c04:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fe fe8a 	bl	8004928 <HAL_GetTick>
 8005c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c18:	f7fe fe86 	bl	8004928 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e067      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0x730>
 8005c36:	e05f      	b.n	8005cf8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c38:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a0c      	ldr	r2, [pc, #48]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fe fe70 	bl	8004928 <HAL_GetTick>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c4c:	f7fe fe6c 	bl	8004928 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e04d      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c5e:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <HAL_RCC_OscConfig+0x788>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x764>
 8005c6a:	e045      	b.n	8005cf8 <HAL_RCC_OscConfig+0x810>
 8005c6c:	58024800 	.word	0x58024800
 8005c70:	58024400 	.word	0x58024400
 8005c74:	fffffc0c 	.word	0xfffffc0c
 8005c78:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c7c:	4b21      	ldr	r3, [pc, #132]	; (8005d04 <HAL_RCC_OscConfig+0x81c>)
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c82:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <HAL_RCC_OscConfig+0x81c>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d031      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f003 0203 	and.w	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d12a      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	091b      	lsrs	r3, r3, #4
 8005ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d122      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d11a      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	0a5b      	lsrs	r3, r3, #9
 8005cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d111      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	0c1b      	lsrs	r3, r3, #16
 8005cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d108      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	0e1b      	lsrs	r3, r3, #24
 8005ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3730      	adds	r7, #48	; 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400

08005d08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e19c      	b.n	8006056 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d1c:	4b8a      	ldr	r3, [pc, #552]	; (8005f48 <HAL_RCC_ClockConfig+0x240>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d910      	bls.n	8005d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2a:	4b87      	ldr	r3, [pc, #540]	; (8005f48 <HAL_RCC_ClockConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f023 020f 	bic.w	r2, r3, #15
 8005d32:	4985      	ldr	r1, [pc, #532]	; (8005f48 <HAL_RCC_ClockConfig+0x240>)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3a:	4b83      	ldr	r3, [pc, #524]	; (8005f48 <HAL_RCC_ClockConfig+0x240>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e184      	b.n	8006056 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d010      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	4b7b      	ldr	r3, [pc, #492]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d908      	bls.n	8005d7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d68:	4b78      	ldr	r3, [pc, #480]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	4975      	ldr	r1, [pc, #468]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d010      	beq.n	8005da8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	4b70      	ldr	r3, [pc, #448]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d908      	bls.n	8005da8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d96:	4b6d      	ldr	r3, [pc, #436]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	496a      	ldr	r1, [pc, #424]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d010      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699a      	ldr	r2, [r3, #24]
 8005db8:	4b64      	ldr	r3, [pc, #400]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d908      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005dc4:	4b61      	ldr	r3, [pc, #388]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	495e      	ldr	r1, [pc, #376]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d010      	beq.n	8005e04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	4b59      	ldr	r3, [pc, #356]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d908      	bls.n	8005e04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005df2:	4b56      	ldr	r3, [pc, #344]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	4953      	ldr	r1, [pc, #332]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d010      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	4b4d      	ldr	r3, [pc, #308]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d908      	bls.n	8005e32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e20:	4b4a      	ldr	r3, [pc, #296]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f023 020f 	bic.w	r2, r3, #15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4947      	ldr	r1, [pc, #284]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d055      	beq.n	8005eea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e3e:	4b43      	ldr	r3, [pc, #268]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	4940      	ldr	r1, [pc, #256]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d107      	bne.n	8005e68 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e58:	4b3c      	ldr	r3, [pc, #240]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d121      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e0f6      	b.n	8006056 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d107      	bne.n	8005e80 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e70:	4b36      	ldr	r3, [pc, #216]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d115      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0ea      	b.n	8006056 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d107      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e88:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d109      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0de      	b.n	8006056 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e98:	4b2c      	ldr	r3, [pc, #176]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e0d6      	b.n	8006056 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ea8:	4b28      	ldr	r3, [pc, #160]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f023 0207 	bic.w	r2, r3, #7
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	4925      	ldr	r1, [pc, #148]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eba:	f7fe fd35 	bl	8004928 <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec0:	e00a      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec2:	f7fe fd31 	bl	8004928 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e0be      	b.n	8006056 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed8:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d1eb      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d010      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d208      	bcs.n	8005f18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f06:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f023 020f 	bic.w	r2, r3, #15
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	490e      	ldr	r1, [pc, #56]	; (8005f4c <HAL_RCC_ClockConfig+0x244>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCC_ClockConfig+0x240>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d214      	bcs.n	8005f50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f26:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <HAL_RCC_ClockConfig+0x240>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f023 020f 	bic.w	r2, r3, #15
 8005f2e:	4906      	ldr	r1, [pc, #24]	; (8005f48 <HAL_RCC_ClockConfig+0x240>)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f36:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <HAL_RCC_ClockConfig+0x240>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d005      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e086      	b.n	8006056 <HAL_RCC_ClockConfig+0x34e>
 8005f48:	52002000 	.word	0x52002000
 8005f4c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	4b3f      	ldr	r3, [pc, #252]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d208      	bcs.n	8005f7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f6c:	4b3c      	ldr	r3, [pc, #240]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	4939      	ldr	r1, [pc, #228]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d010      	beq.n	8005fac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	4b34      	ldr	r3, [pc, #208]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d208      	bcs.n	8005fac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f9a:	4b31      	ldr	r3, [pc, #196]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	492e      	ldr	r1, [pc, #184]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d010      	beq.n	8005fda <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	4b28      	ldr	r3, [pc, #160]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d208      	bcs.n	8005fda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fc8:	4b25      	ldr	r3, [pc, #148]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	4922      	ldr	r1, [pc, #136]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d010      	beq.n	8006008 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69da      	ldr	r2, [r3, #28]
 8005fea:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d208      	bcs.n	8006008 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ff6:	4b1a      	ldr	r3, [pc, #104]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	4917      	ldr	r1, [pc, #92]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8006004:	4313      	orrs	r3, r2
 8006006:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006008:	f000 f834 	bl	8006074 <HAL_RCC_GetSysClockFreq>
 800600c:	4601      	mov	r1, r0
 800600e:	4b14      	ldr	r3, [pc, #80]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	0a1b      	lsrs	r3, r3, #8
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	4a12      	ldr	r2, [pc, #72]	; (8006064 <HAL_RCC_ClockConfig+0x35c>)
 800601a:	5cd3      	ldrb	r3, [r2, r3]
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	fa21 f303 	lsr.w	r3, r1, r3
 8006024:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006026:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <HAL_RCC_ClockConfig+0x358>)
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	4a0d      	ldr	r2, [pc, #52]	; (8006064 <HAL_RCC_ClockConfig+0x35c>)
 8006030:	5cd3      	ldrb	r3, [r2, r3]
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	4a0a      	ldr	r2, [pc, #40]	; (8006068 <HAL_RCC_ClockConfig+0x360>)
 800603e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006040:	4a0a      	ldr	r2, [pc, #40]	; (800606c <HAL_RCC_ClockConfig+0x364>)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006046:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <HAL_RCC_ClockConfig+0x368>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fc22 	bl	8004894 <HAL_InitTick>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	58024400 	.word	0x58024400
 8006064:	0800efe8 	.word	0x0800efe8
 8006068:	24000004 	.word	0x24000004
 800606c:	24000000 	.word	0x24000000
 8006070:	24000008 	.word	0x24000008

08006074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006074:	b480      	push	{r7}
 8006076:	b089      	sub	sp, #36	; 0x24
 8006078:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800607a:	4baf      	ldr	r3, [pc, #700]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006082:	2b18      	cmp	r3, #24
 8006084:	f200 814e 	bhi.w	8006324 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006088:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <HAL_RCC_GetSysClockFreq+0x1c>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060f5 	.word	0x080060f5
 8006094:	08006325 	.word	0x08006325
 8006098:	08006325 	.word	0x08006325
 800609c:	08006325 	.word	0x08006325
 80060a0:	08006325 	.word	0x08006325
 80060a4:	08006325 	.word	0x08006325
 80060a8:	08006325 	.word	0x08006325
 80060ac:	08006325 	.word	0x08006325
 80060b0:	0800611b 	.word	0x0800611b
 80060b4:	08006325 	.word	0x08006325
 80060b8:	08006325 	.word	0x08006325
 80060bc:	08006325 	.word	0x08006325
 80060c0:	08006325 	.word	0x08006325
 80060c4:	08006325 	.word	0x08006325
 80060c8:	08006325 	.word	0x08006325
 80060cc:	08006325 	.word	0x08006325
 80060d0:	08006121 	.word	0x08006121
 80060d4:	08006325 	.word	0x08006325
 80060d8:	08006325 	.word	0x08006325
 80060dc:	08006325 	.word	0x08006325
 80060e0:	08006325 	.word	0x08006325
 80060e4:	08006325 	.word	0x08006325
 80060e8:	08006325 	.word	0x08006325
 80060ec:	08006325 	.word	0x08006325
 80060f0:	08006127 	.word	0x08006127
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f4:	4b90      	ldr	r3, [pc, #576]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006100:	4b8d      	ldr	r3, [pc, #564]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	08db      	lsrs	r3, r3, #3
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	4a8c      	ldr	r2, [pc, #560]	; (800633c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
 8006110:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006112:	e10a      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006114:	4b89      	ldr	r3, [pc, #548]	; (800633c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006116:	61bb      	str	r3, [r7, #24]
    break;
 8006118:	e107      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800611a:	4b89      	ldr	r3, [pc, #548]	; (8006340 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800611c:	61bb      	str	r3, [r7, #24]
    break;
 800611e:	e104      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006120:	4b88      	ldr	r3, [pc, #544]	; (8006344 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006122:	61bb      	str	r3, [r7, #24]
    break;
 8006124:	e101      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006126:	4b84      	ldr	r3, [pc, #528]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006130:	4b81      	ldr	r3, [pc, #516]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800613a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800613c:	4b7e      	ldr	r3, [pc, #504]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006146:	4b7c      	ldr	r3, [pc, #496]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614a:	08db      	lsrs	r3, r3, #3
 800614c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	fb02 f303 	mul.w	r3, r2, r3
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80da 	beq.w	800631e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d05a      	beq.n	8006226 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006170:	2b01      	cmp	r3, #1
 8006172:	d302      	bcc.n	800617a <HAL_RCC_GetSysClockFreq+0x106>
 8006174:	2b02      	cmp	r3, #2
 8006176:	d078      	beq.n	800626a <HAL_RCC_GetSysClockFreq+0x1f6>
 8006178:	e099      	b.n	80062ae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800617a:	4b6f      	ldr	r3, [pc, #444]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d02d      	beq.n	80061e2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006186:	4b6c      	ldr	r3, [pc, #432]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	08db      	lsrs	r3, r3, #3
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	4a6a      	ldr	r2, [pc, #424]	; (800633c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006192:	fa22 f303 	lsr.w	r3, r2, r3
 8006196:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	ee07 3a90 	vmov	s15, r3
 80061a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b0:	4b61      	ldr	r3, [pc, #388]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2d4>
 80061c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80061e0:	e087      	b.n	80062f2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800634c <HAL_RCC_GetSysClockFreq+0x2d8>
 80061f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f4:	4b50      	ldr	r3, [pc, #320]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006204:	ed97 6a02 	vldr	s12, [r7, #8]
 8006208:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2d4>
 800620c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006220:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006224:	e065      	b.n	80062f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006230:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006350 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006238:	4b3f      	ldr	r3, [pc, #252]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006240:	ee07 3a90 	vmov	s15, r3
 8006244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006248:	ed97 6a02 	vldr	s12, [r7, #8]
 800624c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006264:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006268:	e043      	b.n	80062f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006274:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006354 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627c:	4b2e      	ldr	r3, [pc, #184]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006290:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006294:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ac:	e021      	b.n	80062f2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006350 <HAL_RCC_GetSysClockFreq+0x2dc>
 80062bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c0:	4b1d      	ldr	r3, [pc, #116]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c8:	ee07 3a90 	vmov	s15, r3
 80062cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80062d4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006348 <HAL_RCC_GetSysClockFreq+0x2d4>
 80062d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062f0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80062f2:	4b11      	ldr	r3, [pc, #68]	; (8006338 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	0a5b      	lsrs	r3, r3, #9
 80062f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fc:	3301      	adds	r3, #1
 80062fe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800630a:	edd7 6a07 	vldr	s13, [r7, #28]
 800630e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006316:	ee17 3a90 	vmov	r3, s15
 800631a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800631c:	e005      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	61bb      	str	r3, [r7, #24]
    break;
 8006322:	e002      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006324:	4b06      	ldr	r3, [pc, #24]	; (8006340 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006326:	61bb      	str	r3, [r7, #24]
    break;
 8006328:	bf00      	nop
  }

  return sysclockfreq;
 800632a:	69bb      	ldr	r3, [r7, #24]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3724      	adds	r7, #36	; 0x24
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	58024400 	.word	0x58024400
 800633c:	03d09000 	.word	0x03d09000
 8006340:	003d0900 	.word	0x003d0900
 8006344:	02625a00 	.word	0x02625a00
 8006348:	46000000 	.word	0x46000000
 800634c:	4c742400 	.word	0x4c742400
 8006350:	4a742400 	.word	0x4a742400
 8006354:	4c189680 	.word	0x4c189680

08006358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800635e:	f7ff fe89 	bl	8006074 <HAL_RCC_GetSysClockFreq>
 8006362:	4601      	mov	r1, r0
 8006364:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	4a0f      	ldr	r2, [pc, #60]	; (80063ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006370:	5cd3      	ldrb	r3, [r2, r3]
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	fa21 f303 	lsr.w	r3, r1, r3
 800637a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	4a09      	ldr	r2, [pc, #36]	; (80063ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006386:	5cd3      	ldrb	r3, [r2, r3]
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006394:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006396:	4a07      	ldr	r2, [pc, #28]	; (80063b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800639c:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800639e:	681b      	ldr	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	58024400 	.word	0x58024400
 80063ac:	0800efe8 	.word	0x0800efe8
 80063b0:	24000004 	.word	0x24000004
 80063b4:	24000000 	.word	0x24000000

080063b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80063bc:	f7ff ffcc 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 80063c0:	4601      	mov	r1, r0
 80063c2:	4b06      	ldr	r3, [pc, #24]	; (80063dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	4a04      	ldr	r2, [pc, #16]	; (80063e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063ce:	5cd3      	ldrb	r3, [r2, r3]
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	58024400 	.word	0x58024400
 80063e0:	0800efe8 	.word	0x0800efe8

080063e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80063e8:	f7ff ffb6 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 80063ec:	4601      	mov	r1, r0
 80063ee:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	4a04      	ldr	r2, [pc, #16]	; (800640c <HAL_RCC_GetPCLK2Freq+0x28>)
 80063fa:	5cd3      	ldrb	r3, [r2, r3]
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006404:	4618      	mov	r0, r3
 8006406:	bd80      	pop	{r7, pc}
 8006408:	58024400 	.word	0x58024400
 800640c:	0800efe8 	.word	0x0800efe8

08006410 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006418:	2300      	movs	r3, #0
 800641a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800641c:	2300      	movs	r3, #0
 800641e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d03d      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006434:	d013      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800643a:	d802      	bhi.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006440:	e01f      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006446:	d013      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800644c:	d01c      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800644e:	e018      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006450:	4baf      	ldr	r3, [pc, #700]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4aae      	ldr	r2, [pc, #696]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800645c:	e015      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3304      	adds	r3, #4
 8006462:	2102      	movs	r1, #2
 8006464:	4618      	mov	r0, r3
 8006466:	f001 f96f 	bl	8007748 <RCCEx_PLL2_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800646e:	e00c      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3324      	adds	r3, #36	; 0x24
 8006474:	2102      	movs	r1, #2
 8006476:	4618      	mov	r0, r3
 8006478:	f001 fa18 	bl	80078ac <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006480:	e003      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
      break;
 8006486:	e000      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006490:	4b9f      	ldr	r3, [pc, #636]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800649c:	499c      	ldr	r1, [pc, #624]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	650b      	str	r3, [r1, #80]	; 0x50
 80064a2:	e001      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d03d      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d826      	bhi.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064d9 	.word	0x080064d9
 80064c8:	080064e7 	.word	0x080064e7
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	08006511 	.word	0x08006511
 80064d4:	08006511 	.word	0x08006511
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d8:	4b8d      	ldr	r3, [pc, #564]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	4a8c      	ldr	r2, [pc, #560]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064e4:	e015      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3304      	adds	r3, #4
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 f92b 	bl	8007748 <RCCEx_PLL2_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064f6:	e00c      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3324      	adds	r3, #36	; 0x24
 80064fc:	2100      	movs	r1, #0
 80064fe:	4618      	mov	r0, r3
 8006500:	f001 f9d4 	bl	80078ac <RCCEx_PLL3_Config>
 8006504:	4603      	mov	r3, r0
 8006506:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006508:	e003      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
      break;
 800650e:	e000      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006518:	4b7d      	ldr	r3, [pc, #500]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800651a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651c:	f023 0207 	bic.w	r2, r3, #7
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006524:	497a      	ldr	r1, [pc, #488]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006526:	4313      	orrs	r3, r2
 8006528:	650b      	str	r3, [r1, #80]	; 0x50
 800652a:	e001      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006538:	2b00      	cmp	r3, #0
 800653a:	d03e      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006540:	2b80      	cmp	r3, #128	; 0x80
 8006542:	d01c      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006544:	2b80      	cmp	r3, #128	; 0x80
 8006546:	d804      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d00d      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006550:	e01e      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006552:	2bc0      	cmp	r3, #192	; 0xc0
 8006554:	d01f      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655a:	d01e      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800655c:	e018      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655e:	4b6c      	ldr	r3, [pc, #432]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	4a6b      	ldr	r2, [pc, #428]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800656a:	e017      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3304      	adds	r3, #4
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f001 f8e8 	bl	8007748 <RCCEx_PLL2_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800657c:	e00e      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3324      	adds	r3, #36	; 0x24
 8006582:	2100      	movs	r1, #0
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f991 	bl	80078ac <RCCEx_PLL3_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800658e:	e005      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	75fb      	strb	r3, [r7, #23]
      break;
 8006594:	e002      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006596:	bf00      	nop
 8006598:	e000      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800659a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80065a2:	4b5b      	ldr	r3, [pc, #364]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ae:	4958      	ldr	r1, [pc, #352]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	650b      	str	r3, [r1, #80]	; 0x50
 80065b4:	e001      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d044      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d0:	d01f      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80065d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d6:	d805      	bhi.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80065dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065e0:	d00e      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80065e2:	e01f      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80065e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065e8:	d01f      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80065ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065ee:	d01e      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065f0:	e018      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f2:	4b47      	ldr	r3, [pc, #284]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	4a46      	ldr	r2, [pc, #280]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065fe:	e017      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	2100      	movs	r1, #0
 8006606:	4618      	mov	r0, r3
 8006608:	f001 f89e 	bl	8007748 <RCCEx_PLL2_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006610:	e00e      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3324      	adds	r3, #36	; 0x24
 8006616:	2100      	movs	r1, #0
 8006618:	4618      	mov	r0, r3
 800661a:	f001 f947 	bl	80078ac <RCCEx_PLL3_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006622:	e005      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	75fb      	strb	r3, [r7, #23]
      break;
 8006628:	e002      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800662e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006636:	4b36      	ldr	r3, [pc, #216]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006644:	4932      	ldr	r1, [pc, #200]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006646:	4313      	orrs	r3, r2
 8006648:	658b      	str	r3, [r1, #88]	; 0x58
 800664a:	e001      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006658:	2b00      	cmp	r3, #0
 800665a:	d044      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006666:	d01f      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800666c:	d805      	bhi.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006676:	d00e      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006678:	e01f      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800667a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800667e:	d01f      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006684:	d01e      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006686:	e018      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006688:	4b21      	ldr	r3, [pc, #132]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4a20      	ldr	r2, [pc, #128]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800668e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006694:	e017      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3304      	adds	r3, #4
 800669a:	2100      	movs	r1, #0
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f853 	bl	8007748 <RCCEx_PLL2_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80066a6:	e00e      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3324      	adds	r3, #36	; 0x24
 80066ac:	2100      	movs	r1, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 f8fc 	bl	80078ac <RCCEx_PLL3_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066b8:	e005      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	75fb      	strb	r3, [r7, #23]
      break;
 80066be:	e002      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80066c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80066cc:	4b10      	ldr	r3, [pc, #64]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066da:	490d      	ldr	r1, [pc, #52]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	658b      	str	r3, [r1, #88]	; 0x58
 80066e0:	e001      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d035      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f6:	2b10      	cmp	r3, #16
 80066f8:	d00c      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d802      	bhi.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01b      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006702:	e017      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006704:	2b20      	cmp	r3, #32
 8006706:	d00c      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006708:	2b30      	cmp	r3, #48	; 0x30
 800670a:	d018      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800670c:	e012      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4baf      	ldr	r3, [pc, #700]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4aae      	ldr	r2, [pc, #696]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006720:	e00e      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3304      	adds	r3, #4
 8006726:	2102      	movs	r1, #2
 8006728:	4618      	mov	r0, r3
 800672a:	f001 f80d 	bl	8007748 <RCCEx_PLL2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006732:	e005      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
      break;
 8006738:	e002      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800673a:	bf00      	nop
 800673c:	e000      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800673e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006746:	4ba3      	ldr	r3, [pc, #652]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006752:	49a0      	ldr	r1, [pc, #640]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006754:	4313      	orrs	r3, r2
 8006756:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006758:	e001      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	7dfb      	ldrb	r3, [r7, #23]
 800675c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d042      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006772:	d01f      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006778:	d805      	bhi.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800677e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006782:	d00e      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006784:	e01f      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800678a:	d01f      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800678c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006790:	d01e      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006792:	e018      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006794:	4b8f      	ldr	r3, [pc, #572]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	4a8e      	ldr	r2, [pc, #568]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800679a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800679e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80067a0:	e017      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3304      	adds	r3, #4
 80067a6:	2100      	movs	r1, #0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 ffcd 	bl	8007748 <RCCEx_PLL2_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80067b2:	e00e      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3324      	adds	r3, #36	; 0x24
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 f876 	bl	80078ac <RCCEx_PLL3_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80067c4:	e005      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ca:	e002      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80067cc:	bf00      	nop
 80067ce:	e000      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80067d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d109      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80067d8:	4b7e      	ldr	r3, [pc, #504]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e4:	497b      	ldr	r1, [pc, #492]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	650b      	str	r3, [r1, #80]	; 0x50
 80067ea:	e001      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d042      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006804:	d01b      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800680a:	d805      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d022      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006814:	d00a      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006816:	e01b      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006818:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800681c:	d01d      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800681e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006822:	d01c      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006824:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006828:	d01b      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800682a:	e011      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3304      	adds	r3, #4
 8006830:	2101      	movs	r1, #1
 8006832:	4618      	mov	r0, r3
 8006834:	f000 ff88 	bl	8007748 <RCCEx_PLL2_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800683c:	e012      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3324      	adds	r3, #36	; 0x24
 8006842:	2101      	movs	r1, #1
 8006844:	4618      	mov	r0, r3
 8006846:	f001 f831 	bl	80078ac <RCCEx_PLL3_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800684e:	e009      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	75fb      	strb	r3, [r7, #23]
      break;
 8006854:	e006      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006856:	bf00      	nop
 8006858:	e004      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800685a:	bf00      	nop
 800685c:	e002      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800685e:	bf00      	nop
 8006860:	e000      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800686a:	4b5a      	ldr	r3, [pc, #360]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006876:	4957      	ldr	r1, [pc, #348]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006878:	4313      	orrs	r3, r2
 800687a:	650b      	str	r3, [r1, #80]	; 0x50
 800687c:	e001      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d044      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006898:	d01b      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800689a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800689e:	d805      	bhi.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d022      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80068a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068a8:	d00a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80068aa:	e01b      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b0:	d01d      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80068b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068b6:	d01c      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80068b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068bc:	d01b      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80068be:	e011      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	2101      	movs	r1, #1
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 ff3e 	bl	8007748 <RCCEx_PLL2_Config>
 80068cc:	4603      	mov	r3, r0
 80068ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80068d0:	e012      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3324      	adds	r3, #36	; 0x24
 80068d6:	2101      	movs	r1, #1
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 ffe7 	bl	80078ac <RCCEx_PLL3_Config>
 80068de:	4603      	mov	r3, r0
 80068e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80068e2:	e009      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75fb      	strb	r3, [r7, #23]
      break;
 80068e8:	e006      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80068ea:	bf00      	nop
 80068ec:	e004      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80068ee:	bf00      	nop
 80068f0:	e002      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80068f2:	bf00      	nop
 80068f4:	e000      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80068f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80068fe:	4b35      	ldr	r3, [pc, #212]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006902:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800690c:	4931      	ldr	r1, [pc, #196]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800690e:	4313      	orrs	r3, r2
 8006910:	658b      	str	r3, [r1, #88]	; 0x58
 8006912:	e001      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02d      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800692c:	d005      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800692e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006932:	d009      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d013      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006938:	e00f      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693a:	4b26      	ldr	r3, [pc, #152]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	4a25      	ldr	r2, [pc, #148]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006944:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006946:	e00c      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	2101      	movs	r1, #1
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fefa 	bl	8007748 <RCCEx_PLL2_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006958:	e003      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
      break;
 800695e:	e000      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d109      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006968:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006974:	4917      	ldr	r1, [pc, #92]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	650b      	str	r3, [r1, #80]	; 0x50
 800697a:	e001      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d035      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006990:	2b03      	cmp	r3, #3
 8006992:	d81b      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006994:	a201      	add	r2, pc, #4	; (adr r2, 800699c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069d9 	.word	0x080069d9
 80069a0:	080069ad 	.word	0x080069ad
 80069a4:	080069bb 	.word	0x080069bb
 80069a8:	080069d9 	.word	0x080069d9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	4a08      	ldr	r2, [pc, #32]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80069b8:	e00f      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3304      	adds	r3, #4
 80069be:	2102      	movs	r1, #2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fec1 	bl	8007748 <RCCEx_PLL2_Config>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80069ca:	e006      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	e003      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80069d2:	bf00      	nop
 80069d4:	58024400 	.word	0x58024400
      break;
 80069d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069e0:	4bba      	ldr	r3, [pc, #744]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e4:	f023 0203 	bic.w	r2, r3, #3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ec:	49b7      	ldr	r1, [pc, #732]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069f2:	e001      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8086 	beq.w	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a06:	4bb2      	ldr	r3, [pc, #712]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4ab1      	ldr	r2, [pc, #708]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a12:	f7fd ff89 	bl	8004928 <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a18:	e009      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a1a:	f7fd ff85 	bl	8004928 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b64      	cmp	r3, #100	; 0x64
 8006a26:	d902      	bls.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	75fb      	strb	r3, [r7, #23]
        break;
 8006a2c:	e005      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a2e:	4ba8      	ldr	r3, [pc, #672]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0ef      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d166      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a40:	4ba2      	ldr	r3, [pc, #648]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a4a:	4053      	eors	r3, r2
 8006a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d013      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a54:	4b9d      	ldr	r3, [pc, #628]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a5e:	4b9b      	ldr	r3, [pc, #620]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	4a9a      	ldr	r2, [pc, #616]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a6a:	4b98      	ldr	r3, [pc, #608]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	4a97      	ldr	r2, [pc, #604]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a76:	4a95      	ldr	r2, [pc, #596]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a86:	d115      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a88:	f7fd ff4e 	bl	8004928 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a8e:	e00b      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a90:	f7fd ff4a 	bl	8004928 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d902      	bls.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	75fb      	strb	r3, [r7, #23]
            break;
 8006aa6:	e005      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aa8:	4b88      	ldr	r3, [pc, #544]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ed      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d126      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac8:	d10d      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006aca:	4b80      	ldr	r3, [pc, #512]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ad8:	0919      	lsrs	r1, r3, #4
 8006ada:	4b7e      	ldr	r3, [pc, #504]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006adc:	400b      	ands	r3, r1
 8006ade:	497b      	ldr	r1, [pc, #492]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	610b      	str	r3, [r1, #16]
 8006ae4:	e005      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006ae6:	4b79      	ldr	r3, [pc, #484]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	4a78      	ldr	r2, [pc, #480]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006aec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006af0:	6113      	str	r3, [r2, #16]
 8006af2:	4b76      	ldr	r3, [pc, #472]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006af4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b00:	4972      	ldr	r1, [pc, #456]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	670b      	str	r3, [r1, #112]	; 0x70
 8006b06:	e004      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	75bb      	strb	r3, [r7, #22]
 8006b0c:	e001      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d07d      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b22:	2b28      	cmp	r3, #40	; 0x28
 8006b24:	d866      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006bfb 	.word	0x08006bfb
 8006b30:	08006bf5 	.word	0x08006bf5
 8006b34:	08006bf5 	.word	0x08006bf5
 8006b38:	08006bf5 	.word	0x08006bf5
 8006b3c:	08006bf5 	.word	0x08006bf5
 8006b40:	08006bf5 	.word	0x08006bf5
 8006b44:	08006bf5 	.word	0x08006bf5
 8006b48:	08006bf5 	.word	0x08006bf5
 8006b4c:	08006bd1 	.word	0x08006bd1
 8006b50:	08006bf5 	.word	0x08006bf5
 8006b54:	08006bf5 	.word	0x08006bf5
 8006b58:	08006bf5 	.word	0x08006bf5
 8006b5c:	08006bf5 	.word	0x08006bf5
 8006b60:	08006bf5 	.word	0x08006bf5
 8006b64:	08006bf5 	.word	0x08006bf5
 8006b68:	08006bf5 	.word	0x08006bf5
 8006b6c:	08006be3 	.word	0x08006be3
 8006b70:	08006bf5 	.word	0x08006bf5
 8006b74:	08006bf5 	.word	0x08006bf5
 8006b78:	08006bf5 	.word	0x08006bf5
 8006b7c:	08006bf5 	.word	0x08006bf5
 8006b80:	08006bf5 	.word	0x08006bf5
 8006b84:	08006bf5 	.word	0x08006bf5
 8006b88:	08006bf5 	.word	0x08006bf5
 8006b8c:	08006bfb 	.word	0x08006bfb
 8006b90:	08006bf5 	.word	0x08006bf5
 8006b94:	08006bf5 	.word	0x08006bf5
 8006b98:	08006bf5 	.word	0x08006bf5
 8006b9c:	08006bf5 	.word	0x08006bf5
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006bf5 	.word	0x08006bf5
 8006ba8:	08006bf5 	.word	0x08006bf5
 8006bac:	08006bfb 	.word	0x08006bfb
 8006bb0:	08006bf5 	.word	0x08006bf5
 8006bb4:	08006bf5 	.word	0x08006bf5
 8006bb8:	08006bf5 	.word	0x08006bf5
 8006bbc:	08006bf5 	.word	0x08006bf5
 8006bc0:	08006bf5 	.word	0x08006bf5
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006bf5 	.word	0x08006bf5
 8006bcc:	08006bfb 	.word	0x08006bfb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fdb6 	bl	8007748 <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006be0:	e00c      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3324      	adds	r3, #36	; 0x24
 8006be6:	2101      	movs	r1, #1
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fe5f 	bl	80078ac <RCCEx_PLL3_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006bf2:	e003      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf8:	e000      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c02:	4b32      	ldr	r3, [pc, #200]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c06:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c0e:	492f      	ldr	r1, [pc, #188]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	654b      	str	r3, [r1, #84]	; 0x54
 8006c14:	e001      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d037      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c2a:	2b05      	cmp	r3, #5
 8006c2c:	d820      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006c2e:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c77 	.word	0x08006c77
 8006c38:	08006c4d 	.word	0x08006c4d
 8006c3c:	08006c5f 	.word	0x08006c5f
 8006c40:	08006c77 	.word	0x08006c77
 8006c44:	08006c77 	.word	0x08006c77
 8006c48:	08006c77 	.word	0x08006c77
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	2101      	movs	r1, #1
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fd78 	bl	8007748 <RCCEx_PLL2_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c5c:	e00c      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3324      	adds	r3, #36	; 0x24
 8006c62:	2101      	movs	r1, #1
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fe21 	bl	80078ac <RCCEx_PLL3_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c6e:	e003      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
      break;
 8006c74:	e000      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	f023 0207 	bic.w	r2, r3, #7
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c8a:	4910      	ldr	r1, [pc, #64]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	654b      	str	r3, [r1, #84]	; 0x54
 8006c90:	e001      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d040      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	d827      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006cac:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006d03 	.word	0x08006d03
 8006cb8:	08006cd9 	.word	0x08006cd9
 8006cbc:	08006ceb 	.word	0x08006ceb
 8006cc0:	08006d03 	.word	0x08006d03
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006d03 	.word	0x08006d03
 8006ccc:	58024400 	.word	0x58024400
 8006cd0:	58024800 	.word	0x58024800
 8006cd4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fd32 	bl	8007748 <RCCEx_PLL2_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ce8:	e00c      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3324      	adds	r3, #36	; 0x24
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fddb 	bl	80078ac <RCCEx_PLL3_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006cfa:	e003      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006d00:	e000      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d0a:	4bb2      	ldr	r3, [pc, #712]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0e:	f023 0207 	bic.w	r2, r3, #7
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d18:	49ae      	ldr	r1, [pc, #696]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	658b      	str	r3, [r1, #88]	; 0x58
 8006d1e:	e001      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d044      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d3a:	d01b      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d40:	d805      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d022      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4a:	d00a      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006d4c:	e01b      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d52:	d01d      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d58:	d01c      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d5e:	d01b      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006d60:	e011      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3304      	adds	r3, #4
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fced 	bl	8007748 <RCCEx_PLL2_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d72:	e012      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	2102      	movs	r1, #2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fd96 	bl	80078ac <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d84:	e009      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8a:	e006      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006d8c:	bf00      	nop
 8006d8e:	e004      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006d90:	bf00      	nop
 8006d92:	e002      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006da0:	4b8c      	ldr	r3, [pc, #560]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dae:	4989      	ldr	r1, [pc, #548]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	654b      	str	r3, [r1, #84]	; 0x54
 8006db4:	e001      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d044      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd0:	d01b      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd6:	d805      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d022      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de0:	d00a      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006de2:	e01b      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de8:	d01d      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006dea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006dee:	d01c      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006df0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006df4:	d01b      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006df6:	e011      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fca2 	bl	8007748 <RCCEx_PLL2_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006e08:	e012      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3324      	adds	r3, #36	; 0x24
 8006e0e:	2102      	movs	r1, #2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fd4b 	bl	80078ac <RCCEx_PLL3_Config>
 8006e16:	4603      	mov	r3, r0
 8006e18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006e1a:	e009      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e20:	e006      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006e22:	bf00      	nop
 8006e24:	e004      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006e26:	bf00      	nop
 8006e28:	e002      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006e2a:	bf00      	nop
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e36:	4b67      	ldr	r3, [pc, #412]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e44:	4963      	ldr	r1, [pc, #396]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	658b      	str	r3, [r1, #88]	; 0x58
 8006e4a:	e001      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d044      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e66:	d01b      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e6c:	d805      	bhi.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d022      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e76:	d00a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006e78:	e01b      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e7e:	d01d      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006e80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e84:	d01c      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006e86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e8a:	d01b      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006e8c:	e011      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3304      	adds	r3, #4
 8006e92:	2100      	movs	r1, #0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fc57 	bl	8007748 <RCCEx_PLL2_Config>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e9e:	e012      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3324      	adds	r3, #36	; 0x24
 8006ea4:	2102      	movs	r1, #2
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fd00 	bl	80078ac <RCCEx_PLL3_Config>
 8006eac:	4603      	mov	r3, r0
 8006eae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006eb0:	e009      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb6:	e006      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006eb8:	bf00      	nop
 8006eba:	e004      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ebc:	bf00      	nop
 8006ebe:	e002      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ec0:	bf00      	nop
 8006ec2:	e000      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ecc:	4b41      	ldr	r3, [pc, #260]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eda:	493e      	ldr	r1, [pc, #248]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	658b      	str	r3, [r1, #88]	; 0x58
 8006ee0:	e001      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01a      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efc:	d10a      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3324      	adds	r3, #36	; 0x24
 8006f02:	2102      	movs	r1, #2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fcd1 	bl	80078ac <RCCEx_PLL3_Config>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f14:	4b2f      	ldr	r3, [pc, #188]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f22:	492c      	ldr	r1, [pc, #176]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3e:	d10a      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3324      	adds	r3, #36	; 0x24
 8006f44:	2102      	movs	r1, #2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fcb0 	bl	80078ac <RCCEx_PLL3_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f56:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f64:	491b      	ldr	r1, [pc, #108]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d032      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d00d      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f86:	d016      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d111      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fbd8 	bl	8007748 <RCCEx_PLL2_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f9c:	e00c      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3324      	adds	r3, #36	; 0x24
 8006fa2:	2102      	movs	r1, #2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fc81 	bl	80078ac <RCCEx_PLL3_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006fae:	e003      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb4:	e000      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fcc:	4901      	ldr	r1, [pc, #4]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	658b      	str	r3, [r1, #88]	; 0x58
 8006fd2:	e003      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d02f      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ff2:	d00c      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006ff4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ff8:	d015      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffe:	d10f      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007000:	4b79      	ldr	r3, [pc, #484]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	4a78      	ldr	r2, [pc, #480]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800700a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800700c:	e00c      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3324      	adds	r3, #36	; 0x24
 8007012:	2101      	movs	r1, #1
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fc49 	bl	80078ac <RCCEx_PLL3_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800701e:	e003      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	75fb      	strb	r3, [r7, #23]
      break;
 8007024:	e000      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800702e:	4b6e      	ldr	r3, [pc, #440]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800703c:	496a      	ldr	r1, [pc, #424]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800703e:	4313      	orrs	r3, r2
 8007040:	654b      	str	r3, [r1, #84]	; 0x54
 8007042:	e001      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d029      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800705c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007060:	d007      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007062:	e00f      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007064:	4b60      	ldr	r3, [pc, #384]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	4a5f      	ldr	r2, [pc, #380]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800706a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800706e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007070:	e00b      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3304      	adds	r3, #4
 8007076:	2102      	movs	r1, #2
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fb65 	bl	8007748 <RCCEx_PLL2_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007082:	e002      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	75fb      	strb	r3, [r7, #23]
      break;
 8007088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007090:	4b55      	ldr	r3, [pc, #340]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709c:	4952      	ldr	r1, [pc, #328]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070a2:	e001      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3324      	adds	r3, #36	; 0x24
 80070b8:	2102      	movs	r1, #2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fbf6 	bl	80078ac <RCCEx_PLL3_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d02f      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070de:	d00c      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80070e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e4:	d802      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d011      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80070ea:	e00d      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80070ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f0:	d00f      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80070f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070f6:	d00e      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80070f8:	e006      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070fa:	4b3b      	ldr	r3, [pc, #236]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	4a3a      	ldr	r2, [pc, #232]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007106:	e007      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	75fb      	strb	r3, [r7, #23]
      break;
 800710c:	e004      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800710e:	bf00      	nop
 8007110:	e002      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007112:	bf00      	nop
 8007114:	e000      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d109      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800711e:	4b32      	ldr	r3, [pc, #200]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800712a:	492f      	ldr	r1, [pc, #188]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800712c:	4313      	orrs	r3, r2
 800712e:	654b      	str	r3, [r1, #84]	; 0x54
 8007130:	e001      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d008      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007142:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007146:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714e:	4926      	ldr	r1, [pc, #152]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007150:	4313      	orrs	r3, r2
 8007152:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d009      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007160:	4b21      	ldr	r3, [pc, #132]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800716e:	491e      	ldr	r1, [pc, #120]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007170:	4313      	orrs	r3, r2
 8007172:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007180:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007184:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800718c:	4916      	ldr	r1, [pc, #88]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800718e:	4313      	orrs	r3, r2
 8007190:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00d      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800719e:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	4a11      	ldr	r2, [pc, #68]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071a8:	6113      	str	r3, [r2, #16]
 80071aa:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80071b4:	490c      	ldr	r1, [pc, #48]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da08      	bge.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071c2:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ce:	4906      	ldr	r1, [pc, #24]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80071d4:	7dbb      	ldrb	r3, [r7, #22]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	e000      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	58024400 	.word	0x58024400

080071ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80071f0:	f7ff f8b2 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 80071f4:	4601      	mov	r1, r0
 80071f6:	4b06      	ldr	r3, [pc, #24]	; (8007210 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	091b      	lsrs	r3, r3, #4
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	4a04      	ldr	r2, [pc, #16]	; (8007214 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007202:	5cd3      	ldrb	r3, [r2, r3]
 8007204:	f003 031f 	and.w	r3, r3, #31
 8007208:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800720c:	4618      	mov	r0, r3
 800720e:	bd80      	pop	{r7, pc}
 8007210:	58024400 	.word	0x58024400
 8007214:	0800efe8 	.word	0x0800efe8

08007218 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007218:	b480      	push	{r7}
 800721a:	b089      	sub	sp, #36	; 0x24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007220:	4b9d      	ldr	r3, [pc, #628]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800722a:	4b9b      	ldr	r3, [pc, #620]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	0b1b      	lsrs	r3, r3, #12
 8007230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007234:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007236:	4b98      	ldr	r3, [pc, #608]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	091b      	lsrs	r3, r3, #4
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007242:	4b95      	ldr	r3, [pc, #596]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	08db      	lsrs	r3, r3, #3
 8007248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	fb02 f303 	mul.w	r3, r2, r3
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 810a 	beq.w	800747a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d05a      	beq.n	8007322 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800726c:	2b01      	cmp	r3, #1
 800726e:	d302      	bcc.n	8007276 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007270:	2b02      	cmp	r3, #2
 8007272:	d078      	beq.n	8007366 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007274:	e099      	b.n	80073aa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007276:	4b88      	ldr	r3, [pc, #544]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b00      	cmp	r3, #0
 8007280:	d02d      	beq.n	80072de <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007282:	4b85      	ldr	r3, [pc, #532]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	08db      	lsrs	r3, r3, #3
 8007288:	f003 0303 	and.w	r3, r3, #3
 800728c:	4a83      	ldr	r2, [pc, #524]	; (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800728e:	fa22 f303 	lsr.w	r3, r2, r3
 8007292:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	ee07 3a90 	vmov	s15, r3
 80072a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ac:	4b7a      	ldr	r3, [pc, #488]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80072c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072dc:	e087      	b.n	80073ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80072ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f0:	4b69      	ldr	r3, [pc, #420]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007300:	ed97 6a03 	vldr	s12, [r7, #12]
 8007304:	eddf 5a66 	vldr	s11, [pc, #408]	; 80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007320:	e065      	b.n	80073ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80074a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007334:	4b58      	ldr	r3, [pc, #352]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007344:	ed97 6a03 	vldr	s12, [r7, #12]
 8007348:	eddf 5a55 	vldr	s11, [pc, #340]	; 80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800734c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007360:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007364:	e043      	b.n	80073ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	ee07 3a90 	vmov	s15, r3
 800736c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007370:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80074ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007378:	4b47      	ldr	r3, [pc, #284]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007388:	ed97 6a03 	vldr	s12, [r7, #12]
 800738c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800739c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073a8:	e021      	b.n	80073ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	ee07 3a90 	vmov	s15, r3
 80073b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80074a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80073b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073bc:	4b36      	ldr	r3, [pc, #216]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c4:	ee07 3a90 	vmov	s15, r3
 80073c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80073d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ec:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80073ee:	4b2a      	ldr	r3, [pc, #168]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	0a5b      	lsrs	r3, r3, #9
 80073f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f8:	ee07 3a90 	vmov	s15, r3
 80073fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007408:	edd7 6a07 	vldr	s13, [r7, #28]
 800740c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007414:	ee17 2a90 	vmov	r2, s15
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800741c:	4b1e      	ldr	r3, [pc, #120]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	0c1b      	lsrs	r3, r3, #16
 8007422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007436:	edd7 6a07 	vldr	s13, [r7, #28]
 800743a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007442:	ee17 2a90 	vmov	r2, s15
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800744a:	4b13      	ldr	r3, [pc, #76]	; (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744e:	0e1b      	lsrs	r3, r3, #24
 8007450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007460:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007464:	edd7 6a07 	vldr	s13, [r7, #28]
 8007468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800746c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007470:	ee17 2a90 	vmov	r2, s15
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007478:	e008      	b.n	800748c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	609a      	str	r2, [r3, #8]
}
 800748c:	bf00      	nop
 800748e:	3724      	adds	r7, #36	; 0x24
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	58024400 	.word	0x58024400
 800749c:	03d09000 	.word	0x03d09000
 80074a0:	46000000 	.word	0x46000000
 80074a4:	4c742400 	.word	0x4c742400
 80074a8:	4a742400 	.word	0x4a742400
 80074ac:	4c189680 	.word	0x4c189680

080074b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b089      	sub	sp, #36	; 0x24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074b8:	4b9d      	ldr	r3, [pc, #628]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80074c2:	4b9b      	ldr	r3, [pc, #620]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80074c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c6:	0d1b      	lsrs	r3, r3, #20
 80074c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80074ce:	4b98      	ldr	r3, [pc, #608]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	0a1b      	lsrs	r3, r3, #8
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80074da:	4b95      	ldr	r3, [pc, #596]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80074dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074de:	08db      	lsrs	r3, r3, #3
 80074e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 810a 	beq.w	8007712 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d05a      	beq.n	80075ba <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007504:	2b01      	cmp	r3, #1
 8007506:	d302      	bcc.n	800750e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007508:	2b02      	cmp	r3, #2
 800750a:	d078      	beq.n	80075fe <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800750c:	e099      	b.n	8007642 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800750e:	4b88      	ldr	r3, [pc, #544]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d02d      	beq.n	8007576 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800751a:	4b85      	ldr	r3, [pc, #532]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	08db      	lsrs	r3, r3, #3
 8007520:	f003 0303 	and.w	r3, r3, #3
 8007524:	4a83      	ldr	r2, [pc, #524]	; (8007734 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007526:	fa22 f303 	lsr.w	r3, r2, r3
 800752a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	ee07 3a90 	vmov	s15, r3
 800753c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007544:	4b7a      	ldr	r3, [pc, #488]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754c:	ee07 3a90 	vmov	s15, r3
 8007550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007554:	ed97 6a03 	vldr	s12, [r7, #12]
 8007558:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800755c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007570:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007574:	e087      	b.n	8007686 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007580:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800773c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007588:	4b69      	ldr	r3, [pc, #420]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007598:	ed97 6a03 	vldr	s12, [r7, #12]
 800759c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80075a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075b8:	e065      	b.n	8007686 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	ee07 3a90 	vmov	s15, r3
 80075c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80075c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075cc:	4b58      	ldr	r3, [pc, #352]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80075e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075fc:	e043      	b.n	8007686 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007608:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800760c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007610:	4b47      	ldr	r3, [pc, #284]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007618:	ee07 3a90 	vmov	s15, r3
 800761c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007620:	ed97 6a03 	vldr	s12, [r7, #12]
 8007624:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007640:	e021      	b.n	8007686 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007740 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007654:	4b36      	ldr	r3, [pc, #216]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007664:	ed97 6a03 	vldr	s12, [r7, #12]
 8007668:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800766c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007680:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007684:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007686:	4b2a      	ldr	r3, [pc, #168]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	0a5b      	lsrs	r3, r3, #9
 800768c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800769c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ac:	ee17 2a90 	vmov	r2, s15
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80076b4:	4b1e      	ldr	r3, [pc, #120]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	0c1b      	lsrs	r3, r3, #16
 80076ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80076d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076da:	ee17 2a90 	vmov	r2, s15
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	0e1b      	lsrs	r3, r3, #24
 80076e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007708:	ee17 2a90 	vmov	r2, s15
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007710:	e008      	b.n	8007724 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	609a      	str	r2, [r3, #8]
}
 8007724:	bf00      	nop
 8007726:	3724      	adds	r7, #36	; 0x24
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	58024400 	.word	0x58024400
 8007734:	03d09000 	.word	0x03d09000
 8007738:	46000000 	.word	0x46000000
 800773c:	4c742400 	.word	0x4c742400
 8007740:	4a742400 	.word	0x4a742400
 8007744:	4c189680 	.word	0x4c189680

08007748 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007756:	4b53      	ldr	r3, [pc, #332]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d101      	bne.n	8007766 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e099      	b.n	800789a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007766:	4b4f      	ldr	r3, [pc, #316]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a4e      	ldr	r2, [pc, #312]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800776c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007772:	f7fd f8d9 	bl	8004928 <HAL_GetTick>
 8007776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007778:	e008      	b.n	800778c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800777a:	f7fd f8d5 	bl	8004928 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e086      	b.n	800789a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800778c:	4b45      	ldr	r3, [pc, #276]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f0      	bne.n	800777a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007798:	4b42      	ldr	r3, [pc, #264]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	031b      	lsls	r3, r3, #12
 80077a6:	493f      	ldr	r1, [pc, #252]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	628b      	str	r3, [r1, #40]	; 0x28
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	025b      	lsls	r3, r3, #9
 80077be:	b29b      	uxth	r3, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	041b      	lsls	r3, r3, #16
 80077ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	061b      	lsls	r3, r3, #24
 80077d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077dc:	4931      	ldr	r1, [pc, #196]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077e2:	4b30      	ldr	r3, [pc, #192]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	492d      	ldr	r1, [pc, #180]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077f4:	4b2b      	ldr	r3, [pc, #172]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	f023 0220 	bic.w	r2, r3, #32
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	4928      	ldr	r1, [pc, #160]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007802:	4313      	orrs	r3, r2
 8007804:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007806:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	4a26      	ldr	r2, [pc, #152]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800780c:	f023 0310 	bic.w	r3, r3, #16
 8007810:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007812:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007816:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <RCCEx_PLL2_Config+0x160>)
 8007818:	4013      	ands	r3, r2
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	69d2      	ldr	r2, [r2, #28]
 800781e:	00d2      	lsls	r2, r2, #3
 8007820:	4920      	ldr	r1, [pc, #128]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007822:	4313      	orrs	r3, r2
 8007824:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007826:	4b1f      	ldr	r3, [pc, #124]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	4a1e      	ldr	r2, [pc, #120]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800782c:	f043 0310 	orr.w	r3, r3, #16
 8007830:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d106      	bne.n	8007846 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007838:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	4a19      	ldr	r2, [pc, #100]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800783e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007844:	e00f      	b.n	8007866 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d106      	bne.n	800785a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800784c:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	4a14      	ldr	r2, [pc, #80]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007856:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007858:	e005      	b.n	8007866 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	4a11      	ldr	r2, [pc, #68]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007864:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007866:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800786c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007872:	f7fd f859 	bl	8004928 <HAL_GetTick>
 8007876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007878:	e008      	b.n	800788c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800787a:	f7fd f855 	bl	8004928 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d901      	bls.n	800788c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e006      	b.n	800789a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800788c:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <RCCEx_PLL2_Config+0x15c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	58024400 	.word	0x58024400
 80078a8:	ffff0007 	.word	0xffff0007

080078ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078ba:	4b53      	ldr	r3, [pc, #332]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d101      	bne.n	80078ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e099      	b.n	80079fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80078ca:	4b4f      	ldr	r3, [pc, #316]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a4e      	ldr	r2, [pc, #312]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80078d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d6:	f7fd f827 	bl	8004928 <HAL_GetTick>
 80078da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078dc:	e008      	b.n	80078f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078de:	f7fd f823 	bl	8004928 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e086      	b.n	80079fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078f0:	4b45      	ldr	r3, [pc, #276]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1f0      	bne.n	80078de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078fc:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	051b      	lsls	r3, r3, #20
 800790a:	493f      	ldr	r1, [pc, #252]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 800790c:	4313      	orrs	r3, r2
 800790e:	628b      	str	r3, [r1, #40]	; 0x28
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	3b01      	subs	r3, #1
 8007916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	3b01      	subs	r3, #1
 8007920:	025b      	lsls	r3, r3, #9
 8007922:	b29b      	uxth	r3, r3
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	3b01      	subs	r3, #1
 800792c:	041b      	lsls	r3, r3, #16
 800792e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	3b01      	subs	r3, #1
 800793a:	061b      	lsls	r3, r3, #24
 800793c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007940:	4931      	ldr	r1, [pc, #196]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 8007942:	4313      	orrs	r3, r2
 8007944:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007946:	4b30      	ldr	r3, [pc, #192]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	492d      	ldr	r1, [pc, #180]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 8007954:	4313      	orrs	r3, r2
 8007956:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007958:	4b2b      	ldr	r3, [pc, #172]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	4928      	ldr	r1, [pc, #160]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 8007966:	4313      	orrs	r3, r2
 8007968:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800796a:	4b27      	ldr	r3, [pc, #156]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	4a26      	ldr	r2, [pc, #152]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 8007970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007974:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007976:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 8007978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800797a:	4b24      	ldr	r3, [pc, #144]	; (8007a0c <RCCEx_PLL3_Config+0x160>)
 800797c:	4013      	ands	r3, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	69d2      	ldr	r2, [r2, #28]
 8007982:	00d2      	lsls	r2, r2, #3
 8007984:	4920      	ldr	r1, [pc, #128]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 8007986:	4313      	orrs	r3, r2
 8007988:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800798a:	4b1f      	ldr	r3, [pc, #124]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 8007990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800799c:	4b1a      	ldr	r3, [pc, #104]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4a19      	ldr	r2, [pc, #100]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80079a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079a8:	e00f      	b.n	80079ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d106      	bne.n	80079be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80079b0:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4a14      	ldr	r2, [pc, #80]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80079b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079bc:	e005      	b.n	80079ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	4a11      	ldr	r2, [pc, #68]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80079c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a0e      	ldr	r2, [pc, #56]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80079d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d6:	f7fc ffa7 	bl	8004928 <HAL_GetTick>
 80079da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079dc:	e008      	b.n	80079f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80079de:	f7fc ffa3 	bl	8004928 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e006      	b.n	80079fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079f0:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <RCCEx_PLL3_Config+0x15c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0f0      	beq.n	80079de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	58024400 	.word	0x58024400
 8007a0c:	ffff0007 	.word	0xffff0007

08007a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e049      	b.n	8007ab6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fc fe08 	bl	800464c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f000 f934 	bl	8007cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d001      	beq.n	8007ad8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e019      	b.n	8007b0c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <HAL_TIM_Base_Start+0x58>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b06      	cmp	r3, #6
 8007af0:	d00b      	beq.n	8007b0a <HAL_TIM_Base_Start+0x4a>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af8:	d007      	beq.n	8007b0a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0201 	orr.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	00010007 	.word	0x00010007

08007b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_TIM_ConfigClockSource+0x18>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e0b7      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x188>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4b57      	ldr	r3, [pc, #348]	; (8007cac <HAL_TIM_ConfigClockSource+0x190>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b70      	cmp	r3, #112	; 0x70
 8007b6a:	d02e      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0xae>
 8007b6c:	2b70      	cmp	r3, #112	; 0x70
 8007b6e:	d812      	bhi.n	8007b96 <HAL_TIM_ConfigClockSource+0x7a>
 8007b70:	2b30      	cmp	r3, #48	; 0x30
 8007b72:	f000 8084 	beq.w	8007c7e <HAL_TIM_ConfigClockSource+0x162>
 8007b76:	2b30      	cmp	r3, #48	; 0x30
 8007b78:	d806      	bhi.n	8007b88 <HAL_TIM_ConfigClockSource+0x6c>
 8007b7a:	2b10      	cmp	r3, #16
 8007b7c:	d07f      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x162>
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d07d      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x162>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d07b      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007b86:	e084      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007b88:	2b50      	cmp	r3, #80	; 0x50
 8007b8a:	d048      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0x102>
 8007b8c:	2b60      	cmp	r3, #96	; 0x60
 8007b8e:	d056      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0x122>
 8007b90:	2b40      	cmp	r3, #64	; 0x40
 8007b92:	d064      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8007b94:	e07d      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007b96:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b9a:	d070      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x162>
 8007b9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ba0:	d809      	bhi.n	8007bb6 <HAL_TIM_ConfigClockSource+0x9a>
 8007ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba6:	d027      	beq.n	8007bf8 <HAL_TIM_ConfigClockSource+0xdc>
 8007ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bac:	d067      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x162>
 8007bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb2:	d06d      	beq.n	8007c90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007bb4:	e06d      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007bb6:	4a3e      	ldr	r2, [pc, #248]	; (8007cb0 <HAL_TIM_ConfigClockSource+0x194>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d060      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x162>
 8007bbc:	4a3d      	ldr	r2, [pc, #244]	; (8007cb4 <HAL_TIM_ConfigClockSource+0x198>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d05d      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x162>
 8007bc2:	4a3d      	ldr	r2, [pc, #244]	; (8007cb8 <HAL_TIM_ConfigClockSource+0x19c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d05a      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x162>
      break;
 8007bc8:	e063      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	6899      	ldr	r1, [r3, #8]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f000 f987 	bl	8007eec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	609a      	str	r2, [r3, #8]
      break;
 8007bf6:	e04c      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6899      	ldr	r1, [r3, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f000 f970 	bl	8007eec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c1a:	609a      	str	r2, [r3, #8]
      break;
 8007c1c:	e039      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6859      	ldr	r1, [r3, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f000 f8e0 	bl	8007df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2150      	movs	r1, #80	; 0x50
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f93a 	bl	8007eb0 <TIM_ITRx_SetConfig>
      break;
 8007c3c:	e029      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f000 f8ff 	bl	8007e4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2160      	movs	r1, #96	; 0x60
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f92a 	bl	8007eb0 <TIM_ITRx_SetConfig>
      break;
 8007c5c:	e019      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6859      	ldr	r1, [r3, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f000 f8c0 	bl	8007df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2140      	movs	r1, #64	; 0x40
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f91a 	bl	8007eb0 <TIM_ITRx_SetConfig>
      break;
 8007c7c:	e009      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f000 f911 	bl	8007eb0 <TIM_ITRx_SetConfig>
      break;
 8007c8e:	e000      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007c90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	ffceff88 	.word	0xffceff88
 8007cb0:	00100030 	.word	0x00100030
 8007cb4:	00100040 	.word	0x00100040
 8007cb8:	00100020 	.word	0x00100020

08007cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a40      	ldr	r2, [pc, #256]	; (8007dd0 <TIM_Base_SetConfig+0x114>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d013      	beq.n	8007cfc <TIM_Base_SetConfig+0x40>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cda:	d00f      	beq.n	8007cfc <TIM_Base_SetConfig+0x40>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a3d      	ldr	r2, [pc, #244]	; (8007dd4 <TIM_Base_SetConfig+0x118>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00b      	beq.n	8007cfc <TIM_Base_SetConfig+0x40>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a3c      	ldr	r2, [pc, #240]	; (8007dd8 <TIM_Base_SetConfig+0x11c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d007      	beq.n	8007cfc <TIM_Base_SetConfig+0x40>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a3b      	ldr	r2, [pc, #236]	; (8007ddc <TIM_Base_SetConfig+0x120>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d003      	beq.n	8007cfc <TIM_Base_SetConfig+0x40>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a3a      	ldr	r2, [pc, #232]	; (8007de0 <TIM_Base_SetConfig+0x124>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d108      	bne.n	8007d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a2f      	ldr	r2, [pc, #188]	; (8007dd0 <TIM_Base_SetConfig+0x114>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01f      	beq.n	8007d56 <TIM_Base_SetConfig+0x9a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d1c:	d01b      	beq.n	8007d56 <TIM_Base_SetConfig+0x9a>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a2c      	ldr	r2, [pc, #176]	; (8007dd4 <TIM_Base_SetConfig+0x118>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d017      	beq.n	8007d56 <TIM_Base_SetConfig+0x9a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a2b      	ldr	r2, [pc, #172]	; (8007dd8 <TIM_Base_SetConfig+0x11c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d013      	beq.n	8007d56 <TIM_Base_SetConfig+0x9a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a2a      	ldr	r2, [pc, #168]	; (8007ddc <TIM_Base_SetConfig+0x120>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00f      	beq.n	8007d56 <TIM_Base_SetConfig+0x9a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a29      	ldr	r2, [pc, #164]	; (8007de0 <TIM_Base_SetConfig+0x124>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00b      	beq.n	8007d56 <TIM_Base_SetConfig+0x9a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a28      	ldr	r2, [pc, #160]	; (8007de4 <TIM_Base_SetConfig+0x128>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d007      	beq.n	8007d56 <TIM_Base_SetConfig+0x9a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a27      	ldr	r2, [pc, #156]	; (8007de8 <TIM_Base_SetConfig+0x12c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d003      	beq.n	8007d56 <TIM_Base_SetConfig+0x9a>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a26      	ldr	r2, [pc, #152]	; (8007dec <TIM_Base_SetConfig+0x130>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d108      	bne.n	8007d68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a10      	ldr	r2, [pc, #64]	; (8007dd0 <TIM_Base_SetConfig+0x114>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00f      	beq.n	8007db4 <TIM_Base_SetConfig+0xf8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a12      	ldr	r2, [pc, #72]	; (8007de0 <TIM_Base_SetConfig+0x124>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00b      	beq.n	8007db4 <TIM_Base_SetConfig+0xf8>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a11      	ldr	r2, [pc, #68]	; (8007de4 <TIM_Base_SetConfig+0x128>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d007      	beq.n	8007db4 <TIM_Base_SetConfig+0xf8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <TIM_Base_SetConfig+0x12c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d003      	beq.n	8007db4 <TIM_Base_SetConfig+0xf8>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a0f      	ldr	r2, [pc, #60]	; (8007dec <TIM_Base_SetConfig+0x130>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d103      	bne.n	8007dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	615a      	str	r2, [r3, #20]
}
 8007dc2:	bf00      	nop
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40010000 	.word	0x40010000
 8007dd4:	40000400 	.word	0x40000400
 8007dd8:	40000800 	.word	0x40000800
 8007ddc:	40000c00 	.word	0x40000c00
 8007de0:	40010400 	.word	0x40010400
 8007de4:	40014000 	.word	0x40014000
 8007de8:	40014400 	.word	0x40014400
 8007dec:	40014800 	.word	0x40014800

08007df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	f023 0201 	bic.w	r2, r3, #1
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f023 030a 	bic.w	r3, r3, #10
 8007e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	621a      	str	r2, [r3, #32]
}
 8007e42:	bf00      	nop
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b087      	sub	sp, #28
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	f023 0210 	bic.w	r2, r3, #16
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	031b      	lsls	r3, r3, #12
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	621a      	str	r2, [r3, #32]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
	...

08007eb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <TIM_ITRx_SetConfig+0x38>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f043 0307 	orr.w	r3, r3, #7
 8007ed2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	609a      	str	r2, [r3, #8]
}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	ffcfff8f 	.word	0xffcfff8f

08007eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	021a      	lsls	r2, r3, #8
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	609a      	str	r2, [r3, #8]
}
 8007f20:	bf00      	nop
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e068      	b.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a2e      	ldr	r2, [pc, #184]	; (8008024 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d004      	beq.n	8007f78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2d      	ldr	r2, [pc, #180]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d108      	bne.n	8007f8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1e      	ldr	r2, [pc, #120]	; (8008024 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01d      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb6:	d018      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a1b      	ldr	r2, [pc, #108]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a1a      	ldr	r2, [pc, #104]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00e      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a18      	ldr	r2, [pc, #96]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d009      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a13      	ldr	r2, [pc, #76]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d004      	beq.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a14      	ldr	r2, [pc, #80]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d10c      	bne.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	40010000 	.word	0x40010000
 8008028:	40010400 	.word	0x40010400
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	40001800 	.word	0x40001800

0800803c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e042      	b.n	80080d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008054:	2b00      	cmp	r3, #0
 8008056:	d106      	bne.n	8008066 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7fc fb5f 	bl	8004724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2224      	movs	r2, #36	; 0x24
 800806a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0201 	bic.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fb12 	bl	80086a8 <UART_SetConfig>
 8008084:	4603      	mov	r3, r0
 8008086:	2b01      	cmp	r3, #1
 8008088:	d101      	bne.n	800808e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e022      	b.n	80080d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 f8b6 	bl	8009208 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0201 	orr.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 f93d 	bl	800934c <UART_CheckIdleState>
 80080d2:	4603      	mov	r3, r0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4613      	mov	r3, r2
 80080e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d168      	bne.n	80081c6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <HAL_UART_Transmit_IT+0x24>
 80080fa:	88fb      	ldrh	r3, [r7, #6]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e061      	b.n	80081c8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_UART_Transmit_IT+0x36>
 800810e:	2302      	movs	r3, #2
 8008110:	e05a      	b.n	80081c8 <HAL_UART_Transmit_IT+0xec>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	88fa      	ldrh	r2, [r7, #6]
 8008124:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2221      	movs	r2, #33	; 0x21
 8008142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800814a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800814e:	d11c      	bne.n	800818a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008158:	d107      	bne.n	800816a <HAL_UART_Transmit_IT+0x8e>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d103      	bne.n	800816a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4a1b      	ldr	r2, [pc, #108]	; (80081d4 <HAL_UART_Transmit_IT+0xf8>)
 8008166:	671a      	str	r2, [r3, #112]	; 0x70
 8008168:	e002      	b.n	8008170 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4a1a      	ldr	r2, [pc, #104]	; (80081d8 <HAL_UART_Transmit_IT+0xfc>)
 800816e:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008186:	609a      	str	r2, [r3, #8]
 8008188:	e01b      	b.n	80081c2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008192:	d107      	bne.n	80081a4 <HAL_UART_Transmit_IT+0xc8>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d103      	bne.n	80081a4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4a0f      	ldr	r2, [pc, #60]	; (80081dc <HAL_UART_Transmit_IT+0x100>)
 80081a0:	671a      	str	r2, [r3, #112]	; 0x70
 80081a2:	e002      	b.n	80081aa <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a0e      	ldr	r2, [pc, #56]	; (80081e0 <HAL_UART_Transmit_IT+0x104>)
 80081a8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081c0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e000      	b.n	80081c8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80081c6:	2302      	movs	r3, #2
  }
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	080096dd 	.word	0x080096dd
 80081d8:	08009643 	.word	0x08009643
 80081dc:	080095c5 	.word	0x080095c5
 80081e0:	08009551 	.word	0x08009551

080081e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	f040 80bc 	bne.w	8008376 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <HAL_UART_Receive_IT+0x26>
 8008204:	88fb      	ldrh	r3, [r7, #6]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e0b4      	b.n	8008378 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_UART_Receive_IT+0x38>
 8008218:	2302      	movs	r3, #2
 800821a:	e0ad      	b.n	8008378 <HAL_UART_Receive_IT+0x194>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	88fa      	ldrh	r2, [r7, #6]
 800822e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	88fa      	ldrh	r2, [r7, #6]
 8008236:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008248:	d10e      	bne.n	8008268 <HAL_UART_Receive_IT+0x84>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d105      	bne.n	800825e <HAL_UART_Receive_IT+0x7a>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008258:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800825c:	e02d      	b.n	80082ba <HAL_UART_Receive_IT+0xd6>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	22ff      	movs	r2, #255	; 0xff
 8008262:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008266:	e028      	b.n	80082ba <HAL_UART_Receive_IT+0xd6>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10d      	bne.n	800828c <HAL_UART_Receive_IT+0xa8>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <HAL_UART_Receive_IT+0x9e>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	22ff      	movs	r2, #255	; 0xff
 800827c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008280:	e01b      	b.n	80082ba <HAL_UART_Receive_IT+0xd6>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	227f      	movs	r2, #127	; 0x7f
 8008286:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800828a:	e016      	b.n	80082ba <HAL_UART_Receive_IT+0xd6>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008294:	d10d      	bne.n	80082b2 <HAL_UART_Receive_IT+0xce>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <HAL_UART_Receive_IT+0xc4>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	227f      	movs	r2, #127	; 0x7f
 80082a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082a6:	e008      	b.n	80082ba <HAL_UART_Receive_IT+0xd6>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	223f      	movs	r2, #63	; 0x3f
 80082ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082b0:	e003      	b.n	80082ba <HAL_UART_Receive_IT+0xd6>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2222      	movs	r2, #34	; 0x22
 80082c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0201 	orr.w	r2, r2, #1
 80082d8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082e2:	d12a      	bne.n	800833a <HAL_UART_Receive_IT+0x156>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80082ea:	88fa      	ldrh	r2, [r7, #6]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d324      	bcc.n	800833a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f8:	d107      	bne.n	800830a <HAL_UART_Receive_IT+0x126>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <HAL_UART_Receive_IT+0x1a0>)
 8008306:	66da      	str	r2, [r3, #108]	; 0x6c
 8008308:	e002      	b.n	8008310 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	4a1e      	ldr	r2, [pc, #120]	; (8008388 <HAL_UART_Receive_IT+0x1a4>)
 800830e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008326:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008336:	609a      	str	r2, [r3, #8]
 8008338:	e01b      	b.n	8008372 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008342:	d107      	bne.n	8008354 <HAL_UART_Receive_IT+0x170>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d103      	bne.n	8008354 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4a0f      	ldr	r2, [pc, #60]	; (800838c <HAL_UART_Receive_IT+0x1a8>)
 8008350:	66da      	str	r2, [r3, #108]	; 0x6c
 8008352:	e002      	b.n	800835a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a0e      	ldr	r2, [pc, #56]	; (8008390 <HAL_UART_Receive_IT+0x1ac>)
 8008358:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008370:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	e000      	b.n	8008378 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8008376:	2302      	movs	r3, #2
  }
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	08009a11 	.word	0x08009a11
 8008388:	08009909 	.word	0x08009909
 800838c:	0800985f 	.word	0x0800985f
 8008390:	080097b5 	.word	0x080097b5

08008394 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80083ba:	4013      	ands	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d118      	bne.n	80083f6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d013      	beq.n	80083f6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	f003 0320 	and.w	r3, r3, #32
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8145 	beq.w	8008676 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	4798      	blx	r3
      }
      return;
 80083f4:	e13f      	b.n	8008676 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80e8 	beq.w	80085ce <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	4ba1      	ldr	r3, [pc, #644]	; (8008688 <HAL_UART_IRQHandler+0x2f4>)
 8008402:	4013      	ands	r3, r2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d105      	bne.n	8008414 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	4ba0      	ldr	r3, [pc, #640]	; (800868c <HAL_UART_IRQHandler+0x2f8>)
 800840c:	4013      	ands	r3, r2
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 80dd 	beq.w	80085ce <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d010      	beq.n	8008440 <HAL_UART_IRQHandler+0xac>
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2201      	movs	r2, #1
 800842e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008436:	f043 0201 	orr.w	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d010      	beq.n	800846c <HAL_UART_IRQHandler+0xd8>
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2202      	movs	r2, #2
 800845a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008462:	f043 0204 	orr.w	r2, r3, #4
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b00      	cmp	r3, #0
 8008474:	d010      	beq.n	8008498 <HAL_UART_IRQHandler+0x104>
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2204      	movs	r2, #4
 8008486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848e:	f043 0202 	orr.w	r2, r3, #2
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d015      	beq.n	80084ce <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	4b76      	ldr	r3, [pc, #472]	; (8008688 <HAL_UART_IRQHandler+0x2f4>)
 80084b0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00b      	beq.n	80084ce <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2208      	movs	r2, #8
 80084bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c4:	f043 0208 	orr.w	r2, r3, #8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d011      	beq.n	80084fc <HAL_UART_IRQHandler+0x168>
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00c      	beq.n	80084fc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f2:	f043 0220 	orr.w	r2, r3, #32
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 80b9 	beq.w	800867a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d011      	beq.n	8008536 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	f003 0320 	and.w	r3, r3, #32
 8008518:	2b00      	cmp	r3, #0
 800851a:	d104      	bne.n	8008526 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d007      	beq.n	8008536 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008548:	2b40      	cmp	r3, #64	; 0x40
 800854a:	d004      	beq.n	8008556 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008552:	2b00      	cmp	r3, #0
 8008554:	d031      	beq.n	80085ba <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 ffc0 	bl	80094dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d123      	bne.n	80085b2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008578:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800857e:	2b00      	cmp	r3, #0
 8008580:	d013      	beq.n	80085aa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008586:	4a42      	ldr	r2, [pc, #264]	; (8008690 <HAL_UART_IRQHandler+0x2fc>)
 8008588:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800858e:	4618      	mov	r0, r3
 8008590:	f7fc fb14 	bl	8004bbc <HAL_DMA_Abort_IT>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d017      	beq.n	80085ca <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800859e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80085a4:	4610      	mov	r0, r2
 80085a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a8:	e00f      	b.n	80085ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f872 	bl	8008694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b0:	e00b      	b.n	80085ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f86e 	bl	8008694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b8:	e007      	b.n	80085ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f86a 	bl	8008694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80085c8:	e057      	b.n	800867a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ca:	bf00      	nop
    return;
 80085cc:	e055      	b.n	800867a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00d      	beq.n	80085f4 <HAL_UART_IRQHandler+0x260>
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d008      	beq.n	80085f4 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 fa93 	bl	8009b18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085f2:	e045      	b.n	8008680 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d012      	beq.n	8008624 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008604:	2b00      	cmp	r3, #0
 8008606:	d104      	bne.n	8008612 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008616:	2b00      	cmp	r3, #0
 8008618:	d031      	beq.n	800867e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
    }
    return;
 8008622:	e02c      	b.n	800867e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <HAL_UART_IRQHandler+0x2ac>
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 f8a1 	bl	8009780 <UART_EndTransmit_IT>
    return;
 800863e:	e01f      	b.n	8008680 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d008      	beq.n	800865c <HAL_UART_IRQHandler+0x2c8>
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fa73 	bl	8009b40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800865a:	e011      	b.n	8008680 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00c      	beq.n	8008680 <HAL_UART_IRQHandler+0x2ec>
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b00      	cmp	r3, #0
 800866a:	da09      	bge.n	8008680 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fa5d 	bl	8009b2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008672:	bf00      	nop
 8008674:	e004      	b.n	8008680 <HAL_UART_IRQHandler+0x2ec>
      return;
 8008676:	bf00      	nop
 8008678:	e002      	b.n	8008680 <HAL_UART_IRQHandler+0x2ec>
    return;
 800867a:	bf00      	nop
 800867c:	e000      	b.n	8008680 <HAL_UART_IRQHandler+0x2ec>
    return;
 800867e:	bf00      	nop
  }
}
 8008680:	3720      	adds	r7, #32
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	10000001 	.word	0x10000001
 800868c:	04000120 	.word	0x04000120
 8008690:	08009525 	.word	0x08009525

08008694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80086ac:	b08e      	sub	sp, #56	; 0x38
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	431a      	orrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	69db      	ldr	r3, [r3, #28]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086d6:	4313      	orrs	r3, r2
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	4bc1      	ldr	r3, [pc, #772]	; (80089e8 <UART_SetConfig+0x340>)
 80086e2:	4013      	ands	r3, r2
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086ea:	430b      	orrs	r3, r1
 80086ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4ab7      	ldr	r2, [pc, #732]	; (80089ec <UART_SetConfig+0x344>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d004      	beq.n	800871e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800871a:	4313      	orrs	r3, r2
 800871c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	4bb2      	ldr	r3, [pc, #712]	; (80089f0 <UART_SetConfig+0x348>)
 8008726:	4013      	ands	r3, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6812      	ldr	r2, [r2, #0]
 800872c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800872e:	430b      	orrs	r3, r1
 8008730:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	f023 010f 	bic.w	r1, r3, #15
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4aa9      	ldr	r2, [pc, #676]	; (80089f4 <UART_SetConfig+0x34c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d177      	bne.n	8008842 <UART_SetConfig+0x19a>
 8008752:	4ba9      	ldr	r3, [pc, #676]	; (80089f8 <UART_SetConfig+0x350>)
 8008754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800875a:	2b28      	cmp	r3, #40	; 0x28
 800875c:	d86c      	bhi.n	8008838 <UART_SetConfig+0x190>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <UART_SetConfig+0xbc>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	08008809 	.word	0x08008809
 8008768:	08008839 	.word	0x08008839
 800876c:	08008839 	.word	0x08008839
 8008770:	08008839 	.word	0x08008839
 8008774:	08008839 	.word	0x08008839
 8008778:	08008839 	.word	0x08008839
 800877c:	08008839 	.word	0x08008839
 8008780:	08008839 	.word	0x08008839
 8008784:	08008811 	.word	0x08008811
 8008788:	08008839 	.word	0x08008839
 800878c:	08008839 	.word	0x08008839
 8008790:	08008839 	.word	0x08008839
 8008794:	08008839 	.word	0x08008839
 8008798:	08008839 	.word	0x08008839
 800879c:	08008839 	.word	0x08008839
 80087a0:	08008839 	.word	0x08008839
 80087a4:	08008819 	.word	0x08008819
 80087a8:	08008839 	.word	0x08008839
 80087ac:	08008839 	.word	0x08008839
 80087b0:	08008839 	.word	0x08008839
 80087b4:	08008839 	.word	0x08008839
 80087b8:	08008839 	.word	0x08008839
 80087bc:	08008839 	.word	0x08008839
 80087c0:	08008839 	.word	0x08008839
 80087c4:	08008821 	.word	0x08008821
 80087c8:	08008839 	.word	0x08008839
 80087cc:	08008839 	.word	0x08008839
 80087d0:	08008839 	.word	0x08008839
 80087d4:	08008839 	.word	0x08008839
 80087d8:	08008839 	.word	0x08008839
 80087dc:	08008839 	.word	0x08008839
 80087e0:	08008839 	.word	0x08008839
 80087e4:	08008829 	.word	0x08008829
 80087e8:	08008839 	.word	0x08008839
 80087ec:	08008839 	.word	0x08008839
 80087f0:	08008839 	.word	0x08008839
 80087f4:	08008839 	.word	0x08008839
 80087f8:	08008839 	.word	0x08008839
 80087fc:	08008839 	.word	0x08008839
 8008800:	08008839 	.word	0x08008839
 8008804:	08008831 	.word	0x08008831
 8008808:	2301      	movs	r3, #1
 800880a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800880e:	e233      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008810:	2304      	movs	r3, #4
 8008812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008816:	e22f      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008818:	2308      	movs	r3, #8
 800881a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881e:	e22b      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008820:	2310      	movs	r3, #16
 8008822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008826:	e227      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008828:	2320      	movs	r3, #32
 800882a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800882e:	e223      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008830:	2340      	movs	r3, #64	; 0x40
 8008832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008836:	e21f      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008838:	2380      	movs	r3, #128	; 0x80
 800883a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800883e:	bf00      	nop
 8008840:	e21a      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a6d      	ldr	r2, [pc, #436]	; (80089fc <UART_SetConfig+0x354>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d132      	bne.n	80088b2 <UART_SetConfig+0x20a>
 800884c:	4b6a      	ldr	r3, [pc, #424]	; (80089f8 <UART_SetConfig+0x350>)
 800884e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008850:	f003 0307 	and.w	r3, r3, #7
 8008854:	2b05      	cmp	r3, #5
 8008856:	d827      	bhi.n	80088a8 <UART_SetConfig+0x200>
 8008858:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <UART_SetConfig+0x1b8>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	08008879 	.word	0x08008879
 8008864:	08008881 	.word	0x08008881
 8008868:	08008889 	.word	0x08008889
 800886c:	08008891 	.word	0x08008891
 8008870:	08008899 	.word	0x08008899
 8008874:	080088a1 	.word	0x080088a1
 8008878:	2300      	movs	r3, #0
 800887a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887e:	e1fb      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008880:	2304      	movs	r3, #4
 8008882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008886:	e1f7      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008888:	2308      	movs	r3, #8
 800888a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888e:	e1f3      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008890:	2310      	movs	r3, #16
 8008892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008896:	e1ef      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008898:	2320      	movs	r3, #32
 800889a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800889e:	e1eb      	b.n	8008c78 <UART_SetConfig+0x5d0>
 80088a0:	2340      	movs	r3, #64	; 0x40
 80088a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a6:	e1e7      	b.n	8008c78 <UART_SetConfig+0x5d0>
 80088a8:	2380      	movs	r3, #128	; 0x80
 80088aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ae:	bf00      	nop
 80088b0:	e1e2      	b.n	8008c78 <UART_SetConfig+0x5d0>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a52      	ldr	r2, [pc, #328]	; (8008a00 <UART_SetConfig+0x358>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d132      	bne.n	8008922 <UART_SetConfig+0x27a>
 80088bc:	4b4e      	ldr	r3, [pc, #312]	; (80089f8 <UART_SetConfig+0x350>)
 80088be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c0:	f003 0307 	and.w	r3, r3, #7
 80088c4:	2b05      	cmp	r3, #5
 80088c6:	d827      	bhi.n	8008918 <UART_SetConfig+0x270>
 80088c8:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <UART_SetConfig+0x228>)
 80088ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	080088e9 	.word	0x080088e9
 80088d4:	080088f1 	.word	0x080088f1
 80088d8:	080088f9 	.word	0x080088f9
 80088dc:	08008901 	.word	0x08008901
 80088e0:	08008909 	.word	0x08008909
 80088e4:	08008911 	.word	0x08008911
 80088e8:	2300      	movs	r3, #0
 80088ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ee:	e1c3      	b.n	8008c78 <UART_SetConfig+0x5d0>
 80088f0:	2304      	movs	r3, #4
 80088f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f6:	e1bf      	b.n	8008c78 <UART_SetConfig+0x5d0>
 80088f8:	2308      	movs	r3, #8
 80088fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fe:	e1bb      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008900:	2310      	movs	r3, #16
 8008902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008906:	e1b7      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008908:	2320      	movs	r3, #32
 800890a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890e:	e1b3      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008910:	2340      	movs	r3, #64	; 0x40
 8008912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008916:	e1af      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008918:	2380      	movs	r3, #128	; 0x80
 800891a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891e:	bf00      	nop
 8008920:	e1aa      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a37      	ldr	r2, [pc, #220]	; (8008a04 <UART_SetConfig+0x35c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d132      	bne.n	8008992 <UART_SetConfig+0x2ea>
 800892c:	4b32      	ldr	r3, [pc, #200]	; (80089f8 <UART_SetConfig+0x350>)
 800892e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	2b05      	cmp	r3, #5
 8008936:	d827      	bhi.n	8008988 <UART_SetConfig+0x2e0>
 8008938:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <UART_SetConfig+0x298>)
 800893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893e:	bf00      	nop
 8008940:	08008959 	.word	0x08008959
 8008944:	08008961 	.word	0x08008961
 8008948:	08008969 	.word	0x08008969
 800894c:	08008971 	.word	0x08008971
 8008950:	08008979 	.word	0x08008979
 8008954:	08008981 	.word	0x08008981
 8008958:	2300      	movs	r3, #0
 800895a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895e:	e18b      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008960:	2304      	movs	r3, #4
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008966:	e187      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008968:	2308      	movs	r3, #8
 800896a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896e:	e183      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008970:	2310      	movs	r3, #16
 8008972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008976:	e17f      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008978:	2320      	movs	r3, #32
 800897a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897e:	e17b      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008980:	2340      	movs	r3, #64	; 0x40
 8008982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008986:	e177      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008988:	2380      	movs	r3, #128	; 0x80
 800898a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898e:	bf00      	nop
 8008990:	e172      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a1c      	ldr	r2, [pc, #112]	; (8008a08 <UART_SetConfig+0x360>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d144      	bne.n	8008a26 <UART_SetConfig+0x37e>
 800899c:	4b16      	ldr	r3, [pc, #88]	; (80089f8 <UART_SetConfig+0x350>)
 800899e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d839      	bhi.n	8008a1c <UART_SetConfig+0x374>
 80089a8:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <UART_SetConfig+0x308>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	080089c9 	.word	0x080089c9
 80089b4:	080089d1 	.word	0x080089d1
 80089b8:	080089d9 	.word	0x080089d9
 80089bc:	080089e1 	.word	0x080089e1
 80089c0:	08008a0d 	.word	0x08008a0d
 80089c4:	08008a15 	.word	0x08008a15
 80089c8:	2300      	movs	r3, #0
 80089ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ce:	e153      	b.n	8008c78 <UART_SetConfig+0x5d0>
 80089d0:	2304      	movs	r3, #4
 80089d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d6:	e14f      	b.n	8008c78 <UART_SetConfig+0x5d0>
 80089d8:	2308      	movs	r3, #8
 80089da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089de:	e14b      	b.n	8008c78 <UART_SetConfig+0x5d0>
 80089e0:	2310      	movs	r3, #16
 80089e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e6:	e147      	b.n	8008c78 <UART_SetConfig+0x5d0>
 80089e8:	cfff69f3 	.word	0xcfff69f3
 80089ec:	58000c00 	.word	0x58000c00
 80089f0:	11fff4ff 	.word	0x11fff4ff
 80089f4:	40011000 	.word	0x40011000
 80089f8:	58024400 	.word	0x58024400
 80089fc:	40004400 	.word	0x40004400
 8008a00:	40004800 	.word	0x40004800
 8008a04:	40004c00 	.word	0x40004c00
 8008a08:	40005000 	.word	0x40005000
 8008a0c:	2320      	movs	r3, #32
 8008a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a12:	e131      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008a14:	2340      	movs	r3, #64	; 0x40
 8008a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a1a:	e12d      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008a1c:	2380      	movs	r3, #128	; 0x80
 8008a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a22:	bf00      	nop
 8008a24:	e128      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4ab6      	ldr	r2, [pc, #728]	; (8008d04 <UART_SetConfig+0x65c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d178      	bne.n	8008b22 <UART_SetConfig+0x47a>
 8008a30:	4bb5      	ldr	r3, [pc, #724]	; (8008d08 <UART_SetConfig+0x660>)
 8008a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a38:	2b28      	cmp	r3, #40	; 0x28
 8008a3a:	d86d      	bhi.n	8008b18 <UART_SetConfig+0x470>
 8008a3c:	a201      	add	r2, pc, #4	; (adr r2, 8008a44 <UART_SetConfig+0x39c>)
 8008a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a42:	bf00      	nop
 8008a44:	08008ae9 	.word	0x08008ae9
 8008a48:	08008b19 	.word	0x08008b19
 8008a4c:	08008b19 	.word	0x08008b19
 8008a50:	08008b19 	.word	0x08008b19
 8008a54:	08008b19 	.word	0x08008b19
 8008a58:	08008b19 	.word	0x08008b19
 8008a5c:	08008b19 	.word	0x08008b19
 8008a60:	08008b19 	.word	0x08008b19
 8008a64:	08008af1 	.word	0x08008af1
 8008a68:	08008b19 	.word	0x08008b19
 8008a6c:	08008b19 	.word	0x08008b19
 8008a70:	08008b19 	.word	0x08008b19
 8008a74:	08008b19 	.word	0x08008b19
 8008a78:	08008b19 	.word	0x08008b19
 8008a7c:	08008b19 	.word	0x08008b19
 8008a80:	08008b19 	.word	0x08008b19
 8008a84:	08008af9 	.word	0x08008af9
 8008a88:	08008b19 	.word	0x08008b19
 8008a8c:	08008b19 	.word	0x08008b19
 8008a90:	08008b19 	.word	0x08008b19
 8008a94:	08008b19 	.word	0x08008b19
 8008a98:	08008b19 	.word	0x08008b19
 8008a9c:	08008b19 	.word	0x08008b19
 8008aa0:	08008b19 	.word	0x08008b19
 8008aa4:	08008b01 	.word	0x08008b01
 8008aa8:	08008b19 	.word	0x08008b19
 8008aac:	08008b19 	.word	0x08008b19
 8008ab0:	08008b19 	.word	0x08008b19
 8008ab4:	08008b19 	.word	0x08008b19
 8008ab8:	08008b19 	.word	0x08008b19
 8008abc:	08008b19 	.word	0x08008b19
 8008ac0:	08008b19 	.word	0x08008b19
 8008ac4:	08008b09 	.word	0x08008b09
 8008ac8:	08008b19 	.word	0x08008b19
 8008acc:	08008b19 	.word	0x08008b19
 8008ad0:	08008b19 	.word	0x08008b19
 8008ad4:	08008b19 	.word	0x08008b19
 8008ad8:	08008b19 	.word	0x08008b19
 8008adc:	08008b19 	.word	0x08008b19
 8008ae0:	08008b19 	.word	0x08008b19
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	2301      	movs	r3, #1
 8008aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aee:	e0c3      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008af0:	2304      	movs	r3, #4
 8008af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008af6:	e0bf      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008af8:	2308      	movs	r3, #8
 8008afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008afe:	e0bb      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b00:	2310      	movs	r3, #16
 8008b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b06:	e0b7      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b08:	2320      	movs	r3, #32
 8008b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b0e:	e0b3      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b10:	2340      	movs	r3, #64	; 0x40
 8008b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b16:	e0af      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b18:	2380      	movs	r3, #128	; 0x80
 8008b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b1e:	bf00      	nop
 8008b20:	e0aa      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a79      	ldr	r2, [pc, #484]	; (8008d0c <UART_SetConfig+0x664>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d132      	bne.n	8008b92 <UART_SetConfig+0x4ea>
 8008b2c:	4b76      	ldr	r3, [pc, #472]	; (8008d08 <UART_SetConfig+0x660>)
 8008b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	2b05      	cmp	r3, #5
 8008b36:	d827      	bhi.n	8008b88 <UART_SetConfig+0x4e0>
 8008b38:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <UART_SetConfig+0x498>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b59 	.word	0x08008b59
 8008b44:	08008b61 	.word	0x08008b61
 8008b48:	08008b69 	.word	0x08008b69
 8008b4c:	08008b71 	.word	0x08008b71
 8008b50:	08008b79 	.word	0x08008b79
 8008b54:	08008b81 	.word	0x08008b81
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b5e:	e08b      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b60:	2304      	movs	r3, #4
 8008b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b66:	e087      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b68:	2308      	movs	r3, #8
 8008b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6e:	e083      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b70:	2310      	movs	r3, #16
 8008b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b76:	e07f      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b78:	2320      	movs	r3, #32
 8008b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b7e:	e07b      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b80:	2340      	movs	r3, #64	; 0x40
 8008b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b86:	e077      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b88:	2380      	movs	r3, #128	; 0x80
 8008b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8e:	bf00      	nop
 8008b90:	e072      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a5e      	ldr	r2, [pc, #376]	; (8008d10 <UART_SetConfig+0x668>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d132      	bne.n	8008c02 <UART_SetConfig+0x55a>
 8008b9c:	4b5a      	ldr	r3, [pc, #360]	; (8008d08 <UART_SetConfig+0x660>)
 8008b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	2b05      	cmp	r3, #5
 8008ba6:	d827      	bhi.n	8008bf8 <UART_SetConfig+0x550>
 8008ba8:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <UART_SetConfig+0x508>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008bc9 	.word	0x08008bc9
 8008bb4:	08008bd1 	.word	0x08008bd1
 8008bb8:	08008bd9 	.word	0x08008bd9
 8008bbc:	08008be1 	.word	0x08008be1
 8008bc0:	08008be9 	.word	0x08008be9
 8008bc4:	08008bf1 	.word	0x08008bf1
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bce:	e053      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd6:	e04f      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008bd8:	2308      	movs	r3, #8
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bde:	e04b      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008be0:	2310      	movs	r3, #16
 8008be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be6:	e047      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008be8:	2320      	movs	r3, #32
 8008bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bee:	e043      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008bf0:	2340      	movs	r3, #64	; 0x40
 8008bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf6:	e03f      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008bf8:	2380      	movs	r3, #128	; 0x80
 8008bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfe:	bf00      	nop
 8008c00:	e03a      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a43      	ldr	r2, [pc, #268]	; (8008d14 <UART_SetConfig+0x66c>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d132      	bne.n	8008c72 <UART_SetConfig+0x5ca>
 8008c0c:	4b3e      	ldr	r3, [pc, #248]	; (8008d08 <UART_SetConfig+0x660>)
 8008c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c10:	f003 0307 	and.w	r3, r3, #7
 8008c14:	2b05      	cmp	r3, #5
 8008c16:	d827      	bhi.n	8008c68 <UART_SetConfig+0x5c0>
 8008c18:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x578>)
 8008c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1e:	bf00      	nop
 8008c20:	08008c39 	.word	0x08008c39
 8008c24:	08008c41 	.word	0x08008c41
 8008c28:	08008c49 	.word	0x08008c49
 8008c2c:	08008c51 	.word	0x08008c51
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c61 	.word	0x08008c61
 8008c38:	2302      	movs	r3, #2
 8008c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3e:	e01b      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008c40:	2304      	movs	r3, #4
 8008c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c46:	e017      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4e:	e013      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008c50:	2310      	movs	r3, #16
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c56:	e00f      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008c58:	2320      	movs	r3, #32
 8008c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5e:	e00b      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008c60:	2340      	movs	r3, #64	; 0x40
 8008c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c66:	e007      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008c68:	2380      	movs	r3, #128	; 0x80
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	bf00      	nop
 8008c70:	e002      	b.n	8008c78 <UART_SetConfig+0x5d0>
 8008c72:	2380      	movs	r3, #128	; 0x80
 8008c74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a25      	ldr	r2, [pc, #148]	; (8008d14 <UART_SetConfig+0x66c>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	f040 80b8 	bne.w	8008df4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d019      	beq.n	8008cc0 <UART_SetConfig+0x618>
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	dc04      	bgt.n	8008c9a <UART_SetConfig+0x5f2>
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d009      	beq.n	8008ca8 <UART_SetConfig+0x600>
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d00b      	beq.n	8008cb0 <UART_SetConfig+0x608>
 8008c98:	e042      	b.n	8008d20 <UART_SetConfig+0x678>
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	d02b      	beq.n	8008cf6 <UART_SetConfig+0x64e>
 8008c9e:	2b40      	cmp	r3, #64	; 0x40
 8008ca0:	d02c      	beq.n	8008cfc <UART_SetConfig+0x654>
 8008ca2:	2b10      	cmp	r3, #16
 8008ca4:	d014      	beq.n	8008cd0 <UART_SetConfig+0x628>
 8008ca6:	e03b      	b.n	8008d20 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008ca8:	f7fe faa0 	bl	80071ec <HAL_RCCEx_GetD3PCLK1Freq>
 8008cac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008cae:	e03d      	b.n	8008d2c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cb0:	f107 0314 	add.w	r3, r7, #20
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe faaf 	bl	8007218 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cbe:	e035      	b.n	8008d2c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fe fbf3 	bl	80074b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cce:	e02d      	b.n	8008d2c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cd0:	4b0d      	ldr	r3, [pc, #52]	; (8008d08 <UART_SetConfig+0x660>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0320 	and.w	r3, r3, #32
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <UART_SetConfig+0x660>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	08db      	lsrs	r3, r3, #3
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <UART_SetConfig+0x670>)
 8008ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cee:	e01d      	b.n	8008d2c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8008cf0:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <UART_SetConfig+0x670>)
 8008cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cf4:	e01a      	b.n	8008d2c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cf6:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <UART_SetConfig+0x674>)
 8008cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cfa:	e017      	b.n	8008d2c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d02:	e013      	b.n	8008d2c <UART_SetConfig+0x684>
 8008d04:	40011400 	.word	0x40011400
 8008d08:	58024400 	.word	0x58024400
 8008d0c:	40007800 	.word	0x40007800
 8008d10:	40007c00 	.word	0x40007c00
 8008d14:	58000c00 	.word	0x58000c00
 8008d18:	03d09000 	.word	0x03d09000
 8008d1c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008d2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 824d 	beq.w	80091ce <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	4aad      	ldr	r2, [pc, #692]	; (8008ff0 <UART_SetConfig+0x948>)
 8008d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d46:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	4413      	add	r3, r2
 8008d52:	6a3a      	ldr	r2, [r7, #32]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d305      	bcc.n	8008d64 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d5e:	6a3a      	ldr	r2, [r7, #32]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d903      	bls.n	8008d6c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008d6a:	e230      	b.n	80091ce <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f04f 0100 	mov.w	r1, #0
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	4a9d      	ldr	r2, [pc, #628]	; (8008ff0 <UART_SetConfig+0x948>)
 8008d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f04f 0400 	mov.w	r4, #0
 8008d84:	461a      	mov	r2, r3
 8008d86:	4623      	mov	r3, r4
 8008d88:	f7f7 fb62 	bl	8000450 <__aeabi_uldivmod>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	4619      	mov	r1, r3
 8008d92:	4622      	mov	r2, r4
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	f04f 0400 	mov.w	r4, #0
 8008d9c:	0214      	lsls	r4, r2, #8
 8008d9e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008da2:	020b      	lsls	r3, r1, #8
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6852      	ldr	r2, [r2, #4]
 8008da8:	0852      	lsrs	r2, r2, #1
 8008daa:	4611      	mov	r1, r2
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	eb13 0b01 	adds.w	fp, r3, r1
 8008db4:	eb44 0c02 	adc.w	ip, r4, r2
 8008db8:	4658      	mov	r0, fp
 8008dba:	4661      	mov	r1, ip
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f04f 0400 	mov.w	r4, #0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	4623      	mov	r3, r4
 8008dc8:	f7f7 fb42 	bl	8000450 <__aeabi_uldivmod>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dd8:	d308      	bcc.n	8008dec <UART_SetConfig+0x744>
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008de0:	d204      	bcs.n	8008dec <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008de8:	60da      	str	r2, [r3, #12]
 8008dea:	e1f0      	b.n	80091ce <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008df2:	e1ec      	b.n	80091ce <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dfc:	f040 8100 	bne.w	8009000 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8008e00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e04:	2b40      	cmp	r3, #64	; 0x40
 8008e06:	f200 80b7 	bhi.w	8008f78 <UART_SetConfig+0x8d0>
 8008e0a:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <UART_SetConfig+0x768>)
 8008e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e10:	08008f15 	.word	0x08008f15
 8008e14:	08008f1d 	.word	0x08008f1d
 8008e18:	08008f79 	.word	0x08008f79
 8008e1c:	08008f79 	.word	0x08008f79
 8008e20:	08008f25 	.word	0x08008f25
 8008e24:	08008f79 	.word	0x08008f79
 8008e28:	08008f79 	.word	0x08008f79
 8008e2c:	08008f79 	.word	0x08008f79
 8008e30:	08008f35 	.word	0x08008f35
 8008e34:	08008f79 	.word	0x08008f79
 8008e38:	08008f79 	.word	0x08008f79
 8008e3c:	08008f79 	.word	0x08008f79
 8008e40:	08008f79 	.word	0x08008f79
 8008e44:	08008f79 	.word	0x08008f79
 8008e48:	08008f79 	.word	0x08008f79
 8008e4c:	08008f79 	.word	0x08008f79
 8008e50:	08008f45 	.word	0x08008f45
 8008e54:	08008f79 	.word	0x08008f79
 8008e58:	08008f79 	.word	0x08008f79
 8008e5c:	08008f79 	.word	0x08008f79
 8008e60:	08008f79 	.word	0x08008f79
 8008e64:	08008f79 	.word	0x08008f79
 8008e68:	08008f79 	.word	0x08008f79
 8008e6c:	08008f79 	.word	0x08008f79
 8008e70:	08008f79 	.word	0x08008f79
 8008e74:	08008f79 	.word	0x08008f79
 8008e78:	08008f79 	.word	0x08008f79
 8008e7c:	08008f79 	.word	0x08008f79
 8008e80:	08008f79 	.word	0x08008f79
 8008e84:	08008f79 	.word	0x08008f79
 8008e88:	08008f79 	.word	0x08008f79
 8008e8c:	08008f79 	.word	0x08008f79
 8008e90:	08008f6b 	.word	0x08008f6b
 8008e94:	08008f79 	.word	0x08008f79
 8008e98:	08008f79 	.word	0x08008f79
 8008e9c:	08008f79 	.word	0x08008f79
 8008ea0:	08008f79 	.word	0x08008f79
 8008ea4:	08008f79 	.word	0x08008f79
 8008ea8:	08008f79 	.word	0x08008f79
 8008eac:	08008f79 	.word	0x08008f79
 8008eb0:	08008f79 	.word	0x08008f79
 8008eb4:	08008f79 	.word	0x08008f79
 8008eb8:	08008f79 	.word	0x08008f79
 8008ebc:	08008f79 	.word	0x08008f79
 8008ec0:	08008f79 	.word	0x08008f79
 8008ec4:	08008f79 	.word	0x08008f79
 8008ec8:	08008f79 	.word	0x08008f79
 8008ecc:	08008f79 	.word	0x08008f79
 8008ed0:	08008f79 	.word	0x08008f79
 8008ed4:	08008f79 	.word	0x08008f79
 8008ed8:	08008f79 	.word	0x08008f79
 8008edc:	08008f79 	.word	0x08008f79
 8008ee0:	08008f79 	.word	0x08008f79
 8008ee4:	08008f79 	.word	0x08008f79
 8008ee8:	08008f79 	.word	0x08008f79
 8008eec:	08008f79 	.word	0x08008f79
 8008ef0:	08008f79 	.word	0x08008f79
 8008ef4:	08008f79 	.word	0x08008f79
 8008ef8:	08008f79 	.word	0x08008f79
 8008efc:	08008f79 	.word	0x08008f79
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008f79 	.word	0x08008f79
 8008f08:	08008f79 	.word	0x08008f79
 8008f0c:	08008f79 	.word	0x08008f79
 8008f10:	08008f71 	.word	0x08008f71
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f14:	f7fd fa50 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 8008f18:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f1a:	e033      	b.n	8008f84 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f1c:	f7fd fa62 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
 8008f20:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f22:	e02f      	b.n	8008f84 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f24:	f107 0314 	add.w	r3, r7, #20
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fe f975 	bl	8007218 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f32:	e027      	b.n	8008f84 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f34:	f107 0308 	add.w	r3, r7, #8
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe fab9 	bl	80074b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f42:	e01f      	b.n	8008f84 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f44:	4b2b      	ldr	r3, [pc, #172]	; (8008ff4 <UART_SetConfig+0x94c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0320 	and.w	r3, r3, #32
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d009      	beq.n	8008f64 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f50:	4b28      	ldr	r3, [pc, #160]	; (8008ff4 <UART_SetConfig+0x94c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	08db      	lsrs	r3, r3, #3
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	4a27      	ldr	r2, [pc, #156]	; (8008ff8 <UART_SetConfig+0x950>)
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f62:	e00f      	b.n	8008f84 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8008f64:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <UART_SetConfig+0x950>)
 8008f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f68:	e00c      	b.n	8008f84 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f6a:	4b24      	ldr	r3, [pc, #144]	; (8008ffc <UART_SetConfig+0x954>)
 8008f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f6e:	e009      	b.n	8008f84 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f76:	e005      	b.n	8008f84 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008f82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 8121 	beq.w	80091ce <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	4a17      	ldr	r2, [pc, #92]	; (8008ff0 <UART_SetConfig+0x948>)
 8008f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f9e:	005a      	lsls	r2, r3, #1
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	085b      	lsrs	r3, r3, #1
 8008fa6:	441a      	add	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	2b0f      	cmp	r3, #15
 8008fb8:	d916      	bls.n	8008fe8 <UART_SetConfig+0x940>
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc0:	d212      	bcs.n	8008fe8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	f023 030f 	bic.w	r3, r3, #15
 8008fca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	085b      	lsrs	r3, r3, #1
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008fe4:	60da      	str	r2, [r3, #12]
 8008fe6:	e0f2      	b.n	80091ce <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008fee:	e0ee      	b.n	80091ce <UART_SetConfig+0xb26>
 8008ff0:	0800f004 	.word	0x0800f004
 8008ff4:	58024400 	.word	0x58024400
 8008ff8:	03d09000 	.word	0x03d09000
 8008ffc:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009000:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009004:	2b40      	cmp	r3, #64	; 0x40
 8009006:	f200 80b7 	bhi.w	8009178 <UART_SetConfig+0xad0>
 800900a:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <UART_SetConfig+0x968>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009115 	.word	0x08009115
 8009014:	0800911d 	.word	0x0800911d
 8009018:	08009179 	.word	0x08009179
 800901c:	08009179 	.word	0x08009179
 8009020:	08009125 	.word	0x08009125
 8009024:	08009179 	.word	0x08009179
 8009028:	08009179 	.word	0x08009179
 800902c:	08009179 	.word	0x08009179
 8009030:	08009135 	.word	0x08009135
 8009034:	08009179 	.word	0x08009179
 8009038:	08009179 	.word	0x08009179
 800903c:	08009179 	.word	0x08009179
 8009040:	08009179 	.word	0x08009179
 8009044:	08009179 	.word	0x08009179
 8009048:	08009179 	.word	0x08009179
 800904c:	08009179 	.word	0x08009179
 8009050:	08009145 	.word	0x08009145
 8009054:	08009179 	.word	0x08009179
 8009058:	08009179 	.word	0x08009179
 800905c:	08009179 	.word	0x08009179
 8009060:	08009179 	.word	0x08009179
 8009064:	08009179 	.word	0x08009179
 8009068:	08009179 	.word	0x08009179
 800906c:	08009179 	.word	0x08009179
 8009070:	08009179 	.word	0x08009179
 8009074:	08009179 	.word	0x08009179
 8009078:	08009179 	.word	0x08009179
 800907c:	08009179 	.word	0x08009179
 8009080:	08009179 	.word	0x08009179
 8009084:	08009179 	.word	0x08009179
 8009088:	08009179 	.word	0x08009179
 800908c:	08009179 	.word	0x08009179
 8009090:	0800916b 	.word	0x0800916b
 8009094:	08009179 	.word	0x08009179
 8009098:	08009179 	.word	0x08009179
 800909c:	08009179 	.word	0x08009179
 80090a0:	08009179 	.word	0x08009179
 80090a4:	08009179 	.word	0x08009179
 80090a8:	08009179 	.word	0x08009179
 80090ac:	08009179 	.word	0x08009179
 80090b0:	08009179 	.word	0x08009179
 80090b4:	08009179 	.word	0x08009179
 80090b8:	08009179 	.word	0x08009179
 80090bc:	08009179 	.word	0x08009179
 80090c0:	08009179 	.word	0x08009179
 80090c4:	08009179 	.word	0x08009179
 80090c8:	08009179 	.word	0x08009179
 80090cc:	08009179 	.word	0x08009179
 80090d0:	08009179 	.word	0x08009179
 80090d4:	08009179 	.word	0x08009179
 80090d8:	08009179 	.word	0x08009179
 80090dc:	08009179 	.word	0x08009179
 80090e0:	08009179 	.word	0x08009179
 80090e4:	08009179 	.word	0x08009179
 80090e8:	08009179 	.word	0x08009179
 80090ec:	08009179 	.word	0x08009179
 80090f0:	08009179 	.word	0x08009179
 80090f4:	08009179 	.word	0x08009179
 80090f8:	08009179 	.word	0x08009179
 80090fc:	08009179 	.word	0x08009179
 8009100:	08009179 	.word	0x08009179
 8009104:	08009179 	.word	0x08009179
 8009108:	08009179 	.word	0x08009179
 800910c:	08009179 	.word	0x08009179
 8009110:	08009171 	.word	0x08009171
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009114:	f7fd f950 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 8009118:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800911a:	e033      	b.n	8009184 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800911c:	f7fd f962 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
 8009120:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009122:	e02f      	b.n	8009184 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009124:	f107 0314 	add.w	r3, r7, #20
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe f875 	bl	8007218 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009132:	e027      	b.n	8009184 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009134:	f107 0308 	add.w	r3, r7, #8
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe f9b9 	bl	80074b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009142:	e01f      	b.n	8009184 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009144:	4b2c      	ldr	r3, [pc, #176]	; (80091f8 <UART_SetConfig+0xb50>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0320 	and.w	r3, r3, #32
 800914c:	2b00      	cmp	r3, #0
 800914e:	d009      	beq.n	8009164 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009150:	4b29      	ldr	r3, [pc, #164]	; (80091f8 <UART_SetConfig+0xb50>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	08db      	lsrs	r3, r3, #3
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	4a28      	ldr	r2, [pc, #160]	; (80091fc <UART_SetConfig+0xb54>)
 800915c:	fa22 f303 	lsr.w	r3, r2, r3
 8009160:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009162:	e00f      	b.n	8009184 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8009164:	4b25      	ldr	r3, [pc, #148]	; (80091fc <UART_SetConfig+0xb54>)
 8009166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009168:	e00c      	b.n	8009184 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800916a:	4b25      	ldr	r3, [pc, #148]	; (8009200 <UART_SetConfig+0xb58>)
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800916e:	e009      	b.n	8009184 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009176:	e005      	b.n	8009184 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009182:	bf00      	nop
    }

    if (pclk != 0U)
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d021      	beq.n	80091ce <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	4a1d      	ldr	r2, [pc, #116]	; (8009204 <UART_SetConfig+0xb5c>)
 8009190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009194:	461a      	mov	r2, r3
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	fbb3 f2f2 	udiv	r2, r3, r2
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	085b      	lsrs	r3, r3, #1
 80091a2:	441a      	add	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	2b0f      	cmp	r3, #15
 80091b4:	d908      	bls.n	80091c8 <UART_SetConfig+0xb20>
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091bc:	d204      	bcs.n	80091c8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c4:	60da      	str	r2, [r3, #12]
 80091c6:	e002      	b.n	80091ce <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80091ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3738      	adds	r7, #56	; 0x38
 80091f2:	46bd      	mov	sp, r7
 80091f4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80091f8:	58024400 	.word	0x58024400
 80091fc:	03d09000 	.word	0x03d09000
 8009200:	003d0900 	.word	0x003d0900
 8009204:	0800f004 	.word	0x0800f004

08009208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00a      	beq.n	8009232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	f003 0308 	and.w	r3, r3, #8
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929c:	f003 0310 	and.w	r3, r3, #16
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	f003 0320 	and.w	r3, r3, #32
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01a      	beq.n	800931e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009306:	d10a      	bne.n	800931e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	605a      	str	r2, [r3, #4]
  }
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af02      	add	r7, sp, #8
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800935c:	f7fb fae4 	bl	8004928 <HAL_GetTick>
 8009360:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b08      	cmp	r3, #8
 800936e:	d10e      	bne.n	800938e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f82c 	bl	80093dc <UART_WaitOnFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e022      	b.n	80093d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b04      	cmp	r3, #4
 800939a:	d10e      	bne.n	80093ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800939c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f816 	bl	80093dc <UART_WaitOnFlagUntilTimeout>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e00c      	b.n	80093d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2220      	movs	r2, #32
 80093c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	4613      	mov	r3, r2
 80093ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ec:	e062      	b.n	80094b4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f4:	d05e      	beq.n	80094b4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f6:	f7fb fa97 	bl	8004928 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	429a      	cmp	r2, r3
 8009404:	d302      	bcc.n	800940c <UART_WaitOnFlagUntilTimeout+0x30>
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d11d      	bne.n	8009448 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800941a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0201 	bic.w	r2, r2, #1
 800942a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2220      	movs	r2, #32
 8009430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2220      	movs	r2, #32
 8009438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e045      	b.n	80094d4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0304 	and.w	r3, r3, #4
 8009452:	2b00      	cmp	r3, #0
 8009454:	d02e      	beq.n	80094b4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009464:	d126      	bne.n	80094b4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800946e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800947e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0201 	bic.w	r2, r2, #1
 800948e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2220      	movs	r2, #32
 800949c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2220      	movs	r2, #32
 80094a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e00f      	b.n	80094d4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	69da      	ldr	r2, [r3, #28]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	4013      	ands	r3, r2
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	bf0c      	ite	eq
 80094c4:	2301      	moveq	r3, #1
 80094c6:	2300      	movne	r3, #0
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	461a      	mov	r2, r3
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d08d      	beq.n	80093ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6899      	ldr	r1, [r3, #8]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4b08      	ldr	r3, [pc, #32]	; (8009520 <UART_EndRxTransfer+0x44>)
 8009500:	400b      	ands	r3, r1
 8009502:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	effffffe 	.word	0xeffffffe

08009524 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff f8a6 	bl	8008694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800955e:	2b21      	cmp	r3, #33	; 0x21
 8009560:	d12a      	bne.n	80095b8 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009568:	b29b      	uxth	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d110      	bne.n	8009590 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800957c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800958c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800958e:	e013      	b.n	80095b8 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009594:	781a      	ldrb	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095d2:	2b21      	cmp	r3, #33	; 0x21
 80095d4:	d12f      	bne.n	8009636 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80095dc:	b29b      	uxth	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d110      	bne.n	8009604 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095f0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009600:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009602:	e018      	b.n	8009636 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009608:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009618:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961e:	1c9a      	adds	r2, r3, #2
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800962a:	b29b      	uxth	r3, r3
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009636:	bf00      	nop
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009642:	b480      	push	{r7}
 8009644:	b085      	sub	sp, #20
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009650:	2b21      	cmp	r3, #33	; 0x21
 8009652:	d13d      	bne.n	80096d0 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800965a:	81fb      	strh	r3, [r7, #14]
 800965c:	e035      	b.n	80096ca <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d111      	bne.n	800968e <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009678:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009688:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800968a:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800968c:	e020      	b.n	80096d0 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009698:	2b00      	cmp	r3, #0
 800969a:	d013      	beq.n	80096c4 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a0:	781a      	ldrb	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	3b01      	subs	r3, #1
 80096bc:	b29a      	uxth	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80096c4:	89fb      	ldrh	r3, [r7, #14]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	81fb      	strh	r3, [r7, #14]
 80096ca:	89fb      	ldrh	r3, [r7, #14]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1c6      	bne.n	800965e <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80096d0:	bf00      	nop
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ea:	2b21      	cmp	r3, #33	; 0x21
 80096ec:	d142      	bne.n	8009774 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096f4:	81fb      	strh	r3, [r7, #14]
 80096f6:	e03a      	b.n	800976e <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80096fe:	b29b      	uxth	r3, r3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d111      	bne.n	8009728 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009712:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009722:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8009724:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8009726:	e025      	b.n	8009774 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009732:	2b00      	cmp	r3, #0
 8009734:	d018      	beq.n	8009768 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973a:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800974a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009750:	1c9a      	adds	r2, r3, #2
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800975c:	b29b      	uxth	r3, r3
 800975e:	3b01      	subs	r3, #1
 8009760:	b29a      	uxth	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009768:	89fb      	ldrh	r3, [r7, #14]
 800976a:	3b01      	subs	r3, #1
 800976c:	81fb      	strh	r3, [r7, #14]
 800976e:	89fb      	ldrh	r3, [r7, #14]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1c1      	bne.n	80096f8 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8009774:	bf00      	nop
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009796:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7fa fe5c 	bl	8004464 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097ca:	2b22      	cmp	r3, #34	; 0x22
 80097cc:	d13b      	bne.n	8009846 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097d6:	89bb      	ldrh	r3, [r7, #12]
 80097d8:	b2d9      	uxtb	r1, r3
 80097da:	89fb      	ldrh	r3, [r7, #14]
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e2:	400a      	ands	r2, r1
 80097e4:	b2d2      	uxtb	r2, r2
 80097e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	d122      	bne.n	8009856 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800981e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689a      	ldr	r2, [r3, #8]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f022 0201 	bic.w	r2, r2, #1
 800982e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2220      	movs	r2, #32
 8009834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7fa fe20 	bl	8004484 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009844:	e007      	b.n	8009856 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	699a      	ldr	r2, [r3, #24]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0208 	orr.w	r2, r2, #8
 8009854:	619a      	str	r2, [r3, #24]
}
 8009856:	bf00      	nop
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800986c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009874:	2b22      	cmp	r3, #34	; 0x22
 8009876:	d13b      	bne.n	80098f0 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009884:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009886:	89ba      	ldrh	r2, [r7, #12]
 8009888:	89fb      	ldrh	r3, [r7, #14]
 800988a:	4013      	ands	r3, r2
 800988c:	b29a      	uxth	r2, r3
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009896:	1c9a      	adds	r2, r3, #2
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	3b01      	subs	r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d122      	bne.n	8009900 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098c8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 0201 	bic.w	r2, r2, #1
 80098d8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2220      	movs	r2, #32
 80098de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7fa fdcb 	bl	8004484 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098ee:	e007      	b.n	8009900 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	699a      	ldr	r2, [r3, #24]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0208 	orr.w	r2, r2, #8
 80098fe:	619a      	str	r2, [r3, #24]
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009916:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800991e:	2b22      	cmp	r3, #34	; 0x22
 8009920:	d166      	bne.n	80099f0 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009928:	81fb      	strh	r3, [r7, #14]
 800992a:	e03d      	b.n	80099a8 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009934:	893b      	ldrh	r3, [r7, #8]
 8009936:	b2d9      	uxtb	r1, r3
 8009938:	89bb      	ldrh	r3, [r7, #12]
 800993a:	b2da      	uxtb	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009940:	400a      	ands	r2, r1
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994a:	1c5a      	adds	r2, r3, #1
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009956:	b29b      	uxth	r3, r3
 8009958:	3b01      	subs	r3, #1
 800995a:	b29a      	uxth	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009968:	b29b      	uxth	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d119      	bne.n	80099a2 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800997c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6899      	ldr	r1, [r3, #8]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	4b1f      	ldr	r3, [pc, #124]	; (8009a08 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800998a:	400b      	ands	r3, r1
 800998c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fa fd71 	bl	8004484 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80099a2:	89fb      	ldrh	r3, [r7, #14]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	81fb      	strh	r3, [r7, #14]
 80099a8:	89fb      	ldrh	r3, [r7, #14]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1be      	bne.n	800992c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099b4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80099b6:	897b      	ldrh	r3, [r7, #10]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d021      	beq.n	8009a00 <UART_RxISR_8BIT_FIFOEN+0xf8>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099c2:	897a      	ldrh	r2, [r7, #10]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d21b      	bcs.n	8009a00 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689a      	ldr	r2, [r3, #8]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80099d6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a0c      	ldr	r2, [pc, #48]	; (8009a0c <UART_RxISR_8BIT_FIFOEN+0x104>)
 80099dc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0220 	orr.w	r2, r2, #32
 80099ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099ee:	e007      	b.n	8009a00 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699a      	ldr	r2, [r3, #24]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0208 	orr.w	r2, r2, #8
 80099fe:	619a      	str	r2, [r3, #24]
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	effffffe 	.word	0xeffffffe
 8009a0c:	080097b5 	.word	0x080097b5

08009a10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a1e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a26:	2b22      	cmp	r3, #34	; 0x22
 8009a28:	d166      	bne.n	8009af8 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a30:	82fb      	strh	r3, [r7, #22]
 8009a32:	e03d      	b.n	8009ab0 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a40:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a42:	8a3a      	ldrh	r2, [r7, #16]
 8009a44:	8abb      	ldrh	r3, [r7, #20]
 8009a46:	4013      	ands	r3, r2
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a52:	1c9a      	adds	r2, r3, #2
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	3b01      	subs	r3, #1
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d119      	bne.n	8009aaa <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a84:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6899      	ldr	r1, [r3, #8]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	4b1f      	ldr	r3, [pc, #124]	; (8009b10 <UART_RxISR_16BIT_FIFOEN+0x100>)
 8009a92:	400b      	ands	r3, r1
 8009a94:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7fa fced 	bl	8004484 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009aaa:	8afb      	ldrh	r3, [r7, #22]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	82fb      	strh	r3, [r7, #22]
 8009ab0:	8afb      	ldrh	r3, [r7, #22]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1be      	bne.n	8009a34 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009abc:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009abe:	8a7b      	ldrh	r3, [r7, #18]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d021      	beq.n	8009b08 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009aca:	8a7a      	ldrh	r2, [r7, #18]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d21b      	bcs.n	8009b08 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689a      	ldr	r2, [r3, #8]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009ade:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a0c      	ldr	r2, [pc, #48]	; (8009b14 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8009ae4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f042 0220 	orr.w	r2, r2, #32
 8009af4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009af6:	e007      	b.n	8009b08 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	699a      	ldr	r2, [r3, #24]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f042 0208 	orr.w	r2, r2, #8
 8009b06:	619a      	str	r2, [r3, #24]
}
 8009b08:	bf00      	nop
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	effffffe 	.word	0xeffffffe
 8009b14:	0800985f 	.word	0x0800985f

08009b18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d101      	bne.n	8009b6a <HAL_UARTEx_DisableFifoMode+0x16>
 8009b66:	2302      	movs	r3, #2
 8009b68:	e027      	b.n	8009bba <HAL_UARTEx_DisableFifoMode+0x66>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2224      	movs	r2, #36	; 0x24
 8009b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0201 	bic.w	r2, r2, #1
 8009b90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2220      	movs	r2, #32
 8009bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d101      	bne.n	8009bde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bda:	2302      	movs	r3, #2
 8009bdc:	e02d      	b.n	8009c3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2224      	movs	r2, #36	; 0x24
 8009bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f022 0201 	bic.w	r2, r2, #1
 8009c04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f850 	bl	8009cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d101      	bne.n	8009c5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c56:	2302      	movs	r3, #2
 8009c58:	e02d      	b.n	8009cb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2224      	movs	r2, #36	; 0x24
 8009c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0201 	bic.w	r2, r2, #1
 8009c80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f812 	bl	8009cc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
	...

08009cc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b089      	sub	sp, #36	; 0x24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009cc8:	4a2f      	ldr	r2, [pc, #188]	; (8009d88 <UARTEx_SetNbDataToProcess+0xc8>)
 8009cca:	f107 0314 	add.w	r3, r7, #20
 8009cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cd2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009cd6:	4a2d      	ldr	r2, [pc, #180]	; (8009d8c <UARTEx_SetNbDataToProcess+0xcc>)
 8009cd8:	f107 030c 	add.w	r3, r7, #12
 8009cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ce0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d108      	bne.n	8009cfe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cfc:	e03d      	b.n	8009d7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cfe:	2310      	movs	r3, #16
 8009d00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d02:	2310      	movs	r3, #16
 8009d04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	0e5b      	lsrs	r3, r3, #25
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	f003 0307 	and.w	r3, r3, #7
 8009d14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	0f5b      	lsrs	r3, r3, #29
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	f003 0307 	and.w	r3, r3, #7
 8009d24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d26:	7fbb      	ldrb	r3, [r7, #30]
 8009d28:	7f3a      	ldrb	r2, [r7, #28]
 8009d2a:	f107 0120 	add.w	r1, r7, #32
 8009d2e:	440a      	add	r2, r1
 8009d30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d34:	fb02 f303 	mul.w	r3, r2, r3
 8009d38:	7f3a      	ldrb	r2, [r7, #28]
 8009d3a:	f107 0120 	add.w	r1, r7, #32
 8009d3e:	440a      	add	r2, r1
 8009d40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d50:	7ffb      	ldrb	r3, [r7, #31]
 8009d52:	7f7a      	ldrb	r2, [r7, #29]
 8009d54:	f107 0120 	add.w	r1, r7, #32
 8009d58:	440a      	add	r2, r1
 8009d5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d5e:	fb02 f303 	mul.w	r3, r2, r3
 8009d62:	7f7a      	ldrb	r2, [r7, #29]
 8009d64:	f107 0120 	add.w	r1, r7, #32
 8009d68:	440a      	add	r2, r1
 8009d6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009d6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d7a:	bf00      	nop
 8009d7c:	3724      	adds	r7, #36	; 0x24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	0800efd8 	.word	0x0800efd8
 8009d8c:	0800efe0 	.word	0x0800efe0

08009d90 <arm_fill_f32>:
 8009d90:	b410      	push	{r4}
 8009d92:	088c      	lsrs	r4, r1, #2
 8009d94:	d010      	beq.n	8009db8 <arm_fill_f32+0x28>
 8009d96:	f100 0310 	add.w	r3, r0, #16
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	3a01      	subs	r2, #1
 8009d9e:	ed03 0a04 	vstr	s0, [r3, #-16]
 8009da2:	ed03 0a03 	vstr	s0, [r3, #-12]
 8009da6:	f103 0310 	add.w	r3, r3, #16
 8009daa:	ed03 0a06 	vstr	s0, [r3, #-24]	; 0xffffffe8
 8009dae:	ed03 0a05 	vstr	s0, [r3, #-20]	; 0xffffffec
 8009db2:	d1f3      	bne.n	8009d9c <arm_fill_f32+0xc>
 8009db4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8009db8:	f011 0103 	ands.w	r1, r1, #3
 8009dbc:	d003      	beq.n	8009dc6 <arm_fill_f32+0x36>
 8009dbe:	3901      	subs	r1, #1
 8009dc0:	eca0 0a01 	vstmia	r0!, {s0}
 8009dc4:	d1fb      	bne.n	8009dbe <arm_fill_f32+0x2e>
 8009dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <arm_copy_f32>:
 8009dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8009dd4:	d01e      	beq.n	8009e14 <arm_copy_f32+0x48>
 8009dd6:	f100 0410 	add.w	r4, r0, #16
 8009dda:	f101 0310 	add.w	r3, r1, #16
 8009dde:	4645      	mov	r5, r8
 8009de0:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8009de4:	3d01      	subs	r5, #1
 8009de6:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8009dea:	f103 0310 	add.w	r3, r3, #16
 8009dee:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8009df2:	f104 0410 	add.w	r4, r4, #16
 8009df6:	f854 6c14 	ldr.w	r6, [r4, #-20]
 8009dfa:	f843 cc20 	str.w	ip, [r3, #-32]
 8009dfe:	f843 ec1c 	str.w	lr, [r3, #-28]
 8009e02:	f843 7c18 	str.w	r7, [r3, #-24]
 8009e06:	f843 6c14 	str.w	r6, [r3, #-20]
 8009e0a:	d1e9      	bne.n	8009de0 <arm_copy_f32+0x14>
 8009e0c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8009e10:	4440      	add	r0, r8
 8009e12:	4441      	add	r1, r8
 8009e14:	f012 0203 	ands.w	r2, r2, #3
 8009e18:	d005      	beq.n	8009e26 <arm_copy_f32+0x5a>
 8009e1a:	f850 3b04 	ldr.w	r3, [r0], #4
 8009e1e:	3a01      	subs	r2, #1
 8009e20:	f841 3b04 	str.w	r3, [r1], #4
 8009e24:	d1f9      	bne.n	8009e1a <arm_copy_f32+0x4e>
 8009e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e2a:	bf00      	nop

08009e2c <arm_std_f32>:
 8009e2c:	2901      	cmp	r1, #1
 8009e2e:	d065      	beq.n	8009efc <arm_std_f32+0xd0>
 8009e30:	eddf 5a39 	vldr	s11, [pc, #228]	; 8009f18 <arm_std_f32+0xec>
 8009e34:	b530      	push	{r4, r5, lr}
 8009e36:	088d      	lsrs	r5, r1, #2
 8009e38:	b083      	sub	sp, #12
 8009e3a:	d062      	beq.n	8009f02 <arm_std_f32+0xd6>
 8009e3c:	eef0 6a65 	vmov.f32	s13, s11
 8009e40:	f100 0310 	add.w	r3, r0, #16
 8009e44:	462c      	mov	r4, r5
 8009e46:	ed53 7a04 	vldr	s15, [r3, #-16]
 8009e4a:	3c01      	subs	r4, #1
 8009e4c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8009e50:	f103 0310 	add.w	r3, r3, #16
 8009e54:	ee27 4aa7 	vmul.f32	s8, s15, s15
 8009e58:	ed53 4a06 	vldr	s9, [r3, #-24]	; 0xffffffe8
 8009e5c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8009e60:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8009e64:	ee27 5a07 	vmul.f32	s10, s14, s14
 8009e68:	ee74 5a25 	vadd.f32	s11, s8, s11
 8009e6c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009e70:	ee64 6aa4 	vmul.f32	s13, s9, s9
 8009e74:	ee75 5a25 	vadd.f32	s11, s10, s11
 8009e78:	ee77 7a24 	vadd.f32	s15, s14, s9
 8009e7c:	ee26 7a06 	vmul.f32	s14, s12, s12
 8009e80:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8009e84:	ee77 6a86 	vadd.f32	s13, s15, s12
 8009e88:	ee77 5a25 	vadd.f32	s11, s14, s11
 8009e8c:	d1db      	bne.n	8009e46 <arm_std_f32+0x1a>
 8009e8e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8009e92:	f011 0303 	ands.w	r3, r1, #3
 8009e96:	d009      	beq.n	8009eac <arm_std_f32+0x80>
 8009e98:	ecf0 7a01 	vldmia	r0!, {s15}
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009ea2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009ea6:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009eaa:	d1f5      	bne.n	8009e98 <arm_std_f32+0x6c>
 8009eac:	ee07 1a90 	vmov	s15, r1
 8009eb0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ebc:	ee77 6ac6 	vsub.f32	s13, s15, s12
 8009ec0:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8009ec4:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 8009ec8:	ee27 7a07 	vmul.f32	s14, s14, s14
 8009ecc:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009ed0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009ed4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009edc:	db0a      	blt.n	8009ef4 <arm_std_f32+0xc8>
 8009ede:	eeb1 0ac7 	vsqrt.f32	s0, s14
 8009ee2:	eeb4 0a40 	vcmp.f32	s0, s0
 8009ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eea:	d10d      	bne.n	8009f08 <arm_std_f32+0xdc>
 8009eec:	ed82 0a00 	vstr	s0, [r2]
 8009ef0:	b003      	add	sp, #12
 8009ef2:	bd30      	pop	{r4, r5, pc}
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	b003      	add	sp, #12
 8009efa:	bd30      	pop	{r4, r5, pc}
 8009efc:	2300      	movs	r3, #0
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	4770      	bx	lr
 8009f02:	eef0 6a65 	vmov.f32	s13, s11
 8009f06:	e7c4      	b.n	8009e92 <arm_std_f32+0x66>
 8009f08:	eeb0 0a47 	vmov.f32	s0, s14
 8009f0c:	9201      	str	r2, [sp, #4]
 8009f0e:	f001 f9cf 	bl	800b2b0 <sqrtf>
 8009f12:	9a01      	ldr	r2, [sp, #4]
 8009f14:	e7ea      	b.n	8009eec <arm_std_f32+0xc0>
 8009f16:	bf00      	nop
 8009f18:	00000000 	.word	0x00000000

08009f1c <arm_mean_f32>:
 8009f1c:	b430      	push	{r4, r5}
 8009f1e:	088d      	lsrs	r5, r1, #2
 8009f20:	d02d      	beq.n	8009f7e <arm_mean_f32+0x62>
 8009f22:	f100 0310 	add.w	r3, r0, #16
 8009f26:	462c      	mov	r4, r5
 8009f28:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009f84 <arm_mean_f32+0x68>
 8009f2c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8009f30:	3c01      	subs	r4, #1
 8009f32:	ed13 6a03 	vldr	s12, [r3, #-12]
 8009f36:	f103 0310 	add.w	r3, r3, #16
 8009f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3e:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8009f42:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8009f46:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f52:	d1eb      	bne.n	8009f2c <arm_mean_f32+0x10>
 8009f54:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8009f58:	f011 0303 	ands.w	r3, r1, #3
 8009f5c:	d005      	beq.n	8009f6a <arm_mean_f32+0x4e>
 8009f5e:	ecb0 7a01 	vldmia	r0!, {s14}
 8009f62:	3b01      	subs	r3, #1
 8009f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f68:	d1f9      	bne.n	8009f5e <arm_mean_f32+0x42>
 8009f6a:	ee07 1a10 	vmov	s14, r1
 8009f6e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009f72:	bc30      	pop	{r4, r5}
 8009f74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009f78:	edc2 6a00 	vstr	s13, [r2]
 8009f7c:	4770      	bx	lr
 8009f7e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8009f84 <arm_mean_f32+0x68>
 8009f82:	e7e9      	b.n	8009f58 <arm_mean_f32+0x3c>
 8009f84:	00000000 	.word	0x00000000

08009f88 <arm_max_f32>:
 8009f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8c:	1e4d      	subs	r5, r1, #1
 8009f8e:	f100 0c04 	add.w	ip, r0, #4
 8009f92:	edd0 7a00 	vldr	s15, [r0]
 8009f96:	ea5f 0995 	movs.w	r9, r5, lsr #2
 8009f9a:	d056      	beq.n	800a04a <arm_max_f32+0xc2>
 8009f9c:	3014      	adds	r0, #20
 8009f9e:	46c8      	mov	r8, r9
 8009fa0:	2404      	movs	r4, #4
 8009fa2:	2600      	movs	r6, #0
 8009fa4:	ed10 6a04 	vldr	s12, [r0, #-16]
 8009fa8:	f1a4 0a03 	sub.w	sl, r4, #3
 8009fac:	ed50 6a03 	vldr	s13, [r0, #-12]
 8009fb0:	f1a4 0e02 	sub.w	lr, r4, #2
 8009fb4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8009fb8:	ed10 7a02 	vldr	s14, [r0, #-8]
 8009fbc:	ed50 5a01 	vldr	s11, [r0, #-4]
 8009fc0:	1e67      	subs	r7, r4, #1
 8009fc2:	3010      	adds	r0, #16
 8009fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc8:	bfc8      	it	gt
 8009fca:	eef0 7a46 	vmovgt.f32	s15, s12
 8009fce:	bfc8      	it	gt
 8009fd0:	4656      	movgt	r6, sl
 8009fd2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fda:	bf48      	it	mi
 8009fdc:	eef0 7a66 	vmovmi.f32	s15, s13
 8009fe0:	bf48      	it	mi
 8009fe2:	4676      	movmi	r6, lr
 8009fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fec:	bf48      	it	mi
 8009fee:	eef0 7a47 	vmovmi.f32	s15, s14
 8009ff2:	bf48      	it	mi
 8009ff4:	463e      	movmi	r6, r7
 8009ff6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8009ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffe:	bf48      	it	mi
 800a000:	4626      	movmi	r6, r4
 800a002:	bf48      	it	mi
 800a004:	eef0 7a65 	vmovmi.f32	s15, s11
 800a008:	f1b8 0801 	subs.w	r8, r8, #1
 800a00c:	f104 0404 	add.w	r4, r4, #4
 800a010:	d1c8      	bne.n	8009fa4 <arm_max_f32+0x1c>
 800a012:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 800a016:	f015 0003 	ands.w	r0, r5, #3
 800a01a:	d018      	beq.n	800a04e <arm_max_f32+0xc6>
 800a01c:	1a08      	subs	r0, r1, r0
 800a01e:	ecbc 7a01 	vldmia	ip!, {s14}
 800a022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02a:	bfc8      	it	gt
 800a02c:	4606      	movgt	r6, r0
 800a02e:	f100 0001 	add.w	r0, r0, #1
 800a032:	bfd8      	it	le
 800a034:	eeb0 7a67 	vmovle.f32	s14, s15
 800a038:	4281      	cmp	r1, r0
 800a03a:	eef0 7a47 	vmov.f32	s15, s14
 800a03e:	d1ee      	bne.n	800a01e <arm_max_f32+0x96>
 800a040:	ed82 7a00 	vstr	s14, [r2]
 800a044:	601e      	str	r6, [r3, #0]
 800a046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04a:	464e      	mov	r6, r9
 800a04c:	e7e3      	b.n	800a016 <arm_max_f32+0x8e>
 800a04e:	eeb0 7a67 	vmov.f32	s14, s15
 800a052:	e7f5      	b.n	800a040 <arm_max_f32+0xb8>

0800a054 <arm_cfft_radix8by2_f32>:
 800a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a058:	4607      	mov	r7, r0
 800a05a:	4608      	mov	r0, r1
 800a05c:	ed2d 8b06 	vpush	{d8-d10}
 800a060:	f8b7 e000 	ldrh.w	lr, [r7]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800a06a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800a06e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a072:	f000 80b0 	beq.w	800a1d6 <arm_cfft_radix8by2_f32+0x182>
 800a076:	008b      	lsls	r3, r1, #2
 800a078:	3210      	adds	r2, #16
 800a07a:	f100 0610 	add.w	r6, r0, #16
 800a07e:	f108 0510 	add.w	r5, r8, #16
 800a082:	3310      	adds	r3, #16
 800a084:	18c4      	adds	r4, r0, r3
 800a086:	4443      	add	r3, r8
 800a088:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a08c:	f1be 0e01 	subs.w	lr, lr, #1
 800a090:	ed56 4a04 	vldr	s9, [r6, #-16]
 800a094:	f104 0410 	add.w	r4, r4, #16
 800a098:	ed15 7a03 	vldr	s14, [r5, #-12]
 800a09c:	f106 0610 	add.w	r6, r6, #16
 800a0a0:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800a0a4:	ed55 7a02 	vldr	s15, [r5, #-8]
 800a0a8:	ed55 2a01 	vldr	s5, [r5, #-4]
 800a0ac:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a0b0:	ed53 0a04 	vldr	s1, [r3, #-16]
 800a0b4:	f102 0210 	add.w	r2, r2, #16
 800a0b8:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a0bc:	f105 0510 	add.w	r5, r5, #16
 800a0c0:	ed13 3a02 	vldr	s6, [r3, #-8]
 800a0c4:	f103 0310 	add.w	r3, r3, #16
 800a0c8:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800a0cc:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800a0d0:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800a0d4:	ee33 8a83 	vadd.f32	s16, s7, s6
 800a0d8:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800a0dc:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800a0e0:	ee34 0a06 	vadd.f32	s0, s8, s12
 800a0e4:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800a0e8:	ee76 aa87 	vadd.f32	s21, s13, s14
 800a0ec:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800a0f0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a0f4:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800a0f8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800a0fc:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800a100:	ee71 8a05 	vadd.f32	s17, s2, s10
 800a104:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800a108:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800a10c:	ee72 9a22 	vadd.f32	s19, s4, s5
 800a110:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a114:	ee35 5a41 	vsub.f32	s10, s10, s2
 800a118:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800a11c:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800a120:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a124:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800a128:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800a12c:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800a130:	ee72 7a62 	vsub.f32	s15, s4, s5
 800a134:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800a138:	ee73 2a63 	vsub.f32	s5, s6, s7
 800a13c:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800a140:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800a144:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800a148:	ee24 3a84 	vmul.f32	s6, s9, s8
 800a14c:	ee27 2a26 	vmul.f32	s4, s14, s13
 800a150:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800a154:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800a158:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a15c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a160:	ee65 6a26 	vmul.f32	s13, s10, s13
 800a164:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a168:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a16c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a170:	ee33 4a02 	vadd.f32	s8, s6, s4
 800a174:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a178:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800a17c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800a180:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800a184:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800a188:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800a18c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a190:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800a194:	ee27 4a87 	vmul.f32	s8, s15, s14
 800a198:	ee61 5a87 	vmul.f32	s11, s3, s14
 800a19c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a1a0:	ee22 5a87 	vmul.f32	s10, s5, s14
 800a1a4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a1a8:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a1ac:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800a1b0:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a1b4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a1b8:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a1bc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a1c0:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800a1c4:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800a1c8:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800a1cc:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800a1d0:	f47f af5a 	bne.w	800a088 <arm_cfft_radix8by2_f32+0x34>
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	b28c      	uxth	r4, r1
 800a1d8:	2302      	movs	r3, #2
 800a1da:	4621      	mov	r1, r4
 800a1dc:	f000 fd74 	bl	800acc8 <arm_radix8_butterfly_f32>
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	ecbd 8b06 	vpop	{d8-d10}
 800a1ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f0:	f000 bd6a 	b.w	800acc8 <arm_radix8_butterfly_f32>

0800a1f4 <arm_cfft_radix8by4_f32>:
 800a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f8:	ed2d 8b06 	vpush	{d8-d10}
 800a1fc:	8804      	ldrh	r4, [r0, #0]
 800a1fe:	b08f      	sub	sp, #60	; 0x3c
 800a200:	ed91 6a00 	vldr	s12, [r1]
 800a204:	460a      	mov	r2, r1
 800a206:	0864      	lsrs	r4, r4, #1
 800a208:	ed91 7a01 	vldr	s14, [r1, #4]
 800a20c:	9101      	str	r1, [sp, #4]
 800a20e:	00a3      	lsls	r3, r4, #2
 800a210:	6841      	ldr	r1, [r0, #4]
 800a212:	0864      	lsrs	r4, r4, #1
 800a214:	900c      	str	r0, [sp, #48]	; 0x30
 800a216:	9205      	str	r2, [sp, #20]
 800a218:	f101 0610 	add.w	r6, r1, #16
 800a21c:	4625      	mov	r5, r4
 800a21e:	940b      	str	r4, [sp, #44]	; 0x2c
 800a220:	f101 0408 	add.w	r4, r1, #8
 800a224:	9602      	str	r6, [sp, #8]
 800a226:	9407      	str	r4, [sp, #28]
 800a228:	18d4      	adds	r4, r2, r3
 800a22a:	1eaa      	subs	r2, r5, #2
 800a22c:	f101 0518 	add.w	r5, r1, #24
 800a230:	18e0      	adds	r0, r4, r3
 800a232:	edd4 4a00 	vldr	s9, [r4]
 800a236:	ed94 4a01 	vldr	s8, [r4, #4]
 800a23a:	46a6      	mov	lr, r4
 800a23c:	edd0 6a00 	vldr	s13, [r0]
 800a240:	18c7      	adds	r7, r0, r3
 800a242:	edd0 7a01 	vldr	s15, [r0, #4]
 800a246:	46a0      	mov	r8, r4
 800a248:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a24c:	ed97 5a00 	vldr	s10, [r7]
 800a250:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a254:	4604      	mov	r4, r0
 800a256:	9506      	str	r5, [sp, #24]
 800a258:	4605      	mov	r5, r0
 800a25a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800a25e:	900a      	str	r0, [sp, #40]	; 0x28
 800a260:	9801      	ldr	r0, [sp, #4]
 800a262:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a26a:	ed97 3a01 	vldr	s6, [r7, #4]
 800a26e:	ee72 2a85 	vadd.f32	s5, s5, s10
 800a272:	46bc      	mov	ip, r7
 800a274:	ee76 3a84 	vadd.f32	s7, s13, s8
 800a278:	9704      	str	r7, [sp, #16]
 800a27a:	ee36 7a44 	vsub.f32	s14, s12, s8
 800a27e:	f8cd e00c 	str.w	lr, [sp, #12]
 800a282:	ee12 9a90 	vmov	r9, s5
 800a286:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a28a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a28e:	1f3e      	subs	r6, r7, #4
 800a290:	f840 9b08 	str.w	r9, [r0], #8
 800a294:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800a298:	edde 2a01 	vldr	s5, [lr, #4]
 800a29c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800a2a0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a2a4:	eddc 4a01 	vldr	s9, [ip, #4]
 800a2a8:	ee36 6a22 	vadd.f32	s12, s12, s5
 800a2ac:	9001      	str	r0, [sp, #4]
 800a2ae:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a2b2:	9805      	ldr	r0, [sp, #20]
 800a2b4:	ee13 9a90 	vmov	r9, s7
 800a2b8:	ee37 7a43 	vsub.f32	s14, s14, s6
 800a2bc:	ee36 6a24 	vadd.f32	s12, s12, s9
 800a2c0:	f1ae 0704 	sub.w	r7, lr, #4
 800a2c4:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a2c8:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a2cc:	ed80 6a01 	vstr	s12, [r0, #4]
 800a2d0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a2d4:	f848 9b08 	str.w	r9, [r8], #8
 800a2d8:	edce 4a01 	vstr	s9, [lr, #4]
 800a2dc:	ee15 ea90 	vmov	lr, s11
 800a2e0:	f844 eb08 	str.w	lr, [r4], #8
 800a2e4:	ee16 ea90 	vmov	lr, s13
 800a2e8:	9408      	str	r4, [sp, #32]
 800a2ea:	462c      	mov	r4, r5
 800a2ec:	ed85 7a01 	vstr	s14, [r5, #4]
 800a2f0:	9d04      	ldr	r5, [sp, #16]
 800a2f2:	f84c eb08 	str.w	lr, [ip], #8
 800a2f6:	edc5 7a01 	vstr	s15, [r5, #4]
 800a2fa:	0855      	lsrs	r5, r2, #1
 800a2fc:	9509      	str	r5, [sp, #36]	; 0x24
 800a2fe:	f000 8130 	beq.w	800a562 <arm_cfft_radix8by4_f32+0x36e>
 800a302:	9805      	ldr	r0, [sp, #20]
 800a304:	3b08      	subs	r3, #8
 800a306:	46ab      	mov	fp, r5
 800a308:	f1a4 020c 	sub.w	r2, r4, #12
 800a30c:	f100 0510 	add.w	r5, r0, #16
 800a310:	f101 0920 	add.w	r9, r1, #32
 800a314:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800a318:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a31c:	4433      	add	r3, r6
 800a31e:	3410      	adds	r4, #16
 800a320:	4660      	mov	r0, ip
 800a322:	4641      	mov	r1, r8
 800a324:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800a328:	ed54 6a02 	vldr	s13, [r4, #-8]
 800a32c:	f1bb 0b01 	subs.w	fp, fp, #1
 800a330:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a334:	f10a 0a08 	add.w	sl, sl, #8
 800a338:	edd1 7a00 	vldr	s15, [r1]
 800a33c:	f105 0508 	add.w	r5, r5, #8
 800a340:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800a344:	edd0 2a00 	vldr	s5, [r0]
 800a348:	ed14 7a01 	vldr	s14, [r4, #-4]
 800a34c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800a350:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a354:	f1a2 0208 	sub.w	r2, r2, #8
 800a358:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800a35c:	ed90 2a01 	vldr	s4, [r0, #4]
 800a360:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a364:	ed91 6a01 	vldr	s12, [r1, #4]
 800a368:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a36c:	f109 0910 	add.w	r9, r9, #16
 800a370:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800a374:	f104 0408 	add.w	r4, r4, #8
 800a378:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800a37c:	f10e 0e18 	add.w	lr, lr, #24
 800a380:	ee37 3a67 	vsub.f32	s6, s14, s15
 800a384:	f1a3 0308 	sub.w	r3, r3, #8
 800a388:	ed45 6a04 	vstr	s13, [r5, #-16]
 800a38c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a390:	edd1 6a01 	vldr	s13, [r1, #4]
 800a394:	ee75 1a86 	vadd.f32	s3, s11, s12
 800a398:	edd0 4a01 	vldr	s9, [r0, #4]
 800a39c:	ee33 3a22 	vadd.f32	s6, s6, s5
 800a3a0:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a3a4:	ee35 5a46 	vsub.f32	s10, s10, s12
 800a3a8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a3ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a3b0:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800a3b4:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a3b8:	ed45 6a03 	vstr	s13, [r5, #-12]
 800a3bc:	ee36 2a02 	vadd.f32	s4, s12, s4
 800a3c0:	edd6 7a00 	vldr	s15, [r6]
 800a3c4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a3c8:	ed97 1a00 	vldr	s2, [r7]
 800a3cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 800a3d0:	ed92 8a04 	vldr	s16, [r2, #16]
 800a3d4:	ee71 8a27 	vadd.f32	s17, s2, s15
 800a3d8:	ed93 aa04 	vldr	s20, [r3, #16]
 800a3dc:	ed16 7a01 	vldr	s14, [r6, #-4]
 800a3e0:	ee71 7a67 	vsub.f32	s15, s2, s15
 800a3e4:	ed57 0a01 	vldr	s1, [r7, #-4]
 800a3e8:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800a3ec:	ee38 6a88 	vadd.f32	s12, s17, s16
 800a3f0:	edd3 9a03 	vldr	s19, [r3, #12]
 800a3f4:	ee30 0a87 	vadd.f32	s0, s1, s14
 800a3f8:	ed92 9a03 	vldr	s18, [r2, #12]
 800a3fc:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800a400:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800a404:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800a408:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800a40c:	ee16 ca10 	vmov	ip, s12
 800a410:	ee30 6a49 	vsub.f32	s12, s0, s18
 800a414:	ee77 4a01 	vadd.f32	s9, s14, s2
 800a418:	f847 c908 	str.w	ip, [r7], #-8
 800a41c:	ee34 4a29 	vadd.f32	s8, s8, s19
 800a420:	edd2 8a03 	vldr	s17, [r2, #12]
 800a424:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800a428:	ed93 8a03 	vldr	s16, [r3, #12]
 800a42c:	ee71 0a47 	vsub.f32	s1, s2, s14
 800a430:	ee30 0a28 	vadd.f32	s0, s0, s17
 800a434:	ee39 1a67 	vsub.f32	s2, s18, s15
 800a438:	ee36 6a69 	vsub.f32	s12, s12, s19
 800a43c:	ee30 0a08 	vadd.f32	s0, s0, s16
 800a440:	ee75 5aca 	vsub.f32	s11, s11, s20
 800a444:	ed87 0a01 	vstr	s0, [r7, #4]
 800a448:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800a44c:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800a450:	ee21 8a80 	vmul.f32	s16, s3, s0
 800a454:	ee23 7a26 	vmul.f32	s14, s6, s13
 800a458:	ee64 7a26 	vmul.f32	s15, s8, s13
 800a45c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800a460:	ee24 4a00 	vmul.f32	s8, s8, s0
 800a464:	ee23 3a00 	vmul.f32	s6, s6, s0
 800a468:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a46c:	ee24 0a80 	vmul.f32	s0, s9, s0
 800a470:	ee38 7a07 	vadd.f32	s14, s16, s14
 800a474:	ee76 6a84 	vadd.f32	s13, s13, s8
 800a478:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a47c:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a480:	ee17 ca10 	vmov	ip, s14
 800a484:	f841 cb08 	str.w	ip, [r1], #8
 800a488:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a48c:	ed82 0a04 	vstr	s0, [r2, #16]
 800a490:	edc2 6a03 	vstr	s13, [r2, #12]
 800a494:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800a498:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800a49c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800a4a0:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800a4a4:	ee65 4a27 	vmul.f32	s9, s10, s15
 800a4a8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800a4ac:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800a4b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a4b4:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a4b8:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a4bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4c0:	ee34 6a24 	vadd.f32	s12, s8, s9
 800a4c4:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800a4c8:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a4cc:	ee17 ca90 	vmov	ip, s15
 800a4d0:	ed04 6a04 	vstr	s12, [r4, #-16]
 800a4d4:	ed04 5a03 	vstr	s10, [r4, #-12]
 800a4d8:	f846 c908 	str.w	ip, [r6], #-8
 800a4dc:	edc6 6a01 	vstr	s13, [r6, #4]
 800a4e0:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800a4e4:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800a4e8:	ee62 5a27 	vmul.f32	s11, s4, s15
 800a4ec:	ee22 6a87 	vmul.f32	s12, s5, s14
 800a4f0:	ee22 2a07 	vmul.f32	s4, s4, s14
 800a4f4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800a4f8:	ee61 6a07 	vmul.f32	s13, s2, s14
 800a4fc:	ee20 7a87 	vmul.f32	s14, s1, s14
 800a500:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a504:	ee61 7a27 	vmul.f32	s15, s2, s15
 800a508:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a50c:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800a510:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800a514:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a518:	ee16 ca10 	vmov	ip, s12
 800a51c:	f840 cb08 	str.w	ip, [r0], #8
 800a520:	ed40 2a01 	vstr	s5, [r0, #-4]
 800a524:	edc3 0a04 	vstr	s1, [r3, #16]
 800a528:	edc3 7a03 	vstr	s15, [r3, #12]
 800a52c:	f47f aefc 	bne.w	800a328 <arm_cfft_radix8by4_f32+0x134>
 800a530:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a532:	9802      	ldr	r0, [sp, #8]
 800a534:	00cb      	lsls	r3, r1, #3
 800a536:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800a53a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a53e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a542:	4498      	add	r8, r3
 800a544:	449c      	add	ip, r3
 800a546:	9102      	str	r1, [sp, #8]
 800a548:	9901      	ldr	r1, [sp, #4]
 800a54a:	4419      	add	r1, r3
 800a54c:	9101      	str	r1, [sp, #4]
 800a54e:	9907      	ldr	r1, [sp, #28]
 800a550:	4419      	add	r1, r3
 800a552:	9107      	str	r1, [sp, #28]
 800a554:	9908      	ldr	r1, [sp, #32]
 800a556:	4419      	add	r1, r3
 800a558:	9b06      	ldr	r3, [sp, #24]
 800a55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a55e:	9108      	str	r1, [sp, #32]
 800a560:	9306      	str	r3, [sp, #24]
 800a562:	9a01      	ldr	r2, [sp, #4]
 800a564:	2304      	movs	r3, #4
 800a566:	9e08      	ldr	r6, [sp, #32]
 800a568:	edd2 7a00 	vldr	s15, [r2]
 800a56c:	ed96 7a00 	vldr	s14, [r6]
 800a570:	edd8 2a00 	vldr	s5, [r8]
 800a574:	ee77 5a87 	vadd.f32	s11, s15, s14
 800a578:	ed9c 3a00 	vldr	s6, [ip]
 800a57c:	ed92 6a01 	vldr	s12, [r2, #4]
 800a580:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a584:	edd6 6a01 	vldr	s13, [r6, #4]
 800a588:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800a58c:	ed9c 2a01 	vldr	s4, [ip, #4]
 800a590:	ee36 5a26 	vadd.f32	s10, s12, s13
 800a594:	edd8 7a01 	vldr	s15, [r8, #4]
 800a598:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a59c:	9d02      	ldr	r5, [sp, #8]
 800a59e:	ee34 6a83 	vadd.f32	s12, s9, s6
 800a5a2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800a5a6:	ee37 4a27 	vadd.f32	s8, s14, s15
 800a5aa:	9805      	ldr	r0, [sp, #20]
 800a5ac:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	ed82 6a00 	vstr	s12, [r2]
 800a5b6:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800a5ba:	edd8 3a01 	vldr	s7, [r8, #4]
 800a5be:	ee75 5a67 	vsub.f32	s11, s10, s15
 800a5c2:	eddc 1a01 	vldr	s3, [ip, #4]
 800a5c6:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a5ca:	ee75 3a23 	vadd.f32	s7, s10, s7
 800a5ce:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a5d2:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800a5d6:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800a5da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5de:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a5e2:	ed82 5a01 	vstr	s10, [r2, #4]
 800a5e6:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a5ea:	9a07      	ldr	r2, [sp, #28]
 800a5ec:	ee77 7a02 	vadd.f32	s15, s14, s4
 800a5f0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800a5f4:	edd2 2a00 	vldr	s5, [r2]
 800a5f8:	ed92 5a01 	vldr	s10, [r2, #4]
 800a5fc:	ee64 3a22 	vmul.f32	s7, s8, s5
 800a600:	ee24 4a05 	vmul.f32	s8, s8, s10
 800a604:	ee24 5a85 	vmul.f32	s10, s9, s10
 800a608:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800a60c:	ee33 5a85 	vadd.f32	s10, s7, s10
 800a610:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800a614:	ed88 5a00 	vstr	s10, [r8]
 800a618:	edc8 4a01 	vstr	s9, [r8, #4]
 800a61c:	edd5 4a01 	vldr	s9, [r5, #4]
 800a620:	edd5 6a00 	vldr	s13, [r5]
 800a624:	9d06      	ldr	r5, [sp, #24]
 800a626:	ee26 5a26 	vmul.f32	s10, s12, s13
 800a62a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a62e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800a632:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a636:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800a63a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a63e:	ed86 6a01 	vstr	s12, [r6, #4]
 800a642:	edc6 5a00 	vstr	s11, [r6]
 800a646:	edd5 5a01 	vldr	s11, [r5, #4]
 800a64a:	edd5 6a00 	vldr	s13, [r5]
 800a64e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a650:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a654:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a658:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a65c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a660:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a664:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a668:	edcc 7a01 	vstr	s15, [ip, #4]
 800a66c:	ed8c 7a00 	vstr	s14, [ip]
 800a670:	6872      	ldr	r2, [r6, #4]
 800a672:	f000 fb29 	bl	800acc8 <arm_radix8_butterfly_f32>
 800a676:	9803      	ldr	r0, [sp, #12]
 800a678:	4621      	mov	r1, r4
 800a67a:	6872      	ldr	r2, [r6, #4]
 800a67c:	2304      	movs	r3, #4
 800a67e:	f000 fb23 	bl	800acc8 <arm_radix8_butterfly_f32>
 800a682:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a684:	4621      	mov	r1, r4
 800a686:	6872      	ldr	r2, [r6, #4]
 800a688:	2304      	movs	r3, #4
 800a68a:	f000 fb1d 	bl	800acc8 <arm_radix8_butterfly_f32>
 800a68e:	4621      	mov	r1, r4
 800a690:	6872      	ldr	r2, [r6, #4]
 800a692:	2304      	movs	r3, #4
 800a694:	9804      	ldr	r0, [sp, #16]
 800a696:	b00f      	add	sp, #60	; 0x3c
 800a698:	ecbd 8b06 	vpop	{d8-d10}
 800a69c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	f000 bb12 	b.w	800acc8 <arm_radix8_butterfly_f32>

0800a6a4 <arm_cfft_f32>:
 800a6a4:	2a01      	cmp	r2, #1
 800a6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	4617      	mov	r7, r2
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	4698      	mov	r8, r3
 800a6b2:	8805      	ldrh	r5, [r0, #0]
 800a6b4:	d053      	beq.n	800a75e <arm_cfft_f32+0xba>
 800a6b6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a6ba:	d04b      	beq.n	800a754 <arm_cfft_f32+0xb0>
 800a6bc:	d916      	bls.n	800a6ec <arm_cfft_f32+0x48>
 800a6be:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a6c2:	d01a      	beq.n	800a6fa <arm_cfft_f32+0x56>
 800a6c4:	d95a      	bls.n	800a77c <arm_cfft_f32+0xd8>
 800a6c6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a6ca:	d043      	beq.n	800a754 <arm_cfft_f32+0xb0>
 800a6cc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a6d0:	d105      	bne.n	800a6de <arm_cfft_f32+0x3a>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	6872      	ldr	r2, [r6, #4]
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 faf5 	bl	800acc8 <arm_radix8_butterfly_f32>
 800a6de:	f1b8 0f00 	cmp.w	r8, #0
 800a6e2:	d111      	bne.n	800a708 <arm_cfft_f32+0x64>
 800a6e4:	2f01      	cmp	r7, #1
 800a6e6:	d016      	beq.n	800a716 <arm_cfft_f32+0x72>
 800a6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ec:	2d20      	cmp	r5, #32
 800a6ee:	d031      	beq.n	800a754 <arm_cfft_f32+0xb0>
 800a6f0:	d948      	bls.n	800a784 <arm_cfft_f32+0xe0>
 800a6f2:	2d40      	cmp	r5, #64	; 0x40
 800a6f4:	d0ed      	beq.n	800a6d2 <arm_cfft_f32+0x2e>
 800a6f6:	2d80      	cmp	r5, #128	; 0x80
 800a6f8:	d1f1      	bne.n	800a6de <arm_cfft_f32+0x3a>
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7ff fca9 	bl	800a054 <arm_cfft_radix8by2_f32>
 800a702:	f1b8 0f00 	cmp.w	r8, #0
 800a706:	d0ed      	beq.n	800a6e4 <arm_cfft_f32+0x40>
 800a708:	68b2      	ldr	r2, [r6, #8]
 800a70a:	4620      	mov	r0, r4
 800a70c:	89b1      	ldrh	r1, [r6, #12]
 800a70e:	f7f5 fde7 	bl	80002e0 <arm_bitreversal_32>
 800a712:	2f01      	cmp	r7, #1
 800a714:	d1e8      	bne.n	800a6e8 <arm_cfft_f32+0x44>
 800a716:	ee07 5a90 	vmov	s15, r5
 800a71a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a722:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a726:	2d00      	cmp	r5, #0
 800a728:	d0de      	beq.n	800a6e8 <arm_cfft_f32+0x44>
 800a72a:	f104 0108 	add.w	r1, r4, #8
 800a72e:	2300      	movs	r3, #0
 800a730:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a734:	3301      	adds	r3, #1
 800a736:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a73a:	3108      	adds	r1, #8
 800a73c:	429d      	cmp	r5, r3
 800a73e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a742:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a746:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a74a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a74e:	d1ef      	bne.n	800a730 <arm_cfft_f32+0x8c>
 800a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a754:	4621      	mov	r1, r4
 800a756:	4630      	mov	r0, r6
 800a758:	f7ff fd4c 	bl	800a1f4 <arm_cfft_radix8by4_f32>
 800a75c:	e7bf      	b.n	800a6de <arm_cfft_f32+0x3a>
 800a75e:	b1a5      	cbz	r5, 800a78a <arm_cfft_f32+0xe6>
 800a760:	f101 030c 	add.w	r3, r1, #12
 800a764:	2200      	movs	r2, #0
 800a766:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a76a:	3201      	adds	r2, #1
 800a76c:	3308      	adds	r3, #8
 800a76e:	eef1 7a67 	vneg.f32	s15, s15
 800a772:	4295      	cmp	r5, r2
 800a774:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a778:	d1f5      	bne.n	800a766 <arm_cfft_f32+0xc2>
 800a77a:	e79c      	b.n	800a6b6 <arm_cfft_f32+0x12>
 800a77c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a780:	d0a7      	beq.n	800a6d2 <arm_cfft_f32+0x2e>
 800a782:	e7ac      	b.n	800a6de <arm_cfft_f32+0x3a>
 800a784:	2d10      	cmp	r5, #16
 800a786:	d0b8      	beq.n	800a6fa <arm_cfft_f32+0x56>
 800a788:	e7a9      	b.n	800a6de <arm_cfft_f32+0x3a>
 800a78a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a78e:	d896      	bhi.n	800a6be <arm_cfft_f32+0x1a>
 800a790:	e7ac      	b.n	800a6ec <arm_cfft_f32+0x48>
 800a792:	bf00      	nop

0800a794 <arm_cmplx_mult_cmplx_f32>:
 800a794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a796:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800a79a:	d073      	beq.n	800a884 <arm_cmplx_mult_cmplx_f32+0xf0>
 800a79c:	f100 0620 	add.w	r6, r0, #32
 800a7a0:	f101 0520 	add.w	r5, r1, #32
 800a7a4:	f102 0420 	add.w	r4, r2, #32
 800a7a8:	4677      	mov	r7, lr
 800a7aa:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 800a7ae:	3f01      	subs	r7, #1
 800a7b0:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 800a7b4:	f106 0620 	add.w	r6, r6, #32
 800a7b8:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 800a7bc:	f105 0520 	add.w	r5, r5, #32
 800a7c0:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 800a7c4:	ee27 3a27 	vmul.f32	s6, s14, s15
 800a7c8:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800a7cc:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 800a7d0:	ee25 4aa6 	vmul.f32	s8, s11, s13
 800a7d4:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 800a7d8:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a7dc:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 800a7e0:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 800a7e4:	ee66 3a27 	vmul.f32	s7, s12, s15
 800a7e8:	ee66 5a05 	vmul.f32	s11, s12, s10
 800a7ec:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 800a7f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a7f4:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 800a7f8:	ee25 5a22 	vmul.f32	s10, s10, s5
 800a7fc:	f104 0420 	add.w	r4, r4, #32
 800a800:	ee33 4a44 	vsub.f32	s8, s6, s8
 800a804:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800a808:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a80c:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 800a810:	ee67 4a06 	vmul.f32	s9, s14, s12
 800a814:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 800a818:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a81c:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 800a820:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 800a824:	ee66 5a05 	vmul.f32	s11, s12, s10
 800a828:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 800a82c:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a830:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800a834:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a838:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800a83c:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 800a840:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 800a844:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800a848:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 800a84c:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a850:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a854:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a858:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 800a85c:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a860:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a868:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800a86c:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 800a870:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800a874:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 800a878:	d197      	bne.n	800a7aa <arm_cmplx_mult_cmplx_f32+0x16>
 800a87a:	ea4f 144e 	mov.w	r4, lr, lsl #5
 800a87e:	4420      	add	r0, r4
 800a880:	4421      	add	r1, r4
 800a882:	4422      	add	r2, r4
 800a884:	f013 0303 	ands.w	r3, r3, #3
 800a888:	d022      	beq.n	800a8d0 <arm_cmplx_mult_cmplx_f32+0x13c>
 800a88a:	3008      	adds	r0, #8
 800a88c:	3108      	adds	r1, #8
 800a88e:	3208      	adds	r2, #8
 800a890:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a894:	3b01      	subs	r3, #1
 800a896:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a89a:	f100 0008 	add.w	r0, r0, #8
 800a89e:	ed50 6a03 	vldr	s13, [r0, #-12]
 800a8a2:	f101 0108 	add.w	r1, r1, #8
 800a8a6:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a8aa:	ee27 6a87 	vmul.f32	s12, s15, s14
 800a8ae:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a8b2:	f102 0208 	add.w	r2, r2, #8
 800a8b6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a8ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a8be:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a8c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8c6:	ed42 6a04 	vstr	s13, [r2, #-16]
 800a8ca:	ed42 7a03 	vstr	s15, [r2, #-12]
 800a8ce:	d1df      	bne.n	800a890 <arm_cmplx_mult_cmplx_f32+0xfc>
 800a8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d2:	bf00      	nop

0800a8d4 <arm_cmplx_mag_f32>:
 800a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a8dc:	b084      	sub	sp, #16
 800a8de:	d07f      	beq.n	800a9e0 <arm_cmplx_mag_f32+0x10c>
 800a8e0:	f100 0420 	add.w	r4, r0, #32
 800a8e4:	f101 0510 	add.w	r5, r1, #16
 800a8e8:	4646      	mov	r6, r8
 800a8ea:	2700      	movs	r7, #0
 800a8ec:	e05a      	b.n	800a9a4 <arm_cmplx_mag_f32+0xd0>
 800a8ee:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a8f2:	eeb4 0a40 	vcmp.f32	s0, s0
 800a8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fa:	f040 80a4 	bne.w	800aa46 <arm_cmplx_mag_f32+0x172>
 800a8fe:	ed05 0a04 	vstr	s0, [r5, #-16]
 800a902:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800a906:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800a90a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a90e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a912:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91e:	f2c0 808f 	blt.w	800aa40 <arm_cmplx_mag_f32+0x16c>
 800a922:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a926:	eeb4 0a40 	vcmp.f32	s0, s0
 800a92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a92e:	f040 80af 	bne.w	800aa90 <arm_cmplx_mag_f32+0x1bc>
 800a932:	ed05 0a03 	vstr	s0, [r5, #-12]
 800a936:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a93a:	ed14 0a03 	vldr	s0, [r4, #-12]
 800a93e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a942:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a946:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a94a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a952:	db72      	blt.n	800aa3a <arm_cmplx_mag_f32+0x166>
 800a954:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a958:	eeb4 0a40 	vcmp.f32	s0, s0
 800a95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a960:	f040 808c 	bne.w	800aa7c <arm_cmplx_mag_f32+0x1a8>
 800a964:	ed05 0a02 	vstr	s0, [r5, #-8]
 800a968:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a96c:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a970:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a974:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a978:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a97c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a984:	db20      	blt.n	800a9c8 <arm_cmplx_mag_f32+0xf4>
 800a986:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a98a:	eeb4 0a40 	vcmp.f32	s0, s0
 800a98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a992:	d169      	bne.n	800aa68 <arm_cmplx_mag_f32+0x194>
 800a994:	3e01      	subs	r6, #1
 800a996:	ed05 0a01 	vstr	s0, [r5, #-4]
 800a99a:	f104 0420 	add.w	r4, r4, #32
 800a99e:	f105 0510 	add.w	r5, r5, #16
 800a9a2:	d019      	beq.n	800a9d8 <arm_cmplx_mag_f32+0x104>
 800a9a4:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800a9a8:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800a9ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a9b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a9b4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a9b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c0:	da95      	bge.n	800a8ee <arm_cmplx_mag_f32+0x1a>
 800a9c2:	f845 7c10 	str.w	r7, [r5, #-16]
 800a9c6:	e79c      	b.n	800a902 <arm_cmplx_mag_f32+0x2e>
 800a9c8:	3e01      	subs	r6, #1
 800a9ca:	f845 7c04 	str.w	r7, [r5, #-4]
 800a9ce:	f104 0420 	add.w	r4, r4, #32
 800a9d2:	f105 0510 	add.w	r5, r5, #16
 800a9d6:	d1e5      	bne.n	800a9a4 <arm_cmplx_mag_f32+0xd0>
 800a9d8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800a9dc:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800a9e0:	f012 0503 	ands.w	r5, r2, #3
 800a9e4:	d026      	beq.n	800aa34 <arm_cmplx_mag_f32+0x160>
 800a9e6:	f100 0408 	add.w	r4, r0, #8
 800a9ea:	2600      	movs	r6, #0
 800a9ec:	e00c      	b.n	800aa08 <arm_cmplx_mag_f32+0x134>
 800a9ee:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a9f2:	eeb4 0a40 	vcmp.f32	s0, s0
 800a9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fa:	d12e      	bne.n	800aa5a <arm_cmplx_mag_f32+0x186>
 800a9fc:	3d01      	subs	r5, #1
 800a9fe:	ed01 0a01 	vstr	s0, [r1, #-4]
 800aa02:	f104 0408 	add.w	r4, r4, #8
 800aa06:	d015      	beq.n	800aa34 <arm_cmplx_mag_f32+0x160>
 800aa08:	ed54 7a02 	vldr	s15, [r4, #-8]
 800aa0c:	3104      	adds	r1, #4
 800aa0e:	ed14 0a01 	vldr	s0, [r4, #-4]
 800aa12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aa16:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aa1a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa26:	dae2      	bge.n	800a9ee <arm_cmplx_mag_f32+0x11a>
 800aa28:	3d01      	subs	r5, #1
 800aa2a:	f841 6c04 	str.w	r6, [r1, #-4]
 800aa2e:	f104 0408 	add.w	r4, r4, #8
 800aa32:	d1e9      	bne.n	800aa08 <arm_cmplx_mag_f32+0x134>
 800aa34:	b004      	add	sp, #16
 800aa36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa3a:	f845 7c08 	str.w	r7, [r5, #-8]
 800aa3e:	e793      	b.n	800a968 <arm_cmplx_mag_f32+0x94>
 800aa40:	f845 7c0c 	str.w	r7, [r5, #-12]
 800aa44:	e777      	b.n	800a936 <arm_cmplx_mag_f32+0x62>
 800aa46:	eeb0 0a67 	vmov.f32	s0, s15
 800aa4a:	9203      	str	r2, [sp, #12]
 800aa4c:	9102      	str	r1, [sp, #8]
 800aa4e:	9001      	str	r0, [sp, #4]
 800aa50:	f000 fc2e 	bl	800b2b0 <sqrtf>
 800aa54:	a801      	add	r0, sp, #4
 800aa56:	c807      	ldmia	r0, {r0, r1, r2}
 800aa58:	e751      	b.n	800a8fe <arm_cmplx_mag_f32+0x2a>
 800aa5a:	eeb0 0a67 	vmov.f32	s0, s15
 800aa5e:	9101      	str	r1, [sp, #4]
 800aa60:	f000 fc26 	bl	800b2b0 <sqrtf>
 800aa64:	9901      	ldr	r1, [sp, #4]
 800aa66:	e7c9      	b.n	800a9fc <arm_cmplx_mag_f32+0x128>
 800aa68:	eeb0 0a67 	vmov.f32	s0, s15
 800aa6c:	9203      	str	r2, [sp, #12]
 800aa6e:	9102      	str	r1, [sp, #8]
 800aa70:	9001      	str	r0, [sp, #4]
 800aa72:	f000 fc1d 	bl	800b2b0 <sqrtf>
 800aa76:	a801      	add	r0, sp, #4
 800aa78:	c807      	ldmia	r0, {r0, r1, r2}
 800aa7a:	e78b      	b.n	800a994 <arm_cmplx_mag_f32+0xc0>
 800aa7c:	eeb0 0a67 	vmov.f32	s0, s15
 800aa80:	9203      	str	r2, [sp, #12]
 800aa82:	9102      	str	r1, [sp, #8]
 800aa84:	9001      	str	r0, [sp, #4]
 800aa86:	f000 fc13 	bl	800b2b0 <sqrtf>
 800aa8a:	a801      	add	r0, sp, #4
 800aa8c:	c807      	ldmia	r0, {r0, r1, r2}
 800aa8e:	e769      	b.n	800a964 <arm_cmplx_mag_f32+0x90>
 800aa90:	eeb0 0a67 	vmov.f32	s0, s15
 800aa94:	9203      	str	r2, [sp, #12]
 800aa96:	9102      	str	r1, [sp, #8]
 800aa98:	9001      	str	r0, [sp, #4]
 800aa9a:	f000 fc09 	bl	800b2b0 <sqrtf>
 800aa9e:	a801      	add	r0, sp, #4
 800aaa0:	c807      	ldmia	r0, {r0, r1, r2}
 800aaa2:	e746      	b.n	800a932 <arm_cmplx_mag_f32+0x5e>

0800aaa4 <arm_cmplx_conj_f32>:
 800aaa4:	b4f0      	push	{r4, r5, r6, r7}
 800aaa6:	0897      	lsrs	r7, r2, #2
 800aaa8:	d035      	beq.n	800ab16 <arm_cmplx_conj_f32+0x72>
 800aaaa:	f100 0420 	add.w	r4, r0, #32
 800aaae:	f101 0320 	add.w	r3, r1, #32
 800aab2:	463d      	mov	r5, r7
 800aab4:	f854 6c20 	ldr.w	r6, [r4, #-32]
 800aab8:	3d01      	subs	r5, #1
 800aaba:	f104 0420 	add.w	r4, r4, #32
 800aabe:	f103 0320 	add.w	r3, r3, #32
 800aac2:	f843 6c40 	str.w	r6, [r3, #-64]
 800aac6:	f854 6c38 	ldr.w	r6, [r4, #-56]
 800aaca:	f843 6c38 	str.w	r6, [r3, #-56]
 800aace:	f854 6c30 	ldr.w	r6, [r4, #-48]
 800aad2:	f843 6c30 	str.w	r6, [r3, #-48]
 800aad6:	f854 6c28 	ldr.w	r6, [r4, #-40]
 800aada:	f843 6c28 	str.w	r6, [r3, #-40]
 800aade:	ed14 6a0f 	vldr	s12, [r4, #-60]	; 0xffffffc4
 800aae2:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800aae6:	ed14 7a0b 	vldr	s14, [r4, #-44]	; 0xffffffd4
 800aaea:	eeb1 6a46 	vneg.f32	s12, s12
 800aaee:	ed54 7a09 	vldr	s15, [r4, #-36]	; 0xffffffdc
 800aaf2:	eef1 6a66 	vneg.f32	s13, s13
 800aaf6:	eeb1 7a47 	vneg.f32	s14, s14
 800aafa:	eef1 7a67 	vneg.f32	s15, s15
 800aafe:	ed03 6a0f 	vstr	s12, [r3, #-60]	; 0xffffffc4
 800ab02:	ed43 6a0d 	vstr	s13, [r3, #-52]	; 0xffffffcc
 800ab06:	ed03 7a0b 	vstr	s14, [r3, #-44]	; 0xffffffd4
 800ab0a:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 800ab0e:	d1d1      	bne.n	800aab4 <arm_cmplx_conj_f32+0x10>
 800ab10:	017f      	lsls	r7, r7, #5
 800ab12:	4438      	add	r0, r7
 800ab14:	4439      	add	r1, r7
 800ab16:	f012 0203 	ands.w	r2, r2, #3
 800ab1a:	d011      	beq.n	800ab40 <arm_cmplx_conj_f32+0x9c>
 800ab1c:	3108      	adds	r1, #8
 800ab1e:	3008      	adds	r0, #8
 800ab20:	f850 3c08 	ldr.w	r3, [r0, #-8]
 800ab24:	3a01      	subs	r2, #1
 800ab26:	f100 0008 	add.w	r0, r0, #8
 800ab2a:	f101 0108 	add.w	r1, r1, #8
 800ab2e:	f841 3c10 	str.w	r3, [r1, #-16]
 800ab32:	ed50 7a03 	vldr	s15, [r0, #-12]
 800ab36:	eef1 7a67 	vneg.f32	s15, s15
 800ab3a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ab3e:	d1ef      	bne.n	800ab20 <arm_cmplx_conj_f32+0x7c>
 800ab40:	bcf0      	pop	{r4, r5, r6, r7}
 800ab42:	4770      	bx	lr

0800ab44 <arm_sub_f32>:
 800ab44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab46:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800ab4a:	d033      	beq.n	800abb4 <arm_sub_f32+0x70>
 800ab4c:	f100 0610 	add.w	r6, r0, #16
 800ab50:	f101 0510 	add.w	r5, r1, #16
 800ab54:	f102 0410 	add.w	r4, r2, #16
 800ab58:	4677      	mov	r7, lr
 800ab5a:	ed16 7a03 	vldr	s14, [r6, #-12]
 800ab5e:	3f01      	subs	r7, #1
 800ab60:	ed56 7a02 	vldr	s15, [r6, #-8]
 800ab64:	f105 0510 	add.w	r5, r5, #16
 800ab68:	ed15 6a07 	vldr	s12, [r5, #-28]	; 0xffffffe4
 800ab6c:	f106 0610 	add.w	r6, r6, #16
 800ab70:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800ab74:	f104 0410 	add.w	r4, r4, #16
 800ab78:	ed15 5a05 	vldr	s10, [r5, #-20]	; 0xffffffec
 800ab7c:	ee37 6a46 	vsub.f32	s12, s14, s12
 800ab80:	ed55 5a08 	vldr	s11, [r5, #-32]	; 0xffffffe0
 800ab84:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800ab88:	ed16 7a05 	vldr	s14, [r6, #-20]	; 0xffffffec
 800ab8c:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800ab90:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ab94:	ed04 6a07 	vstr	s12, [r4, #-28]	; 0xffffffe4
 800ab98:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ab9c:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800aba0:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800aba4:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 800aba8:	d1d7      	bne.n	800ab5a <arm_sub_f32+0x16>
 800abaa:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800abae:	4420      	add	r0, r4
 800abb0:	4421      	add	r1, r4
 800abb2:	4422      	add	r2, r4
 800abb4:	f013 0303 	ands.w	r3, r3, #3
 800abb8:	d009      	beq.n	800abce <arm_sub_f32+0x8a>
 800abba:	ecf0 7a01 	vldmia	r0!, {s15}
 800abbe:	3b01      	subs	r3, #1
 800abc0:	ecb1 7a01 	vldmia	r1!, {s14}
 800abc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abc8:	ece2 7a01 	vstmia	r2!, {s15}
 800abcc:	d1f5      	bne.n	800abba <arm_sub_f32+0x76>
 800abce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abd0 <arm_mult_f32>:
 800abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800abd6:	d033      	beq.n	800ac40 <arm_mult_f32+0x70>
 800abd8:	f100 0610 	add.w	r6, r0, #16
 800abdc:	f101 0510 	add.w	r5, r1, #16
 800abe0:	f102 0410 	add.w	r4, r2, #16
 800abe4:	4677      	mov	r7, lr
 800abe6:	ed16 7a04 	vldr	s14, [r6, #-16]
 800abea:	3f01      	subs	r7, #1
 800abec:	ed15 6a04 	vldr	s12, [r5, #-16]
 800abf0:	f106 0610 	add.w	r6, r6, #16
 800abf4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800abf8:	f105 0510 	add.w	r5, r5, #16
 800abfc:	ee27 6a06 	vmul.f32	s12, s14, s12
 800ac00:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800ac04:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 800ac08:	f104 0410 	add.w	r4, r4, #16
 800ac0c:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800ac10:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ac14:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800ac18:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 800ac1c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ac20:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800ac24:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800ac28:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ac2c:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800ac30:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800ac34:	d1d7      	bne.n	800abe6 <arm_mult_f32+0x16>
 800ac36:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800ac3a:	4420      	add	r0, r4
 800ac3c:	4421      	add	r1, r4
 800ac3e:	4422      	add	r2, r4
 800ac40:	f013 0303 	ands.w	r3, r3, #3
 800ac44:	d009      	beq.n	800ac5a <arm_mult_f32+0x8a>
 800ac46:	ecf0 7a01 	vldmia	r0!, {s15}
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	ecb1 7a01 	vldmia	r1!, {s14}
 800ac50:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac54:	ece2 7a01 	vstmia	r2!, {s15}
 800ac58:	d1f5      	bne.n	800ac46 <arm_mult_f32+0x76>
 800ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac5c <arm_abs_f32>:
 800ac5c:	b470      	push	{r4, r5, r6}
 800ac5e:	0896      	lsrs	r6, r2, #2
 800ac60:	d025      	beq.n	800acae <arm_abs_f32+0x52>
 800ac62:	f100 0410 	add.w	r4, r0, #16
 800ac66:	f101 0310 	add.w	r3, r1, #16
 800ac6a:	4635      	mov	r5, r6
 800ac6c:	ed14 6a04 	vldr	s12, [r4, #-16]
 800ac70:	3d01      	subs	r5, #1
 800ac72:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ac76:	f103 0310 	add.w	r3, r3, #16
 800ac7a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800ac7e:	eeb0 6ac6 	vabs.f32	s12, s12
 800ac82:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ac86:	eef0 6ae6 	vabs.f32	s13, s13
 800ac8a:	eeb0 7ac7 	vabs.f32	s14, s14
 800ac8e:	f104 0410 	add.w	r4, r4, #16
 800ac92:	eef0 7ae7 	vabs.f32	s15, s15
 800ac96:	ed03 6a08 	vstr	s12, [r3, #-32]	; 0xffffffe0
 800ac9a:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800ac9e:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 800aca2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800aca6:	d1e1      	bne.n	800ac6c <arm_abs_f32+0x10>
 800aca8:	0136      	lsls	r6, r6, #4
 800acaa:	4430      	add	r0, r6
 800acac:	4431      	add	r1, r6
 800acae:	f012 0203 	ands.w	r2, r2, #3
 800acb2:	d007      	beq.n	800acc4 <arm_abs_f32+0x68>
 800acb4:	ecf0 7a01 	vldmia	r0!, {s15}
 800acb8:	3a01      	subs	r2, #1
 800acba:	eef0 7ae7 	vabs.f32	s15, s15
 800acbe:	ece1 7a01 	vstmia	r1!, {s15}
 800acc2:	d1f7      	bne.n	800acb4 <arm_abs_f32+0x58>
 800acc4:	bc70      	pop	{r4, r5, r6}
 800acc6:	4770      	bx	lr

0800acc8 <arm_radix8_butterfly_f32>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	469e      	mov	lr, r3
 800acce:	4603      	mov	r3, r0
 800acd0:	468a      	mov	sl, r1
 800acd2:	468b      	mov	fp, r1
 800acd4:	3304      	adds	r3, #4
 800acd6:	ed2d 8b10 	vpush	{d8-d15}
 800acda:	469c      	mov	ip, r3
 800acdc:	b09d      	sub	sp, #116	; 0x74
 800acde:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800afec <arm_radix8_butterfly_f32+0x324>
 800ace2:	9019      	str	r0, [sp, #100]	; 0x64
 800ace4:	921a      	str	r2, [sp, #104]	; 0x68
 800ace6:	931b      	str	r3, [sp, #108]	; 0x6c
 800ace8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800acec:	f04f 0800 	mov.w	r8, #0
 800acf0:	461a      	mov	r2, r3
 800acf2:	9311      	str	r3, [sp, #68]	; 0x44
 800acf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800acf8:	4611      	mov	r1, r2
 800acfa:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	0053      	lsls	r3, r2, #1
 800ad02:	18d5      	adds	r5, r2, r3
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	0113      	lsls	r3, r2, #4
 800ad08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad0a:	194c      	adds	r4, r1, r5
 800ad0c:	eb02 0609 	add.w	r6, r2, r9
 800ad10:	9302      	str	r3, [sp, #8]
 800ad12:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ad16:	4613      	mov	r3, r2
 800ad18:	190a      	adds	r2, r1, r4
 800ad1a:	eb06 0709 	add.w	r7, r6, r9
 800ad1e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ad22:	1888      	adds	r0, r1, r2
 800ad24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ad28:	4401      	add	r1, r0
 800ad2a:	3204      	adds	r2, #4
 800ad2c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ad30:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ad34:	9b00      	ldr	r3, [sp, #0]
 800ad36:	3104      	adds	r1, #4
 800ad38:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800ad3c:	44d8      	add	r8, fp
 800ad3e:	ed90 7a00 	vldr	s14, [r0]
 800ad42:	ed94 5a00 	vldr	s10, [r4]
 800ad46:	45c2      	cmp	sl, r8
 800ad48:	edd7 3a00 	vldr	s7, [r7]
 800ad4c:	ed96 6a00 	vldr	s12, [r6]
 800ad50:	ee37 1a85 	vadd.f32	s2, s15, s10
 800ad54:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ad58:	ee73 4a87 	vadd.f32	s9, s7, s14
 800ad5c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800ad60:	edd5 7a00 	vldr	s15, [r5]
 800ad64:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800ad68:	ed11 7a01 	vldr	s14, [r1, #-4]
 800ad6c:	ee36 2a26 	vadd.f32	s4, s12, s13
 800ad70:	ee37 4a87 	vadd.f32	s8, s15, s14
 800ad74:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ad78:	ee71 5a24 	vadd.f32	s11, s2, s9
 800ad7c:	ee32 6a04 	vadd.f32	s12, s4, s8
 800ad80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ad84:	ee31 1a64 	vsub.f32	s2, s2, s9
 800ad88:	ee75 4a86 	vadd.f32	s9, s11, s12
 800ad8c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800ad90:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800ad94:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800ad98:	ee32 2a44 	vsub.f32	s4, s4, s8
 800ad9c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ada0:	ed94 0a01 	vldr	s0, [r4, #4]
 800ada4:	edc4 5a00 	vstr	s11, [r4]
 800ada8:	ee36 7a87 	vadd.f32	s14, s13, s14
 800adac:	edd6 5a01 	vldr	s11, [r6, #4]
 800adb0:	edd5 2a01 	vldr	s5, [r5, #4]
 800adb4:	ee75 1a27 	vadd.f32	s3, s10, s15
 800adb8:	ed92 4a00 	vldr	s8, [r2]
 800adbc:	ee75 7a67 	vsub.f32	s15, s10, s15
 800adc0:	edd1 4a00 	vldr	s9, [r1]
 800adc4:	ee27 7a09 	vmul.f32	s14, s14, s18
 800adc8:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800adcc:	ed9c 6a00 	vldr	s12, [ip]
 800add0:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800add4:	edd0 0a01 	vldr	s1, [r0, #4]
 800add8:	ed97 5a01 	vldr	s10, [r7, #4]
 800addc:	ee35 4a84 	vadd.f32	s8, s11, s8
 800ade0:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800ade4:	ee73 5a26 	vadd.f32	s11, s6, s13
 800ade8:	ee76 2a00 	vadd.f32	s5, s12, s0
 800adec:	ee73 6a66 	vsub.f32	s13, s6, s13
 800adf0:	ee36 6a40 	vsub.f32	s12, s12, s0
 800adf4:	ee35 0a20 	vadd.f32	s0, s10, s1
 800adf8:	ee65 5a89 	vmul.f32	s11, s11, s18
 800adfc:	ee35 5a60 	vsub.f32	s10, s10, s1
 800ae00:	ee32 3a80 	vadd.f32	s6, s5, s0
 800ae04:	ee74 0a24 	vadd.f32	s1, s8, s9
 800ae08:	ee66 6a89 	vmul.f32	s13, s13, s18
 800ae0c:	ee74 4a64 	vsub.f32	s9, s8, s9
 800ae10:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800ae14:	ee75 2a25 	vadd.f32	s5, s10, s11
 800ae18:	ee33 0a20 	vadd.f32	s0, s6, s1
 800ae1c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ae20:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ae24:	ee36 5a26 	vadd.f32	s10, s12, s13
 800ae28:	ed8c 0a00 	vstr	s0, [ip]
 800ae2c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ae30:	449c      	add	ip, r3
 800ae32:	ee33 6a87 	vadd.f32	s12, s7, s14
 800ae36:	ed84 3a01 	vstr	s6, [r4, #4]
 800ae3a:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800ae3e:	441c      	add	r4, r3
 800ae40:	ee71 3a24 	vadd.f32	s7, s2, s9
 800ae44:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ae48:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800ae4c:	edc7 3a00 	vstr	s7, [r7]
 800ae50:	ee34 1a42 	vsub.f32	s2, s8, s4
 800ae54:	edc0 4a00 	vstr	s9, [r0]
 800ae58:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800ae5c:	ee75 4a46 	vsub.f32	s9, s10, s12
 800ae60:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ae64:	ed87 1a01 	vstr	s2, [r7, #4]
 800ae68:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800ae6c:	441f      	add	r7, r3
 800ae6e:	ee32 4a04 	vadd.f32	s8, s4, s8
 800ae72:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800ae76:	ee36 6a05 	vadd.f32	s12, s12, s10
 800ae7a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ae7e:	ed80 4a01 	vstr	s8, [r0, #4]
 800ae82:	ed86 3a00 	vstr	s6, [r6]
 800ae86:	4418      	add	r0, r3
 800ae88:	ed41 1a01 	vstr	s3, [r1, #-4]
 800ae8c:	ed42 3a01 	vstr	s7, [r2, #-4]
 800ae90:	edc5 7a00 	vstr	s15, [r5]
 800ae94:	edc6 4a01 	vstr	s9, [r6, #4]
 800ae98:	441e      	add	r6, r3
 800ae9a:	ed81 6a00 	vstr	s12, [r1]
 800ae9e:	4419      	add	r1, r3
 800aea0:	edc2 5a00 	vstr	s11, [r2]
 800aea4:	441a      	add	r2, r3
 800aea6:	ed85 7a01 	vstr	s14, [r5, #4]
 800aeaa:	441d      	add	r5, r3
 800aeac:	f63f af44 	bhi.w	800ad38 <arm_radix8_butterfly_f32+0x70>
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aeb4:	2b07      	cmp	r3, #7
 800aeb6:	f240 81f4 	bls.w	800b2a2 <arm_radix8_butterfly_f32+0x5da>
 800aeba:	9901      	ldr	r1, [sp, #4]
 800aebc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800aec0:	9d02      	ldr	r5, [sp, #8]
 800aec2:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800aec6:	3101      	adds	r1, #1
 800aec8:	eb04 000e 	add.w	r0, r4, lr
 800aecc:	00e4      	lsls	r4, r4, #3
 800aece:	3508      	adds	r5, #8
 800aed0:	4419      	add	r1, r3
 800aed2:	eb00 0c0e 	add.w	ip, r0, lr
 800aed6:	9413      	str	r4, [sp, #76]	; 0x4c
 800aed8:	00c0      	lsls	r0, r0, #3
 800aeda:	185e      	adds	r6, r3, r1
 800aedc:	4617      	mov	r7, r2
 800aede:	9218      	str	r2, [sp, #96]	; 0x60
 800aee0:	f109 0908 	add.w	r9, r9, #8
 800aee4:	199c      	adds	r4, r3, r6
 800aee6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aee8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aeea:	9012      	str	r0, [sp, #72]	; 0x48
 800aeec:	195d      	adds	r5, r3, r5
 800aeee:	9811      	ldr	r0, [sp, #68]	; 0x44
 800aef0:	443a      	add	r2, r7
 800aef2:	950c      	str	r5, [sp, #48]	; 0x30
 800aef4:	4698      	mov	r8, r3
 800aef6:	4420      	add	r0, r4
 800aef8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800aefa:	19d7      	adds	r7, r2, r7
 800aefc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800af00:	4405      	add	r5, r0
 800af02:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800af06:	9710      	str	r7, [sp, #64]	; 0x40
 800af08:	eb0c 070e 	add.w	r7, ip, lr
 800af0c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800af10:	3404      	adds	r4, #4
 800af12:	3004      	adds	r0, #4
 800af14:	44c8      	add	r8, r9
 800af16:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800af1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af1c:	940a      	str	r4, [sp, #40]	; 0x28
 800af1e:	9009      	str	r0, [sp, #36]	; 0x24
 800af20:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800af24:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800af26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800af2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800af2c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800af30:	eb07 080e 	add.w	r8, r7, lr
 800af34:	eb04 0900 	add.w	r9, r4, r0
 800af38:	00f8      	lsls	r0, r7, #3
 800af3a:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800af3e:	3504      	adds	r5, #4
 800af40:	4607      	mov	r7, r0
 800af42:	9017      	str	r0, [sp, #92]	; 0x5c
 800af44:	910b      	str	r1, [sp, #44]	; 0x2c
 800af46:	4618      	mov	r0, r3
 800af48:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800af4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af4e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800af52:	18e3      	adds	r3, r4, r3
 800af54:	9508      	str	r5, [sp, #32]
 800af56:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800af58:	910e      	str	r1, [sp, #56]	; 0x38
 800af5a:	4621      	mov	r1, r4
 800af5c:	eb04 0805 	add.w	r8, r4, r5
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	19e5      	adds	r5, r4, r7
 800af64:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800af68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800af6a:	9316      	str	r3, [sp, #88]	; 0x58
 800af6c:	190b      	adds	r3, r1, r4
 800af6e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800af70:	9505      	str	r5, [sp, #20]
 800af72:	9303      	str	r3, [sp, #12]
 800af74:	f100 0308 	add.w	r3, r0, #8
 800af78:	9707      	str	r7, [sp, #28]
 800af7a:	4638      	mov	r0, r7
 800af7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800af7e:	2301      	movs	r3, #1
 800af80:	9306      	str	r3, [sp, #24]
 800af82:	9b00      	ldr	r3, [sp, #0]
 800af84:	ed90 fa00 	vldr	s30, [r0]
 800af88:	edd0 ba01 	vldr	s23, [r0, #4]
 800af8c:	9803      	ldr	r0, [sp, #12]
 800af8e:	9903      	ldr	r1, [sp, #12]
 800af90:	ed90 ba01 	vldr	s22, [r0, #4]
 800af94:	9804      	ldr	r0, [sp, #16]
 800af96:	edd1 ea00 	vldr	s29, [r1]
 800af9a:	edd0 aa01 	vldr	s21, [r0, #4]
 800af9e:	9805      	ldr	r0, [sp, #20]
 800afa0:	9905      	ldr	r1, [sp, #20]
 800afa2:	edd0 7a01 	vldr	s15, [r0, #4]
 800afa6:	ed91 da00 	vldr	s26, [r1]
 800afaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800afac:	9c04      	ldr	r4, [sp, #16]
 800afae:	edcd 7a01 	vstr	s15, [sp, #4]
 800afb2:	edd8 7a01 	vldr	s15, [r8, #4]
 800afb6:	9100      	str	r1, [sp, #0]
 800afb8:	edd2 fa00 	vldr	s31, [r2]
 800afbc:	ed94 ea00 	vldr	s28, [r4]
 800afc0:	ed92 ca01 	vldr	s24, [r2, #4]
 800afc4:	f8dd e020 	ldr.w	lr, [sp, #32]
 800afc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800afca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800afcc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800afce:	edd9 da00 	vldr	s27, [r9]
 800afd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800afd4:	edd8 ca00 	vldr	s25, [r8]
 800afd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800afda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afdc:	f8dd c018 	ldr.w	ip, [sp, #24]
 800afe0:	ed99 aa01 	vldr	s20, [r9, #4]
 800afe4:	edcd 7a02 	vstr	s15, [sp, #8]
 800afe8:	9800      	ldr	r0, [sp, #0]
 800afea:	e001      	b.n	800aff0 <arm_radix8_butterfly_f32+0x328>
 800afec:	3f3504f3 	.word	0x3f3504f3
 800aff0:	edd5 3a00 	vldr	s7, [r5]
 800aff4:	44dc      	add	ip, fp
 800aff6:	ed91 7a00 	vldr	s14, [r1]
 800affa:	edd4 8a00 	vldr	s17, [r4]
 800affe:	45e2      	cmp	sl, ip
 800b000:	ed57 7a01 	vldr	s15, [r7, #-4]
 800b004:	ed90 5a00 	vldr	s10, [r0]
 800b008:	ed56 5a01 	vldr	s11, [r6, #-4]
 800b00c:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800b010:	ed92 1a00 	vldr	s2, [r2]
 800b014:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800b018:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800b01c:	ee75 9a25 	vadd.f32	s19, s10, s11
 800b020:	ee31 3a07 	vadd.f32	s6, s2, s14
 800b024:	ed92 8a01 	vldr	s16, [r2, #4]
 800b028:	ee73 6a84 	vadd.f32	s13, s7, s8
 800b02c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b030:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b034:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b038:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800b03c:	ee75 7a84 	vadd.f32	s15, s11, s8
 800b040:	ee31 1a47 	vsub.f32	s2, s2, s14
 800b044:	ee31 7a85 	vadd.f32	s14, s3, s10
 800b048:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b04c:	ee33 3a46 	vsub.f32	s6, s6, s12
 800b050:	ed82 7a00 	vstr	s14, [r2]
 800b054:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800b058:	ed96 6a00 	vldr	s12, [r6]
 800b05c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800b060:	edd5 3a01 	vldr	s7, [r5, #4]
 800b064:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800b068:	ed90 7a01 	vldr	s14, [r0, #4]
 800b06c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800b070:	edde 4a00 	vldr	s9, [lr]
 800b074:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800b078:	ee77 2a46 	vsub.f32	s5, s14, s12
 800b07c:	edd1 6a01 	vldr	s13, [r1, #4]
 800b080:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800b084:	edd7 0a00 	vldr	s1, [r7]
 800b088:	ee77 5a06 	vadd.f32	s11, s14, s12
 800b08c:	ed94 7a01 	vldr	s14, [r4, #4]
 800b090:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800b094:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800b098:	ee78 4a66 	vsub.f32	s9, s16, s13
 800b09c:	ee78 3a26 	vadd.f32	s7, s16, s13
 800b0a0:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800b0a4:	ee77 6a20 	vadd.f32	s13, s14, s1
 800b0a8:	ee24 4a09 	vmul.f32	s8, s8, s18
 800b0ac:	ee37 7a60 	vsub.f32	s14, s14, s1
 800b0b0:	ee20 8a09 	vmul.f32	s16, s0, s18
 800b0b4:	ee75 0a86 	vadd.f32	s1, s11, s12
 800b0b8:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800b0bc:	ee62 2a89 	vmul.f32	s5, s5, s18
 800b0c0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b0c4:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800b0c8:	ee77 7a62 	vsub.f32	s15, s14, s5
 800b0cc:	ee74 5a88 	vadd.f32	s11, s9, s16
 800b0d0:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800b0d4:	ee77 4a22 	vadd.f32	s9, s14, s5
 800b0d8:	ee71 2a04 	vadd.f32	s5, s2, s8
 800b0dc:	ee31 7a44 	vsub.f32	s14, s2, s8
 800b0e0:	ee30 1a60 	vsub.f32	s2, s0, s1
 800b0e4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b0e8:	ee33 6a46 	vsub.f32	s12, s6, s12
 800b0ec:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800b0f0:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800b0f4:	ee38 4a68 	vsub.f32	s8, s16, s17
 800b0f8:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800b0fc:	ee72 5a25 	vadd.f32	s11, s4, s11
 800b100:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800b104:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800b108:	ee77 2a27 	vadd.f32	s5, s14, s15
 800b10c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b110:	ee78 7a88 	vadd.f32	s15, s17, s16
 800b114:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800b118:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800b11c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800b120:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800b124:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800b128:	ee70 0a20 	vadd.f32	s1, s0, s1
 800b12c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800b130:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800b134:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800b138:	edc2 0a01 	vstr	s1, [r2, #4]
 800b13c:	ee38 8a88 	vadd.f32	s16, s17, s16
 800b140:	441a      	add	r2, r3
 800b142:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800b146:	ee31 5a45 	vsub.f32	s10, s2, s10
 800b14a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800b14e:	ed81 8a00 	vstr	s16, [r1]
 800b152:	ee39 0a80 	vadd.f32	s0, s19, s0
 800b156:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b15a:	ed81 5a01 	vstr	s10, [r1, #4]
 800b15e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800b162:	edcd 3a00 	vstr	s7, [sp]
 800b166:	ed9d 5a02 	vldr	s10, [sp, #8]
 800b16a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800b16e:	eddd 3a01 	vldr	s7, [sp, #4]
 800b172:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800b176:	ed84 0a00 	vstr	s0, [r4]
 800b17a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b17e:	ed84 3a01 	vstr	s6, [r4, #4]
 800b182:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800b186:	ee23 6a86 	vmul.f32	s12, s7, s12
 800b18a:	eddd 3a00 	vldr	s7, [sp]
 800b18e:	ee25 5a25 	vmul.f32	s10, s10, s11
 800b192:	4419      	add	r1, r3
 800b194:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800b198:	441c      	add	r4, r3
 800b19a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800b19e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b1a2:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800b1a6:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800b1aa:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800b1ae:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800b1b2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800b1b6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800b1ba:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800b1be:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800b1c2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800b1c6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800b1ca:	ee38 8a01 	vadd.f32	s16, s16, s2
 800b1ce:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800b1d2:	ee39 5a85 	vadd.f32	s10, s19, s10
 800b1d6:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800b1da:	ed07 8a01 	vstr	s16, [r7, #-4]
 800b1de:	ee30 0a21 	vadd.f32	s0, s0, s3
 800b1e2:	ed87 6a00 	vstr	s12, [r7]
 800b1e6:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b1ea:	edc0 0a00 	vstr	s1, [r0]
 800b1ee:	ee33 3a28 	vadd.f32	s6, s6, s17
 800b1f2:	edc0 3a01 	vstr	s7, [r0, #4]
 800b1f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b1fa:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800b1fe:	edce 4a00 	vstr	s9, [lr]
 800b202:	4418      	add	r0, r3
 800b204:	ed06 0a01 	vstr	s0, [r6, #-4]
 800b208:	441f      	add	r7, r3
 800b20a:	edc6 2a00 	vstr	s5, [r6]
 800b20e:	449e      	add	lr, r3
 800b210:	ed85 3a00 	vstr	s6, [r5]
 800b214:	441e      	add	r6, r3
 800b216:	ed85 7a01 	vstr	s14, [r5, #4]
 800b21a:	441d      	add	r5, r3
 800b21c:	f63f aee8 	bhi.w	800aff0 <arm_radix8_butterfly_f32+0x328>
 800b220:	9a06      	ldr	r2, [sp, #24]
 800b222:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b224:	3201      	adds	r2, #1
 800b226:	4611      	mov	r1, r2
 800b228:	9206      	str	r2, [sp, #24]
 800b22a:	9a07      	ldr	r2, [sp, #28]
 800b22c:	4402      	add	r2, r0
 800b22e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b230:	9207      	str	r2, [sp, #28]
 800b232:	9a03      	ldr	r2, [sp, #12]
 800b234:	4402      	add	r2, r0
 800b236:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b238:	9203      	str	r2, [sp, #12]
 800b23a:	9a04      	ldr	r2, [sp, #16]
 800b23c:	4402      	add	r2, r0
 800b23e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b240:	9204      	str	r2, [sp, #16]
 800b242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b244:	4491      	add	r9, r2
 800b246:	9a05      	ldr	r2, [sp, #20]
 800b248:	4402      	add	r2, r0
 800b24a:	9205      	str	r2, [sp, #20]
 800b24c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b24e:	4490      	add	r8, r2
 800b250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b252:	3208      	adds	r2, #8
 800b254:	920f      	str	r2, [sp, #60]	; 0x3c
 800b256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b258:	3208      	adds	r2, #8
 800b25a:	920e      	str	r2, [sp, #56]	; 0x38
 800b25c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b25e:	3208      	adds	r2, #8
 800b260:	920d      	str	r2, [sp, #52]	; 0x34
 800b262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b264:	3208      	adds	r2, #8
 800b266:	920c      	str	r2, [sp, #48]	; 0x30
 800b268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b26a:	3208      	adds	r2, #8
 800b26c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b26e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b270:	3208      	adds	r2, #8
 800b272:	920a      	str	r2, [sp, #40]	; 0x28
 800b274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b276:	3208      	adds	r2, #8
 800b278:	9209      	str	r2, [sp, #36]	; 0x24
 800b27a:	9a08      	ldr	r2, [sp, #32]
 800b27c:	3208      	adds	r2, #8
 800b27e:	9208      	str	r2, [sp, #32]
 800b280:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b282:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b284:	4622      	mov	r2, r4
 800b286:	4288      	cmp	r0, r1
 800b288:	d005      	beq.n	800b296 <arm_radix8_butterfly_f32+0x5ce>
 800b28a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b28c:	4621      	mov	r1, r4
 800b28e:	4401      	add	r1, r0
 800b290:	9807      	ldr	r0, [sp, #28]
 800b292:	9110      	str	r1, [sp, #64]	; 0x40
 800b294:	e676      	b.n	800af84 <arm_radix8_butterfly_f32+0x2bc>
 800b296:	4683      	mov	fp, r0
 800b298:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800b29c:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800b2a0:	e522      	b.n	800ace8 <arm_radix8_butterfly_f32+0x20>
 800b2a2:	b01d      	add	sp, #116	; 0x74
 800b2a4:	ecbd 8b10 	vpop	{d8-d15}
 800b2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2ac <atan2f>:
 800b2ac:	f000 b850 	b.w	800b350 <__ieee754_atan2f>

0800b2b0 <sqrtf>:
 800b2b0:	b500      	push	{lr}
 800b2b2:	ed2d 8b02 	vpush	{d8}
 800b2b6:	b08b      	sub	sp, #44	; 0x2c
 800b2b8:	eeb0 8a40 	vmov.f32	s16, s0
 800b2bc:	f000 f8f2 	bl	800b4a4 <__ieee754_sqrtf>
 800b2c0:	4b21      	ldr	r3, [pc, #132]	; (800b348 <sqrtf+0x98>)
 800b2c2:	f993 3000 	ldrsb.w	r3, [r3]
 800b2c6:	1c5a      	adds	r2, r3, #1
 800b2c8:	d028      	beq.n	800b31c <sqrtf+0x6c>
 800b2ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800b2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d2:	d623      	bvs.n	800b31c <sqrtf+0x6c>
 800b2d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2dc:	d51e      	bpl.n	800b31c <sqrtf+0x6c>
 800b2de:	2201      	movs	r2, #1
 800b2e0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 800b2e4:	9200      	str	r2, [sp, #0]
 800b2e6:	4a19      	ldr	r2, [pc, #100]	; (800b34c <sqrtf+0x9c>)
 800b2e8:	9201      	str	r2, [sp, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	9208      	str	r2, [sp, #32]
 800b2ee:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b2f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b2f6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800b340 <sqrtf+0x90>
 800b2fa:	b9a3      	cbnz	r3, 800b326 <sqrtf+0x76>
 800b2fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b300:	4668      	mov	r0, sp
 800b302:	f000 f8d2 	bl	800b4aa <matherr>
 800b306:	b1a0      	cbz	r0, 800b332 <sqrtf+0x82>
 800b308:	9b08      	ldr	r3, [sp, #32]
 800b30a:	b11b      	cbz	r3, 800b314 <sqrtf+0x64>
 800b30c:	f000 f9aa 	bl	800b664 <__errno>
 800b310:	9b08      	ldr	r3, [sp, #32]
 800b312:	6003      	str	r3, [r0, #0]
 800b314:	ed9d 0b06 	vldr	d0, [sp, #24]
 800b318:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b31c:	b00b      	add	sp, #44	; 0x2c
 800b31e:	ecbd 8b02 	vpop	{d8}
 800b322:	f85d fb04 	ldr.w	pc, [sp], #4
 800b326:	2b02      	cmp	r3, #2
 800b328:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800b32c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800b330:	d1e6      	bne.n	800b300 <sqrtf+0x50>
 800b332:	f000 f997 	bl	800b664 <__errno>
 800b336:	2321      	movs	r3, #33	; 0x21
 800b338:	6003      	str	r3, [r0, #0]
 800b33a:	e7e5      	b.n	800b308 <sqrtf+0x58>
 800b33c:	f3af 8000 	nop.w
	...
 800b348:	2400000d 	.word	0x2400000d
 800b34c:	08014dec 	.word	0x08014dec

0800b350 <__ieee754_atan2f>:
 800b350:	ee10 2a90 	vmov	r2, s1
 800b354:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b358:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b35c:	b510      	push	{r4, lr}
 800b35e:	eef0 7a40 	vmov.f32	s15, s0
 800b362:	dc06      	bgt.n	800b372 <__ieee754_atan2f+0x22>
 800b364:	ee10 0a10 	vmov	r0, s0
 800b368:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b36c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b370:	dd04      	ble.n	800b37c <__ieee754_atan2f+0x2c>
 800b372:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b376:	eeb0 0a67 	vmov.f32	s0, s15
 800b37a:	bd10      	pop	{r4, pc}
 800b37c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b380:	d103      	bne.n	800b38a <__ieee754_atan2f+0x3a>
 800b382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b386:	f000 b893 	b.w	800b4b0 <atanf>
 800b38a:	1794      	asrs	r4, r2, #30
 800b38c:	f004 0402 	and.w	r4, r4, #2
 800b390:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b394:	b93b      	cbnz	r3, 800b3a6 <__ieee754_atan2f+0x56>
 800b396:	2c02      	cmp	r4, #2
 800b398:	d06b      	beq.n	800b472 <__ieee754_atan2f+0x122>
 800b39a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800b478 <__ieee754_atan2f+0x128>
 800b39e:	2c03      	cmp	r4, #3
 800b3a0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800b3a4:	e7e7      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b3a6:	b939      	cbnz	r1, 800b3b8 <__ieee754_atan2f+0x68>
 800b3a8:	eddf 7a34 	vldr	s15, [pc, #208]	; 800b47c <__ieee754_atan2f+0x12c>
 800b3ac:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b480 <__ieee754_atan2f+0x130>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	fe67 7a87 	vselge.f32	s15, s15, s14
 800b3b6:	e7de      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b3b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b3bc:	d121      	bne.n	800b402 <__ieee754_atan2f+0xb2>
 800b3be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b3c2:	d111      	bne.n	800b3e8 <__ieee754_atan2f+0x98>
 800b3c4:	2c02      	cmp	r4, #2
 800b3c6:	d009      	beq.n	800b3dc <__ieee754_atan2f+0x8c>
 800b3c8:	2c03      	cmp	r4, #3
 800b3ca:	d00a      	beq.n	800b3e2 <__ieee754_atan2f+0x92>
 800b3cc:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800b484 <__ieee754_atan2f+0x134>
 800b3d0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800b488 <__ieee754_atan2f+0x138>
 800b3d4:	2c01      	cmp	r4, #1
 800b3d6:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800b3da:	e7cc      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b3dc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b48c <__ieee754_atan2f+0x13c>
 800b3e0:	e7c9      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b3e2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b490 <__ieee754_atan2f+0x140>
 800b3e6:	e7c6      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b3e8:	2c02      	cmp	r4, #2
 800b3ea:	d042      	beq.n	800b472 <__ieee754_atan2f+0x122>
 800b3ec:	2c03      	cmp	r4, #3
 800b3ee:	d005      	beq.n	800b3fc <__ieee754_atan2f+0xac>
 800b3f0:	2c01      	cmp	r4, #1
 800b3f2:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b494 <__ieee754_atan2f+0x144>
 800b3f6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b498 <__ieee754_atan2f+0x148>
 800b3fa:	e7ec      	b.n	800b3d6 <__ieee754_atan2f+0x86>
 800b3fc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b478 <__ieee754_atan2f+0x128>
 800b400:	e7b9      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b402:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b406:	d0cf      	beq.n	800b3a8 <__ieee754_atan2f+0x58>
 800b408:	1a5b      	subs	r3, r3, r1
 800b40a:	15db      	asrs	r3, r3, #23
 800b40c:	2b3c      	cmp	r3, #60	; 0x3c
 800b40e:	dc1a      	bgt.n	800b446 <__ieee754_atan2f+0xf6>
 800b410:	2a00      	cmp	r2, #0
 800b412:	da01      	bge.n	800b418 <__ieee754_atan2f+0xc8>
 800b414:	333c      	adds	r3, #60	; 0x3c
 800b416:	db19      	blt.n	800b44c <__ieee754_atan2f+0xfc>
 800b418:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b41c:	f000 f91a 	bl	800b654 <fabsf>
 800b420:	f000 f846 	bl	800b4b0 <atanf>
 800b424:	eef0 7a40 	vmov.f32	s15, s0
 800b428:	2c01      	cmp	r4, #1
 800b42a:	d012      	beq.n	800b452 <__ieee754_atan2f+0x102>
 800b42c:	2c02      	cmp	r4, #2
 800b42e:	d017      	beq.n	800b460 <__ieee754_atan2f+0x110>
 800b430:	2c00      	cmp	r4, #0
 800b432:	d0a0      	beq.n	800b376 <__ieee754_atan2f+0x26>
 800b434:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800b49c <__ieee754_atan2f+0x14c>
 800b438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b43c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800b4a0 <__ieee754_atan2f+0x150>
 800b440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b444:	e797      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b446:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b47c <__ieee754_atan2f+0x12c>
 800b44a:	e7ed      	b.n	800b428 <__ieee754_atan2f+0xd8>
 800b44c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b498 <__ieee754_atan2f+0x148>
 800b450:	e7ea      	b.n	800b428 <__ieee754_atan2f+0xd8>
 800b452:	ee17 3a90 	vmov	r3, s15
 800b456:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	e78a      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b460:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800b49c <__ieee754_atan2f+0x14c>
 800b464:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b468:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800b4a0 <__ieee754_atan2f+0x150>
 800b46c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b470:	e781      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b472:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b4a0 <__ieee754_atan2f+0x150>
 800b476:	e77e      	b.n	800b376 <__ieee754_atan2f+0x26>
 800b478:	c0490fdb 	.word	0xc0490fdb
 800b47c:	3fc90fdb 	.word	0x3fc90fdb
 800b480:	bfc90fdb 	.word	0xbfc90fdb
 800b484:	bf490fdb 	.word	0xbf490fdb
 800b488:	3f490fdb 	.word	0x3f490fdb
 800b48c:	4016cbe4 	.word	0x4016cbe4
 800b490:	c016cbe4 	.word	0xc016cbe4
 800b494:	80000000 	.word	0x80000000
 800b498:	00000000 	.word	0x00000000
 800b49c:	33bbbd2e 	.word	0x33bbbd2e
 800b4a0:	40490fdb 	.word	0x40490fdb

0800b4a4 <__ieee754_sqrtf>:
 800b4a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b4a8:	4770      	bx	lr

0800b4aa <matherr>:
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <atanf>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	ee10 5a10 	vmov	r5, s0
 800b4b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b4ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800b4be:	eef0 7a40 	vmov.f32	s15, s0
 800b4c2:	db0f      	blt.n	800b4e4 <atanf+0x34>
 800b4c4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b4c8:	dd04      	ble.n	800b4d4 <atanf+0x24>
 800b4ca:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b4ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800b608 <atanf+0x158>
 800b4d8:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800b60c <atanf+0x15c>
 800b4dc:	2d00      	cmp	r5, #0
 800b4de:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800b4e2:	e7f4      	b.n	800b4ce <atanf+0x1e>
 800b4e4:	4b4a      	ldr	r3, [pc, #296]	; (800b610 <atanf+0x160>)
 800b4e6:	429c      	cmp	r4, r3
 800b4e8:	dc10      	bgt.n	800b50c <atanf+0x5c>
 800b4ea:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800b4ee:	da0a      	bge.n	800b506 <atanf+0x56>
 800b4f0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b614 <atanf+0x164>
 800b4f4:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b4f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4fc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b504:	dce3      	bgt.n	800b4ce <atanf+0x1e>
 800b506:	f04f 33ff 	mov.w	r3, #4294967295
 800b50a:	e013      	b.n	800b534 <atanf+0x84>
 800b50c:	f000 f8a2 	bl	800b654 <fabsf>
 800b510:	4b41      	ldr	r3, [pc, #260]	; (800b618 <atanf+0x168>)
 800b512:	429c      	cmp	r4, r3
 800b514:	dc4f      	bgt.n	800b5b6 <atanf+0x106>
 800b516:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b51a:	429c      	cmp	r4, r3
 800b51c:	dc41      	bgt.n	800b5a2 <atanf+0xf2>
 800b51e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b522:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b526:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b52a:	2300      	movs	r3, #0
 800b52c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b530:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b53a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b61c <atanf+0x16c>
 800b53e:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b620 <atanf+0x170>
 800b542:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b624 <atanf+0x174>
 800b546:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b54a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b54e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b628 <atanf+0x178>
 800b552:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b556:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b62c <atanf+0x17c>
 800b55a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b55e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b630 <atanf+0x180>
 800b562:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b566:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b634 <atanf+0x184>
 800b56a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b56e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b638 <atanf+0x188>
 800b572:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b576:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b63c <atanf+0x18c>
 800b57a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b57e:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b640 <atanf+0x190>
 800b582:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b586:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b644 <atanf+0x194>
 800b58a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b58e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b592:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b59a:	d121      	bne.n	800b5e0 <atanf+0x130>
 800b59c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5a0:	e795      	b.n	800b4ce <atanf+0x1e>
 800b5a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b5a6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b5aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b5b4:	e7be      	b.n	800b534 <atanf+0x84>
 800b5b6:	4b24      	ldr	r3, [pc, #144]	; (800b648 <atanf+0x198>)
 800b5b8:	429c      	cmp	r4, r3
 800b5ba:	dc0b      	bgt.n	800b5d4 <atanf+0x124>
 800b5bc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b5c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b5ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5d2:	e7af      	b.n	800b534 <atanf+0x84>
 800b5d4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b5d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e7a9      	b.n	800b534 <atanf+0x84>
 800b5e0:	4a1a      	ldr	r2, [pc, #104]	; (800b64c <atanf+0x19c>)
 800b5e2:	491b      	ldr	r1, [pc, #108]	; (800b650 <atanf+0x1a0>)
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	441a      	add	r2, r3
 800b5e8:	440b      	add	r3, r1
 800b5ea:	edd3 6a00 	vldr	s13, [r3]
 800b5ee:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b5f2:	2d00      	cmp	r5, #0
 800b5f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5f8:	ed92 7a00 	vldr	s14, [r2]
 800b5fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b600:	bfb8      	it	lt
 800b602:	eef1 7a67 	vneglt.f32	s15, s15
 800b606:	e762      	b.n	800b4ce <atanf+0x1e>
 800b608:	bfc90fdb 	.word	0xbfc90fdb
 800b60c:	3fc90fdb 	.word	0x3fc90fdb
 800b610:	3edfffff 	.word	0x3edfffff
 800b614:	7149f2ca 	.word	0x7149f2ca
 800b618:	3f97ffff 	.word	0x3f97ffff
 800b61c:	3c8569d7 	.word	0x3c8569d7
 800b620:	3d4bda59 	.word	0x3d4bda59
 800b624:	bd6ef16b 	.word	0xbd6ef16b
 800b628:	3d886b35 	.word	0x3d886b35
 800b62c:	3dba2e6e 	.word	0x3dba2e6e
 800b630:	3e124925 	.word	0x3e124925
 800b634:	3eaaaaab 	.word	0x3eaaaaab
 800b638:	bd15a221 	.word	0xbd15a221
 800b63c:	bd9d8795 	.word	0xbd9d8795
 800b640:	bde38e38 	.word	0xbde38e38
 800b644:	be4ccccd 	.word	0xbe4ccccd
 800b648:	401bffff 	.word	0x401bffff
 800b64c:	08014df4 	.word	0x08014df4
 800b650:	08014e04 	.word	0x08014e04

0800b654 <fabsf>:
 800b654:	ee10 3a10 	vmov	r3, s0
 800b658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b65c:	ee00 3a10 	vmov	s0, r3
 800b660:	4770      	bx	lr
	...

0800b664 <__errno>:
 800b664:	4b01      	ldr	r3, [pc, #4]	; (800b66c <__errno+0x8>)
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	24000010 	.word	0x24000010

0800b670 <__libc_init_array>:
 800b670:	b570      	push	{r4, r5, r6, lr}
 800b672:	4e0d      	ldr	r6, [pc, #52]	; (800b6a8 <__libc_init_array+0x38>)
 800b674:	4c0d      	ldr	r4, [pc, #52]	; (800b6ac <__libc_init_array+0x3c>)
 800b676:	1ba4      	subs	r4, r4, r6
 800b678:	10a4      	asrs	r4, r4, #2
 800b67a:	2500      	movs	r5, #0
 800b67c:	42a5      	cmp	r5, r4
 800b67e:	d109      	bne.n	800b694 <__libc_init_array+0x24>
 800b680:	4e0b      	ldr	r6, [pc, #44]	; (800b6b0 <__libc_init_array+0x40>)
 800b682:	4c0c      	ldr	r4, [pc, #48]	; (800b6b4 <__libc_init_array+0x44>)
 800b684:	f003 fc9c 	bl	800efc0 <_init>
 800b688:	1ba4      	subs	r4, r4, r6
 800b68a:	10a4      	asrs	r4, r4, #2
 800b68c:	2500      	movs	r5, #0
 800b68e:	42a5      	cmp	r5, r4
 800b690:	d105      	bne.n	800b69e <__libc_init_array+0x2e>
 800b692:	bd70      	pop	{r4, r5, r6, pc}
 800b694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b698:	4798      	blx	r3
 800b69a:	3501      	adds	r5, #1
 800b69c:	e7ee      	b.n	800b67c <__libc_init_array+0xc>
 800b69e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6a2:	4798      	blx	r3
 800b6a4:	3501      	adds	r5, #1
 800b6a6:	e7f2      	b.n	800b68e <__libc_init_array+0x1e>
 800b6a8:	080150d0 	.word	0x080150d0
 800b6ac:	080150d0 	.word	0x080150d0
 800b6b0:	080150d0 	.word	0x080150d0
 800b6b4:	080150d4 	.word	0x080150d4

0800b6b8 <malloc>:
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <malloc+0xc>)
 800b6ba:	4601      	mov	r1, r0
 800b6bc:	6818      	ldr	r0, [r3, #0]
 800b6be:	f000 b86d 	b.w	800b79c <_malloc_r>
 800b6c2:	bf00      	nop
 800b6c4:	24000010 	.word	0x24000010

0800b6c8 <free>:
 800b6c8:	4b02      	ldr	r3, [pc, #8]	; (800b6d4 <free+0xc>)
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	f000 b817 	b.w	800b700 <_free_r>
 800b6d2:	bf00      	nop
 800b6d4:	24000010 	.word	0x24000010

0800b6d8 <memcpy>:
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	1e43      	subs	r3, r0, #1
 800b6dc:	440a      	add	r2, r1
 800b6de:	4291      	cmp	r1, r2
 800b6e0:	d100      	bne.n	800b6e4 <memcpy+0xc>
 800b6e2:	bd10      	pop	{r4, pc}
 800b6e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ec:	e7f7      	b.n	800b6de <memcpy+0x6>

0800b6ee <memset>:
 800b6ee:	4402      	add	r2, r0
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d100      	bne.n	800b6f8 <memset+0xa>
 800b6f6:	4770      	bx	lr
 800b6f8:	f803 1b01 	strb.w	r1, [r3], #1
 800b6fc:	e7f9      	b.n	800b6f2 <memset+0x4>
	...

0800b700 <_free_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4605      	mov	r5, r0
 800b704:	2900      	cmp	r1, #0
 800b706:	d045      	beq.n	800b794 <_free_r+0x94>
 800b708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b70c:	1f0c      	subs	r4, r1, #4
 800b70e:	2b00      	cmp	r3, #0
 800b710:	bfb8      	it	lt
 800b712:	18e4      	addlt	r4, r4, r3
 800b714:	f002 fe8c 	bl	800e430 <__malloc_lock>
 800b718:	4a1f      	ldr	r2, [pc, #124]	; (800b798 <_free_r+0x98>)
 800b71a:	6813      	ldr	r3, [r2, #0]
 800b71c:	4610      	mov	r0, r2
 800b71e:	b933      	cbnz	r3, 800b72e <_free_r+0x2e>
 800b720:	6063      	str	r3, [r4, #4]
 800b722:	6014      	str	r4, [r2, #0]
 800b724:	4628      	mov	r0, r5
 800b726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b72a:	f002 be82 	b.w	800e432 <__malloc_unlock>
 800b72e:	42a3      	cmp	r3, r4
 800b730:	d90c      	bls.n	800b74c <_free_r+0x4c>
 800b732:	6821      	ldr	r1, [r4, #0]
 800b734:	1862      	adds	r2, r4, r1
 800b736:	4293      	cmp	r3, r2
 800b738:	bf04      	itt	eq
 800b73a:	681a      	ldreq	r2, [r3, #0]
 800b73c:	685b      	ldreq	r3, [r3, #4]
 800b73e:	6063      	str	r3, [r4, #4]
 800b740:	bf04      	itt	eq
 800b742:	1852      	addeq	r2, r2, r1
 800b744:	6022      	streq	r2, [r4, #0]
 800b746:	6004      	str	r4, [r0, #0]
 800b748:	e7ec      	b.n	800b724 <_free_r+0x24>
 800b74a:	4613      	mov	r3, r2
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	b10a      	cbz	r2, 800b754 <_free_r+0x54>
 800b750:	42a2      	cmp	r2, r4
 800b752:	d9fa      	bls.n	800b74a <_free_r+0x4a>
 800b754:	6819      	ldr	r1, [r3, #0]
 800b756:	1858      	adds	r0, r3, r1
 800b758:	42a0      	cmp	r0, r4
 800b75a:	d10b      	bne.n	800b774 <_free_r+0x74>
 800b75c:	6820      	ldr	r0, [r4, #0]
 800b75e:	4401      	add	r1, r0
 800b760:	1858      	adds	r0, r3, r1
 800b762:	4282      	cmp	r2, r0
 800b764:	6019      	str	r1, [r3, #0]
 800b766:	d1dd      	bne.n	800b724 <_free_r+0x24>
 800b768:	6810      	ldr	r0, [r2, #0]
 800b76a:	6852      	ldr	r2, [r2, #4]
 800b76c:	605a      	str	r2, [r3, #4]
 800b76e:	4401      	add	r1, r0
 800b770:	6019      	str	r1, [r3, #0]
 800b772:	e7d7      	b.n	800b724 <_free_r+0x24>
 800b774:	d902      	bls.n	800b77c <_free_r+0x7c>
 800b776:	230c      	movs	r3, #12
 800b778:	602b      	str	r3, [r5, #0]
 800b77a:	e7d3      	b.n	800b724 <_free_r+0x24>
 800b77c:	6820      	ldr	r0, [r4, #0]
 800b77e:	1821      	adds	r1, r4, r0
 800b780:	428a      	cmp	r2, r1
 800b782:	bf04      	itt	eq
 800b784:	6811      	ldreq	r1, [r2, #0]
 800b786:	6852      	ldreq	r2, [r2, #4]
 800b788:	6062      	str	r2, [r4, #4]
 800b78a:	bf04      	itt	eq
 800b78c:	1809      	addeq	r1, r1, r0
 800b78e:	6021      	streq	r1, [r4, #0]
 800b790:	605c      	str	r4, [r3, #4]
 800b792:	e7c7      	b.n	800b724 <_free_r+0x24>
 800b794:	bd38      	pop	{r3, r4, r5, pc}
 800b796:	bf00      	nop
 800b798:	24002204 	.word	0x24002204

0800b79c <_malloc_r>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	1ccd      	adds	r5, r1, #3
 800b7a0:	f025 0503 	bic.w	r5, r5, #3
 800b7a4:	3508      	adds	r5, #8
 800b7a6:	2d0c      	cmp	r5, #12
 800b7a8:	bf38      	it	cc
 800b7aa:	250c      	movcc	r5, #12
 800b7ac:	2d00      	cmp	r5, #0
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	db01      	blt.n	800b7b6 <_malloc_r+0x1a>
 800b7b2:	42a9      	cmp	r1, r5
 800b7b4:	d903      	bls.n	800b7be <_malloc_r+0x22>
 800b7b6:	230c      	movs	r3, #12
 800b7b8:	6033      	str	r3, [r6, #0]
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	bd70      	pop	{r4, r5, r6, pc}
 800b7be:	f002 fe37 	bl	800e430 <__malloc_lock>
 800b7c2:	4a21      	ldr	r2, [pc, #132]	; (800b848 <_malloc_r+0xac>)
 800b7c4:	6814      	ldr	r4, [r2, #0]
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	b991      	cbnz	r1, 800b7f0 <_malloc_r+0x54>
 800b7ca:	4c20      	ldr	r4, [pc, #128]	; (800b84c <_malloc_r+0xb0>)
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	b91b      	cbnz	r3, 800b7d8 <_malloc_r+0x3c>
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f000 fe51 	bl	800c478 <_sbrk_r>
 800b7d6:	6020      	str	r0, [r4, #0]
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f000 fe4c 	bl	800c478 <_sbrk_r>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d124      	bne.n	800b82e <_malloc_r+0x92>
 800b7e4:	230c      	movs	r3, #12
 800b7e6:	6033      	str	r3, [r6, #0]
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f002 fe22 	bl	800e432 <__malloc_unlock>
 800b7ee:	e7e4      	b.n	800b7ba <_malloc_r+0x1e>
 800b7f0:	680b      	ldr	r3, [r1, #0]
 800b7f2:	1b5b      	subs	r3, r3, r5
 800b7f4:	d418      	bmi.n	800b828 <_malloc_r+0x8c>
 800b7f6:	2b0b      	cmp	r3, #11
 800b7f8:	d90f      	bls.n	800b81a <_malloc_r+0x7e>
 800b7fa:	600b      	str	r3, [r1, #0]
 800b7fc:	50cd      	str	r5, [r1, r3]
 800b7fe:	18cc      	adds	r4, r1, r3
 800b800:	4630      	mov	r0, r6
 800b802:	f002 fe16 	bl	800e432 <__malloc_unlock>
 800b806:	f104 000b 	add.w	r0, r4, #11
 800b80a:	1d23      	adds	r3, r4, #4
 800b80c:	f020 0007 	bic.w	r0, r0, #7
 800b810:	1ac3      	subs	r3, r0, r3
 800b812:	d0d3      	beq.n	800b7bc <_malloc_r+0x20>
 800b814:	425a      	negs	r2, r3
 800b816:	50e2      	str	r2, [r4, r3]
 800b818:	e7d0      	b.n	800b7bc <_malloc_r+0x20>
 800b81a:	428c      	cmp	r4, r1
 800b81c:	684b      	ldr	r3, [r1, #4]
 800b81e:	bf16      	itet	ne
 800b820:	6063      	strne	r3, [r4, #4]
 800b822:	6013      	streq	r3, [r2, #0]
 800b824:	460c      	movne	r4, r1
 800b826:	e7eb      	b.n	800b800 <_malloc_r+0x64>
 800b828:	460c      	mov	r4, r1
 800b82a:	6849      	ldr	r1, [r1, #4]
 800b82c:	e7cc      	b.n	800b7c8 <_malloc_r+0x2c>
 800b82e:	1cc4      	adds	r4, r0, #3
 800b830:	f024 0403 	bic.w	r4, r4, #3
 800b834:	42a0      	cmp	r0, r4
 800b836:	d005      	beq.n	800b844 <_malloc_r+0xa8>
 800b838:	1a21      	subs	r1, r4, r0
 800b83a:	4630      	mov	r0, r6
 800b83c:	f000 fe1c 	bl	800c478 <_sbrk_r>
 800b840:	3001      	adds	r0, #1
 800b842:	d0cf      	beq.n	800b7e4 <_malloc_r+0x48>
 800b844:	6025      	str	r5, [r4, #0]
 800b846:	e7db      	b.n	800b800 <_malloc_r+0x64>
 800b848:	24002204 	.word	0x24002204
 800b84c:	24002208 	.word	0x24002208

0800b850 <__cvt>:
 800b850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b852:	ed2d 8b02 	vpush	{d8}
 800b856:	eeb0 8b40 	vmov.f64	d8, d0
 800b85a:	b085      	sub	sp, #20
 800b85c:	4617      	mov	r7, r2
 800b85e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b860:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b862:	ee18 2a90 	vmov	r2, s17
 800b866:	f025 0520 	bic.w	r5, r5, #32
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	bfb6      	itet	lt
 800b86e:	222d      	movlt	r2, #45	; 0x2d
 800b870:	2200      	movge	r2, #0
 800b872:	eeb1 8b40 	vneglt.f64	d8, d0
 800b876:	2d46      	cmp	r5, #70	; 0x46
 800b878:	460c      	mov	r4, r1
 800b87a:	701a      	strb	r2, [r3, #0]
 800b87c:	d004      	beq.n	800b888 <__cvt+0x38>
 800b87e:	2d45      	cmp	r5, #69	; 0x45
 800b880:	d100      	bne.n	800b884 <__cvt+0x34>
 800b882:	3401      	adds	r4, #1
 800b884:	2102      	movs	r1, #2
 800b886:	e000      	b.n	800b88a <__cvt+0x3a>
 800b888:	2103      	movs	r1, #3
 800b88a:	ab03      	add	r3, sp, #12
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	ab02      	add	r3, sp, #8
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	4622      	mov	r2, r4
 800b894:	4633      	mov	r3, r6
 800b896:	eeb0 0b48 	vmov.f64	d0, d8
 800b89a:	f001 fd31 	bl	800d300 <_dtoa_r>
 800b89e:	2d47      	cmp	r5, #71	; 0x47
 800b8a0:	d101      	bne.n	800b8a6 <__cvt+0x56>
 800b8a2:	07fb      	lsls	r3, r7, #31
 800b8a4:	d51e      	bpl.n	800b8e4 <__cvt+0x94>
 800b8a6:	2d46      	cmp	r5, #70	; 0x46
 800b8a8:	eb00 0304 	add.w	r3, r0, r4
 800b8ac:	d10c      	bne.n	800b8c8 <__cvt+0x78>
 800b8ae:	7802      	ldrb	r2, [r0, #0]
 800b8b0:	2a30      	cmp	r2, #48	; 0x30
 800b8b2:	d107      	bne.n	800b8c4 <__cvt+0x74>
 800b8b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8bc:	bf1c      	itt	ne
 800b8be:	f1c4 0401 	rsbne	r4, r4, #1
 800b8c2:	6034      	strne	r4, [r6, #0]
 800b8c4:	6832      	ldr	r2, [r6, #0]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d0:	d007      	beq.n	800b8e2 <__cvt+0x92>
 800b8d2:	2130      	movs	r1, #48	; 0x30
 800b8d4:	9a03      	ldr	r2, [sp, #12]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d204      	bcs.n	800b8e4 <__cvt+0x94>
 800b8da:	1c54      	adds	r4, r2, #1
 800b8dc:	9403      	str	r4, [sp, #12]
 800b8de:	7011      	strb	r1, [r2, #0]
 800b8e0:	e7f8      	b.n	800b8d4 <__cvt+0x84>
 800b8e2:	9303      	str	r3, [sp, #12]
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8e8:	1a1b      	subs	r3, r3, r0
 800b8ea:	6013      	str	r3, [r2, #0]
 800b8ec:	b005      	add	sp, #20
 800b8ee:	ecbd 8b02 	vpop	{d8}
 800b8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8f4 <__exponent>:
 800b8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8f6:	2900      	cmp	r1, #0
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	bfba      	itte	lt
 800b8fc:	4249      	neglt	r1, r1
 800b8fe:	232d      	movlt	r3, #45	; 0x2d
 800b900:	232b      	movge	r3, #43	; 0x2b
 800b902:	2909      	cmp	r1, #9
 800b904:	f804 2b02 	strb.w	r2, [r4], #2
 800b908:	7043      	strb	r3, [r0, #1]
 800b90a:	dd20      	ble.n	800b94e <__exponent+0x5a>
 800b90c:	f10d 0307 	add.w	r3, sp, #7
 800b910:	461f      	mov	r7, r3
 800b912:	260a      	movs	r6, #10
 800b914:	fb91 f5f6 	sdiv	r5, r1, r6
 800b918:	fb06 1115 	mls	r1, r6, r5, r1
 800b91c:	3130      	adds	r1, #48	; 0x30
 800b91e:	2d09      	cmp	r5, #9
 800b920:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b924:	f103 32ff 	add.w	r2, r3, #4294967295
 800b928:	4629      	mov	r1, r5
 800b92a:	dc09      	bgt.n	800b940 <__exponent+0x4c>
 800b92c:	3130      	adds	r1, #48	; 0x30
 800b92e:	3b02      	subs	r3, #2
 800b930:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b934:	42bb      	cmp	r3, r7
 800b936:	4622      	mov	r2, r4
 800b938:	d304      	bcc.n	800b944 <__exponent+0x50>
 800b93a:	1a10      	subs	r0, r2, r0
 800b93c:	b003      	add	sp, #12
 800b93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b940:	4613      	mov	r3, r2
 800b942:	e7e7      	b.n	800b914 <__exponent+0x20>
 800b944:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b948:	f804 2b01 	strb.w	r2, [r4], #1
 800b94c:	e7f2      	b.n	800b934 <__exponent+0x40>
 800b94e:	2330      	movs	r3, #48	; 0x30
 800b950:	4419      	add	r1, r3
 800b952:	7083      	strb	r3, [r0, #2]
 800b954:	1d02      	adds	r2, r0, #4
 800b956:	70c1      	strb	r1, [r0, #3]
 800b958:	e7ef      	b.n	800b93a <__exponent+0x46>
 800b95a:	0000      	movs	r0, r0
 800b95c:	0000      	movs	r0, r0
	...

0800b960 <_printf_float>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	b08d      	sub	sp, #52	; 0x34
 800b966:	460c      	mov	r4, r1
 800b968:	4616      	mov	r6, r2
 800b96a:	461f      	mov	r7, r3
 800b96c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b970:	4605      	mov	r5, r0
 800b972:	f002 fd3d 	bl	800e3f0 <_localeconv_r>
 800b976:	f8d0 b000 	ldr.w	fp, [r0]
 800b97a:	4658      	mov	r0, fp
 800b97c:	f7f4 fd10 	bl	80003a0 <strlen>
 800b980:	2300      	movs	r3, #0
 800b982:	930a      	str	r3, [sp, #40]	; 0x28
 800b984:	f8d8 3000 	ldr.w	r3, [r8]
 800b988:	9005      	str	r0, [sp, #20]
 800b98a:	3307      	adds	r3, #7
 800b98c:	f023 0307 	bic.w	r3, r3, #7
 800b990:	f103 0108 	add.w	r1, r3, #8
 800b994:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	f8c8 1000 	str.w	r1, [r8]
 800b99e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b9a6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800bc30 <_printf_float+0x2d0>
 800b9aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b9ae:	eeb0 6bc0 	vabs.f64	d6, d0
 800b9b2:	eeb4 6b47 	vcmp.f64	d6, d7
 800b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ba:	dd24      	ble.n	800ba06 <_printf_float+0xa6>
 800b9bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c4:	d502      	bpl.n	800b9cc <_printf_float+0x6c>
 800b9c6:	232d      	movs	r3, #45	; 0x2d
 800b9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9cc:	499a      	ldr	r1, [pc, #616]	; (800bc38 <_printf_float+0x2d8>)
 800b9ce:	4b9b      	ldr	r3, [pc, #620]	; (800bc3c <_printf_float+0x2dc>)
 800b9d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b9d4:	bf8c      	ite	hi
 800b9d6:	4688      	movhi	r8, r1
 800b9d8:	4698      	movls	r8, r3
 800b9da:	f022 0204 	bic.w	r2, r2, #4
 800b9de:	2303      	movs	r3, #3
 800b9e0:	6123      	str	r3, [r4, #16]
 800b9e2:	6022      	str	r2, [r4, #0]
 800b9e4:	f04f 0a00 	mov.w	sl, #0
 800b9e8:	9700      	str	r7, [sp, #0]
 800b9ea:	4633      	mov	r3, r6
 800b9ec:	aa0b      	add	r2, sp, #44	; 0x2c
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f000 f9e1 	bl	800bdb8 <_printf_common>
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	f040 8089 	bne.w	800bb0e <_printf_float+0x1ae>
 800b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ba00:	b00d      	add	sp, #52	; 0x34
 800ba02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba06:	eeb4 0b40 	vcmp.f64	d0, d0
 800ba0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0e:	d702      	bvc.n	800ba16 <_printf_float+0xb6>
 800ba10:	498b      	ldr	r1, [pc, #556]	; (800bc40 <_printf_float+0x2e0>)
 800ba12:	4b8c      	ldr	r3, [pc, #560]	; (800bc44 <_printf_float+0x2e4>)
 800ba14:	e7dc      	b.n	800b9d0 <_printf_float+0x70>
 800ba16:	6861      	ldr	r1, [r4, #4]
 800ba18:	1c4b      	adds	r3, r1, #1
 800ba1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba1e:	ab0a      	add	r3, sp, #40	; 0x28
 800ba20:	a809      	add	r0, sp, #36	; 0x24
 800ba22:	d13b      	bne.n	800ba9c <_printf_float+0x13c>
 800ba24:	2106      	movs	r1, #6
 800ba26:	6061      	str	r1, [r4, #4]
 800ba28:	f04f 0c00 	mov.w	ip, #0
 800ba2c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800ba30:	e9cd 0900 	strd	r0, r9, [sp]
 800ba34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba38:	6022      	str	r2, [r4, #0]
 800ba3a:	6861      	ldr	r1, [r4, #4]
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	f7ff ff07 	bl	800b850 <__cvt>
 800ba42:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800ba46:	2b47      	cmp	r3, #71	; 0x47
 800ba48:	4680      	mov	r8, r0
 800ba4a:	d109      	bne.n	800ba60 <_printf_float+0x100>
 800ba4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4e:	1cd8      	adds	r0, r3, #3
 800ba50:	db02      	blt.n	800ba58 <_printf_float+0xf8>
 800ba52:	6862      	ldr	r2, [r4, #4]
 800ba54:	4293      	cmp	r3, r2
 800ba56:	dd47      	ble.n	800bae8 <_printf_float+0x188>
 800ba58:	f1a9 0902 	sub.w	r9, r9, #2
 800ba5c:	fa5f f989 	uxtb.w	r9, r9
 800ba60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ba64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba66:	d824      	bhi.n	800bab2 <_printf_float+0x152>
 800ba68:	3901      	subs	r1, #1
 800ba6a:	464a      	mov	r2, r9
 800ba6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba70:	9109      	str	r1, [sp, #36]	; 0x24
 800ba72:	f7ff ff3f 	bl	800b8f4 <__exponent>
 800ba76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba78:	1813      	adds	r3, r2, r0
 800ba7a:	2a01      	cmp	r2, #1
 800ba7c:	4682      	mov	sl, r0
 800ba7e:	6123      	str	r3, [r4, #16]
 800ba80:	dc02      	bgt.n	800ba88 <_printf_float+0x128>
 800ba82:	6822      	ldr	r2, [r4, #0]
 800ba84:	07d1      	lsls	r1, r2, #31
 800ba86:	d501      	bpl.n	800ba8c <_printf_float+0x12c>
 800ba88:	3301      	adds	r3, #1
 800ba8a:	6123      	str	r3, [r4, #16]
 800ba8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d0a9      	beq.n	800b9e8 <_printf_float+0x88>
 800ba94:	232d      	movs	r3, #45	; 0x2d
 800ba96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba9a:	e7a5      	b.n	800b9e8 <_printf_float+0x88>
 800ba9c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800baa0:	f000 8178 	beq.w	800bd94 <_printf_float+0x434>
 800baa4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800baa8:	d1be      	bne.n	800ba28 <_printf_float+0xc8>
 800baaa:	2900      	cmp	r1, #0
 800baac:	d1bc      	bne.n	800ba28 <_printf_float+0xc8>
 800baae:	2101      	movs	r1, #1
 800bab0:	e7b9      	b.n	800ba26 <_printf_float+0xc6>
 800bab2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bab6:	d119      	bne.n	800baec <_printf_float+0x18c>
 800bab8:	2900      	cmp	r1, #0
 800baba:	6863      	ldr	r3, [r4, #4]
 800babc:	dd0c      	ble.n	800bad8 <_printf_float+0x178>
 800babe:	6121      	str	r1, [r4, #16]
 800bac0:	b913      	cbnz	r3, 800bac8 <_printf_float+0x168>
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	07d2      	lsls	r2, r2, #31
 800bac6:	d502      	bpl.n	800bace <_printf_float+0x16e>
 800bac8:	3301      	adds	r3, #1
 800baca:	440b      	add	r3, r1
 800bacc:	6123      	str	r3, [r4, #16]
 800bace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad0:	65a3      	str	r3, [r4, #88]	; 0x58
 800bad2:	f04f 0a00 	mov.w	sl, #0
 800bad6:	e7d9      	b.n	800ba8c <_printf_float+0x12c>
 800bad8:	b913      	cbnz	r3, 800bae0 <_printf_float+0x180>
 800bada:	6822      	ldr	r2, [r4, #0]
 800badc:	07d0      	lsls	r0, r2, #31
 800bade:	d501      	bpl.n	800bae4 <_printf_float+0x184>
 800bae0:	3302      	adds	r3, #2
 800bae2:	e7f3      	b.n	800bacc <_printf_float+0x16c>
 800bae4:	2301      	movs	r3, #1
 800bae6:	e7f1      	b.n	800bacc <_printf_float+0x16c>
 800bae8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800baec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800baf0:	4293      	cmp	r3, r2
 800baf2:	db05      	blt.n	800bb00 <_printf_float+0x1a0>
 800baf4:	6822      	ldr	r2, [r4, #0]
 800baf6:	6123      	str	r3, [r4, #16]
 800baf8:	07d1      	lsls	r1, r2, #31
 800bafa:	d5e8      	bpl.n	800bace <_printf_float+0x16e>
 800bafc:	3301      	adds	r3, #1
 800bafe:	e7e5      	b.n	800bacc <_printf_float+0x16c>
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bfd4      	ite	le
 800bb04:	f1c3 0302 	rsble	r3, r3, #2
 800bb08:	2301      	movgt	r3, #1
 800bb0a:	4413      	add	r3, r2
 800bb0c:	e7de      	b.n	800bacc <_printf_float+0x16c>
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	055a      	lsls	r2, r3, #21
 800bb12:	d407      	bmi.n	800bb24 <_printf_float+0x1c4>
 800bb14:	6923      	ldr	r3, [r4, #16]
 800bb16:	4642      	mov	r2, r8
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b8      	blx	r7
 800bb1e:	3001      	adds	r0, #1
 800bb20:	d12a      	bne.n	800bb78 <_printf_float+0x218>
 800bb22:	e76b      	b.n	800b9fc <_printf_float+0x9c>
 800bb24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bb28:	f240 80de 	bls.w	800bce8 <_printf_float+0x388>
 800bb2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bb30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb38:	d133      	bne.n	800bba2 <_printf_float+0x242>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4a42      	ldr	r2, [pc, #264]	; (800bc48 <_printf_float+0x2e8>)
 800bb3e:	4631      	mov	r1, r6
 800bb40:	4628      	mov	r0, r5
 800bb42:	47b8      	blx	r7
 800bb44:	3001      	adds	r0, #1
 800bb46:	f43f af59 	beq.w	800b9fc <_printf_float+0x9c>
 800bb4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	db02      	blt.n	800bb58 <_printf_float+0x1f8>
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	07d8      	lsls	r0, r3, #31
 800bb56:	d50f      	bpl.n	800bb78 <_printf_float+0x218>
 800bb58:	9b05      	ldr	r3, [sp, #20]
 800bb5a:	465a      	mov	r2, fp
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4628      	mov	r0, r5
 800bb60:	47b8      	blx	r7
 800bb62:	3001      	adds	r0, #1
 800bb64:	f43f af4a 	beq.w	800b9fc <_printf_float+0x9c>
 800bb68:	f04f 0800 	mov.w	r8, #0
 800bb6c:	f104 091a 	add.w	r9, r4, #26
 800bb70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb72:	3b01      	subs	r3, #1
 800bb74:	4543      	cmp	r3, r8
 800bb76:	dc09      	bgt.n	800bb8c <_printf_float+0x22c>
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	079b      	lsls	r3, r3, #30
 800bb7c:	f100 8105 	bmi.w	800bd8a <_printf_float+0x42a>
 800bb80:	68e0      	ldr	r0, [r4, #12]
 800bb82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb84:	4298      	cmp	r0, r3
 800bb86:	bfb8      	it	lt
 800bb88:	4618      	movlt	r0, r3
 800bb8a:	e739      	b.n	800ba00 <_printf_float+0xa0>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	464a      	mov	r2, r9
 800bb90:	4631      	mov	r1, r6
 800bb92:	4628      	mov	r0, r5
 800bb94:	47b8      	blx	r7
 800bb96:	3001      	adds	r0, #1
 800bb98:	f43f af30 	beq.w	800b9fc <_printf_float+0x9c>
 800bb9c:	f108 0801 	add.w	r8, r8, #1
 800bba0:	e7e6      	b.n	800bb70 <_printf_float+0x210>
 800bba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	dc2b      	bgt.n	800bc00 <_printf_float+0x2a0>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	4a27      	ldr	r2, [pc, #156]	; (800bc48 <_printf_float+0x2e8>)
 800bbac:	4631      	mov	r1, r6
 800bbae:	4628      	mov	r0, r5
 800bbb0:	47b8      	blx	r7
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f43f af22 	beq.w	800b9fc <_printf_float+0x9c>
 800bbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbba:	b923      	cbnz	r3, 800bbc6 <_printf_float+0x266>
 800bbbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbbe:	b913      	cbnz	r3, 800bbc6 <_printf_float+0x266>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	07d9      	lsls	r1, r3, #31
 800bbc4:	d5d8      	bpl.n	800bb78 <_printf_float+0x218>
 800bbc6:	9b05      	ldr	r3, [sp, #20]
 800bbc8:	465a      	mov	r2, fp
 800bbca:	4631      	mov	r1, r6
 800bbcc:	4628      	mov	r0, r5
 800bbce:	47b8      	blx	r7
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	f43f af13 	beq.w	800b9fc <_printf_float+0x9c>
 800bbd6:	f04f 0900 	mov.w	r9, #0
 800bbda:	f104 0a1a 	add.w	sl, r4, #26
 800bbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe0:	425b      	negs	r3, r3
 800bbe2:	454b      	cmp	r3, r9
 800bbe4:	dc01      	bgt.n	800bbea <_printf_float+0x28a>
 800bbe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe8:	e795      	b.n	800bb16 <_printf_float+0x1b6>
 800bbea:	2301      	movs	r3, #1
 800bbec:	4652      	mov	r2, sl
 800bbee:	4631      	mov	r1, r6
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	47b8      	blx	r7
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	f43f af01 	beq.w	800b9fc <_printf_float+0x9c>
 800bbfa:	f109 0901 	add.w	r9, r9, #1
 800bbfe:	e7ee      	b.n	800bbde <_printf_float+0x27e>
 800bc00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc04:	429a      	cmp	r2, r3
 800bc06:	bfa8      	it	ge
 800bc08:	461a      	movge	r2, r3
 800bc0a:	2a00      	cmp	r2, #0
 800bc0c:	4691      	mov	r9, r2
 800bc0e:	dd07      	ble.n	800bc20 <_printf_float+0x2c0>
 800bc10:	4613      	mov	r3, r2
 800bc12:	4631      	mov	r1, r6
 800bc14:	4642      	mov	r2, r8
 800bc16:	4628      	mov	r0, r5
 800bc18:	47b8      	blx	r7
 800bc1a:	3001      	adds	r0, #1
 800bc1c:	f43f aeee 	beq.w	800b9fc <_printf_float+0x9c>
 800bc20:	f104 031a 	add.w	r3, r4, #26
 800bc24:	f04f 0a00 	mov.w	sl, #0
 800bc28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc2c:	9307      	str	r3, [sp, #28]
 800bc2e:	e017      	b.n	800bc60 <_printf_float+0x300>
 800bc30:	ffffffff 	.word	0xffffffff
 800bc34:	7fefffff 	.word	0x7fefffff
 800bc38:	08014e18 	.word	0x08014e18
 800bc3c:	08014e14 	.word	0x08014e14
 800bc40:	08014e20 	.word	0x08014e20
 800bc44:	08014e1c 	.word	0x08014e1c
 800bc48:	08014e24 	.word	0x08014e24
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	9a07      	ldr	r2, [sp, #28]
 800bc50:	4631      	mov	r1, r6
 800bc52:	4628      	mov	r0, r5
 800bc54:	47b8      	blx	r7
 800bc56:	3001      	adds	r0, #1
 800bc58:	f43f aed0 	beq.w	800b9fc <_printf_float+0x9c>
 800bc5c:	f10a 0a01 	add.w	sl, sl, #1
 800bc60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc62:	9306      	str	r3, [sp, #24]
 800bc64:	eba3 0309 	sub.w	r3, r3, r9
 800bc68:	4553      	cmp	r3, sl
 800bc6a:	dcef      	bgt.n	800bc4c <_printf_float+0x2ec>
 800bc6c:	9b06      	ldr	r3, [sp, #24]
 800bc6e:	4498      	add	r8, r3
 800bc70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc74:	429a      	cmp	r2, r3
 800bc76:	db15      	blt.n	800bca4 <_printf_float+0x344>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	07da      	lsls	r2, r3, #31
 800bc7c:	d412      	bmi.n	800bca4 <_printf_float+0x344>
 800bc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc80:	9a06      	ldr	r2, [sp, #24]
 800bc82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc84:	1a9a      	subs	r2, r3, r2
 800bc86:	eba3 0a01 	sub.w	sl, r3, r1
 800bc8a:	4592      	cmp	sl, r2
 800bc8c:	bfa8      	it	ge
 800bc8e:	4692      	movge	sl, r2
 800bc90:	f1ba 0f00 	cmp.w	sl, #0
 800bc94:	dc0e      	bgt.n	800bcb4 <_printf_float+0x354>
 800bc96:	f04f 0800 	mov.w	r8, #0
 800bc9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc9e:	f104 091a 	add.w	r9, r4, #26
 800bca2:	e019      	b.n	800bcd8 <_printf_float+0x378>
 800bca4:	9b05      	ldr	r3, [sp, #20]
 800bca6:	465a      	mov	r2, fp
 800bca8:	4631      	mov	r1, r6
 800bcaa:	4628      	mov	r0, r5
 800bcac:	47b8      	blx	r7
 800bcae:	3001      	adds	r0, #1
 800bcb0:	d1e5      	bne.n	800bc7e <_printf_float+0x31e>
 800bcb2:	e6a3      	b.n	800b9fc <_printf_float+0x9c>
 800bcb4:	4653      	mov	r3, sl
 800bcb6:	4642      	mov	r2, r8
 800bcb8:	4631      	mov	r1, r6
 800bcba:	4628      	mov	r0, r5
 800bcbc:	47b8      	blx	r7
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	d1e9      	bne.n	800bc96 <_printf_float+0x336>
 800bcc2:	e69b      	b.n	800b9fc <_printf_float+0x9c>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	464a      	mov	r2, r9
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4628      	mov	r0, r5
 800bccc:	47b8      	blx	r7
 800bcce:	3001      	adds	r0, #1
 800bcd0:	f43f ae94 	beq.w	800b9fc <_printf_float+0x9c>
 800bcd4:	f108 0801 	add.w	r8, r8, #1
 800bcd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcdc:	1a9b      	subs	r3, r3, r2
 800bcde:	eba3 030a 	sub.w	r3, r3, sl
 800bce2:	4543      	cmp	r3, r8
 800bce4:	dcee      	bgt.n	800bcc4 <_printf_float+0x364>
 800bce6:	e747      	b.n	800bb78 <_printf_float+0x218>
 800bce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcea:	2a01      	cmp	r2, #1
 800bcec:	dc01      	bgt.n	800bcf2 <_printf_float+0x392>
 800bcee:	07db      	lsls	r3, r3, #31
 800bcf0:	d539      	bpl.n	800bd66 <_printf_float+0x406>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	4642      	mov	r2, r8
 800bcf6:	4631      	mov	r1, r6
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	47b8      	blx	r7
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	f43f ae7d 	beq.w	800b9fc <_printf_float+0x9c>
 800bd02:	9b05      	ldr	r3, [sp, #20]
 800bd04:	465a      	mov	r2, fp
 800bd06:	4631      	mov	r1, r6
 800bd08:	4628      	mov	r0, r5
 800bd0a:	47b8      	blx	r7
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	f108 0801 	add.w	r8, r8, #1
 800bd12:	f43f ae73 	beq.w	800b9fc <_printf_float+0x9c>
 800bd16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd24:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd28:	d018      	beq.n	800bd5c <_printf_float+0x3fc>
 800bd2a:	4642      	mov	r2, r8
 800bd2c:	4631      	mov	r1, r6
 800bd2e:	4628      	mov	r0, r5
 800bd30:	47b8      	blx	r7
 800bd32:	3001      	adds	r0, #1
 800bd34:	d10e      	bne.n	800bd54 <_printf_float+0x3f4>
 800bd36:	e661      	b.n	800b9fc <_printf_float+0x9c>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	464a      	mov	r2, r9
 800bd3c:	4631      	mov	r1, r6
 800bd3e:	4628      	mov	r0, r5
 800bd40:	47b8      	blx	r7
 800bd42:	3001      	adds	r0, #1
 800bd44:	f43f ae5a 	beq.w	800b9fc <_printf_float+0x9c>
 800bd48:	f108 0801 	add.w	r8, r8, #1
 800bd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	4543      	cmp	r3, r8
 800bd52:	dcf1      	bgt.n	800bd38 <_printf_float+0x3d8>
 800bd54:	4653      	mov	r3, sl
 800bd56:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd5a:	e6dd      	b.n	800bb18 <_printf_float+0x1b8>
 800bd5c:	f04f 0800 	mov.w	r8, #0
 800bd60:	f104 091a 	add.w	r9, r4, #26
 800bd64:	e7f2      	b.n	800bd4c <_printf_float+0x3ec>
 800bd66:	2301      	movs	r3, #1
 800bd68:	e7df      	b.n	800bd2a <_printf_float+0x3ca>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	464a      	mov	r2, r9
 800bd6e:	4631      	mov	r1, r6
 800bd70:	4628      	mov	r0, r5
 800bd72:	47b8      	blx	r7
 800bd74:	3001      	adds	r0, #1
 800bd76:	f43f ae41 	beq.w	800b9fc <_printf_float+0x9c>
 800bd7a:	f108 0801 	add.w	r8, r8, #1
 800bd7e:	68e3      	ldr	r3, [r4, #12]
 800bd80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd82:	1a9b      	subs	r3, r3, r2
 800bd84:	4543      	cmp	r3, r8
 800bd86:	dcf0      	bgt.n	800bd6a <_printf_float+0x40a>
 800bd88:	e6fa      	b.n	800bb80 <_printf_float+0x220>
 800bd8a:	f04f 0800 	mov.w	r8, #0
 800bd8e:	f104 0919 	add.w	r9, r4, #25
 800bd92:	e7f4      	b.n	800bd7e <_printf_float+0x41e>
 800bd94:	2900      	cmp	r1, #0
 800bd96:	f43f ae8a 	beq.w	800baae <_printf_float+0x14e>
 800bd9a:	f04f 0c00 	mov.w	ip, #0
 800bd9e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800bda2:	e9cd 0900 	strd	r0, r9, [sp]
 800bda6:	6022      	str	r2, [r4, #0]
 800bda8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bdac:	4628      	mov	r0, r5
 800bdae:	f7ff fd4f 	bl	800b850 <__cvt>
 800bdb2:	4680      	mov	r8, r0
 800bdb4:	e64a      	b.n	800ba4c <_printf_float+0xec>
 800bdb6:	bf00      	nop

0800bdb8 <_printf_common>:
 800bdb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdbc:	4691      	mov	r9, r2
 800bdbe:	461f      	mov	r7, r3
 800bdc0:	688a      	ldr	r2, [r1, #8]
 800bdc2:	690b      	ldr	r3, [r1, #16]
 800bdc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	bfb8      	it	lt
 800bdcc:	4613      	movlt	r3, r2
 800bdce:	f8c9 3000 	str.w	r3, [r9]
 800bdd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460c      	mov	r4, r1
 800bdda:	b112      	cbz	r2, 800bde2 <_printf_common+0x2a>
 800bddc:	3301      	adds	r3, #1
 800bdde:	f8c9 3000 	str.w	r3, [r9]
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	0699      	lsls	r1, r3, #26
 800bde6:	bf42      	ittt	mi
 800bde8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bdec:	3302      	addmi	r3, #2
 800bdee:	f8c9 3000 	strmi.w	r3, [r9]
 800bdf2:	6825      	ldr	r5, [r4, #0]
 800bdf4:	f015 0506 	ands.w	r5, r5, #6
 800bdf8:	d107      	bne.n	800be0a <_printf_common+0x52>
 800bdfa:	f104 0a19 	add.w	sl, r4, #25
 800bdfe:	68e3      	ldr	r3, [r4, #12]
 800be00:	f8d9 2000 	ldr.w	r2, [r9]
 800be04:	1a9b      	subs	r3, r3, r2
 800be06:	42ab      	cmp	r3, r5
 800be08:	dc28      	bgt.n	800be5c <_printf_common+0xa4>
 800be0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800be0e:	6822      	ldr	r2, [r4, #0]
 800be10:	3300      	adds	r3, #0
 800be12:	bf18      	it	ne
 800be14:	2301      	movne	r3, #1
 800be16:	0692      	lsls	r2, r2, #26
 800be18:	d42d      	bmi.n	800be76 <_printf_common+0xbe>
 800be1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be1e:	4639      	mov	r1, r7
 800be20:	4630      	mov	r0, r6
 800be22:	47c0      	blx	r8
 800be24:	3001      	adds	r0, #1
 800be26:	d020      	beq.n	800be6a <_printf_common+0xb2>
 800be28:	6823      	ldr	r3, [r4, #0]
 800be2a:	68e5      	ldr	r5, [r4, #12]
 800be2c:	f8d9 2000 	ldr.w	r2, [r9]
 800be30:	f003 0306 	and.w	r3, r3, #6
 800be34:	2b04      	cmp	r3, #4
 800be36:	bf08      	it	eq
 800be38:	1aad      	subeq	r5, r5, r2
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	6922      	ldr	r2, [r4, #16]
 800be3e:	bf0c      	ite	eq
 800be40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be44:	2500      	movne	r5, #0
 800be46:	4293      	cmp	r3, r2
 800be48:	bfc4      	itt	gt
 800be4a:	1a9b      	subgt	r3, r3, r2
 800be4c:	18ed      	addgt	r5, r5, r3
 800be4e:	f04f 0900 	mov.w	r9, #0
 800be52:	341a      	adds	r4, #26
 800be54:	454d      	cmp	r5, r9
 800be56:	d11a      	bne.n	800be8e <_printf_common+0xd6>
 800be58:	2000      	movs	r0, #0
 800be5a:	e008      	b.n	800be6e <_printf_common+0xb6>
 800be5c:	2301      	movs	r3, #1
 800be5e:	4652      	mov	r2, sl
 800be60:	4639      	mov	r1, r7
 800be62:	4630      	mov	r0, r6
 800be64:	47c0      	blx	r8
 800be66:	3001      	adds	r0, #1
 800be68:	d103      	bne.n	800be72 <_printf_common+0xba>
 800be6a:	f04f 30ff 	mov.w	r0, #4294967295
 800be6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be72:	3501      	adds	r5, #1
 800be74:	e7c3      	b.n	800bdfe <_printf_common+0x46>
 800be76:	18e1      	adds	r1, r4, r3
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	2030      	movs	r0, #48	; 0x30
 800be7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be80:	4422      	add	r2, r4
 800be82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be8a:	3302      	adds	r3, #2
 800be8c:	e7c5      	b.n	800be1a <_printf_common+0x62>
 800be8e:	2301      	movs	r3, #1
 800be90:	4622      	mov	r2, r4
 800be92:	4639      	mov	r1, r7
 800be94:	4630      	mov	r0, r6
 800be96:	47c0      	blx	r8
 800be98:	3001      	adds	r0, #1
 800be9a:	d0e6      	beq.n	800be6a <_printf_common+0xb2>
 800be9c:	f109 0901 	add.w	r9, r9, #1
 800bea0:	e7d8      	b.n	800be54 <_printf_common+0x9c>
	...

0800bea4 <_printf_i>:
 800bea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bea8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800beac:	460c      	mov	r4, r1
 800beae:	7e09      	ldrb	r1, [r1, #24]
 800beb0:	b085      	sub	sp, #20
 800beb2:	296e      	cmp	r1, #110	; 0x6e
 800beb4:	4617      	mov	r7, r2
 800beb6:	4606      	mov	r6, r0
 800beb8:	4698      	mov	r8, r3
 800beba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bebc:	f000 80b3 	beq.w	800c026 <_printf_i+0x182>
 800bec0:	d822      	bhi.n	800bf08 <_printf_i+0x64>
 800bec2:	2963      	cmp	r1, #99	; 0x63
 800bec4:	d036      	beq.n	800bf34 <_printf_i+0x90>
 800bec6:	d80a      	bhi.n	800bede <_printf_i+0x3a>
 800bec8:	2900      	cmp	r1, #0
 800beca:	f000 80b9 	beq.w	800c040 <_printf_i+0x19c>
 800bece:	2958      	cmp	r1, #88	; 0x58
 800bed0:	f000 8083 	beq.w	800bfda <_printf_i+0x136>
 800bed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bed8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bedc:	e032      	b.n	800bf44 <_printf_i+0xa0>
 800bede:	2964      	cmp	r1, #100	; 0x64
 800bee0:	d001      	beq.n	800bee6 <_printf_i+0x42>
 800bee2:	2969      	cmp	r1, #105	; 0x69
 800bee4:	d1f6      	bne.n	800bed4 <_printf_i+0x30>
 800bee6:	6820      	ldr	r0, [r4, #0]
 800bee8:	6813      	ldr	r3, [r2, #0]
 800beea:	0605      	lsls	r5, r0, #24
 800beec:	f103 0104 	add.w	r1, r3, #4
 800bef0:	d52a      	bpl.n	800bf48 <_printf_i+0xa4>
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6011      	str	r1, [r2, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	da03      	bge.n	800bf02 <_printf_i+0x5e>
 800befa:	222d      	movs	r2, #45	; 0x2d
 800befc:	425b      	negs	r3, r3
 800befe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bf02:	486f      	ldr	r0, [pc, #444]	; (800c0c0 <_printf_i+0x21c>)
 800bf04:	220a      	movs	r2, #10
 800bf06:	e039      	b.n	800bf7c <_printf_i+0xd8>
 800bf08:	2973      	cmp	r1, #115	; 0x73
 800bf0a:	f000 809d 	beq.w	800c048 <_printf_i+0x1a4>
 800bf0e:	d808      	bhi.n	800bf22 <_printf_i+0x7e>
 800bf10:	296f      	cmp	r1, #111	; 0x6f
 800bf12:	d020      	beq.n	800bf56 <_printf_i+0xb2>
 800bf14:	2970      	cmp	r1, #112	; 0x70
 800bf16:	d1dd      	bne.n	800bed4 <_printf_i+0x30>
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	f043 0320 	orr.w	r3, r3, #32
 800bf1e:	6023      	str	r3, [r4, #0]
 800bf20:	e003      	b.n	800bf2a <_printf_i+0x86>
 800bf22:	2975      	cmp	r1, #117	; 0x75
 800bf24:	d017      	beq.n	800bf56 <_printf_i+0xb2>
 800bf26:	2978      	cmp	r1, #120	; 0x78
 800bf28:	d1d4      	bne.n	800bed4 <_printf_i+0x30>
 800bf2a:	2378      	movs	r3, #120	; 0x78
 800bf2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf30:	4864      	ldr	r0, [pc, #400]	; (800c0c4 <_printf_i+0x220>)
 800bf32:	e055      	b.n	800bfe0 <_printf_i+0x13c>
 800bf34:	6813      	ldr	r3, [r2, #0]
 800bf36:	1d19      	adds	r1, r3, #4
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6011      	str	r1, [r2, #0]
 800bf3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf44:	2301      	movs	r3, #1
 800bf46:	e08c      	b.n	800c062 <_printf_i+0x1be>
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6011      	str	r1, [r2, #0]
 800bf4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf50:	bf18      	it	ne
 800bf52:	b21b      	sxthne	r3, r3
 800bf54:	e7cf      	b.n	800bef6 <_printf_i+0x52>
 800bf56:	6813      	ldr	r3, [r2, #0]
 800bf58:	6825      	ldr	r5, [r4, #0]
 800bf5a:	1d18      	adds	r0, r3, #4
 800bf5c:	6010      	str	r0, [r2, #0]
 800bf5e:	0628      	lsls	r0, r5, #24
 800bf60:	d501      	bpl.n	800bf66 <_printf_i+0xc2>
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	e002      	b.n	800bf6c <_printf_i+0xc8>
 800bf66:	0668      	lsls	r0, r5, #25
 800bf68:	d5fb      	bpl.n	800bf62 <_printf_i+0xbe>
 800bf6a:	881b      	ldrh	r3, [r3, #0]
 800bf6c:	4854      	ldr	r0, [pc, #336]	; (800c0c0 <_printf_i+0x21c>)
 800bf6e:	296f      	cmp	r1, #111	; 0x6f
 800bf70:	bf14      	ite	ne
 800bf72:	220a      	movne	r2, #10
 800bf74:	2208      	moveq	r2, #8
 800bf76:	2100      	movs	r1, #0
 800bf78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf7c:	6865      	ldr	r5, [r4, #4]
 800bf7e:	60a5      	str	r5, [r4, #8]
 800bf80:	2d00      	cmp	r5, #0
 800bf82:	f2c0 8095 	blt.w	800c0b0 <_printf_i+0x20c>
 800bf86:	6821      	ldr	r1, [r4, #0]
 800bf88:	f021 0104 	bic.w	r1, r1, #4
 800bf8c:	6021      	str	r1, [r4, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d13d      	bne.n	800c00e <_printf_i+0x16a>
 800bf92:	2d00      	cmp	r5, #0
 800bf94:	f040 808e 	bne.w	800c0b4 <_printf_i+0x210>
 800bf98:	4665      	mov	r5, ip
 800bf9a:	2a08      	cmp	r2, #8
 800bf9c:	d10b      	bne.n	800bfb6 <_printf_i+0x112>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	07db      	lsls	r3, r3, #31
 800bfa2:	d508      	bpl.n	800bfb6 <_printf_i+0x112>
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	6862      	ldr	r2, [r4, #4]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	bfde      	ittt	le
 800bfac:	2330      	movle	r3, #48	; 0x30
 800bfae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfb6:	ebac 0305 	sub.w	r3, ip, r5
 800bfba:	6123      	str	r3, [r4, #16]
 800bfbc:	f8cd 8000 	str.w	r8, [sp]
 800bfc0:	463b      	mov	r3, r7
 800bfc2:	aa03      	add	r2, sp, #12
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7ff fef6 	bl	800bdb8 <_printf_common>
 800bfcc:	3001      	adds	r0, #1
 800bfce:	d14d      	bne.n	800c06c <_printf_i+0x1c8>
 800bfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd4:	b005      	add	sp, #20
 800bfd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfda:	4839      	ldr	r0, [pc, #228]	; (800c0c0 <_printf_i+0x21c>)
 800bfdc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bfe0:	6813      	ldr	r3, [r2, #0]
 800bfe2:	6821      	ldr	r1, [r4, #0]
 800bfe4:	1d1d      	adds	r5, r3, #4
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6015      	str	r5, [r2, #0]
 800bfea:	060a      	lsls	r2, r1, #24
 800bfec:	d50b      	bpl.n	800c006 <_printf_i+0x162>
 800bfee:	07ca      	lsls	r2, r1, #31
 800bff0:	bf44      	itt	mi
 800bff2:	f041 0120 	orrmi.w	r1, r1, #32
 800bff6:	6021      	strmi	r1, [r4, #0]
 800bff8:	b91b      	cbnz	r3, 800c002 <_printf_i+0x15e>
 800bffa:	6822      	ldr	r2, [r4, #0]
 800bffc:	f022 0220 	bic.w	r2, r2, #32
 800c000:	6022      	str	r2, [r4, #0]
 800c002:	2210      	movs	r2, #16
 800c004:	e7b7      	b.n	800bf76 <_printf_i+0xd2>
 800c006:	064d      	lsls	r5, r1, #25
 800c008:	bf48      	it	mi
 800c00a:	b29b      	uxthmi	r3, r3
 800c00c:	e7ef      	b.n	800bfee <_printf_i+0x14a>
 800c00e:	4665      	mov	r5, ip
 800c010:	fbb3 f1f2 	udiv	r1, r3, r2
 800c014:	fb02 3311 	mls	r3, r2, r1, r3
 800c018:	5cc3      	ldrb	r3, [r0, r3]
 800c01a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c01e:	460b      	mov	r3, r1
 800c020:	2900      	cmp	r1, #0
 800c022:	d1f5      	bne.n	800c010 <_printf_i+0x16c>
 800c024:	e7b9      	b.n	800bf9a <_printf_i+0xf6>
 800c026:	6813      	ldr	r3, [r2, #0]
 800c028:	6825      	ldr	r5, [r4, #0]
 800c02a:	6961      	ldr	r1, [r4, #20]
 800c02c:	1d18      	adds	r0, r3, #4
 800c02e:	6010      	str	r0, [r2, #0]
 800c030:	0628      	lsls	r0, r5, #24
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	d501      	bpl.n	800c03a <_printf_i+0x196>
 800c036:	6019      	str	r1, [r3, #0]
 800c038:	e002      	b.n	800c040 <_printf_i+0x19c>
 800c03a:	066a      	lsls	r2, r5, #25
 800c03c:	d5fb      	bpl.n	800c036 <_printf_i+0x192>
 800c03e:	8019      	strh	r1, [r3, #0]
 800c040:	2300      	movs	r3, #0
 800c042:	6123      	str	r3, [r4, #16]
 800c044:	4665      	mov	r5, ip
 800c046:	e7b9      	b.n	800bfbc <_printf_i+0x118>
 800c048:	6813      	ldr	r3, [r2, #0]
 800c04a:	1d19      	adds	r1, r3, #4
 800c04c:	6011      	str	r1, [r2, #0]
 800c04e:	681d      	ldr	r5, [r3, #0]
 800c050:	6862      	ldr	r2, [r4, #4]
 800c052:	2100      	movs	r1, #0
 800c054:	4628      	mov	r0, r5
 800c056:	f7f4 f9ab 	bl	80003b0 <memchr>
 800c05a:	b108      	cbz	r0, 800c060 <_printf_i+0x1bc>
 800c05c:	1b40      	subs	r0, r0, r5
 800c05e:	6060      	str	r0, [r4, #4]
 800c060:	6863      	ldr	r3, [r4, #4]
 800c062:	6123      	str	r3, [r4, #16]
 800c064:	2300      	movs	r3, #0
 800c066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c06a:	e7a7      	b.n	800bfbc <_printf_i+0x118>
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	462a      	mov	r2, r5
 800c070:	4639      	mov	r1, r7
 800c072:	4630      	mov	r0, r6
 800c074:	47c0      	blx	r8
 800c076:	3001      	adds	r0, #1
 800c078:	d0aa      	beq.n	800bfd0 <_printf_i+0x12c>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	079b      	lsls	r3, r3, #30
 800c07e:	d413      	bmi.n	800c0a8 <_printf_i+0x204>
 800c080:	68e0      	ldr	r0, [r4, #12]
 800c082:	9b03      	ldr	r3, [sp, #12]
 800c084:	4298      	cmp	r0, r3
 800c086:	bfb8      	it	lt
 800c088:	4618      	movlt	r0, r3
 800c08a:	e7a3      	b.n	800bfd4 <_printf_i+0x130>
 800c08c:	2301      	movs	r3, #1
 800c08e:	464a      	mov	r2, r9
 800c090:	4639      	mov	r1, r7
 800c092:	4630      	mov	r0, r6
 800c094:	47c0      	blx	r8
 800c096:	3001      	adds	r0, #1
 800c098:	d09a      	beq.n	800bfd0 <_printf_i+0x12c>
 800c09a:	3501      	adds	r5, #1
 800c09c:	68e3      	ldr	r3, [r4, #12]
 800c09e:	9a03      	ldr	r2, [sp, #12]
 800c0a0:	1a9b      	subs	r3, r3, r2
 800c0a2:	42ab      	cmp	r3, r5
 800c0a4:	dcf2      	bgt.n	800c08c <_printf_i+0x1e8>
 800c0a6:	e7eb      	b.n	800c080 <_printf_i+0x1dc>
 800c0a8:	2500      	movs	r5, #0
 800c0aa:	f104 0919 	add.w	r9, r4, #25
 800c0ae:	e7f5      	b.n	800c09c <_printf_i+0x1f8>
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1ac      	bne.n	800c00e <_printf_i+0x16a>
 800c0b4:	7803      	ldrb	r3, [r0, #0]
 800c0b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0be:	e76c      	b.n	800bf9a <_printf_i+0xf6>
 800c0c0:	08014e26 	.word	0x08014e26
 800c0c4:	08014e37 	.word	0x08014e37

0800c0c8 <_scanf_float>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	469a      	mov	sl, r3
 800c0ce:	688b      	ldr	r3, [r1, #8]
 800c0d0:	4616      	mov	r6, r2
 800c0d2:	1e5a      	subs	r2, r3, #1
 800c0d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c0d8:	b087      	sub	sp, #28
 800c0da:	bf83      	ittte	hi
 800c0dc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c0e0:	189b      	addhi	r3, r3, r2
 800c0e2:	9301      	strhi	r3, [sp, #4]
 800c0e4:	2300      	movls	r3, #0
 800c0e6:	bf86      	itte	hi
 800c0e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c0ec:	608b      	strhi	r3, [r1, #8]
 800c0ee:	9301      	strls	r3, [sp, #4]
 800c0f0:	680b      	ldr	r3, [r1, #0]
 800c0f2:	4688      	mov	r8, r1
 800c0f4:	f04f 0b00 	mov.w	fp, #0
 800c0f8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c0fc:	f848 3b1c 	str.w	r3, [r8], #28
 800c100:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800c104:	4607      	mov	r7, r0
 800c106:	460c      	mov	r4, r1
 800c108:	4645      	mov	r5, r8
 800c10a:	465a      	mov	r2, fp
 800c10c:	46d9      	mov	r9, fp
 800c10e:	f8cd b008 	str.w	fp, [sp, #8]
 800c112:	68a1      	ldr	r1, [r4, #8]
 800c114:	b181      	cbz	r1, 800c138 <_scanf_float+0x70>
 800c116:	6833      	ldr	r3, [r6, #0]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	2b49      	cmp	r3, #73	; 0x49
 800c11c:	d071      	beq.n	800c202 <_scanf_float+0x13a>
 800c11e:	d84d      	bhi.n	800c1bc <_scanf_float+0xf4>
 800c120:	2b39      	cmp	r3, #57	; 0x39
 800c122:	d840      	bhi.n	800c1a6 <_scanf_float+0xde>
 800c124:	2b31      	cmp	r3, #49	; 0x31
 800c126:	f080 8088 	bcs.w	800c23a <_scanf_float+0x172>
 800c12a:	2b2d      	cmp	r3, #45	; 0x2d
 800c12c:	f000 8090 	beq.w	800c250 <_scanf_float+0x188>
 800c130:	d815      	bhi.n	800c15e <_scanf_float+0x96>
 800c132:	2b2b      	cmp	r3, #43	; 0x2b
 800c134:	f000 808c 	beq.w	800c250 <_scanf_float+0x188>
 800c138:	f1b9 0f00 	cmp.w	r9, #0
 800c13c:	d003      	beq.n	800c146 <_scanf_float+0x7e>
 800c13e:	6823      	ldr	r3, [r4, #0]
 800c140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	3a01      	subs	r2, #1
 800c148:	2a01      	cmp	r2, #1
 800c14a:	f200 80ea 	bhi.w	800c322 <_scanf_float+0x25a>
 800c14e:	4545      	cmp	r5, r8
 800c150:	f200 80dc 	bhi.w	800c30c <_scanf_float+0x244>
 800c154:	2601      	movs	r6, #1
 800c156:	4630      	mov	r0, r6
 800c158:	b007      	add	sp, #28
 800c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15e:	2b2e      	cmp	r3, #46	; 0x2e
 800c160:	f000 809f 	beq.w	800c2a2 <_scanf_float+0x1da>
 800c164:	2b30      	cmp	r3, #48	; 0x30
 800c166:	d1e7      	bne.n	800c138 <_scanf_float+0x70>
 800c168:	6820      	ldr	r0, [r4, #0]
 800c16a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c16e:	d064      	beq.n	800c23a <_scanf_float+0x172>
 800c170:	9b01      	ldr	r3, [sp, #4]
 800c172:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c176:	6020      	str	r0, [r4, #0]
 800c178:	f109 0901 	add.w	r9, r9, #1
 800c17c:	b11b      	cbz	r3, 800c186 <_scanf_float+0xbe>
 800c17e:	3b01      	subs	r3, #1
 800c180:	3101      	adds	r1, #1
 800c182:	9301      	str	r3, [sp, #4]
 800c184:	60a1      	str	r1, [r4, #8]
 800c186:	68a3      	ldr	r3, [r4, #8]
 800c188:	3b01      	subs	r3, #1
 800c18a:	60a3      	str	r3, [r4, #8]
 800c18c:	6923      	ldr	r3, [r4, #16]
 800c18e:	3301      	adds	r3, #1
 800c190:	6123      	str	r3, [r4, #16]
 800c192:	6873      	ldr	r3, [r6, #4]
 800c194:	3b01      	subs	r3, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	6073      	str	r3, [r6, #4]
 800c19a:	f340 80ac 	ble.w	800c2f6 <_scanf_float+0x22e>
 800c19e:	6833      	ldr	r3, [r6, #0]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	6033      	str	r3, [r6, #0]
 800c1a4:	e7b5      	b.n	800c112 <_scanf_float+0x4a>
 800c1a6:	2b45      	cmp	r3, #69	; 0x45
 800c1a8:	f000 8085 	beq.w	800c2b6 <_scanf_float+0x1ee>
 800c1ac:	2b46      	cmp	r3, #70	; 0x46
 800c1ae:	d06a      	beq.n	800c286 <_scanf_float+0x1be>
 800c1b0:	2b41      	cmp	r3, #65	; 0x41
 800c1b2:	d1c1      	bne.n	800c138 <_scanf_float+0x70>
 800c1b4:	2a01      	cmp	r2, #1
 800c1b6:	d1bf      	bne.n	800c138 <_scanf_float+0x70>
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	e046      	b.n	800c24a <_scanf_float+0x182>
 800c1bc:	2b65      	cmp	r3, #101	; 0x65
 800c1be:	d07a      	beq.n	800c2b6 <_scanf_float+0x1ee>
 800c1c0:	d818      	bhi.n	800c1f4 <_scanf_float+0x12c>
 800c1c2:	2b54      	cmp	r3, #84	; 0x54
 800c1c4:	d066      	beq.n	800c294 <_scanf_float+0x1cc>
 800c1c6:	d811      	bhi.n	800c1ec <_scanf_float+0x124>
 800c1c8:	2b4e      	cmp	r3, #78	; 0x4e
 800c1ca:	d1b5      	bne.n	800c138 <_scanf_float+0x70>
 800c1cc:	2a00      	cmp	r2, #0
 800c1ce:	d146      	bne.n	800c25e <_scanf_float+0x196>
 800c1d0:	f1b9 0f00 	cmp.w	r9, #0
 800c1d4:	d145      	bne.n	800c262 <_scanf_float+0x19a>
 800c1d6:	6821      	ldr	r1, [r4, #0]
 800c1d8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c1dc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c1e0:	d13f      	bne.n	800c262 <_scanf_float+0x19a>
 800c1e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c1e6:	6021      	str	r1, [r4, #0]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	e02e      	b.n	800c24a <_scanf_float+0x182>
 800c1ec:	2b59      	cmp	r3, #89	; 0x59
 800c1ee:	d01e      	beq.n	800c22e <_scanf_float+0x166>
 800c1f0:	2b61      	cmp	r3, #97	; 0x61
 800c1f2:	e7de      	b.n	800c1b2 <_scanf_float+0xea>
 800c1f4:	2b6e      	cmp	r3, #110	; 0x6e
 800c1f6:	d0e9      	beq.n	800c1cc <_scanf_float+0x104>
 800c1f8:	d815      	bhi.n	800c226 <_scanf_float+0x15e>
 800c1fa:	2b66      	cmp	r3, #102	; 0x66
 800c1fc:	d043      	beq.n	800c286 <_scanf_float+0x1be>
 800c1fe:	2b69      	cmp	r3, #105	; 0x69
 800c200:	d19a      	bne.n	800c138 <_scanf_float+0x70>
 800c202:	f1bb 0f00 	cmp.w	fp, #0
 800c206:	d138      	bne.n	800c27a <_scanf_float+0x1b2>
 800c208:	f1b9 0f00 	cmp.w	r9, #0
 800c20c:	d197      	bne.n	800c13e <_scanf_float+0x76>
 800c20e:	6821      	ldr	r1, [r4, #0]
 800c210:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c214:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c218:	d195      	bne.n	800c146 <_scanf_float+0x7e>
 800c21a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c21e:	6021      	str	r1, [r4, #0]
 800c220:	f04f 0b01 	mov.w	fp, #1
 800c224:	e011      	b.n	800c24a <_scanf_float+0x182>
 800c226:	2b74      	cmp	r3, #116	; 0x74
 800c228:	d034      	beq.n	800c294 <_scanf_float+0x1cc>
 800c22a:	2b79      	cmp	r3, #121	; 0x79
 800c22c:	d184      	bne.n	800c138 <_scanf_float+0x70>
 800c22e:	f1bb 0f07 	cmp.w	fp, #7
 800c232:	d181      	bne.n	800c138 <_scanf_float+0x70>
 800c234:	f04f 0b08 	mov.w	fp, #8
 800c238:	e007      	b.n	800c24a <_scanf_float+0x182>
 800c23a:	eb12 0f0b 	cmn.w	r2, fp
 800c23e:	f47f af7b 	bne.w	800c138 <_scanf_float+0x70>
 800c242:	6821      	ldr	r1, [r4, #0]
 800c244:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800c248:	6021      	str	r1, [r4, #0]
 800c24a:	702b      	strb	r3, [r5, #0]
 800c24c:	3501      	adds	r5, #1
 800c24e:	e79a      	b.n	800c186 <_scanf_float+0xbe>
 800c250:	6821      	ldr	r1, [r4, #0]
 800c252:	0608      	lsls	r0, r1, #24
 800c254:	f57f af70 	bpl.w	800c138 <_scanf_float+0x70>
 800c258:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c25c:	e7f4      	b.n	800c248 <_scanf_float+0x180>
 800c25e:	2a02      	cmp	r2, #2
 800c260:	d047      	beq.n	800c2f2 <_scanf_float+0x22a>
 800c262:	f1bb 0f01 	cmp.w	fp, #1
 800c266:	d003      	beq.n	800c270 <_scanf_float+0x1a8>
 800c268:	f1bb 0f04 	cmp.w	fp, #4
 800c26c:	f47f af64 	bne.w	800c138 <_scanf_float+0x70>
 800c270:	f10b 0b01 	add.w	fp, fp, #1
 800c274:	fa5f fb8b 	uxtb.w	fp, fp
 800c278:	e7e7      	b.n	800c24a <_scanf_float+0x182>
 800c27a:	f1bb 0f03 	cmp.w	fp, #3
 800c27e:	d0f7      	beq.n	800c270 <_scanf_float+0x1a8>
 800c280:	f1bb 0f05 	cmp.w	fp, #5
 800c284:	e7f2      	b.n	800c26c <_scanf_float+0x1a4>
 800c286:	f1bb 0f02 	cmp.w	fp, #2
 800c28a:	f47f af55 	bne.w	800c138 <_scanf_float+0x70>
 800c28e:	f04f 0b03 	mov.w	fp, #3
 800c292:	e7da      	b.n	800c24a <_scanf_float+0x182>
 800c294:	f1bb 0f06 	cmp.w	fp, #6
 800c298:	f47f af4e 	bne.w	800c138 <_scanf_float+0x70>
 800c29c:	f04f 0b07 	mov.w	fp, #7
 800c2a0:	e7d3      	b.n	800c24a <_scanf_float+0x182>
 800c2a2:	6821      	ldr	r1, [r4, #0]
 800c2a4:	0588      	lsls	r0, r1, #22
 800c2a6:	f57f af47 	bpl.w	800c138 <_scanf_float+0x70>
 800c2aa:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800c2ae:	6021      	str	r1, [r4, #0]
 800c2b0:	f8cd 9008 	str.w	r9, [sp, #8]
 800c2b4:	e7c9      	b.n	800c24a <_scanf_float+0x182>
 800c2b6:	6821      	ldr	r1, [r4, #0]
 800c2b8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800c2bc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c2c0:	d006      	beq.n	800c2d0 <_scanf_float+0x208>
 800c2c2:	0548      	lsls	r0, r1, #21
 800c2c4:	f57f af38 	bpl.w	800c138 <_scanf_float+0x70>
 800c2c8:	f1b9 0f00 	cmp.w	r9, #0
 800c2cc:	f43f af3b 	beq.w	800c146 <_scanf_float+0x7e>
 800c2d0:	0588      	lsls	r0, r1, #22
 800c2d2:	bf58      	it	pl
 800c2d4:	9802      	ldrpl	r0, [sp, #8]
 800c2d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c2da:	bf58      	it	pl
 800c2dc:	eba9 0000 	subpl.w	r0, r9, r0
 800c2e0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800c2e4:	bf58      	it	pl
 800c2e6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800c2ea:	6021      	str	r1, [r4, #0]
 800c2ec:	f04f 0900 	mov.w	r9, #0
 800c2f0:	e7ab      	b.n	800c24a <_scanf_float+0x182>
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	e7a9      	b.n	800c24a <_scanf_float+0x182>
 800c2f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2fa:	9205      	str	r2, [sp, #20]
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	4638      	mov	r0, r7
 800c300:	4798      	blx	r3
 800c302:	9a05      	ldr	r2, [sp, #20]
 800c304:	2800      	cmp	r0, #0
 800c306:	f43f af04 	beq.w	800c112 <_scanf_float+0x4a>
 800c30a:	e715      	b.n	800c138 <_scanf_float+0x70>
 800c30c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c310:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c314:	4632      	mov	r2, r6
 800c316:	4638      	mov	r0, r7
 800c318:	4798      	blx	r3
 800c31a:	6923      	ldr	r3, [r4, #16]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	6123      	str	r3, [r4, #16]
 800c320:	e715      	b.n	800c14e <_scanf_float+0x86>
 800c322:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c326:	2b06      	cmp	r3, #6
 800c328:	d80a      	bhi.n	800c340 <_scanf_float+0x278>
 800c32a:	f1bb 0f02 	cmp.w	fp, #2
 800c32e:	d966      	bls.n	800c3fe <_scanf_float+0x336>
 800c330:	f1ab 0b03 	sub.w	fp, fp, #3
 800c334:	fa5f fb8b 	uxtb.w	fp, fp
 800c338:	eba5 0b0b 	sub.w	fp, r5, fp
 800c33c:	455d      	cmp	r5, fp
 800c33e:	d149      	bne.n	800c3d4 <_scanf_float+0x30c>
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	05da      	lsls	r2, r3, #23
 800c344:	d51f      	bpl.n	800c386 <_scanf_float+0x2be>
 800c346:	055b      	lsls	r3, r3, #21
 800c348:	d466      	bmi.n	800c418 <_scanf_float+0x350>
 800c34a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c34e:	6923      	ldr	r3, [r4, #16]
 800c350:	2965      	cmp	r1, #101	; 0x65
 800c352:	f103 33ff 	add.w	r3, r3, #4294967295
 800c356:	f105 3bff 	add.w	fp, r5, #4294967295
 800c35a:	6123      	str	r3, [r4, #16]
 800c35c:	d00d      	beq.n	800c37a <_scanf_float+0x2b2>
 800c35e:	2945      	cmp	r1, #69	; 0x45
 800c360:	d00b      	beq.n	800c37a <_scanf_float+0x2b2>
 800c362:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c366:	4632      	mov	r2, r6
 800c368:	4638      	mov	r0, r7
 800c36a:	4798      	blx	r3
 800c36c:	6923      	ldr	r3, [r4, #16]
 800c36e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800c372:	3b01      	subs	r3, #1
 800c374:	f1a5 0b02 	sub.w	fp, r5, #2
 800c378:	6123      	str	r3, [r4, #16]
 800c37a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c37e:	4632      	mov	r2, r6
 800c380:	4638      	mov	r0, r7
 800c382:	4798      	blx	r3
 800c384:	465d      	mov	r5, fp
 800c386:	6826      	ldr	r6, [r4, #0]
 800c388:	f016 0610 	ands.w	r6, r6, #16
 800c38c:	d170      	bne.n	800c470 <_scanf_float+0x3a8>
 800c38e:	702e      	strb	r6, [r5, #0]
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c39a:	d140      	bne.n	800c41e <_scanf_float+0x356>
 800c39c:	9b02      	ldr	r3, [sp, #8]
 800c39e:	eba9 0303 	sub.w	r3, r9, r3
 800c3a2:	425a      	negs	r2, r3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d147      	bne.n	800c438 <_scanf_float+0x370>
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	4641      	mov	r1, r8
 800c3ae:	f000 fe7b 	bl	800d0a8 <_strtod_r>
 800c3b2:	6820      	ldr	r0, [r4, #0]
 800c3b4:	f8da 3000 	ldr.w	r3, [sl]
 800c3b8:	f010 0f02 	tst.w	r0, #2
 800c3bc:	f103 0204 	add.w	r2, r3, #4
 800c3c0:	f8ca 2000 	str.w	r2, [sl]
 800c3c4:	d043      	beq.n	800c44e <_scanf_float+0x386>
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	ed83 0b00 	vstr	d0, [r3]
 800c3cc:	68e3      	ldr	r3, [r4, #12]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	60e3      	str	r3, [r4, #12]
 800c3d2:	e6c0      	b.n	800c156 <_scanf_float+0x8e>
 800c3d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c3dc:	4632      	mov	r2, r6
 800c3de:	4638      	mov	r0, r7
 800c3e0:	4798      	blx	r3
 800c3e2:	6923      	ldr	r3, [r4, #16]
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	6123      	str	r3, [r4, #16]
 800c3e8:	e7a8      	b.n	800c33c <_scanf_float+0x274>
 800c3ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3ee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c3f2:	4632      	mov	r2, r6
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	4798      	blx	r3
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	6123      	str	r3, [r4, #16]
 800c3fe:	4545      	cmp	r5, r8
 800c400:	d8f3      	bhi.n	800c3ea <_scanf_float+0x322>
 800c402:	e6a7      	b.n	800c154 <_scanf_float+0x8c>
 800c404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c408:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c40c:	4632      	mov	r2, r6
 800c40e:	4638      	mov	r0, r7
 800c410:	4798      	blx	r3
 800c412:	6923      	ldr	r3, [r4, #16]
 800c414:	3b01      	subs	r3, #1
 800c416:	6123      	str	r3, [r4, #16]
 800c418:	4545      	cmp	r5, r8
 800c41a:	d8f3      	bhi.n	800c404 <_scanf_float+0x33c>
 800c41c:	e69a      	b.n	800c154 <_scanf_float+0x8c>
 800c41e:	9b03      	ldr	r3, [sp, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d0c1      	beq.n	800c3a8 <_scanf_float+0x2e0>
 800c424:	9904      	ldr	r1, [sp, #16]
 800c426:	230a      	movs	r3, #10
 800c428:	4632      	mov	r2, r6
 800c42a:	3101      	adds	r1, #1
 800c42c:	4638      	mov	r0, r7
 800c42e:	f000 fec7 	bl	800d1c0 <_strtol_r>
 800c432:	9b03      	ldr	r3, [sp, #12]
 800c434:	9d04      	ldr	r5, [sp, #16]
 800c436:	1ac2      	subs	r2, r0, r3
 800c438:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c43c:	429d      	cmp	r5, r3
 800c43e:	bf28      	it	cs
 800c440:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800c444:	490b      	ldr	r1, [pc, #44]	; (800c474 <_scanf_float+0x3ac>)
 800c446:	4628      	mov	r0, r5
 800c448:	f000 f82c 	bl	800c4a4 <siprintf>
 800c44c:	e7ac      	b.n	800c3a8 <_scanf_float+0x2e0>
 800c44e:	f010 0004 	ands.w	r0, r0, #4
 800c452:	d1b8      	bne.n	800c3c6 <_scanf_float+0x2fe>
 800c454:	eeb4 0b40 	vcmp.f64	d0, d0
 800c458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45c:	681d      	ldr	r5, [r3, #0]
 800c45e:	d704      	bvc.n	800c46a <_scanf_float+0x3a2>
 800c460:	f000 f81a 	bl	800c498 <nanf>
 800c464:	ed85 0a00 	vstr	s0, [r5]
 800c468:	e7b0      	b.n	800c3cc <_scanf_float+0x304>
 800c46a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c46e:	e7f9      	b.n	800c464 <_scanf_float+0x39c>
 800c470:	2600      	movs	r6, #0
 800c472:	e670      	b.n	800c156 <_scanf_float+0x8e>
 800c474:	08014e48 	.word	0x08014e48

0800c478 <_sbrk_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4c06      	ldr	r4, [pc, #24]	; (800c494 <_sbrk_r+0x1c>)
 800c47c:	2300      	movs	r3, #0
 800c47e:	4605      	mov	r5, r0
 800c480:	4608      	mov	r0, r1
 800c482:	6023      	str	r3, [r4, #0]
 800c484:	f7f8 f868 	bl	8004558 <_sbrk>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	d102      	bne.n	800c492 <_sbrk_r+0x1a>
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	b103      	cbz	r3, 800c492 <_sbrk_r+0x1a>
 800c490:	602b      	str	r3, [r5, #0]
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	24015858 	.word	0x24015858

0800c498 <nanf>:
 800c498:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c4a0 <nanf+0x8>
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	7fc00000 	.word	0x7fc00000

0800c4a4 <siprintf>:
 800c4a4:	b40e      	push	{r1, r2, r3}
 800c4a6:	b500      	push	{lr}
 800c4a8:	b09c      	sub	sp, #112	; 0x70
 800c4aa:	ab1d      	add	r3, sp, #116	; 0x74
 800c4ac:	9002      	str	r0, [sp, #8]
 800c4ae:	9006      	str	r0, [sp, #24]
 800c4b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4b4:	4809      	ldr	r0, [pc, #36]	; (800c4dc <siprintf+0x38>)
 800c4b6:	9107      	str	r1, [sp, #28]
 800c4b8:	9104      	str	r1, [sp, #16]
 800c4ba:	4909      	ldr	r1, [pc, #36]	; (800c4e0 <siprintf+0x3c>)
 800c4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c0:	9105      	str	r1, [sp, #20]
 800c4c2:	6800      	ldr	r0, [r0, #0]
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	a902      	add	r1, sp, #8
 800c4c8:	f002 fc1c 	bl	800ed04 <_svfiprintf_r>
 800c4cc:	9b02      	ldr	r3, [sp, #8]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	701a      	strb	r2, [r3, #0]
 800c4d2:	b01c      	add	sp, #112	; 0x70
 800c4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4d8:	b003      	add	sp, #12
 800c4da:	4770      	bx	lr
 800c4dc:	24000010 	.word	0x24000010
 800c4e0:	ffff0208 	.word	0xffff0208

0800c4e4 <sulp>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	4616      	mov	r6, r2
 800c4ec:	ec45 4b10 	vmov	d0, r4, r5
 800c4f0:	f002 fa6c 	bl	800e9cc <__ulp>
 800c4f4:	b17e      	cbz	r6, 800c516 <sulp+0x32>
 800c4f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c4fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	dd09      	ble.n	800c516 <sulp+0x32>
 800c502:	051b      	lsls	r3, r3, #20
 800c504:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c508:	2000      	movs	r0, #0
 800c50a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c50e:	ec41 0b17 	vmov	d7, r0, r1
 800c512:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c516:	bd70      	pop	{r4, r5, r6, pc}

0800c518 <_strtod_l>:
 800c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	ed2d 8b0c 	vpush	{d8-d13}
 800c520:	4698      	mov	r8, r3
 800c522:	b09d      	sub	sp, #116	; 0x74
 800c524:	2300      	movs	r3, #0
 800c526:	4604      	mov	r4, r0
 800c528:	4640      	mov	r0, r8
 800c52a:	460e      	mov	r6, r1
 800c52c:	9214      	str	r2, [sp, #80]	; 0x50
 800c52e:	9318      	str	r3, [sp, #96]	; 0x60
 800c530:	f001 ff5b 	bl	800e3ea <__localeconv_l>
 800c534:	4681      	mov	r9, r0
 800c536:	6800      	ldr	r0, [r0, #0]
 800c538:	f7f3 ff32 	bl	80003a0 <strlen>
 800c53c:	f04f 0a00 	mov.w	sl, #0
 800c540:	4607      	mov	r7, r0
 800c542:	f04f 0b00 	mov.w	fp, #0
 800c546:	9617      	str	r6, [sp, #92]	; 0x5c
 800c548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c54a:	781a      	ldrb	r2, [r3, #0]
 800c54c:	2a0d      	cmp	r2, #13
 800c54e:	d834      	bhi.n	800c5ba <_strtod_l+0xa2>
 800c550:	2a09      	cmp	r2, #9
 800c552:	d238      	bcs.n	800c5c6 <_strtod_l+0xae>
 800c554:	2a00      	cmp	r2, #0
 800c556:	d040      	beq.n	800c5da <_strtod_l+0xc2>
 800c558:	2300      	movs	r3, #0
 800c55a:	930d      	str	r3, [sp, #52]	; 0x34
 800c55c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c55e:	782b      	ldrb	r3, [r5, #0]
 800c560:	2b30      	cmp	r3, #48	; 0x30
 800c562:	f040 80b3 	bne.w	800c6cc <_strtod_l+0x1b4>
 800c566:	786b      	ldrb	r3, [r5, #1]
 800c568:	2b58      	cmp	r3, #88	; 0x58
 800c56a:	d001      	beq.n	800c570 <_strtod_l+0x58>
 800c56c:	2b78      	cmp	r3, #120	; 0x78
 800c56e:	d169      	bne.n	800c644 <_strtod_l+0x12c>
 800c570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c572:	9301      	str	r3, [sp, #4]
 800c574:	ab18      	add	r3, sp, #96	; 0x60
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	f8cd 8008 	str.w	r8, [sp, #8]
 800c57c:	ab19      	add	r3, sp, #100	; 0x64
 800c57e:	4a8f      	ldr	r2, [pc, #572]	; (800c7bc <_strtod_l+0x2a4>)
 800c580:	a917      	add	r1, sp, #92	; 0x5c
 800c582:	4620      	mov	r0, r4
 800c584:	f001 fc57 	bl	800de36 <__gethex>
 800c588:	f010 0607 	ands.w	r6, r0, #7
 800c58c:	4607      	mov	r7, r0
 800c58e:	d005      	beq.n	800c59c <_strtod_l+0x84>
 800c590:	2e06      	cmp	r6, #6
 800c592:	d12c      	bne.n	800c5ee <_strtod_l+0xd6>
 800c594:	3501      	adds	r5, #1
 800c596:	2300      	movs	r3, #0
 800c598:	9517      	str	r5, [sp, #92]	; 0x5c
 800c59a:	930d      	str	r3, [sp, #52]	; 0x34
 800c59c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f040 855e 	bne.w	800d060 <_strtod_l+0xb48>
 800c5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5a6:	b1eb      	cbz	r3, 800c5e4 <_strtod_l+0xcc>
 800c5a8:	ec4b ab17 	vmov	d7, sl, fp
 800c5ac:	eeb1 0b47 	vneg.f64	d0, d7
 800c5b0:	b01d      	add	sp, #116	; 0x74
 800c5b2:	ecbd 8b0c 	vpop	{d8-d13}
 800c5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ba:	2a2b      	cmp	r2, #43	; 0x2b
 800c5bc:	d015      	beq.n	800c5ea <_strtod_l+0xd2>
 800c5be:	2a2d      	cmp	r2, #45	; 0x2d
 800c5c0:	d004      	beq.n	800c5cc <_strtod_l+0xb4>
 800c5c2:	2a20      	cmp	r2, #32
 800c5c4:	d1c8      	bne.n	800c558 <_strtod_l+0x40>
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c5ca:	e7bd      	b.n	800c548 <_strtod_l+0x30>
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	920d      	str	r2, [sp, #52]	; 0x34
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	9217      	str	r2, [sp, #92]	; 0x5c
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1c0      	bne.n	800c55c <_strtod_l+0x44>
 800c5da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5dc:	9617      	str	r6, [sp, #92]	; 0x5c
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f040 853c 	bne.w	800d05c <_strtod_l+0xb44>
 800c5e4:	ec4b ab10 	vmov	d0, sl, fp
 800c5e8:	e7e2      	b.n	800c5b0 <_strtod_l+0x98>
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	e7ef      	b.n	800c5ce <_strtod_l+0xb6>
 800c5ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c5f0:	b13a      	cbz	r2, 800c602 <_strtod_l+0xea>
 800c5f2:	2135      	movs	r1, #53	; 0x35
 800c5f4:	a81a      	add	r0, sp, #104	; 0x68
 800c5f6:	f002 fae2 	bl	800ebbe <__copybits>
 800c5fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f001 ff4d 	bl	800e49c <_Bfree>
 800c602:	3e01      	subs	r6, #1
 800c604:	2e04      	cmp	r6, #4
 800c606:	d806      	bhi.n	800c616 <_strtod_l+0xfe>
 800c608:	e8df f006 	tbb	[pc, r6]
 800c60c:	1714030a 	.word	0x1714030a
 800c610:	0a          	.byte	0x0a
 800c611:	00          	.byte	0x00
 800c612:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c616:	073b      	lsls	r3, r7, #28
 800c618:	d5c0      	bpl.n	800c59c <_strtod_l+0x84>
 800c61a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c61e:	e7bd      	b.n	800c59c <_strtod_l+0x84>
 800c620:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c624:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c626:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c62a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c62e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c632:	e7f0      	b.n	800c616 <_strtod_l+0xfe>
 800c634:	f8df b188 	ldr.w	fp, [pc, #392]	; 800c7c0 <_strtod_l+0x2a8>
 800c638:	e7ed      	b.n	800c616 <_strtod_l+0xfe>
 800c63a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c63e:	f04f 3aff 	mov.w	sl, #4294967295
 800c642:	e7e8      	b.n	800c616 <_strtod_l+0xfe>
 800c644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c646:	1c5a      	adds	r2, r3, #1
 800c648:	9217      	str	r2, [sp, #92]	; 0x5c
 800c64a:	785b      	ldrb	r3, [r3, #1]
 800c64c:	2b30      	cmp	r3, #48	; 0x30
 800c64e:	d0f9      	beq.n	800c644 <_strtod_l+0x12c>
 800c650:	2b00      	cmp	r3, #0
 800c652:	d0a3      	beq.n	800c59c <_strtod_l+0x84>
 800c654:	2301      	movs	r3, #1
 800c656:	930a      	str	r3, [sp, #40]	; 0x28
 800c658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c65a:	930c      	str	r3, [sp, #48]	; 0x30
 800c65c:	2300      	movs	r3, #0
 800c65e:	9306      	str	r3, [sp, #24]
 800c660:	9308      	str	r3, [sp, #32]
 800c662:	461d      	mov	r5, r3
 800c664:	220a      	movs	r2, #10
 800c666:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c668:	f890 8000 	ldrb.w	r8, [r0]
 800c66c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800c670:	b2d9      	uxtb	r1, r3
 800c672:	2909      	cmp	r1, #9
 800c674:	d92c      	bls.n	800c6d0 <_strtod_l+0x1b8>
 800c676:	463a      	mov	r2, r7
 800c678:	f8d9 1000 	ldr.w	r1, [r9]
 800c67c:	f002 fc3a 	bl	800eef4 <strncmp>
 800c680:	2800      	cmp	r0, #0
 800c682:	d035      	beq.n	800c6f0 <_strtod_l+0x1d8>
 800c684:	2000      	movs	r0, #0
 800c686:	4642      	mov	r2, r8
 800c688:	462b      	mov	r3, r5
 800c68a:	4601      	mov	r1, r0
 800c68c:	9004      	str	r0, [sp, #16]
 800c68e:	2a65      	cmp	r2, #101	; 0x65
 800c690:	d001      	beq.n	800c696 <_strtod_l+0x17e>
 800c692:	2a45      	cmp	r2, #69	; 0x45
 800c694:	d117      	bne.n	800c6c6 <_strtod_l+0x1ae>
 800c696:	b923      	cbnz	r3, 800c6a2 <_strtod_l+0x18a>
 800c698:	b910      	cbnz	r0, 800c6a0 <_strtod_l+0x188>
 800c69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d09c      	beq.n	800c5da <_strtod_l+0xc2>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c6a4:	1c72      	adds	r2, r6, #1
 800c6a6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6a8:	7872      	ldrb	r2, [r6, #1]
 800c6aa:	2a2b      	cmp	r2, #43	; 0x2b
 800c6ac:	f000 8082 	beq.w	800c7b4 <_strtod_l+0x29c>
 800c6b0:	2a2d      	cmp	r2, #45	; 0x2d
 800c6b2:	d079      	beq.n	800c7a8 <_strtod_l+0x290>
 800c6b4:	f04f 0e00 	mov.w	lr, #0
 800c6b8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c6bc:	f1bc 0f09 	cmp.w	ip, #9
 800c6c0:	f240 8086 	bls.w	800c7d0 <_strtod_l+0x2b8>
 800c6c4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c6c6:	f04f 0800 	mov.w	r8, #0
 800c6ca:	e0a8      	b.n	800c81e <_strtod_l+0x306>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	e7c2      	b.n	800c656 <_strtod_l+0x13e>
 800c6d0:	2d08      	cmp	r5, #8
 800c6d2:	bfd5      	itete	le
 800c6d4:	9908      	ldrle	r1, [sp, #32]
 800c6d6:	9906      	ldrgt	r1, [sp, #24]
 800c6d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c6dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c6e0:	f100 0001 	add.w	r0, r0, #1
 800c6e4:	bfd4      	ite	le
 800c6e6:	9308      	strle	r3, [sp, #32]
 800c6e8:	9306      	strgt	r3, [sp, #24]
 800c6ea:	3501      	adds	r5, #1
 800c6ec:	9017      	str	r0, [sp, #92]	; 0x5c
 800c6ee:	e7ba      	b.n	800c666 <_strtod_l+0x14e>
 800c6f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6f2:	19da      	adds	r2, r3, r7
 800c6f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6f6:	5dda      	ldrb	r2, [r3, r7]
 800c6f8:	2d00      	cmp	r5, #0
 800c6fa:	d038      	beq.n	800c76e <_strtod_l+0x256>
 800c6fc:	4601      	mov	r1, r0
 800c6fe:	462b      	mov	r3, r5
 800c700:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c704:	2f09      	cmp	r7, #9
 800c706:	d913      	bls.n	800c730 <_strtod_l+0x218>
 800c708:	2701      	movs	r7, #1
 800c70a:	9704      	str	r7, [sp, #16]
 800c70c:	e7bf      	b.n	800c68e <_strtod_l+0x176>
 800c70e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c710:	1c5a      	adds	r2, r3, #1
 800c712:	9217      	str	r2, [sp, #92]	; 0x5c
 800c714:	785a      	ldrb	r2, [r3, #1]
 800c716:	3001      	adds	r0, #1
 800c718:	2a30      	cmp	r2, #48	; 0x30
 800c71a:	d0f8      	beq.n	800c70e <_strtod_l+0x1f6>
 800c71c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c720:	2b08      	cmp	r3, #8
 800c722:	f200 84a2 	bhi.w	800d06a <_strtod_l+0xb52>
 800c726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c728:	930c      	str	r3, [sp, #48]	; 0x30
 800c72a:	4601      	mov	r1, r0
 800c72c:	2000      	movs	r0, #0
 800c72e:	4603      	mov	r3, r0
 800c730:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800c734:	f100 0701 	add.w	r7, r0, #1
 800c738:	d013      	beq.n	800c762 <_strtod_l+0x24a>
 800c73a:	4439      	add	r1, r7
 800c73c:	eb00 0e03 	add.w	lr, r0, r3
 800c740:	461f      	mov	r7, r3
 800c742:	f04f 0c0a 	mov.w	ip, #10
 800c746:	45be      	cmp	lr, r7
 800c748:	d113      	bne.n	800c772 <_strtod_l+0x25a>
 800c74a:	181f      	adds	r7, r3, r0
 800c74c:	2f08      	cmp	r7, #8
 800c74e:	f103 0301 	add.w	r3, r3, #1
 800c752:	4403      	add	r3, r0
 800c754:	dc1d      	bgt.n	800c792 <_strtod_l+0x27a>
 800c756:	9a08      	ldr	r2, [sp, #32]
 800c758:	200a      	movs	r0, #10
 800c75a:	fb00 8202 	mla	r2, r0, r2, r8
 800c75e:	9208      	str	r2, [sp, #32]
 800c760:	2700      	movs	r7, #0
 800c762:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c764:	1c50      	adds	r0, r2, #1
 800c766:	9017      	str	r0, [sp, #92]	; 0x5c
 800c768:	7852      	ldrb	r2, [r2, #1]
 800c76a:	4638      	mov	r0, r7
 800c76c:	e7c8      	b.n	800c700 <_strtod_l+0x1e8>
 800c76e:	4628      	mov	r0, r5
 800c770:	e7d2      	b.n	800c718 <_strtod_l+0x200>
 800c772:	2f08      	cmp	r7, #8
 800c774:	f107 0701 	add.w	r7, r7, #1
 800c778:	dc04      	bgt.n	800c784 <_strtod_l+0x26c>
 800c77a:	9a08      	ldr	r2, [sp, #32]
 800c77c:	fb0c f202 	mul.w	r2, ip, r2
 800c780:	9208      	str	r2, [sp, #32]
 800c782:	e7e0      	b.n	800c746 <_strtod_l+0x22e>
 800c784:	2f10      	cmp	r7, #16
 800c786:	bfde      	ittt	le
 800c788:	9a06      	ldrle	r2, [sp, #24]
 800c78a:	fb0c f202 	mulle.w	r2, ip, r2
 800c78e:	9206      	strle	r2, [sp, #24]
 800c790:	e7d9      	b.n	800c746 <_strtod_l+0x22e>
 800c792:	2b10      	cmp	r3, #16
 800c794:	bfdf      	itttt	le
 800c796:	9a06      	ldrle	r2, [sp, #24]
 800c798:	200a      	movle	r0, #10
 800c79a:	fb00 8202 	mlale	r2, r0, r2, r8
 800c79e:	9206      	strle	r2, [sp, #24]
 800c7a0:	e7de      	b.n	800c760 <_strtod_l+0x248>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	e777      	b.n	800c698 <_strtod_l+0x180>
 800c7a8:	f04f 0e01 	mov.w	lr, #1
 800c7ac:	1cb2      	adds	r2, r6, #2
 800c7ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7b0:	78b2      	ldrb	r2, [r6, #2]
 800c7b2:	e781      	b.n	800c6b8 <_strtod_l+0x1a0>
 800c7b4:	f04f 0e00 	mov.w	lr, #0
 800c7b8:	e7f8      	b.n	800c7ac <_strtod_l+0x294>
 800c7ba:	bf00      	nop
 800c7bc:	08014e50 	.word	0x08014e50
 800c7c0:	7ff00000 	.word	0x7ff00000
 800c7c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7c6:	f102 0c01 	add.w	ip, r2, #1
 800c7ca:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800c7ce:	7852      	ldrb	r2, [r2, #1]
 800c7d0:	2a30      	cmp	r2, #48	; 0x30
 800c7d2:	d0f7      	beq.n	800c7c4 <_strtod_l+0x2ac>
 800c7d4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800c7d8:	f1bc 0f08 	cmp.w	ip, #8
 800c7dc:	f63f af73 	bhi.w	800c6c6 <_strtod_l+0x1ae>
 800c7e0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800c7e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7e6:	920e      	str	r2, [sp, #56]	; 0x38
 800c7e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7ea:	f102 0c01 	add.w	ip, r2, #1
 800c7ee:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800c7f2:	7852      	ldrb	r2, [r2, #1]
 800c7f4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800c7f8:	f1b9 0f09 	cmp.w	r9, #9
 800c7fc:	d939      	bls.n	800c872 <_strtod_l+0x35a>
 800c7fe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800c800:	ebac 0c07 	sub.w	ip, ip, r7
 800c804:	f1bc 0f08 	cmp.w	ip, #8
 800c808:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800c80c:	dc37      	bgt.n	800c87e <_strtod_l+0x366>
 800c80e:	45e0      	cmp	r8, ip
 800c810:	bfa8      	it	ge
 800c812:	46e0      	movge	r8, ip
 800c814:	f1be 0f00 	cmp.w	lr, #0
 800c818:	d001      	beq.n	800c81e <_strtod_l+0x306>
 800c81a:	f1c8 0800 	rsb	r8, r8, #0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d151      	bne.n	800c8c6 <_strtod_l+0x3ae>
 800c822:	2800      	cmp	r0, #0
 800c824:	f47f aeba 	bne.w	800c59c <_strtod_l+0x84>
 800c828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f47f aeb6 	bne.w	800c59c <_strtod_l+0x84>
 800c830:	9b04      	ldr	r3, [sp, #16]
 800c832:	2b00      	cmp	r3, #0
 800c834:	f47f aed1 	bne.w	800c5da <_strtod_l+0xc2>
 800c838:	2a4e      	cmp	r2, #78	; 0x4e
 800c83a:	d027      	beq.n	800c88c <_strtod_l+0x374>
 800c83c:	dc21      	bgt.n	800c882 <_strtod_l+0x36a>
 800c83e:	2a49      	cmp	r2, #73	; 0x49
 800c840:	f47f aecb 	bne.w	800c5da <_strtod_l+0xc2>
 800c844:	499a      	ldr	r1, [pc, #616]	; (800cab0 <_strtod_l+0x598>)
 800c846:	a817      	add	r0, sp, #92	; 0x5c
 800c848:	f001 fd28 	bl	800e29c <__match>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	f43f aec4 	beq.w	800c5da <_strtod_l+0xc2>
 800c852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c854:	4997      	ldr	r1, [pc, #604]	; (800cab4 <_strtod_l+0x59c>)
 800c856:	3b01      	subs	r3, #1
 800c858:	a817      	add	r0, sp, #92	; 0x5c
 800c85a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c85c:	f001 fd1e 	bl	800e29c <__match>
 800c860:	b910      	cbnz	r0, 800c868 <_strtod_l+0x350>
 800c862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c864:	3301      	adds	r3, #1
 800c866:	9317      	str	r3, [sp, #92]	; 0x5c
 800c868:	f8df b260 	ldr.w	fp, [pc, #608]	; 800cacc <_strtod_l+0x5b4>
 800c86c:	f04f 0a00 	mov.w	sl, #0
 800c870:	e694      	b.n	800c59c <_strtod_l+0x84>
 800c872:	270a      	movs	r7, #10
 800c874:	fb07 2808 	mla	r8, r7, r8, r2
 800c878:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800c87c:	e7b4      	b.n	800c7e8 <_strtod_l+0x2d0>
 800c87e:	46e0      	mov	r8, ip
 800c880:	e7c8      	b.n	800c814 <_strtod_l+0x2fc>
 800c882:	2a69      	cmp	r2, #105	; 0x69
 800c884:	d0de      	beq.n	800c844 <_strtod_l+0x32c>
 800c886:	2a6e      	cmp	r2, #110	; 0x6e
 800c888:	f47f aea7 	bne.w	800c5da <_strtod_l+0xc2>
 800c88c:	498a      	ldr	r1, [pc, #552]	; (800cab8 <_strtod_l+0x5a0>)
 800c88e:	a817      	add	r0, sp, #92	; 0x5c
 800c890:	f001 fd04 	bl	800e29c <__match>
 800c894:	2800      	cmp	r0, #0
 800c896:	f43f aea0 	beq.w	800c5da <_strtod_l+0xc2>
 800c89a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	2b28      	cmp	r3, #40	; 0x28
 800c8a0:	d10e      	bne.n	800c8c0 <_strtod_l+0x3a8>
 800c8a2:	aa1a      	add	r2, sp, #104	; 0x68
 800c8a4:	4985      	ldr	r1, [pc, #532]	; (800cabc <_strtod_l+0x5a4>)
 800c8a6:	a817      	add	r0, sp, #92	; 0x5c
 800c8a8:	f001 fd0c 	bl	800e2c4 <__hexnan>
 800c8ac:	2805      	cmp	r0, #5
 800c8ae:	d107      	bne.n	800c8c0 <_strtod_l+0x3a8>
 800c8b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8b2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c8b6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c8ba:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c8be:	e66d      	b.n	800c59c <_strtod_l+0x84>
 800c8c0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800cad0 <_strtod_l+0x5b8>
 800c8c4:	e7d2      	b.n	800c86c <_strtod_l+0x354>
 800c8c6:	eddd 7a08 	vldr	s15, [sp, #32]
 800c8ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c8ce:	eba8 0201 	sub.w	r2, r8, r1
 800c8d2:	2d00      	cmp	r5, #0
 800c8d4:	bf08      	it	eq
 800c8d6:	461d      	moveq	r5, r3
 800c8d8:	2b10      	cmp	r3, #16
 800c8da:	9204      	str	r2, [sp, #16]
 800c8dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	bfa8      	it	ge
 800c8e4:	2210      	movge	r2, #16
 800c8e6:	2b09      	cmp	r3, #9
 800c8e8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c8ec:	dc14      	bgt.n	800c918 <_strtod_l+0x400>
 800c8ee:	9904      	ldr	r1, [sp, #16]
 800c8f0:	2900      	cmp	r1, #0
 800c8f2:	f43f ae53 	beq.w	800c59c <_strtod_l+0x84>
 800c8f6:	9904      	ldr	r1, [sp, #16]
 800c8f8:	dd72      	ble.n	800c9e0 <_strtod_l+0x4c8>
 800c8fa:	2916      	cmp	r1, #22
 800c8fc:	dc5a      	bgt.n	800c9b4 <_strtod_l+0x49c>
 800c8fe:	4970      	ldr	r1, [pc, #448]	; (800cac0 <_strtod_l+0x5a8>)
 800c900:	9b04      	ldr	r3, [sp, #16]
 800c902:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c906:	ed91 7b00 	vldr	d7, [r1]
 800c90a:	ec4b ab16 	vmov	d6, sl, fp
 800c90e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c912:	ec5b ab17 	vmov	sl, fp, d7
 800c916:	e641      	b.n	800c59c <_strtod_l+0x84>
 800c918:	4969      	ldr	r1, [pc, #420]	; (800cac0 <_strtod_l+0x5a8>)
 800c91a:	eddd 7a06 	vldr	s15, [sp, #24]
 800c91e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c922:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800c926:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800c92a:	2b0f      	cmp	r3, #15
 800c92c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c930:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c934:	ec5b ab17 	vmov	sl, fp, d7
 800c938:	ddd9      	ble.n	800c8ee <_strtod_l+0x3d6>
 800c93a:	9904      	ldr	r1, [sp, #16]
 800c93c:	1a9a      	subs	r2, r3, r2
 800c93e:	440a      	add	r2, r1
 800c940:	2a00      	cmp	r2, #0
 800c942:	f340 8096 	ble.w	800ca72 <_strtod_l+0x55a>
 800c946:	f012 000f 	ands.w	r0, r2, #15
 800c94a:	d00a      	beq.n	800c962 <_strtod_l+0x44a>
 800c94c:	495c      	ldr	r1, [pc, #368]	; (800cac0 <_strtod_l+0x5a8>)
 800c94e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c952:	ed91 7b00 	vldr	d7, [r1]
 800c956:	ec4b ab16 	vmov	d6, sl, fp
 800c95a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c95e:	ec5b ab17 	vmov	sl, fp, d7
 800c962:	f032 020f 	bics.w	r2, r2, #15
 800c966:	d072      	beq.n	800ca4e <_strtod_l+0x536>
 800c968:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c96c:	dd45      	ble.n	800c9fa <_strtod_l+0x4e2>
 800c96e:	2500      	movs	r5, #0
 800c970:	46a8      	mov	r8, r5
 800c972:	9506      	str	r5, [sp, #24]
 800c974:	46a9      	mov	r9, r5
 800c976:	2322      	movs	r3, #34	; 0x22
 800c978:	f8df b150 	ldr.w	fp, [pc, #336]	; 800cacc <_strtod_l+0x5b4>
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	f04f 0a00 	mov.w	sl, #0
 800c982:	9b06      	ldr	r3, [sp, #24]
 800c984:	2b00      	cmp	r3, #0
 800c986:	f43f ae09 	beq.w	800c59c <_strtod_l+0x84>
 800c98a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c98c:	4620      	mov	r0, r4
 800c98e:	f001 fd85 	bl	800e49c <_Bfree>
 800c992:	4649      	mov	r1, r9
 800c994:	4620      	mov	r0, r4
 800c996:	f001 fd81 	bl	800e49c <_Bfree>
 800c99a:	4641      	mov	r1, r8
 800c99c:	4620      	mov	r0, r4
 800c99e:	f001 fd7d 	bl	800e49c <_Bfree>
 800c9a2:	9906      	ldr	r1, [sp, #24]
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f001 fd79 	bl	800e49c <_Bfree>
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f001 fd75 	bl	800e49c <_Bfree>
 800c9b2:	e5f3      	b.n	800c59c <_strtod_l+0x84>
 800c9b4:	9804      	ldr	r0, [sp, #16]
 800c9b6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c9ba:	4281      	cmp	r1, r0
 800c9bc:	dbbd      	blt.n	800c93a <_strtod_l+0x422>
 800c9be:	4a40      	ldr	r2, [pc, #256]	; (800cac0 <_strtod_l+0x5a8>)
 800c9c0:	f1c3 030f 	rsb	r3, r3, #15
 800c9c4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c9c8:	ed91 7b00 	vldr	d7, [r1]
 800c9cc:	ec4b ab16 	vmov	d6, sl, fp
 800c9d0:	1ac3      	subs	r3, r0, r3
 800c9d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c9d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c9da:	ed92 6b00 	vldr	d6, [r2]
 800c9de:	e796      	b.n	800c90e <_strtod_l+0x3f6>
 800c9e0:	3116      	adds	r1, #22
 800c9e2:	dbaa      	blt.n	800c93a <_strtod_l+0x422>
 800c9e4:	4936      	ldr	r1, [pc, #216]	; (800cac0 <_strtod_l+0x5a8>)
 800c9e6:	9b04      	ldr	r3, [sp, #16]
 800c9e8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800c9ec:	ed91 7b00 	vldr	d7, [r1]
 800c9f0:	ec4b ab16 	vmov	d6, sl, fp
 800c9f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c9f8:	e78b      	b.n	800c912 <_strtod_l+0x3fa>
 800c9fa:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800c9fe:	2000      	movs	r0, #0
 800ca00:	4e30      	ldr	r6, [pc, #192]	; (800cac4 <_strtod_l+0x5ac>)
 800ca02:	1112      	asrs	r2, r2, #4
 800ca04:	4601      	mov	r1, r0
 800ca06:	2a01      	cmp	r2, #1
 800ca08:	dc23      	bgt.n	800ca52 <_strtod_l+0x53a>
 800ca0a:	b108      	cbz	r0, 800ca10 <_strtod_l+0x4f8>
 800ca0c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800ca10:	4a2c      	ldr	r2, [pc, #176]	; (800cac4 <_strtod_l+0x5ac>)
 800ca12:	482d      	ldr	r0, [pc, #180]	; (800cac8 <_strtod_l+0x5b0>)
 800ca14:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800ca18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ca1c:	ed91 7b00 	vldr	d7, [r1]
 800ca20:	ec4b ab16 	vmov	d6, sl, fp
 800ca24:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca28:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca2c:	9907      	ldr	r1, [sp, #28]
 800ca2e:	4a27      	ldr	r2, [pc, #156]	; (800cacc <_strtod_l+0x5b4>)
 800ca30:	400a      	ands	r2, r1
 800ca32:	4282      	cmp	r2, r0
 800ca34:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800ca38:	d899      	bhi.n	800c96e <_strtod_l+0x456>
 800ca3a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800ca3e:	4282      	cmp	r2, r0
 800ca40:	bf86      	itte	hi
 800ca42:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800cad4 <_strtod_l+0x5bc>
 800ca46:	f04f 3aff 	movhi.w	sl, #4294967295
 800ca4a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800ca4e:	2700      	movs	r7, #0
 800ca50:	e070      	b.n	800cb34 <_strtod_l+0x61c>
 800ca52:	07d7      	lsls	r7, r2, #31
 800ca54:	d50a      	bpl.n	800ca6c <_strtod_l+0x554>
 800ca56:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800ca5a:	ed90 7b00 	vldr	d7, [r0]
 800ca5e:	ed9d 6b06 	vldr	d6, [sp, #24]
 800ca62:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ca66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca6a:	2001      	movs	r0, #1
 800ca6c:	3101      	adds	r1, #1
 800ca6e:	1052      	asrs	r2, r2, #1
 800ca70:	e7c9      	b.n	800ca06 <_strtod_l+0x4ee>
 800ca72:	d0ec      	beq.n	800ca4e <_strtod_l+0x536>
 800ca74:	4252      	negs	r2, r2
 800ca76:	f012 000f 	ands.w	r0, r2, #15
 800ca7a:	d00a      	beq.n	800ca92 <_strtod_l+0x57a>
 800ca7c:	4910      	ldr	r1, [pc, #64]	; (800cac0 <_strtod_l+0x5a8>)
 800ca7e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ca82:	ed91 7b00 	vldr	d7, [r1]
 800ca86:	ec4b ab16 	vmov	d6, sl, fp
 800ca8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ca8e:	ec5b ab17 	vmov	sl, fp, d7
 800ca92:	1112      	asrs	r2, r2, #4
 800ca94:	d0db      	beq.n	800ca4e <_strtod_l+0x536>
 800ca96:	2a1f      	cmp	r2, #31
 800ca98:	dd1e      	ble.n	800cad8 <_strtod_l+0x5c0>
 800ca9a:	2500      	movs	r5, #0
 800ca9c:	46a8      	mov	r8, r5
 800ca9e:	9506      	str	r5, [sp, #24]
 800caa0:	46a9      	mov	r9, r5
 800caa2:	2322      	movs	r3, #34	; 0x22
 800caa4:	f04f 0a00 	mov.w	sl, #0
 800caa8:	f04f 0b00 	mov.w	fp, #0
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	e768      	b.n	800c982 <_strtod_l+0x46a>
 800cab0:	08014e19 	.word	0x08014e19
 800cab4:	08014ea3 	.word	0x08014ea3
 800cab8:	08014e21 	.word	0x08014e21
 800cabc:	08014e64 	.word	0x08014e64
 800cac0:	08014ee0 	.word	0x08014ee0
 800cac4:	08014eb8 	.word	0x08014eb8
 800cac8:	7ca00000 	.word	0x7ca00000
 800cacc:	7ff00000 	.word	0x7ff00000
 800cad0:	fff80000 	.word	0xfff80000
 800cad4:	7fefffff 	.word	0x7fefffff
 800cad8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800cadc:	f012 0710 	ands.w	r7, r2, #16
 800cae0:	49ab      	ldr	r1, [pc, #684]	; (800cd90 <_strtod_l+0x878>)
 800cae2:	bf18      	it	ne
 800cae4:	276a      	movne	r7, #106	; 0x6a
 800cae6:	2000      	movs	r0, #0
 800cae8:	2a00      	cmp	r2, #0
 800caea:	f300 8113 	bgt.w	800cd14 <_strtod_l+0x7fc>
 800caee:	b108      	cbz	r0, 800caf4 <_strtod_l+0x5dc>
 800caf0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800caf4:	b1bf      	cbz	r7, 800cb26 <_strtod_l+0x60e>
 800caf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cafa:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800cafe:	2a00      	cmp	r2, #0
 800cb00:	4659      	mov	r1, fp
 800cb02:	dd10      	ble.n	800cb26 <_strtod_l+0x60e>
 800cb04:	2a1f      	cmp	r2, #31
 800cb06:	f340 8113 	ble.w	800cd30 <_strtod_l+0x818>
 800cb0a:	2a34      	cmp	r2, #52	; 0x34
 800cb0c:	bfde      	ittt	le
 800cb0e:	3a20      	suble	r2, #32
 800cb10:	f04f 30ff 	movle.w	r0, #4294967295
 800cb14:	fa00 f202 	lslle.w	r2, r0, r2
 800cb18:	f04f 0a00 	mov.w	sl, #0
 800cb1c:	bfcc      	ite	gt
 800cb1e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cb22:	ea02 0b01 	andle.w	fp, r2, r1
 800cb26:	ec4b ab17 	vmov	d7, sl, fp
 800cb2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb32:	d0b2      	beq.n	800ca9a <_strtod_l+0x582>
 800cb34:	9a08      	ldr	r2, [sp, #32]
 800cb36:	9200      	str	r2, [sp, #0]
 800cb38:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb3a:	462a      	mov	r2, r5
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f001 fcff 	bl	800e540 <__s2b>
 800cb42:	9006      	str	r0, [sp, #24]
 800cb44:	2800      	cmp	r0, #0
 800cb46:	f43f af12 	beq.w	800c96e <_strtod_l+0x456>
 800cb4a:	9a04      	ldr	r2, [sp, #16]
 800cb4c:	9b04      	ldr	r3, [sp, #16]
 800cb4e:	2a00      	cmp	r2, #0
 800cb50:	f1c3 0300 	rsb	r3, r3, #0
 800cb54:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800cd78 <_strtod_l+0x860>
 800cb58:	bfa8      	it	ge
 800cb5a:	2300      	movge	r3, #0
 800cb5c:	ed9f ab88 	vldr	d10, [pc, #544]	; 800cd80 <_strtod_l+0x868>
 800cb60:	ed9f bb89 	vldr	d11, [pc, #548]	; 800cd88 <_strtod_l+0x870>
 800cb64:	930e      	str	r3, [sp, #56]	; 0x38
 800cb66:	2500      	movs	r5, #0
 800cb68:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cb6c:	9310      	str	r3, [sp, #64]	; 0x40
 800cb6e:	46a8      	mov	r8, r5
 800cb70:	9b06      	ldr	r3, [sp, #24]
 800cb72:	4620      	mov	r0, r4
 800cb74:	6859      	ldr	r1, [r3, #4]
 800cb76:	f001 fc5d 	bl	800e434 <_Balloc>
 800cb7a:	4681      	mov	r9, r0
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	f43f aefa 	beq.w	800c976 <_strtod_l+0x45e>
 800cb82:	9b06      	ldr	r3, [sp, #24]
 800cb84:	691a      	ldr	r2, [r3, #16]
 800cb86:	3202      	adds	r2, #2
 800cb88:	f103 010c 	add.w	r1, r3, #12
 800cb8c:	0092      	lsls	r2, r2, #2
 800cb8e:	300c      	adds	r0, #12
 800cb90:	f7fe fda2 	bl	800b6d8 <memcpy>
 800cb94:	aa1a      	add	r2, sp, #104	; 0x68
 800cb96:	a919      	add	r1, sp, #100	; 0x64
 800cb98:	ec4b ab10 	vmov	d0, sl, fp
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800cba2:	f001 ff89 	bl	800eab8 <__d2b>
 800cba6:	9018      	str	r0, [sp, #96]	; 0x60
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	f43f aee4 	beq.w	800c976 <_strtod_l+0x45e>
 800cbae:	2101      	movs	r1, #1
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f001 fd51 	bl	800e658 <__i2b>
 800cbb6:	4680      	mov	r8, r0
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	f43f aedc 	beq.w	800c976 <_strtod_l+0x45e>
 800cbbe:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800cbc0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cbc2:	2e00      	cmp	r6, #0
 800cbc4:	bfb1      	iteee	lt
 800cbc6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800cbc8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800cbca:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800cbcc:	18f3      	addge	r3, r6, r3
 800cbce:	bfba      	itte	lt
 800cbd0:	1b98      	sublt	r0, r3, r6
 800cbd2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cbd4:	9308      	strge	r3, [sp, #32]
 800cbd6:	eba6 0607 	sub.w	r6, r6, r7
 800cbda:	bfb8      	it	lt
 800cbdc:	9308      	strlt	r3, [sp, #32]
 800cbde:	4416      	add	r6, r2
 800cbe0:	4b6c      	ldr	r3, [pc, #432]	; (800cd94 <_strtod_l+0x87c>)
 800cbe2:	3e01      	subs	r6, #1
 800cbe4:	429e      	cmp	r6, r3
 800cbe6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cbea:	f280 80b4 	bge.w	800cd56 <_strtod_l+0x83e>
 800cbee:	1b9b      	subs	r3, r3, r6
 800cbf0:	2b1f      	cmp	r3, #31
 800cbf2:	eba2 0203 	sub.w	r2, r2, r3
 800cbf6:	f04f 0101 	mov.w	r1, #1
 800cbfa:	f300 80a0 	bgt.w	800cd3e <_strtod_l+0x826>
 800cbfe:	fa01 f303 	lsl.w	r3, r1, r3
 800cc02:	9311      	str	r3, [sp, #68]	; 0x44
 800cc04:	2300      	movs	r3, #0
 800cc06:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc08:	9b08      	ldr	r3, [sp, #32]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	4402      	add	r2, r0
 800cc0e:	18be      	adds	r6, r7, r2
 800cc10:	9a08      	ldr	r2, [sp, #32]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	bfa8      	it	ge
 800cc16:	461a      	movge	r2, r3
 800cc18:	42b2      	cmp	r2, r6
 800cc1a:	bfa8      	it	ge
 800cc1c:	4632      	movge	r2, r6
 800cc1e:	2a00      	cmp	r2, #0
 800cc20:	dd04      	ble.n	800cc2c <_strtod_l+0x714>
 800cc22:	9908      	ldr	r1, [sp, #32]
 800cc24:	1a9b      	subs	r3, r3, r2
 800cc26:	1ab6      	subs	r6, r6, r2
 800cc28:	1a8a      	subs	r2, r1, r2
 800cc2a:	9208      	str	r2, [sp, #32]
 800cc2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc2e:	b1c2      	cbz	r2, 800cc62 <_strtod_l+0x74a>
 800cc30:	4641      	mov	r1, r8
 800cc32:	4620      	mov	r0, r4
 800cc34:	9315      	str	r3, [sp, #84]	; 0x54
 800cc36:	f001 fdaf 	bl	800e798 <__pow5mult>
 800cc3a:	4680      	mov	r8, r0
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	f43f ae9a 	beq.w	800c976 <_strtod_l+0x45e>
 800cc42:	4601      	mov	r1, r0
 800cc44:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc46:	4620      	mov	r0, r4
 800cc48:	f001 fd0f 	bl	800e66a <__multiply>
 800cc4c:	900c      	str	r0, [sp, #48]	; 0x30
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	f43f ae91 	beq.w	800c976 <_strtod_l+0x45e>
 800cc54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc56:	4620      	mov	r0, r4
 800cc58:	f001 fc20 	bl	800e49c <_Bfree>
 800cc5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc60:	9218      	str	r2, [sp, #96]	; 0x60
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	dc7c      	bgt.n	800cd60 <_strtod_l+0x848>
 800cc66:	9b04      	ldr	r3, [sp, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	dd08      	ble.n	800cc7e <_strtod_l+0x766>
 800cc6c:	4649      	mov	r1, r9
 800cc6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc70:	4620      	mov	r0, r4
 800cc72:	f001 fd91 	bl	800e798 <__pow5mult>
 800cc76:	4681      	mov	r9, r0
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	f43f ae7c 	beq.w	800c976 <_strtod_l+0x45e>
 800cc7e:	2e00      	cmp	r6, #0
 800cc80:	dd08      	ble.n	800cc94 <_strtod_l+0x77c>
 800cc82:	4649      	mov	r1, r9
 800cc84:	4632      	mov	r2, r6
 800cc86:	4620      	mov	r0, r4
 800cc88:	f001 fdd4 	bl	800e834 <__lshift>
 800cc8c:	4681      	mov	r9, r0
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	f43f ae71 	beq.w	800c976 <_strtod_l+0x45e>
 800cc94:	9b08      	ldr	r3, [sp, #32]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	dd08      	ble.n	800ccac <_strtod_l+0x794>
 800cc9a:	4641      	mov	r1, r8
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f001 fdc8 	bl	800e834 <__lshift>
 800cca4:	4680      	mov	r8, r0
 800cca6:	2800      	cmp	r0, #0
 800cca8:	f43f ae65 	beq.w	800c976 <_strtod_l+0x45e>
 800ccac:	464a      	mov	r2, r9
 800ccae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f001 fe2d 	bl	800e910 <__mdiff>
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	f43f ae5c 	beq.w	800c976 <_strtod_l+0x45e>
 800ccbe:	68c3      	ldr	r3, [r0, #12]
 800ccc0:	930c      	str	r3, [sp, #48]	; 0x30
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60c3      	str	r3, [r0, #12]
 800ccc6:	4641      	mov	r1, r8
 800ccc8:	f001 fe08 	bl	800e8dc <__mcmp>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	da63      	bge.n	800cd98 <_strtod_l+0x880>
 800ccd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccd2:	b9e3      	cbnz	r3, 800cd0e <_strtod_l+0x7f6>
 800ccd4:	f1ba 0f00 	cmp.w	sl, #0
 800ccd8:	d119      	bne.n	800cd0e <_strtod_l+0x7f6>
 800ccda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccde:	b9b3      	cbnz	r3, 800cd0e <_strtod_l+0x7f6>
 800cce0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cce4:	0d1b      	lsrs	r3, r3, #20
 800cce6:	051b      	lsls	r3, r3, #20
 800cce8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ccec:	d90f      	bls.n	800cd0e <_strtod_l+0x7f6>
 800ccee:	696b      	ldr	r3, [r5, #20]
 800ccf0:	b913      	cbnz	r3, 800ccf8 <_strtod_l+0x7e0>
 800ccf2:	692b      	ldr	r3, [r5, #16]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	dd0a      	ble.n	800cd0e <_strtod_l+0x7f6>
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f001 fd99 	bl	800e834 <__lshift>
 800cd02:	4641      	mov	r1, r8
 800cd04:	4605      	mov	r5, r0
 800cd06:	f001 fde9 	bl	800e8dc <__mcmp>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	dc75      	bgt.n	800cdfa <_strtod_l+0x8e2>
 800cd0e:	2f00      	cmp	r7, #0
 800cd10:	d17f      	bne.n	800ce12 <_strtod_l+0x8fa>
 800cd12:	e63a      	b.n	800c98a <_strtod_l+0x472>
 800cd14:	07d6      	lsls	r6, r2, #31
 800cd16:	d508      	bpl.n	800cd2a <_strtod_l+0x812>
 800cd18:	ed9d 6b06 	vldr	d6, [sp, #24]
 800cd1c:	ed91 7b00 	vldr	d7, [r1]
 800cd20:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cd24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd28:	2001      	movs	r0, #1
 800cd2a:	1052      	asrs	r2, r2, #1
 800cd2c:	3108      	adds	r1, #8
 800cd2e:	e6db      	b.n	800cae8 <_strtod_l+0x5d0>
 800cd30:	f04f 31ff 	mov.w	r1, #4294967295
 800cd34:	fa01 f202 	lsl.w	r2, r1, r2
 800cd38:	ea02 0a0a 	and.w	sl, r2, sl
 800cd3c:	e6f3      	b.n	800cb26 <_strtod_l+0x60e>
 800cd3e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800cd42:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800cd46:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800cd4a:	36e2      	adds	r6, #226	; 0xe2
 800cd4c:	fa01 f306 	lsl.w	r3, r1, r6
 800cd50:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd52:	9111      	str	r1, [sp, #68]	; 0x44
 800cd54:	e758      	b.n	800cc08 <_strtod_l+0x6f0>
 800cd56:	2300      	movs	r3, #0
 800cd58:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	9311      	str	r3, [sp, #68]	; 0x44
 800cd5e:	e753      	b.n	800cc08 <_strtod_l+0x6f0>
 800cd60:	461a      	mov	r2, r3
 800cd62:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd64:	4620      	mov	r0, r4
 800cd66:	f001 fd65 	bl	800e834 <__lshift>
 800cd6a:	9018      	str	r0, [sp, #96]	; 0x60
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	f47f af7a 	bne.w	800cc66 <_strtod_l+0x74e>
 800cd72:	e600      	b.n	800c976 <_strtod_l+0x45e>
 800cd74:	f3af 8000 	nop.w
 800cd78:	94a03595 	.word	0x94a03595
 800cd7c:	3fdfffff 	.word	0x3fdfffff
 800cd80:	35afe535 	.word	0x35afe535
 800cd84:	3fe00000 	.word	0x3fe00000
 800cd88:	94a03595 	.word	0x94a03595
 800cd8c:	3fcfffff 	.word	0x3fcfffff
 800cd90:	08014e78 	.word	0x08014e78
 800cd94:	fffffc02 	.word	0xfffffc02
 800cd98:	f8cd b020 	str.w	fp, [sp, #32]
 800cd9c:	f040 8085 	bne.w	800ceaa <_strtod_l+0x992>
 800cda0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cda2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cda6:	b322      	cbz	r2, 800cdf2 <_strtod_l+0x8da>
 800cda8:	4ab7      	ldr	r2, [pc, #732]	; (800d088 <_strtod_l+0xb70>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d154      	bne.n	800ce58 <_strtod_l+0x940>
 800cdae:	4651      	mov	r1, sl
 800cdb0:	b1e7      	cbz	r7, 800cdec <_strtod_l+0x8d4>
 800cdb2:	4bb6      	ldr	r3, [pc, #728]	; (800d08c <_strtod_l+0xb74>)
 800cdb4:	465a      	mov	r2, fp
 800cdb6:	4013      	ands	r3, r2
 800cdb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cdbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc0:	d803      	bhi.n	800cdca <_strtod_l+0x8b2>
 800cdc2:	0d1b      	lsrs	r3, r3, #20
 800cdc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cdc8:	409a      	lsls	r2, r3
 800cdca:	4291      	cmp	r1, r2
 800cdcc:	d144      	bne.n	800ce58 <_strtod_l+0x940>
 800cdce:	4bb0      	ldr	r3, [pc, #704]	; (800d090 <_strtod_l+0xb78>)
 800cdd0:	9a08      	ldr	r2, [sp, #32]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d102      	bne.n	800cddc <_strtod_l+0x8c4>
 800cdd6:	3101      	adds	r1, #1
 800cdd8:	f43f adcd 	beq.w	800c976 <_strtod_l+0x45e>
 800cddc:	4bab      	ldr	r3, [pc, #684]	; (800d08c <_strtod_l+0xb74>)
 800cdde:	9a08      	ldr	r2, [sp, #32]
 800cde0:	401a      	ands	r2, r3
 800cde2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800cde6:	f04f 0a00 	mov.w	sl, #0
 800cdea:	e790      	b.n	800cd0e <_strtod_l+0x7f6>
 800cdec:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf0:	e7eb      	b.n	800cdca <_strtod_l+0x8b2>
 800cdf2:	bb8b      	cbnz	r3, 800ce58 <_strtod_l+0x940>
 800cdf4:	f1ba 0f00 	cmp.w	sl, #0
 800cdf8:	d12e      	bne.n	800ce58 <_strtod_l+0x940>
 800cdfa:	465b      	mov	r3, fp
 800cdfc:	4aa3      	ldr	r2, [pc, #652]	; (800d08c <_strtod_l+0xb74>)
 800cdfe:	b30f      	cbz	r7, 800ce44 <_strtod_l+0x92c>
 800ce00:	ea02 010b 	and.w	r1, r2, fp
 800ce04:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ce08:	dc1c      	bgt.n	800ce44 <_strtod_l+0x92c>
 800ce0a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ce0e:	f77f ae48 	ble.w	800caa2 <_strtod_l+0x58a>
 800ce12:	4aa0      	ldr	r2, [pc, #640]	; (800d094 <_strtod_l+0xb7c>)
 800ce14:	2300      	movs	r3, #0
 800ce16:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800ce1a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800ce1e:	ec4b ab17 	vmov	d7, sl, fp
 800ce22:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce26:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ce2a:	9b05      	ldr	r3, [sp, #20]
 800ce2c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f47f adaa 	bne.w	800c98a <_strtod_l+0x472>
 800ce36:	9b04      	ldr	r3, [sp, #16]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f47f ada6 	bne.w	800c98a <_strtod_l+0x472>
 800ce3e:	2322      	movs	r3, #34	; 0x22
 800ce40:	6023      	str	r3, [r4, #0]
 800ce42:	e5a2      	b.n	800c98a <_strtod_l+0x472>
 800ce44:	4013      	ands	r3, r2
 800ce46:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ce4a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ce4e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ce52:	f04f 3aff 	mov.w	sl, #4294967295
 800ce56:	e75a      	b.n	800cd0e <_strtod_l+0x7f6>
 800ce58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce5a:	b18b      	cbz	r3, 800ce80 <_strtod_l+0x968>
 800ce5c:	9a08      	ldr	r2, [sp, #32]
 800ce5e:	4213      	tst	r3, r2
 800ce60:	f43f af55 	beq.w	800cd0e <_strtod_l+0x7f6>
 800ce64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce66:	463a      	mov	r2, r7
 800ce68:	4650      	mov	r0, sl
 800ce6a:	4659      	mov	r1, fp
 800ce6c:	b163      	cbz	r3, 800ce88 <_strtod_l+0x970>
 800ce6e:	f7ff fb39 	bl	800c4e4 <sulp>
 800ce72:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800ce76:	ee37 7b00 	vadd.f64	d7, d7, d0
 800ce7a:	ec5b ab17 	vmov	sl, fp, d7
 800ce7e:	e746      	b.n	800cd0e <_strtod_l+0x7f6>
 800ce80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce82:	ea13 0f0a 	tst.w	r3, sl
 800ce86:	e7eb      	b.n	800ce60 <_strtod_l+0x948>
 800ce88:	f7ff fb2c 	bl	800c4e4 <sulp>
 800ce8c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800ce90:	ee37 7b40 	vsub.f64	d7, d7, d0
 800ce94:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ce98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cea4:	f43f adfd 	beq.w	800caa2 <_strtod_l+0x58a>
 800cea8:	e731      	b.n	800cd0e <_strtod_l+0x7f6>
 800ceaa:	4641      	mov	r1, r8
 800ceac:	4628      	mov	r0, r5
 800ceae:	f001 fe52 	bl	800eb56 <__ratio>
 800ceb2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ceb6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ceba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cebe:	d869      	bhi.n	800cf94 <_strtod_l+0xa7c>
 800cec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d045      	beq.n	800cf52 <_strtod_l+0xa3a>
 800cec6:	4b74      	ldr	r3, [pc, #464]	; (800d098 <_strtod_l+0xb80>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800cece:	9808      	ldr	r0, [sp, #32]
 800ced0:	496e      	ldr	r1, [pc, #440]	; (800d08c <_strtod_l+0xb74>)
 800ced2:	ea00 0601 	and.w	r6, r0, r1
 800ced6:	4871      	ldr	r0, [pc, #452]	; (800d09c <_strtod_l+0xb84>)
 800ced8:	4286      	cmp	r6, r0
 800ceda:	f040 8089 	bne.w	800cff0 <_strtod_l+0xad8>
 800cede:	910f      	str	r1, [sp, #60]	; 0x3c
 800cee0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cee4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800cee8:	9908      	ldr	r1, [sp, #32]
 800ceea:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800ceee:	ec4b ab10 	vmov	d0, sl, fp
 800cef2:	ec43 2b1c 	vmov	d12, r2, r3
 800cef6:	f001 fd69 	bl	800e9cc <__ulp>
 800cefa:	ec4b ab1d 	vmov	d13, sl, fp
 800cefe:	eeac db00 	vfma.f64	d13, d12, d0
 800cf02:	ed8d db08 	vstr	d13, [sp, #32]
 800cf06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cf0a:	4a65      	ldr	r2, [pc, #404]	; (800d0a0 <_strtod_l+0xb88>)
 800cf0c:	4019      	ands	r1, r3
 800cf0e:	4291      	cmp	r1, r2
 800cf10:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800cf14:	d948      	bls.n	800cfa8 <_strtod_l+0xa90>
 800cf16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d103      	bne.n	800cf28 <_strtod_l+0xa10>
 800cf20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf22:	3301      	adds	r3, #1
 800cf24:	f43f ad27 	beq.w	800c976 <_strtod_l+0x45e>
 800cf28:	f8df b164 	ldr.w	fp, [pc, #356]	; 800d090 <_strtod_l+0xb78>
 800cf2c:	f04f 3aff 	mov.w	sl, #4294967295
 800cf30:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf32:	4620      	mov	r0, r4
 800cf34:	f001 fab2 	bl	800e49c <_Bfree>
 800cf38:	4649      	mov	r1, r9
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f001 faae 	bl	800e49c <_Bfree>
 800cf40:	4641      	mov	r1, r8
 800cf42:	4620      	mov	r0, r4
 800cf44:	f001 faaa 	bl	800e49c <_Bfree>
 800cf48:	4629      	mov	r1, r5
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f001 faa6 	bl	800e49c <_Bfree>
 800cf50:	e60e      	b.n	800cb70 <_strtod_l+0x658>
 800cf52:	f1ba 0f00 	cmp.w	sl, #0
 800cf56:	d113      	bne.n	800cf80 <_strtod_l+0xa68>
 800cf58:	9b08      	ldr	r3, [sp, #32]
 800cf5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf5e:	b9b3      	cbnz	r3, 800cf8e <_strtod_l+0xa76>
 800cf60:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cf64:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800cf70:	d401      	bmi.n	800cf76 <_strtod_l+0xa5e>
 800cf72:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cf76:	eeb1 7b48 	vneg.f64	d7, d8
 800cf7a:	ec53 2b17 	vmov	r2, r3, d7
 800cf7e:	e7a6      	b.n	800cece <_strtod_l+0x9b6>
 800cf80:	f1ba 0f01 	cmp.w	sl, #1
 800cf84:	d103      	bne.n	800cf8e <_strtod_l+0xa76>
 800cf86:	9b08      	ldr	r3, [sp, #32]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f43f ad8a 	beq.w	800caa2 <_strtod_l+0x58a>
 800cf8e:	2200      	movs	r2, #0
 800cf90:	4b44      	ldr	r3, [pc, #272]	; (800d0a4 <_strtod_l+0xb8c>)
 800cf92:	e79a      	b.n	800ceca <_strtod_l+0x9b2>
 800cf94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf96:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800cf9a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d0e9      	beq.n	800cf76 <_strtod_l+0xa5e>
 800cfa2:	ec53 2b18 	vmov	r2, r3, d8
 800cfa6:	e792      	b.n	800cece <_strtod_l+0x9b6>
 800cfa8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cfac:	2f00      	cmp	r7, #0
 800cfae:	d1bf      	bne.n	800cf30 <_strtod_l+0xa18>
 800cfb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cfb4:	0d1b      	lsrs	r3, r3, #20
 800cfb6:	051b      	lsls	r3, r3, #20
 800cfb8:	429e      	cmp	r6, r3
 800cfba:	d1b9      	bne.n	800cf30 <_strtod_l+0xa18>
 800cfbc:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800cfc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfc2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800cfc6:	ee38 8b40 	vsub.f64	d8, d8, d0
 800cfca:	b92b      	cbnz	r3, 800cfd8 <_strtod_l+0xac0>
 800cfcc:	f1ba 0f00 	cmp.w	sl, #0
 800cfd0:	d102      	bne.n	800cfd8 <_strtod_l+0xac0>
 800cfd2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800cfd6:	b3d2      	cbz	r2, 800d04e <_strtod_l+0xb36>
 800cfd8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800cfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe0:	f53f acd3 	bmi.w	800c98a <_strtod_l+0x472>
 800cfe4:	eeb4 8bca 	vcmpe.f64	d8, d10
 800cfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfec:	dda0      	ble.n	800cf30 <_strtod_l+0xa18>
 800cfee:	e4cc      	b.n	800c98a <_strtod_l+0x472>
 800cff0:	b1ef      	cbz	r7, 800d02e <_strtod_l+0xb16>
 800cff2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800cff6:	d81a      	bhi.n	800d02e <_strtod_l+0xb16>
 800cff8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d080 <_strtod_l+0xb68>
 800cffc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d004:	d810      	bhi.n	800d028 <_strtod_l+0xb10>
 800d006:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800d00a:	ee17 3a90 	vmov	r3, s15
 800d00e:	2b00      	cmp	r3, #0
 800d010:	bf08      	it	eq
 800d012:	2301      	moveq	r3, #1
 800d014:	ee07 3a90 	vmov	s15, r3
 800d018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d01a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800d01e:	b99b      	cbnz	r3, 800d048 <_strtod_l+0xb30>
 800d020:	eeb1 7b48 	vneg.f64	d7, d8
 800d024:	ec53 2b17 	vmov	r2, r3, d7
 800d028:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800d02c:	1b8b      	subs	r3, r1, r6
 800d02e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d032:	ec43 2b1c 	vmov	d12, r2, r3
 800d036:	f001 fcc9 	bl	800e9cc <__ulp>
 800d03a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800d03e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800d042:	ec5b ab17 	vmov	sl, fp, d7
 800d046:	e7b1      	b.n	800cfac <_strtod_l+0xa94>
 800d048:	ec53 2b18 	vmov	r2, r3, d8
 800d04c:	e7ec      	b.n	800d028 <_strtod_l+0xb10>
 800d04e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d056:	f57f af6b 	bpl.w	800cf30 <_strtod_l+0xa18>
 800d05a:	e496      	b.n	800c98a <_strtod_l+0x472>
 800d05c:	2300      	movs	r3, #0
 800d05e:	930d      	str	r3, [sp, #52]	; 0x34
 800d060:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d062:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d064:	6013      	str	r3, [r2, #0]
 800d066:	f7ff ba9d 	b.w	800c5a4 <_strtod_l+0x8c>
 800d06a:	2a65      	cmp	r2, #101	; 0x65
 800d06c:	f04f 0100 	mov.w	r1, #0
 800d070:	f43f ab97 	beq.w	800c7a2 <_strtod_l+0x28a>
 800d074:	2701      	movs	r7, #1
 800d076:	460b      	mov	r3, r1
 800d078:	9704      	str	r7, [sp, #16]
 800d07a:	f7ff bb0a 	b.w	800c692 <_strtod_l+0x17a>
 800d07e:	bf00      	nop
 800d080:	ffc00000 	.word	0xffc00000
 800d084:	41dfffff 	.word	0x41dfffff
 800d088:	000fffff 	.word	0x000fffff
 800d08c:	7ff00000 	.word	0x7ff00000
 800d090:	7fefffff 	.word	0x7fefffff
 800d094:	39500000 	.word	0x39500000
 800d098:	3ff00000 	.word	0x3ff00000
 800d09c:	7fe00000 	.word	0x7fe00000
 800d0a0:	7c9fffff 	.word	0x7c9fffff
 800d0a4:	bff00000 	.word	0xbff00000

0800d0a8 <_strtod_r>:
 800d0a8:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <_strtod_r+0x18>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	b410      	push	{r4}
 800d0ae:	6a1b      	ldr	r3, [r3, #32]
 800d0b0:	4c04      	ldr	r4, [pc, #16]	; (800d0c4 <_strtod_r+0x1c>)
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	bf08      	it	eq
 800d0b6:	4623      	moveq	r3, r4
 800d0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0bc:	f7ff ba2c 	b.w	800c518 <_strtod_l>
 800d0c0:	24000010 	.word	0x24000010
 800d0c4:	24000074 	.word	0x24000074

0800d0c8 <_strtol_l.isra.0>:
 800d0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0cc:	4680      	mov	r8, r0
 800d0ce:	4689      	mov	r9, r1
 800d0d0:	4692      	mov	sl, r2
 800d0d2:	461e      	mov	r6, r3
 800d0d4:	460f      	mov	r7, r1
 800d0d6:	463d      	mov	r5, r7
 800d0d8:	9808      	ldr	r0, [sp, #32]
 800d0da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0de:	f001 f981 	bl	800e3e4 <__locale_ctype_ptr_l>
 800d0e2:	4420      	add	r0, r4
 800d0e4:	7843      	ldrb	r3, [r0, #1]
 800d0e6:	f013 0308 	ands.w	r3, r3, #8
 800d0ea:	d132      	bne.n	800d152 <_strtol_l.isra.0+0x8a>
 800d0ec:	2c2d      	cmp	r4, #45	; 0x2d
 800d0ee:	d132      	bne.n	800d156 <_strtol_l.isra.0+0x8e>
 800d0f0:	787c      	ldrb	r4, [r7, #1]
 800d0f2:	1cbd      	adds	r5, r7, #2
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	2e00      	cmp	r6, #0
 800d0f8:	d05d      	beq.n	800d1b6 <_strtol_l.isra.0+0xee>
 800d0fa:	2e10      	cmp	r6, #16
 800d0fc:	d109      	bne.n	800d112 <_strtol_l.isra.0+0x4a>
 800d0fe:	2c30      	cmp	r4, #48	; 0x30
 800d100:	d107      	bne.n	800d112 <_strtol_l.isra.0+0x4a>
 800d102:	782b      	ldrb	r3, [r5, #0]
 800d104:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d108:	2b58      	cmp	r3, #88	; 0x58
 800d10a:	d14f      	bne.n	800d1ac <_strtol_l.isra.0+0xe4>
 800d10c:	786c      	ldrb	r4, [r5, #1]
 800d10e:	2610      	movs	r6, #16
 800d110:	3502      	adds	r5, #2
 800d112:	2a00      	cmp	r2, #0
 800d114:	bf14      	ite	ne
 800d116:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d11a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d11e:	2700      	movs	r7, #0
 800d120:	fbb1 fcf6 	udiv	ip, r1, r6
 800d124:	4638      	mov	r0, r7
 800d126:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d12a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d12e:	2b09      	cmp	r3, #9
 800d130:	d817      	bhi.n	800d162 <_strtol_l.isra.0+0x9a>
 800d132:	461c      	mov	r4, r3
 800d134:	42a6      	cmp	r6, r4
 800d136:	dd23      	ble.n	800d180 <_strtol_l.isra.0+0xb8>
 800d138:	1c7b      	adds	r3, r7, #1
 800d13a:	d007      	beq.n	800d14c <_strtol_l.isra.0+0x84>
 800d13c:	4584      	cmp	ip, r0
 800d13e:	d31c      	bcc.n	800d17a <_strtol_l.isra.0+0xb2>
 800d140:	d101      	bne.n	800d146 <_strtol_l.isra.0+0x7e>
 800d142:	45a6      	cmp	lr, r4
 800d144:	db19      	blt.n	800d17a <_strtol_l.isra.0+0xb2>
 800d146:	fb00 4006 	mla	r0, r0, r6, r4
 800d14a:	2701      	movs	r7, #1
 800d14c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d150:	e7eb      	b.n	800d12a <_strtol_l.isra.0+0x62>
 800d152:	462f      	mov	r7, r5
 800d154:	e7bf      	b.n	800d0d6 <_strtol_l.isra.0+0xe>
 800d156:	2c2b      	cmp	r4, #43	; 0x2b
 800d158:	bf04      	itt	eq
 800d15a:	1cbd      	addeq	r5, r7, #2
 800d15c:	787c      	ldrbeq	r4, [r7, #1]
 800d15e:	461a      	mov	r2, r3
 800d160:	e7c9      	b.n	800d0f6 <_strtol_l.isra.0+0x2e>
 800d162:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d166:	2b19      	cmp	r3, #25
 800d168:	d801      	bhi.n	800d16e <_strtol_l.isra.0+0xa6>
 800d16a:	3c37      	subs	r4, #55	; 0x37
 800d16c:	e7e2      	b.n	800d134 <_strtol_l.isra.0+0x6c>
 800d16e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d172:	2b19      	cmp	r3, #25
 800d174:	d804      	bhi.n	800d180 <_strtol_l.isra.0+0xb8>
 800d176:	3c57      	subs	r4, #87	; 0x57
 800d178:	e7dc      	b.n	800d134 <_strtol_l.isra.0+0x6c>
 800d17a:	f04f 37ff 	mov.w	r7, #4294967295
 800d17e:	e7e5      	b.n	800d14c <_strtol_l.isra.0+0x84>
 800d180:	1c7b      	adds	r3, r7, #1
 800d182:	d108      	bne.n	800d196 <_strtol_l.isra.0+0xce>
 800d184:	2322      	movs	r3, #34	; 0x22
 800d186:	f8c8 3000 	str.w	r3, [r8]
 800d18a:	4608      	mov	r0, r1
 800d18c:	f1ba 0f00 	cmp.w	sl, #0
 800d190:	d107      	bne.n	800d1a2 <_strtol_l.isra.0+0xda>
 800d192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d196:	b102      	cbz	r2, 800d19a <_strtol_l.isra.0+0xd2>
 800d198:	4240      	negs	r0, r0
 800d19a:	f1ba 0f00 	cmp.w	sl, #0
 800d19e:	d0f8      	beq.n	800d192 <_strtol_l.isra.0+0xca>
 800d1a0:	b10f      	cbz	r7, 800d1a6 <_strtol_l.isra.0+0xde>
 800d1a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800d1a6:	f8ca 9000 	str.w	r9, [sl]
 800d1aa:	e7f2      	b.n	800d192 <_strtol_l.isra.0+0xca>
 800d1ac:	2430      	movs	r4, #48	; 0x30
 800d1ae:	2e00      	cmp	r6, #0
 800d1b0:	d1af      	bne.n	800d112 <_strtol_l.isra.0+0x4a>
 800d1b2:	2608      	movs	r6, #8
 800d1b4:	e7ad      	b.n	800d112 <_strtol_l.isra.0+0x4a>
 800d1b6:	2c30      	cmp	r4, #48	; 0x30
 800d1b8:	d0a3      	beq.n	800d102 <_strtol_l.isra.0+0x3a>
 800d1ba:	260a      	movs	r6, #10
 800d1bc:	e7a9      	b.n	800d112 <_strtol_l.isra.0+0x4a>
	...

0800d1c0 <_strtol_r>:
 800d1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1c2:	4c06      	ldr	r4, [pc, #24]	; (800d1dc <_strtol_r+0x1c>)
 800d1c4:	4d06      	ldr	r5, [pc, #24]	; (800d1e0 <_strtol_r+0x20>)
 800d1c6:	6824      	ldr	r4, [r4, #0]
 800d1c8:	6a24      	ldr	r4, [r4, #32]
 800d1ca:	2c00      	cmp	r4, #0
 800d1cc:	bf08      	it	eq
 800d1ce:	462c      	moveq	r4, r5
 800d1d0:	9400      	str	r4, [sp, #0]
 800d1d2:	f7ff ff79 	bl	800d0c8 <_strtol_l.isra.0>
 800d1d6:	b003      	add	sp, #12
 800d1d8:	bd30      	pop	{r4, r5, pc}
 800d1da:	bf00      	nop
 800d1dc:	24000010 	.word	0x24000010
 800d1e0:	24000074 	.word	0x24000074

0800d1e4 <quorem>:
 800d1e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e8:	6903      	ldr	r3, [r0, #16]
 800d1ea:	690c      	ldr	r4, [r1, #16]
 800d1ec:	42a3      	cmp	r3, r4
 800d1ee:	4680      	mov	r8, r0
 800d1f0:	f2c0 8082 	blt.w	800d2f8 <quorem+0x114>
 800d1f4:	3c01      	subs	r4, #1
 800d1f6:	f101 0714 	add.w	r7, r1, #20
 800d1fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d1fe:	f100 0614 	add.w	r6, r0, #20
 800d202:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d206:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d20a:	eb06 030c 	add.w	r3, r6, ip
 800d20e:	3501      	adds	r5, #1
 800d210:	eb07 090c 	add.w	r9, r7, ip
 800d214:	9301      	str	r3, [sp, #4]
 800d216:	fbb0 f5f5 	udiv	r5, r0, r5
 800d21a:	b395      	cbz	r5, 800d282 <quorem+0x9e>
 800d21c:	f04f 0a00 	mov.w	sl, #0
 800d220:	4638      	mov	r0, r7
 800d222:	46b6      	mov	lr, r6
 800d224:	46d3      	mov	fp, sl
 800d226:	f850 2b04 	ldr.w	r2, [r0], #4
 800d22a:	b293      	uxth	r3, r2
 800d22c:	fb05 a303 	mla	r3, r5, r3, sl
 800d230:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d234:	b29b      	uxth	r3, r3
 800d236:	ebab 0303 	sub.w	r3, fp, r3
 800d23a:	0c12      	lsrs	r2, r2, #16
 800d23c:	f8de b000 	ldr.w	fp, [lr]
 800d240:	fb05 a202 	mla	r2, r5, r2, sl
 800d244:	fa13 f38b 	uxtah	r3, r3, fp
 800d248:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d24c:	fa1f fb82 	uxth.w	fp, r2
 800d250:	f8de 2000 	ldr.w	r2, [lr]
 800d254:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d262:	4581      	cmp	r9, r0
 800d264:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d268:	f84e 3b04 	str.w	r3, [lr], #4
 800d26c:	d2db      	bcs.n	800d226 <quorem+0x42>
 800d26e:	f856 300c 	ldr.w	r3, [r6, ip]
 800d272:	b933      	cbnz	r3, 800d282 <quorem+0x9e>
 800d274:	9b01      	ldr	r3, [sp, #4]
 800d276:	3b04      	subs	r3, #4
 800d278:	429e      	cmp	r6, r3
 800d27a:	461a      	mov	r2, r3
 800d27c:	d330      	bcc.n	800d2e0 <quorem+0xfc>
 800d27e:	f8c8 4010 	str.w	r4, [r8, #16]
 800d282:	4640      	mov	r0, r8
 800d284:	f001 fb2a 	bl	800e8dc <__mcmp>
 800d288:	2800      	cmp	r0, #0
 800d28a:	db25      	blt.n	800d2d8 <quorem+0xf4>
 800d28c:	3501      	adds	r5, #1
 800d28e:	4630      	mov	r0, r6
 800d290:	f04f 0c00 	mov.w	ip, #0
 800d294:	f857 2b04 	ldr.w	r2, [r7], #4
 800d298:	f8d0 e000 	ldr.w	lr, [r0]
 800d29c:	b293      	uxth	r3, r2
 800d29e:	ebac 0303 	sub.w	r3, ip, r3
 800d2a2:	0c12      	lsrs	r2, r2, #16
 800d2a4:	fa13 f38e 	uxtah	r3, r3, lr
 800d2a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d2ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2b6:	45b9      	cmp	r9, r7
 800d2b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d2bc:	f840 3b04 	str.w	r3, [r0], #4
 800d2c0:	d2e8      	bcs.n	800d294 <quorem+0xb0>
 800d2c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d2c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d2ca:	b92a      	cbnz	r2, 800d2d8 <quorem+0xf4>
 800d2cc:	3b04      	subs	r3, #4
 800d2ce:	429e      	cmp	r6, r3
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	d30b      	bcc.n	800d2ec <quorem+0x108>
 800d2d4:	f8c8 4010 	str.w	r4, [r8, #16]
 800d2d8:	4628      	mov	r0, r5
 800d2da:	b003      	add	sp, #12
 800d2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e0:	6812      	ldr	r2, [r2, #0]
 800d2e2:	3b04      	subs	r3, #4
 800d2e4:	2a00      	cmp	r2, #0
 800d2e6:	d1ca      	bne.n	800d27e <quorem+0x9a>
 800d2e8:	3c01      	subs	r4, #1
 800d2ea:	e7c5      	b.n	800d278 <quorem+0x94>
 800d2ec:	6812      	ldr	r2, [r2, #0]
 800d2ee:	3b04      	subs	r3, #4
 800d2f0:	2a00      	cmp	r2, #0
 800d2f2:	d1ef      	bne.n	800d2d4 <quorem+0xf0>
 800d2f4:	3c01      	subs	r4, #1
 800d2f6:	e7ea      	b.n	800d2ce <quorem+0xea>
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	e7ee      	b.n	800d2da <quorem+0xf6>
 800d2fc:	0000      	movs	r0, r0
	...

0800d300 <_dtoa_r>:
 800d300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d304:	ec57 6b10 	vmov	r6, r7, d0
 800d308:	b095      	sub	sp, #84	; 0x54
 800d30a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d30c:	9108      	str	r1, [sp, #32]
 800d30e:	4604      	mov	r4, r0
 800d310:	920a      	str	r2, [sp, #40]	; 0x28
 800d312:	9311      	str	r3, [sp, #68]	; 0x44
 800d314:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d318:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d31c:	b93d      	cbnz	r5, 800d32e <_dtoa_r+0x2e>
 800d31e:	2010      	movs	r0, #16
 800d320:	f7fe f9ca 	bl	800b6b8 <malloc>
 800d324:	6260      	str	r0, [r4, #36]	; 0x24
 800d326:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d32a:	6005      	str	r5, [r0, #0]
 800d32c:	60c5      	str	r5, [r0, #12]
 800d32e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d330:	6819      	ldr	r1, [r3, #0]
 800d332:	b151      	cbz	r1, 800d34a <_dtoa_r+0x4a>
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	604a      	str	r2, [r1, #4]
 800d338:	2301      	movs	r3, #1
 800d33a:	4093      	lsls	r3, r2
 800d33c:	608b      	str	r3, [r1, #8]
 800d33e:	4620      	mov	r0, r4
 800d340:	f001 f8ac 	bl	800e49c <_Bfree>
 800d344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d346:	2200      	movs	r2, #0
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	1e3b      	subs	r3, r7, #0
 800d34c:	bfb9      	ittee	lt
 800d34e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d352:	9303      	strlt	r3, [sp, #12]
 800d354:	2300      	movge	r3, #0
 800d356:	f8c8 3000 	strge.w	r3, [r8]
 800d35a:	9d03      	ldr	r5, [sp, #12]
 800d35c:	4bac      	ldr	r3, [pc, #688]	; (800d610 <_dtoa_r+0x310>)
 800d35e:	bfbc      	itt	lt
 800d360:	2201      	movlt	r2, #1
 800d362:	f8c8 2000 	strlt.w	r2, [r8]
 800d366:	43ab      	bics	r3, r5
 800d368:	d11b      	bne.n	800d3a2 <_dtoa_r+0xa2>
 800d36a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d36c:	f242 730f 	movw	r3, #9999	; 0x270f
 800d370:	6013      	str	r3, [r2, #0]
 800d372:	9b02      	ldr	r3, [sp, #8]
 800d374:	b923      	cbnz	r3, 800d380 <_dtoa_r+0x80>
 800d376:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d37a:	2d00      	cmp	r5, #0
 800d37c:	f000 84dd 	beq.w	800dd3a <_dtoa_r+0xa3a>
 800d380:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d382:	b953      	cbnz	r3, 800d39a <_dtoa_r+0x9a>
 800d384:	4ba3      	ldr	r3, [pc, #652]	; (800d614 <_dtoa_r+0x314>)
 800d386:	e020      	b.n	800d3ca <_dtoa_r+0xca>
 800d388:	4ba3      	ldr	r3, [pc, #652]	; (800d618 <_dtoa_r+0x318>)
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	3308      	adds	r3, #8
 800d38e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	9804      	ldr	r0, [sp, #16]
 800d394:	b015      	add	sp, #84	; 0x54
 800d396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39a:	4b9e      	ldr	r3, [pc, #632]	; (800d614 <_dtoa_r+0x314>)
 800d39c:	9304      	str	r3, [sp, #16]
 800d39e:	3303      	adds	r3, #3
 800d3a0:	e7f5      	b.n	800d38e <_dtoa_r+0x8e>
 800d3a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d3b2:	d10c      	bne.n	800d3ce <_dtoa_r+0xce>
 800d3b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	6013      	str	r3, [r2, #0]
 800d3ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f000 84b9 	beq.w	800dd34 <_dtoa_r+0xa34>
 800d3c2:	4b96      	ldr	r3, [pc, #600]	; (800d61c <_dtoa_r+0x31c>)
 800d3c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d3c6:	6013      	str	r3, [r2, #0]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	9304      	str	r3, [sp, #16]
 800d3cc:	e7e1      	b.n	800d392 <_dtoa_r+0x92>
 800d3ce:	a913      	add	r1, sp, #76	; 0x4c
 800d3d0:	aa12      	add	r2, sp, #72	; 0x48
 800d3d2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	f001 fb6e 	bl	800eab8 <__d2b>
 800d3dc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d3e0:	9001      	str	r0, [sp, #4]
 800d3e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d3e4:	2e00      	cmp	r6, #0
 800d3e6:	d046      	beq.n	800d476 <_dtoa_r+0x176>
 800d3e8:	9805      	ldr	r0, [sp, #20]
 800d3ea:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d3ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3f2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800d3f6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d3fa:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800d3fe:	2700      	movs	r7, #0
 800d400:	ee07 aa90 	vmov	s15, sl
 800d404:	ec43 2b16 	vmov	d6, r2, r3
 800d408:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d40c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800d5f8 <_dtoa_r+0x2f8>
 800d410:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d414:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d418:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d600 <_dtoa_r+0x300>
 800d41c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d420:	eeb0 7b46 	vmov.f64	d7, d6
 800d424:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d608 <_dtoa_r+0x308>
 800d428:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d42c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d430:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d438:	ee16 ba90 	vmov	fp, s13
 800d43c:	d508      	bpl.n	800d450 <_dtoa_r+0x150>
 800d43e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d442:	eeb4 6b47 	vcmp.f64	d6, d7
 800d446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44a:	bf18      	it	ne
 800d44c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d450:	f1bb 0f16 	cmp.w	fp, #22
 800d454:	d834      	bhi.n	800d4c0 <_dtoa_r+0x1c0>
 800d456:	4b72      	ldr	r3, [pc, #456]	; (800d620 <_dtoa_r+0x320>)
 800d458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d45c:	ed93 7b00 	vldr	d7, [r3]
 800d460:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d464:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d46c:	dd01      	ble.n	800d472 <_dtoa_r+0x172>
 800d46e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d472:	2300      	movs	r3, #0
 800d474:	e025      	b.n	800d4c2 <_dtoa_r+0x1c2>
 800d476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d478:	eb01 0a03 	add.w	sl, r1, r3
 800d47c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800d480:	2b20      	cmp	r3, #32
 800d482:	dd17      	ble.n	800d4b4 <_dtoa_r+0x1b4>
 800d484:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d488:	9a02      	ldr	r2, [sp, #8]
 800d48a:	409d      	lsls	r5, r3
 800d48c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800d490:	fa22 f303 	lsr.w	r3, r2, r3
 800d494:	432b      	orrs	r3, r5
 800d496:	ee07 3a90 	vmov	s15, r3
 800d49a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d49e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d4a6:	9805      	ldr	r0, [sp, #20]
 800d4a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4ac:	2701      	movs	r7, #1
 800d4ae:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800d4b2:	e7a5      	b.n	800d400 <_dtoa_r+0x100>
 800d4b4:	9a02      	ldr	r2, [sp, #8]
 800d4b6:	f1c3 0320 	rsb	r3, r3, #32
 800d4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d4be:	e7ea      	b.n	800d496 <_dtoa_r+0x196>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	eba1 0a0a 	sub.w	sl, r1, sl
 800d4c6:	9310      	str	r3, [sp, #64]	; 0x40
 800d4c8:	f1ba 0301 	subs.w	r3, sl, #1
 800d4cc:	9307      	str	r3, [sp, #28]
 800d4ce:	bf43      	ittte	mi
 800d4d0:	2300      	movmi	r3, #0
 800d4d2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800d4d6:	9307      	strmi	r3, [sp, #28]
 800d4d8:	f04f 0a00 	movpl.w	sl, #0
 800d4dc:	f1bb 0f00 	cmp.w	fp, #0
 800d4e0:	db19      	blt.n	800d516 <_dtoa_r+0x216>
 800d4e2:	9b07      	ldr	r3, [sp, #28]
 800d4e4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d4e8:	445b      	add	r3, fp
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	f04f 0800 	mov.w	r8, #0
 800d4f0:	9b08      	ldr	r3, [sp, #32]
 800d4f2:	2b09      	cmp	r3, #9
 800d4f4:	d866      	bhi.n	800d5c4 <_dtoa_r+0x2c4>
 800d4f6:	2b05      	cmp	r3, #5
 800d4f8:	bfc4      	itt	gt
 800d4fa:	3b04      	subgt	r3, #4
 800d4fc:	9308      	strgt	r3, [sp, #32]
 800d4fe:	9b08      	ldr	r3, [sp, #32]
 800d500:	f1a3 0302 	sub.w	r3, r3, #2
 800d504:	bfcc      	ite	gt
 800d506:	2500      	movgt	r5, #0
 800d508:	2501      	movle	r5, #1
 800d50a:	2b03      	cmp	r3, #3
 800d50c:	d866      	bhi.n	800d5dc <_dtoa_r+0x2dc>
 800d50e:	e8df f003 	tbb	[pc, r3]
 800d512:	5755      	.short	0x5755
 800d514:	4909      	.short	0x4909
 800d516:	2300      	movs	r3, #0
 800d518:	ebaa 0a0b 	sub.w	sl, sl, fp
 800d51c:	f1cb 0800 	rsb	r8, fp, #0
 800d520:	930b      	str	r3, [sp, #44]	; 0x2c
 800d522:	e7e5      	b.n	800d4f0 <_dtoa_r+0x1f0>
 800d524:	2301      	movs	r3, #1
 800d526:	9309      	str	r3, [sp, #36]	; 0x24
 800d528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dd59      	ble.n	800d5e2 <_dtoa_r+0x2e2>
 800d52e:	9306      	str	r3, [sp, #24]
 800d530:	4699      	mov	r9, r3
 800d532:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d534:	2200      	movs	r2, #0
 800d536:	6072      	str	r2, [r6, #4]
 800d538:	2204      	movs	r2, #4
 800d53a:	f102 0014 	add.w	r0, r2, #20
 800d53e:	4298      	cmp	r0, r3
 800d540:	6871      	ldr	r1, [r6, #4]
 800d542:	d953      	bls.n	800d5ec <_dtoa_r+0x2ec>
 800d544:	4620      	mov	r0, r4
 800d546:	f000 ff75 	bl	800e434 <_Balloc>
 800d54a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d54c:	6030      	str	r0, [r6, #0]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	9304      	str	r3, [sp, #16]
 800d552:	f1b9 0f0e 	cmp.w	r9, #14
 800d556:	f200 80c2 	bhi.w	800d6de <_dtoa_r+0x3de>
 800d55a:	2d00      	cmp	r5, #0
 800d55c:	f000 80bf 	beq.w	800d6de <_dtoa_r+0x3de>
 800d560:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d564:	f1bb 0f00 	cmp.w	fp, #0
 800d568:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d56c:	f340 80e6 	ble.w	800d73c <_dtoa_r+0x43c>
 800d570:	4a2b      	ldr	r2, [pc, #172]	; (800d620 <_dtoa_r+0x320>)
 800d572:	f00b 030f 	and.w	r3, fp, #15
 800d576:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d57a:	ed93 7b00 	vldr	d7, [r3]
 800d57e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800d582:	06da      	lsls	r2, r3, #27
 800d584:	f140 80d8 	bpl.w	800d738 <_dtoa_r+0x438>
 800d588:	4a26      	ldr	r2, [pc, #152]	; (800d624 <_dtoa_r+0x324>)
 800d58a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800d58e:	ed92 6b08 	vldr	d6, [r2, #32]
 800d592:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d596:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d59a:	f003 030f 	and.w	r3, r3, #15
 800d59e:	2203      	movs	r2, #3
 800d5a0:	4920      	ldr	r1, [pc, #128]	; (800d624 <_dtoa_r+0x324>)
 800d5a2:	e04a      	b.n	800d63a <_dtoa_r+0x33a>
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5aa:	445b      	add	r3, fp
 800d5ac:	f103 0901 	add.w	r9, r3, #1
 800d5b0:	9306      	str	r3, [sp, #24]
 800d5b2:	464b      	mov	r3, r9
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	bfb8      	it	lt
 800d5b8:	2301      	movlt	r3, #1
 800d5ba:	e7ba      	b.n	800d532 <_dtoa_r+0x232>
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e7b2      	b.n	800d526 <_dtoa_r+0x226>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	e7f0      	b.n	800d5a6 <_dtoa_r+0x2a6>
 800d5c4:	2501      	movs	r5, #1
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800d5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d0:	9306      	str	r3, [sp, #24]
 800d5d2:	4699      	mov	r9, r3
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	2312      	movs	r3, #18
 800d5d8:	920a      	str	r2, [sp, #40]	; 0x28
 800d5da:	e7aa      	b.n	800d532 <_dtoa_r+0x232>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e0:	e7f4      	b.n	800d5cc <_dtoa_r+0x2cc>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	9306      	str	r3, [sp, #24]
 800d5e6:	4699      	mov	r9, r3
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	e7f5      	b.n	800d5d8 <_dtoa_r+0x2d8>
 800d5ec:	3101      	adds	r1, #1
 800d5ee:	6071      	str	r1, [r6, #4]
 800d5f0:	0052      	lsls	r2, r2, #1
 800d5f2:	e7a2      	b.n	800d53a <_dtoa_r+0x23a>
 800d5f4:	f3af 8000 	nop.w
 800d5f8:	636f4361 	.word	0x636f4361
 800d5fc:	3fd287a7 	.word	0x3fd287a7
 800d600:	8b60c8b3 	.word	0x8b60c8b3
 800d604:	3fc68a28 	.word	0x3fc68a28
 800d608:	509f79fb 	.word	0x509f79fb
 800d60c:	3fd34413 	.word	0x3fd34413
 800d610:	7ff00000 	.word	0x7ff00000
 800d614:	08014ea9 	.word	0x08014ea9
 800d618:	08014ea0 	.word	0x08014ea0
 800d61c:	08014e25 	.word	0x08014e25
 800d620:	08014ee0 	.word	0x08014ee0
 800d624:	08014eb8 	.word	0x08014eb8
 800d628:	07de      	lsls	r6, r3, #31
 800d62a:	d504      	bpl.n	800d636 <_dtoa_r+0x336>
 800d62c:	ed91 6b00 	vldr	d6, [r1]
 800d630:	3201      	adds	r2, #1
 800d632:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d636:	105b      	asrs	r3, r3, #1
 800d638:	3108      	adds	r1, #8
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1f4      	bne.n	800d628 <_dtoa_r+0x328>
 800d63e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d642:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d646:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d64a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f000 80a7 	beq.w	800d7a0 <_dtoa_r+0x4a0>
 800d652:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d656:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d65a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d662:	f140 809d 	bpl.w	800d7a0 <_dtoa_r+0x4a0>
 800d666:	f1b9 0f00 	cmp.w	r9, #0
 800d66a:	f000 8099 	beq.w	800d7a0 <_dtoa_r+0x4a0>
 800d66e:	9b06      	ldr	r3, [sp, #24]
 800d670:	2b00      	cmp	r3, #0
 800d672:	dd30      	ble.n	800d6d6 <_dtoa_r+0x3d6>
 800d674:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d678:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d67c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d680:	9d06      	ldr	r5, [sp, #24]
 800d682:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d686:	3201      	adds	r2, #1
 800d688:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d68c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d690:	ee07 2a90 	vmov	s15, r2
 800d694:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d698:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d69c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d6a0:	9a03      	ldr	r2, [sp, #12]
 800d6a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6a6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800d6aa:	2d00      	cmp	r5, #0
 800d6ac:	d17b      	bne.n	800d7a6 <_dtoa_r+0x4a6>
 800d6ae:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d6b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d6b6:	ec41 0b17 	vmov	d7, r0, r1
 800d6ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c2:	f300 8253 	bgt.w	800db6c <_dtoa_r+0x86c>
 800d6c6:	eeb1 7b47 	vneg.f64	d7, d7
 800d6ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d2:	f100 8249 	bmi.w	800db68 <_dtoa_r+0x868>
 800d6d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d6da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f2c0 8119 	blt.w	800d918 <_dtoa_r+0x618>
 800d6e6:	f1bb 0f0e 	cmp.w	fp, #14
 800d6ea:	f300 8115 	bgt.w	800d918 <_dtoa_r+0x618>
 800d6ee:	4bc3      	ldr	r3, [pc, #780]	; (800d9fc <_dtoa_r+0x6fc>)
 800d6f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d6f4:	ed93 6b00 	vldr	d6, [r3]
 800d6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f280 80ba 	bge.w	800d874 <_dtoa_r+0x574>
 800d700:	f1b9 0f00 	cmp.w	r9, #0
 800d704:	f300 80b6 	bgt.w	800d874 <_dtoa_r+0x574>
 800d708:	f040 822d 	bne.w	800db66 <_dtoa_r+0x866>
 800d70c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d710:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d714:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d718:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d720:	464d      	mov	r5, r9
 800d722:	464f      	mov	r7, r9
 800d724:	f280 8204 	bge.w	800db30 <_dtoa_r+0x830>
 800d728:	9b04      	ldr	r3, [sp, #16]
 800d72a:	9a04      	ldr	r2, [sp, #16]
 800d72c:	1c5e      	adds	r6, r3, #1
 800d72e:	2331      	movs	r3, #49	; 0x31
 800d730:	7013      	strb	r3, [r2, #0]
 800d732:	f10b 0b01 	add.w	fp, fp, #1
 800d736:	e1ff      	b.n	800db38 <_dtoa_r+0x838>
 800d738:	2202      	movs	r2, #2
 800d73a:	e731      	b.n	800d5a0 <_dtoa_r+0x2a0>
 800d73c:	d02e      	beq.n	800d79c <_dtoa_r+0x49c>
 800d73e:	f1cb 0300 	rsb	r3, fp, #0
 800d742:	4aae      	ldr	r2, [pc, #696]	; (800d9fc <_dtoa_r+0x6fc>)
 800d744:	f003 010f 	and.w	r1, r3, #15
 800d748:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d74c:	ed92 7b00 	vldr	d7, [r2]
 800d750:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800d754:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d758:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d75c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800d760:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d764:	49a6      	ldr	r1, [pc, #664]	; (800da00 <_dtoa_r+0x700>)
 800d766:	111b      	asrs	r3, r3, #4
 800d768:	2000      	movs	r0, #0
 800d76a:	2202      	movs	r2, #2
 800d76c:	b93b      	cbnz	r3, 800d77e <_dtoa_r+0x47e>
 800d76e:	2800      	cmp	r0, #0
 800d770:	f43f af6b 	beq.w	800d64a <_dtoa_r+0x34a>
 800d774:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d77c:	e765      	b.n	800d64a <_dtoa_r+0x34a>
 800d77e:	07dd      	lsls	r5, r3, #31
 800d780:	d509      	bpl.n	800d796 <_dtoa_r+0x496>
 800d782:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d786:	ed91 7b00 	vldr	d7, [r1]
 800d78a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d78e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d792:	3201      	adds	r2, #1
 800d794:	2001      	movs	r0, #1
 800d796:	105b      	asrs	r3, r3, #1
 800d798:	3108      	adds	r1, #8
 800d79a:	e7e7      	b.n	800d76c <_dtoa_r+0x46c>
 800d79c:	2202      	movs	r2, #2
 800d79e:	e754      	b.n	800d64a <_dtoa_r+0x34a>
 800d7a0:	465b      	mov	r3, fp
 800d7a2:	464d      	mov	r5, r9
 800d7a4:	e770      	b.n	800d688 <_dtoa_r+0x388>
 800d7a6:	4a95      	ldr	r2, [pc, #596]	; (800d9fc <_dtoa_r+0x6fc>)
 800d7a8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800d7ac:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d7b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7b2:	ec41 0b17 	vmov	d7, r0, r1
 800d7b6:	b35a      	cbz	r2, 800d810 <_dtoa_r+0x510>
 800d7b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d7bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d7c0:	9e04      	ldr	r6, [sp, #16]
 800d7c2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d7c6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d7ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d7ce:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d7d2:	ee14 2a90 	vmov	r2, s9
 800d7d6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d7da:	3230      	adds	r2, #48	; 0x30
 800d7dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d7e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e8:	f806 2b01 	strb.w	r2, [r6], #1
 800d7ec:	d43b      	bmi.n	800d866 <_dtoa_r+0x566>
 800d7ee:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d7f2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7fa:	d472      	bmi.n	800d8e2 <_dtoa_r+0x5e2>
 800d7fc:	9a04      	ldr	r2, [sp, #16]
 800d7fe:	1ab2      	subs	r2, r6, r2
 800d800:	4295      	cmp	r5, r2
 800d802:	f77f af68 	ble.w	800d6d6 <_dtoa_r+0x3d6>
 800d806:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d80a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d80e:	e7de      	b.n	800d7ce <_dtoa_r+0x4ce>
 800d810:	9a04      	ldr	r2, [sp, #16]
 800d812:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d816:	1956      	adds	r6, r2, r5
 800d818:	4611      	mov	r1, r2
 800d81a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d81e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d822:	ee14 2a90 	vmov	r2, s9
 800d826:	3230      	adds	r2, #48	; 0x30
 800d828:	f801 2b01 	strb.w	r2, [r1], #1
 800d82c:	42b1      	cmp	r1, r6
 800d82e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d832:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d836:	d11a      	bne.n	800d86e <_dtoa_r+0x56e>
 800d838:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d83c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d840:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d848:	dc4b      	bgt.n	800d8e2 <_dtoa_r+0x5e2>
 800d84a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d84e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d856:	f57f af3e 	bpl.w	800d6d6 <_dtoa_r+0x3d6>
 800d85a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d85e:	2a30      	cmp	r2, #48	; 0x30
 800d860:	f106 31ff 	add.w	r1, r6, #4294967295
 800d864:	d001      	beq.n	800d86a <_dtoa_r+0x56a>
 800d866:	469b      	mov	fp, r3
 800d868:	e02a      	b.n	800d8c0 <_dtoa_r+0x5c0>
 800d86a:	460e      	mov	r6, r1
 800d86c:	e7f5      	b.n	800d85a <_dtoa_r+0x55a>
 800d86e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d872:	e7d4      	b.n	800d81e <_dtoa_r+0x51e>
 800d874:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d878:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d87c:	9e04      	ldr	r6, [sp, #16]
 800d87e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d882:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d886:	ee15 3a10 	vmov	r3, s10
 800d88a:	3330      	adds	r3, #48	; 0x30
 800d88c:	f806 3b01 	strb.w	r3, [r6], #1
 800d890:	9b04      	ldr	r3, [sp, #16]
 800d892:	1af3      	subs	r3, r6, r3
 800d894:	4599      	cmp	r9, r3
 800d896:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d89a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d89e:	d133      	bne.n	800d908 <_dtoa_r+0x608>
 800d8a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d8a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ac:	dc18      	bgt.n	800d8e0 <_dtoa_r+0x5e0>
 800d8ae:	eeb4 7b46 	vcmp.f64	d7, d6
 800d8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b6:	d103      	bne.n	800d8c0 <_dtoa_r+0x5c0>
 800d8b8:	ee15 3a10 	vmov	r3, s10
 800d8bc:	07db      	lsls	r3, r3, #31
 800d8be:	d40f      	bmi.n	800d8e0 <_dtoa_r+0x5e0>
 800d8c0:	9901      	ldr	r1, [sp, #4]
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f000 fdea 	bl	800e49c <_Bfree>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d8cc:	7033      	strb	r3, [r6, #0]
 800d8ce:	f10b 0301 	add.w	r3, fp, #1
 800d8d2:	6013      	str	r3, [r2, #0]
 800d8d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f43f ad5b 	beq.w	800d392 <_dtoa_r+0x92>
 800d8dc:	601e      	str	r6, [r3, #0]
 800d8de:	e558      	b.n	800d392 <_dtoa_r+0x92>
 800d8e0:	465b      	mov	r3, fp
 800d8e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d8e6:	2939      	cmp	r1, #57	; 0x39
 800d8e8:	f106 32ff 	add.w	r2, r6, #4294967295
 800d8ec:	d106      	bne.n	800d8fc <_dtoa_r+0x5fc>
 800d8ee:	9904      	ldr	r1, [sp, #16]
 800d8f0:	4291      	cmp	r1, r2
 800d8f2:	d107      	bne.n	800d904 <_dtoa_r+0x604>
 800d8f4:	2230      	movs	r2, #48	; 0x30
 800d8f6:	700a      	strb	r2, [r1, #0]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	460a      	mov	r2, r1
 800d8fc:	7811      	ldrb	r1, [r2, #0]
 800d8fe:	3101      	adds	r1, #1
 800d900:	7011      	strb	r1, [r2, #0]
 800d902:	e7b0      	b.n	800d866 <_dtoa_r+0x566>
 800d904:	4616      	mov	r6, r2
 800d906:	e7ec      	b.n	800d8e2 <_dtoa_r+0x5e2>
 800d908:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d90c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d914:	d1b3      	bne.n	800d87e <_dtoa_r+0x57e>
 800d916:	e7d3      	b.n	800d8c0 <_dtoa_r+0x5c0>
 800d918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d91a:	2a00      	cmp	r2, #0
 800d91c:	f000 808d 	beq.w	800da3a <_dtoa_r+0x73a>
 800d920:	9a08      	ldr	r2, [sp, #32]
 800d922:	2a01      	cmp	r2, #1
 800d924:	dc72      	bgt.n	800da0c <_dtoa_r+0x70c>
 800d926:	2f00      	cmp	r7, #0
 800d928:	d06c      	beq.n	800da04 <_dtoa_r+0x704>
 800d92a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d92e:	4645      	mov	r5, r8
 800d930:	4656      	mov	r6, sl
 800d932:	9a07      	ldr	r2, [sp, #28]
 800d934:	2101      	movs	r1, #1
 800d936:	441a      	add	r2, r3
 800d938:	4620      	mov	r0, r4
 800d93a:	449a      	add	sl, r3
 800d93c:	9207      	str	r2, [sp, #28]
 800d93e:	f000 fe8b 	bl	800e658 <__i2b>
 800d942:	4607      	mov	r7, r0
 800d944:	2e00      	cmp	r6, #0
 800d946:	dd0b      	ble.n	800d960 <_dtoa_r+0x660>
 800d948:	9b07      	ldr	r3, [sp, #28]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	dd08      	ble.n	800d960 <_dtoa_r+0x660>
 800d94e:	42b3      	cmp	r3, r6
 800d950:	9a07      	ldr	r2, [sp, #28]
 800d952:	bfa8      	it	ge
 800d954:	4633      	movge	r3, r6
 800d956:	ebaa 0a03 	sub.w	sl, sl, r3
 800d95a:	1af6      	subs	r6, r6, r3
 800d95c:	1ad3      	subs	r3, r2, r3
 800d95e:	9307      	str	r3, [sp, #28]
 800d960:	f1b8 0f00 	cmp.w	r8, #0
 800d964:	d01d      	beq.n	800d9a2 <_dtoa_r+0x6a2>
 800d966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d06a      	beq.n	800da42 <_dtoa_r+0x742>
 800d96c:	b18d      	cbz	r5, 800d992 <_dtoa_r+0x692>
 800d96e:	4639      	mov	r1, r7
 800d970:	462a      	mov	r2, r5
 800d972:	4620      	mov	r0, r4
 800d974:	f000 ff10 	bl	800e798 <__pow5mult>
 800d978:	9a01      	ldr	r2, [sp, #4]
 800d97a:	4601      	mov	r1, r0
 800d97c:	4607      	mov	r7, r0
 800d97e:	4620      	mov	r0, r4
 800d980:	f000 fe73 	bl	800e66a <__multiply>
 800d984:	9901      	ldr	r1, [sp, #4]
 800d986:	900c      	str	r0, [sp, #48]	; 0x30
 800d988:	4620      	mov	r0, r4
 800d98a:	f000 fd87 	bl	800e49c <_Bfree>
 800d98e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d990:	9301      	str	r3, [sp, #4]
 800d992:	ebb8 0205 	subs.w	r2, r8, r5
 800d996:	d004      	beq.n	800d9a2 <_dtoa_r+0x6a2>
 800d998:	9901      	ldr	r1, [sp, #4]
 800d99a:	4620      	mov	r0, r4
 800d99c:	f000 fefc 	bl	800e798 <__pow5mult>
 800d9a0:	9001      	str	r0, [sp, #4]
 800d9a2:	2101      	movs	r1, #1
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f000 fe57 	bl	800e658 <__i2b>
 800d9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ac:	4605      	mov	r5, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f000 81ca 	beq.w	800dd48 <_dtoa_r+0xa48>
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	4601      	mov	r1, r0
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f000 feed 	bl	800e798 <__pow5mult>
 800d9be:	9b08      	ldr	r3, [sp, #32]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	dc44      	bgt.n	800da50 <_dtoa_r+0x750>
 800d9c6:	9b02      	ldr	r3, [sp, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d13c      	bne.n	800da46 <_dtoa_r+0x746>
 800d9cc:	9b03      	ldr	r3, [sp, #12]
 800d9ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d137      	bne.n	800da46 <_dtoa_r+0x746>
 800d9d6:	9b03      	ldr	r3, [sp, #12]
 800d9d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9dc:	0d1b      	lsrs	r3, r3, #20
 800d9de:	051b      	lsls	r3, r3, #20
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d033      	beq.n	800da4c <_dtoa_r+0x74c>
 800d9e4:	9b07      	ldr	r3, [sp, #28]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	f10a 0a01 	add.w	sl, sl, #1
 800d9ec:	9307      	str	r3, [sp, #28]
 800d9ee:	f04f 0801 	mov.w	r8, #1
 800d9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9f4:	bb73      	cbnz	r3, 800da54 <_dtoa_r+0x754>
 800d9f6:	2001      	movs	r0, #1
 800d9f8:	e034      	b.n	800da64 <_dtoa_r+0x764>
 800d9fa:	bf00      	nop
 800d9fc:	08014ee0 	.word	0x08014ee0
 800da00:	08014eb8 	.word	0x08014eb8
 800da04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800da0a:	e790      	b.n	800d92e <_dtoa_r+0x62e>
 800da0c:	f109 35ff 	add.w	r5, r9, #4294967295
 800da10:	45a8      	cmp	r8, r5
 800da12:	bfbf      	itttt	lt
 800da14:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800da16:	eba5 0808 	sublt.w	r8, r5, r8
 800da1a:	4443      	addlt	r3, r8
 800da1c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800da1e:	bfb6      	itet	lt
 800da20:	46a8      	movlt	r8, r5
 800da22:	eba8 0505 	subge.w	r5, r8, r5
 800da26:	2500      	movlt	r5, #0
 800da28:	f1b9 0f00 	cmp.w	r9, #0
 800da2c:	bfb9      	ittee	lt
 800da2e:	ebaa 0609 	sublt.w	r6, sl, r9
 800da32:	2300      	movlt	r3, #0
 800da34:	4656      	movge	r6, sl
 800da36:	464b      	movge	r3, r9
 800da38:	e77b      	b.n	800d932 <_dtoa_r+0x632>
 800da3a:	4645      	mov	r5, r8
 800da3c:	4656      	mov	r6, sl
 800da3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800da40:	e780      	b.n	800d944 <_dtoa_r+0x644>
 800da42:	4642      	mov	r2, r8
 800da44:	e7a8      	b.n	800d998 <_dtoa_r+0x698>
 800da46:	f04f 0800 	mov.w	r8, #0
 800da4a:	e7d2      	b.n	800d9f2 <_dtoa_r+0x6f2>
 800da4c:	4698      	mov	r8, r3
 800da4e:	e7d0      	b.n	800d9f2 <_dtoa_r+0x6f2>
 800da50:	f04f 0800 	mov.w	r8, #0
 800da54:	692b      	ldr	r3, [r5, #16]
 800da56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800da5a:	6918      	ldr	r0, [r3, #16]
 800da5c:	f000 fdae 	bl	800e5bc <__hi0bits>
 800da60:	f1c0 0020 	rsb	r0, r0, #32
 800da64:	9b07      	ldr	r3, [sp, #28]
 800da66:	4418      	add	r0, r3
 800da68:	f010 001f 	ands.w	r0, r0, #31
 800da6c:	d047      	beq.n	800dafe <_dtoa_r+0x7fe>
 800da6e:	f1c0 0320 	rsb	r3, r0, #32
 800da72:	2b04      	cmp	r3, #4
 800da74:	dd3b      	ble.n	800daee <_dtoa_r+0x7ee>
 800da76:	9b07      	ldr	r3, [sp, #28]
 800da78:	f1c0 001c 	rsb	r0, r0, #28
 800da7c:	4482      	add	sl, r0
 800da7e:	4406      	add	r6, r0
 800da80:	4403      	add	r3, r0
 800da82:	9307      	str	r3, [sp, #28]
 800da84:	f1ba 0f00 	cmp.w	sl, #0
 800da88:	dd05      	ble.n	800da96 <_dtoa_r+0x796>
 800da8a:	4652      	mov	r2, sl
 800da8c:	9901      	ldr	r1, [sp, #4]
 800da8e:	4620      	mov	r0, r4
 800da90:	f000 fed0 	bl	800e834 <__lshift>
 800da94:	9001      	str	r0, [sp, #4]
 800da96:	9b07      	ldr	r3, [sp, #28]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	dd05      	ble.n	800daa8 <_dtoa_r+0x7a8>
 800da9c:	4629      	mov	r1, r5
 800da9e:	461a      	mov	r2, r3
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 fec7 	bl	800e834 <__lshift>
 800daa6:	4605      	mov	r5, r0
 800daa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800daaa:	b353      	cbz	r3, 800db02 <_dtoa_r+0x802>
 800daac:	4629      	mov	r1, r5
 800daae:	9801      	ldr	r0, [sp, #4]
 800dab0:	f000 ff14 	bl	800e8dc <__mcmp>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	da24      	bge.n	800db02 <_dtoa_r+0x802>
 800dab8:	2300      	movs	r3, #0
 800daba:	220a      	movs	r2, #10
 800dabc:	9901      	ldr	r1, [sp, #4]
 800dabe:	4620      	mov	r0, r4
 800dac0:	f000 fd03 	bl	800e4ca <__multadd>
 800dac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac6:	9001      	str	r0, [sp, #4]
 800dac8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 8142 	beq.w	800dd56 <_dtoa_r+0xa56>
 800dad2:	2300      	movs	r3, #0
 800dad4:	4639      	mov	r1, r7
 800dad6:	220a      	movs	r2, #10
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 fcf6 	bl	800e4ca <__multadd>
 800dade:	9b06      	ldr	r3, [sp, #24]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	4607      	mov	r7, r0
 800dae4:	dc4b      	bgt.n	800db7e <_dtoa_r+0x87e>
 800dae6:	9b08      	ldr	r3, [sp, #32]
 800dae8:	2b02      	cmp	r3, #2
 800daea:	dd48      	ble.n	800db7e <_dtoa_r+0x87e>
 800daec:	e011      	b.n	800db12 <_dtoa_r+0x812>
 800daee:	d0c9      	beq.n	800da84 <_dtoa_r+0x784>
 800daf0:	9a07      	ldr	r2, [sp, #28]
 800daf2:	331c      	adds	r3, #28
 800daf4:	441a      	add	r2, r3
 800daf6:	449a      	add	sl, r3
 800daf8:	441e      	add	r6, r3
 800dafa:	4613      	mov	r3, r2
 800dafc:	e7c1      	b.n	800da82 <_dtoa_r+0x782>
 800dafe:	4603      	mov	r3, r0
 800db00:	e7f6      	b.n	800daf0 <_dtoa_r+0x7f0>
 800db02:	f1b9 0f00 	cmp.w	r9, #0
 800db06:	dc34      	bgt.n	800db72 <_dtoa_r+0x872>
 800db08:	9b08      	ldr	r3, [sp, #32]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	dd31      	ble.n	800db72 <_dtoa_r+0x872>
 800db0e:	f8cd 9018 	str.w	r9, [sp, #24]
 800db12:	9b06      	ldr	r3, [sp, #24]
 800db14:	b963      	cbnz	r3, 800db30 <_dtoa_r+0x830>
 800db16:	4629      	mov	r1, r5
 800db18:	2205      	movs	r2, #5
 800db1a:	4620      	mov	r0, r4
 800db1c:	f000 fcd5 	bl	800e4ca <__multadd>
 800db20:	4601      	mov	r1, r0
 800db22:	4605      	mov	r5, r0
 800db24:	9801      	ldr	r0, [sp, #4]
 800db26:	f000 fed9 	bl	800e8dc <__mcmp>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	f73f adfc 	bgt.w	800d728 <_dtoa_r+0x428>
 800db30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db32:	9e04      	ldr	r6, [sp, #16]
 800db34:	ea6f 0b03 	mvn.w	fp, r3
 800db38:	f04f 0900 	mov.w	r9, #0
 800db3c:	4629      	mov	r1, r5
 800db3e:	4620      	mov	r0, r4
 800db40:	f000 fcac 	bl	800e49c <_Bfree>
 800db44:	2f00      	cmp	r7, #0
 800db46:	f43f aebb 	beq.w	800d8c0 <_dtoa_r+0x5c0>
 800db4a:	f1b9 0f00 	cmp.w	r9, #0
 800db4e:	d005      	beq.n	800db5c <_dtoa_r+0x85c>
 800db50:	45b9      	cmp	r9, r7
 800db52:	d003      	beq.n	800db5c <_dtoa_r+0x85c>
 800db54:	4649      	mov	r1, r9
 800db56:	4620      	mov	r0, r4
 800db58:	f000 fca0 	bl	800e49c <_Bfree>
 800db5c:	4639      	mov	r1, r7
 800db5e:	4620      	mov	r0, r4
 800db60:	f000 fc9c 	bl	800e49c <_Bfree>
 800db64:	e6ac      	b.n	800d8c0 <_dtoa_r+0x5c0>
 800db66:	2500      	movs	r5, #0
 800db68:	462f      	mov	r7, r5
 800db6a:	e7e1      	b.n	800db30 <_dtoa_r+0x830>
 800db6c:	469b      	mov	fp, r3
 800db6e:	462f      	mov	r7, r5
 800db70:	e5da      	b.n	800d728 <_dtoa_r+0x428>
 800db72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db74:	f8cd 9018 	str.w	r9, [sp, #24]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f000 80f3 	beq.w	800dd64 <_dtoa_r+0xa64>
 800db7e:	2e00      	cmp	r6, #0
 800db80:	dd05      	ble.n	800db8e <_dtoa_r+0x88e>
 800db82:	4639      	mov	r1, r7
 800db84:	4632      	mov	r2, r6
 800db86:	4620      	mov	r0, r4
 800db88:	f000 fe54 	bl	800e834 <__lshift>
 800db8c:	4607      	mov	r7, r0
 800db8e:	f1b8 0f00 	cmp.w	r8, #0
 800db92:	d04c      	beq.n	800dc2e <_dtoa_r+0x92e>
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	4620      	mov	r0, r4
 800db98:	f000 fc4c 	bl	800e434 <_Balloc>
 800db9c:	693a      	ldr	r2, [r7, #16]
 800db9e:	3202      	adds	r2, #2
 800dba0:	4606      	mov	r6, r0
 800dba2:	0092      	lsls	r2, r2, #2
 800dba4:	f107 010c 	add.w	r1, r7, #12
 800dba8:	300c      	adds	r0, #12
 800dbaa:	f7fd fd95 	bl	800b6d8 <memcpy>
 800dbae:	2201      	movs	r2, #1
 800dbb0:	4631      	mov	r1, r6
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f000 fe3e 	bl	800e834 <__lshift>
 800dbb8:	9b02      	ldr	r3, [sp, #8]
 800dbba:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dbbe:	f003 0301 	and.w	r3, r3, #1
 800dbc2:	46b9      	mov	r9, r7
 800dbc4:	9307      	str	r3, [sp, #28]
 800dbc6:	4607      	mov	r7, r0
 800dbc8:	4629      	mov	r1, r5
 800dbca:	9801      	ldr	r0, [sp, #4]
 800dbcc:	f7ff fb0a 	bl	800d1e4 <quorem>
 800dbd0:	4649      	mov	r1, r9
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dbd8:	9801      	ldr	r0, [sp, #4]
 800dbda:	f000 fe7f 	bl	800e8dc <__mcmp>
 800dbde:	463a      	mov	r2, r7
 800dbe0:	9002      	str	r0, [sp, #8]
 800dbe2:	4629      	mov	r1, r5
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 fe93 	bl	800e910 <__mdiff>
 800dbea:	68c3      	ldr	r3, [r0, #12]
 800dbec:	4602      	mov	r2, r0
 800dbee:	bb03      	cbnz	r3, 800dc32 <_dtoa_r+0x932>
 800dbf0:	4601      	mov	r1, r0
 800dbf2:	9009      	str	r0, [sp, #36]	; 0x24
 800dbf4:	9801      	ldr	r0, [sp, #4]
 800dbf6:	f000 fe71 	bl	800e8dc <__mcmp>
 800dbfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	4611      	mov	r1, r2
 800dc00:	4620      	mov	r0, r4
 800dc02:	9309      	str	r3, [sp, #36]	; 0x24
 800dc04:	f000 fc4a 	bl	800e49c <_Bfree>
 800dc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc0a:	b9a3      	cbnz	r3, 800dc36 <_dtoa_r+0x936>
 800dc0c:	9a08      	ldr	r2, [sp, #32]
 800dc0e:	b992      	cbnz	r2, 800dc36 <_dtoa_r+0x936>
 800dc10:	9a07      	ldr	r2, [sp, #28]
 800dc12:	b982      	cbnz	r2, 800dc36 <_dtoa_r+0x936>
 800dc14:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc18:	d029      	beq.n	800dc6e <_dtoa_r+0x96e>
 800dc1a:	9b02      	ldr	r3, [sp, #8]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	dd01      	ble.n	800dc24 <_dtoa_r+0x924>
 800dc20:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800dc24:	f10a 0601 	add.w	r6, sl, #1
 800dc28:	f88a 8000 	strb.w	r8, [sl]
 800dc2c:	e786      	b.n	800db3c <_dtoa_r+0x83c>
 800dc2e:	4638      	mov	r0, r7
 800dc30:	e7c2      	b.n	800dbb8 <_dtoa_r+0x8b8>
 800dc32:	2301      	movs	r3, #1
 800dc34:	e7e3      	b.n	800dbfe <_dtoa_r+0x8fe>
 800dc36:	9a02      	ldr	r2, [sp, #8]
 800dc38:	2a00      	cmp	r2, #0
 800dc3a:	db04      	blt.n	800dc46 <_dtoa_r+0x946>
 800dc3c:	d124      	bne.n	800dc88 <_dtoa_r+0x988>
 800dc3e:	9a08      	ldr	r2, [sp, #32]
 800dc40:	bb12      	cbnz	r2, 800dc88 <_dtoa_r+0x988>
 800dc42:	9a07      	ldr	r2, [sp, #28]
 800dc44:	bb02      	cbnz	r2, 800dc88 <_dtoa_r+0x988>
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	ddec      	ble.n	800dc24 <_dtoa_r+0x924>
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	9901      	ldr	r1, [sp, #4]
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f000 fdf0 	bl	800e834 <__lshift>
 800dc54:	4629      	mov	r1, r5
 800dc56:	9001      	str	r0, [sp, #4]
 800dc58:	f000 fe40 	bl	800e8dc <__mcmp>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	dc03      	bgt.n	800dc68 <_dtoa_r+0x968>
 800dc60:	d1e0      	bne.n	800dc24 <_dtoa_r+0x924>
 800dc62:	f018 0f01 	tst.w	r8, #1
 800dc66:	d0dd      	beq.n	800dc24 <_dtoa_r+0x924>
 800dc68:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc6c:	d1d8      	bne.n	800dc20 <_dtoa_r+0x920>
 800dc6e:	2339      	movs	r3, #57	; 0x39
 800dc70:	f10a 0601 	add.w	r6, sl, #1
 800dc74:	f88a 3000 	strb.w	r3, [sl]
 800dc78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dc7c:	2b39      	cmp	r3, #57	; 0x39
 800dc7e:	f106 32ff 	add.w	r2, r6, #4294967295
 800dc82:	d04c      	beq.n	800dd1e <_dtoa_r+0xa1e>
 800dc84:	3301      	adds	r3, #1
 800dc86:	e051      	b.n	800dd2c <_dtoa_r+0xa2c>
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f10a 0601 	add.w	r6, sl, #1
 800dc8e:	dd05      	ble.n	800dc9c <_dtoa_r+0x99c>
 800dc90:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc94:	d0eb      	beq.n	800dc6e <_dtoa_r+0x96e>
 800dc96:	f108 0801 	add.w	r8, r8, #1
 800dc9a:	e7c5      	b.n	800dc28 <_dtoa_r+0x928>
 800dc9c:	9b04      	ldr	r3, [sp, #16]
 800dc9e:	9a06      	ldr	r2, [sp, #24]
 800dca0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800dca4:	1af3      	subs	r3, r6, r3
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d021      	beq.n	800dcee <_dtoa_r+0x9ee>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	220a      	movs	r2, #10
 800dcae:	9901      	ldr	r1, [sp, #4]
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f000 fc0a 	bl	800e4ca <__multadd>
 800dcb6:	45b9      	cmp	r9, r7
 800dcb8:	9001      	str	r0, [sp, #4]
 800dcba:	f04f 0300 	mov.w	r3, #0
 800dcbe:	f04f 020a 	mov.w	r2, #10
 800dcc2:	4649      	mov	r1, r9
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	d105      	bne.n	800dcd4 <_dtoa_r+0x9d4>
 800dcc8:	f000 fbff 	bl	800e4ca <__multadd>
 800dccc:	4681      	mov	r9, r0
 800dcce:	4607      	mov	r7, r0
 800dcd0:	46b2      	mov	sl, r6
 800dcd2:	e779      	b.n	800dbc8 <_dtoa_r+0x8c8>
 800dcd4:	f000 fbf9 	bl	800e4ca <__multadd>
 800dcd8:	4639      	mov	r1, r7
 800dcda:	4681      	mov	r9, r0
 800dcdc:	2300      	movs	r3, #0
 800dcde:	220a      	movs	r2, #10
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 fbf2 	bl	800e4ca <__multadd>
 800dce6:	4607      	mov	r7, r0
 800dce8:	e7f2      	b.n	800dcd0 <_dtoa_r+0x9d0>
 800dcea:	f04f 0900 	mov.w	r9, #0
 800dcee:	2201      	movs	r2, #1
 800dcf0:	9901      	ldr	r1, [sp, #4]
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f000 fd9e 	bl	800e834 <__lshift>
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	9001      	str	r0, [sp, #4]
 800dcfc:	f000 fdee 	bl	800e8dc <__mcmp>
 800dd00:	2800      	cmp	r0, #0
 800dd02:	dcb9      	bgt.n	800dc78 <_dtoa_r+0x978>
 800dd04:	d102      	bne.n	800dd0c <_dtoa_r+0xa0c>
 800dd06:	f018 0f01 	tst.w	r8, #1
 800dd0a:	d1b5      	bne.n	800dc78 <_dtoa_r+0x978>
 800dd0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd10:	2b30      	cmp	r3, #48	; 0x30
 800dd12:	f106 32ff 	add.w	r2, r6, #4294967295
 800dd16:	f47f af11 	bne.w	800db3c <_dtoa_r+0x83c>
 800dd1a:	4616      	mov	r6, r2
 800dd1c:	e7f6      	b.n	800dd0c <_dtoa_r+0xa0c>
 800dd1e:	9b04      	ldr	r3, [sp, #16]
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d105      	bne.n	800dd30 <_dtoa_r+0xa30>
 800dd24:	9a04      	ldr	r2, [sp, #16]
 800dd26:	f10b 0b01 	add.w	fp, fp, #1
 800dd2a:	2331      	movs	r3, #49	; 0x31
 800dd2c:	7013      	strb	r3, [r2, #0]
 800dd2e:	e705      	b.n	800db3c <_dtoa_r+0x83c>
 800dd30:	4616      	mov	r6, r2
 800dd32:	e7a1      	b.n	800dc78 <_dtoa_r+0x978>
 800dd34:	4b16      	ldr	r3, [pc, #88]	; (800dd90 <_dtoa_r+0xa90>)
 800dd36:	f7ff bb48 	b.w	800d3ca <_dtoa_r+0xca>
 800dd3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f47f ab23 	bne.w	800d388 <_dtoa_r+0x88>
 800dd42:	4b14      	ldr	r3, [pc, #80]	; (800dd94 <_dtoa_r+0xa94>)
 800dd44:	f7ff bb41 	b.w	800d3ca <_dtoa_r+0xca>
 800dd48:	9b08      	ldr	r3, [sp, #32]
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	f77f ae3b 	ble.w	800d9c6 <_dtoa_r+0x6c6>
 800dd50:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800dd54:	e64f      	b.n	800d9f6 <_dtoa_r+0x6f6>
 800dd56:	9b06      	ldr	r3, [sp, #24]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	dc03      	bgt.n	800dd64 <_dtoa_r+0xa64>
 800dd5c:	9b08      	ldr	r3, [sp, #32]
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	f73f aed7 	bgt.w	800db12 <_dtoa_r+0x812>
 800dd64:	9e04      	ldr	r6, [sp, #16]
 800dd66:	9801      	ldr	r0, [sp, #4]
 800dd68:	4629      	mov	r1, r5
 800dd6a:	f7ff fa3b 	bl	800d1e4 <quorem>
 800dd6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dd72:	f806 8b01 	strb.w	r8, [r6], #1
 800dd76:	9b04      	ldr	r3, [sp, #16]
 800dd78:	9a06      	ldr	r2, [sp, #24]
 800dd7a:	1af3      	subs	r3, r6, r3
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	ddb4      	ble.n	800dcea <_dtoa_r+0x9ea>
 800dd80:	2300      	movs	r3, #0
 800dd82:	220a      	movs	r2, #10
 800dd84:	9901      	ldr	r1, [sp, #4]
 800dd86:	4620      	mov	r0, r4
 800dd88:	f000 fb9f 	bl	800e4ca <__multadd>
 800dd8c:	9001      	str	r0, [sp, #4]
 800dd8e:	e7ea      	b.n	800dd66 <_dtoa_r+0xa66>
 800dd90:	08014e24 	.word	0x08014e24
 800dd94:	08014ea0 	.word	0x08014ea0

0800dd98 <rshift>:
 800dd98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd9a:	6906      	ldr	r6, [r0, #16]
 800dd9c:	114b      	asrs	r3, r1, #5
 800dd9e:	429e      	cmp	r6, r3
 800dda0:	f100 0414 	add.w	r4, r0, #20
 800dda4:	dd30      	ble.n	800de08 <rshift+0x70>
 800dda6:	f011 011f 	ands.w	r1, r1, #31
 800ddaa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ddae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ddb2:	d108      	bne.n	800ddc6 <rshift+0x2e>
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	42b2      	cmp	r2, r6
 800ddb8:	460b      	mov	r3, r1
 800ddba:	d211      	bcs.n	800dde0 <rshift+0x48>
 800ddbc:	f852 3b04 	ldr.w	r3, [r2], #4
 800ddc0:	f841 3b04 	str.w	r3, [r1], #4
 800ddc4:	e7f7      	b.n	800ddb6 <rshift+0x1e>
 800ddc6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ddca:	f1c1 0c20 	rsb	ip, r1, #32
 800ddce:	40cd      	lsrs	r5, r1
 800ddd0:	3204      	adds	r2, #4
 800ddd2:	4623      	mov	r3, r4
 800ddd4:	42b2      	cmp	r2, r6
 800ddd6:	4617      	mov	r7, r2
 800ddd8:	d30c      	bcc.n	800ddf4 <rshift+0x5c>
 800ddda:	601d      	str	r5, [r3, #0]
 800dddc:	b105      	cbz	r5, 800dde0 <rshift+0x48>
 800ddde:	3304      	adds	r3, #4
 800dde0:	1b1a      	subs	r2, r3, r4
 800dde2:	42a3      	cmp	r3, r4
 800dde4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dde8:	bf08      	it	eq
 800ddea:	2300      	moveq	r3, #0
 800ddec:	6102      	str	r2, [r0, #16]
 800ddee:	bf08      	it	eq
 800ddf0:	6143      	streq	r3, [r0, #20]
 800ddf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddf4:	683f      	ldr	r7, [r7, #0]
 800ddf6:	fa07 f70c 	lsl.w	r7, r7, ip
 800ddfa:	433d      	orrs	r5, r7
 800ddfc:	f843 5b04 	str.w	r5, [r3], #4
 800de00:	f852 5b04 	ldr.w	r5, [r2], #4
 800de04:	40cd      	lsrs	r5, r1
 800de06:	e7e5      	b.n	800ddd4 <rshift+0x3c>
 800de08:	4623      	mov	r3, r4
 800de0a:	e7e9      	b.n	800dde0 <rshift+0x48>

0800de0c <__hexdig_fun>:
 800de0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800de10:	2b09      	cmp	r3, #9
 800de12:	d802      	bhi.n	800de1a <__hexdig_fun+0xe>
 800de14:	3820      	subs	r0, #32
 800de16:	b2c0      	uxtb	r0, r0
 800de18:	4770      	bx	lr
 800de1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800de1e:	2b05      	cmp	r3, #5
 800de20:	d801      	bhi.n	800de26 <__hexdig_fun+0x1a>
 800de22:	3847      	subs	r0, #71	; 0x47
 800de24:	e7f7      	b.n	800de16 <__hexdig_fun+0xa>
 800de26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800de2a:	2b05      	cmp	r3, #5
 800de2c:	d801      	bhi.n	800de32 <__hexdig_fun+0x26>
 800de2e:	3827      	subs	r0, #39	; 0x27
 800de30:	e7f1      	b.n	800de16 <__hexdig_fun+0xa>
 800de32:	2000      	movs	r0, #0
 800de34:	4770      	bx	lr

0800de36 <__gethex>:
 800de36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3a:	b08b      	sub	sp, #44	; 0x2c
 800de3c:	468a      	mov	sl, r1
 800de3e:	9002      	str	r0, [sp, #8]
 800de40:	9816      	ldr	r0, [sp, #88]	; 0x58
 800de42:	9306      	str	r3, [sp, #24]
 800de44:	4690      	mov	r8, r2
 800de46:	f000 fad0 	bl	800e3ea <__localeconv_l>
 800de4a:	6803      	ldr	r3, [r0, #0]
 800de4c:	9303      	str	r3, [sp, #12]
 800de4e:	4618      	mov	r0, r3
 800de50:	f7f2 faa6 	bl	80003a0 <strlen>
 800de54:	9b03      	ldr	r3, [sp, #12]
 800de56:	9001      	str	r0, [sp, #4]
 800de58:	4403      	add	r3, r0
 800de5a:	f04f 0b00 	mov.w	fp, #0
 800de5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800de62:	9307      	str	r3, [sp, #28]
 800de64:	f8da 3000 	ldr.w	r3, [sl]
 800de68:	3302      	adds	r3, #2
 800de6a:	461f      	mov	r7, r3
 800de6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800de70:	2830      	cmp	r0, #48	; 0x30
 800de72:	d06c      	beq.n	800df4e <__gethex+0x118>
 800de74:	f7ff ffca 	bl	800de0c <__hexdig_fun>
 800de78:	4604      	mov	r4, r0
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d16a      	bne.n	800df54 <__gethex+0x11e>
 800de7e:	9a01      	ldr	r2, [sp, #4]
 800de80:	9903      	ldr	r1, [sp, #12]
 800de82:	4638      	mov	r0, r7
 800de84:	f001 f836 	bl	800eef4 <strncmp>
 800de88:	2800      	cmp	r0, #0
 800de8a:	d166      	bne.n	800df5a <__gethex+0x124>
 800de8c:	9b01      	ldr	r3, [sp, #4]
 800de8e:	5cf8      	ldrb	r0, [r7, r3]
 800de90:	18fe      	adds	r6, r7, r3
 800de92:	f7ff ffbb 	bl	800de0c <__hexdig_fun>
 800de96:	2800      	cmp	r0, #0
 800de98:	d062      	beq.n	800df60 <__gethex+0x12a>
 800de9a:	4633      	mov	r3, r6
 800de9c:	7818      	ldrb	r0, [r3, #0]
 800de9e:	2830      	cmp	r0, #48	; 0x30
 800dea0:	461f      	mov	r7, r3
 800dea2:	f103 0301 	add.w	r3, r3, #1
 800dea6:	d0f9      	beq.n	800de9c <__gethex+0x66>
 800dea8:	f7ff ffb0 	bl	800de0c <__hexdig_fun>
 800deac:	fab0 f580 	clz	r5, r0
 800deb0:	096d      	lsrs	r5, r5, #5
 800deb2:	4634      	mov	r4, r6
 800deb4:	f04f 0b01 	mov.w	fp, #1
 800deb8:	463a      	mov	r2, r7
 800deba:	4616      	mov	r6, r2
 800debc:	3201      	adds	r2, #1
 800debe:	7830      	ldrb	r0, [r6, #0]
 800dec0:	f7ff ffa4 	bl	800de0c <__hexdig_fun>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d1f8      	bne.n	800deba <__gethex+0x84>
 800dec8:	9a01      	ldr	r2, [sp, #4]
 800deca:	9903      	ldr	r1, [sp, #12]
 800decc:	4630      	mov	r0, r6
 800dece:	f001 f811 	bl	800eef4 <strncmp>
 800ded2:	b950      	cbnz	r0, 800deea <__gethex+0xb4>
 800ded4:	b954      	cbnz	r4, 800deec <__gethex+0xb6>
 800ded6:	9b01      	ldr	r3, [sp, #4]
 800ded8:	18f4      	adds	r4, r6, r3
 800deda:	4622      	mov	r2, r4
 800dedc:	4616      	mov	r6, r2
 800dede:	3201      	adds	r2, #1
 800dee0:	7830      	ldrb	r0, [r6, #0]
 800dee2:	f7ff ff93 	bl	800de0c <__hexdig_fun>
 800dee6:	2800      	cmp	r0, #0
 800dee8:	d1f8      	bne.n	800dedc <__gethex+0xa6>
 800deea:	b10c      	cbz	r4, 800def0 <__gethex+0xba>
 800deec:	1ba4      	subs	r4, r4, r6
 800deee:	00a4      	lsls	r4, r4, #2
 800def0:	7833      	ldrb	r3, [r6, #0]
 800def2:	2b50      	cmp	r3, #80	; 0x50
 800def4:	d001      	beq.n	800defa <__gethex+0xc4>
 800def6:	2b70      	cmp	r3, #112	; 0x70
 800def8:	d140      	bne.n	800df7c <__gethex+0x146>
 800defa:	7873      	ldrb	r3, [r6, #1]
 800defc:	2b2b      	cmp	r3, #43	; 0x2b
 800defe:	d031      	beq.n	800df64 <__gethex+0x12e>
 800df00:	2b2d      	cmp	r3, #45	; 0x2d
 800df02:	d033      	beq.n	800df6c <__gethex+0x136>
 800df04:	1c71      	adds	r1, r6, #1
 800df06:	f04f 0900 	mov.w	r9, #0
 800df0a:	7808      	ldrb	r0, [r1, #0]
 800df0c:	f7ff ff7e 	bl	800de0c <__hexdig_fun>
 800df10:	1e43      	subs	r3, r0, #1
 800df12:	b2db      	uxtb	r3, r3
 800df14:	2b18      	cmp	r3, #24
 800df16:	d831      	bhi.n	800df7c <__gethex+0x146>
 800df18:	f1a0 0210 	sub.w	r2, r0, #16
 800df1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df20:	f7ff ff74 	bl	800de0c <__hexdig_fun>
 800df24:	1e43      	subs	r3, r0, #1
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b18      	cmp	r3, #24
 800df2a:	d922      	bls.n	800df72 <__gethex+0x13c>
 800df2c:	f1b9 0f00 	cmp.w	r9, #0
 800df30:	d000      	beq.n	800df34 <__gethex+0xfe>
 800df32:	4252      	negs	r2, r2
 800df34:	4414      	add	r4, r2
 800df36:	f8ca 1000 	str.w	r1, [sl]
 800df3a:	b30d      	cbz	r5, 800df80 <__gethex+0x14a>
 800df3c:	f1bb 0f00 	cmp.w	fp, #0
 800df40:	bf0c      	ite	eq
 800df42:	2706      	moveq	r7, #6
 800df44:	2700      	movne	r7, #0
 800df46:	4638      	mov	r0, r7
 800df48:	b00b      	add	sp, #44	; 0x2c
 800df4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4e:	f10b 0b01 	add.w	fp, fp, #1
 800df52:	e78a      	b.n	800de6a <__gethex+0x34>
 800df54:	2500      	movs	r5, #0
 800df56:	462c      	mov	r4, r5
 800df58:	e7ae      	b.n	800deb8 <__gethex+0x82>
 800df5a:	463e      	mov	r6, r7
 800df5c:	2501      	movs	r5, #1
 800df5e:	e7c7      	b.n	800def0 <__gethex+0xba>
 800df60:	4604      	mov	r4, r0
 800df62:	e7fb      	b.n	800df5c <__gethex+0x126>
 800df64:	f04f 0900 	mov.w	r9, #0
 800df68:	1cb1      	adds	r1, r6, #2
 800df6a:	e7ce      	b.n	800df0a <__gethex+0xd4>
 800df6c:	f04f 0901 	mov.w	r9, #1
 800df70:	e7fa      	b.n	800df68 <__gethex+0x132>
 800df72:	230a      	movs	r3, #10
 800df74:	fb03 0202 	mla	r2, r3, r2, r0
 800df78:	3a10      	subs	r2, #16
 800df7a:	e7cf      	b.n	800df1c <__gethex+0xe6>
 800df7c:	4631      	mov	r1, r6
 800df7e:	e7da      	b.n	800df36 <__gethex+0x100>
 800df80:	1bf3      	subs	r3, r6, r7
 800df82:	3b01      	subs	r3, #1
 800df84:	4629      	mov	r1, r5
 800df86:	2b07      	cmp	r3, #7
 800df88:	dc49      	bgt.n	800e01e <__gethex+0x1e8>
 800df8a:	9802      	ldr	r0, [sp, #8]
 800df8c:	f000 fa52 	bl	800e434 <_Balloc>
 800df90:	9b01      	ldr	r3, [sp, #4]
 800df92:	f100 0914 	add.w	r9, r0, #20
 800df96:	f04f 0b00 	mov.w	fp, #0
 800df9a:	f1c3 0301 	rsb	r3, r3, #1
 800df9e:	4605      	mov	r5, r0
 800dfa0:	f8cd 9010 	str.w	r9, [sp, #16]
 800dfa4:	46da      	mov	sl, fp
 800dfa6:	9308      	str	r3, [sp, #32]
 800dfa8:	42b7      	cmp	r7, r6
 800dfaa:	d33b      	bcc.n	800e024 <__gethex+0x1ee>
 800dfac:	9804      	ldr	r0, [sp, #16]
 800dfae:	f840 ab04 	str.w	sl, [r0], #4
 800dfb2:	eba0 0009 	sub.w	r0, r0, r9
 800dfb6:	1080      	asrs	r0, r0, #2
 800dfb8:	6128      	str	r0, [r5, #16]
 800dfba:	0147      	lsls	r7, r0, #5
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	f000 fafd 	bl	800e5bc <__hi0bits>
 800dfc2:	f8d8 6000 	ldr.w	r6, [r8]
 800dfc6:	1a3f      	subs	r7, r7, r0
 800dfc8:	42b7      	cmp	r7, r6
 800dfca:	dd64      	ble.n	800e096 <__gethex+0x260>
 800dfcc:	1bbf      	subs	r7, r7, r6
 800dfce:	4639      	mov	r1, r7
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	f000 fe0e 	bl	800ebf2 <__any_on>
 800dfd6:	4682      	mov	sl, r0
 800dfd8:	b178      	cbz	r0, 800dffa <__gethex+0x1c4>
 800dfda:	1e7b      	subs	r3, r7, #1
 800dfdc:	1159      	asrs	r1, r3, #5
 800dfde:	f003 021f 	and.w	r2, r3, #31
 800dfe2:	f04f 0a01 	mov.w	sl, #1
 800dfe6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dfea:	fa0a f202 	lsl.w	r2, sl, r2
 800dfee:	420a      	tst	r2, r1
 800dff0:	d003      	beq.n	800dffa <__gethex+0x1c4>
 800dff2:	4553      	cmp	r3, sl
 800dff4:	dc46      	bgt.n	800e084 <__gethex+0x24e>
 800dff6:	f04f 0a02 	mov.w	sl, #2
 800dffa:	4639      	mov	r1, r7
 800dffc:	4628      	mov	r0, r5
 800dffe:	f7ff fecb 	bl	800dd98 <rshift>
 800e002:	443c      	add	r4, r7
 800e004:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e008:	42a3      	cmp	r3, r4
 800e00a:	da52      	bge.n	800e0b2 <__gethex+0x27c>
 800e00c:	4629      	mov	r1, r5
 800e00e:	9802      	ldr	r0, [sp, #8]
 800e010:	f000 fa44 	bl	800e49c <_Bfree>
 800e014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e016:	2300      	movs	r3, #0
 800e018:	6013      	str	r3, [r2, #0]
 800e01a:	27a3      	movs	r7, #163	; 0xa3
 800e01c:	e793      	b.n	800df46 <__gethex+0x110>
 800e01e:	3101      	adds	r1, #1
 800e020:	105b      	asrs	r3, r3, #1
 800e022:	e7b0      	b.n	800df86 <__gethex+0x150>
 800e024:	1e73      	subs	r3, r6, #1
 800e026:	9305      	str	r3, [sp, #20]
 800e028:	9a07      	ldr	r2, [sp, #28]
 800e02a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e02e:	4293      	cmp	r3, r2
 800e030:	d018      	beq.n	800e064 <__gethex+0x22e>
 800e032:	f1bb 0f20 	cmp.w	fp, #32
 800e036:	d107      	bne.n	800e048 <__gethex+0x212>
 800e038:	9b04      	ldr	r3, [sp, #16]
 800e03a:	f8c3 a000 	str.w	sl, [r3]
 800e03e:	3304      	adds	r3, #4
 800e040:	f04f 0a00 	mov.w	sl, #0
 800e044:	9304      	str	r3, [sp, #16]
 800e046:	46d3      	mov	fp, sl
 800e048:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e04c:	f7ff fede 	bl	800de0c <__hexdig_fun>
 800e050:	f000 000f 	and.w	r0, r0, #15
 800e054:	fa00 f00b 	lsl.w	r0, r0, fp
 800e058:	ea4a 0a00 	orr.w	sl, sl, r0
 800e05c:	f10b 0b04 	add.w	fp, fp, #4
 800e060:	9b05      	ldr	r3, [sp, #20]
 800e062:	e00d      	b.n	800e080 <__gethex+0x24a>
 800e064:	9b05      	ldr	r3, [sp, #20]
 800e066:	9a08      	ldr	r2, [sp, #32]
 800e068:	4413      	add	r3, r2
 800e06a:	42bb      	cmp	r3, r7
 800e06c:	d3e1      	bcc.n	800e032 <__gethex+0x1fc>
 800e06e:	4618      	mov	r0, r3
 800e070:	9a01      	ldr	r2, [sp, #4]
 800e072:	9903      	ldr	r1, [sp, #12]
 800e074:	9309      	str	r3, [sp, #36]	; 0x24
 800e076:	f000 ff3d 	bl	800eef4 <strncmp>
 800e07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d1d8      	bne.n	800e032 <__gethex+0x1fc>
 800e080:	461e      	mov	r6, r3
 800e082:	e791      	b.n	800dfa8 <__gethex+0x172>
 800e084:	1eb9      	subs	r1, r7, #2
 800e086:	4628      	mov	r0, r5
 800e088:	f000 fdb3 	bl	800ebf2 <__any_on>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	d0b2      	beq.n	800dff6 <__gethex+0x1c0>
 800e090:	f04f 0a03 	mov.w	sl, #3
 800e094:	e7b1      	b.n	800dffa <__gethex+0x1c4>
 800e096:	da09      	bge.n	800e0ac <__gethex+0x276>
 800e098:	1bf7      	subs	r7, r6, r7
 800e09a:	4629      	mov	r1, r5
 800e09c:	463a      	mov	r2, r7
 800e09e:	9802      	ldr	r0, [sp, #8]
 800e0a0:	f000 fbc8 	bl	800e834 <__lshift>
 800e0a4:	1be4      	subs	r4, r4, r7
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	f100 0914 	add.w	r9, r0, #20
 800e0ac:	f04f 0a00 	mov.w	sl, #0
 800e0b0:	e7a8      	b.n	800e004 <__gethex+0x1ce>
 800e0b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e0b6:	42a0      	cmp	r0, r4
 800e0b8:	dd6a      	ble.n	800e190 <__gethex+0x35a>
 800e0ba:	1b04      	subs	r4, r0, r4
 800e0bc:	42a6      	cmp	r6, r4
 800e0be:	dc2e      	bgt.n	800e11e <__gethex+0x2e8>
 800e0c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d022      	beq.n	800e10e <__gethex+0x2d8>
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d024      	beq.n	800e116 <__gethex+0x2e0>
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d115      	bne.n	800e0fc <__gethex+0x2c6>
 800e0d0:	42a6      	cmp	r6, r4
 800e0d2:	d113      	bne.n	800e0fc <__gethex+0x2c6>
 800e0d4:	2e01      	cmp	r6, #1
 800e0d6:	dc0b      	bgt.n	800e0f0 <__gethex+0x2ba>
 800e0d8:	9a06      	ldr	r2, [sp, #24]
 800e0da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0de:	6013      	str	r3, [r2, #0]
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	612b      	str	r3, [r5, #16]
 800e0e4:	f8c9 3000 	str.w	r3, [r9]
 800e0e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0ea:	2762      	movs	r7, #98	; 0x62
 800e0ec:	601d      	str	r5, [r3, #0]
 800e0ee:	e72a      	b.n	800df46 <__gethex+0x110>
 800e0f0:	1e71      	subs	r1, r6, #1
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	f000 fd7d 	bl	800ebf2 <__any_on>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d1ed      	bne.n	800e0d8 <__gethex+0x2a2>
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	9802      	ldr	r0, [sp, #8]
 800e100:	f000 f9cc 	bl	800e49c <_Bfree>
 800e104:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e106:	2300      	movs	r3, #0
 800e108:	6013      	str	r3, [r2, #0]
 800e10a:	2750      	movs	r7, #80	; 0x50
 800e10c:	e71b      	b.n	800df46 <__gethex+0x110>
 800e10e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e110:	2b00      	cmp	r3, #0
 800e112:	d0e1      	beq.n	800e0d8 <__gethex+0x2a2>
 800e114:	e7f2      	b.n	800e0fc <__gethex+0x2c6>
 800e116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d1dd      	bne.n	800e0d8 <__gethex+0x2a2>
 800e11c:	e7ee      	b.n	800e0fc <__gethex+0x2c6>
 800e11e:	1e67      	subs	r7, r4, #1
 800e120:	f1ba 0f00 	cmp.w	sl, #0
 800e124:	d131      	bne.n	800e18a <__gethex+0x354>
 800e126:	b127      	cbz	r7, 800e132 <__gethex+0x2fc>
 800e128:	4639      	mov	r1, r7
 800e12a:	4628      	mov	r0, r5
 800e12c:	f000 fd61 	bl	800ebf2 <__any_on>
 800e130:	4682      	mov	sl, r0
 800e132:	117a      	asrs	r2, r7, #5
 800e134:	2301      	movs	r3, #1
 800e136:	f007 071f 	and.w	r7, r7, #31
 800e13a:	fa03 f707 	lsl.w	r7, r3, r7
 800e13e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e142:	4621      	mov	r1, r4
 800e144:	421f      	tst	r7, r3
 800e146:	4628      	mov	r0, r5
 800e148:	bf18      	it	ne
 800e14a:	f04a 0a02 	orrne.w	sl, sl, #2
 800e14e:	1b36      	subs	r6, r6, r4
 800e150:	f7ff fe22 	bl	800dd98 <rshift>
 800e154:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e158:	2702      	movs	r7, #2
 800e15a:	f1ba 0f00 	cmp.w	sl, #0
 800e15e:	d048      	beq.n	800e1f2 <__gethex+0x3bc>
 800e160:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e164:	2b02      	cmp	r3, #2
 800e166:	d015      	beq.n	800e194 <__gethex+0x35e>
 800e168:	2b03      	cmp	r3, #3
 800e16a:	d017      	beq.n	800e19c <__gethex+0x366>
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d109      	bne.n	800e184 <__gethex+0x34e>
 800e170:	f01a 0f02 	tst.w	sl, #2
 800e174:	d006      	beq.n	800e184 <__gethex+0x34e>
 800e176:	f8d9 3000 	ldr.w	r3, [r9]
 800e17a:	ea4a 0a03 	orr.w	sl, sl, r3
 800e17e:	f01a 0f01 	tst.w	sl, #1
 800e182:	d10e      	bne.n	800e1a2 <__gethex+0x36c>
 800e184:	f047 0710 	orr.w	r7, r7, #16
 800e188:	e033      	b.n	800e1f2 <__gethex+0x3bc>
 800e18a:	f04f 0a01 	mov.w	sl, #1
 800e18e:	e7d0      	b.n	800e132 <__gethex+0x2fc>
 800e190:	2701      	movs	r7, #1
 800e192:	e7e2      	b.n	800e15a <__gethex+0x324>
 800e194:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e196:	f1c3 0301 	rsb	r3, r3, #1
 800e19a:	9315      	str	r3, [sp, #84]	; 0x54
 800e19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d0f0      	beq.n	800e184 <__gethex+0x34e>
 800e1a2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e1a6:	f105 0314 	add.w	r3, r5, #20
 800e1aa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e1ae:	eb03 010a 	add.w	r1, r3, sl
 800e1b2:	f04f 0c00 	mov.w	ip, #0
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e1c0:	d01c      	beq.n	800e1fc <__gethex+0x3c6>
 800e1c2:	3201      	adds	r2, #1
 800e1c4:	6002      	str	r2, [r0, #0]
 800e1c6:	2f02      	cmp	r7, #2
 800e1c8:	f105 0314 	add.w	r3, r5, #20
 800e1cc:	d138      	bne.n	800e240 <__gethex+0x40a>
 800e1ce:	f8d8 2000 	ldr.w	r2, [r8]
 800e1d2:	3a01      	subs	r2, #1
 800e1d4:	42b2      	cmp	r2, r6
 800e1d6:	d10a      	bne.n	800e1ee <__gethex+0x3b8>
 800e1d8:	1171      	asrs	r1, r6, #5
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f006 061f 	and.w	r6, r6, #31
 800e1e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1e4:	fa02 f606 	lsl.w	r6, r2, r6
 800e1e8:	421e      	tst	r6, r3
 800e1ea:	bf18      	it	ne
 800e1ec:	4617      	movne	r7, r2
 800e1ee:	f047 0720 	orr.w	r7, r7, #32
 800e1f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e1f4:	601d      	str	r5, [r3, #0]
 800e1f6:	9b06      	ldr	r3, [sp, #24]
 800e1f8:	601c      	str	r4, [r3, #0]
 800e1fa:	e6a4      	b.n	800df46 <__gethex+0x110>
 800e1fc:	4299      	cmp	r1, r3
 800e1fe:	f843 cc04 	str.w	ip, [r3, #-4]
 800e202:	d8d8      	bhi.n	800e1b6 <__gethex+0x380>
 800e204:	68ab      	ldr	r3, [r5, #8]
 800e206:	4599      	cmp	r9, r3
 800e208:	db12      	blt.n	800e230 <__gethex+0x3fa>
 800e20a:	6869      	ldr	r1, [r5, #4]
 800e20c:	9802      	ldr	r0, [sp, #8]
 800e20e:	3101      	adds	r1, #1
 800e210:	f000 f910 	bl	800e434 <_Balloc>
 800e214:	692a      	ldr	r2, [r5, #16]
 800e216:	3202      	adds	r2, #2
 800e218:	f105 010c 	add.w	r1, r5, #12
 800e21c:	4683      	mov	fp, r0
 800e21e:	0092      	lsls	r2, r2, #2
 800e220:	300c      	adds	r0, #12
 800e222:	f7fd fa59 	bl	800b6d8 <memcpy>
 800e226:	4629      	mov	r1, r5
 800e228:	9802      	ldr	r0, [sp, #8]
 800e22a:	f000 f937 	bl	800e49c <_Bfree>
 800e22e:	465d      	mov	r5, fp
 800e230:	692b      	ldr	r3, [r5, #16]
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e238:	612a      	str	r2, [r5, #16]
 800e23a:	2201      	movs	r2, #1
 800e23c:	615a      	str	r2, [r3, #20]
 800e23e:	e7c2      	b.n	800e1c6 <__gethex+0x390>
 800e240:	692a      	ldr	r2, [r5, #16]
 800e242:	454a      	cmp	r2, r9
 800e244:	dd0b      	ble.n	800e25e <__gethex+0x428>
 800e246:	2101      	movs	r1, #1
 800e248:	4628      	mov	r0, r5
 800e24a:	f7ff fda5 	bl	800dd98 <rshift>
 800e24e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e252:	3401      	adds	r4, #1
 800e254:	42a3      	cmp	r3, r4
 800e256:	f6ff aed9 	blt.w	800e00c <__gethex+0x1d6>
 800e25a:	2701      	movs	r7, #1
 800e25c:	e7c7      	b.n	800e1ee <__gethex+0x3b8>
 800e25e:	f016 061f 	ands.w	r6, r6, #31
 800e262:	d0fa      	beq.n	800e25a <__gethex+0x424>
 800e264:	449a      	add	sl, r3
 800e266:	f1c6 0620 	rsb	r6, r6, #32
 800e26a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e26e:	f000 f9a5 	bl	800e5bc <__hi0bits>
 800e272:	42b0      	cmp	r0, r6
 800e274:	dbe7      	blt.n	800e246 <__gethex+0x410>
 800e276:	e7f0      	b.n	800e25a <__gethex+0x424>

0800e278 <L_shift>:
 800e278:	f1c2 0208 	rsb	r2, r2, #8
 800e27c:	0092      	lsls	r2, r2, #2
 800e27e:	b570      	push	{r4, r5, r6, lr}
 800e280:	f1c2 0620 	rsb	r6, r2, #32
 800e284:	6843      	ldr	r3, [r0, #4]
 800e286:	6804      	ldr	r4, [r0, #0]
 800e288:	fa03 f506 	lsl.w	r5, r3, r6
 800e28c:	432c      	orrs	r4, r5
 800e28e:	40d3      	lsrs	r3, r2
 800e290:	6004      	str	r4, [r0, #0]
 800e292:	f840 3f04 	str.w	r3, [r0, #4]!
 800e296:	4288      	cmp	r0, r1
 800e298:	d3f4      	bcc.n	800e284 <L_shift+0xc>
 800e29a:	bd70      	pop	{r4, r5, r6, pc}

0800e29c <__match>:
 800e29c:	b530      	push	{r4, r5, lr}
 800e29e:	6803      	ldr	r3, [r0, #0]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2a6:	b914      	cbnz	r4, 800e2ae <__match+0x12>
 800e2a8:	6003      	str	r3, [r0, #0]
 800e2aa:	2001      	movs	r0, #1
 800e2ac:	bd30      	pop	{r4, r5, pc}
 800e2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e2b6:	2d19      	cmp	r5, #25
 800e2b8:	bf98      	it	ls
 800e2ba:	3220      	addls	r2, #32
 800e2bc:	42a2      	cmp	r2, r4
 800e2be:	d0f0      	beq.n	800e2a2 <__match+0x6>
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	e7f3      	b.n	800e2ac <__match+0x10>

0800e2c4 <__hexnan>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	680b      	ldr	r3, [r1, #0]
 800e2ca:	6801      	ldr	r1, [r0, #0]
 800e2cc:	115f      	asrs	r7, r3, #5
 800e2ce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e2d2:	f013 031f 	ands.w	r3, r3, #31
 800e2d6:	b087      	sub	sp, #28
 800e2d8:	bf18      	it	ne
 800e2da:	3704      	addne	r7, #4
 800e2dc:	2500      	movs	r5, #0
 800e2de:	1f3e      	subs	r6, r7, #4
 800e2e0:	4682      	mov	sl, r0
 800e2e2:	4690      	mov	r8, r2
 800e2e4:	9301      	str	r3, [sp, #4]
 800e2e6:	f847 5c04 	str.w	r5, [r7, #-4]
 800e2ea:	46b1      	mov	r9, r6
 800e2ec:	4634      	mov	r4, r6
 800e2ee:	9502      	str	r5, [sp, #8]
 800e2f0:	46ab      	mov	fp, r5
 800e2f2:	784a      	ldrb	r2, [r1, #1]
 800e2f4:	1c4b      	adds	r3, r1, #1
 800e2f6:	9303      	str	r3, [sp, #12]
 800e2f8:	b342      	cbz	r2, 800e34c <__hexnan+0x88>
 800e2fa:	4610      	mov	r0, r2
 800e2fc:	9105      	str	r1, [sp, #20]
 800e2fe:	9204      	str	r2, [sp, #16]
 800e300:	f7ff fd84 	bl	800de0c <__hexdig_fun>
 800e304:	2800      	cmp	r0, #0
 800e306:	d143      	bne.n	800e390 <__hexnan+0xcc>
 800e308:	9a04      	ldr	r2, [sp, #16]
 800e30a:	9905      	ldr	r1, [sp, #20]
 800e30c:	2a20      	cmp	r2, #32
 800e30e:	d818      	bhi.n	800e342 <__hexnan+0x7e>
 800e310:	9b02      	ldr	r3, [sp, #8]
 800e312:	459b      	cmp	fp, r3
 800e314:	dd13      	ble.n	800e33e <__hexnan+0x7a>
 800e316:	454c      	cmp	r4, r9
 800e318:	d206      	bcs.n	800e328 <__hexnan+0x64>
 800e31a:	2d07      	cmp	r5, #7
 800e31c:	dc04      	bgt.n	800e328 <__hexnan+0x64>
 800e31e:	462a      	mov	r2, r5
 800e320:	4649      	mov	r1, r9
 800e322:	4620      	mov	r0, r4
 800e324:	f7ff ffa8 	bl	800e278 <L_shift>
 800e328:	4544      	cmp	r4, r8
 800e32a:	d944      	bls.n	800e3b6 <__hexnan+0xf2>
 800e32c:	2300      	movs	r3, #0
 800e32e:	f1a4 0904 	sub.w	r9, r4, #4
 800e332:	f844 3c04 	str.w	r3, [r4, #-4]
 800e336:	f8cd b008 	str.w	fp, [sp, #8]
 800e33a:	464c      	mov	r4, r9
 800e33c:	461d      	mov	r5, r3
 800e33e:	9903      	ldr	r1, [sp, #12]
 800e340:	e7d7      	b.n	800e2f2 <__hexnan+0x2e>
 800e342:	2a29      	cmp	r2, #41	; 0x29
 800e344:	d14a      	bne.n	800e3dc <__hexnan+0x118>
 800e346:	3102      	adds	r1, #2
 800e348:	f8ca 1000 	str.w	r1, [sl]
 800e34c:	f1bb 0f00 	cmp.w	fp, #0
 800e350:	d044      	beq.n	800e3dc <__hexnan+0x118>
 800e352:	454c      	cmp	r4, r9
 800e354:	d206      	bcs.n	800e364 <__hexnan+0xa0>
 800e356:	2d07      	cmp	r5, #7
 800e358:	dc04      	bgt.n	800e364 <__hexnan+0xa0>
 800e35a:	462a      	mov	r2, r5
 800e35c:	4649      	mov	r1, r9
 800e35e:	4620      	mov	r0, r4
 800e360:	f7ff ff8a 	bl	800e278 <L_shift>
 800e364:	4544      	cmp	r4, r8
 800e366:	d928      	bls.n	800e3ba <__hexnan+0xf6>
 800e368:	4643      	mov	r3, r8
 800e36a:	f854 2b04 	ldr.w	r2, [r4], #4
 800e36e:	f843 2b04 	str.w	r2, [r3], #4
 800e372:	42a6      	cmp	r6, r4
 800e374:	d2f9      	bcs.n	800e36a <__hexnan+0xa6>
 800e376:	2200      	movs	r2, #0
 800e378:	f843 2b04 	str.w	r2, [r3], #4
 800e37c:	429e      	cmp	r6, r3
 800e37e:	d2fb      	bcs.n	800e378 <__hexnan+0xb4>
 800e380:	6833      	ldr	r3, [r6, #0]
 800e382:	b91b      	cbnz	r3, 800e38c <__hexnan+0xc8>
 800e384:	4546      	cmp	r6, r8
 800e386:	d127      	bne.n	800e3d8 <__hexnan+0x114>
 800e388:	2301      	movs	r3, #1
 800e38a:	6033      	str	r3, [r6, #0]
 800e38c:	2005      	movs	r0, #5
 800e38e:	e026      	b.n	800e3de <__hexnan+0x11a>
 800e390:	3501      	adds	r5, #1
 800e392:	2d08      	cmp	r5, #8
 800e394:	f10b 0b01 	add.w	fp, fp, #1
 800e398:	dd06      	ble.n	800e3a8 <__hexnan+0xe4>
 800e39a:	4544      	cmp	r4, r8
 800e39c:	d9cf      	bls.n	800e33e <__hexnan+0x7a>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3a4:	2501      	movs	r5, #1
 800e3a6:	3c04      	subs	r4, #4
 800e3a8:	6822      	ldr	r2, [r4, #0]
 800e3aa:	f000 000f 	and.w	r0, r0, #15
 800e3ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e3b2:	6020      	str	r0, [r4, #0]
 800e3b4:	e7c3      	b.n	800e33e <__hexnan+0x7a>
 800e3b6:	2508      	movs	r5, #8
 800e3b8:	e7c1      	b.n	800e33e <__hexnan+0x7a>
 800e3ba:	9b01      	ldr	r3, [sp, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d0df      	beq.n	800e380 <__hexnan+0xbc>
 800e3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c4:	f1c3 0320 	rsb	r3, r3, #32
 800e3c8:	fa22 f303 	lsr.w	r3, r2, r3
 800e3cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e3d0:	401a      	ands	r2, r3
 800e3d2:	f847 2c04 	str.w	r2, [r7, #-4]
 800e3d6:	e7d3      	b.n	800e380 <__hexnan+0xbc>
 800e3d8:	3e04      	subs	r6, #4
 800e3da:	e7d1      	b.n	800e380 <__hexnan+0xbc>
 800e3dc:	2004      	movs	r0, #4
 800e3de:	b007      	add	sp, #28
 800e3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3e4 <__locale_ctype_ptr_l>:
 800e3e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e3e8:	4770      	bx	lr

0800e3ea <__localeconv_l>:
 800e3ea:	30f0      	adds	r0, #240	; 0xf0
 800e3ec:	4770      	bx	lr
	...

0800e3f0 <_localeconv_r>:
 800e3f0:	4b04      	ldr	r3, [pc, #16]	; (800e404 <_localeconv_r+0x14>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6a18      	ldr	r0, [r3, #32]
 800e3f6:	4b04      	ldr	r3, [pc, #16]	; (800e408 <_localeconv_r+0x18>)
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	bf08      	it	eq
 800e3fc:	4618      	moveq	r0, r3
 800e3fe:	30f0      	adds	r0, #240	; 0xf0
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	24000010 	.word	0x24000010
 800e408:	24000074 	.word	0x24000074

0800e40c <__ascii_mbtowc>:
 800e40c:	b082      	sub	sp, #8
 800e40e:	b901      	cbnz	r1, 800e412 <__ascii_mbtowc+0x6>
 800e410:	a901      	add	r1, sp, #4
 800e412:	b142      	cbz	r2, 800e426 <__ascii_mbtowc+0x1a>
 800e414:	b14b      	cbz	r3, 800e42a <__ascii_mbtowc+0x1e>
 800e416:	7813      	ldrb	r3, [r2, #0]
 800e418:	600b      	str	r3, [r1, #0]
 800e41a:	7812      	ldrb	r2, [r2, #0]
 800e41c:	1c10      	adds	r0, r2, #0
 800e41e:	bf18      	it	ne
 800e420:	2001      	movne	r0, #1
 800e422:	b002      	add	sp, #8
 800e424:	4770      	bx	lr
 800e426:	4610      	mov	r0, r2
 800e428:	e7fb      	b.n	800e422 <__ascii_mbtowc+0x16>
 800e42a:	f06f 0001 	mvn.w	r0, #1
 800e42e:	e7f8      	b.n	800e422 <__ascii_mbtowc+0x16>

0800e430 <__malloc_lock>:
 800e430:	4770      	bx	lr

0800e432 <__malloc_unlock>:
 800e432:	4770      	bx	lr

0800e434 <_Balloc>:
 800e434:	b570      	push	{r4, r5, r6, lr}
 800e436:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e438:	4604      	mov	r4, r0
 800e43a:	460e      	mov	r6, r1
 800e43c:	b93d      	cbnz	r5, 800e44e <_Balloc+0x1a>
 800e43e:	2010      	movs	r0, #16
 800e440:	f7fd f93a 	bl	800b6b8 <malloc>
 800e444:	6260      	str	r0, [r4, #36]	; 0x24
 800e446:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e44a:	6005      	str	r5, [r0, #0]
 800e44c:	60c5      	str	r5, [r0, #12]
 800e44e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e450:	68eb      	ldr	r3, [r5, #12]
 800e452:	b183      	cbz	r3, 800e476 <_Balloc+0x42>
 800e454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e45c:	b9b8      	cbnz	r0, 800e48e <_Balloc+0x5a>
 800e45e:	2101      	movs	r1, #1
 800e460:	fa01 f506 	lsl.w	r5, r1, r6
 800e464:	1d6a      	adds	r2, r5, #5
 800e466:	0092      	lsls	r2, r2, #2
 800e468:	4620      	mov	r0, r4
 800e46a:	f000 fbe3 	bl	800ec34 <_calloc_r>
 800e46e:	b160      	cbz	r0, 800e48a <_Balloc+0x56>
 800e470:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e474:	e00e      	b.n	800e494 <_Balloc+0x60>
 800e476:	2221      	movs	r2, #33	; 0x21
 800e478:	2104      	movs	r1, #4
 800e47a:	4620      	mov	r0, r4
 800e47c:	f000 fbda 	bl	800ec34 <_calloc_r>
 800e480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e482:	60e8      	str	r0, [r5, #12]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d1e4      	bne.n	800e454 <_Balloc+0x20>
 800e48a:	2000      	movs	r0, #0
 800e48c:	bd70      	pop	{r4, r5, r6, pc}
 800e48e:	6802      	ldr	r2, [r0, #0]
 800e490:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e494:	2300      	movs	r3, #0
 800e496:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e49a:	e7f7      	b.n	800e48c <_Balloc+0x58>

0800e49c <_Bfree>:
 800e49c:	b570      	push	{r4, r5, r6, lr}
 800e49e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e4a0:	4606      	mov	r6, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	b93c      	cbnz	r4, 800e4b6 <_Bfree+0x1a>
 800e4a6:	2010      	movs	r0, #16
 800e4a8:	f7fd f906 	bl	800b6b8 <malloc>
 800e4ac:	6270      	str	r0, [r6, #36]	; 0x24
 800e4ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4b2:	6004      	str	r4, [r0, #0]
 800e4b4:	60c4      	str	r4, [r0, #12]
 800e4b6:	b13d      	cbz	r5, 800e4c8 <_Bfree+0x2c>
 800e4b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e4ba:	686a      	ldr	r2, [r5, #4]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4c2:	6029      	str	r1, [r5, #0]
 800e4c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e4c8:	bd70      	pop	{r4, r5, r6, pc}

0800e4ca <__multadd>:
 800e4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ce:	690d      	ldr	r5, [r1, #16]
 800e4d0:	461f      	mov	r7, r3
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	f101 0c14 	add.w	ip, r1, #20
 800e4da:	2300      	movs	r3, #0
 800e4dc:	f8dc 0000 	ldr.w	r0, [ip]
 800e4e0:	b281      	uxth	r1, r0
 800e4e2:	fb02 7101 	mla	r1, r2, r1, r7
 800e4e6:	0c0f      	lsrs	r7, r1, #16
 800e4e8:	0c00      	lsrs	r0, r0, #16
 800e4ea:	fb02 7000 	mla	r0, r2, r0, r7
 800e4ee:	b289      	uxth	r1, r1
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e4f6:	429d      	cmp	r5, r3
 800e4f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e4fc:	f84c 1b04 	str.w	r1, [ip], #4
 800e500:	dcec      	bgt.n	800e4dc <__multadd+0x12>
 800e502:	b1d7      	cbz	r7, 800e53a <__multadd+0x70>
 800e504:	68a3      	ldr	r3, [r4, #8]
 800e506:	42ab      	cmp	r3, r5
 800e508:	dc12      	bgt.n	800e530 <__multadd+0x66>
 800e50a:	6861      	ldr	r1, [r4, #4]
 800e50c:	4630      	mov	r0, r6
 800e50e:	3101      	adds	r1, #1
 800e510:	f7ff ff90 	bl	800e434 <_Balloc>
 800e514:	6922      	ldr	r2, [r4, #16]
 800e516:	3202      	adds	r2, #2
 800e518:	f104 010c 	add.w	r1, r4, #12
 800e51c:	4680      	mov	r8, r0
 800e51e:	0092      	lsls	r2, r2, #2
 800e520:	300c      	adds	r0, #12
 800e522:	f7fd f8d9 	bl	800b6d8 <memcpy>
 800e526:	4621      	mov	r1, r4
 800e528:	4630      	mov	r0, r6
 800e52a:	f7ff ffb7 	bl	800e49c <_Bfree>
 800e52e:	4644      	mov	r4, r8
 800e530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e534:	3501      	adds	r5, #1
 800e536:	615f      	str	r7, [r3, #20]
 800e538:	6125      	str	r5, [r4, #16]
 800e53a:	4620      	mov	r0, r4
 800e53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e540 <__s2b>:
 800e540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e544:	460c      	mov	r4, r1
 800e546:	4615      	mov	r5, r2
 800e548:	461f      	mov	r7, r3
 800e54a:	2209      	movs	r2, #9
 800e54c:	3308      	adds	r3, #8
 800e54e:	4606      	mov	r6, r0
 800e550:	fb93 f3f2 	sdiv	r3, r3, r2
 800e554:	2100      	movs	r1, #0
 800e556:	2201      	movs	r2, #1
 800e558:	429a      	cmp	r2, r3
 800e55a:	db20      	blt.n	800e59e <__s2b+0x5e>
 800e55c:	4630      	mov	r0, r6
 800e55e:	f7ff ff69 	bl	800e434 <_Balloc>
 800e562:	9b08      	ldr	r3, [sp, #32]
 800e564:	6143      	str	r3, [r0, #20]
 800e566:	2d09      	cmp	r5, #9
 800e568:	f04f 0301 	mov.w	r3, #1
 800e56c:	6103      	str	r3, [r0, #16]
 800e56e:	dd19      	ble.n	800e5a4 <__s2b+0x64>
 800e570:	f104 0809 	add.w	r8, r4, #9
 800e574:	46c1      	mov	r9, r8
 800e576:	442c      	add	r4, r5
 800e578:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e57c:	4601      	mov	r1, r0
 800e57e:	3b30      	subs	r3, #48	; 0x30
 800e580:	220a      	movs	r2, #10
 800e582:	4630      	mov	r0, r6
 800e584:	f7ff ffa1 	bl	800e4ca <__multadd>
 800e588:	45a1      	cmp	r9, r4
 800e58a:	d1f5      	bne.n	800e578 <__s2b+0x38>
 800e58c:	eb08 0405 	add.w	r4, r8, r5
 800e590:	3c08      	subs	r4, #8
 800e592:	1b2d      	subs	r5, r5, r4
 800e594:	1963      	adds	r3, r4, r5
 800e596:	42bb      	cmp	r3, r7
 800e598:	db07      	blt.n	800e5aa <__s2b+0x6a>
 800e59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e59e:	0052      	lsls	r2, r2, #1
 800e5a0:	3101      	adds	r1, #1
 800e5a2:	e7d9      	b.n	800e558 <__s2b+0x18>
 800e5a4:	340a      	adds	r4, #10
 800e5a6:	2509      	movs	r5, #9
 800e5a8:	e7f3      	b.n	800e592 <__s2b+0x52>
 800e5aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5ae:	4601      	mov	r1, r0
 800e5b0:	3b30      	subs	r3, #48	; 0x30
 800e5b2:	220a      	movs	r2, #10
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7ff ff88 	bl	800e4ca <__multadd>
 800e5ba:	e7eb      	b.n	800e594 <__s2b+0x54>

0800e5bc <__hi0bits>:
 800e5bc:	0c02      	lsrs	r2, r0, #16
 800e5be:	0412      	lsls	r2, r2, #16
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	b9b2      	cbnz	r2, 800e5f2 <__hi0bits+0x36>
 800e5c4:	0403      	lsls	r3, r0, #16
 800e5c6:	2010      	movs	r0, #16
 800e5c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e5cc:	bf04      	itt	eq
 800e5ce:	021b      	lsleq	r3, r3, #8
 800e5d0:	3008      	addeq	r0, #8
 800e5d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e5d6:	bf04      	itt	eq
 800e5d8:	011b      	lsleq	r3, r3, #4
 800e5da:	3004      	addeq	r0, #4
 800e5dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e5e0:	bf04      	itt	eq
 800e5e2:	009b      	lsleq	r3, r3, #2
 800e5e4:	3002      	addeq	r0, #2
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	db06      	blt.n	800e5f8 <__hi0bits+0x3c>
 800e5ea:	005b      	lsls	r3, r3, #1
 800e5ec:	d503      	bpl.n	800e5f6 <__hi0bits+0x3a>
 800e5ee:	3001      	adds	r0, #1
 800e5f0:	4770      	bx	lr
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	e7e8      	b.n	800e5c8 <__hi0bits+0xc>
 800e5f6:	2020      	movs	r0, #32
 800e5f8:	4770      	bx	lr

0800e5fa <__lo0bits>:
 800e5fa:	6803      	ldr	r3, [r0, #0]
 800e5fc:	f013 0207 	ands.w	r2, r3, #7
 800e600:	4601      	mov	r1, r0
 800e602:	d00b      	beq.n	800e61c <__lo0bits+0x22>
 800e604:	07da      	lsls	r2, r3, #31
 800e606:	d423      	bmi.n	800e650 <__lo0bits+0x56>
 800e608:	0798      	lsls	r0, r3, #30
 800e60a:	bf49      	itett	mi
 800e60c:	085b      	lsrmi	r3, r3, #1
 800e60e:	089b      	lsrpl	r3, r3, #2
 800e610:	2001      	movmi	r0, #1
 800e612:	600b      	strmi	r3, [r1, #0]
 800e614:	bf5c      	itt	pl
 800e616:	600b      	strpl	r3, [r1, #0]
 800e618:	2002      	movpl	r0, #2
 800e61a:	4770      	bx	lr
 800e61c:	b298      	uxth	r0, r3
 800e61e:	b9a8      	cbnz	r0, 800e64c <__lo0bits+0x52>
 800e620:	0c1b      	lsrs	r3, r3, #16
 800e622:	2010      	movs	r0, #16
 800e624:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e628:	bf04      	itt	eq
 800e62a:	0a1b      	lsreq	r3, r3, #8
 800e62c:	3008      	addeq	r0, #8
 800e62e:	071a      	lsls	r2, r3, #28
 800e630:	bf04      	itt	eq
 800e632:	091b      	lsreq	r3, r3, #4
 800e634:	3004      	addeq	r0, #4
 800e636:	079a      	lsls	r2, r3, #30
 800e638:	bf04      	itt	eq
 800e63a:	089b      	lsreq	r3, r3, #2
 800e63c:	3002      	addeq	r0, #2
 800e63e:	07da      	lsls	r2, r3, #31
 800e640:	d402      	bmi.n	800e648 <__lo0bits+0x4e>
 800e642:	085b      	lsrs	r3, r3, #1
 800e644:	d006      	beq.n	800e654 <__lo0bits+0x5a>
 800e646:	3001      	adds	r0, #1
 800e648:	600b      	str	r3, [r1, #0]
 800e64a:	4770      	bx	lr
 800e64c:	4610      	mov	r0, r2
 800e64e:	e7e9      	b.n	800e624 <__lo0bits+0x2a>
 800e650:	2000      	movs	r0, #0
 800e652:	4770      	bx	lr
 800e654:	2020      	movs	r0, #32
 800e656:	4770      	bx	lr

0800e658 <__i2b>:
 800e658:	b510      	push	{r4, lr}
 800e65a:	460c      	mov	r4, r1
 800e65c:	2101      	movs	r1, #1
 800e65e:	f7ff fee9 	bl	800e434 <_Balloc>
 800e662:	2201      	movs	r2, #1
 800e664:	6144      	str	r4, [r0, #20]
 800e666:	6102      	str	r2, [r0, #16]
 800e668:	bd10      	pop	{r4, pc}

0800e66a <__multiply>:
 800e66a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66e:	4614      	mov	r4, r2
 800e670:	690a      	ldr	r2, [r1, #16]
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	429a      	cmp	r2, r3
 800e676:	bfb8      	it	lt
 800e678:	460b      	movlt	r3, r1
 800e67a:	4688      	mov	r8, r1
 800e67c:	bfbc      	itt	lt
 800e67e:	46a0      	movlt	r8, r4
 800e680:	461c      	movlt	r4, r3
 800e682:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e686:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e68a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e68e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e692:	eb07 0609 	add.w	r6, r7, r9
 800e696:	42b3      	cmp	r3, r6
 800e698:	bfb8      	it	lt
 800e69a:	3101      	addlt	r1, #1
 800e69c:	f7ff feca 	bl	800e434 <_Balloc>
 800e6a0:	f100 0514 	add.w	r5, r0, #20
 800e6a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e6a8:	462b      	mov	r3, r5
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	4573      	cmp	r3, lr
 800e6ae:	d316      	bcc.n	800e6de <__multiply+0x74>
 800e6b0:	f104 0214 	add.w	r2, r4, #20
 800e6b4:	f108 0114 	add.w	r1, r8, #20
 800e6b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e6bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	9b00      	ldr	r3, [sp, #0]
 800e6c4:	9201      	str	r2, [sp, #4]
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d80c      	bhi.n	800e6e4 <__multiply+0x7a>
 800e6ca:	2e00      	cmp	r6, #0
 800e6cc:	dd03      	ble.n	800e6d6 <__multiply+0x6c>
 800e6ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d05d      	beq.n	800e792 <__multiply+0x128>
 800e6d6:	6106      	str	r6, [r0, #16]
 800e6d8:	b003      	add	sp, #12
 800e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6de:	f843 2b04 	str.w	r2, [r3], #4
 800e6e2:	e7e3      	b.n	800e6ac <__multiply+0x42>
 800e6e4:	f8b2 b000 	ldrh.w	fp, [r2]
 800e6e8:	f1bb 0f00 	cmp.w	fp, #0
 800e6ec:	d023      	beq.n	800e736 <__multiply+0xcc>
 800e6ee:	4689      	mov	r9, r1
 800e6f0:	46ac      	mov	ip, r5
 800e6f2:	f04f 0800 	mov.w	r8, #0
 800e6f6:	f859 4b04 	ldr.w	r4, [r9], #4
 800e6fa:	f8dc a000 	ldr.w	sl, [ip]
 800e6fe:	b2a3      	uxth	r3, r4
 800e700:	fa1f fa8a 	uxth.w	sl, sl
 800e704:	fb0b a303 	mla	r3, fp, r3, sl
 800e708:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e70c:	f8dc 4000 	ldr.w	r4, [ip]
 800e710:	4443      	add	r3, r8
 800e712:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e716:	fb0b 840a 	mla	r4, fp, sl, r8
 800e71a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e71e:	46e2      	mov	sl, ip
 800e720:	b29b      	uxth	r3, r3
 800e722:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e726:	454f      	cmp	r7, r9
 800e728:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e72c:	f84a 3b04 	str.w	r3, [sl], #4
 800e730:	d82b      	bhi.n	800e78a <__multiply+0x120>
 800e732:	f8cc 8004 	str.w	r8, [ip, #4]
 800e736:	9b01      	ldr	r3, [sp, #4]
 800e738:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e73c:	3204      	adds	r2, #4
 800e73e:	f1ba 0f00 	cmp.w	sl, #0
 800e742:	d020      	beq.n	800e786 <__multiply+0x11c>
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	4689      	mov	r9, r1
 800e748:	46a8      	mov	r8, r5
 800e74a:	f04f 0b00 	mov.w	fp, #0
 800e74e:	f8b9 c000 	ldrh.w	ip, [r9]
 800e752:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e756:	fb0a 440c 	mla	r4, sl, ip, r4
 800e75a:	445c      	add	r4, fp
 800e75c:	46c4      	mov	ip, r8
 800e75e:	b29b      	uxth	r3, r3
 800e760:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e764:	f84c 3b04 	str.w	r3, [ip], #4
 800e768:	f859 3b04 	ldr.w	r3, [r9], #4
 800e76c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e770:	0c1b      	lsrs	r3, r3, #16
 800e772:	fb0a b303 	mla	r3, sl, r3, fp
 800e776:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e77a:	454f      	cmp	r7, r9
 800e77c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e780:	d805      	bhi.n	800e78e <__multiply+0x124>
 800e782:	f8c8 3004 	str.w	r3, [r8, #4]
 800e786:	3504      	adds	r5, #4
 800e788:	e79b      	b.n	800e6c2 <__multiply+0x58>
 800e78a:	46d4      	mov	ip, sl
 800e78c:	e7b3      	b.n	800e6f6 <__multiply+0x8c>
 800e78e:	46e0      	mov	r8, ip
 800e790:	e7dd      	b.n	800e74e <__multiply+0xe4>
 800e792:	3e01      	subs	r6, #1
 800e794:	e799      	b.n	800e6ca <__multiply+0x60>
	...

0800e798 <__pow5mult>:
 800e798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e79c:	4615      	mov	r5, r2
 800e79e:	f012 0203 	ands.w	r2, r2, #3
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	460f      	mov	r7, r1
 800e7a6:	d007      	beq.n	800e7b8 <__pow5mult+0x20>
 800e7a8:	3a01      	subs	r2, #1
 800e7aa:	4c21      	ldr	r4, [pc, #132]	; (800e830 <__pow5mult+0x98>)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7b2:	f7ff fe8a 	bl	800e4ca <__multadd>
 800e7b6:	4607      	mov	r7, r0
 800e7b8:	10ad      	asrs	r5, r5, #2
 800e7ba:	d035      	beq.n	800e828 <__pow5mult+0x90>
 800e7bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e7be:	b93c      	cbnz	r4, 800e7d0 <__pow5mult+0x38>
 800e7c0:	2010      	movs	r0, #16
 800e7c2:	f7fc ff79 	bl	800b6b8 <malloc>
 800e7c6:	6270      	str	r0, [r6, #36]	; 0x24
 800e7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7cc:	6004      	str	r4, [r0, #0]
 800e7ce:	60c4      	str	r4, [r0, #12]
 800e7d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7d8:	b94c      	cbnz	r4, 800e7ee <__pow5mult+0x56>
 800e7da:	f240 2171 	movw	r1, #625	; 0x271
 800e7de:	4630      	mov	r0, r6
 800e7e0:	f7ff ff3a 	bl	800e658 <__i2b>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	6003      	str	r3, [r0, #0]
 800e7ee:	f04f 0800 	mov.w	r8, #0
 800e7f2:	07eb      	lsls	r3, r5, #31
 800e7f4:	d50a      	bpl.n	800e80c <__pow5mult+0x74>
 800e7f6:	4639      	mov	r1, r7
 800e7f8:	4622      	mov	r2, r4
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f7ff ff35 	bl	800e66a <__multiply>
 800e800:	4639      	mov	r1, r7
 800e802:	4681      	mov	r9, r0
 800e804:	4630      	mov	r0, r6
 800e806:	f7ff fe49 	bl	800e49c <_Bfree>
 800e80a:	464f      	mov	r7, r9
 800e80c:	106d      	asrs	r5, r5, #1
 800e80e:	d00b      	beq.n	800e828 <__pow5mult+0x90>
 800e810:	6820      	ldr	r0, [r4, #0]
 800e812:	b938      	cbnz	r0, 800e824 <__pow5mult+0x8c>
 800e814:	4622      	mov	r2, r4
 800e816:	4621      	mov	r1, r4
 800e818:	4630      	mov	r0, r6
 800e81a:	f7ff ff26 	bl	800e66a <__multiply>
 800e81e:	6020      	str	r0, [r4, #0]
 800e820:	f8c0 8000 	str.w	r8, [r0]
 800e824:	4604      	mov	r4, r0
 800e826:	e7e4      	b.n	800e7f2 <__pow5mult+0x5a>
 800e828:	4638      	mov	r0, r7
 800e82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e82e:	bf00      	nop
 800e830:	08014fa8 	.word	0x08014fa8

0800e834 <__lshift>:
 800e834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e838:	460c      	mov	r4, r1
 800e83a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e83e:	6923      	ldr	r3, [r4, #16]
 800e840:	6849      	ldr	r1, [r1, #4]
 800e842:	eb0a 0903 	add.w	r9, sl, r3
 800e846:	68a3      	ldr	r3, [r4, #8]
 800e848:	4607      	mov	r7, r0
 800e84a:	4616      	mov	r6, r2
 800e84c:	f109 0501 	add.w	r5, r9, #1
 800e850:	42ab      	cmp	r3, r5
 800e852:	db32      	blt.n	800e8ba <__lshift+0x86>
 800e854:	4638      	mov	r0, r7
 800e856:	f7ff fded 	bl	800e434 <_Balloc>
 800e85a:	2300      	movs	r3, #0
 800e85c:	4680      	mov	r8, r0
 800e85e:	f100 0114 	add.w	r1, r0, #20
 800e862:	461a      	mov	r2, r3
 800e864:	4553      	cmp	r3, sl
 800e866:	db2b      	blt.n	800e8c0 <__lshift+0x8c>
 800e868:	6920      	ldr	r0, [r4, #16]
 800e86a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e86e:	f104 0314 	add.w	r3, r4, #20
 800e872:	f016 021f 	ands.w	r2, r6, #31
 800e876:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e87a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e87e:	d025      	beq.n	800e8cc <__lshift+0x98>
 800e880:	f1c2 0e20 	rsb	lr, r2, #32
 800e884:	2000      	movs	r0, #0
 800e886:	681e      	ldr	r6, [r3, #0]
 800e888:	468a      	mov	sl, r1
 800e88a:	4096      	lsls	r6, r2
 800e88c:	4330      	orrs	r0, r6
 800e88e:	f84a 0b04 	str.w	r0, [sl], #4
 800e892:	f853 0b04 	ldr.w	r0, [r3], #4
 800e896:	459c      	cmp	ip, r3
 800e898:	fa20 f00e 	lsr.w	r0, r0, lr
 800e89c:	d814      	bhi.n	800e8c8 <__lshift+0x94>
 800e89e:	6048      	str	r0, [r1, #4]
 800e8a0:	b108      	cbz	r0, 800e8a6 <__lshift+0x72>
 800e8a2:	f109 0502 	add.w	r5, r9, #2
 800e8a6:	3d01      	subs	r5, #1
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	f8c8 5010 	str.w	r5, [r8, #16]
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	f7ff fdf4 	bl	800e49c <_Bfree>
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ba:	3101      	adds	r1, #1
 800e8bc:	005b      	lsls	r3, r3, #1
 800e8be:	e7c7      	b.n	800e850 <__lshift+0x1c>
 800e8c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	e7cd      	b.n	800e864 <__lshift+0x30>
 800e8c8:	4651      	mov	r1, sl
 800e8ca:	e7dc      	b.n	800e886 <__lshift+0x52>
 800e8cc:	3904      	subs	r1, #4
 800e8ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800e8d6:	459c      	cmp	ip, r3
 800e8d8:	d8f9      	bhi.n	800e8ce <__lshift+0x9a>
 800e8da:	e7e4      	b.n	800e8a6 <__lshift+0x72>

0800e8dc <__mcmp>:
 800e8dc:	6903      	ldr	r3, [r0, #16]
 800e8de:	690a      	ldr	r2, [r1, #16]
 800e8e0:	1a9b      	subs	r3, r3, r2
 800e8e2:	b530      	push	{r4, r5, lr}
 800e8e4:	d10c      	bne.n	800e900 <__mcmp+0x24>
 800e8e6:	0092      	lsls	r2, r2, #2
 800e8e8:	3014      	adds	r0, #20
 800e8ea:	3114      	adds	r1, #20
 800e8ec:	1884      	adds	r4, r0, r2
 800e8ee:	4411      	add	r1, r2
 800e8f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e8f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e8f8:	4295      	cmp	r5, r2
 800e8fa:	d003      	beq.n	800e904 <__mcmp+0x28>
 800e8fc:	d305      	bcc.n	800e90a <__mcmp+0x2e>
 800e8fe:	2301      	movs	r3, #1
 800e900:	4618      	mov	r0, r3
 800e902:	bd30      	pop	{r4, r5, pc}
 800e904:	42a0      	cmp	r0, r4
 800e906:	d3f3      	bcc.n	800e8f0 <__mcmp+0x14>
 800e908:	e7fa      	b.n	800e900 <__mcmp+0x24>
 800e90a:	f04f 33ff 	mov.w	r3, #4294967295
 800e90e:	e7f7      	b.n	800e900 <__mcmp+0x24>

0800e910 <__mdiff>:
 800e910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e914:	460d      	mov	r5, r1
 800e916:	4607      	mov	r7, r0
 800e918:	4611      	mov	r1, r2
 800e91a:	4628      	mov	r0, r5
 800e91c:	4614      	mov	r4, r2
 800e91e:	f7ff ffdd 	bl	800e8dc <__mcmp>
 800e922:	1e06      	subs	r6, r0, #0
 800e924:	d108      	bne.n	800e938 <__mdiff+0x28>
 800e926:	4631      	mov	r1, r6
 800e928:	4638      	mov	r0, r7
 800e92a:	f7ff fd83 	bl	800e434 <_Balloc>
 800e92e:	2301      	movs	r3, #1
 800e930:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e938:	bfa4      	itt	ge
 800e93a:	4623      	movge	r3, r4
 800e93c:	462c      	movge	r4, r5
 800e93e:	4638      	mov	r0, r7
 800e940:	6861      	ldr	r1, [r4, #4]
 800e942:	bfa6      	itte	ge
 800e944:	461d      	movge	r5, r3
 800e946:	2600      	movge	r6, #0
 800e948:	2601      	movlt	r6, #1
 800e94a:	f7ff fd73 	bl	800e434 <_Balloc>
 800e94e:	692b      	ldr	r3, [r5, #16]
 800e950:	60c6      	str	r6, [r0, #12]
 800e952:	6926      	ldr	r6, [r4, #16]
 800e954:	f105 0914 	add.w	r9, r5, #20
 800e958:	f104 0214 	add.w	r2, r4, #20
 800e95c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e960:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e964:	f100 0514 	add.w	r5, r0, #20
 800e968:	f04f 0e00 	mov.w	lr, #0
 800e96c:	f852 ab04 	ldr.w	sl, [r2], #4
 800e970:	f859 4b04 	ldr.w	r4, [r9], #4
 800e974:	fa1e f18a 	uxtah	r1, lr, sl
 800e978:	b2a3      	uxth	r3, r4
 800e97a:	1ac9      	subs	r1, r1, r3
 800e97c:	0c23      	lsrs	r3, r4, #16
 800e97e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e982:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e986:	b289      	uxth	r1, r1
 800e988:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e98c:	45c8      	cmp	r8, r9
 800e98e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e992:	4694      	mov	ip, r2
 800e994:	f845 3b04 	str.w	r3, [r5], #4
 800e998:	d8e8      	bhi.n	800e96c <__mdiff+0x5c>
 800e99a:	45bc      	cmp	ip, r7
 800e99c:	d304      	bcc.n	800e9a8 <__mdiff+0x98>
 800e99e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e9a2:	b183      	cbz	r3, 800e9c6 <__mdiff+0xb6>
 800e9a4:	6106      	str	r6, [r0, #16]
 800e9a6:	e7c5      	b.n	800e934 <__mdiff+0x24>
 800e9a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e9ac:	fa1e f381 	uxtah	r3, lr, r1
 800e9b0:	141a      	asrs	r2, r3, #16
 800e9b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e9c0:	f845 3b04 	str.w	r3, [r5], #4
 800e9c4:	e7e9      	b.n	800e99a <__mdiff+0x8a>
 800e9c6:	3e01      	subs	r6, #1
 800e9c8:	e7e9      	b.n	800e99e <__mdiff+0x8e>
	...

0800e9cc <__ulp>:
 800e9cc:	4b12      	ldr	r3, [pc, #72]	; (800ea18 <__ulp+0x4c>)
 800e9ce:	ee10 2a90 	vmov	r2, s1
 800e9d2:	401a      	ands	r2, r3
 800e9d4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	dd04      	ble.n	800e9e6 <__ulp+0x1a>
 800e9dc:	2000      	movs	r0, #0
 800e9de:	4619      	mov	r1, r3
 800e9e0:	ec41 0b10 	vmov	d0, r0, r1
 800e9e4:	4770      	bx	lr
 800e9e6:	425b      	negs	r3, r3
 800e9e8:	151b      	asrs	r3, r3, #20
 800e9ea:	2b13      	cmp	r3, #19
 800e9ec:	f04f 0000 	mov.w	r0, #0
 800e9f0:	f04f 0100 	mov.w	r1, #0
 800e9f4:	dc04      	bgt.n	800ea00 <__ulp+0x34>
 800e9f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e9fa:	fa42 f103 	asr.w	r1, r2, r3
 800e9fe:	e7ef      	b.n	800e9e0 <__ulp+0x14>
 800ea00:	3b14      	subs	r3, #20
 800ea02:	2b1e      	cmp	r3, #30
 800ea04:	f04f 0201 	mov.w	r2, #1
 800ea08:	bfda      	itte	le
 800ea0a:	f1c3 031f 	rsble	r3, r3, #31
 800ea0e:	fa02 f303 	lslle.w	r3, r2, r3
 800ea12:	4613      	movgt	r3, r2
 800ea14:	4618      	mov	r0, r3
 800ea16:	e7e3      	b.n	800e9e0 <__ulp+0x14>
 800ea18:	7ff00000 	.word	0x7ff00000

0800ea1c <__b2d>:
 800ea1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1e:	6905      	ldr	r5, [r0, #16]
 800ea20:	f100 0714 	add.w	r7, r0, #20
 800ea24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ea28:	1f2e      	subs	r6, r5, #4
 800ea2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f7ff fdc4 	bl	800e5bc <__hi0bits>
 800ea34:	f1c0 0320 	rsb	r3, r0, #32
 800ea38:	280a      	cmp	r0, #10
 800ea3a:	600b      	str	r3, [r1, #0]
 800ea3c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800eab4 <__b2d+0x98>
 800ea40:	dc14      	bgt.n	800ea6c <__b2d+0x50>
 800ea42:	f1c0 0e0b 	rsb	lr, r0, #11
 800ea46:	fa24 f10e 	lsr.w	r1, r4, lr
 800ea4a:	42b7      	cmp	r7, r6
 800ea4c:	ea41 030c 	orr.w	r3, r1, ip
 800ea50:	bf34      	ite	cc
 800ea52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ea56:	2100      	movcs	r1, #0
 800ea58:	3015      	adds	r0, #21
 800ea5a:	fa04 f000 	lsl.w	r0, r4, r0
 800ea5e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ea62:	ea40 0201 	orr.w	r2, r0, r1
 800ea66:	ec43 2b10 	vmov	d0, r2, r3
 800ea6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea6c:	42b7      	cmp	r7, r6
 800ea6e:	bf3a      	itte	cc
 800ea70:	f1a5 0608 	subcc.w	r6, r5, #8
 800ea74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ea78:	2100      	movcs	r1, #0
 800ea7a:	380b      	subs	r0, #11
 800ea7c:	d015      	beq.n	800eaaa <__b2d+0x8e>
 800ea7e:	4084      	lsls	r4, r0
 800ea80:	f1c0 0520 	rsb	r5, r0, #32
 800ea84:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ea88:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ea8c:	42be      	cmp	r6, r7
 800ea8e:	fa21 fc05 	lsr.w	ip, r1, r5
 800ea92:	ea44 030c 	orr.w	r3, r4, ip
 800ea96:	bf8c      	ite	hi
 800ea98:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ea9c:	2400      	movls	r4, #0
 800ea9e:	fa01 f000 	lsl.w	r0, r1, r0
 800eaa2:	40ec      	lsrs	r4, r5
 800eaa4:	ea40 0204 	orr.w	r2, r0, r4
 800eaa8:	e7dd      	b.n	800ea66 <__b2d+0x4a>
 800eaaa:	ea44 030c 	orr.w	r3, r4, ip
 800eaae:	460a      	mov	r2, r1
 800eab0:	e7d9      	b.n	800ea66 <__b2d+0x4a>
 800eab2:	bf00      	nop
 800eab4:	3ff00000 	.word	0x3ff00000

0800eab8 <__d2b>:
 800eab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eabc:	460e      	mov	r6, r1
 800eabe:	2101      	movs	r1, #1
 800eac0:	ec59 8b10 	vmov	r8, r9, d0
 800eac4:	4615      	mov	r5, r2
 800eac6:	f7ff fcb5 	bl	800e434 <_Balloc>
 800eaca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800eace:	4607      	mov	r7, r0
 800ead0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ead4:	bb34      	cbnz	r4, 800eb24 <__d2b+0x6c>
 800ead6:	9301      	str	r3, [sp, #4]
 800ead8:	f1b8 0300 	subs.w	r3, r8, #0
 800eadc:	d027      	beq.n	800eb2e <__d2b+0x76>
 800eade:	a802      	add	r0, sp, #8
 800eae0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800eae4:	f7ff fd89 	bl	800e5fa <__lo0bits>
 800eae8:	9900      	ldr	r1, [sp, #0]
 800eaea:	b1f0      	cbz	r0, 800eb2a <__d2b+0x72>
 800eaec:	9a01      	ldr	r2, [sp, #4]
 800eaee:	f1c0 0320 	rsb	r3, r0, #32
 800eaf2:	fa02 f303 	lsl.w	r3, r2, r3
 800eaf6:	430b      	orrs	r3, r1
 800eaf8:	40c2      	lsrs	r2, r0
 800eafa:	617b      	str	r3, [r7, #20]
 800eafc:	9201      	str	r2, [sp, #4]
 800eafe:	9b01      	ldr	r3, [sp, #4]
 800eb00:	61bb      	str	r3, [r7, #24]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	bf14      	ite	ne
 800eb06:	2102      	movne	r1, #2
 800eb08:	2101      	moveq	r1, #1
 800eb0a:	6139      	str	r1, [r7, #16]
 800eb0c:	b1c4      	cbz	r4, 800eb40 <__d2b+0x88>
 800eb0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800eb12:	4404      	add	r4, r0
 800eb14:	6034      	str	r4, [r6, #0]
 800eb16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb1a:	6028      	str	r0, [r5, #0]
 800eb1c:	4638      	mov	r0, r7
 800eb1e:	b003      	add	sp, #12
 800eb20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb28:	e7d5      	b.n	800ead6 <__d2b+0x1e>
 800eb2a:	6179      	str	r1, [r7, #20]
 800eb2c:	e7e7      	b.n	800eafe <__d2b+0x46>
 800eb2e:	a801      	add	r0, sp, #4
 800eb30:	f7ff fd63 	bl	800e5fa <__lo0bits>
 800eb34:	9b01      	ldr	r3, [sp, #4]
 800eb36:	617b      	str	r3, [r7, #20]
 800eb38:	2101      	movs	r1, #1
 800eb3a:	6139      	str	r1, [r7, #16]
 800eb3c:	3020      	adds	r0, #32
 800eb3e:	e7e5      	b.n	800eb0c <__d2b+0x54>
 800eb40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800eb44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb48:	6030      	str	r0, [r6, #0]
 800eb4a:	6918      	ldr	r0, [r3, #16]
 800eb4c:	f7ff fd36 	bl	800e5bc <__hi0bits>
 800eb50:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800eb54:	e7e1      	b.n	800eb1a <__d2b+0x62>

0800eb56 <__ratio>:
 800eb56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5a:	4688      	mov	r8, r1
 800eb5c:	4669      	mov	r1, sp
 800eb5e:	4681      	mov	r9, r0
 800eb60:	f7ff ff5c 	bl	800ea1c <__b2d>
 800eb64:	a901      	add	r1, sp, #4
 800eb66:	4640      	mov	r0, r8
 800eb68:	ec57 6b10 	vmov	r6, r7, d0
 800eb6c:	ee10 4a10 	vmov	r4, s0
 800eb70:	f7ff ff54 	bl	800ea1c <__b2d>
 800eb74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb78:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eb7c:	eba3 0c02 	sub.w	ip, r3, r2
 800eb80:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eb84:	1a9b      	subs	r3, r3, r2
 800eb86:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eb8a:	ec51 0b10 	vmov	r0, r1, d0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	ee10 aa10 	vmov	sl, s0
 800eb94:	bfce      	itee	gt
 800eb96:	463a      	movgt	r2, r7
 800eb98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb9c:	460a      	movle	r2, r1
 800eb9e:	463d      	mov	r5, r7
 800eba0:	468b      	mov	fp, r1
 800eba2:	bfcc      	ite	gt
 800eba4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800eba8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ebac:	ec45 4b17 	vmov	d7, r4, r5
 800ebb0:	ec4b ab16 	vmov	d6, sl, fp
 800ebb4:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800ebb8:	b003      	add	sp, #12
 800ebba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebbe <__copybits>:
 800ebbe:	3901      	subs	r1, #1
 800ebc0:	b510      	push	{r4, lr}
 800ebc2:	1149      	asrs	r1, r1, #5
 800ebc4:	6914      	ldr	r4, [r2, #16]
 800ebc6:	3101      	adds	r1, #1
 800ebc8:	f102 0314 	add.w	r3, r2, #20
 800ebcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ebd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ebd4:	42a3      	cmp	r3, r4
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	d303      	bcc.n	800ebe2 <__copybits+0x24>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	428a      	cmp	r2, r1
 800ebde:	d305      	bcc.n	800ebec <__copybits+0x2e>
 800ebe0:	bd10      	pop	{r4, pc}
 800ebe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebe6:	f840 2b04 	str.w	r2, [r0], #4
 800ebea:	e7f3      	b.n	800ebd4 <__copybits+0x16>
 800ebec:	f842 3b04 	str.w	r3, [r2], #4
 800ebf0:	e7f4      	b.n	800ebdc <__copybits+0x1e>

0800ebf2 <__any_on>:
 800ebf2:	f100 0214 	add.w	r2, r0, #20
 800ebf6:	6900      	ldr	r0, [r0, #16]
 800ebf8:	114b      	asrs	r3, r1, #5
 800ebfa:	4298      	cmp	r0, r3
 800ebfc:	b510      	push	{r4, lr}
 800ebfe:	db11      	blt.n	800ec24 <__any_on+0x32>
 800ec00:	dd0a      	ble.n	800ec18 <__any_on+0x26>
 800ec02:	f011 011f 	ands.w	r1, r1, #31
 800ec06:	d007      	beq.n	800ec18 <__any_on+0x26>
 800ec08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ec0c:	fa24 f001 	lsr.w	r0, r4, r1
 800ec10:	fa00 f101 	lsl.w	r1, r0, r1
 800ec14:	428c      	cmp	r4, r1
 800ec16:	d10b      	bne.n	800ec30 <__any_on+0x3e>
 800ec18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d803      	bhi.n	800ec28 <__any_on+0x36>
 800ec20:	2000      	movs	r0, #0
 800ec22:	bd10      	pop	{r4, pc}
 800ec24:	4603      	mov	r3, r0
 800ec26:	e7f7      	b.n	800ec18 <__any_on+0x26>
 800ec28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec2c:	2900      	cmp	r1, #0
 800ec2e:	d0f5      	beq.n	800ec1c <__any_on+0x2a>
 800ec30:	2001      	movs	r0, #1
 800ec32:	e7f6      	b.n	800ec22 <__any_on+0x30>

0800ec34 <_calloc_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	fb02 f401 	mul.w	r4, r2, r1
 800ec3a:	4621      	mov	r1, r4
 800ec3c:	f7fc fdae 	bl	800b79c <_malloc_r>
 800ec40:	4605      	mov	r5, r0
 800ec42:	b118      	cbz	r0, 800ec4c <_calloc_r+0x18>
 800ec44:	4622      	mov	r2, r4
 800ec46:	2100      	movs	r1, #0
 800ec48:	f7fc fd51 	bl	800b6ee <memset>
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}

0800ec50 <__ssputs_r>:
 800ec50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec54:	688e      	ldr	r6, [r1, #8]
 800ec56:	429e      	cmp	r6, r3
 800ec58:	4682      	mov	sl, r0
 800ec5a:	460c      	mov	r4, r1
 800ec5c:	4690      	mov	r8, r2
 800ec5e:	4699      	mov	r9, r3
 800ec60:	d837      	bhi.n	800ecd2 <__ssputs_r+0x82>
 800ec62:	898a      	ldrh	r2, [r1, #12]
 800ec64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec68:	d031      	beq.n	800ecce <__ssputs_r+0x7e>
 800ec6a:	6825      	ldr	r5, [r4, #0]
 800ec6c:	6909      	ldr	r1, [r1, #16]
 800ec6e:	1a6f      	subs	r7, r5, r1
 800ec70:	6965      	ldr	r5, [r4, #20]
 800ec72:	2302      	movs	r3, #2
 800ec74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec78:	fb95 f5f3 	sdiv	r5, r5, r3
 800ec7c:	f109 0301 	add.w	r3, r9, #1
 800ec80:	443b      	add	r3, r7
 800ec82:	429d      	cmp	r5, r3
 800ec84:	bf38      	it	cc
 800ec86:	461d      	movcc	r5, r3
 800ec88:	0553      	lsls	r3, r2, #21
 800ec8a:	d530      	bpl.n	800ecee <__ssputs_r+0x9e>
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	f7fc fd85 	bl	800b79c <_malloc_r>
 800ec92:	4606      	mov	r6, r0
 800ec94:	b950      	cbnz	r0, 800ecac <__ssputs_r+0x5c>
 800ec96:	230c      	movs	r3, #12
 800ec98:	f8ca 3000 	str.w	r3, [sl]
 800ec9c:	89a3      	ldrh	r3, [r4, #12]
 800ec9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eca2:	81a3      	strh	r3, [r4, #12]
 800eca4:	f04f 30ff 	mov.w	r0, #4294967295
 800eca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecac:	463a      	mov	r2, r7
 800ecae:	6921      	ldr	r1, [r4, #16]
 800ecb0:	f7fc fd12 	bl	800b6d8 <memcpy>
 800ecb4:	89a3      	ldrh	r3, [r4, #12]
 800ecb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecbe:	81a3      	strh	r3, [r4, #12]
 800ecc0:	6126      	str	r6, [r4, #16]
 800ecc2:	6165      	str	r5, [r4, #20]
 800ecc4:	443e      	add	r6, r7
 800ecc6:	1bed      	subs	r5, r5, r7
 800ecc8:	6026      	str	r6, [r4, #0]
 800ecca:	60a5      	str	r5, [r4, #8]
 800eccc:	464e      	mov	r6, r9
 800ecce:	454e      	cmp	r6, r9
 800ecd0:	d900      	bls.n	800ecd4 <__ssputs_r+0x84>
 800ecd2:	464e      	mov	r6, r9
 800ecd4:	4632      	mov	r2, r6
 800ecd6:	4641      	mov	r1, r8
 800ecd8:	6820      	ldr	r0, [r4, #0]
 800ecda:	f000 f92a 	bl	800ef32 <memmove>
 800ecde:	68a3      	ldr	r3, [r4, #8]
 800ece0:	1b9b      	subs	r3, r3, r6
 800ece2:	60a3      	str	r3, [r4, #8]
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	441e      	add	r6, r3
 800ece8:	6026      	str	r6, [r4, #0]
 800ecea:	2000      	movs	r0, #0
 800ecec:	e7dc      	b.n	800eca8 <__ssputs_r+0x58>
 800ecee:	462a      	mov	r2, r5
 800ecf0:	f000 f938 	bl	800ef64 <_realloc_r>
 800ecf4:	4606      	mov	r6, r0
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d1e2      	bne.n	800ecc0 <__ssputs_r+0x70>
 800ecfa:	6921      	ldr	r1, [r4, #16]
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	f7fc fcff 	bl	800b700 <_free_r>
 800ed02:	e7c8      	b.n	800ec96 <__ssputs_r+0x46>

0800ed04 <_svfiprintf_r>:
 800ed04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed08:	461d      	mov	r5, r3
 800ed0a:	898b      	ldrh	r3, [r1, #12]
 800ed0c:	061f      	lsls	r7, r3, #24
 800ed0e:	b09d      	sub	sp, #116	; 0x74
 800ed10:	4680      	mov	r8, r0
 800ed12:	460c      	mov	r4, r1
 800ed14:	4616      	mov	r6, r2
 800ed16:	d50f      	bpl.n	800ed38 <_svfiprintf_r+0x34>
 800ed18:	690b      	ldr	r3, [r1, #16]
 800ed1a:	b96b      	cbnz	r3, 800ed38 <_svfiprintf_r+0x34>
 800ed1c:	2140      	movs	r1, #64	; 0x40
 800ed1e:	f7fc fd3d 	bl	800b79c <_malloc_r>
 800ed22:	6020      	str	r0, [r4, #0]
 800ed24:	6120      	str	r0, [r4, #16]
 800ed26:	b928      	cbnz	r0, 800ed34 <_svfiprintf_r+0x30>
 800ed28:	230c      	movs	r3, #12
 800ed2a:	f8c8 3000 	str.w	r3, [r8]
 800ed2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed32:	e0c8      	b.n	800eec6 <_svfiprintf_r+0x1c2>
 800ed34:	2340      	movs	r3, #64	; 0x40
 800ed36:	6163      	str	r3, [r4, #20]
 800ed38:	2300      	movs	r3, #0
 800ed3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed3c:	2320      	movs	r3, #32
 800ed3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed42:	2330      	movs	r3, #48	; 0x30
 800ed44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed48:	9503      	str	r5, [sp, #12]
 800ed4a:	f04f 0b01 	mov.w	fp, #1
 800ed4e:	4637      	mov	r7, r6
 800ed50:	463d      	mov	r5, r7
 800ed52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed56:	b10b      	cbz	r3, 800ed5c <_svfiprintf_r+0x58>
 800ed58:	2b25      	cmp	r3, #37	; 0x25
 800ed5a:	d13e      	bne.n	800edda <_svfiprintf_r+0xd6>
 800ed5c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ed60:	d00b      	beq.n	800ed7a <_svfiprintf_r+0x76>
 800ed62:	4653      	mov	r3, sl
 800ed64:	4632      	mov	r2, r6
 800ed66:	4621      	mov	r1, r4
 800ed68:	4640      	mov	r0, r8
 800ed6a:	f7ff ff71 	bl	800ec50 <__ssputs_r>
 800ed6e:	3001      	adds	r0, #1
 800ed70:	f000 80a4 	beq.w	800eebc <_svfiprintf_r+0x1b8>
 800ed74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed76:	4453      	add	r3, sl
 800ed78:	9309      	str	r3, [sp, #36]	; 0x24
 800ed7a:	783b      	ldrb	r3, [r7, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f000 809d 	beq.w	800eebc <_svfiprintf_r+0x1b8>
 800ed82:	2300      	movs	r3, #0
 800ed84:	f04f 32ff 	mov.w	r2, #4294967295
 800ed88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed8c:	9304      	str	r3, [sp, #16]
 800ed8e:	9307      	str	r3, [sp, #28]
 800ed90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed94:	931a      	str	r3, [sp, #104]	; 0x68
 800ed96:	462f      	mov	r7, r5
 800ed98:	2205      	movs	r2, #5
 800ed9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ed9e:	4850      	ldr	r0, [pc, #320]	; (800eee0 <_svfiprintf_r+0x1dc>)
 800eda0:	f7f1 fb06 	bl	80003b0 <memchr>
 800eda4:	9b04      	ldr	r3, [sp, #16]
 800eda6:	b9d0      	cbnz	r0, 800edde <_svfiprintf_r+0xda>
 800eda8:	06d9      	lsls	r1, r3, #27
 800edaa:	bf44      	itt	mi
 800edac:	2220      	movmi	r2, #32
 800edae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800edb2:	071a      	lsls	r2, r3, #28
 800edb4:	bf44      	itt	mi
 800edb6:	222b      	movmi	r2, #43	; 0x2b
 800edb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800edbc:	782a      	ldrb	r2, [r5, #0]
 800edbe:	2a2a      	cmp	r2, #42	; 0x2a
 800edc0:	d015      	beq.n	800edee <_svfiprintf_r+0xea>
 800edc2:	9a07      	ldr	r2, [sp, #28]
 800edc4:	462f      	mov	r7, r5
 800edc6:	2000      	movs	r0, #0
 800edc8:	250a      	movs	r5, #10
 800edca:	4639      	mov	r1, r7
 800edcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edd0:	3b30      	subs	r3, #48	; 0x30
 800edd2:	2b09      	cmp	r3, #9
 800edd4:	d94d      	bls.n	800ee72 <_svfiprintf_r+0x16e>
 800edd6:	b1b8      	cbz	r0, 800ee08 <_svfiprintf_r+0x104>
 800edd8:	e00f      	b.n	800edfa <_svfiprintf_r+0xf6>
 800edda:	462f      	mov	r7, r5
 800eddc:	e7b8      	b.n	800ed50 <_svfiprintf_r+0x4c>
 800edde:	4a40      	ldr	r2, [pc, #256]	; (800eee0 <_svfiprintf_r+0x1dc>)
 800ede0:	1a80      	subs	r0, r0, r2
 800ede2:	fa0b f000 	lsl.w	r0, fp, r0
 800ede6:	4318      	orrs	r0, r3
 800ede8:	9004      	str	r0, [sp, #16]
 800edea:	463d      	mov	r5, r7
 800edec:	e7d3      	b.n	800ed96 <_svfiprintf_r+0x92>
 800edee:	9a03      	ldr	r2, [sp, #12]
 800edf0:	1d11      	adds	r1, r2, #4
 800edf2:	6812      	ldr	r2, [r2, #0]
 800edf4:	9103      	str	r1, [sp, #12]
 800edf6:	2a00      	cmp	r2, #0
 800edf8:	db01      	blt.n	800edfe <_svfiprintf_r+0xfa>
 800edfa:	9207      	str	r2, [sp, #28]
 800edfc:	e004      	b.n	800ee08 <_svfiprintf_r+0x104>
 800edfe:	4252      	negs	r2, r2
 800ee00:	f043 0302 	orr.w	r3, r3, #2
 800ee04:	9207      	str	r2, [sp, #28]
 800ee06:	9304      	str	r3, [sp, #16]
 800ee08:	783b      	ldrb	r3, [r7, #0]
 800ee0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee0c:	d10c      	bne.n	800ee28 <_svfiprintf_r+0x124>
 800ee0e:	787b      	ldrb	r3, [r7, #1]
 800ee10:	2b2a      	cmp	r3, #42	; 0x2a
 800ee12:	d133      	bne.n	800ee7c <_svfiprintf_r+0x178>
 800ee14:	9b03      	ldr	r3, [sp, #12]
 800ee16:	1d1a      	adds	r2, r3, #4
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	9203      	str	r2, [sp, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	bfb8      	it	lt
 800ee20:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee24:	3702      	adds	r7, #2
 800ee26:	9305      	str	r3, [sp, #20]
 800ee28:	4d2e      	ldr	r5, [pc, #184]	; (800eee4 <_svfiprintf_r+0x1e0>)
 800ee2a:	7839      	ldrb	r1, [r7, #0]
 800ee2c:	2203      	movs	r2, #3
 800ee2e:	4628      	mov	r0, r5
 800ee30:	f7f1 fabe 	bl	80003b0 <memchr>
 800ee34:	b138      	cbz	r0, 800ee46 <_svfiprintf_r+0x142>
 800ee36:	2340      	movs	r3, #64	; 0x40
 800ee38:	1b40      	subs	r0, r0, r5
 800ee3a:	fa03 f000 	lsl.w	r0, r3, r0
 800ee3e:	9b04      	ldr	r3, [sp, #16]
 800ee40:	4303      	orrs	r3, r0
 800ee42:	3701      	adds	r7, #1
 800ee44:	9304      	str	r3, [sp, #16]
 800ee46:	7839      	ldrb	r1, [r7, #0]
 800ee48:	4827      	ldr	r0, [pc, #156]	; (800eee8 <_svfiprintf_r+0x1e4>)
 800ee4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee4e:	2206      	movs	r2, #6
 800ee50:	1c7e      	adds	r6, r7, #1
 800ee52:	f7f1 faad 	bl	80003b0 <memchr>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d038      	beq.n	800eecc <_svfiprintf_r+0x1c8>
 800ee5a:	4b24      	ldr	r3, [pc, #144]	; (800eeec <_svfiprintf_r+0x1e8>)
 800ee5c:	bb13      	cbnz	r3, 800eea4 <_svfiprintf_r+0x1a0>
 800ee5e:	9b03      	ldr	r3, [sp, #12]
 800ee60:	3307      	adds	r3, #7
 800ee62:	f023 0307 	bic.w	r3, r3, #7
 800ee66:	3308      	adds	r3, #8
 800ee68:	9303      	str	r3, [sp, #12]
 800ee6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee6c:	444b      	add	r3, r9
 800ee6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee70:	e76d      	b.n	800ed4e <_svfiprintf_r+0x4a>
 800ee72:	fb05 3202 	mla	r2, r5, r2, r3
 800ee76:	2001      	movs	r0, #1
 800ee78:	460f      	mov	r7, r1
 800ee7a:	e7a6      	b.n	800edca <_svfiprintf_r+0xc6>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	3701      	adds	r7, #1
 800ee80:	9305      	str	r3, [sp, #20]
 800ee82:	4619      	mov	r1, r3
 800ee84:	250a      	movs	r5, #10
 800ee86:	4638      	mov	r0, r7
 800ee88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee8c:	3a30      	subs	r2, #48	; 0x30
 800ee8e:	2a09      	cmp	r2, #9
 800ee90:	d903      	bls.n	800ee9a <_svfiprintf_r+0x196>
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d0c8      	beq.n	800ee28 <_svfiprintf_r+0x124>
 800ee96:	9105      	str	r1, [sp, #20]
 800ee98:	e7c6      	b.n	800ee28 <_svfiprintf_r+0x124>
 800ee9a:	fb05 2101 	mla	r1, r5, r1, r2
 800ee9e:	2301      	movs	r3, #1
 800eea0:	4607      	mov	r7, r0
 800eea2:	e7f0      	b.n	800ee86 <_svfiprintf_r+0x182>
 800eea4:	ab03      	add	r3, sp, #12
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	4622      	mov	r2, r4
 800eeaa:	4b11      	ldr	r3, [pc, #68]	; (800eef0 <_svfiprintf_r+0x1ec>)
 800eeac:	a904      	add	r1, sp, #16
 800eeae:	4640      	mov	r0, r8
 800eeb0:	f7fc fd56 	bl	800b960 <_printf_float>
 800eeb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eeb8:	4681      	mov	r9, r0
 800eeba:	d1d6      	bne.n	800ee6a <_svfiprintf_r+0x166>
 800eebc:	89a3      	ldrh	r3, [r4, #12]
 800eebe:	065b      	lsls	r3, r3, #25
 800eec0:	f53f af35 	bmi.w	800ed2e <_svfiprintf_r+0x2a>
 800eec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eec6:	b01d      	add	sp, #116	; 0x74
 800eec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eecc:	ab03      	add	r3, sp, #12
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	4622      	mov	r2, r4
 800eed2:	4b07      	ldr	r3, [pc, #28]	; (800eef0 <_svfiprintf_r+0x1ec>)
 800eed4:	a904      	add	r1, sp, #16
 800eed6:	4640      	mov	r0, r8
 800eed8:	f7fc ffe4 	bl	800bea4 <_printf_i>
 800eedc:	e7ea      	b.n	800eeb4 <_svfiprintf_r+0x1b0>
 800eede:	bf00      	nop
 800eee0:	08014fb4 	.word	0x08014fb4
 800eee4:	08014fba 	.word	0x08014fba
 800eee8:	08014fbe 	.word	0x08014fbe
 800eeec:	0800b961 	.word	0x0800b961
 800eef0:	0800ec51 	.word	0x0800ec51

0800eef4 <strncmp>:
 800eef4:	b510      	push	{r4, lr}
 800eef6:	b16a      	cbz	r2, 800ef14 <strncmp+0x20>
 800eef8:	3901      	subs	r1, #1
 800eefa:	1884      	adds	r4, r0, r2
 800eefc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ef00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d103      	bne.n	800ef10 <strncmp+0x1c>
 800ef08:	42a0      	cmp	r0, r4
 800ef0a:	d001      	beq.n	800ef10 <strncmp+0x1c>
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d1f5      	bne.n	800eefc <strncmp+0x8>
 800ef10:	1a98      	subs	r0, r3, r2
 800ef12:	bd10      	pop	{r4, pc}
 800ef14:	4610      	mov	r0, r2
 800ef16:	e7fc      	b.n	800ef12 <strncmp+0x1e>

0800ef18 <__ascii_wctomb>:
 800ef18:	b149      	cbz	r1, 800ef2e <__ascii_wctomb+0x16>
 800ef1a:	2aff      	cmp	r2, #255	; 0xff
 800ef1c:	bf85      	ittet	hi
 800ef1e:	238a      	movhi	r3, #138	; 0x8a
 800ef20:	6003      	strhi	r3, [r0, #0]
 800ef22:	700a      	strbls	r2, [r1, #0]
 800ef24:	f04f 30ff 	movhi.w	r0, #4294967295
 800ef28:	bf98      	it	ls
 800ef2a:	2001      	movls	r0, #1
 800ef2c:	4770      	bx	lr
 800ef2e:	4608      	mov	r0, r1
 800ef30:	4770      	bx	lr

0800ef32 <memmove>:
 800ef32:	4288      	cmp	r0, r1
 800ef34:	b510      	push	{r4, lr}
 800ef36:	eb01 0302 	add.w	r3, r1, r2
 800ef3a:	d807      	bhi.n	800ef4c <memmove+0x1a>
 800ef3c:	1e42      	subs	r2, r0, #1
 800ef3e:	4299      	cmp	r1, r3
 800ef40:	d00a      	beq.n	800ef58 <memmove+0x26>
 800ef42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef46:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ef4a:	e7f8      	b.n	800ef3e <memmove+0xc>
 800ef4c:	4283      	cmp	r3, r0
 800ef4e:	d9f5      	bls.n	800ef3c <memmove+0xa>
 800ef50:	1881      	adds	r1, r0, r2
 800ef52:	1ad2      	subs	r2, r2, r3
 800ef54:	42d3      	cmn	r3, r2
 800ef56:	d100      	bne.n	800ef5a <memmove+0x28>
 800ef58:	bd10      	pop	{r4, pc}
 800ef5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ef62:	e7f7      	b.n	800ef54 <memmove+0x22>

0800ef64 <_realloc_r>:
 800ef64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef66:	4607      	mov	r7, r0
 800ef68:	4614      	mov	r4, r2
 800ef6a:	460e      	mov	r6, r1
 800ef6c:	b921      	cbnz	r1, 800ef78 <_realloc_r+0x14>
 800ef6e:	4611      	mov	r1, r2
 800ef70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef74:	f7fc bc12 	b.w	800b79c <_malloc_r>
 800ef78:	b922      	cbnz	r2, 800ef84 <_realloc_r+0x20>
 800ef7a:	f7fc fbc1 	bl	800b700 <_free_r>
 800ef7e:	4625      	mov	r5, r4
 800ef80:	4628      	mov	r0, r5
 800ef82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef84:	f000 f814 	bl	800efb0 <_malloc_usable_size_r>
 800ef88:	42a0      	cmp	r0, r4
 800ef8a:	d20f      	bcs.n	800efac <_realloc_r+0x48>
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	4638      	mov	r0, r7
 800ef90:	f7fc fc04 	bl	800b79c <_malloc_r>
 800ef94:	4605      	mov	r5, r0
 800ef96:	2800      	cmp	r0, #0
 800ef98:	d0f2      	beq.n	800ef80 <_realloc_r+0x1c>
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	f7fc fb9b 	bl	800b6d8 <memcpy>
 800efa2:	4631      	mov	r1, r6
 800efa4:	4638      	mov	r0, r7
 800efa6:	f7fc fbab 	bl	800b700 <_free_r>
 800efaa:	e7e9      	b.n	800ef80 <_realloc_r+0x1c>
 800efac:	4635      	mov	r5, r6
 800efae:	e7e7      	b.n	800ef80 <_realloc_r+0x1c>

0800efb0 <_malloc_usable_size_r>:
 800efb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efb4:	1f18      	subs	r0, r3, #4
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	bfbc      	itt	lt
 800efba:	580b      	ldrlt	r3, [r1, r0]
 800efbc:	18c0      	addlt	r0, r0, r3
 800efbe:	4770      	bx	lr

0800efc0 <_init>:
 800efc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc2:	bf00      	nop
 800efc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efc6:	bc08      	pop	{r3}
 800efc8:	469e      	mov	lr, r3
 800efca:	4770      	bx	lr

0800efcc <_fini>:
 800efcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efce:	bf00      	nop
 800efd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efd2:	bc08      	pop	{r3}
 800efd4:	469e      	mov	lr, r3
 800efd6:	4770      	bx	lr
